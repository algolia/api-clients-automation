package composition

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import (
	"encoding/json"
	"fmt"
)

// Distinct - Determines how many records of a group are included in the search results.  Records with the same value for the `attributeForDistinct` attribute are considered a group. The `distinct` setting controls how many members of the group are returned. This is useful for [deduplication and grouping](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).  The `distinct` setting is ignored if `attributeForDistinct` is not set.
type Distinct struct {
	Bool *bool
	Int  *int
}

// intAsDistinct is a convenience function that returns int wrapped in Distinct.
func IntAsDistinct(v int) *Distinct {
	return &Distinct{
		Int: &v,
	}
}

// boolAsDistinct is a convenience function that returns bool wrapped in Distinct.
func BoolAsDistinct(v bool) *Distinct {
	return &Distinct{
		Bool: &v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct.
func (dst *Distinct) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal data into Int
	err = json.Unmarshal(data, &dst.Int)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.Int = nil
	}
	// try to unmarshal data into Bool
	err = json.Unmarshal(data, &dst.Bool)
	if err == nil {
		return nil // found the correct type
	} else {
		dst.Bool = nil
	}

	return fmt.Errorf("data failed to match schemas in oneOf(Distinct)")
}

// Marshal data from the first non-nil pointers in the struct to JSON.
func (src Distinct) MarshalJSON() ([]byte, error) {
	if src.Bool != nil {
		serialized, err := json.Marshal(&src.Bool)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Bool of Distinct: %w", err)
		}

		return serialized, nil
	}

	if src.Int != nil {
		serialized, err := json.Marshal(&src.Int)
		if err != nil {
			return nil, fmt.Errorf("failed to unmarshal one of Int of Distinct: %w", err)
		}

		return serialized, nil
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance.
func (obj Distinct) GetActualInstance() any {
	if obj.Bool != nil {
		return *obj.Bool
	}

	if obj.Int != nil {
		return *obj.Int
	}

	// all schemas are nil
	return nil
}
