// The Algolia A/B Testing API lets you manage your Algolia A/B tests to optimize your search experience.
//
// ## Base URLs
//
// The base URLs for requests to the A/B testing API are:
//
// - `https://analytics.us.algolia.com`
// - `https://analytics.de.algolia.com`
// - `https://analytics.algolia.com` (alias of `analytics.us.algolia.com`)
//
// Use the URL that matches your [analytics region](https://dashboard.algolia.com/account/infrastructure/analytics).
//
// **All requests must use HTTPS.**
//
// ## Availability and authentication
//
// Access to the A/B testing API is available as part of the [Premium or Elevate plans](https://www.algolia.com/pricing).
//
// To authenticate your API requests, add these headers:
//
//   - `x-algolia-application-id`. Your Algolia application ID.
//   - `x-algolia-api-key`. An API key with the necessary permissions to make the request.
//     The required access control list (ACL) to make a request is listed in each endpoint's reference.
//
// You can find your application ID and API key in the [Algolia dashboard](https://dashboard.algolia.com/account/api-keys).
//
// ## Rate limits
//
// You can make up to **100 requests per minute per app** to the A/B testing API.
// The response includes headers with information about the limits.
//
// ## Parameters
//
// Query parameters must be [URL-encoded](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding).
// Non-ASCII characters must be UTF-8 encoded.
// Plus characters (`+`) are interpreted as spaces.
//
// ## Response status and errors
//
// The A/B testing API returns JSON responses.
// Since JSON doesn't guarantee any specific ordering, don't rely on the order of attributes in the API response.
//
// Successful responses return a `2xx` status. Client errors return a `4xx` status. Server errors are indicated by a `5xx` status.
// Error responses have a `message` property with more information.
//
// ## Version
//
// The current version of the A/B Testing API is version 2, as indicated by the `/2/` in each endpoint's URL.
package abtesting

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import (
	"context"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

type config struct {
	// -- Request options for API calls
	queryParams  url.Values
	headerParams map[string]string
	timeouts     transport.RequestConfiguration
}

type RequestOption interface {
	apply(*config)
}

type requestOption func(*config)

func (r requestOption) apply(c *config) {
	r(c)
}

func WithHeaderParam(key string, value any) requestOption {
	return requestOption(func(c *config) {
		c.headerParams[key] = utils.ParameterToString(value)
	})
}

func WithQueryParam(key string, value any) requestOption {
	return requestOption(func(c *config) {
		c.queryParams.Set(utils.QueryParameterToString(key), utils.QueryParameterToString(value))
	})
}

func WithReadTimeout(timeout time.Duration) requestOption {
	return requestOption(func(c *config) {
		c.timeouts.ReadTimeout = &timeout
	})
}

func WithWriteTimeout(timeout time.Duration) requestOption {
	return requestOption(func(c *config) {
		c.timeouts.WriteTimeout = &timeout
	})
}

func WithConnectTimeout(timeout time.Duration) requestOption {
	return requestOption(func(c *config) {
		c.timeouts.ConnectTimeout = &timeout
	})
}

// AddABTests Creates a new A/B test.
//
// Required API Key ACLs:
//   - editSettings
//
// Parameters:
//   - name - A/B test name.
//   - variants - A/B test variants.
//   - endAt - End date and time of the A/B test, in RFC 3339 format.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) AddABTests(
	ctx context.Context,
	name string,
	variants []AddABTestsVariant,
	endAt string,
	opts ...RequestOption,
) (*ABTestResponse, error) {
	var returnValue *ABTestResponse

	res, resBody, err := c.AddABTestsWithHTTPInfo(ctx, name, variants, endAt, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// AddABTestsWithHTTPInfo calls the API and returns the raw response from it.
// Creates a new A/B test.
//
// Required API Key ACLs:
//   - editSettings
//
// Parameters:
//   - name - A/B test name.
//   - variants - A/B test variants.
//   - endAt - End date and time of the A/B test, in RFC 3339 format.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) AddABTestsWithHTTPInfo(
	ctx context.Context,
	name string,
	variants []AddABTestsVariant,
	endAt string,
	opts ...RequestOption,
) (*http.Response, []byte, error) {
	requestPath := "/2/abtests"

	if name == "" {
		return nil, nil, reportError("Parameter `name` is required when calling `AddABTests`.")
	}

	if len(variants) == 0 {
		return nil, nil, reportError("Parameter `variants` is required when calling `AddABTests`.")
	}

	if endAt == "" {
		return nil, nil, reportError("Parameter `endAt` is required when calling `AddABTests`.")
	}

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	// body params
	postBody := struct {
		Name     string              `json:"name"`
		Variants []AddABTestsVariant `json:"variants"`
		EndAt    string              `json:"endAt"`
	}{
		Name:     name,
		Variants: variants,
		EndAt:    endAt,
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodPost, postBody, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// CustomDelete This method lets you send requests to the Algolia REST API.

// Parameters:
//   - path - Path of the endpoint, for example `1/newFeature`.
//   - parameters - Query parameters to apply to the current query.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) CustomDelete(ctx context.Context, path string, parameters map[string]any, opts ...RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomDeleteWithHTTPInfo(ctx, path, parameters, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// CustomDeleteWithHTTPInfo calls the API and returns the raw response from it.
// This method lets you send requests to the Algolia REST API.

// Parameters:
//   - path - Path of the endpoint, for example `1/newFeature`.
//   - parameters - Query parameters to apply to the current query.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) CustomDeleteWithHTTPInfo(
	ctx context.Context,
	path string,
	parameters map[string]any,
	opts ...RequestOption,
) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(path))

	if path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomDelete`.")
	}

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(parameters) {
		for k, v := range parameters {
			conf.queryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodDelete, nil, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// CustomGet This method lets you send requests to the Algolia REST API.

// Parameters:
//   - path - Path of the endpoint, for example `1/newFeature`.
//   - parameters - Query parameters to apply to the current query.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) CustomGet(ctx context.Context, path string, parameters map[string]any, opts ...RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomGetWithHTTPInfo(ctx, path, parameters, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// CustomGetWithHTTPInfo calls the API and returns the raw response from it.
// This method lets you send requests to the Algolia REST API.

// Parameters:
//   - path - Path of the endpoint, for example `1/newFeature`.
//   - parameters - Query parameters to apply to the current query.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) CustomGetWithHTTPInfo(
	ctx context.Context,
	path string,
	parameters map[string]any,
	opts ...RequestOption,
) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(path))

	if path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomGet`.")
	}

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	if !utils.IsNilOrEmpty(parameters) {
		for k, v := range parameters {
			conf.queryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodGet, nil, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// CustomPostOptions represents the optional params for the API call.
type CustomPostOptions struct {
	Parameters map[string]any
	Body       map[string]any
}

// NewCustomPostOptions creates an instance of the CustomPostOptions used to add optional parameters to CustomPostWithOptions.
func NewCustomPostOptions() *CustomPostOptions {
	return &CustomPostOptions{}
}

// WithParameters Query parameters to apply to the current query.
func (o *CustomPostOptions) WithParameters(parameters map[string]any) *CustomPostOptions {
	o.Parameters = parameters

	return o
}

// WithBody Parameters to send with the custom request.
func (o *CustomPostOptions) WithBody(body map[string]any) *CustomPostOptions {
	o.Body = body

	return o
}

// CustomPost This method lets you send requests to the Algolia REST API.

// Parameters:
//   - path - Path of the endpoint, for example `1/newFeature`.
//   - parameters - Query parameters to apply to the current query. (in optionalParams)
//   - body - Parameters to send with the custom request. (in optionalParams)
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) CustomPost(ctx context.Context, path string, optionalParams *CustomPostOptions, opts ...RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomPostWithHTTPInfo(ctx, path, optionalParams, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// CustomPostWithHTTPInfo calls the API and returns the raw response from it.
// This method lets you send requests to the Algolia REST API.

// Parameters:
//   - path - Path of the endpoint, for example `1/newFeature`.
//   - parameters - Query parameters to apply to the current query. (in optionalParams)
//   - body - Parameters to send with the custom request. (in optionalParams)
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) CustomPostWithHTTPInfo(
	ctx context.Context,
	path string,
	optionalParams *CustomPostOptions,
	opts ...RequestOption,
) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(path))

	if path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomPost`.")
	}

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	if optionalParams != nil && !utils.IsNilOrEmpty(optionalParams.Parameters) {
		for k, v := range optionalParams.Parameters {
			conf.queryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	// body params
	var postBody any = "{}"
	if optionalParams != nil {
		postBody = optionalParams.Body
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodPost, postBody, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// CustomPutOptions represents the optional params for the API call.
type CustomPutOptions struct {
	Parameters map[string]any
	Body       map[string]any
}

// NewCustomPutOptions creates an instance of the CustomPutOptions used to add optional parameters to CustomPutWithOptions.
func NewCustomPutOptions() *CustomPutOptions {
	return &CustomPutOptions{}
}

// WithParameters Query parameters to apply to the current query.
func (o *CustomPutOptions) WithParameters(parameters map[string]any) *CustomPutOptions {
	o.Parameters = parameters

	return o
}

// WithBody Parameters to send with the custom request.
func (o *CustomPutOptions) WithBody(body map[string]any) *CustomPutOptions {
	o.Body = body

	return o
}

// CustomPut This method lets you send requests to the Algolia REST API.

// Parameters:
//   - path - Path of the endpoint, for example `1/newFeature`.
//   - parameters - Query parameters to apply to the current query. (in optionalParams)
//   - body - Parameters to send with the custom request. (in optionalParams)
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) CustomPut(ctx context.Context, path string, optionalParams *CustomPutOptions, opts ...RequestOption) (*map[string]any, error) {
	var returnValue *map[string]any

	res, resBody, err := c.CustomPutWithHTTPInfo(ctx, path, optionalParams, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// CustomPutWithHTTPInfo calls the API and returns the raw response from it.
// This method lets you send requests to the Algolia REST API.

// Parameters:
//   - path - Path of the endpoint, for example `1/newFeature`.
//   - parameters - Query parameters to apply to the current query. (in optionalParams)
//   - body - Parameters to send with the custom request. (in optionalParams)
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) CustomPutWithHTTPInfo(
	ctx context.Context,
	path string,
	optionalParams *CustomPutOptions,
	opts ...RequestOption,
) (*http.Response, []byte, error) {
	requestPath := "/{path}"
	requestPath = strings.ReplaceAll(requestPath, "{path}", utils.ParameterToString(path))

	if path == "" {
		return nil, nil, reportError("Parameter `path` is required when calling `CustomPut`.")
	}

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	if optionalParams != nil && !utils.IsNilOrEmpty(optionalParams.Parameters) {
		for k, v := range optionalParams.Parameters {
			conf.queryParams.Set(k, utils.QueryParameterToString(v))
		}
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	// body params
	var postBody any = "{}"
	if optionalParams != nil {
		postBody = optionalParams.Body
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodPut, postBody, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// DeleteABTest Deletes an A/B test by its ID.
//
// Required API Key ACLs:
//   - editSettings
//
// Parameters:
//   - id - Unique A/B test identifier.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) DeleteABTest(ctx context.Context, id int, opts ...RequestOption) (*ABTestResponse, error) {
	var returnValue *ABTestResponse

	res, resBody, err := c.DeleteABTestWithHTTPInfo(ctx, id, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// DeleteABTestWithHTTPInfo calls the API and returns the raw response from it.
// Deletes an A/B test by its ID.
//
// Required API Key ACLs:
//   - editSettings
//
// Parameters:
//   - id - Unique A/B test identifier.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) DeleteABTestWithHTTPInfo(ctx context.Context, id int, opts ...RequestOption) (*http.Response, []byte, error) {
	requestPath := "/2/abtests/{id}"
	requestPath = strings.ReplaceAll(requestPath, "{id}", url.PathEscape(utils.ParameterToString(id)))

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodDelete, nil, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// EstimateABTest Given the traffic percentage and the expected effect size, this endpoint estimates the sample size and duration of an A/B test based on historical traffic.
//
// Required API Key ACLs:
//   - analytics
//
// Parameters:
//   - configuration
//   - variants - A/B test variants.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) EstimateABTest(
	ctx context.Context,
	configuration *EstimateConfiguration,
	variants []AddABTestsVariant,
	opts ...RequestOption,
) (*EstimateABTestResponse, error) {
	var returnValue *EstimateABTestResponse

	res, resBody, err := c.EstimateABTestWithHTTPInfo(ctx, configuration, variants, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// EstimateABTestWithHTTPInfo calls the API and returns the raw response from it.
// Given the traffic percentage and the expected effect size, this endpoint estimates the sample size and duration of an A/B test based on historical traffic.
//
// Required API Key ACLs:
//   - analytics
//
// Parameters:
//   - configuration
//   - variants - A/B test variants.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) EstimateABTestWithHTTPInfo(
	ctx context.Context,
	configuration *EstimateConfiguration,
	variants []AddABTestsVariant,
	opts ...RequestOption,
) (*http.Response, []byte, error) {
	requestPath := "/2/abtests/estimate"

	if configuration == nil {
		return nil, nil, reportError("Parameter `configuration` is required when calling `EstimateABTest`.")
	}

	if len(variants) == 0 {
		return nil, nil, reportError("Parameter `variants` is required when calling `EstimateABTest`.")
	}

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	// body params
	postBody := struct {
		Configuration *EstimateConfiguration `json:"configuration"`
		Variants      []AddABTestsVariant    `json:"variants"`
	}{
		Configuration: configuration,
		Variants:      variants,
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodPost, postBody, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// GetABTest Retrieves the details for an A/B test by its ID.
//
// Required API Key ACLs:
//   - analytics
//
// Parameters:
//   - id - Unique A/B test identifier.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) GetABTest(ctx context.Context, id int, opts ...RequestOption) (*ABTest, error) {
	var returnValue *ABTest

	res, resBody, err := c.GetABTestWithHTTPInfo(ctx, id, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// GetABTestWithHTTPInfo calls the API and returns the raw response from it.
// Retrieves the details for an A/B test by its ID.
//
// Required API Key ACLs:
//   - analytics
//
// Parameters:
//   - id - Unique A/B test identifier.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) GetABTestWithHTTPInfo(ctx context.Context, id int, opts ...RequestOption) (*http.Response, []byte, error) {
	requestPath := "/2/abtests/{id}"
	requestPath = strings.ReplaceAll(requestPath, "{id}", url.PathEscape(utils.ParameterToString(id)))

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodGet, nil, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// ListABTestsOptions represents the optional params for the API call.
type ListABTestsOptions struct {
	Offset      *int
	Limit       *int
	IndexPrefix *string
	IndexSuffix *string
}

// NewListABTestsOptions creates an instance of the ListABTestsOptions used to add optional parameters to ListABTestsWithOptions.
func NewListABTestsOptions() *ListABTestsOptions {
	return &ListABTestsOptions{}
}

// WithOffset Position of the first item to return.
func (o *ListABTestsOptions) WithOffset(offset int) *ListABTestsOptions {
	o.Offset = &offset

	return o
}

// WithLimit Number of items to return.
func (o *ListABTestsOptions) WithLimit(limit int) *ListABTestsOptions {
	o.Limit = &limit

	return o
}

// WithIndexPrefix Index name prefix. Only A/B tests for indices starting with this string are included in the response.
func (o *ListABTestsOptions) WithIndexPrefix(indexPrefix string) *ListABTestsOptions {
	o.IndexPrefix = &indexPrefix

	return o
}

// WithIndexSuffix Index name suffix. Only A/B tests for indices ending with this string are included in the response.
func (o *ListABTestsOptions) WithIndexSuffix(indexSuffix string) *ListABTestsOptions {
	o.IndexSuffix = &indexSuffix

	return o
}

// ListABTests Lists all A/B tests you configured for this application.
//
// Required API Key ACLs:
//   - analytics
//
// Parameters:
//   - offset - Position of the first item to return. (in optionalParams)
//   - limit - Number of items to return. (in optionalParams)
//   - indexPrefix - Index name prefix. Only A/B tests for indices starting with this string are included in the response. (in optionalParams)
//   - indexSuffix - Index name suffix. Only A/B tests for indices ending with this string are included in the response. (in optionalParams)
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) ListABTests(ctx context.Context, optionalParams *ListABTestsOptions, opts ...RequestOption) (*ListABTestsResponse, error) {
	var returnValue *ListABTestsResponse

	res, resBody, err := c.ListABTestsWithHTTPInfo(ctx, optionalParams, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// ListABTestsWithHTTPInfo calls the API and returns the raw response from it.
// Lists all A/B tests you configured for this application.
//
// Required API Key ACLs:
//   - analytics
//
// Parameters:
//   - offset - Position of the first item to return. (in optionalParams)
//   - limit - Number of items to return. (in optionalParams)
//   - indexPrefix - Index name prefix. Only A/B tests for indices starting with this string are included in the response. (in optionalParams)
//   - indexSuffix - Index name suffix. Only A/B tests for indices ending with this string are included in the response. (in optionalParams)
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) ListABTestsWithHTTPInfo(
	ctx context.Context,
	optionalParams *ListABTestsOptions,
	opts ...RequestOption,
) (*http.Response, []byte, error) {
	requestPath := "/2/abtests"

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	if optionalParams != nil && !utils.IsNilOrEmpty(optionalParams.Offset) {
		conf.queryParams.Set("offset", utils.QueryParameterToString(*optionalParams.Offset))
	}

	if optionalParams != nil && !utils.IsNilOrEmpty(optionalParams.Limit) {
		conf.queryParams.Set("limit", utils.QueryParameterToString(*optionalParams.Limit))
	}

	if optionalParams != nil && !utils.IsNilOrEmpty(optionalParams.IndexPrefix) {
		conf.queryParams.Set("indexPrefix", utils.QueryParameterToString(*optionalParams.IndexPrefix))
	}

	if optionalParams != nil && !utils.IsNilOrEmpty(optionalParams.IndexSuffix) {
		conf.queryParams.Set("indexSuffix", utils.QueryParameterToString(*optionalParams.IndexSuffix))
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodGet, nil, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// ScheduleABTest Schedule an A/B test to be started at a later time.
//
// Required API Key ACLs:
//   - editSettings
//
// Parameters:
//   - name - A/B test name.
//   - variants - A/B test variants.
//   - scheduledAt - Date and time when the A/B test is scheduled to start, in RFC 3339 format.
//   - endAt - End date and time of the A/B test, in RFC 3339 format.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) ScheduleABTest(
	ctx context.Context,
	name string,
	variants []AddABTestsVariant,
	scheduledAt string,
	endAt string,
	opts ...RequestOption,
) (*ScheduleABTestResponse, error) {
	var returnValue *ScheduleABTestResponse

	res, resBody, err := c.ScheduleABTestWithHTTPInfo(ctx, name, variants, scheduledAt, endAt, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// ScheduleABTestWithHTTPInfo calls the API and returns the raw response from it.
// Schedule an A/B test to be started at a later time.
//
// Required API Key ACLs:
//   - editSettings
//
// Parameters:
//   - name - A/B test name.
//   - variants - A/B test variants.
//   - scheduledAt - Date and time when the A/B test is scheduled to start, in RFC 3339 format.
//   - endAt - End date and time of the A/B test, in RFC 3339 format.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) ScheduleABTestWithHTTPInfo(
	ctx context.Context,
	name string,
	variants []AddABTestsVariant,
	scheduledAt string,
	endAt string,
	opts ...RequestOption,
) (*http.Response, []byte, error) {
	requestPath := "/2/abtests/schedule"

	if name == "" {
		return nil, nil, reportError("Parameter `name` is required when calling `ScheduleABTest`.")
	}

	if len(variants) == 0 {
		return nil, nil, reportError("Parameter `variants` is required when calling `ScheduleABTest`.")
	}

	if scheduledAt == "" {
		return nil, nil, reportError("Parameter `scheduledAt` is required when calling `ScheduleABTest`.")
	}

	if endAt == "" {
		return nil, nil, reportError("Parameter `endAt` is required when calling `ScheduleABTest`.")
	}

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	// body params
	postBody := struct {
		Name        string              `json:"name"`
		Variants    []AddABTestsVariant `json:"variants"`
		ScheduledAt string              `json:"scheduledAt"`
		EndAt       string              `json:"endAt"`
	}{
		Name:        name,
		Variants:    variants,
		ScheduledAt: scheduledAt,
		EndAt:       endAt,
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodPost, postBody, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}

// StopABTest Stops an A/B test by its ID.
//
// You can't restart stopped A/B tests.
//
// Required API Key ACLs:
//   - editSettings
//
// Parameters:
//   - id - Unique A/B test identifier.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) StopABTest(ctx context.Context, id int, opts ...RequestOption) (*ABTestResponse, error) {
	var returnValue *ABTestResponse

	res, resBody, err := c.StopABTestWithHTTPInfo(ctx, id, opts...)
	if err != nil {
		return returnValue, err
	}

	if res == nil {
		return returnValue, reportError("res is nil")
	}
	defer res.Body.Close()

	if res.StatusCode >= 300 {
		return returnValue, c.decodeError(res, resBody)
	}

	err = c.decode(&returnValue, resBody)
	if err != nil {
		return returnValue, reportError("cannot decode result: %w", err)
	}

	return returnValue, nil
}

// StopABTestWithHTTPInfo calls the API and returns the raw response from it.
// Stops an A/B test by its ID.
//
// You can't restart stopped A/B tests.
//
// Required API Key ACLs:
//   - editSettings
//
// Parameters:
//   - id - Unique A/B test identifier.
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) StopABTestWithHTTPInfo(ctx context.Context, id int, opts ...RequestOption) (*http.Response, []byte, error) {
	requestPath := "/2/abtests/{id}/stop"
	requestPath = strings.ReplaceAll(requestPath, "{id}", url.PathEscape(utils.ParameterToString(id)))

	conf := config{
		queryParams:  url.Values{},
		headerParams: map[string]string{},
	}

	// optional params if any
	for _, opt := range opts {
		opt.apply(&conf)
	}

	req, err := c.prepareRequest(ctx, requestPath, http.MethodPost, nil, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, false, conf.timeouts)
}
