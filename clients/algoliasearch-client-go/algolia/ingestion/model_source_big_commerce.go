/*
Ingestion API

[Documentation](https://docs.google.com/document/d/13UnFi4Osfw4vOJr5iN4P4RJDZdslpFs4OgM4F1VBwQc/edit#heading=h.kp12qj1w1lig)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ingestion

import (
	"encoding/json"
)

// SourceBigCommerce struct for SourceBigCommerce
type SourceBigCommerce struct {
	StoreHash string `json:"store_hash"`
}

// NewSourceBigCommerce instantiates a new SourceBigCommerce object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSourceBigCommerce(storeHash string) *SourceBigCommerce {
	this := SourceBigCommerce{}
	this.StoreHash = storeHash
	return &this
}

// NewSourceBigCommerceWithDefaults instantiates a new SourceBigCommerce object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSourceBigCommerceWithDefaults() *SourceBigCommerce {
	this := SourceBigCommerce{}
	return &this
}

// GetStoreHash returns the StoreHash field value
func (o *SourceBigCommerce) GetStoreHash() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.StoreHash
}

// GetStoreHashOk returns a tuple with the StoreHash field value
// and a boolean to check if the value has been set.
func (o *SourceBigCommerce) GetStoreHashOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StoreHash, true
}

// SetStoreHash sets field value
func (o *SourceBigCommerce) SetStoreHash(v string) {
	o.StoreHash = v
}

func (o SourceBigCommerce) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["store_hash"] = o.StoreHash
	}
	return json.Marshal(toSerialize)
}

type NullableSourceBigCommerce struct {
	value *SourceBigCommerce
	isSet bool
}

func (v NullableSourceBigCommerce) Get() *SourceBigCommerce {
	return v.value
}

func (v *NullableSourceBigCommerce) Set(val *SourceBigCommerce) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceBigCommerce) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceBigCommerce) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceBigCommerce(val *SourceBigCommerce) *NullableSourceBigCommerce {
	return &NullableSourceBigCommerce{value: val, isSet: true}
}

func (v NullableSourceBigCommerce) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceBigCommerce) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


