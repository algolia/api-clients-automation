/*
Ingestion API

[Documentation](https://docs.google.com/document/d/13UnFi4Osfw4vOJr5iN4P4RJDZdslpFs4OgM4F1VBwQc/edit#heading=h.kp12qj1w1lig)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ingestion

import (
	"encoding/json"
)

// RunResponse struct for RunResponse
type RunResponse struct {
	RunID string `json:"runID"`
}

// NewRunResponse instantiates a new RunResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRunResponse(runID string) *RunResponse {
	this := RunResponse{}
	this.RunID = runID
	return &this
}

// NewRunResponseWithDefaults instantiates a new RunResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRunResponseWithDefaults() *RunResponse {
	this := RunResponse{}
	return &this
}

// GetRunID returns the RunID field value
func (o *RunResponse) GetRunID() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RunID
}

// GetRunIDOk returns a tuple with the RunID field value
// and a boolean to check if the value has been set.
func (o *RunResponse) GetRunIDOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RunID, true
}

// SetRunID sets field value
func (o *RunResponse) SetRunID(v string) {
	o.RunID = v
}

func (o RunResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["runID"] = o.RunID
	}
	return json.Marshal(toSerialize)
}

type NullableRunResponse struct {
	value *RunResponse
	isSet bool
}

func (v NullableRunResponse) Get() *RunResponse {
	return v.value
}

func (v *NullableRunResponse) Set(val *RunResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableRunResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableRunResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRunResponse(val *RunResponse) *NullableRunResponse {
	return &NullableRunResponse{value: val, isSet: true}
}

func (v NullableRunResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRunResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


