/*
Ingestion API

[Documentation](https://docs.google.com/document/d/13UnFi4Osfw4vOJr5iN4P4RJDZdslpFs4OgM4F1VBwQc/edit#heading=h.kp12qj1w1lig)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ingestion

import (
	"encoding/json"
	"fmt"
)

// PlatformType the model 'PlatformType'
type PlatformType string

// List of PlatformType
const (
	PLATFORMTYPE_BIGCOMMERCE PlatformType = "bigcommerce"
	PLATFORMTYPE_COMMERCETOOLS PlatformType = "commercetools"
)

// All allowed values of PlatformType enum
var AllowedPlatformTypeEnumValues = []PlatformType{
	"bigcommerce",
	"commercetools",
}

func (v *PlatformType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PlatformType(value)
	for _, existing := range AllowedPlatformTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PlatformType", value)
}

// NewPlatformTypeFromValue returns a pointer to a valid PlatformType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlatformTypeFromValue(v string) (*PlatformType, error) {
	ev := PlatformType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PlatformType: valid values are %v", v, AllowedPlatformTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlatformType) IsValid() bool {
	for _, existing := range AllowedPlatformTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PlatformType value
func (v PlatformType) Ptr() *PlatformType {
	return &v
}

type NullablePlatformType struct {
	value *PlatformType
	isSet bool
}

func (v NullablePlatformType) Get() *PlatformType {
	return v.value
}

func (v *NullablePlatformType) Set(val *PlatformType) {
	v.value = val
	v.isSet = true
}

func (v NullablePlatformType) IsSet() bool {
	return v.isSet
}

func (v *NullablePlatformType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlatformType(val *PlatformType) *NullablePlatformType {
	return &NullablePlatformType{value: val, isSet: true}
}

func (v NullablePlatformType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlatformType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

