/*
Ingestion API

[Documentation](https://docs.google.com/document/d/13UnFi4Osfw4vOJr5iN4P4RJDZdslpFs4OgM4F1VBwQc/edit#heading=h.kp12qj1w1lig)

API version: 1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package ingestion

import (
	"encoding/json"
	"fmt"
)

// SourceInput - struct for SourceInput
type SourceInput struct {
	SourceBigCommerce *SourceBigCommerce
	SourceCommercetools *SourceCommercetools
}

// SourceBigCommerceAsSourceInput is a convenience function that returns SourceBigCommerce wrapped in SourceInput
func SourceBigCommerceAsSourceInput(v *SourceBigCommerce) SourceInput {
	return SourceInput{
		SourceBigCommerce: v,
	}
}

// SourceCommercetoolsAsSourceInput is a convenience function that returns SourceCommercetools wrapped in SourceInput
func SourceCommercetoolsAsSourceInput(v *SourceCommercetools) SourceInput {
	return SourceInput{
		SourceCommercetools: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SourceInput) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into SourceBigCommerce
	err = newStrictDecoder(data).Decode(&dst.SourceBigCommerce)
	if err == nil {
		jsonSourceBigCommerce, _ := json.Marshal(dst.SourceBigCommerce)
		if string(jsonSourceBigCommerce) == "{}" { // empty struct
			dst.SourceBigCommerce = nil
		} else {
			match++
		}
	} else {
		dst.SourceBigCommerce = nil
	}

	// try to unmarshal data into SourceCommercetools
	err = newStrictDecoder(data).Decode(&dst.SourceCommercetools)
	if err == nil {
		jsonSourceCommercetools, _ := json.Marshal(dst.SourceCommercetools)
		if string(jsonSourceCommercetools) == "{}" { // empty struct
			dst.SourceCommercetools = nil
		} else {
			match++
		}
	} else {
		dst.SourceCommercetools = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.SourceBigCommerce = nil
		dst.SourceCommercetools = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SourceInput)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SourceInput)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SourceInput) MarshalJSON() ([]byte, error) {
	if src.SourceBigCommerce != nil {
		return json.Marshal(&src.SourceBigCommerce)
	}

	if src.SourceCommercetools != nil {
		return json.Marshal(&src.SourceCommercetools)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SourceInput) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.SourceBigCommerce != nil {
		return obj.SourceBigCommerce
	}

	if obj.SourceCommercetools != nil {
		return obj.SourceCommercetools
	}

	// all schemas are nil
	return nil
}

type NullableSourceInput struct {
	value *SourceInput
	isSet bool
}

func (v NullableSourceInput) Get() *SourceInput {
	return v.value
}

func (v *NullableSourceInput) Set(val *SourceInput) {
	v.value = val
	v.isSet = true
}

func (v NullableSourceInput) IsSet() bool {
	return v.isSet
}

func (v *NullableSourceInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSourceInput(val *SourceInput) *NullableSourceInput {
	return &NullableSourceInput{value: val, isSet: true}
}

func (v NullableSourceInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSourceInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


