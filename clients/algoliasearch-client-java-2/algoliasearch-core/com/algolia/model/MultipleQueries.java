/*
 * Search API
 * API powering the Search feature of Algolia.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.algolia.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModelProperty;
import java.util.Objects;

/** MultipleQueries */
@JsonPropertyOrder(
  {
    MultipleQueries.JSON_PROPERTY_INDEX_NAME,
    MultipleQueries.JSON_PROPERTY_QUERY,
    MultipleQueries.JSON_PROPERTY_TYPE,
    MultipleQueries.JSON_PROPERTY_FACET,
    MultipleQueries.JSON_PROPERTY_PARAMS,
  }
)
@JsonTypeName("multipleQueries")
public class MultipleQueries {

  public static final String JSON_PROPERTY_INDEX_NAME = "indexName";
  private String indexName;

  public static final String JSON_PROPERTY_QUERY = "query";
  private String query = "";

  /**
   * Perform a search query with &#x60;default&#x60;, will search for facet values if
   * &#x60;facet&#x60; is given.
   */
  public enum TypeEnum {
    DEFAULT("default"),

    FACET("facet");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    @JsonValue
    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    @JsonCreator
    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }
  }

  public static final String JSON_PROPERTY_TYPE = "type";
  private TypeEnum type = TypeEnum.DEFAULT;

  public static final String JSON_PROPERTY_FACET = "facet";
  private String facet;

  public static final String JSON_PROPERTY_PARAMS = "params";
  private String params;

  public MultipleQueries indexName(String indexName) {
    this.indexName = indexName;
    return this;
  }

  /**
   * The Algolia index name.
   *
   * @return indexName
   */
  @javax.annotation.Nonnull
  @ApiModelProperty(
    example = "products",
    required = true,
    value = "The Algolia index name."
  )
  @JsonProperty(JSON_PROPERTY_INDEX_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getIndexName() {
    return indexName;
  }

  @JsonProperty(JSON_PROPERTY_INDEX_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setIndexName(String indexName) {
    this.indexName = indexName;
  }

  public MultipleQueries query(String query) {
    this.query = query;
    return this;
  }

  /**
   * The text to search in the index.
   *
   * @return query
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The text to search in the index.")
  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getQuery() {
    return query;
  }

  @JsonProperty(JSON_PROPERTY_QUERY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setQuery(String query) {
    this.query = query;
  }

  public MultipleQueries type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Perform a search query with &#x60;default&#x60;, will search for facet values if
   * &#x60;facet&#x60; is given.
   *
   * @return type
   */
  @javax.annotation.Nullable
  @ApiModelProperty(
    value = "Perform a search query with `default`, will search for facet values if `facet` is" +
    " given."
  )
  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public TypeEnum getType() {
    return type;
  }

  @JsonProperty(JSON_PROPERTY_TYPE)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setType(TypeEnum type) {
    this.type = type;
  }

  public MultipleQueries facet(String facet) {
    this.facet = facet;
    return this;
  }

  /**
   * The &#x60;facet&#x60; name.
   *
   * @return facet
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The `facet` name.")
  @JsonProperty(JSON_PROPERTY_FACET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getFacet() {
    return facet;
  }

  @JsonProperty(JSON_PROPERTY_FACET)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setFacet(String facet) {
    this.facet = facet;
  }

  public MultipleQueries params(String params) {
    this.params = params;
    return this;
  }

  /**
   * A query string of search parameters.
   *
   * @return params
   */
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A query string of search parameters.")
  @JsonProperty(JSON_PROPERTY_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getParams() {
    return params;
  }

  @JsonProperty(JSON_PROPERTY_PARAMS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setParams(String params) {
    this.params = params;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultipleQueries multipleQueries = (MultipleQueries) o;
    return (
      Objects.equals(this.indexName, multipleQueries.indexName) &&
      Objects.equals(this.query, multipleQueries.query) &&
      Objects.equals(this.type, multipleQueries.type) &&
      Objects.equals(this.facet, multipleQueries.facet) &&
      Objects.equals(this.params, multipleQueries.params)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(indexName, query, type, facet, params);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultipleQueries {\n");
    sb
      .append("    indexName: ")
      .append(toIndentedString(indexName))
      .append("\n");
    sb.append("    query: ").append(toIndentedString(query)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    facet: ").append(toIndentedString(facet)).append("\n");
    sb.append("    params: ").append(toIndentedString(params)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
