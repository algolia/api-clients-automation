/*
 * Search API
 * API powering the Search feature of Algolia.
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.algolia.model;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

/**
 * Index
 */
@JsonPropertyOrder(
  {
    Index.JSON_PROPERTY_NAME,
    Index.JSON_PROPERTY_CREATED_AT,
    Index.JSON_PROPERTY_UPDATED_AT,
    Index.JSON_PROPERTY_ENTRIES,
    Index.JSON_PROPERTY_DATA_SIZE,
    Index.JSON_PROPERTY_FILE_SIZE,
    Index.JSON_PROPERTY_LAST_BUILD_TIME_S,
    Index.JSON_PROPERTY_NUMBER_OF_PENDING_TASK,
    Index.JSON_PROPERTY_PENDING_TASK,
    Index.JSON_PROPERTY_PRIMARY,
    Index.JSON_PROPERTY_REPLICAS,
  }
)
@JsonTypeName("index")
public class Index {

  public static final String JSON_PROPERTY_NAME = "name";
  private String name;

  public static final String JSON_PROPERTY_CREATED_AT = "createdAt";
  private OffsetDateTime createdAt;

  public static final String JSON_PROPERTY_UPDATED_AT = "updatedAt";
  private OffsetDateTime updatedAt;

  public static final String JSON_PROPERTY_ENTRIES = "entries";
  private Integer entries;

  public static final String JSON_PROPERTY_DATA_SIZE = "dataSize";
  private Integer dataSize;

  public static final String JSON_PROPERTY_FILE_SIZE = "fileSize";
  private Integer fileSize;

  public static final String JSON_PROPERTY_LAST_BUILD_TIME_S = "lastBuildTimeS";
  private Integer lastBuildTimeS;

  public static final String JSON_PROPERTY_NUMBER_OF_PENDING_TASK =
    "numberOfPendingTask";
  private Integer numberOfPendingTask;

  public static final String JSON_PROPERTY_PENDING_TASK = "pendingTask";
  private Boolean pendingTask;

  public static final String JSON_PROPERTY_PRIMARY = "primary";
  private String primary;

  public static final String JSON_PROPERTY_REPLICAS = "replicas";
  private List<String> replicas = null;

  public Index name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Index name.
   * @return name
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Index name.")
  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public String getName() {
    return name;
  }

  @JsonProperty(JSON_PROPERTY_NAME)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setName(String name) {
    this.name = name;
  }

  public Index createdAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Index creation date. An empty string means that the index has no records.
   * @return createdAt
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(
    required = true,
    value = "Index creation date. An empty string means that the index has no records."
  )
  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }

  @JsonProperty(JSON_PROPERTY_CREATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }

  public Index updatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
    return this;
  }

  /**
   * Date of last update (ISO-8601 format).
   * @return updatedAt
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(
    required = true,
    value = "Date of last update (ISO-8601 format)."
  )
  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }

  @JsonProperty(JSON_PROPERTY_UPDATED_AT)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }

  public Index entries(Integer entries) {
    this.entries = entries;
    return this;
  }

  /**
   * Number of records contained in the index.
   * @return entries
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(
    required = true,
    value = "Number of records contained in the index."
  )
  @JsonProperty(JSON_PROPERTY_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getEntries() {
    return entries;
  }

  @JsonProperty(JSON_PROPERTY_ENTRIES)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setEntries(Integer entries) {
    this.entries = entries;
  }

  public Index dataSize(Integer dataSize) {
    this.dataSize = dataSize;
    return this;
  }

  /**
   * Number of bytes of the index in minified format.
   * @return dataSize
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(
    required = true,
    value = "Number of bytes of the index in minified format."
  )
  @JsonProperty(JSON_PROPERTY_DATA_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getDataSize() {
    return dataSize;
  }

  @JsonProperty(JSON_PROPERTY_DATA_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setDataSize(Integer dataSize) {
    this.dataSize = dataSize;
  }

  public Index fileSize(Integer fileSize) {
    this.fileSize = fileSize;
    return this;
  }

  /**
   * Number of bytes of the index binary file.
   * @return fileSize
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(
    required = true,
    value = "Number of bytes of the index binary file."
  )
  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getFileSize() {
    return fileSize;
  }

  @JsonProperty(JSON_PROPERTY_FILE_SIZE)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setFileSize(Integer fileSize) {
    this.fileSize = fileSize;
  }

  public Index lastBuildTimeS(Integer lastBuildTimeS) {
    this.lastBuildTimeS = lastBuildTimeS;
    return this;
  }

  /**
   * Last build time
   * @return lastBuildTimeS
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Last build time")
  @JsonProperty(JSON_PROPERTY_LAST_BUILD_TIME_S)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Integer getLastBuildTimeS() {
    return lastBuildTimeS;
  }

  @JsonProperty(JSON_PROPERTY_LAST_BUILD_TIME_S)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setLastBuildTimeS(Integer lastBuildTimeS) {
    this.lastBuildTimeS = lastBuildTimeS;
  }

  public Index numberOfPendingTask(Integer numberOfPendingTask) {
    this.numberOfPendingTask = numberOfPendingTask;
    return this;
  }

  /**
   * Number of pending indexing operations. This value is deprecated and should not be used.
   * @return numberOfPendingTask
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(
    value = "Number of pending indexing operations. This value is deprecated and should not be used."
  )
  @JsonProperty(JSON_PROPERTY_NUMBER_OF_PENDING_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public Integer getNumberOfPendingTask() {
    return numberOfPendingTask;
  }

  @JsonProperty(JSON_PROPERTY_NUMBER_OF_PENDING_TASK)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setNumberOfPendingTask(Integer numberOfPendingTask) {
    this.numberOfPendingTask = numberOfPendingTask;
  }

  public Index pendingTask(Boolean pendingTask) {
    this.pendingTask = pendingTask;
    return this;
  }

  /**
   * A boolean which says whether the index has pending tasks. This value is deprecated and should not be used.
   * @return pendingTask
   **/
  @javax.annotation.Nonnull
  @ApiModelProperty(
    required = true,
    value = "A boolean which says whether the index has pending tasks. This value is deprecated and should not be used."
  )
  @JsonProperty(JSON_PROPERTY_PENDING_TASK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public Boolean getPendingTask() {
    return pendingTask;
  }

  @JsonProperty(JSON_PROPERTY_PENDING_TASK)
  @JsonInclude(value = JsonInclude.Include.ALWAYS)
  public void setPendingTask(Boolean pendingTask) {
    this.pendingTask = pendingTask;
  }

  public Index primary(String primary) {
    this.primary = primary;
    return this;
  }

  /**
   * Only present if the index is a replica. Contains the name of the related primary index.
   * @return primary
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(
    value = "Only present if the index is a replica. Contains the name of the related primary index."
  )
  @JsonProperty(JSON_PROPERTY_PRIMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public String getPrimary() {
    return primary;
  }

  @JsonProperty(JSON_PROPERTY_PRIMARY)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setPrimary(String primary) {
    this.primary = primary;
  }

  public Index replicas(List<String> replicas) {
    this.replicas = replicas;
    return this;
  }

  public Index addReplicasItem(String replicasItem) {
    if (this.replicas == null) {
      this.replicas = new ArrayList<>();
    }
    this.replicas.add(replicasItem);
    return this;
  }

  /**
   * Only present if the index is a primary index with replicas. Contains the names of all linked replicas.
   * @return replicas
   **/
  @javax.annotation.Nullable
  @ApiModelProperty(
    value = "Only present if the index is a primary index with replicas. Contains the names of all linked replicas."
  )
  @JsonProperty(JSON_PROPERTY_REPLICAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public List<String> getReplicas() {
    return replicas;
  }

  @JsonProperty(JSON_PROPERTY_REPLICAS)
  @JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
  public void setReplicas(List<String> replicas) {
    this.replicas = replicas;
  }

  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Index index = (Index) o;
    return (
      Objects.equals(this.name, index.name) &&
      Objects.equals(this.createdAt, index.createdAt) &&
      Objects.equals(this.updatedAt, index.updatedAt) &&
      Objects.equals(this.entries, index.entries) &&
      Objects.equals(this.dataSize, index.dataSize) &&
      Objects.equals(this.fileSize, index.fileSize) &&
      Objects.equals(this.lastBuildTimeS, index.lastBuildTimeS) &&
      Objects.equals(this.numberOfPendingTask, index.numberOfPendingTask) &&
      Objects.equals(this.pendingTask, index.pendingTask) &&
      Objects.equals(this.primary, index.primary) &&
      Objects.equals(this.replicas, index.replicas)
    );
  }

  @Override
  public int hashCode() {
    return Objects.hash(
      name,
      createdAt,
      updatedAt,
      entries,
      dataSize,
      fileSize,
      lastBuildTimeS,
      numberOfPendingTask,
      pendingTask,
      primary,
      replicas
    );
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Index {\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb
      .append("    createdAt: ")
      .append(toIndentedString(createdAt))
      .append("\n");
    sb
      .append("    updatedAt: ")
      .append(toIndentedString(updatedAt))
      .append("\n");
    sb.append("    entries: ").append(toIndentedString(entries)).append("\n");
    sb.append("    dataSize: ").append(toIndentedString(dataSize)).append("\n");
    sb.append("    fileSize: ").append(toIndentedString(fileSize)).append("\n");
    sb
      .append("    lastBuildTimeS: ")
      .append(toIndentedString(lastBuildTimeS))
      .append("\n");
    sb
      .append("    numberOfPendingTask: ")
      .append(toIndentedString(numberOfPendingTask))
      .append("\n");
    sb
      .append("    pendingTask: ")
      .append(toIndentedString(pendingTask))
      .append("\n");
    sb.append("    primary: ").append(toIndentedString(primary)).append("\n");
    sb.append("    replicas: ").append(toIndentedString(replicas)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}
