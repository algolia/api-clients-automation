/*
 * Search API
 * API powering the Search feature of Algolia.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.algolia.search;

import com.algolia.ApiCallback;
import com.algolia.ApiClient;
import com.algolia.ApiException;
import com.algolia.ApiResponse;
import com.algolia.Configuration;
import com.algolia.Pair;
import com.algolia.ProgressRequestBody;
import com.algolia.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.algolia.model.BatchObject;
import com.algolia.model.BatchResponse;
import com.algolia.model.DeleteIndexResponse;
import com.algolia.model.ErrorBase;
import com.algolia.model.IndexSettings;
import com.algolia.model.ListIndicesResponse;
import com.algolia.model.MultipleQueriesObject;
import com.algolia.model.MultipleQueriesResponse;
import com.algolia.model.OperationIndexObject;
import com.algolia.model.OperationIndexResponse;
import com.algolia.model.SaveObjectResponse;
import com.algolia.model.SearchParams;
import com.algolia.model.SearchResponse;
import com.algolia.model.SetSettingsResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for batch
     * @param indexName The index in which to perform the request. (required)
     * @param batchObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchCall(String indexName, BatchObject batchObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = batchObject;

        // create path and map variables
        String localVarPath = "/1/indexes/{indexName}/batch"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call batchValidateBeforeCall(String indexName, BatchObject batchObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling batch(Async)");
        }
        
        // verify the required parameter 'batchObject' is set
        if (batchObject == null) {
            throw new ApiException("Missing the required parameter 'batchObject' when calling batch(Async)");
        }
        

        okhttp3.Call localVarCall = batchCall(indexName, batchObject, _callback);
        return localVarCall;

    }

    /**
     * 
     * Performs multiple write operations in a single API call.
     * @param indexName The index in which to perform the request. (required)
     * @param batchObject  (required)
     * @return BatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public BatchResponse batch(String indexName, BatchObject batchObject) throws ApiException {
        ApiResponse<BatchResponse> localVarResp = batchWithHttpInfo(indexName, batchObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Performs multiple write operations in a single API call.
     * @param indexName The index in which to perform the request. (required)
     * @param batchObject  (required)
     * @return ApiResponse&lt;BatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BatchResponse> batchWithHttpInfo(String indexName, BatchObject batchObject) throws ApiException {
        okhttp3.Call localVarCall = batchValidateBeforeCall(indexName, batchObject, null);
        Type localVarReturnType = new TypeToken<BatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Performs multiple write operations in a single API call.
     * @param indexName The index in which to perform the request. (required)
     * @param batchObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call batchAsync(String indexName, BatchObject batchObject, final ApiCallback<BatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = batchValidateBeforeCall(indexName, batchObject, _callback);
        Type localVarReturnType = new TypeToken<BatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteIndex
     * @param indexName The index in which to perform the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIndexCall(String indexName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/indexes/{indexName}"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteIndexValidateBeforeCall(String indexName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling deleteIndex(Async)");
        }
        

        okhttp3.Call localVarCall = deleteIndexCall(indexName, _callback);
        return localVarCall;

    }

    /**
     * Delete index.
     * Delete an existing index.
     * @param indexName The index in which to perform the request. (required)
     * @return DeleteIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public DeleteIndexResponse deleteIndex(String indexName) throws ApiException {
        ApiResponse<DeleteIndexResponse> localVarResp = deleteIndexWithHttpInfo(indexName);
        return localVarResp.getData();
    }

    /**
     * Delete index.
     * Delete an existing index.
     * @param indexName The index in which to perform the request. (required)
     * @return ApiResponse&lt;DeleteIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DeleteIndexResponse> deleteIndexWithHttpInfo(String indexName) throws ApiException {
        okhttp3.Call localVarCall = deleteIndexValidateBeforeCall(indexName, null);
        Type localVarReturnType = new TypeToken<DeleteIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete index. (asynchronously)
     * Delete an existing index.
     * @param indexName The index in which to perform the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteIndexAsync(String indexName, final ApiCallback<DeleteIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteIndexValidateBeforeCall(indexName, _callback);
        Type localVarReturnType = new TypeToken<DeleteIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettings
     * @param indexName The index in which to perform the request. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsCall(String indexName, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/indexes/{indexName}/settings"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettingsValidateBeforeCall(String indexName, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling getSettings(Async)");
        }
        

        okhttp3.Call localVarCall = getSettingsCall(indexName, _callback);
        return localVarCall;

    }

    /**
     * 
     * Retrieve settings of a given indexName.
     * @param indexName The index in which to perform the request. (required)
     * @return IndexSettings
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public IndexSettings getSettings(String indexName) throws ApiException {
        ApiResponse<IndexSettings> localVarResp = getSettingsWithHttpInfo(indexName);
        return localVarResp.getData();
    }

    /**
     * 
     * Retrieve settings of a given indexName.
     * @param indexName The index in which to perform the request. (required)
     * @return ApiResponse&lt;IndexSettings&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<IndexSettings> getSettingsWithHttpInfo(String indexName) throws ApiException {
        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(indexName, null);
        Type localVarReturnType = new TypeToken<IndexSettings>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Retrieve settings of a given indexName.
     * @param indexName The index in which to perform the request. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettingsAsync(String indexName, final ApiCallback<IndexSettings> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettingsValidateBeforeCall(indexName, _callback);
        Type localVarReturnType = new TypeToken<IndexSettings>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listIndices
     * @param page Requested page (zero-based). When specified, will retrieve a specific page; the page size is implicitly set to 100. When null, will retrieve all indices (no pagination). (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIndicesCall(Integer page, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/1/indexes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("Page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listIndicesValidateBeforeCall(Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listIndicesCall(page, _callback);
        return localVarCall;

    }

    /**
     * List existing indexes.
     * List existing indexes from an application.
     * @param page Requested page (zero-based). When specified, will retrieve a specific page; the page size is implicitly set to 100. When null, will retrieve all indices (no pagination). (optional)
     * @return ListIndicesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ListIndicesResponse listIndices(Integer page) throws ApiException {
        ApiResponse<ListIndicesResponse> localVarResp = listIndicesWithHttpInfo(page);
        return localVarResp.getData();
    }

    /**
     * List existing indexes.
     * List existing indexes from an application.
     * @param page Requested page (zero-based). When specified, will retrieve a specific page; the page size is implicitly set to 100. When null, will retrieve all indices (no pagination). (optional)
     * @return ApiResponse&lt;ListIndicesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListIndicesResponse> listIndicesWithHttpInfo(Integer page) throws ApiException {
        okhttp3.Call localVarCall = listIndicesValidateBeforeCall(page, null);
        Type localVarReturnType = new TypeToken<ListIndicesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List existing indexes. (asynchronously)
     * List existing indexes from an application.
     * @param page Requested page (zero-based). When specified, will retrieve a specific page; the page size is implicitly set to 100. When null, will retrieve all indices (no pagination). (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listIndicesAsync(Integer page, final ApiCallback<ListIndicesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listIndicesValidateBeforeCall(page, _callback);
        Type localVarReturnType = new TypeToken<ListIndicesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for multipleQueries
     * @param multipleQueriesObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multipleQueriesCall(MultipleQueriesObject multipleQueriesObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = multipleQueriesObject;

        // create path and map variables
        String localVarPath = "/1/indexes/*/queries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call multipleQueriesValidateBeforeCall(MultipleQueriesObject multipleQueriesObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'multipleQueriesObject' is set
        if (multipleQueriesObject == null) {
            throw new ApiException("Missing the required parameter 'multipleQueriesObject' when calling multipleQueries(Async)");
        }
        

        okhttp3.Call localVarCall = multipleQueriesCall(multipleQueriesObject, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get search results for the given requests.
     * @param multipleQueriesObject  (required)
     * @return MultipleQueriesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public MultipleQueriesResponse multipleQueries(MultipleQueriesObject multipleQueriesObject) throws ApiException {
        ApiResponse<MultipleQueriesResponse> localVarResp = multipleQueriesWithHttpInfo(multipleQueriesObject);
        return localVarResp.getData();
    }

    /**
     * 
     * Get search results for the given requests.
     * @param multipleQueriesObject  (required)
     * @return ApiResponse&lt;MultipleQueriesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<MultipleQueriesResponse> multipleQueriesWithHttpInfo(MultipleQueriesObject multipleQueriesObject) throws ApiException {
        okhttp3.Call localVarCall = multipleQueriesValidateBeforeCall(multipleQueriesObject, null);
        Type localVarReturnType = new TypeToken<MultipleQueriesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get search results for the given requests.
     * @param multipleQueriesObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call multipleQueriesAsync(MultipleQueriesObject multipleQueriesObject, final ApiCallback<MultipleQueriesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = multipleQueriesValidateBeforeCall(multipleQueriesObject, _callback);
        Type localVarReturnType = new TypeToken<MultipleQueriesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for operationIndex
     * @param indexName The index in which to perform the request. (required)
     * @param operationIndexObject  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationIndexCall(String indexName, OperationIndexObject operationIndexObject, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = operationIndexObject;

        // create path and map variables
        String localVarPath = "/1/indexes/{indexName}/operation"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call operationIndexValidateBeforeCall(String indexName, OperationIndexObject operationIndexObject, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling operationIndex(Async)");
        }
        
        // verify the required parameter 'operationIndexObject' is set
        if (operationIndexObject == null) {
            throw new ApiException("Missing the required parameter 'operationIndexObject' when calling operationIndex(Async)");
        }
        

        okhttp3.Call localVarCall = operationIndexCall(indexName, operationIndexObject, _callback);
        return localVarCall;

    }

    /**
     * Copy/move index.
     * Peforms a copy or a move operation on a index.
     * @param indexName The index in which to perform the request. (required)
     * @param operationIndexObject  (required)
     * @return OperationIndexResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public OperationIndexResponse operationIndex(String indexName, OperationIndexObject operationIndexObject) throws ApiException {
        ApiResponse<OperationIndexResponse> localVarResp = operationIndexWithHttpInfo(indexName, operationIndexObject);
        return localVarResp.getData();
    }

    /**
     * Copy/move index.
     * Peforms a copy or a move operation on a index.
     * @param indexName The index in which to perform the request. (required)
     * @param operationIndexObject  (required)
     * @return ApiResponse&lt;OperationIndexResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OperationIndexResponse> operationIndexWithHttpInfo(String indexName, OperationIndexObject operationIndexObject) throws ApiException {
        okhttp3.Call localVarCall = operationIndexValidateBeforeCall(indexName, operationIndexObject, null);
        Type localVarReturnType = new TypeToken<OperationIndexResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Copy/move index. (asynchronously)
     * Peforms a copy or a move operation on a index.
     * @param indexName The index in which to perform the request. (required)
     * @param operationIndexObject  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call operationIndexAsync(String indexName, OperationIndexObject operationIndexObject, final ApiCallback<OperationIndexResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = operationIndexValidateBeforeCall(indexName, operationIndexObject, _callback);
        Type localVarReturnType = new TypeToken<OperationIndexResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for saveObject
     * @param indexName The index in which to perform the request. (required)
     * @param requestBody The Algolia object. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveObjectCall(String indexName, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = requestBody;

        // create path and map variables
        String localVarPath = "/1/indexes/{indexName}"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call saveObjectValidateBeforeCall(String indexName, Map<String, Object> requestBody, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling saveObject(Async)");
        }
        
        // verify the required parameter 'requestBody' is set
        if (requestBody == null) {
            throw new ApiException("Missing the required parameter 'requestBody' when calling saveObject(Async)");
        }
        

        okhttp3.Call localVarCall = saveObjectCall(indexName, requestBody, _callback);
        return localVarCall;

    }

    /**
     * 
     * Add an object to the index, automatically assigning it an object ID.
     * @param indexName The index in which to perform the request. (required)
     * @param requestBody The Algolia object. (required)
     * @return SaveObjectResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public SaveObjectResponse saveObject(String indexName, Map<String, Object> requestBody) throws ApiException {
        ApiResponse<SaveObjectResponse> localVarResp = saveObjectWithHttpInfo(indexName, requestBody);
        return localVarResp.getData();
    }

    /**
     * 
     * Add an object to the index, automatically assigning it an object ID.
     * @param indexName The index in which to perform the request. (required)
     * @param requestBody The Algolia object. (required)
     * @return ApiResponse&lt;SaveObjectResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SaveObjectResponse> saveObjectWithHttpInfo(String indexName, Map<String, Object> requestBody) throws ApiException {
        okhttp3.Call localVarCall = saveObjectValidateBeforeCall(indexName, requestBody, null);
        Type localVarReturnType = new TypeToken<SaveObjectResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Add an object to the index, automatically assigning it an object ID.
     * @param indexName The index in which to perform the request. (required)
     * @param requestBody The Algolia object. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call saveObjectAsync(String indexName, Map<String, Object> requestBody, final ApiCallback<SaveObjectResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = saveObjectValidateBeforeCall(indexName, requestBody, _callback);
        Type localVarReturnType = new TypeToken<SaveObjectResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for search
     * @param indexName The index in which to perform the request. (required)
     * @param searchParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCall(String indexName, SearchParams searchParams, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = searchParams;

        // create path and map variables
        String localVarPath = "/1/indexes/{indexName}/query"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchValidateBeforeCall(String indexName, SearchParams searchParams, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling search(Async)");
        }
        
        // verify the required parameter 'searchParams' is set
        if (searchParams == null) {
            throw new ApiException("Missing the required parameter 'searchParams' when calling search(Async)");
        }
        

        okhttp3.Call localVarCall = searchCall(indexName, searchParams, _callback);
        return localVarCall;

    }

    /**
     * 
     * Get search results.
     * @param indexName The index in which to perform the request. (required)
     * @param searchParams  (required)
     * @return SearchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public SearchResponse search(String indexName, SearchParams searchParams) throws ApiException {
        ApiResponse<SearchResponse> localVarResp = searchWithHttpInfo(indexName, searchParams);
        return localVarResp.getData();
    }

    /**
     * 
     * Get search results.
     * @param indexName The index in which to perform the request. (required)
     * @param searchParams  (required)
     * @return ApiResponse&lt;SearchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchResponse> searchWithHttpInfo(String indexName, SearchParams searchParams) throws ApiException {
        okhttp3.Call localVarCall = searchValidateBeforeCall(indexName, searchParams, null);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get search results.
     * @param indexName The index in which to perform the request. (required)
     * @param searchParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchAsync(String indexName, SearchParams searchParams, final ApiCallback<SearchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchValidateBeforeCall(indexName, searchParams, _callback);
        Type localVarReturnType = new TypeToken<SearchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for setSettings
     * @param indexName The index in which to perform the request. (required)
     * @param indexSettings  (required)
     * @param forwardToReplicas When true, changes are also propagated to replicas of the given indexName. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setSettingsCall(String indexName, IndexSettings indexSettings, Boolean forwardToReplicas, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = indexSettings;

        // create path and map variables
        String localVarPath = "/1/indexes/{indexName}/settings"
            .replaceAll("\\{" + "indexName" + "\\}", localVarApiClient.escapeString(indexName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (forwardToReplicas != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("forwardToReplicas", forwardToReplicas));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "apiKey", "appId" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call setSettingsValidateBeforeCall(String indexName, IndexSettings indexSettings, Boolean forwardToReplicas, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'indexName' is set
        if (indexName == null) {
            throw new ApiException("Missing the required parameter 'indexName' when calling setSettings(Async)");
        }
        
        // verify the required parameter 'indexSettings' is set
        if (indexSettings == null) {
            throw new ApiException("Missing the required parameter 'indexSettings' when calling setSettings(Async)");
        }
        

        okhttp3.Call localVarCall = setSettingsCall(indexName, indexSettings, forwardToReplicas, _callback);
        return localVarCall;

    }

    /**
     * 
     * Update settings of a given indexName. Only specified settings are overridden; unspecified settings are left unchanged. Specifying null for a setting resets it to its default value.
     * @param indexName The index in which to perform the request. (required)
     * @param indexSettings  (required)
     * @param forwardToReplicas When true, changes are also propagated to replicas of the given indexName. (optional)
     * @return SetSettingsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public SetSettingsResponse setSettings(String indexName, IndexSettings indexSettings, Boolean forwardToReplicas) throws ApiException {
        ApiResponse<SetSettingsResponse> localVarResp = setSettingsWithHttpInfo(indexName, indexSettings, forwardToReplicas);
        return localVarResp.getData();
    }

    /**
     * 
     * Update settings of a given indexName. Only specified settings are overridden; unspecified settings are left unchanged. Specifying null for a setting resets it to its default value.
     * @param indexName The index in which to perform the request. (required)
     * @param indexSettings  (required)
     * @param forwardToReplicas When true, changes are also propagated to replicas of the given indexName. (optional)
     * @return ApiResponse&lt;SetSettingsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SetSettingsResponse> setSettingsWithHttpInfo(String indexName, IndexSettings indexSettings, Boolean forwardToReplicas) throws ApiException {
        okhttp3.Call localVarCall = setSettingsValidateBeforeCall(indexName, indexSettings, forwardToReplicas, null);
        Type localVarReturnType = new TypeToken<SetSettingsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update settings of a given indexName. Only specified settings are overridden; unspecified settings are left unchanged. Specifying null for a setting resets it to its default value.
     * @param indexName The index in which to perform the request. (required)
     * @param indexSettings  (required)
     * @param forwardToReplicas When true, changes are also propagated to replicas of the given indexName. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request or request arguments. </td><td>  -  </td></tr>
        <tr><td> 402 </td><td> This feature is not enabled on your Algolia account. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Method not allowed with this API key. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Index not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call setSettingsAsync(String indexName, IndexSettings indexSettings, Boolean forwardToReplicas, final ApiCallback<SetSettingsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = setSettingsValidateBeforeCall(indexName, indexSettings, forwardToReplicas, _callback);
        Type localVarReturnType = new TypeToken<SetSettingsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
