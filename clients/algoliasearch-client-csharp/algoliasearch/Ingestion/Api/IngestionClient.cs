//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Ingestion.Client;
using Algolia.Search.Ingestion.Models;
using Algolia.Search.Transport;
using Algolia.Search.Http;
using Algolia.Search.Client;

namespace Algolia.Search.Ingestion.Api
{

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IIngestionClient
  {
    /// <summary>
    /// Create a authentication.
    /// </summary>
    /// <remarks>
    /// Create a authentication.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationCreate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationCreateResponse</returns>
    Task<AuthenticationCreateResponse> CreateAuthenticationAsync(AuthenticationCreate authenticationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Create a destination.
    /// </summary>
    /// <remarks>
    /// Create a destination.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationCreate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DestinationCreateResponse</returns>
    Task<DestinationCreateResponse> CreateDestinationAsync(DestinationCreate destinationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Create a source.
    /// </summary>
    /// <remarks>
    /// Create a source.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceCreate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SourceCreateResponse</returns>
    Task<SourceCreateResponse> CreateSourceAsync(SourceCreate sourceCreate, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Create a task.
    /// </summary>
    /// <remarks>
    /// Create a task.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskCreate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskCreateResponse</returns>
    Task<TaskCreateResponse> CreateTaskAsync(TaskCreate taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomDeleteAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomGetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomPostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomPutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Delete a authentication.
    /// </summary>
    /// <remarks>
    /// Soft delete the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    Task<DeleteResponse> DeleteAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Delete a destination.
    /// </summary>
    /// <remarks>
    /// Soft delete the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    Task<DeleteResponse> DeleteDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Delete a source.
    /// </summary>
    /// <remarks>
    /// Soft delete the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    Task<DeleteResponse> DeleteSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Delete a task.
    /// </summary>
    /// <remarks>
    /// Soft delete the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    Task<DeleteResponse> DeleteTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Disable a task.
    /// </summary>
    /// <remarks>
    /// Disable the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    Task<TaskUpdateResponse> DisableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Enable a task.
    /// </summary>
    /// <remarks>
    /// Enable the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    Task<TaskUpdateResponse> EnableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a authentication.
    /// </summary>
    /// <remarks>
    /// Get the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Authentication</returns>
    Task<Authentication> GetAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a list of authentications.
    /// </summary>
    /// <remarks>
    /// Get a list of authentications for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the authentications to retrieve. (optional)</param>
    /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListAuthenticationsResponse</returns>
    Task<ListAuthenticationsResponse> GetAuthenticationsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<AuthenticationType> type = default(List<AuthenticationType>), List<PlatformWithNone> platform = default(List<PlatformWithNone>), AuthenticationSortKeys sort = default(AuthenticationSortKeys), OrderKeys order = default(OrderKeys), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a destination.
    /// </summary>
    /// <remarks>
    /// Get the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Destination</returns>
    Task<Destination> GetDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a list of destinations.
    /// </summary>
    /// <remarks>
    /// Get a list of destinations for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the destinations to retrive. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListDestinationsResponse</returns>
    Task<ListDestinationsResponse> GetDestinationsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<DestinationType> type = default(List<DestinationType>), List<string> authenticationID = default(List<string>), DestinationSortKeys sort = default(DestinationSortKeys), OrderKeys order = default(OrderKeys), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Retrieve a stream listing.
    /// </summary>
    /// <remarks>
    /// Retrieve a stream listing for a given Singer specification compatible docker type source ID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DockerSourceStreams</returns>
    Task<DockerSourceStreams> GetDockerSourceStreamsAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get an event.
    /// </summary>
    /// <remarks>
    /// Get a single event for a specific runID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="eventID">The event UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Event</returns>
    Task<Event> GetEventAsync(string runID, string eventID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a list of events.
    /// </summary>
    /// <remarks>
    /// Get a list of events associated to the given runID, for the given query parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the events. (optional)</param>
    /// <param name="type">Filter the type of the events. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListEventsResponse</returns>
    Task<ListEventsResponse> GetEventsAsync(string runID, int? itemsPerPage = default(int?), int? page = default(int?), List<EventStatus> status = default(List<EventStatus>), List<EventType> type = default(List<EventType>), EventSortKeys sort = default(EventSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a run.
    /// </summary>
    /// <remarks>
    /// Get a single run for the given ID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Run</returns>
    Task<Run> GetRunAsync(string runID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a list of runs.
    /// </summary>
    /// <remarks>
    /// Get a list of runs for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the runs. (optional)</param>
    /// <param name="taskID">Filter by taskID. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RunListResponse</returns>
    Task<RunListResponse> GetRunsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<RunStatus> status = default(List<RunStatus>), string taskID = default(string), RunSortKeys sort = default(RunSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a source.
    /// </summary>
    /// <remarks>
    /// Get the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Source</returns>
    Task<Source> GetSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a list of sources.
    /// </summary>
    /// <remarks>
    /// Get a list of sources for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the sources to retrieve. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListSourcesResponse</returns>
    Task<ListSourcesResponse> GetSourcesAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<SourceType> type = default(List<SourceType>), List<string> authenticationID = default(List<string>), SourceSortKeys sort = default(SourceSortKeys), OrderKeys order = default(OrderKeys), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a task.
    /// </summary>
    /// <remarks>
    /// Get the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of IngestionTask</returns>
    Task<IngestionTask> GetTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a list of tasks.
    /// </summary>
    /// <remarks>
    /// Get a list of tasks for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="action">The action of the tasks to retrieve. (optional)</param>
    /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
    /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
    /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
    /// <param name="triggerType">The trigger type of the task. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListTasksResponse</returns>
    Task<ListTasksResponse> GetTasksAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<ActionType> action = default(List<ActionType>), bool? enabled = default(bool?), List<string> sourceID = default(List<string>), List<string> destinationID = default(List<string>), List<TriggerType> triggerType = default(List<TriggerType>), TaskSortKeys sort = default(TaskSortKeys), OrderKeys order = default(OrderKeys), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Run a task.
    /// </summary>
    /// <remarks>
    /// Run the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RunResponse</returns>
    Task<RunResponse> RunTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Search among authentications.
    /// </summary>
    /// <remarks>
    /// Search among authentications with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationSearch"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Authentication&gt;</returns>
    Task<List<Authentication>> SearchAuthenticationsAsync(AuthenticationSearch authenticationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Search among destinations.
    /// </summary>
    /// <remarks>
    /// Search among destinations with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationSearch"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Destination&gt;</returns>
    Task<List<Destination>> SearchDestinationsAsync(DestinationSearch destinationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Search among sources.
    /// </summary>
    /// <remarks>
    /// Search among sources with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceSearch"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Source&gt;</returns>
    Task<List<Source>> SearchSourcesAsync(SourceSearch sourceSearch, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Search among tasks.
    /// </summary>
    /// <remarks>
    /// Search among tasks with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskSearch"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;IngestionTask&gt;</returns>
    Task<List<IngestionTask>> SearchTasksAsync(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Trigger a stream listing request.
    /// </summary>
    /// <remarks>
    /// Trigger a stream listing request for a Singer specification compatible docker type source.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DockerSourceDiscover</returns>
    Task<DockerSourceDiscover> TriggerDockerSourceDiscoverAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Update a authentication.
    /// </summary>
    /// <remarks>
    /// Update the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="authenticationUpdate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationUpdateResponse</returns>
    Task<AuthenticationUpdateResponse> UpdateAuthenticationAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Update a destination.
    /// </summary>
    /// <remarks>
    /// Update the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="destinationUpdate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DestinationUpdateResponse</returns>
    Task<DestinationUpdateResponse> UpdateDestinationAsync(string destinationID, DestinationUpdate destinationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Update a source.
    /// </summary>
    /// <remarks>
    /// Update the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="sourceUpdate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SourceUpdateResponse</returns>
    Task<SourceUpdateResponse> UpdateSourceAsync(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Update a task.
    /// </summary>
    /// <remarks>
    /// Update the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="taskUpdate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    Task<TaskUpdateResponse> UpdateTaskAsync(string taskID, TaskUpdate taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);
  }


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public partial class IngestionClient : IIngestionClient
  {
    private readonly HttpTransport _transport;
    private readonly AlgoliaConfig _config;

    /// <summary>
    /// Create a new Ingestion client for the given appID and apiKey.
    /// </summary>
    /// <param name="applicationId">Your application</param>
    /// <param name="apiKey">Your API key</param>
    public IngestionClient(string applicationId, string apiKey) : this(new IngestionConfig(applicationId, apiKey), new AlgoliaHttpRequester())
    {
    }

    /// <summary>
    /// Initialize a client with custom config
    /// </summary>
    /// <param name="config">Algolia configuration</param>
    public IngestionClient(IngestionConfig config) : this(config, new AlgoliaHttpRequester())
    {
    }

    /// <summary>
    /// Initialize the client with custom config and custom Requester
    /// </summary>
    /// <param name="config">Algolia Config</param>
    /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
    public IngestionClient(IngestionConfig config, IHttpRequester httpRequester)
    {
      if (httpRequester == null)
      {
        throw new ArgumentNullException(nameof(httpRequester), "An httpRequester is required");
      }

      if (config == null)
      {
        throw new ArgumentNullException(nameof(config), "A config is required");
      }

      if (string.IsNullOrWhiteSpace(config.AppId))
      {
        throw new ArgumentNullException(nameof(config.AppId), "Application ID is required");
      }

      if (string.IsNullOrWhiteSpace(config.ApiKey))
      {
        throw new ArgumentNullException(nameof(config.ApiKey), "An API key is required");
      }

      _config = config;
      _transport = new HttpTransport(config, httpRequester);
    }


    /// <summary>
    /// Create a authentication. Create a authentication.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationCreate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationCreateResponse</returns>
    public async Task<AuthenticationCreateResponse> CreateAuthenticationAsync(AuthenticationCreate authenticationCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'authenticationCreate' is set
      if (authenticationCreate == null)
        throw new ApiException(400, "Missing required parameter 'authenticationCreate' when calling IngestionClient->CreateAuthentication");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = authenticationCreate;


      return await _transport.ExecuteRequestAsync<AuthenticationCreateResponse>(new HttpMethod("POST"), "/1/authentications", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Create a destination. Create a destination.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationCreate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DestinationCreateResponse</returns>
    public async Task<DestinationCreateResponse> CreateDestinationAsync(DestinationCreate destinationCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'destinationCreate' is set
      if (destinationCreate == null)
        throw new ApiException(400, "Missing required parameter 'destinationCreate' when calling IngestionClient->CreateDestination");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = destinationCreate;


      return await _transport.ExecuteRequestAsync<DestinationCreateResponse>(new HttpMethod("POST"), "/1/destinations", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Create a source. Create a source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceCreate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SourceCreateResponse</returns>
    public async Task<SourceCreateResponse> CreateSourceAsync(SourceCreate sourceCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'sourceCreate' is set
      if (sourceCreate == null)
        throw new ApiException(400, "Missing required parameter 'sourceCreate' when calling IngestionClient->CreateSource");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = sourceCreate;


      return await _transport.ExecuteRequestAsync<SourceCreateResponse>(new HttpMethod("POST"), "/1/sources", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Create a task. Create a task.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskCreate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskCreateResponse</returns>
    public async Task<TaskCreateResponse> CreateTaskAsync(TaskCreate taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'taskCreate' is set
      if (taskCreate == null)
        throw new ApiException(400, "Missing required parameter 'taskCreate' when calling IngestionClient->CreateTask");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = taskCreate;


      return await _transport.ExecuteRequestAsync<TaskCreateResponse>(new HttpMethod("POST"), "/1/tasks", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomDeleteAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling IngestionClient->CustomDelete");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("DELETE"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomGetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling IngestionClient->CustomGet");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("GET"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomPostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling IngestionClient->CustomPost");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }
      requestOptions.Data = body;


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("POST"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomPutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling IngestionClient->CustomPut");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }
      requestOptions.Data = body;


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("PUT"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Delete a authentication. Soft delete the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    public async Task<DeleteResponse> DeleteAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->DeleteAuthentication");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("authenticationID", ClientUtils.ParameterToString(authenticationID));


      return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Delete a destination. Soft delete the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    public async Task<DeleteResponse> DeleteDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->DeleteDestination");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("destinationID", ClientUtils.ParameterToString(destinationID));


      return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Delete a source. Soft delete the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    public async Task<DeleteResponse> DeleteSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->DeleteSource");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));


      return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Delete a task. Soft delete the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    public async Task<DeleteResponse> DeleteTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->DeleteTask");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));


      return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Disable a task. Disable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    public async Task<TaskUpdateResponse> DisableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->DisableTask");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));


      return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PUT"), "/1/tasks/{taskID}/disable", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Enable a task. Enable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    public async Task<TaskUpdateResponse> EnableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->EnableTask");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));


      return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PUT"), "/1/tasks/{taskID}/enable", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a authentication. Get the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Authentication</returns>
    public async Task<Authentication> GetAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->GetAuthentication");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("authenticationID", ClientUtils.ParameterToString(authenticationID));


      return await _transport.ExecuteRequestAsync<Authentication>(new HttpMethod("GET"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a list of authentications. Get a list of authentications for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the authentications to retrieve. (optional)</param>
    /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListAuthenticationsResponse</returns>
    public async Task<ListAuthenticationsResponse> GetAuthenticationsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<AuthenticationType> type = default(List<AuthenticationType>), List<PlatformWithNone> platform = default(List<PlatformWithNone>), AuthenticationSortKeys sort = default(AuthenticationSortKeys), OrderKeys order = default(OrderKeys), RequestOptions options = null, CancellationToken cancellationToken = default)
    {

      RequestOptions requestOptions = new RequestOptions();
      if (itemsPerPage != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "itemsPerPage", itemsPerPage);
      }
      if (page != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "page", page);
      }
      if (type != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "type", type);
      }
      if (platform != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "platform", platform);
      }
      if (sort != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "sort", sort);
      }
      if (order != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "order", order);
      }


      return await _transport.ExecuteRequestAsync<ListAuthenticationsResponse>(new HttpMethod("GET"), "/1/authentications", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a destination. Get the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Destination</returns>
    public async Task<Destination> GetDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->GetDestination");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("destinationID", ClientUtils.ParameterToString(destinationID));


      return await _transport.ExecuteRequestAsync<Destination>(new HttpMethod("GET"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a list of destinations. Get a list of destinations for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the destinations to retrive. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListDestinationsResponse</returns>
    public async Task<ListDestinationsResponse> GetDestinationsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<DestinationType> type = default(List<DestinationType>), List<string> authenticationID = default(List<string>), DestinationSortKeys sort = default(DestinationSortKeys), OrderKeys order = default(OrderKeys), RequestOptions options = null, CancellationToken cancellationToken = default)
    {

      RequestOptions requestOptions = new RequestOptions();
      if (itemsPerPage != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "itemsPerPage", itemsPerPage);
      }
      if (page != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "page", page);
      }
      if (type != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "type", type);
      }
      if (authenticationID != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "authenticationID", authenticationID);
      }
      if (sort != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "sort", sort);
      }
      if (order != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "order", order);
      }


      return await _transport.ExecuteRequestAsync<ListDestinationsResponse>(new HttpMethod("GET"), "/1/destinations", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Retrieve a stream listing. Retrieve a stream listing for a given Singer specification compatible docker type source ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DockerSourceStreams</returns>
    public async Task<DockerSourceStreams> GetDockerSourceStreamsAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->GetDockerSourceStreams");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));


      return await _transport.ExecuteRequestAsync<DockerSourceStreams>(new HttpMethod("GET"), "/1/sources/{sourceID}/discover", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get an event. Get a single event for a specific runID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="eventID">The event UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Event</returns>
    public async Task<Event> GetEventAsync(string runID, string eventID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetEvent");

      // verify the required parameter 'eventID' is set
      if (eventID == null)
        throw new ApiException(400, "Missing required parameter 'eventID' when calling IngestionClient->GetEvent");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("runID", ClientUtils.ParameterToString(runID));
      requestOptions.PathParameters.Add("eventID", ClientUtils.ParameterToString(eventID));


      return await _transport.ExecuteRequestAsync<Event>(new HttpMethod("GET"), "/1/runs/{runID}/events/{eventID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a list of events. Get a list of events associated to the given runID, for the given query parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the events. (optional)</param>
    /// <param name="type">Filter the type of the events. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListEventsResponse</returns>
    public async Task<ListEventsResponse> GetEventsAsync(string runID, int? itemsPerPage = default(int?), int? page = default(int?), List<EventStatus> status = default(List<EventStatus>), List<EventType> type = default(List<EventType>), EventSortKeys sort = default(EventSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetEvents");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("runID", ClientUtils.ParameterToString(runID));
      if (itemsPerPage != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "itemsPerPage", itemsPerPage);
      }
      if (page != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "page", page);
      }
      if (status != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("multi", "status", status);
      }
      if (type != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("multi", "type", type);
      }
      if (sort != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "sort", sort);
      }
      if (order != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "order", order);
      }
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }


      return await _transport.ExecuteRequestAsync<ListEventsResponse>(new HttpMethod("GET"), "/1/runs/{runID}/events", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a run. Get a single run for the given ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Run</returns>
    public async Task<Run> GetRunAsync(string runID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetRun");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("runID", ClientUtils.ParameterToString(runID));


      return await _transport.ExecuteRequestAsync<Run>(new HttpMethod("GET"), "/1/runs/{runID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a list of runs. Get a list of runs for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the runs. (optional)</param>
    /// <param name="taskID">Filter by taskID. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RunListResponse</returns>
    public async Task<RunListResponse> GetRunsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<RunStatus> status = default(List<RunStatus>), string taskID = default(string), RunSortKeys sort = default(RunSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {

      RequestOptions requestOptions = new RequestOptions();
      if (itemsPerPage != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "itemsPerPage", itemsPerPage);
      }
      if (page != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "page", page);
      }
      if (status != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("multi", "status", status);
      }
      if (taskID != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "taskID", taskID);
      }
      if (sort != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "sort", sort);
      }
      if (order != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "order", order);
      }
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }


      return await _transport.ExecuteRequestAsync<RunListResponse>(new HttpMethod("GET"), "/1/runs", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a source. Get the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Source</returns>
    public async Task<Source> GetSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->GetSource");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));


      return await _transport.ExecuteRequestAsync<Source>(new HttpMethod("GET"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a list of sources. Get a list of sources for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the sources to retrieve. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListSourcesResponse</returns>
    public async Task<ListSourcesResponse> GetSourcesAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<SourceType> type = default(List<SourceType>), List<string> authenticationID = default(List<string>), SourceSortKeys sort = default(SourceSortKeys), OrderKeys order = default(OrderKeys), RequestOptions options = null, CancellationToken cancellationToken = default)
    {

      RequestOptions requestOptions = new RequestOptions();
      if (itemsPerPage != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "itemsPerPage", itemsPerPage);
      }
      if (page != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "page", page);
      }
      if (type != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "type", type);
      }
      if (authenticationID != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "authenticationID", authenticationID);
      }
      if (sort != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "sort", sort);
      }
      if (order != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "order", order);
      }


      return await _transport.ExecuteRequestAsync<ListSourcesResponse>(new HttpMethod("GET"), "/1/sources", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a task. Get the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of IngestionTask</returns>
    public async Task<IngestionTask> GetTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->GetTask");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));


      return await _transport.ExecuteRequestAsync<IngestionTask>(new HttpMethod("GET"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get a list of tasks. Get a list of tasks for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="action">The action of the tasks to retrieve. (optional)</param>
    /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
    /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
    /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
    /// <param name="triggerType">The trigger type of the task. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListTasksResponse</returns>
    public async Task<ListTasksResponse> GetTasksAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<ActionType> action = default(List<ActionType>), bool? enabled = default(bool?), List<string> sourceID = default(List<string>), List<string> destinationID = default(List<string>), List<TriggerType> triggerType = default(List<TriggerType>), TaskSortKeys sort = default(TaskSortKeys), OrderKeys order = default(OrderKeys), RequestOptions options = null, CancellationToken cancellationToken = default)
    {

      RequestOptions requestOptions = new RequestOptions();
      if (itemsPerPage != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "itemsPerPage", itemsPerPage);
      }
      if (page != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "page", page);
      }
      if (action != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "action", action);
      }
      if (enabled != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "enabled", enabled);
      }
      if (sourceID != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "sourceID", sourceID);
      }
      if (destinationID != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "destinationID", destinationID);
      }
      if (triggerType != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("csv", "triggerType", triggerType);
      }
      if (sort != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "sort", sort);
      }
      if (order != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "order", order);
      }


      return await _transport.ExecuteRequestAsync<ListTasksResponse>(new HttpMethod("GET"), "/1/tasks", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Run a task. Run the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RunResponse</returns>
    public async Task<RunResponse> RunTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->RunTask");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));


      return await _transport.ExecuteRequestAsync<RunResponse>(new HttpMethod("POST"), "/1/tasks/{taskID}/run", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Search among authentications. Search among authentications with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationSearch"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Authentication&gt;</returns>
    public async Task<List<Authentication>> SearchAuthenticationsAsync(AuthenticationSearch authenticationSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'authenticationSearch' is set
      if (authenticationSearch == null)
        throw new ApiException(400, "Missing required parameter 'authenticationSearch' when calling IngestionClient->SearchAuthentications");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = authenticationSearch;


      return await _transport.ExecuteRequestAsync<List<Authentication>>(new HttpMethod("POST"), "/1/authentications/search", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Search among destinations. Search among destinations with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationSearch"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Destination&gt;</returns>
    public async Task<List<Destination>> SearchDestinationsAsync(DestinationSearch destinationSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'destinationSearch' is set
      if (destinationSearch == null)
        throw new ApiException(400, "Missing required parameter 'destinationSearch' when calling IngestionClient->SearchDestinations");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = destinationSearch;


      return await _transport.ExecuteRequestAsync<List<Destination>>(new HttpMethod("POST"), "/1/destinations/search", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Search among sources. Search among sources with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceSearch"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Source&gt;</returns>
    public async Task<List<Source>> SearchSourcesAsync(SourceSearch sourceSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'sourceSearch' is set
      if (sourceSearch == null)
        throw new ApiException(400, "Missing required parameter 'sourceSearch' when calling IngestionClient->SearchSources");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = sourceSearch;


      return await _transport.ExecuteRequestAsync<List<Source>>(new HttpMethod("POST"), "/1/sources/search", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Search among tasks. Search among tasks with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskSearch"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;IngestionTask&gt;</returns>
    public async Task<List<IngestionTask>> SearchTasksAsync(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'taskSearch' is set
      if (taskSearch == null)
        throw new ApiException(400, "Missing required parameter 'taskSearch' when calling IngestionClient->SearchTasks");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = taskSearch;


      return await _transport.ExecuteRequestAsync<List<IngestionTask>>(new HttpMethod("POST"), "/1/tasks/search", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Trigger a stream listing request. Trigger a stream listing request for a Singer specification compatible docker type source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DockerSourceDiscover</returns>
    public async Task<DockerSourceDiscover> TriggerDockerSourceDiscoverAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->TriggerDockerSourceDiscover");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));


      return await _transport.ExecuteRequestAsync<DockerSourceDiscover>(new HttpMethod("POST"), "/1/sources/{sourceID}/discover", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Update a authentication. Update the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="authenticationUpdate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationUpdateResponse</returns>
    public async Task<AuthenticationUpdateResponse> UpdateAuthenticationAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->UpdateAuthentication");

      // verify the required parameter 'authenticationUpdate' is set
      if (authenticationUpdate == null)
        throw new ApiException(400, "Missing required parameter 'authenticationUpdate' when calling IngestionClient->UpdateAuthentication");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("authenticationID", ClientUtils.ParameterToString(authenticationID));
      requestOptions.Data = authenticationUpdate;


      return await _transport.ExecuteRequestAsync<AuthenticationUpdateResponse>(new HttpMethod("PATCH"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Update a destination. Update the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="destinationUpdate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DestinationUpdateResponse</returns>
    public async Task<DestinationUpdateResponse> UpdateDestinationAsync(string destinationID, DestinationUpdate destinationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->UpdateDestination");

      // verify the required parameter 'destinationUpdate' is set
      if (destinationUpdate == null)
        throw new ApiException(400, "Missing required parameter 'destinationUpdate' when calling IngestionClient->UpdateDestination");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("destinationID", ClientUtils.ParameterToString(destinationID));
      requestOptions.Data = destinationUpdate;


      return await _transport.ExecuteRequestAsync<DestinationUpdateResponse>(new HttpMethod("PATCH"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Update a source. Update the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="sourceUpdate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SourceUpdateResponse</returns>
    public async Task<SourceUpdateResponse> UpdateSourceAsync(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->UpdateSource");

      // verify the required parameter 'sourceUpdate' is set
      if (sourceUpdate == null)
        throw new ApiException(400, "Missing required parameter 'sourceUpdate' when calling IngestionClient->UpdateSource");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));
      requestOptions.Data = sourceUpdate;


      return await _transport.ExecuteRequestAsync<SourceUpdateResponse>(new HttpMethod("PATCH"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Update a task. Update the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="taskUpdate"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    public async Task<TaskUpdateResponse> UpdateTaskAsync(string taskID, TaskUpdate taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->UpdateTask");

      // verify the required parameter 'taskUpdate' is set
      if (taskUpdate == null)
        throw new ApiException(400, "Missing required parameter 'taskUpdate' when calling IngestionClient->UpdateTask");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));
      requestOptions.Data = taskUpdate;


      return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PATCH"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
    }

  }
}
