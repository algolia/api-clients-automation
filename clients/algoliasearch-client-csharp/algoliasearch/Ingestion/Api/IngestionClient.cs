//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Algolia.Search.Ingestion.Client;
using Algolia.Search.Ingestion.Models;

namespace Algolia.Search.Ingestion.Api
{

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IIngestionClient
  {
    /// <summary>
    /// Create a authentication.
    /// </summary>
    /// <remarks>
    /// Create a authentication.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationCreateResponse</returns>
    System.Threading.Tasks.Task<AuthenticationCreateResponse> CreateAuthenticationAsync(AuthenticationCreate authenticationCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a authentication.
    /// </summary>
    /// <remarks>
    /// Create a authentication.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AuthenticationCreateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<AuthenticationCreateResponse>> CreateAuthenticationWithHttpInfoAsync(AuthenticationCreate authenticationCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Create a destination.
    /// </summary>
    /// <remarks>
    /// Create a destination.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DestinationCreateResponse</returns>
    System.Threading.Tasks.Task<DestinationCreateResponse> CreateDestinationAsync(DestinationCreate destinationCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a destination.
    /// </summary>
    /// <remarks>
    /// Create a destination.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DestinationCreateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DestinationCreateResponse>> CreateDestinationWithHttpInfoAsync(DestinationCreate destinationCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Create a source.
    /// </summary>
    /// <remarks>
    /// Create a source.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SourceCreateResponse</returns>
    System.Threading.Tasks.Task<SourceCreateResponse> CreateSourceAsync(SourceCreate sourceCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a source.
    /// </summary>
    /// <remarks>
    /// Create a source.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SourceCreateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SourceCreateResponse>> CreateSourceWithHttpInfoAsync(SourceCreate sourceCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Create a task.
    /// </summary>
    /// <remarks>
    /// Create a task.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskCreateResponse</returns>
    System.Threading.Tasks.Task<TaskCreateResponse> CreateTaskAsync(TaskCreate taskCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a task.
    /// </summary>
    /// <remarks>
    /// Create a task.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TaskCreateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<TaskCreateResponse>> CreateTaskWithHttpInfoAsync(TaskCreate taskCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> DelAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> DelWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete a authentication.
    /// </summary>
    /// <remarks>
    /// Soft delete the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    System.Threading.Tasks.Task<DeleteResponse> DeleteAuthenticationAsync(string authenticationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete a authentication.
    /// </summary>
    /// <remarks>
    /// Soft delete the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteAuthenticationWithHttpInfoAsync(string authenticationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete a destination.
    /// </summary>
    /// <remarks>
    /// Soft delete the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    System.Threading.Tasks.Task<DeleteResponse> DeleteDestinationAsync(string destinationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete a destination.
    /// </summary>
    /// <remarks>
    /// Soft delete the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteDestinationWithHttpInfoAsync(string destinationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete a source.
    /// </summary>
    /// <remarks>
    /// Soft delete the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    System.Threading.Tasks.Task<DeleteResponse> DeleteSourceAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete a source.
    /// </summary>
    /// <remarks>
    /// Soft delete the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteSourceWithHttpInfoAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete a task.
    /// </summary>
    /// <remarks>
    /// Soft delete the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    System.Threading.Tasks.Task<DeleteResponse> DeleteTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete a task.
    /// </summary>
    /// <remarks>
    /// Soft delete the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeleteResponse>> DeleteTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Disable a task.
    /// </summary>
    /// <remarks>
    /// Disable the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    System.Threading.Tasks.Task<TaskUpdateResponse> DisableTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Disable a task.
    /// </summary>
    /// <remarks>
    /// Disable the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TaskUpdateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<TaskUpdateResponse>> DisableTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Enable a task.
    /// </summary>
    /// <remarks>
    /// Enable the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    System.Threading.Tasks.Task<TaskUpdateResponse> EnableTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Enable a task.
    /// </summary>
    /// <remarks>
    /// Enable the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TaskUpdateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<TaskUpdateResponse>> EnableTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> GetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> GetWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a authentication.
    /// </summary>
    /// <remarks>
    /// Get the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Authentication</returns>
    System.Threading.Tasks.Task<Authentication> GetAuthenticationAsync(string authenticationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a authentication.
    /// </summary>
    /// <remarks>
    /// Get the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Authentication)</returns>
    System.Threading.Tasks.Task<ApiResponse<Authentication>> GetAuthenticationWithHttpInfoAsync(string authenticationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a list of authentications.
    /// </summary>
    /// <remarks>
    /// Get a list of authentications for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the authentications to retrieve. (optional)</param>
    /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListAuthenticationsResponse</returns>
    System.Threading.Tasks.Task<ListAuthenticationsResponse> GetAuthenticationsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<AuthenticationType> type = default(List<AuthenticationType>), List<PlatformWithNone> platform = default(List<PlatformWithNone>), AuthenticationSortKeys sort = default(AuthenticationSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of authentications.
    /// </summary>
    /// <remarks>
    /// Get a list of authentications for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the authentications to retrieve. (optional)</param>
    /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListAuthenticationsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListAuthenticationsResponse>> GetAuthenticationsWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<AuthenticationType> type = default(List<AuthenticationType>), List<PlatformWithNone> platform = default(List<PlatformWithNone>), AuthenticationSortKeys sort = default(AuthenticationSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a destination.
    /// </summary>
    /// <remarks>
    /// Get the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Destination</returns>
    System.Threading.Tasks.Task<Destination> GetDestinationAsync(string destinationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a destination.
    /// </summary>
    /// <remarks>
    /// Get the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Destination)</returns>
    System.Threading.Tasks.Task<ApiResponse<Destination>> GetDestinationWithHttpInfoAsync(string destinationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a list of destinations.
    /// </summary>
    /// <remarks>
    /// Get a list of destinations for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the destinations to retrive. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListDestinationsResponse</returns>
    System.Threading.Tasks.Task<ListDestinationsResponse> GetDestinationsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<DestinationType> type = default(List<DestinationType>), List<string> authenticationID = default(List<string>), DestinationSortKeys sort = default(DestinationSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of destinations.
    /// </summary>
    /// <remarks>
    /// Get a list of destinations for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the destinations to retrive. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListDestinationsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListDestinationsResponse>> GetDestinationsWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<DestinationType> type = default(List<DestinationType>), List<string> authenticationID = default(List<string>), DestinationSortKeys sort = default(DestinationSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Retrieve a stream listing.
    /// </summary>
    /// <remarks>
    /// Retrieve a stream listing for a given Singer specification compatible docker type source ID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DockerSourceStreams</returns>
    System.Threading.Tasks.Task<DockerSourceStreams> GetDockerSourceStreamsAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Retrieve a stream listing.
    /// </summary>
    /// <remarks>
    /// Retrieve a stream listing for a given Singer specification compatible docker type source ID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DockerSourceStreams)</returns>
    System.Threading.Tasks.Task<ApiResponse<DockerSourceStreams>> GetDockerSourceStreamsWithHttpInfoAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get an event.
    /// </summary>
    /// <remarks>
    /// Get a single event for a specific runID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="eventID">The event UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Event</returns>
    System.Threading.Tasks.Task<Event> GetEventAsync(string runID, string eventID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get an event.
    /// </summary>
    /// <remarks>
    /// Get a single event for a specific runID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="eventID">The event UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Event)</returns>
    System.Threading.Tasks.Task<ApiResponse<Event>> GetEventWithHttpInfoAsync(string runID, string eventID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a list of events.
    /// </summary>
    /// <remarks>
    /// Get a list of events associated to the given runID, for the given query parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the events. (optional)</param>
    /// <param name="type">Filter the type of the events. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListEventsResponse</returns>
    System.Threading.Tasks.Task<ListEventsResponse> GetEventsAsync(string runID, int? itemsPerPage = default(int?), int? page = default(int?), List<EventStatus> status = default(List<EventStatus>), List<EventType> type = default(List<EventType>), EventSortKeys sort = default(EventSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of events.
    /// </summary>
    /// <remarks>
    /// Get a list of events associated to the given runID, for the given query parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the events. (optional)</param>
    /// <param name="type">Filter the type of the events. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListEventsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListEventsResponse>> GetEventsWithHttpInfoAsync(string runID, int? itemsPerPage = default(int?), int? page = default(int?), List<EventStatus> status = default(List<EventStatus>), List<EventType> type = default(List<EventType>), EventSortKeys sort = default(EventSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a run.
    /// </summary>
    /// <remarks>
    /// Get a single run for the given ID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Run</returns>
    System.Threading.Tasks.Task<Run> GetRunAsync(string runID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a run.
    /// </summary>
    /// <remarks>
    /// Get a single run for the given ID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Run)</returns>
    System.Threading.Tasks.Task<ApiResponse<Run>> GetRunWithHttpInfoAsync(string runID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a list of runs.
    /// </summary>
    /// <remarks>
    /// Get a list of runs for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the runs. (optional)</param>
    /// <param name="taskID">Filter by taskID. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RunListResponse</returns>
    System.Threading.Tasks.Task<RunListResponse> GetRunsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<RunStatus> status = default(List<RunStatus>), string taskID = default(string), RunSortKeys sort = default(RunSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of runs.
    /// </summary>
    /// <remarks>
    /// Get a list of runs for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the runs. (optional)</param>
    /// <param name="taskID">Filter by taskID. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RunListResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<RunListResponse>> GetRunsWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<RunStatus> status = default(List<RunStatus>), string taskID = default(string), RunSortKeys sort = default(RunSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a source.
    /// </summary>
    /// <remarks>
    /// Get the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Source</returns>
    System.Threading.Tasks.Task<Source> GetSourceAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a source.
    /// </summary>
    /// <remarks>
    /// Get the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Source)</returns>
    System.Threading.Tasks.Task<ApiResponse<Source>> GetSourceWithHttpInfoAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a list of sources.
    /// </summary>
    /// <remarks>
    /// Get a list of sources for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the sources to retrieve. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListSourcesResponse</returns>
    System.Threading.Tasks.Task<ListSourcesResponse> GetSourcesAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<SourceType> type = default(List<SourceType>), List<string> authenticationID = default(List<string>), SourceSortKeys sort = default(SourceSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of sources.
    /// </summary>
    /// <remarks>
    /// Get a list of sources for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the sources to retrieve. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListSourcesResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListSourcesResponse>> GetSourcesWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<SourceType> type = default(List<SourceType>), List<string> authenticationID = default(List<string>), SourceSortKeys sort = default(SourceSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a task.
    /// </summary>
    /// <remarks>
    /// Get the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Task</returns>
    System.Threading.Tasks.Task<Task> GetTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a task.
    /// </summary>
    /// <remarks>
    /// Get the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Task)</returns>
    System.Threading.Tasks.Task<ApiResponse<Task>> GetTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a list of tasks.
    /// </summary>
    /// <remarks>
    /// Get a list of tasks for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="action">The action of the tasks to retrieve. (optional)</param>
    /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
    /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
    /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
    /// <param name="triggerType">The trigger type of the task. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListTasksResponse</returns>
    System.Threading.Tasks.Task<ListTasksResponse> GetTasksAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<ActionType> action = default(List<ActionType>), bool? enabled = default(bool?), List<string> sourceID = default(List<string>), List<string> destinationID = default(List<string>), List<TriggerType> triggerType = default(List<TriggerType>), TaskSortKeys sort = default(TaskSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a list of tasks.
    /// </summary>
    /// <remarks>
    /// Get a list of tasks for the given query parameters, with pagination details.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="action">The action of the tasks to retrieve. (optional)</param>
    /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
    /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
    /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
    /// <param name="triggerType">The trigger type of the task. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListTasksResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListTasksResponse>> GetTasksWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<ActionType> action = default(List<ActionType>), bool? enabled = default(bool?), List<string> sourceID = default(List<string>), List<string> destinationID = default(List<string>), List<TriggerType> triggerType = default(List<TriggerType>), TaskSortKeys sort = default(TaskSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> PostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> PostWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> PutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> PutWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Run a task.
    /// </summary>
    /// <remarks>
    /// Run the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RunResponse</returns>
    System.Threading.Tasks.Task<RunResponse> RunTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Run a task.
    /// </summary>
    /// <remarks>
    /// Run the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RunResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<RunResponse>> RunTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search among authentications.
    /// </summary>
    /// <remarks>
    /// Search among authentications with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Authentication&gt;</returns>
    System.Threading.Tasks.Task<List<Authentication>> SearchAuthenticationsAsync(AuthenticationSearch authenticationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search among authentications.
    /// </summary>
    /// <remarks>
    /// Search among authentications with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Authentication&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Authentication>>> SearchAuthenticationsWithHttpInfoAsync(AuthenticationSearch authenticationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search among destinations.
    /// </summary>
    /// <remarks>
    /// Search among destinations with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Destination&gt;</returns>
    System.Threading.Tasks.Task<List<Destination>> SearchDestinationsAsync(DestinationSearch destinationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search among destinations.
    /// </summary>
    /// <remarks>
    /// Search among destinations with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Destination&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Destination>>> SearchDestinationsWithHttpInfoAsync(DestinationSearch destinationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search among sources.
    /// </summary>
    /// <remarks>
    /// Search among sources with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Source&gt;</returns>
    System.Threading.Tasks.Task<List<Source>> SearchSourcesAsync(SourceSearch sourceSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search among sources.
    /// </summary>
    /// <remarks>
    /// Search among sources with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Source&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Source>>> SearchSourcesWithHttpInfoAsync(SourceSearch sourceSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search among tasks.
    /// </summary>
    /// <remarks>
    /// Search among tasks with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Task&gt;</returns>
    System.Threading.Tasks.Task<List<Task>> SearchTasksAsync(TaskSearch taskSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search among tasks.
    /// </summary>
    /// <remarks>
    /// Search among tasks with a defined set of parameters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Task&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Task>>> SearchTasksWithHttpInfoAsync(TaskSearch taskSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Trigger a stream listing request.
    /// </summary>
    /// <remarks>
    /// Trigger a stream listing request for a Singer specification compatible docker type source.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DockerSourceDiscover</returns>
    System.Threading.Tasks.Task<DockerSourceDiscover> TriggerDockerSourceDiscoverAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Trigger a stream listing request.
    /// </summary>
    /// <remarks>
    /// Trigger a stream listing request for a Singer specification compatible docker type source.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DockerSourceDiscover)</returns>
    System.Threading.Tasks.Task<ApiResponse<DockerSourceDiscover>> TriggerDockerSourceDiscoverWithHttpInfoAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Update a authentication.
    /// </summary>
    /// <remarks>
    /// Update the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="authenticationUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationUpdateResponse</returns>
    System.Threading.Tasks.Task<AuthenticationUpdateResponse> UpdateAuthenticationAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a authentication.
    /// </summary>
    /// <remarks>
    /// Update the authentication of the given authenticationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="authenticationUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AuthenticationUpdateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<AuthenticationUpdateResponse>> UpdateAuthenticationWithHttpInfoAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Update a destination.
    /// </summary>
    /// <remarks>
    /// Update the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="destinationUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DestinationUpdateResponse</returns>
    System.Threading.Tasks.Task<DestinationUpdateResponse> UpdateDestinationAsync(string destinationID, DestinationUpdate destinationUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a destination.
    /// </summary>
    /// <remarks>
    /// Update the destination of the given destinationID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="destinationUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DestinationUpdateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DestinationUpdateResponse>> UpdateDestinationWithHttpInfoAsync(string destinationID, DestinationUpdate destinationUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Update a source.
    /// </summary>
    /// <remarks>
    /// Update the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="sourceUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SourceUpdateResponse</returns>
    System.Threading.Tasks.Task<SourceUpdateResponse> UpdateSourceAsync(string sourceID, SourceUpdate sourceUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a source.
    /// </summary>
    /// <remarks>
    /// Update the source of the given sourceID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="sourceUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SourceUpdateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SourceUpdateResponse>> UpdateSourceWithHttpInfoAsync(string sourceID, SourceUpdate sourceUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Update a task.
    /// </summary>
    /// <remarks>
    /// Update the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="taskUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    System.Threading.Tasks.Task<TaskUpdateResponse> UpdateTaskAsync(string taskID, TaskUpdate taskUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a task.
    /// </summary>
    /// <remarks>
    /// Update the task of the given taskID.
    /// </remarks>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="taskUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TaskUpdateResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<TaskUpdateResponse>> UpdateTaskWithHttpInfoAsync(string taskID, TaskUpdate taskUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
  }


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public partial class IngestionClient : IDisposable, IIngestionClient
  {
    private Algolia.Search.Ingestion.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="IngestionClient"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <returns></returns>
    public IngestionClient() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="IngestionClient"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    public IngestionClient(string basePath)
    {
      this.Configuration = Algolia.Search.Ingestion.Client.Configuration.MergeConfigurations(
          Algolia.Search.Ingestion.Client.GlobalConfiguration.Instance,
          new Algolia.Search.Ingestion.Client.Configuration { BasePath = basePath }
      );
      this.ApiClient = new Algolia.Search.Ingestion.Client.ApiClient(this.Configuration.BasePath);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      this.ExceptionFactory = Algolia.Search.Ingestion.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="IngestionClient"/> class using Configuration object.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    public IngestionClient(Algolia.Search.Ingestion.Client.Configuration configuration)
    {
      if (configuration == null) throw new ArgumentNullException("configuration");

      this.Configuration = Algolia.Search.Ingestion.Client.Configuration.MergeConfigurations(
          Algolia.Search.Ingestion.Client.GlobalConfiguration.Instance,
          configuration
      );
      this.ApiClient = new Algolia.Search.Ingestion.Client.ApiClient(this.Configuration.BasePath);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      ExceptionFactory = Algolia.Search.Ingestion.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="IngestionClient"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public IngestionClient(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="IngestionClient"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public IngestionClient(HttpClient client, string basePath, HttpClientHandler handler = null)
    {
      if (client == null) throw new ArgumentNullException("client");

      this.Configuration = Algolia.Search.Ingestion.Client.Configuration.MergeConfigurations(
          Algolia.Search.Ingestion.Client.GlobalConfiguration.Instance,
          new Algolia.Search.Ingestion.Client.Configuration { BasePath = basePath }
      );
      this.ApiClient = new Algolia.Search.Ingestion.Client.ApiClient(client, this.Configuration.BasePath, handler);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      this.ExceptionFactory = Algolia.Search.Ingestion.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="IngestionClient"/> class using Configuration object.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public IngestionClient(HttpClient client, Algolia.Search.Ingestion.Client.Configuration configuration, HttpClientHandler handler = null)
    {
      if (configuration == null) throw new ArgumentNullException("configuration");
      if (client == null) throw new ArgumentNullException("client");

      this.Configuration = Algolia.Search.Ingestion.Client.Configuration.MergeConfigurations(
          Algolia.Search.Ingestion.Client.GlobalConfiguration.Instance,
          configuration
      );
      this.ApiClient = new Algolia.Search.Ingestion.Client.ApiClient(client, this.Configuration.BasePath, handler);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      ExceptionFactory = Algolia.Search.Ingestion.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="IngestionClient"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    /// <exception cref="ArgumentNullException"></exception>
    public IngestionClient(Algolia.Search.Ingestion.Client.ISynchronousClient client, Algolia.Search.Ingestion.Client.IAsynchronousClient asyncClient, Algolia.Search.Ingestion.Client.IReadableConfiguration configuration)
    {
      if (client == null) throw new ArgumentNullException("client");
      if (asyncClient == null) throw new ArgumentNullException("asyncClient");
      if (configuration == null) throw new ArgumentNullException("configuration");

      this.Client = client;
      this.AsynchronousClient = asyncClient;
      this.Configuration = configuration;
      this.ExceptionFactory = Algolia.Search.Ingestion.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Disposes resources if they were created by us
    /// </summary>
    public void Dispose()
    {
      this.ApiClient?.Dispose();
    }

    /// <summary>
    /// Holds the ApiClient if created
    /// </summary>
    public Algolia.Search.Ingestion.Client.ApiClient ApiClient { get; set; } = null;

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public Algolia.Search.Ingestion.Client.IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public Algolia.Search.Ingestion.Client.ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
      return this.Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Algolia.Search.Ingestion.Client.IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public Algolia.Search.Ingestion.Client.ExceptionFactory ExceptionFactory
    {
      get
      {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
          throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
      }
      set { _exceptionFactory = value; }
    }

    /// <summary>
    /// Create a authentication. Create a authentication.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationCreate"></param>
    /// <returns>AuthenticationCreateResponse</returns>
    public AuthenticationCreateResponse CreateAuthentication(AuthenticationCreate authenticationCreate)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<AuthenticationCreateResponse> localVarResponse = CreateAuthenticationWithHttpInfo(authenticationCreate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a authentication. Create a authentication.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationCreate"></param>
    /// <returns>ApiResponse of AuthenticationCreateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<AuthenticationCreateResponse> CreateAuthenticationWithHttpInfo(AuthenticationCreate authenticationCreate)
    {
      // verify the required parameter 'authenticationCreate' is set
      if (authenticationCreate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationCreate' when calling IngestionClient->CreateAuthentication");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = authenticationCreate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<AuthenticationCreateResponse>("/1/authentications", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateAuthentication", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create a authentication. Create a authentication.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationCreateResponse</returns>
    public async System.Threading.Tasks.Task<AuthenticationCreateResponse> CreateAuthenticationAsync(AuthenticationCreate authenticationCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<AuthenticationCreateResponse> localVarResponse = await CreateAuthenticationWithHttpInfoAsync(authenticationCreate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a authentication. Create a authentication.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AuthenticationCreateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<AuthenticationCreateResponse>> CreateAuthenticationWithHttpInfoAsync(AuthenticationCreate authenticationCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'authenticationCreate' is set
      if (authenticationCreate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationCreate' when calling IngestionClient->CreateAuthentication");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = authenticationCreate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<AuthenticationCreateResponse>("/1/authentications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateAuthentication", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create a destination. Create a destination.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationCreate"></param>
    /// <returns>DestinationCreateResponse</returns>
    public DestinationCreateResponse CreateDestination(DestinationCreate destinationCreate)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DestinationCreateResponse> localVarResponse = CreateDestinationWithHttpInfo(destinationCreate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a destination. Create a destination.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationCreate"></param>
    /// <returns>ApiResponse of DestinationCreateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<DestinationCreateResponse> CreateDestinationWithHttpInfo(DestinationCreate destinationCreate)
    {
      // verify the required parameter 'destinationCreate' is set
      if (destinationCreate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationCreate' when calling IngestionClient->CreateDestination");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = destinationCreate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<DestinationCreateResponse>("/1/destinations", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateDestination", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create a destination. Create a destination.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DestinationCreateResponse</returns>
    public async System.Threading.Tasks.Task<DestinationCreateResponse> CreateDestinationAsync(DestinationCreate destinationCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DestinationCreateResponse> localVarResponse = await CreateDestinationWithHttpInfoAsync(destinationCreate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a destination. Create a destination.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DestinationCreateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<DestinationCreateResponse>> CreateDestinationWithHttpInfoAsync(DestinationCreate destinationCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'destinationCreate' is set
      if (destinationCreate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationCreate' when calling IngestionClient->CreateDestination");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = destinationCreate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<DestinationCreateResponse>("/1/destinations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateDestination", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create a source. Create a source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceCreate"></param>
    /// <returns>SourceCreateResponse</returns>
    public SourceCreateResponse CreateSource(SourceCreate sourceCreate)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<SourceCreateResponse> localVarResponse = CreateSourceWithHttpInfo(sourceCreate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a source. Create a source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceCreate"></param>
    /// <returns>ApiResponse of SourceCreateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<SourceCreateResponse> CreateSourceWithHttpInfo(SourceCreate sourceCreate)
    {
      // verify the required parameter 'sourceCreate' is set
      if (sourceCreate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceCreate' when calling IngestionClient->CreateSource");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = sourceCreate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<SourceCreateResponse>("/1/sources", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create a source. Create a source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SourceCreateResponse</returns>
    public async System.Threading.Tasks.Task<SourceCreateResponse> CreateSourceAsync(SourceCreate sourceCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<SourceCreateResponse> localVarResponse = await CreateSourceWithHttpInfoAsync(sourceCreate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a source. Create a source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SourceCreateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<SourceCreateResponse>> CreateSourceWithHttpInfoAsync(SourceCreate sourceCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'sourceCreate' is set
      if (sourceCreate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceCreate' when calling IngestionClient->CreateSource");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = sourceCreate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<SourceCreateResponse>("/1/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create a task. Create a task.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskCreate"></param>
    /// <returns>TaskCreateResponse</returns>
    public TaskCreateResponse CreateTask(TaskCreate taskCreate)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<TaskCreateResponse> localVarResponse = CreateTaskWithHttpInfo(taskCreate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a task. Create a task.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskCreate"></param>
    /// <returns>ApiResponse of TaskCreateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<TaskCreateResponse> CreateTaskWithHttpInfo(TaskCreate taskCreate)
    {
      // verify the required parameter 'taskCreate' is set
      if (taskCreate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskCreate' when calling IngestionClient->CreateTask");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = taskCreate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<TaskCreateResponse>("/1/tasks", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create a task. Create a task.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskCreateResponse</returns>
    public async System.Threading.Tasks.Task<TaskCreateResponse> CreateTaskAsync(TaskCreate taskCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<TaskCreateResponse> localVarResponse = await CreateTaskWithHttpInfoAsync(taskCreate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a task. Create a task.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskCreate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TaskCreateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<TaskCreateResponse>> CreateTaskWithHttpInfoAsync(TaskCreate taskCreate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'taskCreate' is set
      if (taskCreate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskCreate' when calling IngestionClient->CreateTask");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = taskCreate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<TaskCreateResponse>("/1/tasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>Object</returns>
    public Object Del(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Object> localVarResponse = DelWithHttpInfo(path, parameters);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Object> DelWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'path' when calling IngestionClient->Del");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Del", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> DelAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Object> localVarResponse = await DelWithHttpInfoAsync(path, parameters, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Object>> DelWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'path' when calling IngestionClient->Del");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Del", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a authentication. Soft delete the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <returns>DeleteResponse</returns>
    public DeleteResponse DeleteAuthentication(string authenticationID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> localVarResponse = DeleteAuthenticationWithHttpInfo(authenticationID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a authentication. Soft delete the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <returns>ApiResponse of DeleteResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> DeleteAuthenticationWithHttpInfo(string authenticationID)
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->DeleteAuthentication");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("authenticationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(authenticationID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeleteResponse>("/1/authentications/{authenticationID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteAuthentication", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a authentication. Soft delete the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    public async System.Threading.Tasks.Task<DeleteResponse> DeleteAuthenticationAsync(string authenticationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> localVarResponse = await DeleteAuthenticationWithHttpInfoAsync(authenticationID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a authentication. Soft delete the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse>> DeleteAuthenticationWithHttpInfoAsync(string authenticationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->DeleteAuthentication");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("authenticationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(authenticationID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/1/authentications/{authenticationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteAuthentication", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a destination. Soft delete the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <returns>DeleteResponse</returns>
    public DeleteResponse DeleteDestination(string destinationID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> localVarResponse = DeleteDestinationWithHttpInfo(destinationID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a destination. Soft delete the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <returns>ApiResponse of DeleteResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> DeleteDestinationWithHttpInfo(string destinationID)
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->DeleteDestination");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("destinationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(destinationID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeleteResponse>("/1/destinations/{destinationID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteDestination", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a destination. Soft delete the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    public async System.Threading.Tasks.Task<DeleteResponse> DeleteDestinationAsync(string destinationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> localVarResponse = await DeleteDestinationWithHttpInfoAsync(destinationID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a destination. Soft delete the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse>> DeleteDestinationWithHttpInfoAsync(string destinationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->DeleteDestination");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("destinationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(destinationID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/1/destinations/{destinationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteDestination", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a source. Soft delete the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <returns>DeleteResponse</returns>
    public DeleteResponse DeleteSource(string sourceID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> localVarResponse = DeleteSourceWithHttpInfo(sourceID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a source. Soft delete the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <returns>ApiResponse of DeleteResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> DeleteSourceWithHttpInfo(string sourceID)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->DeleteSource");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeleteResponse>("/1/sources/{sourceID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a source. Soft delete the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    public async System.Threading.Tasks.Task<DeleteResponse> DeleteSourceAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> localVarResponse = await DeleteSourceWithHttpInfoAsync(sourceID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a source. Soft delete the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse>> DeleteSourceWithHttpInfoAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->DeleteSource");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/1/sources/{sourceID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a task. Soft delete the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>DeleteResponse</returns>
    public DeleteResponse DeleteTask(string taskID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> localVarResponse = DeleteTaskWithHttpInfo(taskID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a task. Soft delete the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>ApiResponse of DeleteResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> DeleteTaskWithHttpInfo(string taskID)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->DeleteTask");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeleteResponse>("/1/tasks/{taskID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a task. Soft delete the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteResponse</returns>
    public async System.Threading.Tasks.Task<DeleteResponse> DeleteTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse> localVarResponse = await DeleteTaskWithHttpInfoAsync(taskID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a task. Soft delete the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<DeleteResponse>> DeleteTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->DeleteTask");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteResponse>("/1/tasks/{taskID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Disable a task. Disable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>TaskUpdateResponse</returns>
    public TaskUpdateResponse DisableTask(string taskID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> localVarResponse = DisableTaskWithHttpInfo(taskID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Disable a task. Disable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>ApiResponse of TaskUpdateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> DisableTaskWithHttpInfo(string taskID)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->DisableTask");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<TaskUpdateResponse>("/1/tasks/{taskID}/disable", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DisableTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Disable a task. Disable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    public async System.Threading.Tasks.Task<TaskUpdateResponse> DisableTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> localVarResponse = await DisableTaskWithHttpInfoAsync(taskID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Disable a task. Disable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TaskUpdateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse>> DisableTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->DisableTask");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<TaskUpdateResponse>("/1/tasks/{taskID}/disable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DisableTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Enable a task. Enable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>TaskUpdateResponse</returns>
    public TaskUpdateResponse EnableTask(string taskID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> localVarResponse = EnableTaskWithHttpInfo(taskID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Enable a task. Enable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>ApiResponse of TaskUpdateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> EnableTaskWithHttpInfo(string taskID)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->EnableTask");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<TaskUpdateResponse>("/1/tasks/{taskID}/enable", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("EnableTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Enable a task. Enable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    public async System.Threading.Tasks.Task<TaskUpdateResponse> EnableTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> localVarResponse = await EnableTaskWithHttpInfoAsync(taskID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Enable a task. Enable the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TaskUpdateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse>> EnableTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->EnableTask");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<TaskUpdateResponse>("/1/tasks/{taskID}/enable", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("EnableTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>Object</returns>
    public Object Get(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Object> localVarResponse = GetWithHttpInfo(path, parameters);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Object> GetWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'path' when calling IngestionClient->Get");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Get", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> GetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Object> localVarResponse = await GetWithHttpInfoAsync(path, parameters, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Object>> GetWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'path' when calling IngestionClient->Get");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Get", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a authentication. Get the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <returns>Authentication</returns>
    public Authentication GetAuthentication(string authenticationID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Authentication> localVarResponse = GetAuthenticationWithHttpInfo(authenticationID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a authentication. Get the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <returns>ApiResponse of Authentication</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Authentication> GetAuthenticationWithHttpInfo(string authenticationID)
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->GetAuthentication");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("authenticationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(authenticationID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Authentication>("/1/authentications/{authenticationID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetAuthentication", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a authentication. Get the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Authentication</returns>
    public async System.Threading.Tasks.Task<Authentication> GetAuthenticationAsync(string authenticationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Authentication> localVarResponse = await GetAuthenticationWithHttpInfoAsync(authenticationID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a authentication. Get the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Authentication)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Authentication>> GetAuthenticationWithHttpInfoAsync(string authenticationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->GetAuthentication");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("authenticationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(authenticationID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Authentication>("/1/authentications/{authenticationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetAuthentication", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of authentications. Get a list of authentications for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the authentications to retrieve. (optional)</param>
    /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <returns>ListAuthenticationsResponse</returns>
    public ListAuthenticationsResponse GetAuthentications(int? itemsPerPage = default(int?), int? page = default(int?), List<AuthenticationType> type = default(List<AuthenticationType>), List<PlatformWithNone> platform = default(List<PlatformWithNone>), AuthenticationSortKeys sort = default(AuthenticationSortKeys), OrderKeys order = default(OrderKeys))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListAuthenticationsResponse> localVarResponse = GetAuthenticationsWithHttpInfo(itemsPerPage, page, type, platform, sort, order);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of authentications. Get a list of authentications for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the authentications to retrieve. (optional)</param>
    /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <returns>ApiResponse of ListAuthenticationsResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<ListAuthenticationsResponse> GetAuthenticationsWithHttpInfo(int? itemsPerPage = default(int?), int? page = default(int?), List<AuthenticationType> type = default(List<AuthenticationType>), List<PlatformWithNone> platform = default(List<PlatformWithNone>), AuthenticationSortKeys sort = default(AuthenticationSortKeys), OrderKeys order = default(OrderKeys))
    {
      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
      }
      if (platform != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "platform", platform));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListAuthenticationsResponse>("/1/authentications", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetAuthentications", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of authentications. Get a list of authentications for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the authentications to retrieve. (optional)</param>
    /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListAuthenticationsResponse</returns>
    public async System.Threading.Tasks.Task<ListAuthenticationsResponse> GetAuthenticationsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<AuthenticationType> type = default(List<AuthenticationType>), List<PlatformWithNone> platform = default(List<PlatformWithNone>), AuthenticationSortKeys sort = default(AuthenticationSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListAuthenticationsResponse> localVarResponse = await GetAuthenticationsWithHttpInfoAsync(itemsPerPage, page, type, platform, sort, order, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of authentications. Get a list of authentications for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the authentications to retrieve. (optional)</param>
    /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListAuthenticationsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<ListAuthenticationsResponse>> GetAuthenticationsWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<AuthenticationType> type = default(List<AuthenticationType>), List<PlatformWithNone> platform = default(List<PlatformWithNone>), AuthenticationSortKeys sort = default(AuthenticationSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
      }
      if (platform != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "platform", platform));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListAuthenticationsResponse>("/1/authentications", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetAuthentications", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a destination. Get the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <returns>Destination</returns>
    public Destination GetDestination(string destinationID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Destination> localVarResponse = GetDestinationWithHttpInfo(destinationID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a destination. Get the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <returns>ApiResponse of Destination</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Destination> GetDestinationWithHttpInfo(string destinationID)
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->GetDestination");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("destinationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(destinationID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Destination>("/1/destinations/{destinationID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDestination", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a destination. Get the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Destination</returns>
    public async System.Threading.Tasks.Task<Destination> GetDestinationAsync(string destinationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Destination> localVarResponse = await GetDestinationWithHttpInfoAsync(destinationID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a destination. Get the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Destination)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Destination>> GetDestinationWithHttpInfoAsync(string destinationID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->GetDestination");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("destinationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(destinationID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Destination>("/1/destinations/{destinationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDestination", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of destinations. Get a list of destinations for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the destinations to retrive. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <returns>ListDestinationsResponse</returns>
    public ListDestinationsResponse GetDestinations(int? itemsPerPage = default(int?), int? page = default(int?), List<DestinationType> type = default(List<DestinationType>), List<string> authenticationID = default(List<string>), DestinationSortKeys sort = default(DestinationSortKeys), OrderKeys order = default(OrderKeys))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListDestinationsResponse> localVarResponse = GetDestinationsWithHttpInfo(itemsPerPage, page, type, authenticationID, sort, order);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of destinations. Get a list of destinations for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the destinations to retrive. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <returns>ApiResponse of ListDestinationsResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<ListDestinationsResponse> GetDestinationsWithHttpInfo(int? itemsPerPage = default(int?), int? page = default(int?), List<DestinationType> type = default(List<DestinationType>), List<string> authenticationID = default(List<string>), DestinationSortKeys sort = default(DestinationSortKeys), OrderKeys order = default(OrderKeys))
    {
      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
      }
      if (authenticationID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "authenticationID", authenticationID));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListDestinationsResponse>("/1/destinations", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDestinations", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of destinations. Get a list of destinations for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the destinations to retrive. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListDestinationsResponse</returns>
    public async System.Threading.Tasks.Task<ListDestinationsResponse> GetDestinationsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<DestinationType> type = default(List<DestinationType>), List<string> authenticationID = default(List<string>), DestinationSortKeys sort = default(DestinationSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListDestinationsResponse> localVarResponse = await GetDestinationsWithHttpInfoAsync(itemsPerPage, page, type, authenticationID, sort, order, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of destinations. Get a list of destinations for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the destinations to retrive. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListDestinationsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<ListDestinationsResponse>> GetDestinationsWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<DestinationType> type = default(List<DestinationType>), List<string> authenticationID = default(List<string>), DestinationSortKeys sort = default(DestinationSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
      }
      if (authenticationID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "authenticationID", authenticationID));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListDestinationsResponse>("/1/destinations", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDestinations", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Retrieve a stream listing. Retrieve a stream listing for a given Singer specification compatible docker type source ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <returns>DockerSourceStreams</returns>
    public DockerSourceStreams GetDockerSourceStreams(string sourceID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DockerSourceStreams> localVarResponse = GetDockerSourceStreamsWithHttpInfo(sourceID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieve a stream listing. Retrieve a stream listing for a given Singer specification compatible docker type source ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <returns>ApiResponse of DockerSourceStreams</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<DockerSourceStreams> GetDockerSourceStreamsWithHttpInfo(string sourceID)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->GetDockerSourceStreams");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<DockerSourceStreams>("/1/sources/{sourceID}/discover", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDockerSourceStreams", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Retrieve a stream listing. Retrieve a stream listing for a given Singer specification compatible docker type source ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DockerSourceStreams</returns>
    public async System.Threading.Tasks.Task<DockerSourceStreams> GetDockerSourceStreamsAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DockerSourceStreams> localVarResponse = await GetDockerSourceStreamsWithHttpInfoAsync(sourceID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Retrieve a stream listing. Retrieve a stream listing for a given Singer specification compatible docker type source ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DockerSourceStreams)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<DockerSourceStreams>> GetDockerSourceStreamsWithHttpInfoAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->GetDockerSourceStreams");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<DockerSourceStreams>("/1/sources/{sourceID}/discover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDockerSourceStreams", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get an event. Get a single event for a specific runID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="eventID">The event UUID.</param>
    /// <returns>Event</returns>
    public Event GetEvent(string runID, string eventID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Event> localVarResponse = GetEventWithHttpInfo(runID, eventID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get an event. Get a single event for a specific runID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="eventID">The event UUID.</param>
    /// <returns>ApiResponse of Event</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Event> GetEventWithHttpInfo(string runID, string eventID)
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetEvent");

      // verify the required parameter 'eventID' is set
      if (eventID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'eventID' when calling IngestionClient->GetEvent");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("runID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(runID)); // path parameter
      localVarRequestOptions.PathParameters.Add("eventID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(eventID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Event>("/1/runs/{runID}/events/{eventID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get an event. Get a single event for a specific runID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="eventID">The event UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Event</returns>
    public async System.Threading.Tasks.Task<Event> GetEventAsync(string runID, string eventID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Event> localVarResponse = await GetEventWithHttpInfoAsync(runID, eventID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get an event. Get a single event for a specific runID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="eventID">The event UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Event)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Event>> GetEventWithHttpInfoAsync(string runID, string eventID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetEvent");

      // verify the required parameter 'eventID' is set
      if (eventID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'eventID' when calling IngestionClient->GetEvent");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("runID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(runID)); // path parameter
      localVarRequestOptions.PathParameters.Add("eventID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(eventID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Event>("/1/runs/{runID}/events/{eventID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetEvent", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of events. Get a list of events associated to the given runID, for the given query parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the events. (optional)</param>
    /// <param name="type">Filter the type of the events. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <returns>ListEventsResponse</returns>
    public ListEventsResponse GetEvents(string runID, int? itemsPerPage = default(int?), int? page = default(int?), List<EventStatus> status = default(List<EventStatus>), List<EventType> type = default(List<EventType>), EventSortKeys sort = default(EventSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListEventsResponse> localVarResponse = GetEventsWithHttpInfo(runID, itemsPerPage, page, status, type, sort, order, startDate, endDate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of events. Get a list of events associated to the given runID, for the given query parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the events. (optional)</param>
    /// <param name="type">Filter the type of the events. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <returns>ApiResponse of ListEventsResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<ListEventsResponse> GetEventsWithHttpInfo(string runID, int? itemsPerPage = default(int?), int? page = default(int?), List<EventStatus> status = default(List<EventStatus>), List<EventType> type = default(List<EventType>), EventSortKeys sort = default(EventSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string))
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetEvents");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("runID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(runID)); // path parameter
      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (status != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("multi", "type", type));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }
      if (startDate != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
      }
      if (endDate != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListEventsResponse>("/1/runs/{runID}/events", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetEvents", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of events. Get a list of events associated to the given runID, for the given query parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the events. (optional)</param>
    /// <param name="type">Filter the type of the events. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListEventsResponse</returns>
    public async System.Threading.Tasks.Task<ListEventsResponse> GetEventsAsync(string runID, int? itemsPerPage = default(int?), int? page = default(int?), List<EventStatus> status = default(List<EventStatus>), List<EventType> type = default(List<EventType>), EventSortKeys sort = default(EventSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListEventsResponse> localVarResponse = await GetEventsWithHttpInfoAsync(runID, itemsPerPage, page, status, type, sort, order, startDate, endDate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of events. Get a list of events associated to the given runID, for the given query parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the events. (optional)</param>
    /// <param name="type">Filter the type of the events. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListEventsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<ListEventsResponse>> GetEventsWithHttpInfoAsync(string runID, int? itemsPerPage = default(int?), int? page = default(int?), List<EventStatus> status = default(List<EventStatus>), List<EventType> type = default(List<EventType>), EventSortKeys sort = default(EventSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetEvents");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("runID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(runID)); // path parameter
      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (status != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("multi", "type", type));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }
      if (startDate != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
      }
      if (endDate != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListEventsResponse>("/1/runs/{runID}/events", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetEvents", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a run. Get a single run for the given ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <returns>Run</returns>
    public Run GetRun(string runID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Run> localVarResponse = GetRunWithHttpInfo(runID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a run. Get a single run for the given ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <returns>ApiResponse of Run</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Run> GetRunWithHttpInfo(string runID)
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetRun");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("runID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(runID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Run>("/1/runs/{runID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetRun", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a run. Get a single run for the given ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Run</returns>
    public async System.Threading.Tasks.Task<Run> GetRunAsync(string runID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Run> localVarResponse = await GetRunWithHttpInfoAsync(runID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a run. Get a single run for the given ID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="runID">The run UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Run)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Run>> GetRunWithHttpInfoAsync(string runID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'runID' is set
      if (runID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'runID' when calling IngestionClient->GetRun");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("runID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(runID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Run>("/1/runs/{runID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetRun", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of runs. Get a list of runs for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the runs. (optional)</param>
    /// <param name="taskID">Filter by taskID. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <returns>RunListResponse</returns>
    public RunListResponse GetRuns(int? itemsPerPage = default(int?), int? page = default(int?), List<RunStatus> status = default(List<RunStatus>), string taskID = default(string), RunSortKeys sort = default(RunSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<RunListResponse> localVarResponse = GetRunsWithHttpInfo(itemsPerPage, page, status, taskID, sort, order, startDate, endDate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of runs. Get a list of runs for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the runs. (optional)</param>
    /// <param name="taskID">Filter by taskID. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <returns>ApiResponse of RunListResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<RunListResponse> GetRunsWithHttpInfo(int? itemsPerPage = default(int?), int? page = default(int?), List<RunStatus> status = default(List<RunStatus>), string taskID = default(string), RunSortKeys sort = default(RunSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string))
    {
      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (status != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
      }
      if (taskID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "taskID", taskID));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }
      if (startDate != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
      }
      if (endDate != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<RunListResponse>("/1/runs", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetRuns", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of runs. Get a list of runs for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the runs. (optional)</param>
    /// <param name="taskID">Filter by taskID. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RunListResponse</returns>
    public async System.Threading.Tasks.Task<RunListResponse> GetRunsAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<RunStatus> status = default(List<RunStatus>), string taskID = default(string), RunSortKeys sort = default(RunSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<RunListResponse> localVarResponse = await GetRunsWithHttpInfoAsync(itemsPerPage, page, status, taskID, sort, order, startDate, endDate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of runs. Get a list of runs for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="status">Filter the status of the runs. (optional)</param>
    /// <param name="taskID">Filter by taskID. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
    /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RunListResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<RunListResponse>> GetRunsWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<RunStatus> status = default(List<RunStatus>), string taskID = default(string), RunSortKeys sort = default(RunSortKeys), OrderKeys order = default(OrderKeys), string startDate = default(string), string endDate = default(string), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (status != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("multi", "status", status));
      }
      if (taskID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "taskID", taskID));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }
      if (startDate != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "startDate", startDate));
      }
      if (endDate != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "endDate", endDate));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<RunListResponse>("/1/runs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetRuns", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a source. Get the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <returns>Source</returns>
    public Source GetSource(string sourceID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Source> localVarResponse = GetSourceWithHttpInfo(sourceID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a source. Get the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <returns>ApiResponse of Source</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Source> GetSourceWithHttpInfo(string sourceID)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->GetSource");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Source>("/1/sources/{sourceID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a source. Get the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Source</returns>
    public async System.Threading.Tasks.Task<Source> GetSourceAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Source> localVarResponse = await GetSourceWithHttpInfoAsync(sourceID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a source. Get the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Source)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Source>> GetSourceWithHttpInfoAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->GetSource");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Source>("/1/sources/{sourceID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of sources. Get a list of sources for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the sources to retrieve. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <returns>ListSourcesResponse</returns>
    public ListSourcesResponse GetSources(int? itemsPerPage = default(int?), int? page = default(int?), List<SourceType> type = default(List<SourceType>), List<string> authenticationID = default(List<string>), SourceSortKeys sort = default(SourceSortKeys), OrderKeys order = default(OrderKeys))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListSourcesResponse> localVarResponse = GetSourcesWithHttpInfo(itemsPerPage, page, type, authenticationID, sort, order);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of sources. Get a list of sources for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the sources to retrieve. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <returns>ApiResponse of ListSourcesResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<ListSourcesResponse> GetSourcesWithHttpInfo(int? itemsPerPage = default(int?), int? page = default(int?), List<SourceType> type = default(List<SourceType>), List<string> authenticationID = default(List<string>), SourceSortKeys sort = default(SourceSortKeys), OrderKeys order = default(OrderKeys))
    {
      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
      }
      if (authenticationID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "authenticationID", authenticationID));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListSourcesResponse>("/1/sources", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSources", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of sources. Get a list of sources for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the sources to retrieve. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListSourcesResponse</returns>
    public async System.Threading.Tasks.Task<ListSourcesResponse> GetSourcesAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<SourceType> type = default(List<SourceType>), List<string> authenticationID = default(List<string>), SourceSortKeys sort = default(SourceSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListSourcesResponse> localVarResponse = await GetSourcesWithHttpInfoAsync(itemsPerPage, page, type, authenticationID, sort, order, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of sources. Get a list of sources for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="type">The type of the sources to retrieve. (optional)</param>
    /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListSourcesResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<ListSourcesResponse>> GetSourcesWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<SourceType> type = default(List<SourceType>), List<string> authenticationID = default(List<string>), SourceSortKeys sort = default(SourceSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "type", type));
      }
      if (authenticationID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "authenticationID", authenticationID));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListSourcesResponse>("/1/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSources", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a task. Get the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>Task</returns>
    public Task GetTask(string taskID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Task> localVarResponse = GetTaskWithHttpInfo(taskID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a task. Get the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>ApiResponse of Task</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Task> GetTaskWithHttpInfo(string taskID)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->GetTask");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Task>("/1/tasks/{taskID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a task. Get the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Task</returns>
    public async System.Threading.Tasks.Task<Task> GetTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Task> localVarResponse = await GetTaskWithHttpInfoAsync(taskID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a task. Get the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Task)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Task>> GetTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->GetTask");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Task>("/1/tasks/{taskID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of tasks. Get a list of tasks for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="action">The action of the tasks to retrieve. (optional)</param>
    /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
    /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
    /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
    /// <param name="triggerType">The trigger type of the task. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <returns>ListTasksResponse</returns>
    public ListTasksResponse GetTasks(int? itemsPerPage = default(int?), int? page = default(int?), List<ActionType> action = default(List<ActionType>), bool? enabled = default(bool?), List<string> sourceID = default(List<string>), List<string> destinationID = default(List<string>), List<TriggerType> triggerType = default(List<TriggerType>), TaskSortKeys sort = default(TaskSortKeys), OrderKeys order = default(OrderKeys))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListTasksResponse> localVarResponse = GetTasksWithHttpInfo(itemsPerPage, page, action, enabled, sourceID, destinationID, triggerType, sort, order);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of tasks. Get a list of tasks for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="action">The action of the tasks to retrieve. (optional)</param>
    /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
    /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
    /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
    /// <param name="triggerType">The trigger type of the task. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <returns>ApiResponse of ListTasksResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<ListTasksResponse> GetTasksWithHttpInfo(int? itemsPerPage = default(int?), int? page = default(int?), List<ActionType> action = default(List<ActionType>), bool? enabled = default(bool?), List<string> sourceID = default(List<string>), List<string> destinationID = default(List<string>), List<TriggerType> triggerType = default(List<TriggerType>), TaskSortKeys sort = default(TaskSortKeys), OrderKeys order = default(OrderKeys))
    {
      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (action != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "action", action));
      }
      if (enabled != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled));
      }
      if (sourceID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "sourceID", sourceID));
      }
      if (destinationID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "destinationID", destinationID));
      }
      if (triggerType != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "triggerType", triggerType));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListTasksResponse>("/1/tasks", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetTasks", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a list of tasks. Get a list of tasks for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="action">The action of the tasks to retrieve. (optional)</param>
    /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
    /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
    /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
    /// <param name="triggerType">The trigger type of the task. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListTasksResponse</returns>
    public async System.Threading.Tasks.Task<ListTasksResponse> GetTasksAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<ActionType> action = default(List<ActionType>), bool? enabled = default(bool?), List<string> sourceID = default(List<string>), List<string> destinationID = default(List<string>), List<TriggerType> triggerType = default(List<TriggerType>), TaskSortKeys sort = default(TaskSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<ListTasksResponse> localVarResponse = await GetTasksWithHttpInfoAsync(itemsPerPage, page, action, enabled, sourceID, destinationID, triggerType, sort, order, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a list of tasks. Get a list of tasks for the given query parameters, with pagination details.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
    /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
    /// <param name="action">The action of the tasks to retrieve. (optional)</param>
    /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
    /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
    /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
    /// <param name="triggerType">The trigger type of the task. (optional)</param>
    /// <param name="sort">The key by which the list should be sorted. (optional)</param>
    /// <param name="order">The order of the returned list. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListTasksResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<ListTasksResponse>> GetTasksWithHttpInfoAsync(int? itemsPerPage = default(int?), int? page = default(int?), List<ActionType> action = default(List<ActionType>), bool? enabled = default(bool?), List<string> sourceID = default(List<string>), List<string> destinationID = default(List<string>), List<TriggerType> triggerType = default(List<TriggerType>), TaskSortKeys sort = default(TaskSortKeys), OrderKeys order = default(OrderKeys), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (itemsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "itemsPerPage", itemsPerPage));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (action != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "action", action));
      }
      if (enabled != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "enabled", enabled));
      }
      if (sourceID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "sourceID", sourceID));
      }
      if (destinationID != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "destinationID", destinationID));
      }
      if (triggerType != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("csv", "triggerType", triggerType));
      }
      if (sort != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "sort", sort));
      }
      if (order != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "order", order));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListTasksResponse>("/1/tasks", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetTasks", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>Object</returns>
    public Object Post(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Object> localVarResponse = PostWithHttpInfo(path, parameters, body);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Object> PostWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'path' when calling IngestionClient->Post");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Post", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> PostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Object> localVarResponse = await PostWithHttpInfoAsync(path, parameters, body, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Object>> PostWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'path' when calling IngestionClient->Post");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Post", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>Object</returns>
    public Object Put(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Object> localVarResponse = PutWithHttpInfo(path, parameters, body);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<Object> PutWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'path' when calling IngestionClient->Put");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Put", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> PutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<Object> localVarResponse = await PutWithHttpInfoAsync(path, parameters, body, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<Object>> PutWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'path' when calling IngestionClient->Put");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Ingestion.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Put", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Run a task. Run the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>RunResponse</returns>
    public RunResponse RunTask(string taskID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<RunResponse> localVarResponse = RunTaskWithHttpInfo(taskID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Run a task. Run the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <returns>ApiResponse of RunResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<RunResponse> RunTaskWithHttpInfo(string taskID)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->RunTask");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<RunResponse>("/1/tasks/{taskID}/run", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("RunTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Run a task. Run the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RunResponse</returns>
    public async System.Threading.Tasks.Task<RunResponse> RunTaskAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<RunResponse> localVarResponse = await RunTaskWithHttpInfoAsync(taskID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Run a task. Run the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RunResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<RunResponse>> RunTaskWithHttpInfoAsync(string taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->RunTask");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<RunResponse>("/1/tasks/{taskID}/run", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("RunTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search among authentications. Search among authentications with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationSearch"></param>
    /// <returns>List&lt;Authentication&gt;</returns>
    public List<Authentication> SearchAuthentications(AuthenticationSearch authenticationSearch)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<List<Authentication>> localVarResponse = SearchAuthenticationsWithHttpInfo(authenticationSearch);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search among authentications. Search among authentications with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationSearch"></param>
    /// <returns>ApiResponse of List&lt;Authentication&gt;</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<List<Authentication>> SearchAuthenticationsWithHttpInfo(AuthenticationSearch authenticationSearch)
    {
      // verify the required parameter 'authenticationSearch' is set
      if (authenticationSearch == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationSearch' when calling IngestionClient->SearchAuthentications");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = authenticationSearch;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<List<Authentication>>("/1/authentications/search", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchAuthentications", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search among authentications. Search among authentications with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Authentication&gt;</returns>
    public async System.Threading.Tasks.Task<List<Authentication>> SearchAuthenticationsAsync(AuthenticationSearch authenticationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<List<Authentication>> localVarResponse = await SearchAuthenticationsWithHttpInfoAsync(authenticationSearch, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search among authentications. Search among authentications with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Authentication&gt;)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<List<Authentication>>> SearchAuthenticationsWithHttpInfoAsync(AuthenticationSearch authenticationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'authenticationSearch' is set
      if (authenticationSearch == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationSearch' when calling IngestionClient->SearchAuthentications");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = authenticationSearch;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<List<Authentication>>("/1/authentications/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchAuthentications", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search among destinations. Search among destinations with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationSearch"></param>
    /// <returns>List&lt;Destination&gt;</returns>
    public List<Destination> SearchDestinations(DestinationSearch destinationSearch)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<List<Destination>> localVarResponse = SearchDestinationsWithHttpInfo(destinationSearch);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search among destinations. Search among destinations with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationSearch"></param>
    /// <returns>ApiResponse of List&lt;Destination&gt;</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<List<Destination>> SearchDestinationsWithHttpInfo(DestinationSearch destinationSearch)
    {
      // verify the required parameter 'destinationSearch' is set
      if (destinationSearch == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationSearch' when calling IngestionClient->SearchDestinations");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = destinationSearch;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<List<Destination>>("/1/destinations/search", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchDestinations", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search among destinations. Search among destinations with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Destination&gt;</returns>
    public async System.Threading.Tasks.Task<List<Destination>> SearchDestinationsAsync(DestinationSearch destinationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<List<Destination>> localVarResponse = await SearchDestinationsWithHttpInfoAsync(destinationSearch, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search among destinations. Search among destinations with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Destination&gt;)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<List<Destination>>> SearchDestinationsWithHttpInfoAsync(DestinationSearch destinationSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'destinationSearch' is set
      if (destinationSearch == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationSearch' when calling IngestionClient->SearchDestinations");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = destinationSearch;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<List<Destination>>("/1/destinations/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchDestinations", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search among sources. Search among sources with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceSearch"></param>
    /// <returns>List&lt;Source&gt;</returns>
    public List<Source> SearchSources(SourceSearch sourceSearch)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<List<Source>> localVarResponse = SearchSourcesWithHttpInfo(sourceSearch);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search among sources. Search among sources with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceSearch"></param>
    /// <returns>ApiResponse of List&lt;Source&gt;</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<List<Source>> SearchSourcesWithHttpInfo(SourceSearch sourceSearch)
    {
      // verify the required parameter 'sourceSearch' is set
      if (sourceSearch == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceSearch' when calling IngestionClient->SearchSources");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = sourceSearch;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<List<Source>>("/1/sources/search", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchSources", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search among sources. Search among sources with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Source&gt;</returns>
    public async System.Threading.Tasks.Task<List<Source>> SearchSourcesAsync(SourceSearch sourceSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<List<Source>> localVarResponse = await SearchSourcesWithHttpInfoAsync(sourceSearch, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search among sources. Search among sources with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Source&gt;)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<List<Source>>> SearchSourcesWithHttpInfoAsync(SourceSearch sourceSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'sourceSearch' is set
      if (sourceSearch == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceSearch' when calling IngestionClient->SearchSources");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = sourceSearch;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<List<Source>>("/1/sources/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchSources", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search among tasks. Search among tasks with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskSearch"></param>
    /// <returns>List&lt;Task&gt;</returns>
    public List<Task> SearchTasks(TaskSearch taskSearch)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<List<Task>> localVarResponse = SearchTasksWithHttpInfo(taskSearch);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search among tasks. Search among tasks with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskSearch"></param>
    /// <returns>ApiResponse of List&lt;Task&gt;</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<List<Task>> SearchTasksWithHttpInfo(TaskSearch taskSearch)
    {
      // verify the required parameter 'taskSearch' is set
      if (taskSearch == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskSearch' when calling IngestionClient->SearchTasks");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = taskSearch;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<List<Task>>("/1/tasks/search", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchTasks", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search among tasks. Search among tasks with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Task&gt;</returns>
    public async System.Threading.Tasks.Task<List<Task>> SearchTasksAsync(TaskSearch taskSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<List<Task>> localVarResponse = await SearchTasksWithHttpInfoAsync(taskSearch, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search among tasks. Search among tasks with a defined set of parameters.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskSearch"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Task&gt;)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<List<Task>>> SearchTasksWithHttpInfoAsync(TaskSearch taskSearch, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'taskSearch' is set
      if (taskSearch == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskSearch' when calling IngestionClient->SearchTasks");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = taskSearch;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<List<Task>>("/1/tasks/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchTasks", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Trigger a stream listing request. Trigger a stream listing request for a Singer specification compatible docker type source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <returns>DockerSourceDiscover</returns>
    public DockerSourceDiscover TriggerDockerSourceDiscover(string sourceID)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DockerSourceDiscover> localVarResponse = TriggerDockerSourceDiscoverWithHttpInfo(sourceID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Trigger a stream listing request. Trigger a stream listing request for a Singer specification compatible docker type source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <returns>ApiResponse of DockerSourceDiscover</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<DockerSourceDiscover> TriggerDockerSourceDiscoverWithHttpInfo(string sourceID)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->TriggerDockerSourceDiscover");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<DockerSourceDiscover>("/1/sources/{sourceID}/discover", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("TriggerDockerSourceDiscover", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Trigger a stream listing request. Trigger a stream listing request for a Singer specification compatible docker type source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DockerSourceDiscover</returns>
    public async System.Threading.Tasks.Task<DockerSourceDiscover> TriggerDockerSourceDiscoverAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DockerSourceDiscover> localVarResponse = await TriggerDockerSourceDiscoverWithHttpInfoAsync(sourceID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Trigger a stream listing request. Trigger a stream listing request for a Singer specification compatible docker type source.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DockerSourceDiscover)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<DockerSourceDiscover>> TriggerDockerSourceDiscoverWithHttpInfoAsync(string sourceID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->TriggerDockerSourceDiscover");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<DockerSourceDiscover>("/1/sources/{sourceID}/discover", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("TriggerDockerSourceDiscover", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a authentication. Update the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="authenticationUpdate"></param>
    /// <returns>AuthenticationUpdateResponse</returns>
    public AuthenticationUpdateResponse UpdateAuthentication(string authenticationID, AuthenticationUpdate authenticationUpdate)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<AuthenticationUpdateResponse> localVarResponse = UpdateAuthenticationWithHttpInfo(authenticationID, authenticationUpdate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a authentication. Update the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="authenticationUpdate"></param>
    /// <returns>ApiResponse of AuthenticationUpdateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<AuthenticationUpdateResponse> UpdateAuthenticationWithHttpInfo(string authenticationID, AuthenticationUpdate authenticationUpdate)
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->UpdateAuthentication");

      // verify the required parameter 'authenticationUpdate' is set
      if (authenticationUpdate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationUpdate' when calling IngestionClient->UpdateAuthentication");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("authenticationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(authenticationID)); // path parameter
      localVarRequestOptions.Data = authenticationUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Patch<AuthenticationUpdateResponse>("/1/authentications/{authenticationID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateAuthentication", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a authentication. Update the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="authenticationUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AuthenticationUpdateResponse</returns>
    public async System.Threading.Tasks.Task<AuthenticationUpdateResponse> UpdateAuthenticationAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<AuthenticationUpdateResponse> localVarResponse = await UpdateAuthenticationWithHttpInfoAsync(authenticationID, authenticationUpdate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a authentication. Update the authentication of the given authenticationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="authenticationID">The authentication UUID.</param>
    /// <param name="authenticationUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AuthenticationUpdateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<AuthenticationUpdateResponse>> UpdateAuthenticationWithHttpInfoAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'authenticationID' is set
      if (authenticationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationID' when calling IngestionClient->UpdateAuthentication");

      // verify the required parameter 'authenticationUpdate' is set
      if (authenticationUpdate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'authenticationUpdate' when calling IngestionClient->UpdateAuthentication");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("authenticationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(authenticationID)); // path parameter
      localVarRequestOptions.Data = authenticationUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PatchAsync<AuthenticationUpdateResponse>("/1/authentications/{authenticationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateAuthentication", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a destination. Update the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="destinationUpdate"></param>
    /// <returns>DestinationUpdateResponse</returns>
    public DestinationUpdateResponse UpdateDestination(string destinationID, DestinationUpdate destinationUpdate)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DestinationUpdateResponse> localVarResponse = UpdateDestinationWithHttpInfo(destinationID, destinationUpdate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a destination. Update the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="destinationUpdate"></param>
    /// <returns>ApiResponse of DestinationUpdateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<DestinationUpdateResponse> UpdateDestinationWithHttpInfo(string destinationID, DestinationUpdate destinationUpdate)
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->UpdateDestination");

      // verify the required parameter 'destinationUpdate' is set
      if (destinationUpdate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationUpdate' when calling IngestionClient->UpdateDestination");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("destinationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(destinationID)); // path parameter
      localVarRequestOptions.Data = destinationUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Patch<DestinationUpdateResponse>("/1/destinations/{destinationID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateDestination", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a destination. Update the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="destinationUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DestinationUpdateResponse</returns>
    public async System.Threading.Tasks.Task<DestinationUpdateResponse> UpdateDestinationAsync(string destinationID, DestinationUpdate destinationUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<DestinationUpdateResponse> localVarResponse = await UpdateDestinationWithHttpInfoAsync(destinationID, destinationUpdate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a destination. Update the destination of the given destinationID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="destinationID">The destination UUID.</param>
    /// <param name="destinationUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DestinationUpdateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<DestinationUpdateResponse>> UpdateDestinationWithHttpInfoAsync(string destinationID, DestinationUpdate destinationUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'destinationID' is set
      if (destinationID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationID' when calling IngestionClient->UpdateDestination");

      // verify the required parameter 'destinationUpdate' is set
      if (destinationUpdate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'destinationUpdate' when calling IngestionClient->UpdateDestination");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("destinationID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(destinationID)); // path parameter
      localVarRequestOptions.Data = destinationUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PatchAsync<DestinationUpdateResponse>("/1/destinations/{destinationID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateDestination", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a source. Update the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="sourceUpdate"></param>
    /// <returns>SourceUpdateResponse</returns>
    public SourceUpdateResponse UpdateSource(string sourceID, SourceUpdate sourceUpdate)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<SourceUpdateResponse> localVarResponse = UpdateSourceWithHttpInfo(sourceID, sourceUpdate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a source. Update the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="sourceUpdate"></param>
    /// <returns>ApiResponse of SourceUpdateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<SourceUpdateResponse> UpdateSourceWithHttpInfo(string sourceID, SourceUpdate sourceUpdate)
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->UpdateSource");

      // verify the required parameter 'sourceUpdate' is set
      if (sourceUpdate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceUpdate' when calling IngestionClient->UpdateSource");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter
      localVarRequestOptions.Data = sourceUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Patch<SourceUpdateResponse>("/1/sources/{sourceID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a source. Update the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="sourceUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SourceUpdateResponse</returns>
    public async System.Threading.Tasks.Task<SourceUpdateResponse> UpdateSourceAsync(string sourceID, SourceUpdate sourceUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<SourceUpdateResponse> localVarResponse = await UpdateSourceWithHttpInfoAsync(sourceID, sourceUpdate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a source. Update the source of the given sourceID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="sourceID">The source UUID.</param>
    /// <param name="sourceUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SourceUpdateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<SourceUpdateResponse>> UpdateSourceWithHttpInfoAsync(string sourceID, SourceUpdate sourceUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'sourceID' is set
      if (sourceID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceID' when calling IngestionClient->UpdateSource");

      // verify the required parameter 'sourceUpdate' is set
      if (sourceUpdate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'sourceUpdate' when calling IngestionClient->UpdateSource");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("sourceID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(sourceID)); // path parameter
      localVarRequestOptions.Data = sourceUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PatchAsync<SourceUpdateResponse>("/1/sources/{sourceID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a task. Update the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="taskUpdate"></param>
    /// <returns>TaskUpdateResponse</returns>
    public TaskUpdateResponse UpdateTask(string taskID, TaskUpdate taskUpdate)
    {
      Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> localVarResponse = UpdateTaskWithHttpInfo(taskID, taskUpdate);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a task. Update the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="taskUpdate"></param>
    /// <returns>ApiResponse of TaskUpdateResponse</returns>
    public Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> UpdateTaskWithHttpInfo(string taskID, TaskUpdate taskUpdate)
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->UpdateTask");

      // verify the required parameter 'taskUpdate' is set
      if (taskUpdate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskUpdate' when calling IngestionClient->UpdateTask");

      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter
      localVarRequestOptions.Data = taskUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Patch<TaskUpdateResponse>("/1/tasks/{taskID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a task. Update the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="taskUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of TaskUpdateResponse</returns>
    public async System.Threading.Tasks.Task<TaskUpdateResponse> UpdateTaskAsync(string taskID, TaskUpdate taskUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse> localVarResponse = await UpdateTaskWithHttpInfoAsync(taskID, taskUpdate, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a task. Update the task of the given taskID.
    /// </summary>
    /// <exception cref="Algolia.Search.Ingestion.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="taskID">The task UUID.</param>
    /// <param name="taskUpdate"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (TaskUpdateResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Ingestion.Client.ApiResponse<TaskUpdateResponse>> UpdateTaskWithHttpInfoAsync(string taskID, TaskUpdate taskUpdate, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'taskID' is set
      if (taskID == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskID' when calling IngestionClient->UpdateTask");

      // verify the required parameter 'taskUpdate' is set
      if (taskUpdate == null)
        throw new Algolia.Search.Ingestion.Client.ApiException(400, "Missing required parameter 'taskUpdate' when calling IngestionClient->UpdateTask");


      Algolia.Search.Ingestion.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Ingestion.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Ingestion.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Ingestion.Client.ClientUtils.ParameterToString(taskID)); // path parameter
      localVarRequestOptions.Data = taskUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PatchAsync<TaskUpdateResponse>("/1/tasks/{taskID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

  }
}
