//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Ingestion.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Ingestion.Client.OpenAPIDateConverter;

namespace Algolia.Search.Ingestion.Models
{
  /// <summary>
  /// SourceBigQuery
  /// </summary>
  [DataContract(Name = "SourceBigQuery")]
  public partial class SourceBigQuery : IEquatable<SourceBigQuery>, IValidatableObject
  {

    /// <summary>
    /// Gets or Sets DataType
    /// </summary>
    [DataMember(Name = "dataType", EmitDefaultValue = false)]
    public BigQueryDataType? DataType { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="SourceBigQuery" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected SourceBigQuery() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="SourceBigQuery" /> class.
    /// </summary>
    /// <param name="projectID">Project ID of the BigQuery Source. (required).</param>
    /// <param name="datasetID">Dataset ID of the BigQuery Source. (required).</param>
    /// <param name="dataType">dataType.</param>
    /// <param name="table">Table name (for default BQ)..</param>
    /// <param name="tablePrefix">Table prefix (for Google Analytics)..</param>
    /// <param name="customSQLRequest">Custom SQL request to extract data from the BigQuery table..</param>
    /// <param name="uniqueIDColumn">The name of the column that contains the unique ID, used as &#x60;objectID&#x60; in Algolia..</param>
    public SourceBigQuery(string projectID = default(string), string datasetID = default(string), BigQueryDataType? dataType = default(BigQueryDataType?), string table = default(string), string tablePrefix = default(string), string customSQLRequest = default(string), string uniqueIDColumn = default(string))
    {
      // to ensure "projectID" is required (not null)
      if (projectID == null)
      {
        throw new ArgumentNullException("projectID is a required property for SourceBigQuery and cannot be null");
      }
      this.ProjectID = projectID;
      // to ensure "datasetID" is required (not null)
      if (datasetID == null)
      {
        throw new ArgumentNullException("datasetID is a required property for SourceBigQuery and cannot be null");
      }
      this.DatasetID = datasetID;
      this.DataType = dataType;
      this.Table = table;
      this.TablePrefix = tablePrefix;
      this.CustomSQLRequest = customSQLRequest;
      this.UniqueIDColumn = uniqueIDColumn;
    }

    /// <summary>
    /// Project ID of the BigQuery Source.
    /// </summary>
    /// <value>Project ID of the BigQuery Source.</value>
    [DataMember(Name = "projectID", IsRequired = true, EmitDefaultValue = true)]
    public string ProjectID { get; set; }

    /// <summary>
    /// Dataset ID of the BigQuery Source.
    /// </summary>
    /// <value>Dataset ID of the BigQuery Source.</value>
    [DataMember(Name = "datasetID", IsRequired = true, EmitDefaultValue = true)]
    public string DatasetID { get; set; }

    /// <summary>
    /// Table name (for default BQ).
    /// </summary>
    /// <value>Table name (for default BQ).</value>
    [DataMember(Name = "table", EmitDefaultValue = false)]
    public string Table { get; set; }

    /// <summary>
    /// Table prefix (for Google Analytics).
    /// </summary>
    /// <value>Table prefix (for Google Analytics).</value>
    [DataMember(Name = "tablePrefix", EmitDefaultValue = false)]
    public string TablePrefix { get; set; }

    /// <summary>
    /// Custom SQL request to extract data from the BigQuery table.
    /// </summary>
    /// <value>Custom SQL request to extract data from the BigQuery table.</value>
    [DataMember(Name = "customSQLRequest", EmitDefaultValue = false)]
    public string CustomSQLRequest { get; set; }

    /// <summary>
    /// The name of the column that contains the unique ID, used as &#x60;objectID&#x60; in Algolia.
    /// </summary>
    /// <value>The name of the column that contains the unique ID, used as &#x60;objectID&#x60; in Algolia.</value>
    [DataMember(Name = "uniqueIDColumn", EmitDefaultValue = false)]
    public string UniqueIDColumn { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class SourceBigQuery {\n");
      sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
      sb.Append("  DatasetID: ").Append(DatasetID).Append("\n");
      sb.Append("  DataType: ").Append(DataType).Append("\n");
      sb.Append("  Table: ").Append(Table).Append("\n");
      sb.Append("  TablePrefix: ").Append(TablePrefix).Append("\n");
      sb.Append("  CustomSQLRequest: ").Append(CustomSQLRequest).Append("\n");
      sb.Append("  UniqueIDColumn: ").Append(UniqueIDColumn).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as SourceBigQuery);
    }

    /// <summary>
    /// Returns true if SourceBigQuery instances are equal
    /// </summary>
    /// <param name="input">Instance of SourceBigQuery to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(SourceBigQuery input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.ProjectID == input.ProjectID ||
              (this.ProjectID != null &&
              this.ProjectID.Equals(input.ProjectID))
          ) &&
          (
              this.DatasetID == input.DatasetID ||
              (this.DatasetID != null &&
              this.DatasetID.Equals(input.DatasetID))
          ) &&
          (
              this.DataType == input.DataType ||
              this.DataType.Equals(input.DataType)
          ) &&
          (
              this.Table == input.Table ||
              (this.Table != null &&
              this.Table.Equals(input.Table))
          ) &&
          (
              this.TablePrefix == input.TablePrefix ||
              (this.TablePrefix != null &&
              this.TablePrefix.Equals(input.TablePrefix))
          ) &&
          (
              this.CustomSQLRequest == input.CustomSQLRequest ||
              (this.CustomSQLRequest != null &&
              this.CustomSQLRequest.Equals(input.CustomSQLRequest))
          ) &&
          (
              this.UniqueIDColumn == input.UniqueIDColumn ||
              (this.UniqueIDColumn != null &&
              this.UniqueIDColumn.Equals(input.UniqueIDColumn))
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.ProjectID != null)
        {
          hashCode = (hashCode * 59) + this.ProjectID.GetHashCode();
        }
        if (this.DatasetID != null)
        {
          hashCode = (hashCode * 59) + this.DatasetID.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.DataType.GetHashCode();
        if (this.Table != null)
        {
          hashCode = (hashCode * 59) + this.Table.GetHashCode();
        }
        if (this.TablePrefix != null)
        {
          hashCode = (hashCode * 59) + this.TablePrefix.GetHashCode();
        }
        if (this.CustomSQLRequest != null)
        {
          hashCode = (hashCode * 59) + this.CustomSQLRequest.GetHashCode();
        }
        if (this.UniqueIDColumn != null)
        {
          hashCode = (hashCode * 59) + this.UniqueIDColumn.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
