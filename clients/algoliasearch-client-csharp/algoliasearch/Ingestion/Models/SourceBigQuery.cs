//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Models.Ingestion
{
  /// <summary>
  /// SourceBigQuery
  /// </summary>
  [DataContract(Name = "SourceBigQuery")]
  public partial class SourceBigQuery
  {

    /// <summary>
    /// Gets or Sets DataType
    /// </summary>
    [DataMember(Name = "dataType", EmitDefaultValue = false)]
    public BigQueryDataType DataType { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="SourceBigQuery" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    public SourceBigQuery() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="SourceBigQuery" /> class.
    /// </summary>
    /// <param name="projectID">Project ID of the BigQuery Source. (required).</param>
    /// <param name="datasetID">Dataset ID of the BigQuery Source. (required).</param>
    public SourceBigQuery(string projectID, string datasetID)
    {
      this.ProjectID = projectID ?? throw new ArgumentNullException("projectID is a required property for SourceBigQuery and cannot be null");
      this.DatasetID = datasetID ?? throw new ArgumentNullException("datasetID is a required property for SourceBigQuery and cannot be null");
    }

    /// <summary>
    /// Project ID of the BigQuery Source.
    /// </summary>
    /// <value>Project ID of the BigQuery Source.</value>
    [DataMember(Name = "projectID", IsRequired = true, EmitDefaultValue = false)]
    public string ProjectID { get; set; }

    /// <summary>
    /// Dataset ID of the BigQuery Source.
    /// </summary>
    /// <value>Dataset ID of the BigQuery Source.</value>
    [DataMember(Name = "datasetID", IsRequired = true, EmitDefaultValue = false)]
    public string DatasetID { get; set; }

    /// <summary>
    /// Table name (for default BQ).
    /// </summary>
    /// <value>Table name (for default BQ).</value>
    [DataMember(Name = "table", EmitDefaultValue = false)]
    public string Table { get; set; }

    /// <summary>
    /// Table prefix (for Google Analytics).
    /// </summary>
    /// <value>Table prefix (for Google Analytics).</value>
    [DataMember(Name = "tablePrefix", EmitDefaultValue = false)]
    public string TablePrefix { get; set; }

    /// <summary>
    /// Custom SQL request to extract data from the BigQuery table.
    /// </summary>
    /// <value>Custom SQL request to extract data from the BigQuery table.</value>
    [DataMember(Name = "customSQLRequest", EmitDefaultValue = false)]
    public string CustomSQLRequest { get; set; }

    /// <summary>
    /// The name of the column that contains the unique ID, used as &#x60;objectID&#x60; in Algolia.
    /// </summary>
    /// <value>The name of the column that contains the unique ID, used as &#x60;objectID&#x60; in Algolia.</value>
    [DataMember(Name = "uniqueIDColumn", EmitDefaultValue = false)]
    public string UniqueIDColumn { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class SourceBigQuery {\n");
      sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
      sb.Append("  DatasetID: ").Append(DatasetID).Append("\n");
      sb.Append("  DataType: ").Append(DataType).Append("\n");
      sb.Append("  Table: ").Append(Table).Append("\n");
      sb.Append("  TablePrefix: ").Append(TablePrefix).Append("\n");
      sb.Append("  CustomSQLRequest: ").Append(CustomSQLRequest).Append("\n");
      sb.Append("  UniqueIDColumn: ").Append(UniqueIDColumn).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
