//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Ingestion.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Ingestion.Client.OpenAPIDateConverter;

namespace Algolia.Search.Ingestion.Models
{
  /// <summary>
  /// Run
  /// </summary>
  [DataContract(Name = "Run")]
  public partial class Run : IEquatable<Run>, IValidatableObject
  {

    /// <summary>
    /// Gets or Sets Status
    /// </summary>
    [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
    public RunStatus Status { get; set; }

    /// <summary>
    /// Gets or Sets Outcome
    /// </summary>
    [DataMember(Name = "outcome", EmitDefaultValue = false)]
    public RunOutcome? Outcome { get; set; }

    /// <summary>
    /// Gets or Sets ReasonCode
    /// </summary>
    [DataMember(Name = "reasonCode", EmitDefaultValue = false)]
    public RunReasonCode? ReasonCode { get; set; }

    /// <summary>
    /// Gets or Sets Type
    /// </summary>
    [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
    public RunType Type { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="Run" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Run() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Run" /> class.
    /// </summary>
    /// <param name="runID">The run UUID. (required).</param>
    /// <param name="appID">appID (required).</param>
    /// <param name="taskID">The task UUID. (required).</param>
    /// <param name="status">status (required).</param>
    /// <param name="progress">progress.</param>
    /// <param name="outcome">outcome.</param>
    /// <param name="failureThreshold">A percentage representing the accepted failure threshold to determine if a &#x60;run&#x60; succeeded or not..</param>
    /// <param name="reason">Explains the result of outcome..</param>
    /// <param name="reasonCode">reasonCode.</param>
    /// <param name="type">type (required).</param>
    /// <param name="createdAt">Date of creation (RFC3339 format). (required).</param>
    /// <param name="startedAt">Date of start (RFC3339 format)..</param>
    /// <param name="finishedAt">Date of finish (RFC3339 format)..</param>
    public Run(string runID = default(string), string appID = default(string), string taskID = default(string), RunStatus status = default(RunStatus), RunProgress progress = default(RunProgress), RunOutcome? outcome = default(RunOutcome?), int failureThreshold = default(int), string reason = default(string), RunReasonCode? reasonCode = default(RunReasonCode?), RunType type = default(RunType), string createdAt = default(string), string startedAt = default(string), string finishedAt = default(string))
    {
      // to ensure "runID" is required (not null)
      if (runID == null)
      {
        throw new ArgumentNullException("runID is a required property for Run and cannot be null");
      }
      this.RunID = runID;
      // to ensure "appID" is required (not null)
      if (appID == null)
      {
        throw new ArgumentNullException("appID is a required property for Run and cannot be null");
      }
      this.AppID = appID;
      // to ensure "taskID" is required (not null)
      if (taskID == null)
      {
        throw new ArgumentNullException("taskID is a required property for Run and cannot be null");
      }
      this.TaskID = taskID;
      this.Status = status;
      this.Type = type;
      // to ensure "createdAt" is required (not null)
      if (createdAt == null)
      {
        throw new ArgumentNullException("createdAt is a required property for Run and cannot be null");
      }
      this.CreatedAt = createdAt;
      this.Progress = progress;
      this.Outcome = outcome;
      this.FailureThreshold = failureThreshold;
      this.Reason = reason;
      this.ReasonCode = reasonCode;
      this.StartedAt = startedAt;
      this.FinishedAt = finishedAt;
    }

    /// <summary>
    /// The run UUID.
    /// </summary>
    /// <value>The run UUID.</value>
    [DataMember(Name = "runID", IsRequired = true, EmitDefaultValue = true)]
    public string RunID { get; set; }

    /// <summary>
    /// Gets or Sets AppID
    /// </summary>
    [DataMember(Name = "appID", IsRequired = true, EmitDefaultValue = true)]
    public string AppID { get; set; }

    /// <summary>
    /// The task UUID.
    /// </summary>
    /// <value>The task UUID.</value>
    [DataMember(Name = "taskID", IsRequired = true, EmitDefaultValue = true)]
    public string TaskID { get; set; }

    /// <summary>
    /// Gets or Sets Progress
    /// </summary>
    [DataMember(Name = "progress", EmitDefaultValue = false)]
    public RunProgress Progress { get; set; }

    /// <summary>
    /// A percentage representing the accepted failure threshold to determine if a &#x60;run&#x60; succeeded or not.
    /// </summary>
    /// <value>A percentage representing the accepted failure threshold to determine if a &#x60;run&#x60; succeeded or not.</value>
    [DataMember(Name = "failureThreshold", EmitDefaultValue = false)]
    public int FailureThreshold { get; set; }

    /// <summary>
    /// Explains the result of outcome.
    /// </summary>
    /// <value>Explains the result of outcome.</value>
    [DataMember(Name = "reason", EmitDefaultValue = false)]
    public string Reason { get; set; }

    /// <summary>
    /// Date of creation (RFC3339 format).
    /// </summary>
    /// <value>Date of creation (RFC3339 format).</value>
    [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
    public string CreatedAt { get; set; }

    /// <summary>
    /// Date of start (RFC3339 format).
    /// </summary>
    /// <value>Date of start (RFC3339 format).</value>
    [DataMember(Name = "startedAt", EmitDefaultValue = false)]
    public string StartedAt { get; set; }

    /// <summary>
    /// Date of finish (RFC3339 format).
    /// </summary>
    /// <value>Date of finish (RFC3339 format).</value>
    [DataMember(Name = "finishedAt", EmitDefaultValue = false)]
    public string FinishedAt { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class Run {\n");
      sb.Append("  RunID: ").Append(RunID).Append("\n");
      sb.Append("  AppID: ").Append(AppID).Append("\n");
      sb.Append("  TaskID: ").Append(TaskID).Append("\n");
      sb.Append("  Status: ").Append(Status).Append("\n");
      sb.Append("  Progress: ").Append(Progress).Append("\n");
      sb.Append("  Outcome: ").Append(Outcome).Append("\n");
      sb.Append("  FailureThreshold: ").Append(FailureThreshold).Append("\n");
      sb.Append("  Reason: ").Append(Reason).Append("\n");
      sb.Append("  ReasonCode: ").Append(ReasonCode).Append("\n");
      sb.Append("  Type: ").Append(Type).Append("\n");
      sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
      sb.Append("  StartedAt: ").Append(StartedAt).Append("\n");
      sb.Append("  FinishedAt: ").Append(FinishedAt).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as Run);
    }

    /// <summary>
    /// Returns true if Run instances are equal
    /// </summary>
    /// <param name="input">Instance of Run to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Run input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.RunID == input.RunID ||
              (this.RunID != null &&
              this.RunID.Equals(input.RunID))
          ) &&
          (
              this.AppID == input.AppID ||
              (this.AppID != null &&
              this.AppID.Equals(input.AppID))
          ) &&
          (
              this.TaskID == input.TaskID ||
              (this.TaskID != null &&
              this.TaskID.Equals(input.TaskID))
          ) &&
          (
              this.Status == input.Status ||
              this.Status.Equals(input.Status)
          ) &&
          (
              this.Progress == input.Progress ||
              (this.Progress != null &&
              this.Progress.Equals(input.Progress))
          ) &&
          (
              this.Outcome == input.Outcome ||
              this.Outcome.Equals(input.Outcome)
          ) &&
          (
              this.FailureThreshold == input.FailureThreshold ||
              this.FailureThreshold.Equals(input.FailureThreshold)
          ) &&
          (
              this.Reason == input.Reason ||
              (this.Reason != null &&
              this.Reason.Equals(input.Reason))
          ) &&
          (
              this.ReasonCode == input.ReasonCode ||
              this.ReasonCode.Equals(input.ReasonCode)
          ) &&
          (
              this.Type == input.Type ||
              this.Type.Equals(input.Type)
          ) &&
          (
              this.CreatedAt == input.CreatedAt ||
              (this.CreatedAt != null &&
              this.CreatedAt.Equals(input.CreatedAt))
          ) &&
          (
              this.StartedAt == input.StartedAt ||
              (this.StartedAt != null &&
              this.StartedAt.Equals(input.StartedAt))
          ) &&
          (
              this.FinishedAt == input.FinishedAt ||
              (this.FinishedAt != null &&
              this.FinishedAt.Equals(input.FinishedAt))
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.RunID != null)
        {
          hashCode = (hashCode * 59) + this.RunID.GetHashCode();
        }
        if (this.AppID != null)
        {
          hashCode = (hashCode * 59) + this.AppID.GetHashCode();
        }
        if (this.TaskID != null)
        {
          hashCode = (hashCode * 59) + this.TaskID.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Status.GetHashCode();
        if (this.Progress != null)
        {
          hashCode = (hashCode * 59) + this.Progress.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Outcome.GetHashCode();
        hashCode = (hashCode * 59) + this.FailureThreshold.GetHashCode();
        if (this.Reason != null)
        {
          hashCode = (hashCode * 59) + this.Reason.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.ReasonCode.GetHashCode();
        hashCode = (hashCode * 59) + this.Type.GetHashCode();
        if (this.CreatedAt != null)
        {
          hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
        }
        if (this.StartedAt != null)
        {
          hashCode = (hashCode * 59) + this.StartedAt.GetHashCode();
        }
        if (this.FinishedAt != null)
        {
          hashCode = (hashCode * 59) + this.FinishedAt.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      // FailureThreshold (int) maximum
      if (this.FailureThreshold > (int)100)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FailureThreshold, must be a value less than or equal to 100.", new[] { "FailureThreshold" });
      }

      // FailureThreshold (int) minimum
      if (this.FailureThreshold < (int)0)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FailureThreshold, must be a value greater than or equal to 0.", new[] { "FailureThreshold" });
      }

      yield break;
    }
  }

}
