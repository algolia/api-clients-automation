//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Ingestion.Models
{
  /// <summary>
  /// SourceDocker
  /// </summary>
  [DataContract(Name = "SourceDocker")]
  public partial class SourceDocker
  {

    /// <summary>
    /// Gets or Sets ImageType
    /// </summary>
    [DataMember(Name = "imageType", IsRequired = true, EmitDefaultValue = true)]
    public DockerImageType ImageType { get; set; }

    /// <summary>
    /// Gets or Sets Registry
    /// </summary>
    [DataMember(Name = "registry", IsRequired = true, EmitDefaultValue = true)]
    public DockerRegistry Registry { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="SourceDocker" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected SourceDocker() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="SourceDocker" /> class.
    /// </summary>
    /// <param name="imageType">imageType (required).</param>
    /// <param name="registry">registry (required).</param>
    /// <param name="image">The name of the image to pull. (required).</param>
    /// <param name="varVersion">The version of the image, defaults to &#x60;latest&#x60;..</param>
    /// <param name="varConfiguration">The configuration of the spec. (required).</param>
    public SourceDocker(DockerImageType imageType = default(DockerImageType), DockerRegistry registry = default(DockerRegistry), string image = default(string), string varVersion = default(string), Object varConfiguration = default(Object))
    {
      this.ImageType = imageType;
      this.Registry = registry;
      // to ensure "image" is required (not null)
      if (image == null)
      {
        throw new ArgumentNullException("image is a required property for SourceDocker and cannot be null");
      }
      this.Image = image;
      // to ensure "varConfiguration" is required (not null)
      if (varConfiguration == null)
      {
        throw new ArgumentNullException("varConfiguration is a required property for SourceDocker and cannot be null");
      }
      this.VarConfiguration = varConfiguration;
      this.VarVersion = varVersion;
    }

    /// <summary>
    /// The name of the image to pull.
    /// </summary>
    /// <value>The name of the image to pull.</value>
    [DataMember(Name = "image", IsRequired = true, EmitDefaultValue = true)]
    public string Image { get; set; }

    /// <summary>
    /// The version of the image, defaults to &#x60;latest&#x60;.
    /// </summary>
    /// <value>The version of the image, defaults to &#x60;latest&#x60;.</value>
    [DataMember(Name = "version", EmitDefaultValue = false)]
    public string VarVersion { get; set; }

    /// <summary>
    /// The configuration of the spec.
    /// </summary>
    /// <value>The configuration of the spec.</value>
    [DataMember(Name = "configuration", IsRequired = true, EmitDefaultValue = true)]
    public Object VarConfiguration { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class SourceDocker {\n");
      sb.Append("  ImageType: ").Append(ImageType).Append("\n");
      sb.Append("  Registry: ").Append(Registry).Append("\n");
      sb.Append("  Image: ").Append(Image).Append("\n");
      sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
      sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
