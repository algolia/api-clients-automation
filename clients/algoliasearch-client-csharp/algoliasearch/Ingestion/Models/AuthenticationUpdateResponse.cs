//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Ingestion.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Ingestion.Client.OpenAPIDateConverter;

namespace Algolia.Search.Ingestion.Models
{
  /// <summary>
  /// Response from the API when the Authentication is successfully updated.
  /// </summary>
  [DataContract(Name = "AuthenticationUpdateResponse")]
  public partial class AuthenticationUpdateResponse : IEquatable<AuthenticationUpdateResponse>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="AuthenticationUpdateResponse" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected AuthenticationUpdateResponse() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="AuthenticationUpdateResponse" /> class.
    /// </summary>
    /// <param name="authenticationID">The authentication UUID. (required).</param>
    /// <param name="name">An human readable name describing the object. (required).</param>
    /// <param name="updatedAt">Date of last update (RFC3339 format). (required).</param>
    public AuthenticationUpdateResponse(string authenticationID = default(string), string name = default(string), string updatedAt = default(string))
    {
      // to ensure "authenticationID" is required (not null)
      if (authenticationID == null)
      {
        throw new ArgumentNullException("authenticationID is a required property for AuthenticationUpdateResponse and cannot be null");
      }
      this.AuthenticationID = authenticationID;
      // to ensure "name" is required (not null)
      if (name == null)
      {
        throw new ArgumentNullException("name is a required property for AuthenticationUpdateResponse and cannot be null");
      }
      this.Name = name;
      // to ensure "updatedAt" is required (not null)
      if (updatedAt == null)
      {
        throw new ArgumentNullException("updatedAt is a required property for AuthenticationUpdateResponse and cannot be null");
      }
      this.UpdatedAt = updatedAt;
    }

    /// <summary>
    /// The authentication UUID.
    /// </summary>
    /// <value>The authentication UUID.</value>
    [DataMember(Name = "authenticationID", IsRequired = true, EmitDefaultValue = true)]
    public string AuthenticationID { get; set; }

    /// <summary>
    /// An human readable name describing the object.
    /// </summary>
    /// <value>An human readable name describing the object.</value>
    [DataMember(Name = "name", IsRequired = true, EmitDefaultValue = true)]
    public string Name { get; set; }

    /// <summary>
    /// Date of last update (RFC3339 format).
    /// </summary>
    /// <value>Date of last update (RFC3339 format).</value>
    [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
    public string UpdatedAt { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class AuthenticationUpdateResponse {\n");
      sb.Append("  AuthenticationID: ").Append(AuthenticationID).Append("\n");
      sb.Append("  Name: ").Append(Name).Append("\n");
      sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as AuthenticationUpdateResponse);
    }

    /// <summary>
    /// Returns true if AuthenticationUpdateResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of AuthenticationUpdateResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(AuthenticationUpdateResponse input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.AuthenticationID == input.AuthenticationID ||
              (this.AuthenticationID != null &&
              this.AuthenticationID.Equals(input.AuthenticationID))
          ) &&
          (
              this.Name == input.Name ||
              (this.Name != null &&
              this.Name.Equals(input.Name))
          ) &&
          (
              this.UpdatedAt == input.UpdatedAt ||
              (this.UpdatedAt != null &&
              this.UpdatedAt.Equals(input.UpdatedAt))
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.AuthenticationID != null)
        {
          hashCode = (hashCode * 59) + this.AuthenticationID.GetHashCode();
        }
        if (this.Name != null)
        {
          hashCode = (hashCode * 59) + this.Name.GetHashCode();
        }
        if (this.UpdatedAt != null)
        {
          hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
