//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Ingestion.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Ingestion.Client.OpenAPIDateConverter;

namespace Algolia.Search.Ingestion.Models
{
  /// <summary>
  /// Task
  /// </summary>
  [DataContract(Name = "Task")]
  public partial class Task : IEquatable<Task>, IValidatableObject
  {

    /// <summary>
    /// Gets or Sets Action
    /// </summary>
    [DataMember(Name = "action", IsRequired = true, EmitDefaultValue = true)]
    public ActionType Action { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="Task" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Task() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Task" /> class.
    /// </summary>
    /// <param name="taskID">The task UUID. (required).</param>
    /// <param name="sourceID">The source UUID. (required).</param>
    /// <param name="destinationID">The destination UUID. (required).</param>
    /// <param name="trigger">trigger (required).</param>
    /// <param name="input">input.</param>
    /// <param name="enabled">Whether the task is enabled or not. (required) (default to true).</param>
    /// <param name="failureThreshold">A percentage representing the accepted failure threshold to determine if a &#x60;run&#x60; succeeded or not..</param>
    /// <param name="action">action (required).</param>
    /// <param name="createdAt">Date of creation (RFC3339 format). (required).</param>
    /// <param name="updatedAt">Date of last update (RFC3339 format)..</param>
    public Task(string taskID = default(string), string sourceID = default(string), string destinationID = default(string), Trigger trigger = default(Trigger), TaskInput input = default(TaskInput), bool enabled = true, int failureThreshold = default(int), ActionType action = default(ActionType), string createdAt = default(string), string updatedAt = default(string))
    {
      // to ensure "taskID" is required (not null)
      if (taskID == null)
      {
        throw new ArgumentNullException("taskID is a required property for Task and cannot be null");
      }
      this.TaskID = taskID;
      // to ensure "sourceID" is required (not null)
      if (sourceID == null)
      {
        throw new ArgumentNullException("sourceID is a required property for Task and cannot be null");
      }
      this.SourceID = sourceID;
      // to ensure "destinationID" is required (not null)
      if (destinationID == null)
      {
        throw new ArgumentNullException("destinationID is a required property for Task and cannot be null");
      }
      this.DestinationID = destinationID;
      // to ensure "trigger" is required (not null)
      if (trigger == null)
      {
        throw new ArgumentNullException("trigger is a required property for Task and cannot be null");
      }
      this.Trigger = trigger;
      this.Enabled = enabled;
      this.Action = action;
      // to ensure "createdAt" is required (not null)
      if (createdAt == null)
      {
        throw new ArgumentNullException("createdAt is a required property for Task and cannot be null");
      }
      this.CreatedAt = createdAt;
      this.Input = input;
      this.FailureThreshold = failureThreshold;
      this.UpdatedAt = updatedAt;
    }

    /// <summary>
    /// The task UUID.
    /// </summary>
    /// <value>The task UUID.</value>
    [DataMember(Name = "taskID", IsRequired = true, EmitDefaultValue = true)]
    public string TaskID { get; set; }

    /// <summary>
    /// The source UUID.
    /// </summary>
    /// <value>The source UUID.</value>
    [DataMember(Name = "sourceID", IsRequired = true, EmitDefaultValue = true)]
    public string SourceID { get; set; }

    /// <summary>
    /// The destination UUID.
    /// </summary>
    /// <value>The destination UUID.</value>
    [DataMember(Name = "destinationID", IsRequired = true, EmitDefaultValue = true)]
    public string DestinationID { get; set; }

    /// <summary>
    /// Gets or Sets Trigger
    /// </summary>
    [DataMember(Name = "trigger", IsRequired = true, EmitDefaultValue = true)]
    public Trigger Trigger { get; set; }

    /// <summary>
    /// Gets or Sets Input
    /// </summary>
    [DataMember(Name = "input", EmitDefaultValue = false)]
    public TaskInput Input { get; set; }

    /// <summary>
    /// Whether the task is enabled or not.
    /// </summary>
    /// <value>Whether the task is enabled or not.</value>
    [DataMember(Name = "enabled", IsRequired = true, EmitDefaultValue = true)]
    public bool Enabled { get; set; }

    /// <summary>
    /// A percentage representing the accepted failure threshold to determine if a &#x60;run&#x60; succeeded or not.
    /// </summary>
    /// <value>A percentage representing the accepted failure threshold to determine if a &#x60;run&#x60; succeeded or not.</value>
    [DataMember(Name = "failureThreshold", EmitDefaultValue = false)]
    public int FailureThreshold { get; set; }

    /// <summary>
    /// Date of creation (RFC3339 format).
    /// </summary>
    /// <value>Date of creation (RFC3339 format).</value>
    [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
    public string CreatedAt { get; set; }

    /// <summary>
    /// Date of last update (RFC3339 format).
    /// </summary>
    /// <value>Date of last update (RFC3339 format).</value>
    [DataMember(Name = "updatedAt", EmitDefaultValue = false)]
    public string UpdatedAt { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class Task {\n");
      sb.Append("  TaskID: ").Append(TaskID).Append("\n");
      sb.Append("  SourceID: ").Append(SourceID).Append("\n");
      sb.Append("  DestinationID: ").Append(DestinationID).Append("\n");
      sb.Append("  Trigger: ").Append(Trigger).Append("\n");
      sb.Append("  Input: ").Append(Input).Append("\n");
      sb.Append("  Enabled: ").Append(Enabled).Append("\n");
      sb.Append("  FailureThreshold: ").Append(FailureThreshold).Append("\n");
      sb.Append("  Action: ").Append(Action).Append("\n");
      sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
      sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as Task);
    }

    /// <summary>
    /// Returns true if Task instances are equal
    /// </summary>
    /// <param name="input">Instance of Task to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Task input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.TaskID == input.TaskID ||
              (this.TaskID != null &&
              this.TaskID.Equals(input.TaskID))
          ) &&
          (
              this.SourceID == input.SourceID ||
              (this.SourceID != null &&
              this.SourceID.Equals(input.SourceID))
          ) &&
          (
              this.DestinationID == input.DestinationID ||
              (this.DestinationID != null &&
              this.DestinationID.Equals(input.DestinationID))
          ) &&
          (
              this.Trigger == input.Trigger ||
              (this.Trigger != null &&
              this.Trigger.Equals(input.Trigger))
          ) &&
          (
              this.Input == input.Input ||
              (this.Input != null &&
              this.Input.Equals(input.Input))
          ) &&
          (
              this.Enabled == input.Enabled ||
              this.Enabled.Equals(input.Enabled)
          ) &&
          (
              this.FailureThreshold == input.FailureThreshold ||
              this.FailureThreshold.Equals(input.FailureThreshold)
          ) &&
          (
              this.Action == input.Action ||
              this.Action.Equals(input.Action)
          ) &&
          (
              this.CreatedAt == input.CreatedAt ||
              (this.CreatedAt != null &&
              this.CreatedAt.Equals(input.CreatedAt))
          ) &&
          (
              this.UpdatedAt == input.UpdatedAt ||
              (this.UpdatedAt != null &&
              this.UpdatedAt.Equals(input.UpdatedAt))
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.TaskID != null)
        {
          hashCode = (hashCode * 59) + this.TaskID.GetHashCode();
        }
        if (this.SourceID != null)
        {
          hashCode = (hashCode * 59) + this.SourceID.GetHashCode();
        }
        if (this.DestinationID != null)
        {
          hashCode = (hashCode * 59) + this.DestinationID.GetHashCode();
        }
        if (this.Trigger != null)
        {
          hashCode = (hashCode * 59) + this.Trigger.GetHashCode();
        }
        if (this.Input != null)
        {
          hashCode = (hashCode * 59) + this.Input.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
        hashCode = (hashCode * 59) + this.FailureThreshold.GetHashCode();
        hashCode = (hashCode * 59) + this.Action.GetHashCode();
        if (this.CreatedAt != null)
        {
          hashCode = (hashCode * 59) + this.CreatedAt.GetHashCode();
        }
        if (this.UpdatedAt != null)
        {
          hashCode = (hashCode * 59) + this.UpdatedAt.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      // FailureThreshold (int) maximum
      if (this.FailureThreshold > (int)100)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FailureThreshold, must be a value less than or equal to 100.", new[] { "FailureThreshold" });
      }

      // FailureThreshold (int) minimum
      if (this.FailureThreshold < (int)0)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for FailureThreshold, must be a value greater than or equal to 0.", new[] { "FailureThreshold" });
      }

      yield break;
    }
  }

}
