//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Ingestion.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Ingestion.Client.OpenAPIDateConverter;

namespace Algolia.Search.Ingestion.Models
{
  /// <summary>
  /// SourceCSV
  /// </summary>
  [DataContract(Name = "SourceCSV")]
  public partial class SourceCSV : IEquatable<SourceCSV>, IValidatableObject
  {

    /// <summary>
    /// Gets or Sets Method
    /// </summary>
    [DataMember(Name = "method", EmitDefaultValue = false)]
    public MethodType? Method { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="SourceCSV" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected SourceCSV() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="SourceCSV" /> class.
    /// </summary>
    /// <param name="url">The URL of the file. (required).</param>
    /// <param name="uniqueIDColumn">The name of the column that contains the unique ID, used as &#x60;objectID&#x60; in Algolia..</param>
    /// <param name="mapping">Mapping of type for every column. For example {\&quot;myColumn\&quot;: \&quot;boolean\&quot;, \&quot;myOtherColumn\&quot;: \&quot;json\&quot;}. .</param>
    /// <param name="method">method.</param>
    /// <param name="delimiter">The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden). (default to &quot;,&quot;).</param>
    public SourceCSV(string url = default(string), string uniqueIDColumn = default(string), Dictionary<string, MappingTypeCSV> mapping = default(Dictionary<string, MappingTypeCSV>), MethodType? method = default(MethodType?), string delimiter = @",")
    {
      // to ensure "url" is required (not null)
      if (url == null)
      {
        throw new ArgumentNullException("url is a required property for SourceCSV and cannot be null");
      }
      this.Url = url;
      this.UniqueIDColumn = uniqueIDColumn;
      this.Mapping = mapping;
      this.Method = method;
      // use default value if no "delimiter" provided
      this.Delimiter = delimiter ?? @",";
    }

    /// <summary>
    /// The URL of the file.
    /// </summary>
    /// <value>The URL of the file.</value>
    [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
    public string Url { get; set; }

    /// <summary>
    /// The name of the column that contains the unique ID, used as &#x60;objectID&#x60; in Algolia.
    /// </summary>
    /// <value>The name of the column that contains the unique ID, used as &#x60;objectID&#x60; in Algolia.</value>
    [DataMember(Name = "uniqueIDColumn", EmitDefaultValue = false)]
    public string UniqueIDColumn { get; set; }

    /// <summary>
    /// Mapping of type for every column. For example {\&quot;myColumn\&quot;: \&quot;boolean\&quot;, \&quot;myOtherColumn\&quot;: \&quot;json\&quot;}. 
    /// </summary>
    /// <value>Mapping of type for every column. For example {\&quot;myColumn\&quot;: \&quot;boolean\&quot;, \&quot;myOtherColumn\&quot;: \&quot;json\&quot;}. </value>
    [DataMember(Name = "mapping", EmitDefaultValue = false)]
    public Dictionary<string, MappingTypeCSV> Mapping { get; set; }

    /// <summary>
    /// The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden).
    /// </summary>
    /// <value>The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden).</value>
    [DataMember(Name = "delimiter", EmitDefaultValue = false)]
    public string Delimiter { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class SourceCSV {\n");
      sb.Append("  Url: ").Append(Url).Append("\n");
      sb.Append("  UniqueIDColumn: ").Append(UniqueIDColumn).Append("\n");
      sb.Append("  Mapping: ").Append(Mapping).Append("\n");
      sb.Append("  Method: ").Append(Method).Append("\n");
      sb.Append("  Delimiter: ").Append(Delimiter).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as SourceCSV);
    }

    /// <summary>
    /// Returns true if SourceCSV instances are equal
    /// </summary>
    /// <param name="input">Instance of SourceCSV to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(SourceCSV input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Url == input.Url ||
              (this.Url != null &&
              this.Url.Equals(input.Url))
          ) &&
          (
              this.UniqueIDColumn == input.UniqueIDColumn ||
              (this.UniqueIDColumn != null &&
              this.UniqueIDColumn.Equals(input.UniqueIDColumn))
          ) &&
          (
              this.Mapping == input.Mapping ||
              this.Mapping != null &&
              input.Mapping != null &&
              this.Mapping.SequenceEqual(input.Mapping)
          ) &&
          (
              this.Method == input.Method ||
              this.Method.Equals(input.Method)
          ) &&
          (
              this.Delimiter == input.Delimiter ||
              (this.Delimiter != null &&
              this.Delimiter.Equals(input.Delimiter))
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.Url != null)
        {
          hashCode = (hashCode * 59) + this.Url.GetHashCode();
        }
        if (this.UniqueIDColumn != null)
        {
          hashCode = (hashCode * 59) + this.UniqueIDColumn.GetHashCode();
        }
        if (this.Mapping != null)
        {
          hashCode = (hashCode * 59) + this.Mapping.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Method.GetHashCode();
        if (this.Delimiter != null)
        {
          hashCode = (hashCode * 59) + this.Delimiter.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      // Delimiter (string) maxLength
      if (this.Delimiter != null && this.Delimiter.Length > 1)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Delimiter, length must be less than 1.", new[] { "Delimiter" });
      }

      // Delimiter (string) minLength
      if (this.Delimiter != null && this.Delimiter.Length < 1)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Delimiter, length must be greater than 1.", new[] { "Delimiter" });
      }

      yield break;
    }
  }

}
