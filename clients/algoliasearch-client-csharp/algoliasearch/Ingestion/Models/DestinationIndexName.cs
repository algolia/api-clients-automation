//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Ingestion.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Ingestion.Client.OpenAPIDateConverter;

namespace Algolia.Search.Ingestion.Models
{
  /// <summary>
  /// DestinationIndexName
  /// </summary>
  [DataContract(Name = "DestinationIndexName")]
  public partial class DestinationIndexName : IEquatable<DestinationIndexName>, IValidatableObject
  {

    /// <summary>
    /// Gets or Sets RecordType
    /// </summary>
    [DataMember(Name = "recordType", EmitDefaultValue = false)]
    public RecordType? RecordType { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="DestinationIndexName" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected DestinationIndexName() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="DestinationIndexName" /> class.
    /// </summary>
    /// <param name="indexName">The index name to store data in. (required).</param>
    /// <param name="recordType">recordType.</param>
    /// <param name="attributesToExclude">Determines the attributes to exclude from an Algolia record. To remove nested element, you can separate the path to the element with dots (&#x60;.&#x60;):   - \&quot;foo.bar\&quot;: will remove &#x60;bar&#x60; from &#x60;foo&#x60;. To remove elements from an array, you can use the following:   - \&quot;foo.[0].bar\&quot;: will only remove &#x60;bar&#x60; from the first element of &#x60;foo&#x60;.   - \&quot;foo.[*].bar\&quot;: will remove &#x60;bar&#x60; from every elements of &#x60;foo&#x60;. .</param>
    public DestinationIndexName(string indexName = default(string), RecordType? recordType = default(RecordType?), List<string> attributesToExclude = default(List<string>))
    {
      // to ensure "indexName" is required (not null)
      if (indexName == null)
      {
        throw new ArgumentNullException("indexName is a required property for DestinationIndexName and cannot be null");
      }
      this.IndexName = indexName;
      this.RecordType = recordType;
      this.AttributesToExclude = attributesToExclude;
    }

    /// <summary>
    /// The index name to store data in.
    /// </summary>
    /// <value>The index name to store data in.</value>
    [DataMember(Name = "indexName", IsRequired = true, EmitDefaultValue = true)]
    public string IndexName { get; set; }

    /// <summary>
    /// Determines the attributes to exclude from an Algolia record. To remove nested element, you can separate the path to the element with dots (&#x60;.&#x60;):   - \&quot;foo.bar\&quot;: will remove &#x60;bar&#x60; from &#x60;foo&#x60;. To remove elements from an array, you can use the following:   - \&quot;foo.[0].bar\&quot;: will only remove &#x60;bar&#x60; from the first element of &#x60;foo&#x60;.   - \&quot;foo.[*].bar\&quot;: will remove &#x60;bar&#x60; from every elements of &#x60;foo&#x60;. 
    /// </summary>
    /// <value>Determines the attributes to exclude from an Algolia record. To remove nested element, you can separate the path to the element with dots (&#x60;.&#x60;):   - \&quot;foo.bar\&quot;: will remove &#x60;bar&#x60; from &#x60;foo&#x60;. To remove elements from an array, you can use the following:   - \&quot;foo.[0].bar\&quot;: will only remove &#x60;bar&#x60; from the first element of &#x60;foo&#x60;.   - \&quot;foo.[*].bar\&quot;: will remove &#x60;bar&#x60; from every elements of &#x60;foo&#x60;. </value>
    [DataMember(Name = "attributesToExclude", EmitDefaultValue = false)]
    public List<string> AttributesToExclude { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class DestinationIndexName {\n");
      sb.Append("  IndexName: ").Append(IndexName).Append("\n");
      sb.Append("  RecordType: ").Append(RecordType).Append("\n");
      sb.Append("  AttributesToExclude: ").Append(AttributesToExclude).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as DestinationIndexName);
    }

    /// <summary>
    /// Returns true if DestinationIndexName instances are equal
    /// </summary>
    /// <param name="input">Instance of DestinationIndexName to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(DestinationIndexName input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.IndexName == input.IndexName ||
              (this.IndexName != null &&
              this.IndexName.Equals(input.IndexName))
          ) &&
          (
              this.RecordType == input.RecordType ||
              this.RecordType.Equals(input.RecordType)
          ) &&
          (
              this.AttributesToExclude == input.AttributesToExclude ||
              this.AttributesToExclude != null &&
              input.AttributesToExclude != null &&
              this.AttributesToExclude.SequenceEqual(input.AttributesToExclude)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.IndexName != null)
        {
          hashCode = (hashCode * 59) + this.IndexName.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.RecordType.GetHashCode();
        if (this.AttributesToExclude != null)
        {
          hashCode = (hashCode * 59) + this.AttributesToExclude.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
