//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Insights.Client;
using Algolia.Search.Insights.Models;
using Algolia.Search.Transport;
using Algolia.Search.Http;
using Algolia.Search.Client;

namespace Algolia.Search.Insights.Api
{

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IInsightsClient
  {
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomDeleteAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomGetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomPostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomPutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send events.
    /// </summary>
    /// <remarks>
    /// Send a list of events to the Insights API.  You can include up to 1,000 events in a single request, but the request body must be smaller than 2&amp;nbsp;MB. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="insightsEvents"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of EventsResponse</returns>
    Task<EventsResponse> PushEventsAsync(InsightsEvents insightsEvents, RequestOptions options = null, CancellationToken cancellationToken = default);
  }


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public partial class InsightsClient : IInsightsClient
  {
    private readonly HttpTransport _transport;
    private readonly AlgoliaConfig _config;

    /// <summary>
    /// Create a new Insights client for the given appID and apiKey.
    /// </summary>
    /// <param name="applicationId">Your application</param>
    /// <param name="apiKey">Your API key</param>
    public InsightsClient(string applicationId, string apiKey) : this(new InsightsConfig(applicationId, apiKey), new AlgoliaHttpRequester())
    {
    }

    /// <summary>
    /// Initialize a client with custom config
    /// </summary>
    /// <param name="config">Algolia configuration</param>
    public InsightsClient(InsightsConfig config) : this(config, new AlgoliaHttpRequester())
    {
    }

    /// <summary>
    /// Initialize the client with custom config and custom Requester
    /// </summary>
    /// <param name="config">Algolia Config</param>
    /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
    public InsightsClient(InsightsConfig config, IHttpRequester httpRequester)
    {
      if (httpRequester == null)
      {
        throw new ArgumentNullException(nameof(httpRequester), "An httpRequester is required");
      }

      if (config == null)
      {
        throw new ArgumentNullException(nameof(config), "A config is required");
      }

      if (string.IsNullOrWhiteSpace(config.AppId))
      {
        throw new ArgumentNullException(nameof(config.AppId), "Application ID is required");
      }

      if (string.IsNullOrWhiteSpace(config.ApiKey))
      {
        throw new ArgumentNullException(nameof(config.ApiKey), "An API key is required");
      }

      _config = config;
      _transport = new HttpTransport(config, httpRequester);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomDeleteAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling InsightsClient->CustomDelete");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("DELETE"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomGetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling InsightsClient->CustomGet");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("GET"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomPostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling InsightsClient->CustomPost");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }
      requestOptions.Data = body;


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("POST"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomPutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling InsightsClient->CustomPut");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }
      requestOptions.Data = body;


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("PUT"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send events. Send a list of events to the Insights API.  You can include up to 1,000 events in a single request, but the request body must be smaller than 2&amp;nbsp;MB. 
    /// </summary>
    /// <exception cref="Algolia.Search.Insights.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="insightsEvents"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of EventsResponse</returns>
    public async Task<EventsResponse> PushEventsAsync(InsightsEvents insightsEvents, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'insightsEvents' is set
      if (insightsEvents == null)
        throw new ApiException(400, "Missing required parameter 'insightsEvents' when calling InsightsClient->PushEvents");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.Data = insightsEvents;


      return await _transport.ExecuteRequestAsync<EventsResponse>(new HttpMethod("POST"), "/1/events", requestOptions, cancellationToken).ConfigureAwait(false);
    }

  }
}
