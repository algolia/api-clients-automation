//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Insights.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Insights.Client.OpenAPIDateConverter;

namespace Algolia.Search.Insights.Models
{
  /// <summary>
  /// The response of the Insights API.
  /// </summary>
  [DataContract(Name = "EventsResponse")]
  public partial class EventsResponse : IEquatable<EventsResponse>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="EventsResponse" /> class.
    /// </summary>
    /// <param name="message">Details about the response, such as error messages..</param>
    /// <param name="status">The HTTP status code of the response..</param>
    public EventsResponse(string message = default(string), int status = default(int))
    {
      this.Message = message;
      this.Status = status;
    }

    /// <summary>
    /// Details about the response, such as error messages.
    /// </summary>
    /// <value>Details about the response, such as error messages.</value>
    [DataMember(Name = "message", EmitDefaultValue = false)]
    public string Message { get; set; }

    /// <summary>
    /// The HTTP status code of the response.
    /// </summary>
    /// <value>The HTTP status code of the response.</value>
    [DataMember(Name = "status", EmitDefaultValue = false)]
    public int Status { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class EventsResponse {\n");
      sb.Append("  Message: ").Append(Message).Append("\n");
      sb.Append("  Status: ").Append(Status).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as EventsResponse);
    }

    /// <summary>
    /// Returns true if EventsResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of EventsResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(EventsResponse input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Message == input.Message ||
              (this.Message != null &&
              this.Message.Equals(input.Message))
          ) &&
          (
              this.Status == input.Status ||
              this.Status.Equals(input.Status)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.Message != null)
        {
          hashCode = (hashCode * 59) + this.Message.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Status.GetHashCode();
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
