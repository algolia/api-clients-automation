//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.QuerySuggestions.Models
{
  /// <summary>
  /// Query Suggestions configuration.
  /// </summary>
  [DataContract(Name = "QuerySuggestionsConfigurationWithIndex")]
  public partial class QuerySuggestionsConfigurationWithIndex
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsConfigurationWithIndex" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected QuerySuggestionsConfigurationWithIndex() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsConfigurationWithIndex" /> class.
    /// </summary>
    /// <param name="indexName">Query Suggestions index name. (required).</param>
    /// <param name="sourceIndices">Algolia indices from which to get the popular searches for query suggestions. (required).</param>
    /// <param name="languages">languages.</param>
    /// <param name="exclude">Patterns to exclude from query suggestions..</param>
    /// <param name="enablePersonalization">Turn on personalized query suggestions. (default to false).</param>
    /// <param name="allowSpecialCharacters">Allow suggestions with special characters. (default to false).</param>
    public QuerySuggestionsConfigurationWithIndex(string indexName = default(string), List<SourceIndex> sourceIndices = default(List<SourceIndex>), Languages languages = default(Languages), List<string> exclude = default(List<string>), bool enablePersonalization = false, bool allowSpecialCharacters = false)
    {
      // to ensure "indexName" is required (not null)
      if (indexName == null)
      {
        throw new ArgumentNullException("indexName is a required property for QuerySuggestionsConfigurationWithIndex and cannot be null");
      }
      this.IndexName = indexName;
      // to ensure "sourceIndices" is required (not null)
      if (sourceIndices == null)
      {
        throw new ArgumentNullException("sourceIndices is a required property for QuerySuggestionsConfigurationWithIndex and cannot be null");
      }
      this.SourceIndices = sourceIndices;
      this.Languages = languages;
      this.Exclude = exclude;
      this.EnablePersonalization = enablePersonalization;
      this.AllowSpecialCharacters = allowSpecialCharacters;
    }

    /// <summary>
    /// Query Suggestions index name.
    /// </summary>
    /// <value>Query Suggestions index name.</value>
    [DataMember(Name = "indexName", IsRequired = true, EmitDefaultValue = true)]
    public string IndexName { get; set; }

    /// <summary>
    /// Algolia indices from which to get the popular searches for query suggestions.
    /// </summary>
    /// <value>Algolia indices from which to get the popular searches for query suggestions.</value>
    [DataMember(Name = "sourceIndices", IsRequired = true, EmitDefaultValue = true)]
    public List<SourceIndex> SourceIndices { get; set; }

    /// <summary>
    /// Gets or Sets Languages
    /// </summary>
    [DataMember(Name = "languages", EmitDefaultValue = false)]
    public Languages Languages { get; set; }

    /// <summary>
    /// Patterns to exclude from query suggestions.
    /// </summary>
    /// <value>Patterns to exclude from query suggestions.</value>
    [DataMember(Name = "exclude", EmitDefaultValue = true)]
    public List<string> Exclude { get; set; }

    /// <summary>
    /// Turn on personalized query suggestions.
    /// </summary>
    /// <value>Turn on personalized query suggestions.</value>
    [DataMember(Name = "enablePersonalization", EmitDefaultValue = true)]
    public bool EnablePersonalization { get; set; }

    /// <summary>
    /// Allow suggestions with special characters.
    /// </summary>
    /// <value>Allow suggestions with special characters.</value>
    [DataMember(Name = "allowSpecialCharacters", EmitDefaultValue = true)]
    public bool AllowSpecialCharacters { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class QuerySuggestionsConfigurationWithIndex {\n");
      sb.Append("  IndexName: ").Append(IndexName).Append("\n");
      sb.Append("  SourceIndices: ").Append(SourceIndices).Append("\n");
      sb.Append("  Languages: ").Append(Languages).Append("\n");
      sb.Append("  Exclude: ").Append(Exclude).Append("\n");
      sb.Append("  EnablePersonalization: ").Append(EnablePersonalization).Append("\n");
      sb.Append("  AllowSpecialCharacters: ").Append(AllowSpecialCharacters).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
