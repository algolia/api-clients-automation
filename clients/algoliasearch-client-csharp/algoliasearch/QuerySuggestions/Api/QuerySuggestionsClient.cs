//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Clients;
using Algolia.Search.Models;
using Algolia.Search.Models.QuerySuggestions;
using Algolia.Search.Transport;
using Algolia.Search.Http;

namespace Algolia.Search.Clients
{
  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IQuerySuggestionsClient
  {
    /// <summary>
    /// Create a configuration.
    /// </summary>
    /// <remarks>
    /// Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="querySuggestionsConfigurationWithIndex"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    Task<BaseResponse> CreateConfigAsync(QuerySuggestionsConfigurationWithIndex querySuggestionsConfigurationWithIndex, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomDeleteAsync(string path, Dictionary<string, Object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomGetAsync(string path, Dictionary<string, Object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomPostAsync(string path, Dictionary<string, Object> parameters = default, Object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomPutAsync(string path, Dictionary<string, Object> parameters = default, Object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Delete a configuration.
    /// </summary>
    /// <remarks>
    /// Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    Task<BaseResponse> DeleteConfigAsync(string indexName, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// List configurations.
    /// </summary>
    /// <remarks>
    /// List all Query Suggestions configurations of your Algolia application.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List<QuerySuggestionsConfigurationResponse></returns>
    Task<List<QuerySuggestionsConfigurationResponse>> GetAllConfigsAsync(RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get a configuration.
    /// </summary>
    /// <remarks>
    /// Get a single Query Suggestions configuration.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of QuerySuggestionsConfigurationResponse</returns>
    Task<QuerySuggestionsConfigurationResponse> GetConfigAsync(string indexName, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get configuration status.
    /// </summary>
    /// <remarks>
    /// Report the status of a Query Suggestions index.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetConfigStatus200Response</returns>
    Task<GetConfigStatus200Response> GetConfigStatusAsync(string indexName, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get logs.
    /// </summary>
    /// <remarks>
    /// Get the logs for a single Query Suggestions index.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetLogFile200Response</returns>
    Task<GetLogFile200Response> GetLogFileAsync(string indexName, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Update a configuration.
    /// </summary>
    /// <remarks>
    /// Update a QuerySuggestions configuration.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="querySuggestionsConfiguration"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    Task<BaseResponse> UpdateConfigAsync(string indexName, QuerySuggestionsConfiguration querySuggestionsConfiguration, RequestOptions options = null, CancellationToken cancellationToken = default);
  }


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public partial class QuerySuggestionsClient : IQuerySuggestionsClient
  {
    private readonly HttpTransport _transport;
    private readonly AlgoliaConfig _config;

    /// <summary>
    /// Create a new QuerySuggestions client for the given appID and apiKey.
    /// </summary>
    /// <param name="applicationId">Your application</param>
    /// <param name="apiKey">Your API key</param>
    /// <param name="region">The targeted region</param>
    public QuerySuggestionsClient(string applicationId, string apiKey, string region) : this(new QuerySuggestionsConfig(applicationId, apiKey, region), new AlgoliaHttpRequester())
    {
    }

    /// <summary>
    /// Initialize a client with custom config
    /// </summary>
    /// <param name="config">Algolia configuration</param>
    public QuerySuggestionsClient(QuerySuggestionsConfig config) : this(config, new AlgoliaHttpRequester())
    {
    }

    /// <summary>
    /// Initialize the client with custom config and custom Requester
    /// </summary>
    /// <param name="config">Algolia Config</param>
    /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
    public QuerySuggestionsClient(QuerySuggestionsConfig config, IHttpRequester httpRequester)
    {
      if (httpRequester == null)
      {
        throw new ArgumentException("An httpRequester is required");
      }
      if (config == null)
      {
        throw new ArgumentException("A config is required");
      }
      if (string.IsNullOrWhiteSpace(config.AppId))
      {
        throw new ArgumentException("`AppId` is missing.");
      }
      if (string.IsNullOrWhiteSpace(config.ApiKey))
      {
        throw new ArgumentException("`ApiKey` is missing.");
      }

      _config = config;
      _transport = new HttpTransport(config, httpRequester);
    }


    /// <summary>
    /// Create a configuration. Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="querySuggestionsConfigurationWithIndex"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    public async Task<BaseResponse> CreateConfigAsync(QuerySuggestionsConfigurationWithIndex querySuggestionsConfigurationWithIndex, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (querySuggestionsConfigurationWithIndex == null)
        throw new ApiException(400, "Parameter `querySuggestionsConfigurationWithIndex` is required when calling `CreateConfig`.");
      var requestOptions = new InternalRequestOptions(options);


      requestOptions.Data = querySuggestionsConfigurationWithIndex;
      return await _transport.ExecuteRequestAsync<BaseResponse>(new HttpMethod("POST"), "/1/configs", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomDeleteAsync(string path, Dictionary<string, Object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (path == null)
        throw new ApiException(400, "Parameter `path` is required when calling `CustomDelete`.");
      var requestOptions = new InternalRequestOptions(options);
      requestOptions.CustomPathParameters.Add("path", ClientUtils.ParameterToString(path));

      requestOptions.AddCustomQueryParameters(parameters);
      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("DELETE"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomGetAsync(string path, Dictionary<string, Object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (path == null)
        throw new ApiException(400, "Parameter `path` is required when calling `CustomGet`.");
      var requestOptions = new InternalRequestOptions(options);
      requestOptions.CustomPathParameters.Add("path", ClientUtils.ParameterToString(path));

      requestOptions.AddCustomQueryParameters(parameters);
      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("GET"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomPostAsync(string path, Dictionary<string, Object> parameters = default, Object body = default, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (path == null)
        throw new ApiException(400, "Parameter `path` is required when calling `CustomPost`.");
      var requestOptions = new InternalRequestOptions(options);
      requestOptions.CustomPathParameters.Add("path", ClientUtils.ParameterToString(path));

      requestOptions.AddCustomQueryParameters(parameters);
      requestOptions.Data = body;
      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("POST"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomPutAsync(string path, Dictionary<string, Object> parameters = default, Object body = default, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (path == null)
        throw new ApiException(400, "Parameter `path` is required when calling `CustomPut`.");
      var requestOptions = new InternalRequestOptions(options);
      requestOptions.CustomPathParameters.Add("path", ClientUtils.ParameterToString(path));

      requestOptions.AddCustomQueryParameters(parameters);
      requestOptions.Data = body;
      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("PUT"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Delete a configuration. Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    public async Task<BaseResponse> DeleteConfigAsync(string indexName, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (indexName == null)
        throw new ApiException(400, "Parameter `indexName` is required when calling `DeleteConfig`.");
      var requestOptions = new InternalRequestOptions(options);

      requestOptions.PathParameters.Add("indexName", ClientUtils.ParameterToString(indexName));

      return await _transport.ExecuteRequestAsync<BaseResponse>(new HttpMethod("DELETE"), "/1/configs/{indexName}", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// List configurations. List all Query Suggestions configurations of your Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List<QuerySuggestionsConfigurationResponse></returns>
    public async Task<List<QuerySuggestionsConfigurationResponse>> GetAllConfigsAsync(RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      var requestOptions = new InternalRequestOptions(options);


      return await _transport.ExecuteRequestAsync<List<QuerySuggestionsConfigurationResponse>>(new HttpMethod("GET"), "/1/configs", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Get a configuration. Get a single Query Suggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of QuerySuggestionsConfigurationResponse</returns>
    public async Task<QuerySuggestionsConfigurationResponse> GetConfigAsync(string indexName, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (indexName == null)
        throw new ApiException(400, "Parameter `indexName` is required when calling `GetConfig`.");
      var requestOptions = new InternalRequestOptions(options);

      requestOptions.PathParameters.Add("indexName", ClientUtils.ParameterToString(indexName));

      return await _transport.ExecuteRequestAsync<QuerySuggestionsConfigurationResponse>(new HttpMethod("GET"), "/1/configs/{indexName}", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Get configuration status. Report the status of a Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetConfigStatus200Response</returns>
    public async Task<GetConfigStatus200Response> GetConfigStatusAsync(string indexName, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (indexName == null)
        throw new ApiException(400, "Parameter `indexName` is required when calling `GetConfigStatus`.");
      var requestOptions = new InternalRequestOptions(options);

      requestOptions.PathParameters.Add("indexName", ClientUtils.ParameterToString(indexName));

      return await _transport.ExecuteRequestAsync<GetConfigStatus200Response>(new HttpMethod("GET"), "/1/configs/{indexName}/status", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Get logs. Get the logs for a single Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetLogFile200Response</returns>
    public async Task<GetLogFile200Response> GetLogFileAsync(string indexName, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (indexName == null)
        throw new ApiException(400, "Parameter `indexName` is required when calling `GetLogFile`.");
      var requestOptions = new InternalRequestOptions(options);

      requestOptions.PathParameters.Add("indexName", ClientUtils.ParameterToString(indexName));

      return await _transport.ExecuteRequestAsync<GetLogFile200Response>(new HttpMethod("GET"), "/1/logs/{indexName}", requestOptions, cancellationToken).ConfigureAwait(false);
    }

    /// <summary>
    /// Update a configuration. Update a QuerySuggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="querySuggestionsConfiguration"></param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    public async Task<BaseResponse> UpdateConfigAsync(string indexName, QuerySuggestionsConfiguration querySuggestionsConfiguration, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      if (indexName == null)
        throw new ApiException(400, "Parameter `indexName` is required when calling `UpdateConfig`.");
      if (querySuggestionsConfiguration == null)
        throw new ApiException(400, "Parameter `querySuggestionsConfiguration` is required when calling `UpdateConfig`.");
      var requestOptions = new InternalRequestOptions(options);

      requestOptions.PathParameters.Add("indexName", ClientUtils.ParameterToString(indexName));

      requestOptions.Data = querySuggestionsConfiguration;
      return await _transport.ExecuteRequestAsync<BaseResponse>(new HttpMethod("PUT"), "/1/configs/{indexName}", requestOptions, cancellationToken).ConfigureAwait(false);
    }
  }
}
