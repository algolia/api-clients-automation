//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Algolia.Search.QuerySuggestions.Client;
using Algolia.Search.QuerySuggestions.Models;

namespace Algolia.Search.QuerySuggestions.Api
{

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IQuerySuggestionsClient
  {
    /// <summary>
    /// Create a configuration.
    /// </summary>
    /// <remarks>
    /// Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="querySuggestionsConfigurationWithIndex"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    System.Threading.Tasks.Task<BaseResponse> CreateConfigAsync(QuerySuggestionsConfigurationWithIndex querySuggestionsConfigurationWithIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create a configuration.
    /// </summary>
    /// <remarks>
    /// Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="querySuggestionsConfigurationWithIndex"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BaseResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<BaseResponse>> CreateConfigWithHttpInfoAsync(QuerySuggestionsConfigurationWithIndex querySuggestionsConfigurationWithIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> DelAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> DelWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete a configuration.
    /// </summary>
    /// <remarks>
    /// Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    System.Threading.Tasks.Task<BaseResponse> DeleteConfigAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete a configuration.
    /// </summary>
    /// <remarks>
    /// Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BaseResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<BaseResponse>> DeleteConfigWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> GetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> GetWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// List configurations.
    /// </summary>
    /// <remarks>
    /// List all Query Suggestions configurations of your Algolia application.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;QuerySuggestionsConfigurationResponse&gt;</returns>
    System.Threading.Tasks.Task<List<QuerySuggestionsConfigurationResponse>> GetAllConfigsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// List configurations.
    /// </summary>
    /// <remarks>
    /// List all Query Suggestions configurations of your Algolia application.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;QuerySuggestionsConfigurationResponse&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<QuerySuggestionsConfigurationResponse>>> GetAllConfigsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a configuration.
    /// </summary>
    /// <remarks>
    /// Get a single Query Suggestions configuration.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of QuerySuggestionsConfigurationResponse</returns>
    System.Threading.Tasks.Task<QuerySuggestionsConfigurationResponse> GetConfigAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a configuration.
    /// </summary>
    /// <remarks>
    /// Get a single Query Suggestions configuration.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (QuerySuggestionsConfigurationResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<QuerySuggestionsConfigurationResponse>> GetConfigWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get configuration status.
    /// </summary>
    /// <remarks>
    /// Report the status of a Query Suggestions index.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetConfigStatus200Response</returns>
    System.Threading.Tasks.Task<GetConfigStatus200Response> GetConfigStatusAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get configuration status.
    /// </summary>
    /// <remarks>
    /// Report the status of a Query Suggestions index.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetConfigStatus200Response)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetConfigStatus200Response>> GetConfigStatusWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get logs.
    /// </summary>
    /// <remarks>
    /// Get the logs for a single Query Suggestions index.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetLogFile200Response</returns>
    System.Threading.Tasks.Task<GetLogFile200Response> GetLogFileAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get logs.
    /// </summary>
    /// <remarks>
    /// Get the logs for a single Query Suggestions index.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLogFile200Response)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetLogFile200Response>> GetLogFileWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> PostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> PostWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> PutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> PutWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Update a configuration.
    /// </summary>
    /// <remarks>
    /// Update a QuerySuggestions configuration.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="querySuggestionsConfiguration"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    System.Threading.Tasks.Task<BaseResponse> UpdateConfigAsync(string indexName, QuerySuggestionsConfiguration querySuggestionsConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update a configuration.
    /// </summary>
    /// <remarks>
    /// Update a QuerySuggestions configuration.
    /// </remarks>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="querySuggestionsConfiguration"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BaseResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<BaseResponse>> UpdateConfigWithHttpInfoAsync(string indexName, QuerySuggestionsConfiguration querySuggestionsConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
  }


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public partial class QuerySuggestionsClient : IDisposable, IQuerySuggestionsClient
  {
    private Algolia.Search.QuerySuggestions.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsClient"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <returns></returns>
    public QuerySuggestionsClient() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsClient"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    public QuerySuggestionsClient(string basePath)
    {
      this.Configuration = Algolia.Search.QuerySuggestions.Client.Configuration.MergeConfigurations(
          Algolia.Search.QuerySuggestions.Client.GlobalConfiguration.Instance,
          new Algolia.Search.QuerySuggestions.Client.Configuration { BasePath = basePath }
      );
      this.ApiClient = new Algolia.Search.QuerySuggestions.Client.ApiClient(this.Configuration.BasePath);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      this.ExceptionFactory = Algolia.Search.QuerySuggestions.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsClient"/> class using Configuration object.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    public QuerySuggestionsClient(Algolia.Search.QuerySuggestions.Client.Configuration configuration)
    {
      if (configuration == null) throw new ArgumentNullException("configuration");

      this.Configuration = Algolia.Search.QuerySuggestions.Client.Configuration.MergeConfigurations(
          Algolia.Search.QuerySuggestions.Client.GlobalConfiguration.Instance,
          configuration
      );
      this.ApiClient = new Algolia.Search.QuerySuggestions.Client.ApiClient(this.Configuration.BasePath);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      ExceptionFactory = Algolia.Search.QuerySuggestions.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsClient"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public QuerySuggestionsClient(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsClient"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public QuerySuggestionsClient(HttpClient client, string basePath, HttpClientHandler handler = null)
    {
      if (client == null) throw new ArgumentNullException("client");

      this.Configuration = Algolia.Search.QuerySuggestions.Client.Configuration.MergeConfigurations(
          Algolia.Search.QuerySuggestions.Client.GlobalConfiguration.Instance,
          new Algolia.Search.QuerySuggestions.Client.Configuration { BasePath = basePath }
      );
      this.ApiClient = new Algolia.Search.QuerySuggestions.Client.ApiClient(client, this.Configuration.BasePath, handler);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      this.ExceptionFactory = Algolia.Search.QuerySuggestions.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsClient"/> class using Configuration object.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public QuerySuggestionsClient(HttpClient client, Algolia.Search.QuerySuggestions.Client.Configuration configuration, HttpClientHandler handler = null)
    {
      if (configuration == null) throw new ArgumentNullException("configuration");
      if (client == null) throw new ArgumentNullException("client");

      this.Configuration = Algolia.Search.QuerySuggestions.Client.Configuration.MergeConfigurations(
          Algolia.Search.QuerySuggestions.Client.GlobalConfiguration.Instance,
          configuration
      );
      this.ApiClient = new Algolia.Search.QuerySuggestions.Client.ApiClient(client, this.Configuration.BasePath, handler);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      ExceptionFactory = Algolia.Search.QuerySuggestions.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="QuerySuggestionsClient"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    /// <exception cref="ArgumentNullException"></exception>
    public QuerySuggestionsClient(Algolia.Search.QuerySuggestions.Client.ISynchronousClient client, Algolia.Search.QuerySuggestions.Client.IAsynchronousClient asyncClient, Algolia.Search.QuerySuggestions.Client.IReadableConfiguration configuration)
    {
      if (client == null) throw new ArgumentNullException("client");
      if (asyncClient == null) throw new ArgumentNullException("asyncClient");
      if (configuration == null) throw new ArgumentNullException("configuration");

      this.Client = client;
      this.AsynchronousClient = asyncClient;
      this.Configuration = configuration;
      this.ExceptionFactory = Algolia.Search.QuerySuggestions.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Disposes resources if they were created by us
    /// </summary>
    public void Dispose()
    {
      this.ApiClient?.Dispose();
    }

    /// <summary>
    /// Holds the ApiClient if created
    /// </summary>
    public Algolia.Search.QuerySuggestions.Client.ApiClient ApiClient { get; set; } = null;

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public Algolia.Search.QuerySuggestions.Client.IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public Algolia.Search.QuerySuggestions.Client.ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
      return this.Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Algolia.Search.QuerySuggestions.Client.IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public Algolia.Search.QuerySuggestions.Client.ExceptionFactory ExceptionFactory
    {
      get
      {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
          throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
      }
      set { _exceptionFactory = value; }
    }

    /// <summary>
    /// Create a configuration. Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="querySuggestionsConfigurationWithIndex"></param>
    /// <returns>BaseResponse</returns>
    public BaseResponse CreateConfig(QuerySuggestionsConfigurationWithIndex querySuggestionsConfigurationWithIndex)
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> localVarResponse = CreateConfigWithHttpInfo(querySuggestionsConfigurationWithIndex);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a configuration. Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="querySuggestionsConfigurationWithIndex"></param>
    /// <returns>ApiResponse of BaseResponse</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> CreateConfigWithHttpInfo(QuerySuggestionsConfigurationWithIndex querySuggestionsConfigurationWithIndex)
    {
      // verify the required parameter 'querySuggestionsConfigurationWithIndex' is set
      if (querySuggestionsConfigurationWithIndex == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'querySuggestionsConfigurationWithIndex' when calling QuerySuggestionsClient->CreateConfig");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = querySuggestionsConfigurationWithIndex;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<BaseResponse>("/1/configs", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateConfig", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create a configuration. Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="querySuggestionsConfigurationWithIndex"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    public async System.Threading.Tasks.Task<BaseResponse> CreateConfigAsync(QuerySuggestionsConfigurationWithIndex querySuggestionsConfigurationWithIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> localVarResponse = await CreateConfigWithHttpInfoAsync(querySuggestionsConfigurationWithIndex, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create a configuration. Create a new Query Suggestions configuration.  You can have up to 100 configurations per Algolia application. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="querySuggestionsConfigurationWithIndex"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BaseResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse>> CreateConfigWithHttpInfoAsync(QuerySuggestionsConfigurationWithIndex querySuggestionsConfigurationWithIndex, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'querySuggestionsConfigurationWithIndex' is set
      if (querySuggestionsConfigurationWithIndex == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'querySuggestionsConfigurationWithIndex' when calling QuerySuggestionsClient->CreateConfig");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = querySuggestionsConfigurationWithIndex;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<BaseResponse>("/1/configs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("CreateConfig", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>Object</returns>
    public Object Del(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> localVarResponse = DelWithHttpInfo(path, parameters);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> DelWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'path' when calling QuerySuggestionsClient->Del");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Del", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> DelAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> localVarResponse = await DelWithHttpInfoAsync(path, parameters, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<Object>> DelWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'path' when calling QuerySuggestionsClient->Del");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Del", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a configuration. Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <returns>BaseResponse</returns>
    public BaseResponse DeleteConfig(string indexName)
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> localVarResponse = DeleteConfigWithHttpInfo(indexName);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a configuration. Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <returns>ApiResponse of BaseResponse</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> DeleteConfigWithHttpInfo(string indexName)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->DeleteConfig");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<BaseResponse>("/1/configs/{indexName}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteConfig", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a configuration. Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    public async System.Threading.Tasks.Task<BaseResponse> DeleteConfigAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> localVarResponse = await DeleteConfigWithHttpInfoAsync(indexName, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a configuration. Delete a Query Suggestions configuration.  Deleting only removes the configuration and stops updates to the Query Suggestions index. The Query Suggestions index itself is not deleted. 
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BaseResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse>> DeleteConfigWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->DeleteConfig");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<BaseResponse>("/1/configs/{indexName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteConfig", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>Object</returns>
    public Object Get(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> localVarResponse = GetWithHttpInfo(path, parameters);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> GetWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'path' when calling QuerySuggestionsClient->Get");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Get", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> GetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> localVarResponse = await GetWithHttpInfoAsync(path, parameters, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<Object>> GetWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'path' when calling QuerySuggestionsClient->Get");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Get", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List configurations. List all Query Suggestions configurations of your Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>List&lt;QuerySuggestionsConfigurationResponse&gt;</returns>
    public List<QuerySuggestionsConfigurationResponse> GetAllConfigs()
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<List<QuerySuggestionsConfigurationResponse>> localVarResponse = GetAllConfigsWithHttpInfo();
      return localVarResponse.Data;
    }

    /// <summary>
    /// List configurations. List all Query Suggestions configurations of your Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of List&lt;QuerySuggestionsConfigurationResponse&gt;</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<List<QuerySuggestionsConfigurationResponse>> GetAllConfigsWithHttpInfo()
    {
      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<List<QuerySuggestionsConfigurationResponse>>("/1/configs", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetAllConfigs", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List configurations. List all Query Suggestions configurations of your Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;QuerySuggestionsConfigurationResponse&gt;</returns>
    public async System.Threading.Tasks.Task<List<QuerySuggestionsConfigurationResponse>> GetAllConfigsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<List<QuerySuggestionsConfigurationResponse>> localVarResponse = await GetAllConfigsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// List configurations. List all Query Suggestions configurations of your Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;QuerySuggestionsConfigurationResponse&gt;)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<List<QuerySuggestionsConfigurationResponse>>> GetAllConfigsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<List<QuerySuggestionsConfigurationResponse>>("/1/configs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetAllConfigs", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a configuration. Get a single Query Suggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <returns>QuerySuggestionsConfigurationResponse</returns>
    public QuerySuggestionsConfigurationResponse GetConfig(string indexName)
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<QuerySuggestionsConfigurationResponse> localVarResponse = GetConfigWithHttpInfo(indexName);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a configuration. Get a single Query Suggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <returns>ApiResponse of QuerySuggestionsConfigurationResponse</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<QuerySuggestionsConfigurationResponse> GetConfigWithHttpInfo(string indexName)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->GetConfig");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<QuerySuggestionsConfigurationResponse>("/1/configs/{indexName}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a configuration. Get a single Query Suggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of QuerySuggestionsConfigurationResponse</returns>
    public async System.Threading.Tasks.Task<QuerySuggestionsConfigurationResponse> GetConfigAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<QuerySuggestionsConfigurationResponse> localVarResponse = await GetConfigWithHttpInfoAsync(indexName, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a configuration. Get a single Query Suggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (QuerySuggestionsConfigurationResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<QuerySuggestionsConfigurationResponse>> GetConfigWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->GetConfig");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<QuerySuggestionsConfigurationResponse>("/1/configs/{indexName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetConfig", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get configuration status. Report the status of a Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <returns>GetConfigStatus200Response</returns>
    public GetConfigStatus200Response GetConfigStatus(string indexName)
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<GetConfigStatus200Response> localVarResponse = GetConfigStatusWithHttpInfo(indexName);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get configuration status. Report the status of a Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <returns>ApiResponse of GetConfigStatus200Response</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<GetConfigStatus200Response> GetConfigStatusWithHttpInfo(string indexName)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->GetConfigStatus");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<GetConfigStatus200Response>("/1/configs/{indexName}/status", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetConfigStatus", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get configuration status. Report the status of a Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetConfigStatus200Response</returns>
    public async System.Threading.Tasks.Task<GetConfigStatus200Response> GetConfigStatusAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<GetConfigStatus200Response> localVarResponse = await GetConfigStatusWithHttpInfoAsync(indexName, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get configuration status. Report the status of a Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetConfigStatus200Response)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<GetConfigStatus200Response>> GetConfigStatusWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->GetConfigStatus");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<GetConfigStatus200Response>("/1/configs/{indexName}/status", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetConfigStatus", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get logs. Get the logs for a single Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <returns>GetLogFile200Response</returns>
    public GetLogFile200Response GetLogFile(string indexName)
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<GetLogFile200Response> localVarResponse = GetLogFileWithHttpInfo(indexName);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get logs. Get the logs for a single Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <returns>ApiResponse of GetLogFile200Response</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<GetLogFile200Response> GetLogFileWithHttpInfo(string indexName)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->GetLogFile");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<GetLogFile200Response>("/1/logs/{indexName}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetLogFile", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get logs. Get the logs for a single Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetLogFile200Response</returns>
    public async System.Threading.Tasks.Task<GetLogFile200Response> GetLogFileAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<GetLogFile200Response> localVarResponse = await GetLogFileWithHttpInfoAsync(indexName, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get logs. Get the logs for a single Query Suggestions index.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLogFile200Response)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<GetLogFile200Response>> GetLogFileWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->GetLogFile");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<GetLogFile200Response>("/1/logs/{indexName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetLogFile", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>Object</returns>
    public Object Post(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> localVarResponse = PostWithHttpInfo(path, parameters, body);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> PostWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'path' when calling QuerySuggestionsClient->Post");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Post", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> PostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> localVarResponse = await PostWithHttpInfoAsync(path, parameters, body, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<Object>> PostWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'path' when calling QuerySuggestionsClient->Post");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Post", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>Object</returns>
    public Object Put(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> localVarResponse = PutWithHttpInfo(path, parameters, body);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> PutWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'path' when calling QuerySuggestionsClient->Put");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Put", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> PutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<Object> localVarResponse = await PutWithHttpInfoAsync(path, parameters, body, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<Object>> PutWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'path' when calling QuerySuggestionsClient->Put");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Put", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a configuration. Update a QuerySuggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="querySuggestionsConfiguration"></param>
    /// <returns>BaseResponse</returns>
    public BaseResponse UpdateConfig(string indexName, QuerySuggestionsConfiguration querySuggestionsConfiguration)
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> localVarResponse = UpdateConfigWithHttpInfo(indexName, querySuggestionsConfiguration);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a configuration. Update a QuerySuggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="querySuggestionsConfiguration"></param>
    /// <returns>ApiResponse of BaseResponse</returns>
    public Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> UpdateConfigWithHttpInfo(string indexName, QuerySuggestionsConfiguration querySuggestionsConfiguration)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->UpdateConfig");

      // verify the required parameter 'querySuggestionsConfiguration' is set
      if (querySuggestionsConfiguration == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'querySuggestionsConfiguration' when calling QuerySuggestionsClient->UpdateConfig");

      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = querySuggestionsConfiguration;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<BaseResponse>("/1/configs/{indexName}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateConfig", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update a configuration. Update a QuerySuggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="querySuggestionsConfiguration"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BaseResponse</returns>
    public async System.Threading.Tasks.Task<BaseResponse> UpdateConfigAsync(string indexName, QuerySuggestionsConfiguration querySuggestionsConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse> localVarResponse = await UpdateConfigWithHttpInfoAsync(indexName, querySuggestionsConfiguration, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update a configuration. Update a QuerySuggestions configuration.
    /// </summary>
    /// <exception cref="Algolia.Search.QuerySuggestions.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Query Suggestions index name.</param>
    /// <param name="querySuggestionsConfiguration"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BaseResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.QuerySuggestions.Client.ApiResponse<BaseResponse>> UpdateConfigWithHttpInfoAsync(string indexName, QuerySuggestionsConfiguration querySuggestionsConfiguration, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'indexName' when calling QuerySuggestionsClient->UpdateConfig");

      // verify the required parameter 'querySuggestionsConfiguration' is set
      if (querySuggestionsConfiguration == null)
        throw new Algolia.Search.QuerySuggestions.Client.ApiException(400, "Missing required parameter 'querySuggestionsConfiguration' when calling QuerySuggestionsClient->UpdateConfig");


      Algolia.Search.QuerySuggestions.Client.RequestOptions localVarRequestOptions = new Algolia.Search.QuerySuggestions.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.QuerySuggestions.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.QuerySuggestions.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = querySuggestionsConfiguration;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<BaseResponse>("/1/configs/{indexName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateConfig", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

  }
}
