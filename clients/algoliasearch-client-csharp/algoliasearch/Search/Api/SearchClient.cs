//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Net.Mime;
using Algolia.Search.Search.Client;
using Algolia.Search.Search.Models;

namespace Algolia.Search.Search.Api
{

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface ISearchClient
  {
    /// <summary>
    /// Add API key.
    /// </summary>
    /// <remarks>
    /// Add a new API key with specific permissions and restrictions. The request must be authenticated with the admin API key. The response returns an API key string. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="apiKey"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AddApiKeyResponse</returns>
    System.Threading.Tasks.Task<AddApiKeyResponse> AddApiKeyAsync(ApiKey apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Add API key.
    /// </summary>
    /// <remarks>
    /// Add a new API key with specific permissions and restrictions. The request must be authenticated with the admin API key. The response returns an API key string. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="apiKey"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AddApiKeyResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<AddApiKeyResponse>> AddApiKeyWithHttpInfoAsync(ApiKey apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Add or update a record (using objectID).
    /// </summary>
    /// <remarks>
    /// If you use an existing &#x60;objectID&#x60;, the existing record will be replaced with the new one.  To update only some attributes of an existing record, use the [&#x60;partial&#x60; operation](#tag/Records/operation/partialUpdateObject) instead.  To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="body">Algolia record.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtWithObjectIdResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtWithObjectIdResponse> AddOrUpdateObjectAsync(string indexName, string objectID, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Add or update a record (using objectID).
    /// </summary>
    /// <remarks>
    /// If you use an existing &#x60;objectID&#x60;, the existing record will be replaced with the new one.  To update only some attributes of an existing record, use the [&#x60;partial&#x60; operation](#tag/Records/operation/partialUpdateObject) instead.  To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="body">Algolia record.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtWithObjectIdResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtWithObjectIdResponse>> AddOrUpdateObjectWithHttpInfoAsync(string indexName, string objectID, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Add a source.
    /// </summary>
    /// <remarks>
    /// Add a source to the list of allowed sources.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Source to add.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreatedAtResponse</returns>
    System.Threading.Tasks.Task<CreatedAtResponse> AppendSourceAsync(Source source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Add a source.
    /// </summary>
    /// <remarks>
    /// Add a source to the list of allowed sources.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Source to add.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<CreatedAtResponse>> AppendSourceWithHttpInfoAsync(Source source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Assign or move a user ID.
    /// </summary>
    /// <remarks>
    /// Assign or move a user ID to a cluster. The time it takes to move a user is proportional to the amount of data linked to the user ID. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="assignUserIdParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreatedAtResponse</returns>
    System.Threading.Tasks.Task<CreatedAtResponse> AssignUserIdAsync(string xAlgoliaUserID, AssignUserIdParams assignUserIdParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Assign or move a user ID.
    /// </summary>
    /// <remarks>
    /// Assign or move a user ID to a cluster. The time it takes to move a user is proportional to the amount of data linked to the user ID. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="assignUserIdParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<CreatedAtResponse>> AssignUserIdWithHttpInfoAsync(string xAlgoliaUserID, AssignUserIdParams assignUserIdParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Batch write operations on one index.
    /// </summary>
    /// <remarks>
    /// To reduce the time spent on network round trips, you can perform several write actions in a single API call. Actions are applied in the order they are specified. The supported &#x60;action&#x60;s are equivalent to the individual operations of the same name. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="batchWriteParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BatchResponse</returns>
    System.Threading.Tasks.Task<BatchResponse> BatchAsync(string indexName, BatchWriteParams batchWriteParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Batch write operations on one index.
    /// </summary>
    /// <remarks>
    /// To reduce the time spent on network round trips, you can perform several write actions in a single API call. Actions are applied in the order they are specified. The supported &#x60;action&#x60;s are equivalent to the individual operations of the same name. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="batchWriteParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BatchResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<BatchResponse>> BatchWithHttpInfoAsync(string indexName, BatchWriteParams batchWriteParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Batch assign userIDs.
    /// </summary>
    /// <remarks>
    /// Assign multiple user IDs to a cluster. **You can&#39;t _move_ users with this operation.**. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="batchAssignUserIdsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreatedAtResponse</returns>
    System.Threading.Tasks.Task<CreatedAtResponse> BatchAssignUserIdsAsync(string xAlgoliaUserID, BatchAssignUserIdsParams batchAssignUserIdsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Batch assign userIDs.
    /// </summary>
    /// <remarks>
    /// Assign multiple user IDs to a cluster. **You can&#39;t _move_ users with this operation.**. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="batchAssignUserIdsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<CreatedAtResponse>> BatchAssignUserIdsWithHttpInfoAsync(string xAlgoliaUserID, BatchAssignUserIdsParams batchAssignUserIdsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Batch dictionary entries.
    /// </summary>
    /// <remarks>
    /// Add or remove a batch of dictionary entries.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="batchDictionaryEntriesParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> BatchDictionaryEntriesAsync(DictionaryType dictionaryName, BatchDictionaryEntriesParams batchDictionaryEntriesParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Batch dictionary entries.
    /// </summary>
    /// <remarks>
    /// Add or remove a batch of dictionary entries.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="batchDictionaryEntriesParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> BatchDictionaryEntriesWithHttpInfoAsync(DictionaryType dictionaryName, BatchDictionaryEntriesParams batchDictionaryEntriesParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get all records from an index.
    /// </summary>
    /// <remarks>
    /// Retrieve up to 1,000 records per call. Supports full-text search and filters. For better performance, it doesn&#39;t support: - The &#x60;distinct&#x60; query parameter - Sorting by typos, proximity, words, or geographical distance. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="browseParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BrowseResponse</returns>
    System.Threading.Tasks.Task<BrowseResponse> BrowseAsync(string indexName, BrowseParams browseParams = default(BrowseParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all records from an index.
    /// </summary>
    /// <remarks>
    /// Retrieve up to 1,000 records per call. Supports full-text search and filters. For better performance, it doesn&#39;t support: - The &#x60;distinct&#x60; query parameter - Sorting by typos, proximity, words, or geographical distance. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="browseParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BrowseResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<BrowseResponse>> BrowseWithHttpInfoAsync(string indexName, BrowseParams browseParams = default(BrowseParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete all synonyms.
    /// </summary>
    /// <remarks>
    /// Delete all synonyms in the index.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> ClearAllSynonymsAsync(string indexName, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete all synonyms.
    /// </summary>
    /// <remarks>
    /// Delete all synonyms in the index.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> ClearAllSynonymsWithHttpInfoAsync(string indexName, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete all records from an index.
    /// </summary>
    /// <remarks>
    /// Delete the records but leave settings and index-specific API keys untouched.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> ClearObjectsAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete all records from an index.
    /// </summary>
    /// <remarks>
    /// Delete the records but leave settings and index-specific API keys untouched.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> ClearObjectsWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete all rules.
    /// </summary>
    /// <remarks>
    /// Delete all rules in the index.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> ClearRulesAsync(string indexName, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete all rules.
    /// </summary>
    /// <remarks>
    /// Delete all rules in the index.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> ClearRulesWithHttpInfoAsync(string indexName, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> DelAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> DelWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete API key.
    /// </summary>
    /// <remarks>
    /// Delete an existing API key. The request must be authenticated with the admin API key. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteApiKeyResponse</returns>
    System.Threading.Tasks.Task<DeleteApiKeyResponse> DeleteApiKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete API key.
    /// </summary>
    /// <remarks>
    /// Delete an existing API key. The request must be authenticated with the admin API key. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteApiKeyResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeleteApiKeyResponse>> DeleteApiKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete all records matching a query.
    /// </summary>
    /// <remarks>
    /// This operation doesn&#39;t support all the query options, only its filters (numeric, facet, or tag) and geo queries. It doesn&#39;t accept empty filters or queries. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="deleteByParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeletedAtResponse</returns>
    System.Threading.Tasks.Task<DeletedAtResponse> DeleteByAsync(string indexName, DeleteByParams deleteByParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete all records matching a query.
    /// </summary>
    /// <remarks>
    /// This operation doesn&#39;t support all the query options, only its filters (numeric, facet, or tag) and geo queries. It doesn&#39;t accept empty filters or queries. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="deleteByParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeletedAtResponse>> DeleteByWithHttpInfoAsync(string indexName, DeleteByParams deleteByParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete index.
    /// </summary>
    /// <remarks>
    /// Delete an existing index.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeletedAtResponse</returns>
    System.Threading.Tasks.Task<DeletedAtResponse> DeleteIndexAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete index.
    /// </summary>
    /// <remarks>
    /// Delete an existing index.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeletedAtResponse>> DeleteIndexWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete a record.
    /// </summary>
    /// <remarks>
    /// To delete a set of records matching a query, use the [&#x60;deleteByQuery&#x60; operation](#tag/Records/operation/deleteBy) instead.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeletedAtResponse</returns>
    System.Threading.Tasks.Task<DeletedAtResponse> DeleteObjectAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete a record.
    /// </summary>
    /// <remarks>
    /// To delete a set of records matching a query, use the [&#x60;deleteByQuery&#x60; operation](#tag/Records/operation/deleteBy) instead.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeletedAtResponse>> DeleteObjectWithHttpInfoAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete a rule.
    /// </summary>
    /// <remarks>
    /// Delete a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> DeleteRuleAsync(string indexName, string objectID, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete a rule.
    /// </summary>
    /// <remarks>
    /// Delete a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> DeleteRuleWithHttpInfoAsync(string indexName, string objectID, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Remove a source.
    /// </summary>
    /// <remarks>
    /// Remove a source from the list of allowed sources.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">IP address range of the source.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteSourceResponse</returns>
    System.Threading.Tasks.Task<DeleteSourceResponse> DeleteSourceAsync(string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Remove a source.
    /// </summary>
    /// <remarks>
    /// Remove a source from the list of allowed sources.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">IP address range of the source.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteSourceResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeleteSourceResponse>> DeleteSourceWithHttpInfoAsync(string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Delete a synonym.
    /// </summary>
    /// <remarks>
    /// Delete a synonym by its &#x60;objectID&#x60;. To find the object IDs of your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeletedAtResponse</returns>
    System.Threading.Tasks.Task<DeletedAtResponse> DeleteSynonymAsync(string indexName, string objectID, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Delete a synonym.
    /// </summary>
    /// <remarks>
    /// Delete a synonym by its &#x60;objectID&#x60;. To find the object IDs of your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<DeletedAtResponse>> DeleteSynonymWithHttpInfoAsync(string indexName, string objectID, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> GetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> GetWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get API key permissions.
    /// </summary>
    /// <remarks>
    /// Get the permissions and restrictions of a specific API key. When authenticating with the admin API key, you can request information for any of your application&#39;s keys. When authenticating with other API keys, you can only retrieve information for that key. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetApiKeyResponse</returns>
    System.Threading.Tasks.Task<GetApiKeyResponse> GetApiKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get API key permissions.
    /// </summary>
    /// <remarks>
    /// Get the permissions and restrictions of a specific API key. When authenticating with the admin API key, you can request information for any of your application&#39;s keys. When authenticating with other API keys, you can only retrieve information for that key. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetApiKeyResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetApiKeyResponse>> GetApiKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// List available languages.
    /// </summary>
    /// <remarks>
    /// Lists Algolia&#39;s [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and any customizations applied to each language&#39;s [stop word](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plural](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), and [segmentation (compound)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) features.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Dictionary&lt;string, Languages&gt;</returns>
    System.Threading.Tasks.Task<Dictionary<string, Languages>> GetDictionaryLanguagesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// List available languages.
    /// </summary>
    /// <remarks>
    /// Lists Algolia&#39;s [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and any customizations applied to each language&#39;s [stop word](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plural](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), and [segmentation (compound)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) features.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, Languages&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<Dictionary<string, Languages>>> GetDictionaryLanguagesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get stop word settings.
    /// </summary>
    /// <remarks>
    /// Get the languages for which [stop words are turned off](#tag/Dictionaries/operation/setDictionarySettings).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetDictionarySettingsResponse</returns>
    System.Threading.Tasks.Task<GetDictionarySettingsResponse> GetDictionarySettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get stop word settings.
    /// </summary>
    /// <remarks>
    /// Get the languages for which [stop words are turned off](#tag/Dictionaries/operation/setDictionarySettings).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetDictionarySettingsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetDictionarySettingsResponse>> GetDictionarySettingsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Return the latest log entries.
    /// </summary>
    /// <remarks>
    /// The request must be authenticated by an API key with the [&#x60;logs&#x60; ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl). Logs are held for the last seven days. There&#39;s also a logging limit of 1,000 API calls per server. This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn&#39;t appear in the logs itself. &gt; **Note**: To fetch the logs for a Distributed Search Network (DSN) cluster, target the [DSN&#39;s endpoint](https://www.algolia.com/doc/guides/scaling/distributed-search-network-dsn/#accessing-dsn-servers). 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="offset">First log entry to retrieve. Sorted by decreasing date with 0 being the most recent. (optional, default to 0)</param>
    /// <param name="length">Maximum number of entries to retrieve. (optional, default to 10)</param>
    /// <param name="indexName">Index for which log entries should be retrieved. When omitted, log entries are retrieved for all indices. (optional)</param>
    /// <param name="type">Type of log entries to retrieve. When omitted, all log entries are retrieved. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetLogsResponse</returns>
    System.Threading.Tasks.Task<GetLogsResponse> GetLogsAsync(int? offset = default(int?), int? length = default(int?), string indexName = default(string), LogType type = default(LogType), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Return the latest log entries.
    /// </summary>
    /// <remarks>
    /// The request must be authenticated by an API key with the [&#x60;logs&#x60; ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl). Logs are held for the last seven days. There&#39;s also a logging limit of 1,000 API calls per server. This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn&#39;t appear in the logs itself. &gt; **Note**: To fetch the logs for a Distributed Search Network (DSN) cluster, target the [DSN&#39;s endpoint](https://www.algolia.com/doc/guides/scaling/distributed-search-network-dsn/#accessing-dsn-servers). 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="offset">First log entry to retrieve. Sorted by decreasing date with 0 being the most recent. (optional, default to 0)</param>
    /// <param name="length">Maximum number of entries to retrieve. (optional, default to 10)</param>
    /// <param name="indexName">Index for which log entries should be retrieved. When omitted, log entries are retrieved for all indices. (optional)</param>
    /// <param name="type">Type of log entries to retrieve. When omitted, all log entries are retrieved. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLogsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetLogsResponse>> GetLogsWithHttpInfoAsync(int? offset = default(int?), int? length = default(int?), string indexName = default(string), LogType type = default(LogType), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a record.
    /// </summary>
    /// <remarks>
    /// To get more than one record, use the [&#x60;objects&#x60; operation](#tag/Records/operation/getObjects).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToRetrieve">Attributes to include with the records in the response. This is useful to reduce the size of the API response. By default, all retrievable attributes are returned. &#x60;objectID&#x60; is always retrieved, even when not specified. [&#x60;unretrievableAttributes&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/) won&#39;t be retrieved unless the request is authenticated with the admin API key.  (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
    System.Threading.Tasks.Task<Dictionary<string, string>> GetObjectAsync(string indexName, string objectID, List<string> attributesToRetrieve = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a record.
    /// </summary>
    /// <remarks>
    /// To get more than one record, use the [&#x60;objects&#x60; operation](#tag/Records/operation/getObjects).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToRetrieve">Attributes to include with the records in the response. This is useful to reduce the size of the API response. By default, all retrievable attributes are returned. &#x60;objectID&#x60; is always retrieved, even when not specified. [&#x60;unretrievableAttributes&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/) won&#39;t be retrieved unless the request is authenticated with the admin API key.  (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<Dictionary<string, string>>> GetObjectWithHttpInfoAsync(string indexName, string objectID, List<string> attributesToRetrieve = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get multiple records.
    /// </summary>
    /// <remarks>
    /// Retrieve one or more records, potentially from different indices, in a single API operation. Results will be received in the same order as the requests. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getObjectsParams">Request object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetObjectsResponse</returns>
    System.Threading.Tasks.Task<GetObjectsResponse> GetObjectsAsync(GetObjectsParams getObjectsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get multiple records.
    /// </summary>
    /// <remarks>
    /// Retrieve one or more records, potentially from different indices, in a single API operation. Results will be received in the same order as the requests. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getObjectsParams">Request object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetObjectsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetObjectsResponse>> GetObjectsWithHttpInfoAsync(GetObjectsParams getObjectsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a rule.
    /// </summary>
    /// <remarks>
    /// Get a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Rule</returns>
    System.Threading.Tasks.Task<Rule> GetRuleAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a rule.
    /// </summary>
    /// <remarks>
    /// Get a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Rule)</returns>
    System.Threading.Tasks.Task<ApiResponse<Rule>> GetRuleWithHttpInfoAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get index settings.
    /// </summary>
    /// <remarks>
    /// Return an object containing an index&#39;s [configuration settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of IndexSettings</returns>
    System.Threading.Tasks.Task<IndexSettings> GetSettingsAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get index settings.
    /// </summary>
    /// <remarks>
    /// Return an object containing an index&#39;s [configuration settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (IndexSettings)</returns>
    System.Threading.Tasks.Task<ApiResponse<IndexSettings>> GetSettingsWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get all allowed IP addresses.
    /// </summary>
    /// <remarks>
    /// Get all allowed sources (IP addresses).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Source&gt;</returns>
    System.Threading.Tasks.Task<List<Source>> GetSourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get all allowed IP addresses.
    /// </summary>
    /// <remarks>
    /// Get all allowed sources (IP addresses).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Source&gt;)</returns>
    System.Threading.Tasks.Task<ApiResponse<List<Source>>> GetSourcesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get a synonym object.
    /// </summary>
    /// <remarks>
    /// Get a syonym by its &#x60;objectID&#x60;. To find the object IDs for your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SynonymHit</returns>
    System.Threading.Tasks.Task<SynonymHit> GetSynonymAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get a synonym object.
    /// </summary>
    /// <remarks>
    /// Get a syonym by its &#x60;objectID&#x60;. To find the object IDs for your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SynonymHit)</returns>
    System.Threading.Tasks.Task<ApiResponse<SynonymHit>> GetSynonymWithHttpInfoAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Check a task's status.
    /// </summary>
    /// <remarks>
    /// Some operations, such as copying an index, will respond with a &#x60;taskID&#x60; value. Use this value here to check the status of that task.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="taskID">Unique task identifier.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTaskResponse</returns>
    System.Threading.Tasks.Task<GetTaskResponse> GetTaskAsync(string indexName, long taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Check a task's status.
    /// </summary>
    /// <remarks>
    /// Some operations, such as copying an index, will respond with a &#x60;taskID&#x60; value. Use this value here to check the status of that task.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="taskID">Unique task identifier.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetTaskResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetTaskResponse>> GetTaskWithHttpInfoAsync(string indexName, long taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get top userID.
    /// </summary>
    /// <remarks>
    /// Get the IDs of the 10 users with the highest number of records per cluster. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopUserIdsResponse</returns>
    System.Threading.Tasks.Task<GetTopUserIdsResponse> GetTopUserIdsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get top userID.
    /// </summary>
    /// <remarks>
    /// Get the IDs of the 10 users with the highest number of records per cluster. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetTopUserIdsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<GetTopUserIdsResponse>> GetTopUserIdsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get userID.
    /// </summary>
    /// <remarks>
    /// Returns the userID data stored in the mapping. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UserId</returns>
    System.Threading.Tasks.Task<UserId> GetUserIdAsync(string userID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get userID.
    /// </summary>
    /// <remarks>
    /// Returns the userID data stored in the mapping. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UserId)</returns>
    System.Threading.Tasks.Task<ApiResponse<UserId>> GetUserIdWithHttpInfoAsync(string userID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Get migration and user mapping status.
    /// </summary>
    /// <remarks>
    /// To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getClusters">Indicates whether to include the cluster&#39;s pending mapping state in the response. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of HasPendingMappingsResponse</returns>
    System.Threading.Tasks.Task<HasPendingMappingsResponse> HasPendingMappingsAsync(bool? getClusters = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Get migration and user mapping status.
    /// </summary>
    /// <remarks>
    /// To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getClusters">Indicates whether to include the cluster&#39;s pending mapping state in the response. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (HasPendingMappingsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<HasPendingMappingsResponse>> HasPendingMappingsWithHttpInfoAsync(bool? getClusters = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// List API keys.
    /// </summary>
    /// <remarks>
    /// List all API keys associated with your Algolia application, including their permissions and restrictions.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListApiKeysResponse</returns>
    System.Threading.Tasks.Task<ListApiKeysResponse> ListApiKeysAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// List API keys.
    /// </summary>
    /// <remarks>
    /// List all API keys associated with your Algolia application, including their permissions and restrictions.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListApiKeysResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListApiKeysResponse>> ListApiKeysWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// List clusters.
    /// </summary>
    /// <remarks>
    /// List the available clusters in a multi-cluster setup.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListClustersResponse</returns>
    System.Threading.Tasks.Task<ListClustersResponse> ListClustersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// List clusters.
    /// </summary>
    /// <remarks>
    /// List the available clusters in a multi-cluster setup.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListClustersResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListClustersResponse>> ListClustersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// List indices.
    /// </summary>
    /// <remarks>
    /// List indices in an Algolia application.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListIndicesResponse</returns>
    System.Threading.Tasks.Task<ListIndicesResponse> ListIndicesAsync(int? page = default(int?), int? hitsPerPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// List indices.
    /// </summary>
    /// <remarks>
    /// List indices in an Algolia application.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListIndicesResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListIndicesResponse>> ListIndicesWithHttpInfoAsync(int? page = default(int?), int? hitsPerPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// List userIDs.
    /// </summary>
    /// <remarks>
    /// List the userIDs assigned to a multi-cluster application. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListUserIdsResponse</returns>
    System.Threading.Tasks.Task<ListUserIdsResponse> ListUserIdsAsync(int? page = default(int?), int? hitsPerPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// List userIDs.
    /// </summary>
    /// <remarks>
    /// List the userIDs assigned to a multi-cluster application. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListUserIdsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ListUserIdsResponse>> ListUserIdsWithHttpInfoAsync(int? page = default(int?), int? hitsPerPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Batch write operations on multiple indices.
    /// </summary>
    /// <remarks>
    /// To reduce the time spent on network round trips, you can perform several write actions in a single request. It&#39;s a multi-index version of the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). Actions are applied in the order they are specified. The supported actions are equivalent to the individual operations of the same name. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="batchParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of MultipleBatchResponse</returns>
    System.Threading.Tasks.Task<MultipleBatchResponse> MultipleBatchAsync(BatchParams batchParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Batch write operations on multiple indices.
    /// </summary>
    /// <remarks>
    /// To reduce the time spent on network round trips, you can perform several write actions in a single request. It&#39;s a multi-index version of the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). Actions are applied in the order they are specified. The supported actions are equivalent to the individual operations of the same name. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="batchParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (MultipleBatchResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<MultipleBatchResponse>> MultipleBatchWithHttpInfoAsync(BatchParams batchParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Copy, move, or rename an index.
    /// </summary>
    /// <remarks>
    /// This &#x60;operation&#x60;, _copy_ or _move_, will copy or move a source index&#39;s (&#x60;IndexName&#x60;) records, settings, synonyms, and rules to a &#x60;destination&#x60; index. If the destination index exists, it will be replaced, except for index-specific API keys and analytics data. If the destination index doesn&#39;t exist, it will be created.  The choice between moving or copying an index depends on your needs. Choose:  - **Move** to rename an index. - **Copy** to create a new index with the same records and configuration as an existing one.  &gt; **Note**: When considering copying or moving, be aware of the [rate limitations](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits) on these processes and the [impact on your analytics data](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/concepts/indices-analytics/).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="operationIndexParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> OperationIndexAsync(string indexName, OperationIndexParams operationIndexParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Copy, move, or rename an index.
    /// </summary>
    /// <remarks>
    /// This &#x60;operation&#x60;, _copy_ or _move_, will copy or move a source index&#39;s (&#x60;IndexName&#x60;) records, settings, synonyms, and rules to a &#x60;destination&#x60; index. If the destination index exists, it will be replaced, except for index-specific API keys and analytics data. If the destination index doesn&#39;t exist, it will be created.  The choice between moving or copying an index depends on your needs. Choose:  - **Move** to rename an index. - **Copy** to create a new index with the same records and configuration as an existing one.  &gt; **Note**: When considering copying or moving, be aware of the [rate limitations](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits) on these processes and the [impact on your analytics data](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/concepts/indices-analytics/).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="operationIndexParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> OperationIndexWithHttpInfoAsync(string indexName, OperationIndexParams operationIndexParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Update record attributes.
    /// </summary>
    /// <remarks>
    /// Add new attributes or update current ones in an existing record. You can use any first-level attribute but not nested attributes. If you specify a [nested attribute](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/creating-and-using-nested-attributes/), the engine treats it as a replacement for its first-level ancestor. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToUpdate">Object with attributes to update.</param>
    /// <param name="createIfNotExists">Indicates whether to create a new record if it doesn&#39;t exist yet.  (optional, default to true)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtWithObjectIdResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtWithObjectIdResponse> PartialUpdateObjectAsync(string indexName, string objectID, Dictionary<string, AttributeToUpdate> attributesToUpdate, bool? createIfNotExists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update record attributes.
    /// </summary>
    /// <remarks>
    /// Add new attributes or update current ones in an existing record. You can use any first-level attribute but not nested attributes. If you specify a [nested attribute](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/creating-and-using-nested-attributes/), the engine treats it as a replacement for its first-level ancestor. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToUpdate">Object with attributes to update.</param>
    /// <param name="createIfNotExists">Indicates whether to create a new record if it doesn&#39;t exist yet.  (optional, default to true)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtWithObjectIdResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtWithObjectIdResponse>> PartialUpdateObjectWithHttpInfoAsync(string indexName, string objectID, Dictionary<string, AttributeToUpdate> attributesToUpdate, bool? createIfNotExists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> PostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> PostWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    System.Threading.Tasks.Task<Object> PutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    System.Threading.Tasks.Task<ApiResponse<Object>> PutWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Remove userID.
    /// </summary>
    /// <remarks>
    /// Remove a userID and its associated data from the multi-clusters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RemoveUserIdResponse</returns>
    System.Threading.Tasks.Task<RemoveUserIdResponse> RemoveUserIdAsync(string userID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Remove userID.
    /// </summary>
    /// <remarks>
    /// Remove a userID and its associated data from the multi-clusters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RemoveUserIdResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<RemoveUserIdResponse>> RemoveUserIdWithHttpInfoAsync(string userID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Replace all sources.
    /// </summary>
    /// <remarks>
    /// Replace all allowed sources.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Allowed sources.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ReplaceSourceResponse</returns>
    System.Threading.Tasks.Task<ReplaceSourceResponse> ReplaceSourcesAsync(List<Source> source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Replace all sources.
    /// </summary>
    /// <remarks>
    /// Replace all allowed sources.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Allowed sources.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ReplaceSourceResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<ReplaceSourceResponse>> ReplaceSourcesWithHttpInfoAsync(List<Source> source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Restore API key.
    /// </summary>
    /// <remarks>
    /// Restore a deleted API key, along with its associated permissions. The request must be authenticated with the admin API key. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AddApiKeyResponse</returns>
    System.Threading.Tasks.Task<AddApiKeyResponse> RestoreApiKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Restore API key.
    /// </summary>
    /// <remarks>
    /// Restore a deleted API key, along with its associated permissions. The request must be authenticated with the admin API key. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AddApiKeyResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<AddApiKeyResponse>> RestoreApiKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Add or update a record.
    /// </summary>
    /// <remarks>
    /// Add a record (object) to an index or replace it. If the record doesn&#39;t contain an &#x60;objectID&#x60;, Algolia automatically adds it. If you use an existing &#x60;objectID&#x60;, the existing record is replaced with the new one. To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="body">The Algolia record.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SaveObjectResponse</returns>
    System.Threading.Tasks.Task<SaveObjectResponse> SaveObjectAsync(string indexName, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Add or update a record.
    /// </summary>
    /// <remarks>
    /// Add a record (object) to an index or replace it. If the record doesn&#39;t contain an &#x60;objectID&#x60;, Algolia automatically adds it. If you use an existing &#x60;objectID&#x60;, the existing record is replaced with the new one. To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="body">The Algolia record.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SaveObjectResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SaveObjectResponse>> SaveObjectWithHttpInfoAsync(string indexName, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Create or update a rule.
    /// </summary>
    /// <remarks>
    /// To create or update more than one rule, use the [&#x60;batch&#x60; operation](#tag/Rules/operation/saveRules).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="rule"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedRuleResponse</returns>
    System.Threading.Tasks.Task<UpdatedRuleResponse> SaveRuleAsync(string indexName, string objectID, Rule rule, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Create or update a rule.
    /// </summary>
    /// <remarks>
    /// To create or update more than one rule, use the [&#x60;batch&#x60; operation](#tag/Rules/operation/saveRules).
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="rule"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedRuleResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedRuleResponse>> SaveRuleWithHttpInfoAsync(string indexName, string objectID, Rule rule, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Save a batch of rules.
    /// </summary>
    /// <remarks>
    /// Create or update multiple rules.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="rules"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="clearExistingRules">Indicates whether existing rules should be deleted before adding this batch. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> SaveRulesAsync(string indexName, List<Rule> rules, bool? forwardToReplicas = default(bool?), bool? clearExistingRules = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Save a batch of rules.
    /// </summary>
    /// <remarks>
    /// Create or update multiple rules.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="rules"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="clearExistingRules">Indicates whether existing rules should be deleted before adding this batch. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> SaveRulesWithHttpInfoAsync(string indexName, List<Rule> rules, bool? forwardToReplicas = default(bool?), bool? clearExistingRules = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Save a synonym.
    /// </summary>
    /// <remarks>
    /// Add a [synonym](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms) to an index or replace it. If the synonym &#x60;objectID&#x60; doesn&#39;t exist, Algolia adds a new one. If you use an existing synonym &#x60;objectID&#x60;, the existing synonym is replaced with the new one. To add multiple synonyms in a single API request, use the [&#x60;batch&#x60; operation](#tag/Synonyms/operation/saveSynonyms). 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SaveSynonymResponse</returns>
    System.Threading.Tasks.Task<SaveSynonymResponse> SaveSynonymAsync(string indexName, string objectID, SynonymHit synonymHit, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Save a synonym.
    /// </summary>
    /// <remarks>
    /// Add a [synonym](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms) to an index or replace it. If the synonym &#x60;objectID&#x60; doesn&#39;t exist, Algolia adds a new one. If you use an existing synonym &#x60;objectID&#x60;, the existing synonym is replaced with the new one. To add multiple synonyms in a single API request, use the [&#x60;batch&#x60; operation](#tag/Synonyms/operation/saveSynonyms). 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SaveSynonymResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SaveSynonymResponse>> SaveSynonymWithHttpInfoAsync(string indexName, string objectID, SynonymHit synonymHit, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Save a batch of synonyms.
    /// </summary>
    /// <remarks>
    /// Create or update multiple synonyms.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="replaceExistingSynonyms">Indicates whether to replace all synonyms in the index with the ones sent with this request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> SaveSynonymsAsync(string indexName, List<SynonymHit> synonymHit, bool? forwardToReplicas = default(bool?), bool? replaceExistingSynonyms = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Save a batch of synonyms.
    /// </summary>
    /// <remarks>
    /// Create or update multiple synonyms.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="replaceExistingSynonyms">Indicates whether to replace all synonyms in the index with the ones sent with this request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> SaveSynonymsWithHttpInfoAsync(string indexName, List<SynonymHit> synonymHit, bool? forwardToReplicas = default(bool?), bool? replaceExistingSynonyms = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search multiple indices.
    /// </summary>
    /// <remarks>
    /// Send multiple search queries to one or more indices.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchMethodParams">Query requests and strategies. Results will be received in the same order as the queries.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchResponses</returns>
    System.Threading.Tasks.Task<SearchResponses> SearchAsync(SearchMethodParams searchMethodParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search multiple indices.
    /// </summary>
    /// <remarks>
    /// Send multiple search queries to one or more indices.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchMethodParams">Query requests and strategies. Results will be received in the same order as the queries.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchResponses)</returns>
    System.Threading.Tasks.Task<ApiResponse<SearchResponses>> SearchWithHttpInfoAsync(SearchMethodParams searchMethodParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search dictionary entries.
    /// </summary>
    /// <remarks>
    /// Search for standard and [custom](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/) entries in the [stop words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), or [segmentation (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) dictionaries.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="searchDictionaryEntriesParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> SearchDictionaryEntriesAsync(DictionaryType dictionaryName, SearchDictionaryEntriesParams searchDictionaryEntriesParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search dictionary entries.
    /// </summary>
    /// <remarks>
    /// Search for standard and [custom](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/) entries in the [stop words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), or [segmentation (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) dictionaries.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="searchDictionaryEntriesParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> SearchDictionaryEntriesWithHttpInfoAsync(DictionaryType dictionaryName, SearchDictionaryEntriesParams searchDictionaryEntriesParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search for facet values.
    /// </summary>
    /// <remarks>
    /// [Search for a facet&#39;s values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values), optionally restricting the returned values to those contained in records matching other search criteria. &gt; **Note**: Pagination isn&#39;t supported (&#x60;page&#x60; and &#x60;hitsPerPage&#x60; are ignored). By default, the engine returns a maximum of 10 values but you can adjust this with &#x60;maxFacetHits&#x60;. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="facetName">Facet name.</param>
    /// <param name="searchForFacetValuesRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchForFacetValuesResponse</returns>
    System.Threading.Tasks.Task<SearchForFacetValuesResponse> SearchForFacetValuesAsync(string indexName, string facetName, SearchForFacetValuesRequest searchForFacetValuesRequest = default(SearchForFacetValuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search for facet values.
    /// </summary>
    /// <remarks>
    /// [Search for a facet&#39;s values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values), optionally restricting the returned values to those contained in records matching other search criteria. &gt; **Note**: Pagination isn&#39;t supported (&#x60;page&#x60; and &#x60;hitsPerPage&#x60; are ignored). By default, the engine returns a maximum of 10 values but you can adjust this with &#x60;maxFacetHits&#x60;. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="facetName">Facet name.</param>
    /// <param name="searchForFacetValuesRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchForFacetValuesResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SearchForFacetValuesResponse>> SearchForFacetValuesWithHttpInfoAsync(string indexName, string facetName, SearchForFacetValuesRequest searchForFacetValuesRequest = default(SearchForFacetValuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search for rules.
    /// </summary>
    /// <remarks>
    /// Search for rules in your index. You can control the search with parameters. To list all rules, send an empty request body.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchRulesParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchRulesResponse</returns>
    System.Threading.Tasks.Task<SearchRulesResponse> SearchRulesAsync(string indexName, SearchRulesParams searchRulesParams = default(SearchRulesParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search for rules.
    /// </summary>
    /// <remarks>
    /// Search for rules in your index. You can control the search with parameters. To list all rules, send an empty request body.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchRulesParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchRulesResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SearchRulesResponse>> SearchRulesWithHttpInfoAsync(string indexName, SearchRulesParams searchRulesParams = default(SearchRulesParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search an index.
    /// </summary>
    /// <remarks>
    /// Return records that match the query.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchResponse</returns>
    System.Threading.Tasks.Task<SearchResponse> SearchSingleIndexAsync(string indexName, SearchParams searchParams = default(SearchParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search an index.
    /// </summary>
    /// <remarks>
    /// Return records that match the query.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SearchResponse>> SearchSingleIndexWithHttpInfoAsync(string indexName, SearchParams searchParams = default(SearchParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search for synonyms.
    /// </summary>
    /// <remarks>
    /// Search for synonyms in your index. You can control and filter the search with parameters. To get all synonyms, send an empty request body.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="type">Search for specific [types of synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms). (optional)</param>
    /// <param name="page">Returns the requested page number (the first page is 0). Page size is set by &#x60;hitsPerPage&#x60;. When null, there&#39;s no pagination.  (optional, default to 0)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="searchSynonymsParams">Body of the &#x60;searchSynonyms&#x60; operation. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchSynonymsResponse</returns>
    System.Threading.Tasks.Task<SearchSynonymsResponse> SearchSynonymsAsync(string indexName, SynonymType type = default(SynonymType), int? page = default(int?), int? hitsPerPage = default(int?), SearchSynonymsParams searchSynonymsParams = default(SearchSynonymsParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search for synonyms.
    /// </summary>
    /// <remarks>
    /// Search for synonyms in your index. You can control and filter the search with parameters. To get all synonyms, send an empty request body.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="type">Search for specific [types of synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms). (optional)</param>
    /// <param name="page">Returns the requested page number (the first page is 0). Page size is set by &#x60;hitsPerPage&#x60;. When null, there&#39;s no pagination.  (optional, default to 0)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="searchSynonymsParams">Body of the &#x60;searchSynonyms&#x60; operation. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchSynonymsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SearchSynonymsResponse>> SearchSynonymsWithHttpInfoAsync(string indexName, SynonymType type = default(SynonymType), int? page = default(int?), int? hitsPerPage = default(int?), SearchSynonymsParams searchSynonymsParams = default(SearchSynonymsParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Search for a user ID.
    /// </summary>
    /// <remarks>
    /// Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. To ensure rapid updates, the user IDs index isn&#39;t built at the same time as the mapping. Instead, it&#39;s built every 12 hours, at the same time as the update of user ID usage. For example, if you add or move a user ID, the search will show an old value until the next time the mapping is rebuilt (every 12 hours).  
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchUserIdsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchUserIdsResponse</returns>
    System.Threading.Tasks.Task<SearchUserIdsResponse> SearchUserIdsAsync(SearchUserIdsParams searchUserIdsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Search for a user ID.
    /// </summary>
    /// <remarks>
    /// Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. To ensure rapid updates, the user IDs index isn&#39;t built at the same time as the mapping. Instead, it&#39;s built every 12 hours, at the same time as the update of user ID usage. For example, if you add or move a user ID, the search will show an old value until the next time the mapping is rebuilt (every 12 hours).  
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchUserIdsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchUserIdsResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<SearchUserIdsResponse>> SearchUserIdsWithHttpInfoAsync(SearchUserIdsParams searchUserIdsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Set stop word settings.
    /// </summary>
    /// <remarks>
    /// Set stop word settings for a specific language.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionarySettingsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> SetDictionarySettingsAsync(DictionarySettingsParams dictionarySettingsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Set stop word settings.
    /// </summary>
    /// <remarks>
    /// Set stop word settings for a specific language.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionarySettingsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> SetDictionarySettingsWithHttpInfoAsync(DictionarySettingsParams dictionarySettingsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Update index settings.
    /// </summary>
    /// <remarks>
    /// Update the specified [index settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/). Specifying null for a setting resets it to its default value.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="indexSettings"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    System.Threading.Tasks.Task<UpdatedAtResponse> SetSettingsAsync(string indexName, IndexSettings indexSettings, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update index settings.
    /// </summary>
    /// <remarks>
    /// Update the specified [index settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/). Specifying null for a setting resets it to its default value.
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="indexSettings"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdatedAtResponse>> SetSettingsWithHttpInfoAsync(string indexName, IndexSettings indexSettings, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
    /// <summary>
    /// Update an API key.
    /// </summary>
    /// <remarks>
    /// Replace the permissions of an existing API key. Any unspecified parameter resets that permission to its default value. The request must be authenticated with the admin API key. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="apiKey"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdateApiKeyResponse</returns>
    System.Threading.Tasks.Task<UpdateApiKeyResponse> UpdateApiKeyAsync(string key, ApiKey apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

    /// <summary>
    /// Update an API key.
    /// </summary>
    /// <remarks>
    /// Replace the permissions of an existing API key. Any unspecified parameter resets that permission to its default value. The request must be authenticated with the admin API key. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="apiKey"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdateApiKeyResponse)</returns>
    System.Threading.Tasks.Task<ApiResponse<UpdateApiKeyResponse>> UpdateApiKeyWithHttpInfoAsync(string key, ApiKey apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
  }


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public partial class SearchClient : IDisposable, ISearchClient
  {
    private Algolia.Search.Search.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

    /// <summary>
    /// Initializes a new instance of the <see cref="SearchClient"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <returns></returns>
    public SearchClient() : this((string)null)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SearchClient"/> class.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    public SearchClient(string basePath)
    {
      this.Configuration = Algolia.Search.Search.Client.Configuration.MergeConfigurations(
          Algolia.Search.Search.Client.GlobalConfiguration.Instance,
          new Algolia.Search.Search.Client.Configuration { BasePath = basePath }
      );
      this.ApiClient = new Algolia.Search.Search.Client.ApiClient(this.Configuration.BasePath);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      this.ExceptionFactory = Algolia.Search.Search.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SearchClient"/> class using Configuration object.
    /// **IMPORTANT** This will also create an instance of HttpClient, which is less than ideal.
    /// It's better to reuse the <see href="https://docs.microsoft.com/en-us/dotnet/architecture/microservices/implement-resilient-applications/use-httpclientfactory-to-implement-resilient-http-requests#issues-with-the-original-httpclient-class-available-in-net">HttpClient and HttpClientHandler</see>.
    /// </summary>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    public SearchClient(Algolia.Search.Search.Client.Configuration configuration)
    {
      if (configuration == null) throw new ArgumentNullException("configuration");

      this.Configuration = Algolia.Search.Search.Client.Configuration.MergeConfigurations(
          Algolia.Search.Search.Client.GlobalConfiguration.Instance,
          configuration
      );
      this.ApiClient = new Algolia.Search.Search.Client.ApiClient(this.Configuration.BasePath);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      ExceptionFactory = Algolia.Search.Search.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SearchClient"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public SearchClient(HttpClient client, HttpClientHandler handler = null) : this(client, (string)null, handler)
    {
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SearchClient"/> class.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="basePath">The target service's base path in URL format.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <exception cref="ArgumentException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public SearchClient(HttpClient client, string basePath, HttpClientHandler handler = null)
    {
      if (client == null) throw new ArgumentNullException("client");

      this.Configuration = Algolia.Search.Search.Client.Configuration.MergeConfigurations(
          Algolia.Search.Search.Client.GlobalConfiguration.Instance,
          new Algolia.Search.Search.Client.Configuration { BasePath = basePath }
      );
      this.ApiClient = new Algolia.Search.Search.Client.ApiClient(client, this.Configuration.BasePath, handler);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      this.ExceptionFactory = Algolia.Search.Search.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SearchClient"/> class using Configuration object.
    /// </summary>
    /// <param name="client">An instance of HttpClient.</param>
    /// <param name="configuration">An instance of Configuration.</param>
    /// <param name="handler">An optional instance of HttpClientHandler that is used by HttpClient.</param>
    /// <exception cref="ArgumentNullException"></exception>
    /// <returns></returns>
    /// <remarks>
    /// Some configuration settings will not be applied without passing an HttpClientHandler.
    /// The features affected are: Setting and Retrieving Cookies, Client Certificates, Proxy settings.
    /// </remarks>
    public SearchClient(HttpClient client, Algolia.Search.Search.Client.Configuration configuration, HttpClientHandler handler = null)
    {
      if (configuration == null) throw new ArgumentNullException("configuration");
      if (client == null) throw new ArgumentNullException("client");

      this.Configuration = Algolia.Search.Search.Client.Configuration.MergeConfigurations(
          Algolia.Search.Search.Client.GlobalConfiguration.Instance,
          configuration
      );
      this.ApiClient = new Algolia.Search.Search.Client.ApiClient(client, this.Configuration.BasePath, handler);
      this.Client = this.ApiClient;
      this.AsynchronousClient = this.ApiClient;
      ExceptionFactory = Algolia.Search.Search.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="SearchClient"/> class
    /// using a Configuration object and client instance.
    /// </summary>
    /// <param name="client">The client interface for synchronous API access.</param>
    /// <param name="asyncClient">The client interface for asynchronous API access.</param>
    /// <param name="configuration">The configuration object.</param>
    /// <exception cref="ArgumentNullException"></exception>
    public SearchClient(Algolia.Search.Search.Client.ISynchronousClient client, Algolia.Search.Search.Client.IAsynchronousClient asyncClient, Algolia.Search.Search.Client.IReadableConfiguration configuration)
    {
      if (client == null) throw new ArgumentNullException("client");
      if (asyncClient == null) throw new ArgumentNullException("asyncClient");
      if (configuration == null) throw new ArgumentNullException("configuration");

      this.Client = client;
      this.AsynchronousClient = asyncClient;
      this.Configuration = configuration;
      this.ExceptionFactory = Algolia.Search.Search.Client.Configuration.DefaultExceptionFactory;
    }

    /// <summary>
    /// Disposes resources if they were created by us
    /// </summary>
    public void Dispose()
    {
      this.ApiClient?.Dispose();
    }

    /// <summary>
    /// Holds the ApiClient if created
    /// </summary>
    public Algolia.Search.Search.Client.ApiClient ApiClient { get; set; } = null;

    /// <summary>
    /// The client for accessing this underlying API asynchronously.
    /// </summary>
    public Algolia.Search.Search.Client.IAsynchronousClient AsynchronousClient { get; set; }

    /// <summary>
    /// The client for accessing this underlying API synchronously.
    /// </summary>
    public Algolia.Search.Search.Client.ISynchronousClient Client { get; set; }

    /// <summary>
    /// Gets the base path of the API client.
    /// </summary>
    /// <value>The base path</value>
    public string GetBasePath()
    {
      return this.Configuration.BasePath;
    }

    /// <summary>
    /// Gets or sets the configuration object
    /// </summary>
    /// <value>An instance of the Configuration</value>
    public Algolia.Search.Search.Client.IReadableConfiguration Configuration { get; set; }

    /// <summary>
    /// Provides a factory method hook for the creation of exceptions.
    /// </summary>
    public Algolia.Search.Search.Client.ExceptionFactory ExceptionFactory
    {
      get
      {
        if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
        {
          throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
        }
        return _exceptionFactory;
      }
      set { _exceptionFactory = value; }
    }

    /// <summary>
    /// Add API key. Add a new API key with specific permissions and restrictions. The request must be authenticated with the admin API key. The response returns an API key string. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="apiKey"></param>
    /// <returns>AddApiKeyResponse</returns>
    public AddApiKeyResponse AddApiKey(ApiKey apiKey)
    {
      Algolia.Search.Search.Client.ApiResponse<AddApiKeyResponse> localVarResponse = AddApiKeyWithHttpInfo(apiKey);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Add API key. Add a new API key with specific permissions and restrictions. The request must be authenticated with the admin API key. The response returns an API key string. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="apiKey"></param>
    /// <returns>ApiResponse of AddApiKeyResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<AddApiKeyResponse> AddApiKeyWithHttpInfo(ApiKey apiKey)
    {
      // verify the required parameter 'apiKey' is set
      if (apiKey == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'apiKey' when calling SearchClient->AddApiKey");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = apiKey;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<AddApiKeyResponse>("/1/keys", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("AddApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Add API key. Add a new API key with specific permissions and restrictions. The request must be authenticated with the admin API key. The response returns an API key string. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="apiKey"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AddApiKeyResponse</returns>
    public async System.Threading.Tasks.Task<AddApiKeyResponse> AddApiKeyAsync(ApiKey apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<AddApiKeyResponse> localVarResponse = await AddApiKeyWithHttpInfoAsync(apiKey, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Add API key. Add a new API key with specific permissions and restrictions. The request must be authenticated with the admin API key. The response returns an API key string. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="apiKey"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AddApiKeyResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<AddApiKeyResponse>> AddApiKeyWithHttpInfoAsync(ApiKey apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'apiKey' is set
      if (apiKey == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'apiKey' when calling SearchClient->AddApiKey");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = apiKey;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<AddApiKeyResponse>("/1/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("AddApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Add or update a record (using objectID). If you use an existing &#x60;objectID&#x60;, the existing record will be replaced with the new one.  To update only some attributes of an existing record, use the [&#x60;partial&#x60; operation](#tag/Records/operation/partialUpdateObject) instead.  To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="body">Algolia record.</param>
    /// <returns>UpdatedAtWithObjectIdResponse</returns>
    public UpdatedAtWithObjectIdResponse AddOrUpdateObject(string indexName, string objectID, Object body)
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtWithObjectIdResponse> localVarResponse = AddOrUpdateObjectWithHttpInfo(indexName, objectID, body);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Add or update a record (using objectID). If you use an existing &#x60;objectID&#x60;, the existing record will be replaced with the new one.  To update only some attributes of an existing record, use the [&#x60;partial&#x60; operation](#tag/Records/operation/partialUpdateObject) instead.  To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="body">Algolia record.</param>
    /// <returns>ApiResponse of UpdatedAtWithObjectIdResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtWithObjectIdResponse> AddOrUpdateObjectWithHttpInfo(string indexName, string objectID, Object body)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->AddOrUpdateObject");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->AddOrUpdateObject");

      // verify the required parameter 'body' is set
      if (body == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchClient->AddOrUpdateObject");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<UpdatedAtWithObjectIdResponse>("/1/indexes/{indexName}/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("AddOrUpdateObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Add or update a record (using objectID). If you use an existing &#x60;objectID&#x60;, the existing record will be replaced with the new one.  To update only some attributes of an existing record, use the [&#x60;partial&#x60; operation](#tag/Records/operation/partialUpdateObject) instead.  To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="body">Algolia record.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtWithObjectIdResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtWithObjectIdResponse> AddOrUpdateObjectAsync(string indexName, string objectID, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtWithObjectIdResponse> localVarResponse = await AddOrUpdateObjectWithHttpInfoAsync(indexName, objectID, body, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Add or update a record (using objectID). If you use an existing &#x60;objectID&#x60;, the existing record will be replaced with the new one.  To update only some attributes of an existing record, use the [&#x60;partial&#x60; operation](#tag/Records/operation/partialUpdateObject) instead.  To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="body">Algolia record.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtWithObjectIdResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtWithObjectIdResponse>> AddOrUpdateObjectWithHttpInfoAsync(string indexName, string objectID, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->AddOrUpdateObject");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->AddOrUpdateObject");

      // verify the required parameter 'body' is set
      if (body == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchClient->AddOrUpdateObject");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatedAtWithObjectIdResponse>("/1/indexes/{indexName}/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("AddOrUpdateObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Add a source. Add a source to the list of allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Source to add.</param>
    /// <returns>CreatedAtResponse</returns>
    public CreatedAtResponse AppendSource(Source source)
    {
      Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> localVarResponse = AppendSourceWithHttpInfo(source);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Add a source. Add a source to the list of allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Source to add.</param>
    /// <returns>ApiResponse of CreatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> AppendSourceWithHttpInfo(Source source)
    {
      // verify the required parameter 'source' is set
      if (source == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'source' when calling SearchClient->AppendSource");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = source;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<CreatedAtResponse>("/1/security/sources/append", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("AppendSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Add a source. Add a source to the list of allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Source to add.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreatedAtResponse</returns>
    public async System.Threading.Tasks.Task<CreatedAtResponse> AppendSourceAsync(Source source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> localVarResponse = await AppendSourceWithHttpInfoAsync(source, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Add a source. Add a source to the list of allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Source to add.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse>> AppendSourceWithHttpInfoAsync(Source source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'source' is set
      if (source == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'source' when calling SearchClient->AppendSource");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = source;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<CreatedAtResponse>("/1/security/sources/append", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("AppendSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Assign or move a user ID. Assign or move a user ID to a cluster. The time it takes to move a user is proportional to the amount of data linked to the user ID. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="assignUserIdParams"></param>
    /// <returns>CreatedAtResponse</returns>
    public CreatedAtResponse AssignUserId(string xAlgoliaUserID, AssignUserIdParams assignUserIdParams)
    {
      Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> localVarResponse = AssignUserIdWithHttpInfo(xAlgoliaUserID, assignUserIdParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Assign or move a user ID. Assign or move a user ID to a cluster. The time it takes to move a user is proportional to the amount of data linked to the user ID. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="assignUserIdParams"></param>
    /// <returns>ApiResponse of CreatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> AssignUserIdWithHttpInfo(string xAlgoliaUserID, AssignUserIdParams assignUserIdParams)
    {
      // verify the required parameter 'xAlgoliaUserID' is set
      if (xAlgoliaUserID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'xAlgoliaUserID' when calling SearchClient->AssignUserId");

      // verify the required parameter 'assignUserIdParams' is set
      if (assignUserIdParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'assignUserIdParams' when calling SearchClient->AssignUserId");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.HeaderParameters.Add("X-Algolia-User-ID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(xAlgoliaUserID)); // header parameter
      localVarRequestOptions.Data = assignUserIdParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<CreatedAtResponse>("/1/clusters/mapping", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("AssignUserId", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Assign or move a user ID. Assign or move a user ID to a cluster. The time it takes to move a user is proportional to the amount of data linked to the user ID. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="assignUserIdParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreatedAtResponse</returns>
    public async System.Threading.Tasks.Task<CreatedAtResponse> AssignUserIdAsync(string xAlgoliaUserID, AssignUserIdParams assignUserIdParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> localVarResponse = await AssignUserIdWithHttpInfoAsync(xAlgoliaUserID, assignUserIdParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Assign or move a user ID. Assign or move a user ID to a cluster. The time it takes to move a user is proportional to the amount of data linked to the user ID. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="assignUserIdParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse>> AssignUserIdWithHttpInfoAsync(string xAlgoliaUserID, AssignUserIdParams assignUserIdParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'xAlgoliaUserID' is set
      if (xAlgoliaUserID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'xAlgoliaUserID' when calling SearchClient->AssignUserId");

      // verify the required parameter 'assignUserIdParams' is set
      if (assignUserIdParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'assignUserIdParams' when calling SearchClient->AssignUserId");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.HeaderParameters.Add("X-Algolia-User-ID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(xAlgoliaUserID)); // header parameter
      localVarRequestOptions.Data = assignUserIdParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<CreatedAtResponse>("/1/clusters/mapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("AssignUserId", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Batch write operations on one index. To reduce the time spent on network round trips, you can perform several write actions in a single API call. Actions are applied in the order they are specified. The supported &#x60;action&#x60;s are equivalent to the individual operations of the same name. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="batchWriteParams"></param>
    /// <returns>BatchResponse</returns>
    public BatchResponse Batch(string indexName, BatchWriteParams batchWriteParams)
    {
      Algolia.Search.Search.Client.ApiResponse<BatchResponse> localVarResponse = BatchWithHttpInfo(indexName, batchWriteParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Batch write operations on one index. To reduce the time spent on network round trips, you can perform several write actions in a single API call. Actions are applied in the order they are specified. The supported &#x60;action&#x60;s are equivalent to the individual operations of the same name. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="batchWriteParams"></param>
    /// <returns>ApiResponse of BatchResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<BatchResponse> BatchWithHttpInfo(string indexName, BatchWriteParams batchWriteParams)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->Batch");

      // verify the required parameter 'batchWriteParams' is set
      if (batchWriteParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'batchWriteParams' when calling SearchClient->Batch");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = batchWriteParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<BatchResponse>("/1/indexes/{indexName}/batch", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Batch", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Batch write operations on one index. To reduce the time spent on network round trips, you can perform several write actions in a single API call. Actions are applied in the order they are specified. The supported &#x60;action&#x60;s are equivalent to the individual operations of the same name. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="batchWriteParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BatchResponse</returns>
    public async System.Threading.Tasks.Task<BatchResponse> BatchAsync(string indexName, BatchWriteParams batchWriteParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<BatchResponse> localVarResponse = await BatchWithHttpInfoAsync(indexName, batchWriteParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Batch write operations on one index. To reduce the time spent on network round trips, you can perform several write actions in a single API call. Actions are applied in the order they are specified. The supported &#x60;action&#x60;s are equivalent to the individual operations of the same name. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="batchWriteParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BatchResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<BatchResponse>> BatchWithHttpInfoAsync(string indexName, BatchWriteParams batchWriteParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->Batch");

      // verify the required parameter 'batchWriteParams' is set
      if (batchWriteParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'batchWriteParams' when calling SearchClient->Batch");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = batchWriteParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<BatchResponse>("/1/indexes/{indexName}/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Batch", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Batch assign userIDs. Assign multiple user IDs to a cluster. **You can&#39;t _move_ users with this operation.**. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="batchAssignUserIdsParams"></param>
    /// <returns>CreatedAtResponse</returns>
    public CreatedAtResponse BatchAssignUserIds(string xAlgoliaUserID, BatchAssignUserIdsParams batchAssignUserIdsParams)
    {
      Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> localVarResponse = BatchAssignUserIdsWithHttpInfo(xAlgoliaUserID, batchAssignUserIdsParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Batch assign userIDs. Assign multiple user IDs to a cluster. **You can&#39;t _move_ users with this operation.**. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="batchAssignUserIdsParams"></param>
    /// <returns>ApiResponse of CreatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> BatchAssignUserIdsWithHttpInfo(string xAlgoliaUserID, BatchAssignUserIdsParams batchAssignUserIdsParams)
    {
      // verify the required parameter 'xAlgoliaUserID' is set
      if (xAlgoliaUserID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'xAlgoliaUserID' when calling SearchClient->BatchAssignUserIds");

      // verify the required parameter 'batchAssignUserIdsParams' is set
      if (batchAssignUserIdsParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'batchAssignUserIdsParams' when calling SearchClient->BatchAssignUserIds");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.HeaderParameters.Add("X-Algolia-User-ID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(xAlgoliaUserID)); // header parameter
      localVarRequestOptions.Data = batchAssignUserIdsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<CreatedAtResponse>("/1/clusters/mapping/batch", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("BatchAssignUserIds", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Batch assign userIDs. Assign multiple user IDs to a cluster. **You can&#39;t _move_ users with this operation.**. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="batchAssignUserIdsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of CreatedAtResponse</returns>
    public async System.Threading.Tasks.Task<CreatedAtResponse> BatchAssignUserIdsAsync(string xAlgoliaUserID, BatchAssignUserIdsParams batchAssignUserIdsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse> localVarResponse = await BatchAssignUserIdsWithHttpInfoAsync(xAlgoliaUserID, batchAssignUserIdsParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Batch assign userIDs. Assign multiple user IDs to a cluster. **You can&#39;t _move_ users with this operation.**. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="xAlgoliaUserID">userID to assign.</param>
    /// <param name="batchAssignUserIdsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (CreatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<CreatedAtResponse>> BatchAssignUserIdsWithHttpInfoAsync(string xAlgoliaUserID, BatchAssignUserIdsParams batchAssignUserIdsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'xAlgoliaUserID' is set
      if (xAlgoliaUserID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'xAlgoliaUserID' when calling SearchClient->BatchAssignUserIds");

      // verify the required parameter 'batchAssignUserIdsParams' is set
      if (batchAssignUserIdsParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'batchAssignUserIdsParams' when calling SearchClient->BatchAssignUserIds");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.HeaderParameters.Add("X-Algolia-User-ID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(xAlgoliaUserID)); // header parameter
      localVarRequestOptions.Data = batchAssignUserIdsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<CreatedAtResponse>("/1/clusters/mapping/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("BatchAssignUserIds", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Batch dictionary entries. Add or remove a batch of dictionary entries.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="batchDictionaryEntriesParams"></param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse BatchDictionaryEntries(DictionaryType dictionaryName, BatchDictionaryEntriesParams batchDictionaryEntriesParams)
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = BatchDictionaryEntriesWithHttpInfo(dictionaryName, batchDictionaryEntriesParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Batch dictionary entries. Add or remove a batch of dictionary entries.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="batchDictionaryEntriesParams"></param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> BatchDictionaryEntriesWithHttpInfo(DictionaryType dictionaryName, BatchDictionaryEntriesParams batchDictionaryEntriesParams)
    {
      // verify the required parameter 'dictionaryName' is set
      if (dictionaryName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'dictionaryName' when calling SearchClient->BatchDictionaryEntries");

      // verify the required parameter 'batchDictionaryEntriesParams' is set
      if (batchDictionaryEntriesParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'batchDictionaryEntriesParams' when calling SearchClient->BatchDictionaryEntries");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("dictionaryName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(dictionaryName)); // path parameter
      localVarRequestOptions.Data = batchDictionaryEntriesParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtResponse>("/1/dictionaries/{dictionaryName}/batch", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("BatchDictionaryEntries", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Batch dictionary entries. Add or remove a batch of dictionary entries.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="batchDictionaryEntriesParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> BatchDictionaryEntriesAsync(DictionaryType dictionaryName, BatchDictionaryEntriesParams batchDictionaryEntriesParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await BatchDictionaryEntriesWithHttpInfoAsync(dictionaryName, batchDictionaryEntriesParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Batch dictionary entries. Add or remove a batch of dictionary entries.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="batchDictionaryEntriesParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> BatchDictionaryEntriesWithHttpInfoAsync(DictionaryType dictionaryName, BatchDictionaryEntriesParams batchDictionaryEntriesParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'dictionaryName' is set
      if (dictionaryName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'dictionaryName' when calling SearchClient->BatchDictionaryEntries");

      // verify the required parameter 'batchDictionaryEntriesParams' is set
      if (batchDictionaryEntriesParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'batchDictionaryEntriesParams' when calling SearchClient->BatchDictionaryEntries");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("dictionaryName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(dictionaryName)); // path parameter
      localVarRequestOptions.Data = batchDictionaryEntriesParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtResponse>("/1/dictionaries/{dictionaryName}/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("BatchDictionaryEntries", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get all records from an index. Retrieve up to 1,000 records per call. Supports full-text search and filters. For better performance, it doesn&#39;t support: - The &#x60;distinct&#x60; query parameter - Sorting by typos, proximity, words, or geographical distance. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="browseParams"> (optional)</param>
    /// <returns>BrowseResponse</returns>
    public BrowseResponse Browse(string indexName, BrowseParams browseParams = default(BrowseParams))
    {
      Algolia.Search.Search.Client.ApiResponse<BrowseResponse> localVarResponse = BrowseWithHttpInfo(indexName, browseParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get all records from an index. Retrieve up to 1,000 records per call. Supports full-text search and filters. For better performance, it doesn&#39;t support: - The &#x60;distinct&#x60; query parameter - Sorting by typos, proximity, words, or geographical distance. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="browseParams"> (optional)</param>
    /// <returns>ApiResponse of BrowseResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<BrowseResponse> BrowseWithHttpInfo(string indexName, BrowseParams browseParams = default(BrowseParams))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->Browse");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = browseParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<BrowseResponse>("/1/indexes/{indexName}/browse", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Browse", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get all records from an index. Retrieve up to 1,000 records per call. Supports full-text search and filters. For better performance, it doesn&#39;t support: - The &#x60;distinct&#x60; query parameter - Sorting by typos, proximity, words, or geographical distance. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="browseParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of BrowseResponse</returns>
    public async System.Threading.Tasks.Task<BrowseResponse> BrowseAsync(string indexName, BrowseParams browseParams = default(BrowseParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<BrowseResponse> localVarResponse = await BrowseWithHttpInfoAsync(indexName, browseParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get all records from an index. Retrieve up to 1,000 records per call. Supports full-text search and filters. For better performance, it doesn&#39;t support: - The &#x60;distinct&#x60; query parameter - Sorting by typos, proximity, words, or geographical distance. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="browseParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (BrowseResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<BrowseResponse>> BrowseWithHttpInfoAsync(string indexName, BrowseParams browseParams = default(BrowseParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->Browse");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = browseParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<BrowseResponse>("/1/indexes/{indexName}/browse", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Browse", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete all synonyms. Delete all synonyms in the index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse ClearAllSynonyms(string indexName, bool? forwardToReplicas = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = ClearAllSynonymsWithHttpInfo(indexName, forwardToReplicas);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete all synonyms. Delete all synonyms in the index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> ClearAllSynonymsWithHttpInfo(string indexName, bool? forwardToReplicas = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->ClearAllSynonyms");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtResponse>("/1/indexes/{indexName}/synonyms/clear", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ClearAllSynonyms", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete all synonyms. Delete all synonyms in the index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> ClearAllSynonymsAsync(string indexName, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await ClearAllSynonymsWithHttpInfoAsync(indexName, forwardToReplicas, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete all synonyms. Delete all synonyms in the index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> ClearAllSynonymsWithHttpInfoAsync(string indexName, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->ClearAllSynonyms");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtResponse>("/1/indexes/{indexName}/synonyms/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ClearAllSynonyms", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete all records from an index. Delete the records but leave settings and index-specific API keys untouched.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse ClearObjects(string indexName)
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = ClearObjectsWithHttpInfo(indexName);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete all records from an index. Delete the records but leave settings and index-specific API keys untouched.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> ClearObjectsWithHttpInfo(string indexName)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->ClearObjects");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtResponse>("/1/indexes/{indexName}/clear", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ClearObjects", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete all records from an index. Delete the records but leave settings and index-specific API keys untouched.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> ClearObjectsAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await ClearObjectsWithHttpInfoAsync(indexName, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete all records from an index. Delete the records but leave settings and index-specific API keys untouched.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> ClearObjectsWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->ClearObjects");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtResponse>("/1/indexes/{indexName}/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ClearObjects", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete all rules. Delete all rules in the index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse ClearRules(string indexName, bool? forwardToReplicas = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = ClearRulesWithHttpInfo(indexName, forwardToReplicas);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete all rules. Delete all rules in the index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> ClearRulesWithHttpInfo(string indexName, bool? forwardToReplicas = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->ClearRules");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtResponse>("/1/indexes/{indexName}/rules/clear", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ClearRules", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete all rules. Delete all rules in the index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> ClearRulesAsync(string indexName, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await ClearRulesWithHttpInfoAsync(indexName, forwardToReplicas, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete all rules. Delete all rules in the index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> ClearRulesWithHttpInfoAsync(string indexName, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->ClearRules");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtResponse>("/1/indexes/{indexName}/rules/clear", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ClearRules", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>Object</returns>
    public Object Del(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      Algolia.Search.Search.Client.ApiResponse<Object> localVarResponse = DelWithHttpInfo(path, parameters);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.Search.Client.ApiResponse<Object> DelWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'path' when calling SearchClient->Del");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Search.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Del", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> DelAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<Object> localVarResponse = await DelWithHttpInfoAsync(path, parameters, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<Object>> DelWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'path' when calling SearchClient->Del");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Search.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Del", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete API key. Delete an existing API key. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <returns>DeleteApiKeyResponse</returns>
    public DeleteApiKeyResponse DeleteApiKey(string key)
    {
      Algolia.Search.Search.Client.ApiResponse<DeleteApiKeyResponse> localVarResponse = DeleteApiKeyWithHttpInfo(key);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete API key. Delete an existing API key. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <returns>ApiResponse of DeleteApiKeyResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<DeleteApiKeyResponse> DeleteApiKeyWithHttpInfo(string key)
    {
      // verify the required parameter 'key' is set
      if (key == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'key' when calling SearchClient->DeleteApiKey");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("key", Algolia.Search.Search.Client.ClientUtils.ParameterToString(key)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeleteApiKeyResponse>("/1/keys/{key}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete API key. Delete an existing API key. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteApiKeyResponse</returns>
    public async System.Threading.Tasks.Task<DeleteApiKeyResponse> DeleteApiKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<DeleteApiKeyResponse> localVarResponse = await DeleteApiKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete API key. Delete an existing API key. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteApiKeyResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<DeleteApiKeyResponse>> DeleteApiKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'key' is set
      if (key == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'key' when calling SearchClient->DeleteApiKey");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("key", Algolia.Search.Search.Client.ClientUtils.ParameterToString(key)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteApiKeyResponse>("/1/keys/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete all records matching a query. This operation doesn&#39;t support all the query options, only its filters (numeric, facet, or tag) and geo queries. It doesn&#39;t accept empty filters or queries. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="deleteByParams"></param>
    /// <returns>DeletedAtResponse</returns>
    public DeletedAtResponse DeleteBy(string indexName, DeleteByParams deleteByParams)
    {
      Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> localVarResponse = DeleteByWithHttpInfo(indexName, deleteByParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete all records matching a query. This operation doesn&#39;t support all the query options, only its filters (numeric, facet, or tag) and geo queries. It doesn&#39;t accept empty filters or queries. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="deleteByParams"></param>
    /// <returns>ApiResponse of DeletedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> DeleteByWithHttpInfo(string indexName, DeleteByParams deleteByParams)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteBy");

      // verify the required parameter 'deleteByParams' is set
      if (deleteByParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'deleteByParams' when calling SearchClient->DeleteBy");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = deleteByParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<DeletedAtResponse>("/1/indexes/{indexName}/deleteByQuery", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteBy", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete all records matching a query. This operation doesn&#39;t support all the query options, only its filters (numeric, facet, or tag) and geo queries. It doesn&#39;t accept empty filters or queries. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="deleteByParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeletedAtResponse</returns>
    public async System.Threading.Tasks.Task<DeletedAtResponse> DeleteByAsync(string indexName, DeleteByParams deleteByParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> localVarResponse = await DeleteByWithHttpInfoAsync(indexName, deleteByParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete all records matching a query. This operation doesn&#39;t support all the query options, only its filters (numeric, facet, or tag) and geo queries. It doesn&#39;t accept empty filters or queries. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="deleteByParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse>> DeleteByWithHttpInfoAsync(string indexName, DeleteByParams deleteByParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteBy");

      // verify the required parameter 'deleteByParams' is set
      if (deleteByParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'deleteByParams' when calling SearchClient->DeleteBy");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = deleteByParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<DeletedAtResponse>("/1/indexes/{indexName}/deleteByQuery", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteBy", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete index. Delete an existing index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <returns>DeletedAtResponse</returns>
    public DeletedAtResponse DeleteIndex(string indexName)
    {
      Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> localVarResponse = DeleteIndexWithHttpInfo(indexName);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete index. Delete an existing index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <returns>ApiResponse of DeletedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> DeleteIndexWithHttpInfo(string indexName)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteIndex");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeletedAtResponse>("/1/indexes/{indexName}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteIndex", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete index. Delete an existing index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeletedAtResponse</returns>
    public async System.Threading.Tasks.Task<DeletedAtResponse> DeleteIndexAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> localVarResponse = await DeleteIndexWithHttpInfoAsync(indexName, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete index. Delete an existing index.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse>> DeleteIndexWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteIndex");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletedAtResponse>("/1/indexes/{indexName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteIndex", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a record. To delete a set of records matching a query, use the [&#x60;deleteByQuery&#x60; operation](#tag/Records/operation/deleteBy) instead.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <returns>DeletedAtResponse</returns>
    public DeletedAtResponse DeleteObject(string indexName, string objectID)
    {
      Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> localVarResponse = DeleteObjectWithHttpInfo(indexName, objectID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a record. To delete a set of records matching a query, use the [&#x60;deleteByQuery&#x60; operation](#tag/Records/operation/deleteBy) instead.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <returns>ApiResponse of DeletedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> DeleteObjectWithHttpInfo(string indexName, string objectID)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteObject");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->DeleteObject");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeletedAtResponse>("/1/indexes/{indexName}/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a record. To delete a set of records matching a query, use the [&#x60;deleteByQuery&#x60; operation](#tag/Records/operation/deleteBy) instead.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeletedAtResponse</returns>
    public async System.Threading.Tasks.Task<DeletedAtResponse> DeleteObjectAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> localVarResponse = await DeleteObjectWithHttpInfoAsync(indexName, objectID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a record. To delete a set of records matching a query, use the [&#x60;deleteByQuery&#x60; operation](#tag/Records/operation/deleteBy) instead.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse>> DeleteObjectWithHttpInfoAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteObject");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->DeleteObject");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletedAtResponse>("/1/indexes/{indexName}/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a rule. Delete a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse DeleteRule(string indexName, string objectID, bool? forwardToReplicas = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = DeleteRuleWithHttpInfo(indexName, objectID, forwardToReplicas);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a rule. Delete a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> DeleteRuleWithHttpInfo(string indexName, string objectID, bool? forwardToReplicas = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteRule");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->DeleteRule");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<UpdatedAtResponse>("/1/indexes/{indexName}/rules/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteRule", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a rule. Delete a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> DeleteRuleAsync(string indexName, string objectID, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await DeleteRuleWithHttpInfoAsync(indexName, objectID, forwardToReplicas, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a rule. Delete a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> DeleteRuleWithHttpInfoAsync(string indexName, string objectID, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteRule");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->DeleteRule");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<UpdatedAtResponse>("/1/indexes/{indexName}/rules/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteRule", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Remove a source. Remove a source from the list of allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">IP address range of the source.</param>
    /// <returns>DeleteSourceResponse</returns>
    public DeleteSourceResponse DeleteSource(string source)
    {
      Algolia.Search.Search.Client.ApiResponse<DeleteSourceResponse> localVarResponse = DeleteSourceWithHttpInfo(source);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Remove a source. Remove a source from the list of allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">IP address range of the source.</param>
    /// <returns>ApiResponse of DeleteSourceResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<DeleteSourceResponse> DeleteSourceWithHttpInfo(string source)
    {
      // verify the required parameter 'source' is set
      if (source == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'source' when calling SearchClient->DeleteSource");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("source", Algolia.Search.Search.Client.ClientUtils.ParameterToString(source)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeleteSourceResponse>("/1/security/sources/{source}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Remove a source. Remove a source from the list of allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">IP address range of the source.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeleteSourceResponse</returns>
    public async System.Threading.Tasks.Task<DeleteSourceResponse> DeleteSourceAsync(string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<DeleteSourceResponse> localVarResponse = await DeleteSourceWithHttpInfoAsync(source, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Remove a source. Remove a source from the list of allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">IP address range of the source.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeleteSourceResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<DeleteSourceResponse>> DeleteSourceWithHttpInfoAsync(string source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'source' is set
      if (source == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'source' when calling SearchClient->DeleteSource");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("source", Algolia.Search.Search.Client.ClientUtils.ParameterToString(source)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeleteSourceResponse>("/1/security/sources/{source}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteSource", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a synonym. Delete a synonym by its &#x60;objectID&#x60;. To find the object IDs of your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>DeletedAtResponse</returns>
    public DeletedAtResponse DeleteSynonym(string indexName, string objectID, bool? forwardToReplicas = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> localVarResponse = DeleteSynonymWithHttpInfo(indexName, objectID, forwardToReplicas);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a synonym. Delete a synonym by its &#x60;objectID&#x60;. To find the object IDs of your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>ApiResponse of DeletedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> DeleteSynonymWithHttpInfo(string indexName, string objectID, bool? forwardToReplicas = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteSynonym");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->DeleteSynonym");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<DeletedAtResponse>("/1/indexes/{indexName}/synonyms/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteSynonym", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Delete a synonym. Delete a synonym by its &#x60;objectID&#x60;. To find the object IDs of your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of DeletedAtResponse</returns>
    public async System.Threading.Tasks.Task<DeletedAtResponse> DeleteSynonymAsync(string indexName, string objectID, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse> localVarResponse = await DeleteSynonymWithHttpInfoAsync(indexName, objectID, forwardToReplicas, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Delete a synonym. Delete a synonym by its &#x60;objectID&#x60;. To find the object IDs of your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (DeletedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<DeletedAtResponse>> DeleteSynonymWithHttpInfoAsync(string indexName, string objectID, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->DeleteSynonym");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->DeleteSynonym");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<DeletedAtResponse>("/1/indexes/{indexName}/synonyms/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("DeleteSynonym", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>Object</returns>
    public Object Get(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      Algolia.Search.Search.Client.ApiResponse<Object> localVarResponse = GetWithHttpInfo(path, parameters);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.Search.Client.ApiResponse<Object> GetWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'path' when calling SearchClient->Get");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Search.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Get", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> GetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<Object> localVarResponse = await GetWithHttpInfoAsync(path, parameters, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<Object>> GetWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'path' when calling SearchClient->Get");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Search.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Get", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get API key permissions. Get the permissions and restrictions of a specific API key. When authenticating with the admin API key, you can request information for any of your application&#39;s keys. When authenticating with other API keys, you can only retrieve information for that key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <returns>GetApiKeyResponse</returns>
    public GetApiKeyResponse GetApiKey(string key)
    {
      Algolia.Search.Search.Client.ApiResponse<GetApiKeyResponse> localVarResponse = GetApiKeyWithHttpInfo(key);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get API key permissions. Get the permissions and restrictions of a specific API key. When authenticating with the admin API key, you can request information for any of your application&#39;s keys. When authenticating with other API keys, you can only retrieve information for that key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <returns>ApiResponse of GetApiKeyResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<GetApiKeyResponse> GetApiKeyWithHttpInfo(string key)
    {
      // verify the required parameter 'key' is set
      if (key == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'key' when calling SearchClient->GetApiKey");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("key", Algolia.Search.Search.Client.ClientUtils.ParameterToString(key)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<GetApiKeyResponse>("/1/keys/{key}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get API key permissions. Get the permissions and restrictions of a specific API key. When authenticating with the admin API key, you can request information for any of your application&#39;s keys. When authenticating with other API keys, you can only retrieve information for that key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetApiKeyResponse</returns>
    public async System.Threading.Tasks.Task<GetApiKeyResponse> GetApiKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<GetApiKeyResponse> localVarResponse = await GetApiKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get API key permissions. Get the permissions and restrictions of a specific API key. When authenticating with the admin API key, you can request information for any of your application&#39;s keys. When authenticating with other API keys, you can only retrieve information for that key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetApiKeyResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<GetApiKeyResponse>> GetApiKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'key' is set
      if (key == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'key' when calling SearchClient->GetApiKey");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("key", Algolia.Search.Search.Client.ClientUtils.ParameterToString(key)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<GetApiKeyResponse>("/1/keys/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List available languages. Lists Algolia&#39;s [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and any customizations applied to each language&#39;s [stop word](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plural](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), and [segmentation (compound)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) features.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>Dictionary&lt;string, Languages&gt;</returns>
    public Dictionary<string, Languages> GetDictionaryLanguages()
    {
      Algolia.Search.Search.Client.ApiResponse<Dictionary<string, Languages>> localVarResponse = GetDictionaryLanguagesWithHttpInfo();
      return localVarResponse.Data;
    }

    /// <summary>
    /// List available languages. Lists Algolia&#39;s [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and any customizations applied to each language&#39;s [stop word](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plural](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), and [segmentation (compound)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) features.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of Dictionary&lt;string, Languages&gt;</returns>
    public Algolia.Search.Search.Client.ApiResponse<Dictionary<string, Languages>> GetDictionaryLanguagesWithHttpInfo()
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Dictionary<string, Languages>>("/1/dictionaries/*/languages", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDictionaryLanguages", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List available languages. Lists Algolia&#39;s [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and any customizations applied to each language&#39;s [stop word](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plural](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), and [segmentation (compound)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) features.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Dictionary&lt;string, Languages&gt;</returns>
    public async System.Threading.Tasks.Task<Dictionary<string, Languages>> GetDictionaryLanguagesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<Dictionary<string, Languages>> localVarResponse = await GetDictionaryLanguagesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// List available languages. Lists Algolia&#39;s [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and any customizations applied to each language&#39;s [stop word](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plural](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), and [segmentation (compound)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) features.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, Languages&gt;)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<Dictionary<string, Languages>>> GetDictionaryLanguagesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, Languages>>("/1/dictionaries/*/languages", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDictionaryLanguages", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get stop word settings. Get the languages for which [stop words are turned off](#tag/Dictionaries/operation/setDictionarySettings).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>GetDictionarySettingsResponse</returns>
    public GetDictionarySettingsResponse GetDictionarySettings()
    {
      Algolia.Search.Search.Client.ApiResponse<GetDictionarySettingsResponse> localVarResponse = GetDictionarySettingsWithHttpInfo();
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get stop word settings. Get the languages for which [stop words are turned off](#tag/Dictionaries/operation/setDictionarySettings).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of GetDictionarySettingsResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<GetDictionarySettingsResponse> GetDictionarySettingsWithHttpInfo()
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<GetDictionarySettingsResponse>("/1/dictionaries/*/settings", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDictionarySettings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get stop word settings. Get the languages for which [stop words are turned off](#tag/Dictionaries/operation/setDictionarySettings).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetDictionarySettingsResponse</returns>
    public async System.Threading.Tasks.Task<GetDictionarySettingsResponse> GetDictionarySettingsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<GetDictionarySettingsResponse> localVarResponse = await GetDictionarySettingsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get stop word settings. Get the languages for which [stop words are turned off](#tag/Dictionaries/operation/setDictionarySettings).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetDictionarySettingsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<GetDictionarySettingsResponse>> GetDictionarySettingsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<GetDictionarySettingsResponse>("/1/dictionaries/*/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetDictionarySettings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Return the latest log entries. The request must be authenticated by an API key with the [&#x60;logs&#x60; ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl). Logs are held for the last seven days. There&#39;s also a logging limit of 1,000 API calls per server. This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn&#39;t appear in the logs itself. &gt; **Note**: To fetch the logs for a Distributed Search Network (DSN) cluster, target the [DSN&#39;s endpoint](https://www.algolia.com/doc/guides/scaling/distributed-search-network-dsn/#accessing-dsn-servers). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="offset">First log entry to retrieve. Sorted by decreasing date with 0 being the most recent. (optional, default to 0)</param>
    /// <param name="length">Maximum number of entries to retrieve. (optional, default to 10)</param>
    /// <param name="indexName">Index for which log entries should be retrieved. When omitted, log entries are retrieved for all indices. (optional)</param>
    /// <param name="type">Type of log entries to retrieve. When omitted, all log entries are retrieved. (optional)</param>
    /// <returns>GetLogsResponse</returns>
    public GetLogsResponse GetLogs(int? offset = default(int?), int? length = default(int?), string indexName = default(string), LogType type = default(LogType))
    {
      Algolia.Search.Search.Client.ApiResponse<GetLogsResponse> localVarResponse = GetLogsWithHttpInfo(offset, length, indexName, type);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Return the latest log entries. The request must be authenticated by an API key with the [&#x60;logs&#x60; ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl). Logs are held for the last seven days. There&#39;s also a logging limit of 1,000 API calls per server. This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn&#39;t appear in the logs itself. &gt; **Note**: To fetch the logs for a Distributed Search Network (DSN) cluster, target the [DSN&#39;s endpoint](https://www.algolia.com/doc/guides/scaling/distributed-search-network-dsn/#accessing-dsn-servers). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="offset">First log entry to retrieve. Sorted by decreasing date with 0 being the most recent. (optional, default to 0)</param>
    /// <param name="length">Maximum number of entries to retrieve. (optional, default to 10)</param>
    /// <param name="indexName">Index for which log entries should be retrieved. When omitted, log entries are retrieved for all indices. (optional)</param>
    /// <param name="type">Type of log entries to retrieve. When omitted, all log entries are retrieved. (optional)</param>
    /// <returns>ApiResponse of GetLogsResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<GetLogsResponse> GetLogsWithHttpInfo(int? offset = default(int?), int? length = default(int?), string indexName = default(string), LogType type = default(LogType))
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (offset != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
      }
      if (length != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "length", length));
      }
      if (indexName != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "indexName", indexName));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "type", type));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<GetLogsResponse>("/1/logs", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetLogs", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Return the latest log entries. The request must be authenticated by an API key with the [&#x60;logs&#x60; ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl). Logs are held for the last seven days. There&#39;s also a logging limit of 1,000 API calls per server. This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn&#39;t appear in the logs itself. &gt; **Note**: To fetch the logs for a Distributed Search Network (DSN) cluster, target the [DSN&#39;s endpoint](https://www.algolia.com/doc/guides/scaling/distributed-search-network-dsn/#accessing-dsn-servers). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="offset">First log entry to retrieve. Sorted by decreasing date with 0 being the most recent. (optional, default to 0)</param>
    /// <param name="length">Maximum number of entries to retrieve. (optional, default to 10)</param>
    /// <param name="indexName">Index for which log entries should be retrieved. When omitted, log entries are retrieved for all indices. (optional)</param>
    /// <param name="type">Type of log entries to retrieve. When omitted, all log entries are retrieved. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetLogsResponse</returns>
    public async System.Threading.Tasks.Task<GetLogsResponse> GetLogsAsync(int? offset = default(int?), int? length = default(int?), string indexName = default(string), LogType type = default(LogType), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<GetLogsResponse> localVarResponse = await GetLogsWithHttpInfoAsync(offset, length, indexName, type, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Return the latest log entries. The request must be authenticated by an API key with the [&#x60;logs&#x60; ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl). Logs are held for the last seven days. There&#39;s also a logging limit of 1,000 API calls per server. This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn&#39;t appear in the logs itself. &gt; **Note**: To fetch the logs for a Distributed Search Network (DSN) cluster, target the [DSN&#39;s endpoint](https://www.algolia.com/doc/guides/scaling/distributed-search-network-dsn/#accessing-dsn-servers). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="offset">First log entry to retrieve. Sorted by decreasing date with 0 being the most recent. (optional, default to 0)</param>
    /// <param name="length">Maximum number of entries to retrieve. (optional, default to 10)</param>
    /// <param name="indexName">Index for which log entries should be retrieved. When omitted, log entries are retrieved for all indices. (optional)</param>
    /// <param name="type">Type of log entries to retrieve. When omitted, all log entries are retrieved. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetLogsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<GetLogsResponse>> GetLogsWithHttpInfoAsync(int? offset = default(int?), int? length = default(int?), string indexName = default(string), LogType type = default(LogType), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (offset != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
      }
      if (length != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "length", length));
      }
      if (indexName != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "indexName", indexName));
      }
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "type", type));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<GetLogsResponse>("/1/logs", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetLogs", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a record. To get more than one record, use the [&#x60;objects&#x60; operation](#tag/Records/operation/getObjects).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToRetrieve">Attributes to include with the records in the response. This is useful to reduce the size of the API response. By default, all retrievable attributes are returned. &#x60;objectID&#x60; is always retrieved, even when not specified. [&#x60;unretrievableAttributes&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/) won&#39;t be retrieved unless the request is authenticated with the admin API key.  (optional)</param>
    /// <returns>Dictionary&lt;string, string&gt;</returns>
    public Dictionary<string, string> GetObject(string indexName, string objectID, List<string> attributesToRetrieve = default(List<string>))
    {
      Algolia.Search.Search.Client.ApiResponse<Dictionary<string, string>> localVarResponse = GetObjectWithHttpInfo(indexName, objectID, attributesToRetrieve);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a record. To get more than one record, use the [&#x60;objects&#x60; operation](#tag/Records/operation/getObjects).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToRetrieve">Attributes to include with the records in the response. This is useful to reduce the size of the API response. By default, all retrievable attributes are returned. &#x60;objectID&#x60; is always retrieved, even when not specified. [&#x60;unretrievableAttributes&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/) won&#39;t be retrieved unless the request is authenticated with the admin API key.  (optional)</param>
    /// <returns>ApiResponse of Dictionary&lt;string, string&gt;</returns>
    public Algolia.Search.Search.Client.ApiResponse<Dictionary<string, string>> GetObjectWithHttpInfo(string indexName, string objectID, List<string> attributesToRetrieve = default(List<string>))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetObject");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->GetObject");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (attributesToRetrieve != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("multi", "attributesToRetrieve", attributesToRetrieve));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Dictionary<string, string>>("/1/indexes/{indexName}/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a record. To get more than one record, use the [&#x60;objects&#x60; operation](#tag/Records/operation/getObjects).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToRetrieve">Attributes to include with the records in the response. This is useful to reduce the size of the API response. By default, all retrievable attributes are returned. &#x60;objectID&#x60; is always retrieved, even when not specified. [&#x60;unretrievableAttributes&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/) won&#39;t be retrieved unless the request is authenticated with the admin API key.  (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Dictionary&lt;string, string&gt;</returns>
    public async System.Threading.Tasks.Task<Dictionary<string, string>> GetObjectAsync(string indexName, string objectID, List<string> attributesToRetrieve = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<Dictionary<string, string>> localVarResponse = await GetObjectWithHttpInfoAsync(indexName, objectID, attributesToRetrieve, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a record. To get more than one record, use the [&#x60;objects&#x60; operation](#tag/Records/operation/getObjects).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToRetrieve">Attributes to include with the records in the response. This is useful to reduce the size of the API response. By default, all retrievable attributes are returned. &#x60;objectID&#x60; is always retrieved, even when not specified. [&#x60;unretrievableAttributes&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/) won&#39;t be retrieved unless the request is authenticated with the admin API key.  (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Dictionary&lt;string, string&gt;)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<Dictionary<string, string>>> GetObjectWithHttpInfoAsync(string indexName, string objectID, List<string> attributesToRetrieve = default(List<string>), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetObject");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->GetObject");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (attributesToRetrieve != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("multi", "attributesToRetrieve", attributesToRetrieve));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Dictionary<string, string>>("/1/indexes/{indexName}/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get multiple records. Retrieve one or more records, potentially from different indices, in a single API operation. Results will be received in the same order as the requests. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getObjectsParams">Request object.</param>
    /// <returns>GetObjectsResponse</returns>
    public GetObjectsResponse GetObjects(GetObjectsParams getObjectsParams)
    {
      Algolia.Search.Search.Client.ApiResponse<GetObjectsResponse> localVarResponse = GetObjectsWithHttpInfo(getObjectsParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get multiple records. Retrieve one or more records, potentially from different indices, in a single API operation. Results will be received in the same order as the requests. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getObjectsParams">Request object.</param>
    /// <returns>ApiResponse of GetObjectsResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<GetObjectsResponse> GetObjectsWithHttpInfo(GetObjectsParams getObjectsParams)
    {
      // verify the required parameter 'getObjectsParams' is set
      if (getObjectsParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'getObjectsParams' when calling SearchClient->GetObjects");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = getObjectsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<GetObjectsResponse>("/1/indexes/*/objects", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetObjects", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get multiple records. Retrieve one or more records, potentially from different indices, in a single API operation. Results will be received in the same order as the requests. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getObjectsParams">Request object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetObjectsResponse</returns>
    public async System.Threading.Tasks.Task<GetObjectsResponse> GetObjectsAsync(GetObjectsParams getObjectsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<GetObjectsResponse> localVarResponse = await GetObjectsWithHttpInfoAsync(getObjectsParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get multiple records. Retrieve one or more records, potentially from different indices, in a single API operation. Results will be received in the same order as the requests. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getObjectsParams">Request object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetObjectsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<GetObjectsResponse>> GetObjectsWithHttpInfoAsync(GetObjectsParams getObjectsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'getObjectsParams' is set
      if (getObjectsParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'getObjectsParams' when calling SearchClient->GetObjects");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = getObjectsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<GetObjectsResponse>("/1/indexes/*/objects", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetObjects", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a rule. Get a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <returns>Rule</returns>
    public Rule GetRule(string indexName, string objectID)
    {
      Algolia.Search.Search.Client.ApiResponse<Rule> localVarResponse = GetRuleWithHttpInfo(indexName, objectID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a rule. Get a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <returns>ApiResponse of Rule</returns>
    public Algolia.Search.Search.Client.ApiResponse<Rule> GetRuleWithHttpInfo(string indexName, string objectID)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetRule");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->GetRule");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<Rule>("/1/indexes/{indexName}/rules/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetRule", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a rule. Get a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Rule</returns>
    public async System.Threading.Tasks.Task<Rule> GetRuleAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<Rule> localVarResponse = await GetRuleWithHttpInfoAsync(indexName, objectID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a rule. Get a rule by its &#x60;objectID&#x60;. To find the &#x60;objectID&#x60; for rules, use the [&#x60;search&#x60; operation](#tag/Rules/operation/searchRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Rule)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<Rule>> GetRuleWithHttpInfoAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetRule");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->GetRule");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<Rule>("/1/indexes/{indexName}/rules/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetRule", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get index settings. Return an object containing an index&#39;s [configuration settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <returns>IndexSettings</returns>
    public IndexSettings GetSettings(string indexName)
    {
      Algolia.Search.Search.Client.ApiResponse<IndexSettings> localVarResponse = GetSettingsWithHttpInfo(indexName);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get index settings. Return an object containing an index&#39;s [configuration settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <returns>ApiResponse of IndexSettings</returns>
    public Algolia.Search.Search.Client.ApiResponse<IndexSettings> GetSettingsWithHttpInfo(string indexName)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetSettings");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<IndexSettings>("/1/indexes/{indexName}/settings", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get index settings. Return an object containing an index&#39;s [configuration settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of IndexSettings</returns>
    public async System.Threading.Tasks.Task<IndexSettings> GetSettingsAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<IndexSettings> localVarResponse = await GetSettingsWithHttpInfoAsync(indexName, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get index settings. Return an object containing an index&#39;s [configuration settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (IndexSettings)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<IndexSettings>> GetSettingsWithHttpInfoAsync(string indexName, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetSettings");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<IndexSettings>("/1/indexes/{indexName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSettings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get all allowed IP addresses. Get all allowed sources (IP addresses).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>List&lt;Source&gt;</returns>
    public List<Source> GetSources()
    {
      Algolia.Search.Search.Client.ApiResponse<List<Source>> localVarResponse = GetSourcesWithHttpInfo();
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get all allowed IP addresses. Get all allowed sources (IP addresses).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of List&lt;Source&gt;</returns>
    public Algolia.Search.Search.Client.ApiResponse<List<Source>> GetSourcesWithHttpInfo()
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<List<Source>>("/1/security/sources", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSources", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get all allowed IP addresses. Get all allowed sources (IP addresses).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of List&lt;Source&gt;</returns>
    public async System.Threading.Tasks.Task<List<Source>> GetSourcesAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<List<Source>> localVarResponse = await GetSourcesWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get all allowed IP addresses. Get all allowed sources (IP addresses).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (List&lt;Source&gt;)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<List<Source>>> GetSourcesWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<List<Source>>("/1/security/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSources", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a synonym object. Get a syonym by its &#x60;objectID&#x60;. To find the object IDs for your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <returns>SynonymHit</returns>
    public SynonymHit GetSynonym(string indexName, string objectID)
    {
      Algolia.Search.Search.Client.ApiResponse<SynonymHit> localVarResponse = GetSynonymWithHttpInfo(indexName, objectID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a synonym object. Get a syonym by its &#x60;objectID&#x60;. To find the object IDs for your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <returns>ApiResponse of SynonymHit</returns>
    public Algolia.Search.Search.Client.ApiResponse<SynonymHit> GetSynonymWithHttpInfo(string indexName, string objectID)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetSynonym");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->GetSynonym");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<SynonymHit>("/1/indexes/{indexName}/synonyms/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSynonym", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get a synonym object. Get a syonym by its &#x60;objectID&#x60;. To find the object IDs for your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SynonymHit</returns>
    public async System.Threading.Tasks.Task<SynonymHit> GetSynonymAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SynonymHit> localVarResponse = await GetSynonymWithHttpInfoAsync(indexName, objectID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get a synonym object. Get a syonym by its &#x60;objectID&#x60;. To find the object IDs for your synonyms, use the [&#x60;search&#x60; operation](#tag/Synonyms/operation/searchSynonyms).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SynonymHit)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SynonymHit>> GetSynonymWithHttpInfoAsync(string indexName, string objectID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetSynonym");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->GetSynonym");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<SynonymHit>("/1/indexes/{indexName}/synonyms/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetSynonym", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Check a task's status. Some operations, such as copying an index, will respond with a &#x60;taskID&#x60; value. Use this value here to check the status of that task.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="taskID">Unique task identifier.</param>
    /// <returns>GetTaskResponse</returns>
    public GetTaskResponse GetTask(string indexName, long taskID)
    {
      Algolia.Search.Search.Client.ApiResponse<GetTaskResponse> localVarResponse = GetTaskWithHttpInfo(indexName, taskID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Check a task's status. Some operations, such as copying an index, will respond with a &#x60;taskID&#x60; value. Use this value here to check the status of that task.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="taskID">Unique task identifier.</param>
    /// <returns>ApiResponse of GetTaskResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<GetTaskResponse> GetTaskWithHttpInfo(string indexName, long taskID)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetTask");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<GetTaskResponse>("/1/indexes/{indexName}/task/{taskID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Check a task's status. Some operations, such as copying an index, will respond with a &#x60;taskID&#x60; value. Use this value here to check the status of that task.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="taskID">Unique task identifier.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTaskResponse</returns>
    public async System.Threading.Tasks.Task<GetTaskResponse> GetTaskAsync(string indexName, long taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<GetTaskResponse> localVarResponse = await GetTaskWithHttpInfoAsync(indexName, taskID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Check a task's status. Some operations, such as copying an index, will respond with a &#x60;taskID&#x60; value. Use this value here to check the status of that task.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="taskID">Unique task identifier.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetTaskResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<GetTaskResponse>> GetTaskWithHttpInfoAsync(string indexName, long taskID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->GetTask");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("taskID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(taskID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<GetTaskResponse>("/1/indexes/{indexName}/task/{taskID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetTask", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get top userID. Get the IDs of the 10 users with the highest number of records per cluster. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>GetTopUserIdsResponse</returns>
    public GetTopUserIdsResponse GetTopUserIds()
    {
      Algolia.Search.Search.Client.ApiResponse<GetTopUserIdsResponse> localVarResponse = GetTopUserIdsWithHttpInfo();
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get top userID. Get the IDs of the 10 users with the highest number of records per cluster. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of GetTopUserIdsResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<GetTopUserIdsResponse> GetTopUserIdsWithHttpInfo()
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<GetTopUserIdsResponse>("/1/clusters/mapping/top", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetTopUserIds", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get top userID. Get the IDs of the 10 users with the highest number of records per cluster. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopUserIdsResponse</returns>
    public async System.Threading.Tasks.Task<GetTopUserIdsResponse> GetTopUserIdsAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<GetTopUserIdsResponse> localVarResponse = await GetTopUserIdsWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get top userID. Get the IDs of the 10 users with the highest number of records per cluster. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (GetTopUserIdsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<GetTopUserIdsResponse>> GetTopUserIdsWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<GetTopUserIdsResponse>("/1/clusters/mapping/top", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetTopUserIds", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get userID. Returns the userID data stored in the mapping. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <returns>UserId</returns>
    public UserId GetUserId(string userID)
    {
      Algolia.Search.Search.Client.ApiResponse<UserId> localVarResponse = GetUserIdWithHttpInfo(userID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get userID. Returns the userID data stored in the mapping. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <returns>ApiResponse of UserId</returns>
    public Algolia.Search.Search.Client.ApiResponse<UserId> GetUserIdWithHttpInfo(string userID)
    {
      // verify the required parameter 'userID' is set
      if (userID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'userID' when calling SearchClient->GetUserId");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("userID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(userID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<UserId>("/1/clusters/mapping/{userID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetUserId", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get userID. Returns the userID data stored in the mapping. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UserId</returns>
    public async System.Threading.Tasks.Task<UserId> GetUserIdAsync(string userID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UserId> localVarResponse = await GetUserIdWithHttpInfoAsync(userID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get userID. Returns the userID data stored in the mapping. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UserId)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UserId>> GetUserIdWithHttpInfoAsync(string userID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'userID' is set
      if (userID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'userID' when calling SearchClient->GetUserId");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("userID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(userID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<UserId>("/1/clusters/mapping/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("GetUserId", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get migration and user mapping status. To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getClusters">Indicates whether to include the cluster&#39;s pending mapping state in the response. (optional)</param>
    /// <returns>HasPendingMappingsResponse</returns>
    public HasPendingMappingsResponse HasPendingMappings(bool? getClusters = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<HasPendingMappingsResponse> localVarResponse = HasPendingMappingsWithHttpInfo(getClusters);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get migration and user mapping status. To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getClusters">Indicates whether to include the cluster&#39;s pending mapping state in the response. (optional)</param>
    /// <returns>ApiResponse of HasPendingMappingsResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<HasPendingMappingsResponse> HasPendingMappingsWithHttpInfo(bool? getClusters = default(bool?))
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (getClusters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "getClusters", getClusters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<HasPendingMappingsResponse>("/1/clusters/mapping/pending", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("HasPendingMappings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Get migration and user mapping status. To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getClusters">Indicates whether to include the cluster&#39;s pending mapping state in the response. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of HasPendingMappingsResponse</returns>
    public async System.Threading.Tasks.Task<HasPendingMappingsResponse> HasPendingMappingsAsync(bool? getClusters = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<HasPendingMappingsResponse> localVarResponse = await HasPendingMappingsWithHttpInfoAsync(getClusters, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Get migration and user mapping status. To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="getClusters">Indicates whether to include the cluster&#39;s pending mapping state in the response. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (HasPendingMappingsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<HasPendingMappingsResponse>> HasPendingMappingsWithHttpInfoAsync(bool? getClusters = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (getClusters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "getClusters", getClusters));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<HasPendingMappingsResponse>("/1/clusters/mapping/pending", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("HasPendingMappings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List API keys. List all API keys associated with your Algolia application, including their permissions and restrictions.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ListApiKeysResponse</returns>
    public ListApiKeysResponse ListApiKeys()
    {
      Algolia.Search.Search.Client.ApiResponse<ListApiKeysResponse> localVarResponse = ListApiKeysWithHttpInfo();
      return localVarResponse.Data;
    }

    /// <summary>
    /// List API keys. List all API keys associated with your Algolia application, including their permissions and restrictions.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of ListApiKeysResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<ListApiKeysResponse> ListApiKeysWithHttpInfo()
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListApiKeysResponse>("/1/keys", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ListApiKeys", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List API keys. List all API keys associated with your Algolia application, including their permissions and restrictions.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListApiKeysResponse</returns>
    public async System.Threading.Tasks.Task<ListApiKeysResponse> ListApiKeysAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<ListApiKeysResponse> localVarResponse = await ListApiKeysWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// List API keys. List all API keys associated with your Algolia application, including their permissions and restrictions.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListApiKeysResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<ListApiKeysResponse>> ListApiKeysWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListApiKeysResponse>("/1/keys", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ListApiKeys", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List clusters. List the available clusters in a multi-cluster setup.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ListClustersResponse</returns>
    public ListClustersResponse ListClusters()
    {
      Algolia.Search.Search.Client.ApiResponse<ListClustersResponse> localVarResponse = ListClustersWithHttpInfo();
      return localVarResponse.Data;
    }

    /// <summary>
    /// List clusters. List the available clusters in a multi-cluster setup.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <returns>ApiResponse of ListClustersResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<ListClustersResponse> ListClustersWithHttpInfo()
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListClustersResponse>("/1/clusters", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ListClusters", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List clusters. List the available clusters in a multi-cluster setup.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListClustersResponse</returns>
    public async System.Threading.Tasks.Task<ListClustersResponse> ListClustersAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<ListClustersResponse> localVarResponse = await ListClustersWithHttpInfoAsync(cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// List clusters. List the available clusters in a multi-cluster setup.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListClustersResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<ListClustersResponse>> ListClustersWithHttpInfoAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);


      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListClustersResponse>("/1/clusters", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ListClusters", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List indices. List indices in an Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <returns>ListIndicesResponse</returns>
    public ListIndicesResponse ListIndices(int? page = default(int?), int? hitsPerPage = default(int?))
    {
      Algolia.Search.Search.Client.ApiResponse<ListIndicesResponse> localVarResponse = ListIndicesWithHttpInfo(page, hitsPerPage);
      return localVarResponse.Data;
    }

    /// <summary>
    /// List indices. List indices in an Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <returns>ApiResponse of ListIndicesResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<ListIndicesResponse> ListIndicesWithHttpInfo(int? page = default(int?), int? hitsPerPage = default(int?))
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (hitsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "hitsPerPage", hitsPerPage));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListIndicesResponse>("/1/indexes", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ListIndices", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List indices. List indices in an Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListIndicesResponse</returns>
    public async System.Threading.Tasks.Task<ListIndicesResponse> ListIndicesAsync(int? page = default(int?), int? hitsPerPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<ListIndicesResponse> localVarResponse = await ListIndicesWithHttpInfoAsync(page, hitsPerPage, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// List indices. List indices in an Algolia application.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListIndicesResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<ListIndicesResponse>> ListIndicesWithHttpInfoAsync(int? page = default(int?), int? hitsPerPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (hitsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "hitsPerPage", hitsPerPage));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListIndicesResponse>("/1/indexes", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ListIndices", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List userIDs. List the userIDs assigned to a multi-cluster application. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <returns>ListUserIdsResponse</returns>
    public ListUserIdsResponse ListUserIds(int? page = default(int?), int? hitsPerPage = default(int?))
    {
      Algolia.Search.Search.Client.ApiResponse<ListUserIdsResponse> localVarResponse = ListUserIdsWithHttpInfo(page, hitsPerPage);
      return localVarResponse.Data;
    }

    /// <summary>
    /// List userIDs. List the userIDs assigned to a multi-cluster application. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <returns>ApiResponse of ListUserIdsResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<ListUserIdsResponse> ListUserIdsWithHttpInfo(int? page = default(int?), int? hitsPerPage = default(int?))
    {
      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (hitsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "hitsPerPage", hitsPerPage));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Get<ListUserIdsResponse>("/1/clusters/mapping", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ListUserIds", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// List userIDs. List the userIDs assigned to a multi-cluster application. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ListUserIdsResponse</returns>
    public async System.Threading.Tasks.Task<ListUserIdsResponse> ListUserIdsAsync(int? page = default(int?), int? hitsPerPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<ListUserIdsResponse> localVarResponse = await ListUserIdsWithHttpInfoAsync(page, hitsPerPage, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// List userIDs. List the userIDs assigned to a multi-cluster application. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="page">Returns the requested page number. The page size is determined by the &#x60;hitsPerPage&#x60; parameter. You can see the number of available pages in the &#x60;nbPages&#x60; response attribute. When &#x60;page&#x60; is null, the API response is not paginated.  (optional)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ListUserIdsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<ListUserIdsResponse>> ListUserIdsWithHttpInfoAsync(int? page = default(int?), int? hitsPerPage = default(int?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (hitsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "hitsPerPage", hitsPerPage));
      }

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.GetAsync<ListUserIdsResponse>("/1/clusters/mapping", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ListUserIds", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Batch write operations on multiple indices. To reduce the time spent on network round trips, you can perform several write actions in a single request. It&#39;s a multi-index version of the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). Actions are applied in the order they are specified. The supported actions are equivalent to the individual operations of the same name. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="batchParams"></param>
    /// <returns>MultipleBatchResponse</returns>
    public MultipleBatchResponse MultipleBatch(BatchParams batchParams)
    {
      Algolia.Search.Search.Client.ApiResponse<MultipleBatchResponse> localVarResponse = MultipleBatchWithHttpInfo(batchParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Batch write operations on multiple indices. To reduce the time spent on network round trips, you can perform several write actions in a single request. It&#39;s a multi-index version of the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). Actions are applied in the order they are specified. The supported actions are equivalent to the individual operations of the same name. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="batchParams"></param>
    /// <returns>ApiResponse of MultipleBatchResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<MultipleBatchResponse> MultipleBatchWithHttpInfo(BatchParams batchParams)
    {
      // verify the required parameter 'batchParams' is set
      if (batchParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'batchParams' when calling SearchClient->MultipleBatch");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = batchParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<MultipleBatchResponse>("/1/indexes/*/batch", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("MultipleBatch", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Batch write operations on multiple indices. To reduce the time spent on network round trips, you can perform several write actions in a single request. It&#39;s a multi-index version of the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). Actions are applied in the order they are specified. The supported actions are equivalent to the individual operations of the same name. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="batchParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of MultipleBatchResponse</returns>
    public async System.Threading.Tasks.Task<MultipleBatchResponse> MultipleBatchAsync(BatchParams batchParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<MultipleBatchResponse> localVarResponse = await MultipleBatchWithHttpInfoAsync(batchParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Batch write operations on multiple indices. To reduce the time spent on network round trips, you can perform several write actions in a single request. It&#39;s a multi-index version of the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). Actions are applied in the order they are specified. The supported actions are equivalent to the individual operations of the same name. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="batchParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (MultipleBatchResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<MultipleBatchResponse>> MultipleBatchWithHttpInfoAsync(BatchParams batchParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'batchParams' is set
      if (batchParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'batchParams' when calling SearchClient->MultipleBatch");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = batchParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<MultipleBatchResponse>("/1/indexes/*/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("MultipleBatch", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Copy, move, or rename an index. This &#x60;operation&#x60;, _copy_ or _move_, will copy or move a source index&#39;s (&#x60;IndexName&#x60;) records, settings, synonyms, and rules to a &#x60;destination&#x60; index. If the destination index exists, it will be replaced, except for index-specific API keys and analytics data. If the destination index doesn&#39;t exist, it will be created.  The choice between moving or copying an index depends on your needs. Choose:  - **Move** to rename an index. - **Copy** to create a new index with the same records and configuration as an existing one.  &gt; **Note**: When considering copying or moving, be aware of the [rate limitations](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits) on these processes and the [impact on your analytics data](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/concepts/indices-analytics/).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="operationIndexParams"></param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse OperationIndex(string indexName, OperationIndexParams operationIndexParams)
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = OperationIndexWithHttpInfo(indexName, operationIndexParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Copy, move, or rename an index. This &#x60;operation&#x60;, _copy_ or _move_, will copy or move a source index&#39;s (&#x60;IndexName&#x60;) records, settings, synonyms, and rules to a &#x60;destination&#x60; index. If the destination index exists, it will be replaced, except for index-specific API keys and analytics data. If the destination index doesn&#39;t exist, it will be created.  The choice between moving or copying an index depends on your needs. Choose:  - **Move** to rename an index. - **Copy** to create a new index with the same records and configuration as an existing one.  &gt; **Note**: When considering copying or moving, be aware of the [rate limitations](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits) on these processes and the [impact on your analytics data](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/concepts/indices-analytics/).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="operationIndexParams"></param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> OperationIndexWithHttpInfo(string indexName, OperationIndexParams operationIndexParams)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->OperationIndex");

      // verify the required parameter 'operationIndexParams' is set
      if (operationIndexParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'operationIndexParams' when calling SearchClient->OperationIndex");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = operationIndexParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtResponse>("/1/indexes/{indexName}/operation", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("OperationIndex", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Copy, move, or rename an index. This &#x60;operation&#x60;, _copy_ or _move_, will copy or move a source index&#39;s (&#x60;IndexName&#x60;) records, settings, synonyms, and rules to a &#x60;destination&#x60; index. If the destination index exists, it will be replaced, except for index-specific API keys and analytics data. If the destination index doesn&#39;t exist, it will be created.  The choice between moving or copying an index depends on your needs. Choose:  - **Move** to rename an index. - **Copy** to create a new index with the same records and configuration as an existing one.  &gt; **Note**: When considering copying or moving, be aware of the [rate limitations](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits) on these processes and the [impact on your analytics data](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/concepts/indices-analytics/).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="operationIndexParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> OperationIndexAsync(string indexName, OperationIndexParams operationIndexParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await OperationIndexWithHttpInfoAsync(indexName, operationIndexParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Copy, move, or rename an index. This &#x60;operation&#x60;, _copy_ or _move_, will copy or move a source index&#39;s (&#x60;IndexName&#x60;) records, settings, synonyms, and rules to a &#x60;destination&#x60; index. If the destination index exists, it will be replaced, except for index-specific API keys and analytics data. If the destination index doesn&#39;t exist, it will be created.  The choice between moving or copying an index depends on your needs. Choose:  - **Move** to rename an index. - **Copy** to create a new index with the same records and configuration as an existing one.  &gt; **Note**: When considering copying or moving, be aware of the [rate limitations](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits) on these processes and the [impact on your analytics data](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/concepts/indices-analytics/).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="operationIndexParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> OperationIndexWithHttpInfoAsync(string indexName, OperationIndexParams operationIndexParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->OperationIndex");

      // verify the required parameter 'operationIndexParams' is set
      if (operationIndexParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'operationIndexParams' when calling SearchClient->OperationIndex");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = operationIndexParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtResponse>("/1/indexes/{indexName}/operation", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("OperationIndex", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update record attributes. Add new attributes or update current ones in an existing record. You can use any first-level attribute but not nested attributes. If you specify a [nested attribute](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/creating-and-using-nested-attributes/), the engine treats it as a replacement for its first-level ancestor. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToUpdate">Object with attributes to update.</param>
    /// <param name="createIfNotExists">Indicates whether to create a new record if it doesn&#39;t exist yet.  (optional, default to true)</param>
    /// <returns>UpdatedAtWithObjectIdResponse</returns>
    public UpdatedAtWithObjectIdResponse PartialUpdateObject(string indexName, string objectID, Dictionary<string, AttributeToUpdate> attributesToUpdate, bool? createIfNotExists = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtWithObjectIdResponse> localVarResponse = PartialUpdateObjectWithHttpInfo(indexName, objectID, attributesToUpdate, createIfNotExists);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update record attributes. Add new attributes or update current ones in an existing record. You can use any first-level attribute but not nested attributes. If you specify a [nested attribute](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/creating-and-using-nested-attributes/), the engine treats it as a replacement for its first-level ancestor. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToUpdate">Object with attributes to update.</param>
    /// <param name="createIfNotExists">Indicates whether to create a new record if it doesn&#39;t exist yet.  (optional, default to true)</param>
    /// <returns>ApiResponse of UpdatedAtWithObjectIdResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtWithObjectIdResponse> PartialUpdateObjectWithHttpInfo(string indexName, string objectID, Dictionary<string, AttributeToUpdate> attributesToUpdate, bool? createIfNotExists = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->PartialUpdateObject");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->PartialUpdateObject");

      // verify the required parameter 'attributesToUpdate' is set
      if (attributesToUpdate == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'attributesToUpdate' when calling SearchClient->PartialUpdateObject");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (createIfNotExists != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "createIfNotExists", createIfNotExists));
      }
      localVarRequestOptions.Data = attributesToUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtWithObjectIdResponse>("/1/indexes/{indexName}/{objectID}/partial", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("PartialUpdateObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update record attributes. Add new attributes or update current ones in an existing record. You can use any first-level attribute but not nested attributes. If you specify a [nested attribute](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/creating-and-using-nested-attributes/), the engine treats it as a replacement for its first-level ancestor. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToUpdate">Object with attributes to update.</param>
    /// <param name="createIfNotExists">Indicates whether to create a new record if it doesn&#39;t exist yet.  (optional, default to true)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtWithObjectIdResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtWithObjectIdResponse> PartialUpdateObjectAsync(string indexName, string objectID, Dictionary<string, AttributeToUpdate> attributesToUpdate, bool? createIfNotExists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtWithObjectIdResponse> localVarResponse = await PartialUpdateObjectWithHttpInfoAsync(indexName, objectID, attributesToUpdate, createIfNotExists, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update record attributes. Add new attributes or update current ones in an existing record. You can use any first-level attribute but not nested attributes. If you specify a [nested attribute](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/creating-and-using-nested-attributes/), the engine treats it as a replacement for its first-level ancestor. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique record (object) identifier.</param>
    /// <param name="attributesToUpdate">Object with attributes to update.</param>
    /// <param name="createIfNotExists">Indicates whether to create a new record if it doesn&#39;t exist yet.  (optional, default to true)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtWithObjectIdResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtWithObjectIdResponse>> PartialUpdateObjectWithHttpInfoAsync(string indexName, string objectID, Dictionary<string, AttributeToUpdate> attributesToUpdate, bool? createIfNotExists = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->PartialUpdateObject");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->PartialUpdateObject");

      // verify the required parameter 'attributesToUpdate' is set
      if (attributesToUpdate == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'attributesToUpdate' when calling SearchClient->PartialUpdateObject");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (createIfNotExists != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "createIfNotExists", createIfNotExists));
      }
      localVarRequestOptions.Data = attributesToUpdate;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtWithObjectIdResponse>("/1/indexes/{indexName}/{objectID}/partial", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("PartialUpdateObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>Object</returns>
    public Object Post(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      Algolia.Search.Search.Client.ApiResponse<Object> localVarResponse = PostWithHttpInfo(path, parameters, body);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.Search.Client.ApiResponse<Object> PostWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'path' when calling SearchClient->Post");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Search.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Post", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> PostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<Object> localVarResponse = await PostWithHttpInfoAsync(path, parameters, body, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<Object>> PostWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'path' when calling SearchClient->Post");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Search.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Post", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>Object</returns>
    public Object Put(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      Algolia.Search.Search.Client.ApiResponse<Object> localVarResponse = PutWithHttpInfo(path, parameters, body);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <returns>ApiResponse of Object</returns>
    public Algolia.Search.Search.Client.ApiResponse<Object> PutWithHttpInfo(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'path' when calling SearchClient->Put");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Search.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<Object>("/1{path}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Put", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async System.Threading.Tasks.Task<Object> PutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<Object> localVarResponse = await PutWithHttpInfoAsync(path, parameters, body, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (Object)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<Object>> PutWithHttpInfoAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'path' when calling SearchClient->Put");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("path", Algolia.Search.Search.Client.ClientUtils.ParameterToString(path)); // path parameter
      if (parameters != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "parameters", parameters));
      }
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/1{path}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Put", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Remove userID. Remove a userID and its associated data from the multi-clusters.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <returns>RemoveUserIdResponse</returns>
    public RemoveUserIdResponse RemoveUserId(string userID)
    {
      Algolia.Search.Search.Client.ApiResponse<RemoveUserIdResponse> localVarResponse = RemoveUserIdWithHttpInfo(userID);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Remove userID. Remove a userID and its associated data from the multi-clusters.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <returns>ApiResponse of RemoveUserIdResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<RemoveUserIdResponse> RemoveUserIdWithHttpInfo(string userID)
    {
      // verify the required parameter 'userID' is set
      if (userID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'userID' when calling SearchClient->RemoveUserId");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("userID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(userID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Delete<RemoveUserIdResponse>("/1/clusters/mapping/{userID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("RemoveUserId", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Remove userID. Remove a userID and its associated data from the multi-clusters.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of RemoveUserIdResponse</returns>
    public async System.Threading.Tasks.Task<RemoveUserIdResponse> RemoveUserIdAsync(string userID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<RemoveUserIdResponse> localVarResponse = await RemoveUserIdWithHttpInfoAsync(userID, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Remove userID. Remove a userID and its associated data from the multi-clusters.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="userID">userID to assign.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (RemoveUserIdResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<RemoveUserIdResponse>> RemoveUserIdWithHttpInfoAsync(string userID, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'userID' is set
      if (userID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'userID' when calling SearchClient->RemoveUserId");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("userID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(userID)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.DeleteAsync<RemoveUserIdResponse>("/1/clusters/mapping/{userID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("RemoveUserId", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Replace all sources. Replace all allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Allowed sources.</param>
    /// <returns>ReplaceSourceResponse</returns>
    public ReplaceSourceResponse ReplaceSources(List<Source> source)
    {
      Algolia.Search.Search.Client.ApiResponse<ReplaceSourceResponse> localVarResponse = ReplaceSourcesWithHttpInfo(source);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Replace all sources. Replace all allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Allowed sources.</param>
    /// <returns>ApiResponse of ReplaceSourceResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<ReplaceSourceResponse> ReplaceSourcesWithHttpInfo(List<Source> source)
    {
      // verify the required parameter 'source' is set
      if (source == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'source' when calling SearchClient->ReplaceSources");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = source;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<ReplaceSourceResponse>("/1/security/sources", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ReplaceSources", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Replace all sources. Replace all allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Allowed sources.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ReplaceSourceResponse</returns>
    public async System.Threading.Tasks.Task<ReplaceSourceResponse> ReplaceSourcesAsync(List<Source> source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<ReplaceSourceResponse> localVarResponse = await ReplaceSourcesWithHttpInfoAsync(source, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Replace all sources. Replace all allowed sources.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="source">Allowed sources.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (ReplaceSourceResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<ReplaceSourceResponse>> ReplaceSourcesWithHttpInfoAsync(List<Source> source, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'source' is set
      if (source == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'source' when calling SearchClient->ReplaceSources");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = source;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<ReplaceSourceResponse>("/1/security/sources", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("ReplaceSources", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Restore API key. Restore a deleted API key, along with its associated permissions. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <returns>AddApiKeyResponse</returns>
    public AddApiKeyResponse RestoreApiKey(string key)
    {
      Algolia.Search.Search.Client.ApiResponse<AddApiKeyResponse> localVarResponse = RestoreApiKeyWithHttpInfo(key);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Restore API key. Restore a deleted API key, along with its associated permissions. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <returns>ApiResponse of AddApiKeyResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<AddApiKeyResponse> RestoreApiKeyWithHttpInfo(string key)
    {
      // verify the required parameter 'key' is set
      if (key == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'key' when calling SearchClient->RestoreApiKey");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("key", Algolia.Search.Search.Client.ClientUtils.ParameterToString(key)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<AddApiKeyResponse>("/1/keys/{key}/restore", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("RestoreApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Restore API key. Restore a deleted API key, along with its associated permissions. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of AddApiKeyResponse</returns>
    public async System.Threading.Tasks.Task<AddApiKeyResponse> RestoreApiKeyAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<AddApiKeyResponse> localVarResponse = await RestoreApiKeyWithHttpInfoAsync(key, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Restore API key. Restore a deleted API key, along with its associated permissions. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (AddApiKeyResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<AddApiKeyResponse>> RestoreApiKeyWithHttpInfoAsync(string key, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'key' is set
      if (key == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'key' when calling SearchClient->RestoreApiKey");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("key", Algolia.Search.Search.Client.ClientUtils.ParameterToString(key)); // path parameter

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<AddApiKeyResponse>("/1/keys/{key}/restore", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("RestoreApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Add or update a record. Add a record (object) to an index or replace it. If the record doesn&#39;t contain an &#x60;objectID&#x60;, Algolia automatically adds it. If you use an existing &#x60;objectID&#x60;, the existing record is replaced with the new one. To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="body">The Algolia record.</param>
    /// <returns>SaveObjectResponse</returns>
    public SaveObjectResponse SaveObject(string indexName, Object body)
    {
      Algolia.Search.Search.Client.ApiResponse<SaveObjectResponse> localVarResponse = SaveObjectWithHttpInfo(indexName, body);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Add or update a record. Add a record (object) to an index or replace it. If the record doesn&#39;t contain an &#x60;objectID&#x60;, Algolia automatically adds it. If you use an existing &#x60;objectID&#x60;, the existing record is replaced with the new one. To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="body">The Algolia record.</param>
    /// <returns>ApiResponse of SaveObjectResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<SaveObjectResponse> SaveObjectWithHttpInfo(string indexName, Object body)
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveObject");

      // verify the required parameter 'body' is set
      if (body == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchClient->SaveObject");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<SaveObjectResponse>("/1/indexes/{indexName}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Add or update a record. Add a record (object) to an index or replace it. If the record doesn&#39;t contain an &#x60;objectID&#x60;, Algolia automatically adds it. If you use an existing &#x60;objectID&#x60;, the existing record is replaced with the new one. To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="body">The Algolia record.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SaveObjectResponse</returns>
    public async System.Threading.Tasks.Task<SaveObjectResponse> SaveObjectAsync(string indexName, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SaveObjectResponse> localVarResponse = await SaveObjectWithHttpInfoAsync(indexName, body, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Add or update a record. Add a record (object) to an index or replace it. If the record doesn&#39;t contain an &#x60;objectID&#x60;, Algolia automatically adds it. If you use an existing &#x60;objectID&#x60;, the existing record is replaced with the new one. To add multiple records to your index in a single API request, use the [&#x60;batch&#x60; operation](#tag/Records/operation/batch). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="body">The Algolia record.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SaveObjectResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SaveObjectResponse>> SaveObjectWithHttpInfoAsync(string indexName, Object body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveObject");

      // verify the required parameter 'body' is set
      if (body == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'body' when calling SearchClient->SaveObject");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = body;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<SaveObjectResponse>("/1/indexes/{indexName}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveObject", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create or update a rule. To create or update more than one rule, use the [&#x60;batch&#x60; operation](#tag/Rules/operation/saveRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="rule"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>UpdatedRuleResponse</returns>
    public UpdatedRuleResponse SaveRule(string indexName, string objectID, Rule rule, bool? forwardToReplicas = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedRuleResponse> localVarResponse = SaveRuleWithHttpInfo(indexName, objectID, rule, forwardToReplicas);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create or update a rule. To create or update more than one rule, use the [&#x60;batch&#x60; operation](#tag/Rules/operation/saveRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="rule"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>ApiResponse of UpdatedRuleResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedRuleResponse> SaveRuleWithHttpInfo(string indexName, string objectID, Rule rule, bool? forwardToReplicas = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveRule");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->SaveRule");

      // verify the required parameter 'rule' is set
      if (rule == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'rule' when calling SearchClient->SaveRule");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      localVarRequestOptions.Data = rule;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<UpdatedRuleResponse>("/1/indexes/{indexName}/rules/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveRule", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Create or update a rule. To create or update more than one rule, use the [&#x60;batch&#x60; operation](#tag/Rules/operation/saveRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="rule"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedRuleResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedRuleResponse> SaveRuleAsync(string indexName, string objectID, Rule rule, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedRuleResponse> localVarResponse = await SaveRuleWithHttpInfoAsync(indexName, objectID, rule, forwardToReplicas, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Create or update a rule. To create or update more than one rule, use the [&#x60;batch&#x60; operation](#tag/Rules/operation/saveRules).
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a rule object.</param>
    /// <param name="rule"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedRuleResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedRuleResponse>> SaveRuleWithHttpInfoAsync(string indexName, string objectID, Rule rule, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveRule");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->SaveRule");

      // verify the required parameter 'rule' is set
      if (rule == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'rule' when calling SearchClient->SaveRule");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      localVarRequestOptions.Data = rule;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatedRuleResponse>("/1/indexes/{indexName}/rules/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveRule", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Save a batch of rules. Create or update multiple rules.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="rules"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="clearExistingRules">Indicates whether existing rules should be deleted before adding this batch. (optional)</param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse SaveRules(string indexName, List<Rule> rules, bool? forwardToReplicas = default(bool?), bool? clearExistingRules = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = SaveRulesWithHttpInfo(indexName, rules, forwardToReplicas, clearExistingRules);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Save a batch of rules. Create or update multiple rules.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="rules"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="clearExistingRules">Indicates whether existing rules should be deleted before adding this batch. (optional)</param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> SaveRulesWithHttpInfo(string indexName, List<Rule> rules, bool? forwardToReplicas = default(bool?), bool? clearExistingRules = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveRules");

      // verify the required parameter 'rules' is set
      if (rules == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'rules' when calling SearchClient->SaveRules");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      if (clearExistingRules != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "clearExistingRules", clearExistingRules));
      }
      localVarRequestOptions.Data = rules;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtResponse>("/1/indexes/{indexName}/rules/batch", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveRules", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Save a batch of rules. Create or update multiple rules.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="rules"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="clearExistingRules">Indicates whether existing rules should be deleted before adding this batch. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> SaveRulesAsync(string indexName, List<Rule> rules, bool? forwardToReplicas = default(bool?), bool? clearExistingRules = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await SaveRulesWithHttpInfoAsync(indexName, rules, forwardToReplicas, clearExistingRules, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Save a batch of rules. Create or update multiple rules.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="rules"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="clearExistingRules">Indicates whether existing rules should be deleted before adding this batch. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> SaveRulesWithHttpInfoAsync(string indexName, List<Rule> rules, bool? forwardToReplicas = default(bool?), bool? clearExistingRules = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveRules");

      // verify the required parameter 'rules' is set
      if (rules == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'rules' when calling SearchClient->SaveRules");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      if (clearExistingRules != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "clearExistingRules", clearExistingRules));
      }
      localVarRequestOptions.Data = rules;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtResponse>("/1/indexes/{indexName}/rules/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveRules", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Save a synonym. Add a [synonym](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms) to an index or replace it. If the synonym &#x60;objectID&#x60; doesn&#39;t exist, Algolia adds a new one. If you use an existing synonym &#x60;objectID&#x60;, the existing synonym is replaced with the new one. To add multiple synonyms in a single API request, use the [&#x60;batch&#x60; operation](#tag/Synonyms/operation/saveSynonyms). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>SaveSynonymResponse</returns>
    public SaveSynonymResponse SaveSynonym(string indexName, string objectID, SynonymHit synonymHit, bool? forwardToReplicas = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<SaveSynonymResponse> localVarResponse = SaveSynonymWithHttpInfo(indexName, objectID, synonymHit, forwardToReplicas);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Save a synonym. Add a [synonym](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms) to an index or replace it. If the synonym &#x60;objectID&#x60; doesn&#39;t exist, Algolia adds a new one. If you use an existing synonym &#x60;objectID&#x60;, the existing synonym is replaced with the new one. To add multiple synonyms in a single API request, use the [&#x60;batch&#x60; operation](#tag/Synonyms/operation/saveSynonyms). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>ApiResponse of SaveSynonymResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<SaveSynonymResponse> SaveSynonymWithHttpInfo(string indexName, string objectID, SynonymHit synonymHit, bool? forwardToReplicas = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveSynonym");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->SaveSynonym");

      // verify the required parameter 'synonymHit' is set
      if (synonymHit == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'synonymHit' when calling SearchClient->SaveSynonym");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      localVarRequestOptions.Data = synonymHit;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<SaveSynonymResponse>("/1/indexes/{indexName}/synonyms/{objectID}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveSynonym", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Save a synonym. Add a [synonym](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms) to an index or replace it. If the synonym &#x60;objectID&#x60; doesn&#39;t exist, Algolia adds a new one. If you use an existing synonym &#x60;objectID&#x60;, the existing synonym is replaced with the new one. To add multiple synonyms in a single API request, use the [&#x60;batch&#x60; operation](#tag/Synonyms/operation/saveSynonyms). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SaveSynonymResponse</returns>
    public async System.Threading.Tasks.Task<SaveSynonymResponse> SaveSynonymAsync(string indexName, string objectID, SynonymHit synonymHit, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SaveSynonymResponse> localVarResponse = await SaveSynonymWithHttpInfoAsync(indexName, objectID, synonymHit, forwardToReplicas, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Save a synonym. Add a [synonym](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms) to an index or replace it. If the synonym &#x60;objectID&#x60; doesn&#39;t exist, Algolia adds a new one. If you use an existing synonym &#x60;objectID&#x60;, the existing synonym is replaced with the new one. To add multiple synonyms in a single API request, use the [&#x60;batch&#x60; operation](#tag/Synonyms/operation/saveSynonyms). 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="objectID">Unique identifier of a synonym object.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SaveSynonymResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SaveSynonymResponse>> SaveSynonymWithHttpInfoAsync(string indexName, string objectID, SynonymHit synonymHit, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveSynonym");

      // verify the required parameter 'objectID' is set
      if (objectID == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'objectID' when calling SearchClient->SaveSynonym");

      // verify the required parameter 'synonymHit' is set
      if (synonymHit == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'synonymHit' when calling SearchClient->SaveSynonym");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("objectID", Algolia.Search.Search.Client.ClientUtils.ParameterToString(objectID)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      localVarRequestOptions.Data = synonymHit;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<SaveSynonymResponse>("/1/indexes/{indexName}/synonyms/{objectID}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveSynonym", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Save a batch of synonyms. Create or update multiple synonyms.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="replaceExistingSynonyms">Indicates whether to replace all synonyms in the index with the ones sent with this request. (optional)</param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse SaveSynonyms(string indexName, List<SynonymHit> synonymHit, bool? forwardToReplicas = default(bool?), bool? replaceExistingSynonyms = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = SaveSynonymsWithHttpInfo(indexName, synonymHit, forwardToReplicas, replaceExistingSynonyms);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Save a batch of synonyms. Create or update multiple synonyms.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="replaceExistingSynonyms">Indicates whether to replace all synonyms in the index with the ones sent with this request. (optional)</param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> SaveSynonymsWithHttpInfo(string indexName, List<SynonymHit> synonymHit, bool? forwardToReplicas = default(bool?), bool? replaceExistingSynonyms = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveSynonyms");

      // verify the required parameter 'synonymHit' is set
      if (synonymHit == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'synonymHit' when calling SearchClient->SaveSynonyms");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      if (replaceExistingSynonyms != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "replaceExistingSynonyms", replaceExistingSynonyms));
      }
      localVarRequestOptions.Data = synonymHit;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtResponse>("/1/indexes/{indexName}/synonyms/batch", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveSynonyms", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Save a batch of synonyms. Create or update multiple synonyms.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="replaceExistingSynonyms">Indicates whether to replace all synonyms in the index with the ones sent with this request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> SaveSynonymsAsync(string indexName, List<SynonymHit> synonymHit, bool? forwardToReplicas = default(bool?), bool? replaceExistingSynonyms = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await SaveSynonymsWithHttpInfoAsync(indexName, synonymHit, forwardToReplicas, replaceExistingSynonyms, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Save a batch of synonyms. Create or update multiple synonyms.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="synonymHit"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="replaceExistingSynonyms">Indicates whether to replace all synonyms in the index with the ones sent with this request. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> SaveSynonymsWithHttpInfoAsync(string indexName, List<SynonymHit> synonymHit, bool? forwardToReplicas = default(bool?), bool? replaceExistingSynonyms = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SaveSynonyms");

      // verify the required parameter 'synonymHit' is set
      if (synonymHit == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'synonymHit' when calling SearchClient->SaveSynonyms");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      if (replaceExistingSynonyms != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "replaceExistingSynonyms", replaceExistingSynonyms));
      }
      localVarRequestOptions.Data = synonymHit;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtResponse>("/1/indexes/{indexName}/synonyms/batch", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SaveSynonyms", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search multiple indices. Send multiple search queries to one or more indices.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchMethodParams">Query requests and strategies. Results will be received in the same order as the queries.</param>
    /// <returns>SearchResponses</returns>
    public SearchResponses Search(SearchMethodParams searchMethodParams)
    {
      Algolia.Search.Search.Client.ApiResponse<SearchResponses> localVarResponse = SearchWithHttpInfo(searchMethodParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search multiple indices. Send multiple search queries to one or more indices.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchMethodParams">Query requests and strategies. Results will be received in the same order as the queries.</param>
    /// <returns>ApiResponse of SearchResponses</returns>
    public Algolia.Search.Search.Client.ApiResponse<SearchResponses> SearchWithHttpInfo(SearchMethodParams searchMethodParams)
    {
      // verify the required parameter 'searchMethodParams' is set
      if (searchMethodParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'searchMethodParams' when calling SearchClient->Search");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = searchMethodParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<SearchResponses>("/1/indexes/*/queries", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Search", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search multiple indices. Send multiple search queries to one or more indices.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchMethodParams">Query requests and strategies. Results will be received in the same order as the queries.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchResponses</returns>
    public async System.Threading.Tasks.Task<SearchResponses> SearchAsync(SearchMethodParams searchMethodParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchResponses> localVarResponse = await SearchWithHttpInfoAsync(searchMethodParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search multiple indices. Send multiple search queries to one or more indices.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchMethodParams">Query requests and strategies. Results will be received in the same order as the queries.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchResponses)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SearchResponses>> SearchWithHttpInfoAsync(SearchMethodParams searchMethodParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'searchMethodParams' is set
      if (searchMethodParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'searchMethodParams' when calling SearchClient->Search");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = searchMethodParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResponses>("/1/indexes/*/queries", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("Search", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search dictionary entries. Search for standard and [custom](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/) entries in the [stop words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), or [segmentation (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) dictionaries.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="searchDictionaryEntriesParams"></param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse SearchDictionaryEntries(DictionaryType dictionaryName, SearchDictionaryEntriesParams searchDictionaryEntriesParams)
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = SearchDictionaryEntriesWithHttpInfo(dictionaryName, searchDictionaryEntriesParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search dictionary entries. Search for standard and [custom](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/) entries in the [stop words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), or [segmentation (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) dictionaries.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="searchDictionaryEntriesParams"></param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> SearchDictionaryEntriesWithHttpInfo(DictionaryType dictionaryName, SearchDictionaryEntriesParams searchDictionaryEntriesParams)
    {
      // verify the required parameter 'dictionaryName' is set
      if (dictionaryName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'dictionaryName' when calling SearchClient->SearchDictionaryEntries");

      // verify the required parameter 'searchDictionaryEntriesParams' is set
      if (searchDictionaryEntriesParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'searchDictionaryEntriesParams' when calling SearchClient->SearchDictionaryEntries");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("dictionaryName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(dictionaryName)); // path parameter
      localVarRequestOptions.Data = searchDictionaryEntriesParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<UpdatedAtResponse>("/1/dictionaries/{dictionaryName}/search", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchDictionaryEntries", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search dictionary entries. Search for standard and [custom](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/) entries in the [stop words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), or [segmentation (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) dictionaries.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="searchDictionaryEntriesParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> SearchDictionaryEntriesAsync(DictionaryType dictionaryName, SearchDictionaryEntriesParams searchDictionaryEntriesParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await SearchDictionaryEntriesWithHttpInfoAsync(dictionaryName, searchDictionaryEntriesParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search dictionary entries. Search for standard and [custom](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/) entries in the [stop words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/), [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/), or [segmentation (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) dictionaries.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionaryName">Dictionary to search in.</param>
    /// <param name="searchDictionaryEntriesParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> SearchDictionaryEntriesWithHttpInfoAsync(DictionaryType dictionaryName, SearchDictionaryEntriesParams searchDictionaryEntriesParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'dictionaryName' is set
      if (dictionaryName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'dictionaryName' when calling SearchClient->SearchDictionaryEntries");

      // verify the required parameter 'searchDictionaryEntriesParams' is set
      if (searchDictionaryEntriesParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'searchDictionaryEntriesParams' when calling SearchClient->SearchDictionaryEntries");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("dictionaryName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(dictionaryName)); // path parameter
      localVarRequestOptions.Data = searchDictionaryEntriesParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<UpdatedAtResponse>("/1/dictionaries/{dictionaryName}/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchDictionaryEntries", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search for facet values. [Search for a facet&#39;s values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values), optionally restricting the returned values to those contained in records matching other search criteria. &gt; **Note**: Pagination isn&#39;t supported (&#x60;page&#x60; and &#x60;hitsPerPage&#x60; are ignored). By default, the engine returns a maximum of 10 values but you can adjust this with &#x60;maxFacetHits&#x60;. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="facetName">Facet name.</param>
    /// <param name="searchForFacetValuesRequest"> (optional)</param>
    /// <returns>SearchForFacetValuesResponse</returns>
    public SearchForFacetValuesResponse SearchForFacetValues(string indexName, string facetName, SearchForFacetValuesRequest searchForFacetValuesRequest = default(SearchForFacetValuesRequest))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchForFacetValuesResponse> localVarResponse = SearchForFacetValuesWithHttpInfo(indexName, facetName, searchForFacetValuesRequest);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search for facet values. [Search for a facet&#39;s values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values), optionally restricting the returned values to those contained in records matching other search criteria. &gt; **Note**: Pagination isn&#39;t supported (&#x60;page&#x60; and &#x60;hitsPerPage&#x60; are ignored). By default, the engine returns a maximum of 10 values but you can adjust this with &#x60;maxFacetHits&#x60;. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="facetName">Facet name.</param>
    /// <param name="searchForFacetValuesRequest"> (optional)</param>
    /// <returns>ApiResponse of SearchForFacetValuesResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<SearchForFacetValuesResponse> SearchForFacetValuesWithHttpInfo(string indexName, string facetName, SearchForFacetValuesRequest searchForFacetValuesRequest = default(SearchForFacetValuesRequest))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SearchForFacetValues");

      // verify the required parameter 'facetName' is set
      if (facetName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'facetName' when calling SearchClient->SearchForFacetValues");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("facetName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(facetName)); // path parameter
      localVarRequestOptions.Data = searchForFacetValuesRequest;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<SearchForFacetValuesResponse>("/1/indexes/{indexName}/facets/{facetName}/query", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchForFacetValues", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search for facet values. [Search for a facet&#39;s values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values), optionally restricting the returned values to those contained in records matching other search criteria. &gt; **Note**: Pagination isn&#39;t supported (&#x60;page&#x60; and &#x60;hitsPerPage&#x60; are ignored). By default, the engine returns a maximum of 10 values but you can adjust this with &#x60;maxFacetHits&#x60;. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="facetName">Facet name.</param>
    /// <param name="searchForFacetValuesRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchForFacetValuesResponse</returns>
    public async System.Threading.Tasks.Task<SearchForFacetValuesResponse> SearchForFacetValuesAsync(string indexName, string facetName, SearchForFacetValuesRequest searchForFacetValuesRequest = default(SearchForFacetValuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchForFacetValuesResponse> localVarResponse = await SearchForFacetValuesWithHttpInfoAsync(indexName, facetName, searchForFacetValuesRequest, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search for facet values. [Search for a facet&#39;s values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values), optionally restricting the returned values to those contained in records matching other search criteria. &gt; **Note**: Pagination isn&#39;t supported (&#x60;page&#x60; and &#x60;hitsPerPage&#x60; are ignored). By default, the engine returns a maximum of 10 values but you can adjust this with &#x60;maxFacetHits&#x60;. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="facetName">Facet name.</param>
    /// <param name="searchForFacetValuesRequest"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchForFacetValuesResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SearchForFacetValuesResponse>> SearchForFacetValuesWithHttpInfoAsync(string indexName, string facetName, SearchForFacetValuesRequest searchForFacetValuesRequest = default(SearchForFacetValuesRequest), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SearchForFacetValues");

      // verify the required parameter 'facetName' is set
      if (facetName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'facetName' when calling SearchClient->SearchForFacetValues");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.PathParameters.Add("facetName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(facetName)); // path parameter
      localVarRequestOptions.Data = searchForFacetValuesRequest;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<SearchForFacetValuesResponse>("/1/indexes/{indexName}/facets/{facetName}/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchForFacetValues", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search for rules. Search for rules in your index. You can control the search with parameters. To list all rules, send an empty request body.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchRulesParams"> (optional)</param>
    /// <returns>SearchRulesResponse</returns>
    public SearchRulesResponse SearchRules(string indexName, SearchRulesParams searchRulesParams = default(SearchRulesParams))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchRulesResponse> localVarResponse = SearchRulesWithHttpInfo(indexName, searchRulesParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search for rules. Search for rules in your index. You can control the search with parameters. To list all rules, send an empty request body.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchRulesParams"> (optional)</param>
    /// <returns>ApiResponse of SearchRulesResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<SearchRulesResponse> SearchRulesWithHttpInfo(string indexName, SearchRulesParams searchRulesParams = default(SearchRulesParams))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SearchRules");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = searchRulesParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<SearchRulesResponse>("/1/indexes/{indexName}/rules/search", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchRules", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search for rules. Search for rules in your index. You can control the search with parameters. To list all rules, send an empty request body.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchRulesParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchRulesResponse</returns>
    public async System.Threading.Tasks.Task<SearchRulesResponse> SearchRulesAsync(string indexName, SearchRulesParams searchRulesParams = default(SearchRulesParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchRulesResponse> localVarResponse = await SearchRulesWithHttpInfoAsync(indexName, searchRulesParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search for rules. Search for rules in your index. You can control the search with parameters. To list all rules, send an empty request body.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchRulesParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchRulesResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SearchRulesResponse>> SearchRulesWithHttpInfoAsync(string indexName, SearchRulesParams searchRulesParams = default(SearchRulesParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SearchRules");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = searchRulesParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<SearchRulesResponse>("/1/indexes/{indexName}/rules/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchRules", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search an index. Return records that match the query.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchParams"> (optional)</param>
    /// <returns>SearchResponse</returns>
    public SearchResponse SearchSingleIndex(string indexName, SearchParams searchParams = default(SearchParams))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchResponse> localVarResponse = SearchSingleIndexWithHttpInfo(indexName, searchParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search an index. Return records that match the query.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchParams"> (optional)</param>
    /// <returns>ApiResponse of SearchResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<SearchResponse> SearchSingleIndexWithHttpInfo(string indexName, SearchParams searchParams = default(SearchParams))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SearchSingleIndex");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = searchParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<SearchResponse>("/1/indexes/{indexName}/query", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchSingleIndex", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search an index. Return records that match the query.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchResponse</returns>
    public async System.Threading.Tasks.Task<SearchResponse> SearchSingleIndexAsync(string indexName, SearchParams searchParams = default(SearchParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchResponse> localVarResponse = await SearchSingleIndexWithHttpInfoAsync(indexName, searchParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search an index. Return records that match the query.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="searchParams"> (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SearchResponse>> SearchSingleIndexWithHttpInfoAsync(string indexName, SearchParams searchParams = default(SearchParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SearchSingleIndex");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      localVarRequestOptions.Data = searchParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<SearchResponse>("/1/indexes/{indexName}/query", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchSingleIndex", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search for synonyms. Search for synonyms in your index. You can control and filter the search with parameters. To get all synonyms, send an empty request body.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="type">Search for specific [types of synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms). (optional)</param>
    /// <param name="page">Returns the requested page number (the first page is 0). Page size is set by &#x60;hitsPerPage&#x60;. When null, there&#39;s no pagination.  (optional, default to 0)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="searchSynonymsParams">Body of the &#x60;searchSynonyms&#x60; operation. (optional)</param>
    /// <returns>SearchSynonymsResponse</returns>
    public SearchSynonymsResponse SearchSynonyms(string indexName, SynonymType type = default(SynonymType), int? page = default(int?), int? hitsPerPage = default(int?), SearchSynonymsParams searchSynonymsParams = default(SearchSynonymsParams))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchSynonymsResponse> localVarResponse = SearchSynonymsWithHttpInfo(indexName, type, page, hitsPerPage, searchSynonymsParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search for synonyms. Search for synonyms in your index. You can control and filter the search with parameters. To get all synonyms, send an empty request body.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="type">Search for specific [types of synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms). (optional)</param>
    /// <param name="page">Returns the requested page number (the first page is 0). Page size is set by &#x60;hitsPerPage&#x60;. When null, there&#39;s no pagination.  (optional, default to 0)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="searchSynonymsParams">Body of the &#x60;searchSynonyms&#x60; operation. (optional)</param>
    /// <returns>ApiResponse of SearchSynonymsResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<SearchSynonymsResponse> SearchSynonymsWithHttpInfo(string indexName, SynonymType type = default(SynonymType), int? page = default(int?), int? hitsPerPage = default(int?), SearchSynonymsParams searchSynonymsParams = default(SearchSynonymsParams))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SearchSynonyms");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "type", type));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (hitsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "hitsPerPage", hitsPerPage));
      }
      localVarRequestOptions.Data = searchSynonymsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<SearchSynonymsResponse>("/1/indexes/{indexName}/synonyms/search", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchSynonyms", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search for synonyms. Search for synonyms in your index. You can control and filter the search with parameters. To get all synonyms, send an empty request body.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="type">Search for specific [types of synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms). (optional)</param>
    /// <param name="page">Returns the requested page number (the first page is 0). Page size is set by &#x60;hitsPerPage&#x60;. When null, there&#39;s no pagination.  (optional, default to 0)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="searchSynonymsParams">Body of the &#x60;searchSynonyms&#x60; operation. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchSynonymsResponse</returns>
    public async System.Threading.Tasks.Task<SearchSynonymsResponse> SearchSynonymsAsync(string indexName, SynonymType type = default(SynonymType), int? page = default(int?), int? hitsPerPage = default(int?), SearchSynonymsParams searchSynonymsParams = default(SearchSynonymsParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchSynonymsResponse> localVarResponse = await SearchSynonymsWithHttpInfoAsync(indexName, type, page, hitsPerPage, searchSynonymsParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search for synonyms. Search for synonyms in your index. You can control and filter the search with parameters. To get all synonyms, send an empty request body.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="type">Search for specific [types of synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms). (optional)</param>
    /// <param name="page">Returns the requested page number (the first page is 0). Page size is set by &#x60;hitsPerPage&#x60;. When null, there&#39;s no pagination.  (optional, default to 0)</param>
    /// <param name="hitsPerPage">Maximum number of hits per page. (optional, default to 100)</param>
    /// <param name="searchSynonymsParams">Body of the &#x60;searchSynonyms&#x60; operation. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchSynonymsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SearchSynonymsResponse>> SearchSynonymsWithHttpInfoAsync(string indexName, SynonymType type = default(SynonymType), int? page = default(int?), int? hitsPerPage = default(int?), SearchSynonymsParams searchSynonymsParams = default(SearchSynonymsParams), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SearchSynonyms");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (type != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "type", type));
      }
      if (page != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "page", page));
      }
      if (hitsPerPage != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "hitsPerPage", hitsPerPage));
      }
      localVarRequestOptions.Data = searchSynonymsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<SearchSynonymsResponse>("/1/indexes/{indexName}/synonyms/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchSynonyms", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search for a user ID. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. To ensure rapid updates, the user IDs index isn&#39;t built at the same time as the mapping. Instead, it&#39;s built every 12 hours, at the same time as the update of user ID usage. For example, if you add or move a user ID, the search will show an old value until the next time the mapping is rebuilt (every 12 hours).  
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchUserIdsParams"></param>
    /// <returns>SearchUserIdsResponse</returns>
    public SearchUserIdsResponse SearchUserIds(SearchUserIdsParams searchUserIdsParams)
    {
      Algolia.Search.Search.Client.ApiResponse<SearchUserIdsResponse> localVarResponse = SearchUserIdsWithHttpInfo(searchUserIdsParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search for a user ID. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. To ensure rapid updates, the user IDs index isn&#39;t built at the same time as the mapping. Instead, it&#39;s built every 12 hours, at the same time as the update of user ID usage. For example, if you add or move a user ID, the search will show an old value until the next time the mapping is rebuilt (every 12 hours).  
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchUserIdsParams"></param>
    /// <returns>ApiResponse of SearchUserIdsResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<SearchUserIdsResponse> SearchUserIdsWithHttpInfo(SearchUserIdsParams searchUserIdsParams)
    {
      // verify the required parameter 'searchUserIdsParams' is set
      if (searchUserIdsParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'searchUserIdsParams' when calling SearchClient->SearchUserIds");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = searchUserIdsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Post<SearchUserIdsResponse>("/1/clusters/mapping/search", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchUserIds", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Search for a user ID. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. To ensure rapid updates, the user IDs index isn&#39;t built at the same time as the mapping. Instead, it&#39;s built every 12 hours, at the same time as the update of user ID usage. For example, if you add or move a user ID, the search will show an old value until the next time the mapping is rebuilt (every 12 hours).  
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchUserIdsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of SearchUserIdsResponse</returns>
    public async System.Threading.Tasks.Task<SearchUserIdsResponse> SearchUserIdsAsync(SearchUserIdsParams searchUserIdsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<SearchUserIdsResponse> localVarResponse = await SearchUserIdsWithHttpInfoAsync(searchUserIdsParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Search for a user ID. Since it can take up to a few seconds to get the data from the different clusters, the response isn&#39;t real-time. To ensure rapid updates, the user IDs index isn&#39;t built at the same time as the mapping. Instead, it&#39;s built every 12 hours, at the same time as the update of user ID usage. For example, if you add or move a user ID, the search will show an old value until the next time the mapping is rebuilt (every 12 hours).  
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="searchUserIdsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (SearchUserIdsResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<SearchUserIdsResponse>> SearchUserIdsWithHttpInfoAsync(SearchUserIdsParams searchUserIdsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'searchUserIdsParams' is set
      if (searchUserIdsParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'searchUserIdsParams' when calling SearchClient->SearchUserIds");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = searchUserIdsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PostAsync<SearchUserIdsResponse>("/1/clusters/mapping/search", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SearchUserIds", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Set stop word settings. Set stop word settings for a specific language.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionarySettingsParams"></param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse SetDictionarySettings(DictionarySettingsParams dictionarySettingsParams)
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = SetDictionarySettingsWithHttpInfo(dictionarySettingsParams);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Set stop word settings. Set stop word settings for a specific language.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionarySettingsParams"></param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> SetDictionarySettingsWithHttpInfo(DictionarySettingsParams dictionarySettingsParams)
    {
      // verify the required parameter 'dictionarySettingsParams' is set
      if (dictionarySettingsParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'dictionarySettingsParams' when calling SearchClient->SetDictionarySettings");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = dictionarySettingsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<UpdatedAtResponse>("/1/dictionaries/*/settings", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SetDictionarySettings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Set stop word settings. Set stop word settings for a specific language.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionarySettingsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> SetDictionarySettingsAsync(DictionarySettingsParams dictionarySettingsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await SetDictionarySettingsWithHttpInfoAsync(dictionarySettingsParams, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Set stop word settings. Set stop word settings for a specific language.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="dictionarySettingsParams"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> SetDictionarySettingsWithHttpInfoAsync(DictionarySettingsParams dictionarySettingsParams, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'dictionarySettingsParams' is set
      if (dictionarySettingsParams == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'dictionarySettingsParams' when calling SearchClient->SetDictionarySettings");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.Data = dictionarySettingsParams;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatedAtResponse>("/1/dictionaries/*/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SetDictionarySettings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update index settings. Update the specified [index settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/). Specifying null for a setting resets it to its default value.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="indexSettings"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>UpdatedAtResponse</returns>
    public UpdatedAtResponse SetSettings(string indexName, IndexSettings indexSettings, bool? forwardToReplicas = default(bool?))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = SetSettingsWithHttpInfo(indexName, indexSettings, forwardToReplicas);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update index settings. Update the specified [index settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/). Specifying null for a setting resets it to its default value.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="indexSettings"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <returns>ApiResponse of UpdatedAtResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> SetSettingsWithHttpInfo(string indexName, IndexSettings indexSettings, bool? forwardToReplicas = default(bool?))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SetSettings");

      // verify the required parameter 'indexSettings' is set
      if (indexSettings == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexSettings' when calling SearchClient->SetSettings");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      localVarRequestOptions.Data = indexSettings;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<UpdatedAtResponse>("/1/indexes/{indexName}/settings", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SetSettings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update index settings. Update the specified [index settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/). Specifying null for a setting resets it to its default value.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="indexSettings"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdatedAtResponse</returns>
    public async System.Threading.Tasks.Task<UpdatedAtResponse> SetSettingsAsync(string indexName, IndexSettings indexSettings, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse> localVarResponse = await SetSettingsWithHttpInfoAsync(indexName, indexSettings, forwardToReplicas, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update index settings. Update the specified [index settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/). Specifying null for a setting resets it to its default value.
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="indexName">Index on which to perform the request.</param>
    /// <param name="indexSettings"></param>
    /// <param name="forwardToReplicas">Indicates whether changed index settings are forwarded to the replica indices. (optional)</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdatedAtResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdatedAtResponse>> SetSettingsWithHttpInfoAsync(string indexName, IndexSettings indexSettings, bool? forwardToReplicas = default(bool?), System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'indexName' is set
      if (indexName == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexName' when calling SearchClient->SetSettings");

      // verify the required parameter 'indexSettings' is set
      if (indexSettings == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'indexSettings' when calling SearchClient->SetSettings");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("indexName", Algolia.Search.Search.Client.ClientUtils.ParameterToString(indexName)); // path parameter
      if (forwardToReplicas != null)
      {
        localVarRequestOptions.QueryParameters.Add(Algolia.Search.Search.Client.ClientUtils.ParameterToMultiMap("", "forwardToReplicas", forwardToReplicas));
      }
      localVarRequestOptions.Data = indexSettings;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<UpdatedAtResponse>("/1/indexes/{indexName}/settings", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("SetSettings", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update an API key. Replace the permissions of an existing API key. Any unspecified parameter resets that permission to its default value. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="apiKey"></param>
    /// <returns>UpdateApiKeyResponse</returns>
    public UpdateApiKeyResponse UpdateApiKey(string key, ApiKey apiKey)
    {
      Algolia.Search.Search.Client.ApiResponse<UpdateApiKeyResponse> localVarResponse = UpdateApiKeyWithHttpInfo(key, apiKey);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update an API key. Replace the permissions of an existing API key. Any unspecified parameter resets that permission to its default value. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="apiKey"></param>
    /// <returns>ApiResponse of UpdateApiKeyResponse</returns>
    public Algolia.Search.Search.Client.ApiResponse<UpdateApiKeyResponse> UpdateApiKeyWithHttpInfo(string key, ApiKey apiKey)
    {
      // verify the required parameter 'key' is set
      if (key == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'key' when calling SearchClient->UpdateApiKey");

      // verify the required parameter 'apiKey' is set
      if (apiKey == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'apiKey' when calling SearchClient->UpdateApiKey");

      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };

      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("key", Algolia.Search.Search.Client.ClientUtils.ParameterToString(key)); // path parameter
      localVarRequestOptions.Data = apiKey;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request
      var localVarResponse = this.Client.Put<UpdateApiKeyResponse>("/1/keys/{key}", localVarRequestOptions, this.Configuration);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

    /// <summary>
    /// Update an API key. Replace the permissions of an existing API key. Any unspecified parameter resets that permission to its default value. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="apiKey"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of UpdateApiKeyResponse</returns>
    public async System.Threading.Tasks.Task<UpdateApiKeyResponse> UpdateApiKeyAsync(string key, ApiKey apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      Algolia.Search.Search.Client.ApiResponse<UpdateApiKeyResponse> localVarResponse = await UpdateApiKeyWithHttpInfoAsync(key, apiKey, cancellationToken).ConfigureAwait(false);
      return localVarResponse.Data;
    }

    /// <summary>
    /// Update an API key. Replace the permissions of an existing API key. Any unspecified parameter resets that permission to its default value. The request must be authenticated with the admin API key. 
    /// </summary>
    /// <exception cref="Algolia.Search.Search.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="key">API key.</param>
    /// <param name="apiKey"></param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of ApiResponse (UpdateApiKeyResponse)</returns>
    public async System.Threading.Tasks.Task<Algolia.Search.Search.Client.ApiResponse<UpdateApiKeyResponse>> UpdateApiKeyWithHttpInfoAsync(string key, ApiKey apiKey, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
    {
      // verify the required parameter 'key' is set
      if (key == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'key' when calling SearchClient->UpdateApiKey");

      // verify the required parameter 'apiKey' is set
      if (apiKey == null)
        throw new Algolia.Search.Search.Client.ApiException(400, "Missing required parameter 'apiKey' when calling SearchClient->UpdateApiKey");


      Algolia.Search.Search.Client.RequestOptions localVarRequestOptions = new Algolia.Search.Search.Client.RequestOptions();

      string[] _contentTypes = new string[] {
                "application/json"
            };

      // to determine the Accept header
      string[] _accepts = new string[] {
                "application/json"
            };


      var localVarContentType = Algolia.Search.Search.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
      if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

      var localVarAccept = Algolia.Search.Search.Client.ClientUtils.SelectHeaderAccept(_accepts);
      if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

      localVarRequestOptions.PathParameters.Add("key", Algolia.Search.Search.Client.ClientUtils.ParameterToString(key)); // path parameter
      localVarRequestOptions.Data = apiKey;

      // authentication (apiKey) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-API-Key", this.Configuration.GetApiKeyWithPrefix("X-Algolia-API-Key"));
      }

      // authentication (appId) required
      if (!string.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id")))
      {
        localVarRequestOptions.HeaderParameters.Add("X-Algolia-Application-Id", this.Configuration.GetApiKeyWithPrefix("X-Algolia-Application-Id"));
      }


      // make the HTTP request

      var localVarResponse = await this.AsynchronousClient.PutAsync<UpdateApiKeyResponse>("/1/keys/{key}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

      if (this.ExceptionFactory != null)
      {
        Exception _exception = this.ExceptionFactory("UpdateApiKey", localVarResponse);
        if (_exception != null) throw _exception;
      }

      return localVarResponse;
    }

  }
}
