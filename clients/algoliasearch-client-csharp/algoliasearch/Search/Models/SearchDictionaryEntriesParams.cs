//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Search.Models
{
  /// <summary>
  /// &#x60;searchDictionaryEntries&#x60; parameters. 
  /// </summary>
  [DataContract(Name = "searchDictionaryEntriesParams")]
  public partial class SearchDictionaryEntriesParams
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="SearchDictionaryEntriesParams" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected SearchDictionaryEntriesParams() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="SearchDictionaryEntriesParams" /> class.
    /// </summary>
    /// <param name="query">Text to search for in an index. (required) (default to &quot;&quot;).</param>
    /// <param name="page">Page to retrieve (the first page is &#x60;0&#x60;, not &#x60;1&#x60;). (default to 0).</param>
    /// <param name="hitsPerPage">Number of hits per page. (default to 20).</param>
    /// <param name="language">[Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/). .</param>
    public SearchDictionaryEntriesParams(string query = @"", int page = 0, int hitsPerPage = 20, string language = default(string))
    {
      // to ensure "query" is required (not null)
      if (query == null)
      {
        throw new ArgumentNullException("query is a required property for SearchDictionaryEntriesParams and cannot be null");
      }
      this.Query = query;
      this.Page = page;
      this.HitsPerPage = hitsPerPage;
      this.Language = language;
    }

    /// <summary>
    /// Text to search for in an index.
    /// </summary>
    /// <value>Text to search for in an index.</value>
    [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
    public string Query { get; set; }

    /// <summary>
    /// Page to retrieve (the first page is &#x60;0&#x60;, not &#x60;1&#x60;).
    /// </summary>
    /// <value>Page to retrieve (the first page is &#x60;0&#x60;, not &#x60;1&#x60;).</value>
    [DataMember(Name = "page", EmitDefaultValue = false)]
    public int Page { get; set; }

    /// <summary>
    /// Number of hits per page.
    /// </summary>
    /// <value>Number of hits per page.</value>
    [DataMember(Name = "hitsPerPage", EmitDefaultValue = false)]
    public int HitsPerPage { get; set; }

    /// <summary>
    /// [Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/). 
    /// </summary>
    /// <value>[Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/). </value>
    [DataMember(Name = "language", EmitDefaultValue = false)]
    public string Language { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class SearchDictionaryEntriesParams {\n");
      sb.Append("  Query: ").Append(Query).Append("\n");
      sb.Append("  Page: ").Append(Page).Append("\n");
      sb.Append("  HitsPerPage: ").Append(HitsPerPage).Append("\n");
      sb.Append("  Language: ").Append(Language).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
