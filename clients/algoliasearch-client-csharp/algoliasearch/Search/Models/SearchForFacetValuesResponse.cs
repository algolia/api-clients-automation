//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Search.Models
{
  /// <summary>
  /// SearchForFacetValuesResponse
  /// </summary>
  [DataContract(Name = "searchForFacetValuesResponse")]
  public partial class SearchForFacetValuesResponse
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="SearchForFacetValuesResponse" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected SearchForFacetValuesResponse() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="SearchForFacetValuesResponse" /> class.
    /// </summary>
    /// <param name="facetHits">facetHits (required).</param>
    /// <param name="exhaustiveFacetsCount">See the &#x60;facetsCount&#x60; field of the &#x60;exhaustive&#x60; object in the response. (required).</param>
    /// <param name="processingTimeMS">Time the server took to process the request, in milliseconds..</param>
    public SearchForFacetValuesResponse(List<FacetHits> facetHits = default(List<FacetHits>), bool exhaustiveFacetsCount = default(bool), int processingTimeMS = default(int))
    {
      // to ensure "facetHits" is required (not null)
      if (facetHits == null)
      {
        throw new ArgumentNullException("facetHits is a required property for SearchForFacetValuesResponse and cannot be null");
      }
      this.FacetHits = facetHits;
      this.ExhaustiveFacetsCount = exhaustiveFacetsCount;
      this.ProcessingTimeMS = processingTimeMS;
    }

    /// <summary>
    /// Gets or Sets FacetHits
    /// </summary>
    [DataMember(Name = "facetHits", IsRequired = true, EmitDefaultValue = true)]
    public List<FacetHits> FacetHits { get; set; }

    /// <summary>
    /// See the &#x60;facetsCount&#x60; field of the &#x60;exhaustive&#x60; object in the response.
    /// </summary>
    /// <value>See the &#x60;facetsCount&#x60; field of the &#x60;exhaustive&#x60; object in the response.</value>
    [DataMember(Name = "exhaustiveFacetsCount", IsRequired = true, EmitDefaultValue = true)]
    [Obsolete]
    public bool ExhaustiveFacetsCount { get; set; }

    /// <summary>
    /// Time the server took to process the request, in milliseconds.
    /// </summary>
    /// <value>Time the server took to process the request, in milliseconds.</value>
    [DataMember(Name = "processingTimeMS", EmitDefaultValue = false)]
    public int ProcessingTimeMS { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class SearchForFacetValuesResponse {\n");
      sb.Append("  FacetHits: ").Append(FacetHits).Append("\n");
      sb.Append("  ExhaustiveFacetsCount: ").Append(ExhaustiveFacetsCount).Append("\n");
      sb.Append("  ProcessingTimeMS: ").Append(ProcessingTimeMS).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
