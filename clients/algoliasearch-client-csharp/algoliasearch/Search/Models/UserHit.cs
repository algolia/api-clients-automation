//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Search.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Search.Client.OpenAPIDateConverter;

namespace Algolia.Search.Search.Models
{
  /// <summary>
  /// UserHit
  /// </summary>
  [DataContract(Name = "userHit")]
  public partial class UserHit : IEquatable<UserHit>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="UserHit" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected UserHit() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="UserHit" /> class.
    /// </summary>
    /// <param name="userID">userID of the user. (required).</param>
    /// <param name="clusterName">Cluster name. (required).</param>
    /// <param name="nbRecords">Number of records in the cluster. (required).</param>
    /// <param name="dataSize">Data size taken by all the users assigned to the cluster. (required).</param>
    /// <param name="objectID">userID of the requested user. Same as userID. (required).</param>
    /// <param name="highlightResult">highlightResult (required).</param>
    public UserHit(string userID = default(string), string clusterName = default(string), int nbRecords = default(int), int dataSize = default(int), string objectID = default(string), UserHighlightResult highlightResult = default(UserHighlightResult))
    {
      // to ensure "userID" is required (not null)
      if (userID == null)
      {
        throw new ArgumentNullException("userID is a required property for UserHit and cannot be null");
      }
      this.UserID = userID;
      // to ensure "clusterName" is required (not null)
      if (clusterName == null)
      {
        throw new ArgumentNullException("clusterName is a required property for UserHit and cannot be null");
      }
      this.ClusterName = clusterName;
      this.NbRecords = nbRecords;
      this.DataSize = dataSize;
      // to ensure "objectID" is required (not null)
      if (objectID == null)
      {
        throw new ArgumentNullException("objectID is a required property for UserHit and cannot be null");
      }
      this.ObjectID = objectID;
      // to ensure "highlightResult" is required (not null)
      if (highlightResult == null)
      {
        throw new ArgumentNullException("highlightResult is a required property for UserHit and cannot be null");
      }
      this.HighlightResult = highlightResult;
    }

    /// <summary>
    /// userID of the user.
    /// </summary>
    /// <value>userID of the user.</value>
    [DataMember(Name = "userID", IsRequired = true, EmitDefaultValue = true)]
    public string UserID { get; set; }

    /// <summary>
    /// Cluster name.
    /// </summary>
    /// <value>Cluster name.</value>
    [DataMember(Name = "clusterName", IsRequired = true, EmitDefaultValue = true)]
    public string ClusterName { get; set; }

    /// <summary>
    /// Number of records in the cluster.
    /// </summary>
    /// <value>Number of records in the cluster.</value>
    [DataMember(Name = "nbRecords", IsRequired = true, EmitDefaultValue = true)]
    public int NbRecords { get; set; }

    /// <summary>
    /// Data size taken by all the users assigned to the cluster.
    /// </summary>
    /// <value>Data size taken by all the users assigned to the cluster.</value>
    [DataMember(Name = "dataSize", IsRequired = true, EmitDefaultValue = true)]
    public int DataSize { get; set; }

    /// <summary>
    /// userID of the requested user. Same as userID.
    /// </summary>
    /// <value>userID of the requested user. Same as userID.</value>
    [DataMember(Name = "objectID", IsRequired = true, EmitDefaultValue = true)]
    public string ObjectID { get; set; }

    /// <summary>
    /// Gets or Sets HighlightResult
    /// </summary>
    [DataMember(Name = "_highlightResult", IsRequired = true, EmitDefaultValue = true)]
    public UserHighlightResult HighlightResult { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class UserHit {\n");
      sb.Append("  UserID: ").Append(UserID).Append("\n");
      sb.Append("  ClusterName: ").Append(ClusterName).Append("\n");
      sb.Append("  NbRecords: ").Append(NbRecords).Append("\n");
      sb.Append("  DataSize: ").Append(DataSize).Append("\n");
      sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
      sb.Append("  HighlightResult: ").Append(HighlightResult).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as UserHit);
    }

    /// <summary>
    /// Returns true if UserHit instances are equal
    /// </summary>
    /// <param name="input">Instance of UserHit to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(UserHit input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.UserID == input.UserID ||
              (this.UserID != null &&
              this.UserID.Equals(input.UserID))
          ) &&
          (
              this.ClusterName == input.ClusterName ||
              (this.ClusterName != null &&
              this.ClusterName.Equals(input.ClusterName))
          ) &&
          (
              this.NbRecords == input.NbRecords ||
              this.NbRecords.Equals(input.NbRecords)
          ) &&
          (
              this.DataSize == input.DataSize ||
              this.DataSize.Equals(input.DataSize)
          ) &&
          (
              this.ObjectID == input.ObjectID ||
              (this.ObjectID != null &&
              this.ObjectID.Equals(input.ObjectID))
          ) &&
          (
              this.HighlightResult == input.HighlightResult ||
              (this.HighlightResult != null &&
              this.HighlightResult.Equals(input.HighlightResult))
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.UserID != null)
        {
          hashCode = (hashCode * 59) + this.UserID.GetHashCode();
        }
        if (this.ClusterName != null)
        {
          hashCode = (hashCode * 59) + this.ClusterName.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.NbRecords.GetHashCode();
        hashCode = (hashCode * 59) + this.DataSize.GetHashCode();
        if (this.ObjectID != null)
        {
          hashCode = (hashCode * 59) + this.ObjectID.GetHashCode();
        }
        if (this.HighlightResult != null)
        {
          hashCode = (hashCode * 59) + this.HighlightResult.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      if (this.UserID != null)
      {
        // UserID (string) pattern
        Regex regexUserID = new Regex(@"^[a-zA-Z0-9 \-*.]+$", RegexOptions.CultureInvariant);
        if (!regexUserID.Match(this.UserID).Success)
        {
          yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for UserID, must match a pattern of " + regexUserID, new[] { "UserID" });
        }
      }

      yield break;
    }
  }

}
