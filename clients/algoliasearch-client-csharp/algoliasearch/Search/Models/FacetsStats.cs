//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Search.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Search.Client.OpenAPIDateConverter;

namespace Algolia.Search.Search.Models
{
  /// <summary>
  /// FacetsStats
  /// </summary>
  [DataContract(Name = "facetsStats")]
  public partial class FacetsStats : IEquatable<FacetsStats>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="FacetsStats" /> class.
    /// </summary>
    /// <param name="min">Minimum value in the results..</param>
    /// <param name="max">Maximum value in the results..</param>
    /// <param name="avg">Average facet value in the results..</param>
    /// <param name="sum">Sum of all values in the results..</param>
    public FacetsStats(double min = default(double), double max = default(double), double avg = default(double), double sum = default(double))
    {
      this.Min = min;
      this.Max = max;
      this.Avg = avg;
      this.Sum = sum;
    }

    /// <summary>
    /// Minimum value in the results.
    /// </summary>
    /// <value>Minimum value in the results.</value>
    [DataMember(Name = "min", EmitDefaultValue = false)]
    public double Min { get; set; }

    /// <summary>
    /// Maximum value in the results.
    /// </summary>
    /// <value>Maximum value in the results.</value>
    [DataMember(Name = "max", EmitDefaultValue = false)]
    public double Max { get; set; }

    /// <summary>
    /// Average facet value in the results.
    /// </summary>
    /// <value>Average facet value in the results.</value>
    [DataMember(Name = "avg", EmitDefaultValue = false)]
    public double Avg { get; set; }

    /// <summary>
    /// Sum of all values in the results.
    /// </summary>
    /// <value>Sum of all values in the results.</value>
    [DataMember(Name = "sum", EmitDefaultValue = false)]
    public double Sum { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class FacetsStats {\n");
      sb.Append("  Min: ").Append(Min).Append("\n");
      sb.Append("  Max: ").Append(Max).Append("\n");
      sb.Append("  Avg: ").Append(Avg).Append("\n");
      sb.Append("  Sum: ").Append(Sum).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as FacetsStats);
    }

    /// <summary>
    /// Returns true if FacetsStats instances are equal
    /// </summary>
    /// <param name="input">Instance of FacetsStats to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(FacetsStats input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Min == input.Min ||
              this.Min.Equals(input.Min)
          ) &&
          (
              this.Max == input.Max ||
              this.Max.Equals(input.Max)
          ) &&
          (
              this.Avg == input.Avg ||
              this.Avg.Equals(input.Avg)
          ) &&
          (
              this.Sum == input.Sum ||
              this.Sum.Equals(input.Sum)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        hashCode = (hashCode * 59) + this.Min.GetHashCode();
        hashCode = (hashCode * 59) + this.Max.GetHashCode();
        hashCode = (hashCode * 59) + this.Avg.GetHashCode();
        hashCode = (hashCode * 59) + this.Sum.GetHashCode();
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
