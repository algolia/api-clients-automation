//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.Reflection;
using Algolia.Search.Models;

namespace Algolia.Search.Models.Search
{
  /// <summary>
  /// [Maximum radius](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#increase-the-search-radius) for a geographical search (in meters). 
  /// </summary>
  [JsonConverter(typeof(AroundRadiusJsonConverter))]
  [DataContract(Name = "aroundRadius")]
  public partial class AroundRadius : AbstractSchema
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="AroundRadius" /> class
    /// with the <see cref="int" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of int.</param>
    public AroundRadius(int actualInstance)
    {
      IsNullable = false;
      SchemaType = "oneOf";
      ActualInstance = actualInstance;
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="AroundRadius" /> class
    /// with the <see cref="AroundRadiusAll" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of AroundRadiusAll.</param>
    public AroundRadius(AroundRadiusAll actualInstance)
    {
      IsNullable = false;
      SchemaType = "oneOf";
      ActualInstance = actualInstance;
    }


    private Object _actualInstance;

    /// <summary>
    /// Gets or Sets ActualInstance
    /// </summary>
    public override Object ActualInstance
    {
      get
      {
        return _actualInstance;
      }
      set
      {
        this._actualInstance = value;
      }
    }

    /// <summary>
    /// Get the actual instance of `int`. If the actual instance is not `int`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of int</returns>
    public int AsInt()
    {
      return (int)ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `AroundRadiusAll`. If the actual instance is not `AroundRadiusAll`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of AroundRadiusAll</returns>
    public AroundRadiusAll AsAroundRadiusAll()
    {
      return (AroundRadiusAll)ActualInstance;
    }


    /// <summary>
    /// Check if the actual instance is of `int` type.
    /// </summary>
    /// <returns>Whether or not the instance is the type</returns>
    public bool IsInt()
    {
      return ActualInstance.GetType() == typeof(int);
    }

    /// <summary>
    /// Check if the actual instance is of `AroundRadiusAll` type.
    /// </summary>
    /// <returns>Whether or not the instance is the type</returns>
    public bool IsAroundRadiusAll()
    {
      return ActualInstance.GetType() == typeof(AroundRadiusAll);
    }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class AroundRadius {\n");
      sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public override string ToJson()
    {
      return JsonConvert.SerializeObject(ActualInstance, SerializerSettings);
    }

    /// <summary>
    /// Converts the JSON string into an instance of AroundRadius
    /// </summary>
    /// <param name="jsonString">JSON string</param>
    /// <returns>An instance of AroundRadius</returns>
    public static AroundRadius FromJson(string jsonString)
    {
      AroundRadius newAroundRadius = null;

      if (string.IsNullOrEmpty(jsonString))
      {
        return newAroundRadius;
      }
      try
      {
        return new AroundRadius(JsonConvert.DeserializeObject<int>(jsonString, AdditionalPropertiesSerializerSettings));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into int: {1}", jsonString, exception.ToString()));
      }
      try
      {
        return new AroundRadius(JsonConvert.DeserializeObject<AroundRadiusAll>(jsonString, AdditionalPropertiesSerializerSettings));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into AroundRadiusAll: {1}", jsonString, exception.ToString()));
      }

      throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
    }

  }

  /// <summary>
  /// Custom JSON converter for AroundRadius
  /// </summary>
  public class AroundRadiusJsonConverter : JsonConverter
  {
    /// <summary>
    /// To write the JSON string
    /// </summary>
    /// <param name="writer">JSON writer</param>
    /// <param name="value">Object to be converted into a JSON string</param>
    /// <param name="serializer">JSON Serializer</param>
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
      writer.WriteRawValue((string)(typeof(AroundRadius).GetMethod("ToJson").Invoke(value, null)));
    }

    /// <summary>
    /// To convert a JSON string into an object
    /// </summary>
    /// <param name="reader">JSON reader</param>
    /// <param name="objectType">Object type</param>
    /// <param name="existingValue">Existing value</param>
    /// <param name="serializer">JSON Serializer</param>
    /// <returns>The object converted from the JSON string</returns>
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
      if (reader.TokenType != JsonToken.Null)
      {
        return objectType.GetMethod("FromJson").Invoke(null, new[] { JObject.Load(reader).ToString(Formatting.None) });
      }
      return null;
    }

    /// <summary>
    /// Check if the object can be converted
    /// </summary>
    /// <param name="objectType">Object type</param>
    /// <returns>True if the object can be converted</returns>
    public override bool CanConvert(Type objectType)
    {
      return false;
    }
  }

}
