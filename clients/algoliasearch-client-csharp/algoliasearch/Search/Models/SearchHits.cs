//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Models.Search
{
  /// <summary>
  /// SearchHits
  /// </summary>
  [DataContract(Name = "searchHits")]
  public partial class SearchHits<T>
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="SearchHits" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    public SearchHits()
    {
      this.AdditionalProperties = new Dictionary<string, object>();
    }
    /// <summary>
    /// Initializes a new instance of the <see cref="SearchHits" /> class.
    /// </summary>
    /// <param name="hits">hits (required).</param>
    /// <param name="query">Text to search for in an index. (required) (default to &quot;&quot;).</param>
    /// <param name="varParams">URL-encoded string of all search parameters. (required).</param>
    public SearchHits(List<T> hits, string query, string varParams)
    {
      this.Hits = hits ?? throw new ArgumentNullException("hits is a required property for SearchHits and cannot be null");
      this.Query = query ?? throw new ArgumentNullException("query is a required property for SearchHits and cannot be null");
      this.VarParams = varParams ?? throw new ArgumentNullException("varParams is a required property for SearchHits and cannot be null");
      this.AdditionalProperties = new Dictionary<string, object>();
    }

    /// <summary>
    /// Gets or Sets Hits
    /// </summary>
    [DataMember(Name = "hits", IsRequired = true, EmitDefaultValue = true)]
    public List<T> Hits { get; set; }

    /// <summary>
    /// Text to search for in an index.
    /// </summary>
    /// <value>Text to search for in an index.</value>
    [DataMember(Name = "query", IsRequired = true, EmitDefaultValue = true)]
    public string Query { get; set; }

    /// <summary>
    /// URL-encoded string of all search parameters.
    /// </summary>
    /// <value>URL-encoded string of all search parameters.</value>
    [DataMember(Name = "params", IsRequired = true, EmitDefaultValue = true)]
    public string VarParams { get; set; }

    /// <summary>
    /// Gets or Sets additional properties
    /// </summary>
    [JsonExtensionData]
    public IDictionary<string, object> AdditionalProperties { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class SearchHits {\n");
      sb.Append("  Hits: ").Append(Hits).Append("\n");
      sb.Append("  Query: ").Append(Query).Append("\n");
      sb.Append("  VarParams: ").Append(VarParams).Append("\n");
      sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
