//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Search.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Search.Client.OpenAPIDateConverter;

namespace Algolia.Search.Search.Models
{
  /// <summary>
  /// Log
  /// </summary>
  [DataContract(Name = "log")]
  public partial class Log : IEquatable<Log>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="Log" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected Log() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="Log" /> class.
    /// </summary>
    /// <param name="timestamp">Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. (required).</param>
    /// <param name="method">HTTP method of the performed request. (required).</param>
    /// <param name="answerCode">HTTP response code. (required).</param>
    /// <param name="queryBody">Request body. Truncated after 1,000 characters. (required).</param>
    /// <param name="answer">Answer body. Truncated after 1,000 characters. (required).</param>
    /// <param name="url">Request URL. (required).</param>
    /// <param name="ip">IP address of the client that performed the request. (required).</param>
    /// <param name="queryHeaders">Request headers (API key is obfuscated). (required).</param>
    /// <param name="sha1">SHA1 signature of the log entry. (required).</param>
    /// <param name="nbApiCalls">Number of API calls. (required).</param>
    /// <param name="processingTimeMs">Processing time for the query. Doesn&#39;t include network time. (required).</param>
    /// <param name="index">Index targeted by the query..</param>
    /// <param name="queryParams">Query parameters sent with the request..</param>
    /// <param name="queryNbHits">Number of hits returned for the query..</param>
    /// <param name="innerQueries">Performed queries for the given request..</param>
    public Log(string timestamp = default(string), string method = default(string), string answerCode = default(string), string queryBody = default(string), string answer = default(string), string url = default(string), string ip = default(string), string queryHeaders = default(string), string sha1 = default(string), string nbApiCalls = default(string), string processingTimeMs = default(string), string index = default(string), string queryParams = default(string), string queryNbHits = default(string), List<LogQuery> innerQueries = default(List<LogQuery>))
    {
      // to ensure "timestamp" is required (not null)
      if (timestamp == null)
      {
        throw new ArgumentNullException("timestamp is a required property for Log and cannot be null");
      }
      this.Timestamp = timestamp;
      // to ensure "method" is required (not null)
      if (method == null)
      {
        throw new ArgumentNullException("method is a required property for Log and cannot be null");
      }
      this.Method = method;
      // to ensure "answerCode" is required (not null)
      if (answerCode == null)
      {
        throw new ArgumentNullException("answerCode is a required property for Log and cannot be null");
      }
      this.AnswerCode = answerCode;
      // to ensure "queryBody" is required (not null)
      if (queryBody == null)
      {
        throw new ArgumentNullException("queryBody is a required property for Log and cannot be null");
      }
      this.QueryBody = queryBody;
      // to ensure "answer" is required (not null)
      if (answer == null)
      {
        throw new ArgumentNullException("answer is a required property for Log and cannot be null");
      }
      this.Answer = answer;
      // to ensure "url" is required (not null)
      if (url == null)
      {
        throw new ArgumentNullException("url is a required property for Log and cannot be null");
      }
      this.Url = url;
      // to ensure "ip" is required (not null)
      if (ip == null)
      {
        throw new ArgumentNullException("ip is a required property for Log and cannot be null");
      }
      this.Ip = ip;
      // to ensure "queryHeaders" is required (not null)
      if (queryHeaders == null)
      {
        throw new ArgumentNullException("queryHeaders is a required property for Log and cannot be null");
      }
      this.QueryHeaders = queryHeaders;
      // to ensure "sha1" is required (not null)
      if (sha1 == null)
      {
        throw new ArgumentNullException("sha1 is a required property for Log and cannot be null");
      }
      this.Sha1 = sha1;
      // to ensure "nbApiCalls" is required (not null)
      if (nbApiCalls == null)
      {
        throw new ArgumentNullException("nbApiCalls is a required property for Log and cannot be null");
      }
      this.NbApiCalls = nbApiCalls;
      // to ensure "processingTimeMs" is required (not null)
      if (processingTimeMs == null)
      {
        throw new ArgumentNullException("processingTimeMs is a required property for Log and cannot be null");
      }
      this.ProcessingTimeMs = processingTimeMs;
      this.Index = index;
      this.QueryParams = queryParams;
      this.QueryNbHits = queryNbHits;
      this.InnerQueries = innerQueries;
    }

    /// <summary>
    /// Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
    /// </summary>
    /// <value>Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.</value>
    [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
    public string Timestamp { get; set; }

    /// <summary>
    /// HTTP method of the performed request.
    /// </summary>
    /// <value>HTTP method of the performed request.</value>
    [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = true)]
    public string Method { get; set; }

    /// <summary>
    /// HTTP response code.
    /// </summary>
    /// <value>HTTP response code.</value>
    [DataMember(Name = "answer_code", IsRequired = true, EmitDefaultValue = true)]
    public string AnswerCode { get; set; }

    /// <summary>
    /// Request body. Truncated after 1,000 characters.
    /// </summary>
    /// <value>Request body. Truncated after 1,000 characters.</value>
    [DataMember(Name = "query_body", IsRequired = true, EmitDefaultValue = true)]
    public string QueryBody { get; set; }

    /// <summary>
    /// Answer body. Truncated after 1,000 characters.
    /// </summary>
    /// <value>Answer body. Truncated after 1,000 characters.</value>
    [DataMember(Name = "answer", IsRequired = true, EmitDefaultValue = true)]
    public string Answer { get; set; }

    /// <summary>
    /// Request URL.
    /// </summary>
    /// <value>Request URL.</value>
    [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = true)]
    public string Url { get; set; }

    /// <summary>
    /// IP address of the client that performed the request.
    /// </summary>
    /// <value>IP address of the client that performed the request.</value>
    [DataMember(Name = "ip", IsRequired = true, EmitDefaultValue = true)]
    public string Ip { get; set; }

    /// <summary>
    /// Request headers (API key is obfuscated).
    /// </summary>
    /// <value>Request headers (API key is obfuscated).</value>
    [DataMember(Name = "query_headers", IsRequired = true, EmitDefaultValue = true)]
    public string QueryHeaders { get; set; }

    /// <summary>
    /// SHA1 signature of the log entry.
    /// </summary>
    /// <value>SHA1 signature of the log entry.</value>
    [DataMember(Name = "sha1", IsRequired = true, EmitDefaultValue = true)]
    public string Sha1 { get; set; }

    /// <summary>
    /// Number of API calls.
    /// </summary>
    /// <value>Number of API calls.</value>
    [DataMember(Name = "nb_api_calls", IsRequired = true, EmitDefaultValue = true)]
    public string NbApiCalls { get; set; }

    /// <summary>
    /// Processing time for the query. Doesn&#39;t include network time.
    /// </summary>
    /// <value>Processing time for the query. Doesn&#39;t include network time.</value>
    [DataMember(Name = "processing_time_ms", IsRequired = true, EmitDefaultValue = true)]
    public string ProcessingTimeMs { get; set; }

    /// <summary>
    /// Index targeted by the query.
    /// </summary>
    /// <value>Index targeted by the query.</value>
    [DataMember(Name = "index", EmitDefaultValue = false)]
    public string Index { get; set; }

    /// <summary>
    /// Query parameters sent with the request.
    /// </summary>
    /// <value>Query parameters sent with the request.</value>
    [DataMember(Name = "query_params", EmitDefaultValue = false)]
    public string QueryParams { get; set; }

    /// <summary>
    /// Number of hits returned for the query.
    /// </summary>
    /// <value>Number of hits returned for the query.</value>
    [DataMember(Name = "query_nb_hits", EmitDefaultValue = false)]
    public string QueryNbHits { get; set; }

    /// <summary>
    /// Performed queries for the given request.
    /// </summary>
    /// <value>Performed queries for the given request.</value>
    [DataMember(Name = "inner_queries", EmitDefaultValue = false)]
    public List<LogQuery> InnerQueries { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class Log {\n");
      sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
      sb.Append("  Method: ").Append(Method).Append("\n");
      sb.Append("  AnswerCode: ").Append(AnswerCode).Append("\n");
      sb.Append("  QueryBody: ").Append(QueryBody).Append("\n");
      sb.Append("  Answer: ").Append(Answer).Append("\n");
      sb.Append("  Url: ").Append(Url).Append("\n");
      sb.Append("  Ip: ").Append(Ip).Append("\n");
      sb.Append("  QueryHeaders: ").Append(QueryHeaders).Append("\n");
      sb.Append("  Sha1: ").Append(Sha1).Append("\n");
      sb.Append("  NbApiCalls: ").Append(NbApiCalls).Append("\n");
      sb.Append("  ProcessingTimeMs: ").Append(ProcessingTimeMs).Append("\n");
      sb.Append("  Index: ").Append(Index).Append("\n");
      sb.Append("  QueryParams: ").Append(QueryParams).Append("\n");
      sb.Append("  QueryNbHits: ").Append(QueryNbHits).Append("\n");
      sb.Append("  InnerQueries: ").Append(InnerQueries).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as Log);
    }

    /// <summary>
    /// Returns true if Log instances are equal
    /// </summary>
    /// <param name="input">Instance of Log to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(Log input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Timestamp == input.Timestamp ||
              (this.Timestamp != null &&
              this.Timestamp.Equals(input.Timestamp))
          ) &&
          (
              this.Method == input.Method ||
              (this.Method != null &&
              this.Method.Equals(input.Method))
          ) &&
          (
              this.AnswerCode == input.AnswerCode ||
              (this.AnswerCode != null &&
              this.AnswerCode.Equals(input.AnswerCode))
          ) &&
          (
              this.QueryBody == input.QueryBody ||
              (this.QueryBody != null &&
              this.QueryBody.Equals(input.QueryBody))
          ) &&
          (
              this.Answer == input.Answer ||
              (this.Answer != null &&
              this.Answer.Equals(input.Answer))
          ) &&
          (
              this.Url == input.Url ||
              (this.Url != null &&
              this.Url.Equals(input.Url))
          ) &&
          (
              this.Ip == input.Ip ||
              (this.Ip != null &&
              this.Ip.Equals(input.Ip))
          ) &&
          (
              this.QueryHeaders == input.QueryHeaders ||
              (this.QueryHeaders != null &&
              this.QueryHeaders.Equals(input.QueryHeaders))
          ) &&
          (
              this.Sha1 == input.Sha1 ||
              (this.Sha1 != null &&
              this.Sha1.Equals(input.Sha1))
          ) &&
          (
              this.NbApiCalls == input.NbApiCalls ||
              (this.NbApiCalls != null &&
              this.NbApiCalls.Equals(input.NbApiCalls))
          ) &&
          (
              this.ProcessingTimeMs == input.ProcessingTimeMs ||
              (this.ProcessingTimeMs != null &&
              this.ProcessingTimeMs.Equals(input.ProcessingTimeMs))
          ) &&
          (
              this.Index == input.Index ||
              (this.Index != null &&
              this.Index.Equals(input.Index))
          ) &&
          (
              this.QueryParams == input.QueryParams ||
              (this.QueryParams != null &&
              this.QueryParams.Equals(input.QueryParams))
          ) &&
          (
              this.QueryNbHits == input.QueryNbHits ||
              (this.QueryNbHits != null &&
              this.QueryNbHits.Equals(input.QueryNbHits))
          ) &&
          (
              this.InnerQueries == input.InnerQueries ||
              this.InnerQueries != null &&
              input.InnerQueries != null &&
              this.InnerQueries.SequenceEqual(input.InnerQueries)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.Timestamp != null)
        {
          hashCode = (hashCode * 59) + this.Timestamp.GetHashCode();
        }
        if (this.Method != null)
        {
          hashCode = (hashCode * 59) + this.Method.GetHashCode();
        }
        if (this.AnswerCode != null)
        {
          hashCode = (hashCode * 59) + this.AnswerCode.GetHashCode();
        }
        if (this.QueryBody != null)
        {
          hashCode = (hashCode * 59) + this.QueryBody.GetHashCode();
        }
        if (this.Answer != null)
        {
          hashCode = (hashCode * 59) + this.Answer.GetHashCode();
        }
        if (this.Url != null)
        {
          hashCode = (hashCode * 59) + this.Url.GetHashCode();
        }
        if (this.Ip != null)
        {
          hashCode = (hashCode * 59) + this.Ip.GetHashCode();
        }
        if (this.QueryHeaders != null)
        {
          hashCode = (hashCode * 59) + this.QueryHeaders.GetHashCode();
        }
        if (this.Sha1 != null)
        {
          hashCode = (hashCode * 59) + this.Sha1.GetHashCode();
        }
        if (this.NbApiCalls != null)
        {
          hashCode = (hashCode * 59) + this.NbApiCalls.GetHashCode();
        }
        if (this.ProcessingTimeMs != null)
        {
          hashCode = (hashCode * 59) + this.ProcessingTimeMs.GetHashCode();
        }
        if (this.Index != null)
        {
          hashCode = (hashCode * 59) + this.Index.GetHashCode();
        }
        if (this.QueryParams != null)
        {
          hashCode = (hashCode * 59) + this.QueryParams.GetHashCode();
        }
        if (this.QueryNbHits != null)
        {
          hashCode = (hashCode * 59) + this.QueryNbHits.GetHashCode();
        }
        if (this.InnerQueries != null)
        {
          hashCode = (hashCode * 59) + this.InnerQueries.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
