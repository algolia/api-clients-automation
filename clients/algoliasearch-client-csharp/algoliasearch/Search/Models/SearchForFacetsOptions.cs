//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Search.Models
{
  /// <summary>
  /// SearchForFacetsOptions
  /// </summary>
  [DataContract(Name = "searchForFacetsOptions")]
  public partial class SearchForFacetsOptions
  {

    /// <summary>
    /// Gets or Sets Type
    /// </summary>
    [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
    public SearchTypeFacet Type { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="SearchForFacetsOptions" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected SearchForFacetsOptions() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="SearchForFacetsOptions" /> class.
    /// </summary>
    /// <param name="facet">Facet name. (required).</param>
    /// <param name="indexName">Algolia index name. (required).</param>
    /// <param name="facetQuery">Text to search inside the facet&#39;s values. (default to &quot;&quot;).</param>
    /// <param name="maxFacetHits">Maximum number of facet hits to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values). (default to 10).</param>
    /// <param name="type">type (required).</param>
    public SearchForFacetsOptions(string facet = default(string), string indexName = default(string), string facetQuery = @"", int maxFacetHits = 10, SearchTypeFacet type = default(SearchTypeFacet))
    {
      // to ensure "facet" is required (not null)
      if (facet == null)
      {
        throw new ArgumentNullException("facet is a required property for SearchForFacetsOptions and cannot be null");
      }
      this.Facet = facet;
      // to ensure "indexName" is required (not null)
      if (indexName == null)
      {
        throw new ArgumentNullException("indexName is a required property for SearchForFacetsOptions and cannot be null");
      }
      this.IndexName = indexName;
      this.Type = type;
      // use default value if no "facetQuery" provided
      this.FacetQuery = facetQuery ?? @"";
      this.MaxFacetHits = maxFacetHits;
    }

    /// <summary>
    /// Facet name.
    /// </summary>
    /// <value>Facet name.</value>
    [DataMember(Name = "facet", IsRequired = true, EmitDefaultValue = true)]
    public string Facet { get; set; }

    /// <summary>
    /// Algolia index name.
    /// </summary>
    /// <value>Algolia index name.</value>
    [DataMember(Name = "indexName", IsRequired = true, EmitDefaultValue = true)]
    public string IndexName { get; set; }

    /// <summary>
    /// Text to search inside the facet&#39;s values.
    /// </summary>
    /// <value>Text to search inside the facet&#39;s values.</value>
    [DataMember(Name = "facetQuery", EmitDefaultValue = false)]
    public string FacetQuery { get; set; }

    /// <summary>
    /// Maximum number of facet hits to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
    /// </summary>
    /// <value>Maximum number of facet hits to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).</value>
    [DataMember(Name = "maxFacetHits", EmitDefaultValue = false)]
    public int MaxFacetHits { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class SearchForFacetsOptions {\n");
      sb.Append("  Facet: ").Append(Facet).Append("\n");
      sb.Append("  IndexName: ").Append(IndexName).Append("\n");
      sb.Append("  FacetQuery: ").Append(FacetQuery).Append("\n");
      sb.Append("  MaxFacetHits: ").Append(MaxFacetHits).Append("\n");
      sb.Append("  Type: ").Append(Type).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
