//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Search.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Search.Client.OpenAPIDateConverter;

namespace Algolia.Search.Search.Models
{
  /// <summary>
  /// OperationIndexParams
  /// </summary>
  [DataContract(Name = "operationIndexParams")]
  public partial class OperationIndexParams : IEquatable<OperationIndexParams>, IValidatableObject
  {

    /// <summary>
    /// Gets or Sets Operation
    /// </summary>
    [DataMember(Name = "operation", IsRequired = true, EmitDefaultValue = true)]
    public OperationType Operation { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="OperationIndexParams" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected OperationIndexParams() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="OperationIndexParams" /> class.
    /// </summary>
    /// <param name="operation">operation (required).</param>
    /// <param name="destination">Algolia index name. (required).</param>
    /// <param name="scope">**This only applies to the _copy_ operation.**  If you omit &#x60;scope&#x60;, the copy command copies all records, settings, synonyms, and rules.  If you specify &#x60;scope&#x60;, only the specified scopes are copied..</param>
    public OperationIndexParams(OperationType operation = default(OperationType), string destination = default(string), List<ScopeType> scope = default(List<ScopeType>))
    {
      this.Operation = operation;
      // to ensure "destination" is required (not null)
      if (destination == null)
      {
        throw new ArgumentNullException("destination is a required property for OperationIndexParams and cannot be null");
      }
      this.Destination = destination;
      this.Scope = scope;
    }

    /// <summary>
    /// Algolia index name.
    /// </summary>
    /// <value>Algolia index name.</value>
    [DataMember(Name = "destination", IsRequired = true, EmitDefaultValue = true)]
    public string Destination { get; set; }

    /// <summary>
    /// **This only applies to the _copy_ operation.**  If you omit &#x60;scope&#x60;, the copy command copies all records, settings, synonyms, and rules.  If you specify &#x60;scope&#x60;, only the specified scopes are copied.
    /// </summary>
    /// <value>**This only applies to the _copy_ operation.**  If you omit &#x60;scope&#x60;, the copy command copies all records, settings, synonyms, and rules.  If you specify &#x60;scope&#x60;, only the specified scopes are copied.</value>
    [DataMember(Name = "scope", EmitDefaultValue = false)]
    public List<ScopeType> Scope { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class OperationIndexParams {\n");
      sb.Append("  Operation: ").Append(Operation).Append("\n");
      sb.Append("  Destination: ").Append(Destination).Append("\n");
      sb.Append("  Scope: ").Append(Scope).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as OperationIndexParams);
    }

    /// <summary>
    /// Returns true if OperationIndexParams instances are equal
    /// </summary>
    /// <param name="input">Instance of OperationIndexParams to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(OperationIndexParams input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Operation == input.Operation ||
              this.Operation.Equals(input.Operation)
          ) &&
          (
              this.Destination == input.Destination ||
              (this.Destination != null &&
              this.Destination.Equals(input.Destination))
          ) &&
          (
              this.Scope == input.Scope ||
              this.Scope != null &&
              input.Scope != null &&
              this.Scope.SequenceEqual(input.Scope)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        hashCode = (hashCode * 59) + this.Operation.GetHashCode();
        if (this.Destination != null)
        {
          hashCode = (hashCode * 59) + this.Destination.GetHashCode();
        }
        if (this.Scope != null)
        {
          hashCode = (hashCode * 59) + this.Scope.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
