//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Models.Abtesting
{
  /// <summary>
  /// A/B test filter effects resulting from configuration settings.
  /// </summary>
  [DataContract(Name = "filterEffects")]
  public partial class FilterEffects
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="FilterEffects" /> class.
    /// </summary>
    public FilterEffects()
    {
    }

    /// <summary>
    /// Gets or Sets Outliers
    /// </summary>
    [DataMember(Name = "outliers", EmitDefaultValue = false)]
    public FilterEffectsOutliers Outliers { get; set; }

    /// <summary>
    /// Gets or Sets EmptySearch
    /// </summary>
    [DataMember(Name = "emptySearch", EmitDefaultValue = false)]
    public FilterEffectsEmptySearch EmptySearch { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class FilterEffects {\n");
      sb.Append("  Outliers: ").Append(Outliers).Append("\n");
      sb.Append("  EmptySearch: ").Append(EmptySearch).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
