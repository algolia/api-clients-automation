//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Abtesting.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Abtesting.Client.OpenAPIDateConverter;

namespace Algolia.Search.Abtesting.Models
{
  /// <summary>
  /// CurrenciesValue
  /// </summary>
  [DataContract(Name = "currencies_value")]
  public partial class CurrenciesValue : IEquatable<CurrenciesValue>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="CurrenciesValue" /> class.
    /// </summary>
    /// <param name="currency">Currency code..</param>
    /// <param name="revenue">Revenue for this currency..</param>
    /// <param name="mean">Mean for this currency..</param>
    /// <param name="standardDeviation">Standard deviation for this currency..</param>
    public CurrenciesValue(string currency = default(string), double revenue = default(double), double mean = default(double), double standardDeviation = default(double))
    {
      this.Currency = currency;
      this.Revenue = revenue;
      this.Mean = mean;
      this.StandardDeviation = standardDeviation;
    }

    /// <summary>
    /// Currency code.
    /// </summary>
    /// <value>Currency code.</value>
    [DataMember(Name = "currency", EmitDefaultValue = false)]
    public string Currency { get; set; }

    /// <summary>
    /// Revenue for this currency.
    /// </summary>
    /// <value>Revenue for this currency.</value>
    [DataMember(Name = "revenue", EmitDefaultValue = false)]
    public double Revenue { get; set; }

    /// <summary>
    /// Mean for this currency.
    /// </summary>
    /// <value>Mean for this currency.</value>
    [DataMember(Name = "mean", EmitDefaultValue = false)]
    public double Mean { get; set; }

    /// <summary>
    /// Standard deviation for this currency.
    /// </summary>
    /// <value>Standard deviation for this currency.</value>
    [DataMember(Name = "standardDeviation", EmitDefaultValue = false)]
    public double StandardDeviation { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class CurrenciesValue {\n");
      sb.Append("  Currency: ").Append(Currency).Append("\n");
      sb.Append("  Revenue: ").Append(Revenue).Append("\n");
      sb.Append("  Mean: ").Append(Mean).Append("\n");
      sb.Append("  StandardDeviation: ").Append(StandardDeviation).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as CurrenciesValue);
    }

    /// <summary>
    /// Returns true if CurrenciesValue instances are equal
    /// </summary>
    /// <param name="input">Instance of CurrenciesValue to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(CurrenciesValue input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Currency == input.Currency ||
              (this.Currency != null &&
              this.Currency.Equals(input.Currency))
          ) &&
          (
              this.Revenue == input.Revenue ||
              this.Revenue.Equals(input.Revenue)
          ) &&
          (
              this.Mean == input.Mean ||
              this.Mean.Equals(input.Mean)
          ) &&
          (
              this.StandardDeviation == input.StandardDeviation ||
              this.StandardDeviation.Equals(input.StandardDeviation)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.Currency != null)
        {
          hashCode = (hashCode * 59) + this.Currency.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Revenue.GetHashCode();
        hashCode = (hashCode * 59) + this.Mean.GetHashCode();
        hashCode = (hashCode * 59) + this.StandardDeviation.GetHashCode();
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
