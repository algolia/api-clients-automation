//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Search;

/// <summary>
/// [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences) of a rule. 
/// </summary>
public partial class Consequence
{
  /// <summary>
  /// Initializes a new instance of the Consequence class.
  /// </summary>
  public Consequence()
  {
  }

  /// <summary>
  /// Gets or Sets VarParams
  /// </summary>
  [JsonPropertyName("params")]
  public ConsequenceParams VarParams { get; set; }

  /// <summary>
  /// Records to promote.
  /// </summary>
  /// <value>Records to promote.</value>
  [JsonPropertyName("promote")]
  public List<Promote> Promote { get; set; }

  /// <summary>
  /// Only use in combination with the `promote` consequence. When `true`, promoted results will be restricted to match the filters of the current search. When `false`, the promoted results will show up regardless of the filters.
  /// </summary>
  /// <value>Only use in combination with the `promote` consequence. When `true`, promoted results will be restricted to match the filters of the current search. When `false`, the promoted results will show up regardless of the filters.</value>
  [JsonPropertyName("filterPromotes")]
  public bool? FilterPromotes { get; set; }

  /// <summary>
  /// Records to hide. By default, you can hide up to 50 records per rule.
  /// </summary>
  /// <value>Records to hide. By default, you can hide up to 50 records per rule.</value>
  [JsonPropertyName("hide")]
  public List<ConsequenceHide> Hide { get; set; }

  /// <summary>
  /// Custom JSON object that will be appended to the userData array in the response. This object isn't interpreted by the API. It's limited to 1kB of minified JSON.
  /// </summary>
  /// <value>Custom JSON object that will be appended to the userData array in the response. This object isn't interpreted by the API. It's limited to 1kB of minified JSON.</value>
  [JsonPropertyName("userData")]
  public object UserData { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Consequence {\n");
    sb.Append("  VarParams: ").Append(VarParams).Append("\n");
    sb.Append("  Promote: ").Append(Promote).Append("\n");
    sb.Append("  FilterPromotes: ").Append(FilterPromotes).Append("\n");
    sb.Append("  Hide: ").Append(Hide).Append("\n");
    sb.Append("  UserData: ").Append(UserData).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not Consequence input)
    {
      return false;
    }

    return
        (VarParams == input.VarParams || (VarParams != null && VarParams.Equals(input.VarParams))) &&
        (Promote == input.Promote || Promote != null && input.Promote != null && Promote.SequenceEqual(input.Promote)) &&
        (FilterPromotes == input.FilterPromotes || FilterPromotes.Equals(input.FilterPromotes)) &&
        (Hide == input.Hide || Hide != null && input.Hide != null && Hide.SequenceEqual(input.Hide)) &&
        (UserData == input.UserData || (UserData != null && UserData.Equals(input.UserData)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (VarParams != null)
      {
        hashCode = (hashCode * 59) + VarParams.GetHashCode();
      }
      if (Promote != null)
      {
        hashCode = (hashCode * 59) + Promote.GetHashCode();
      }
      hashCode = (hashCode * 59) + FilterPromotes.GetHashCode();
      if (Hide != null)
      {
        hashCode = (hashCode * 59) + Hide.GetHashCode();
      }
      if (UserData != null)
      {
        hashCode = (hashCode * 59) + UserData.GetHashCode();
      }
      return hashCode;
    }
  }

}

