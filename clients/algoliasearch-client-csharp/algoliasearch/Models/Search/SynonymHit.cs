//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Synonym object.
/// </summary>
[DataContract(Name = "synonymHit")]
[JsonObject(MemberSerialization.OptOut)]
public partial class SynonymHit
{

  /// <summary>
  /// Gets or Sets Type
  /// </summary>
  [DataMember(Name = "type")]
  public SynonymType Type { get; set; }
  /// <summary>
  /// Initializes a new instance of the SynonymHit class.
  /// </summary>
  [JsonConstructor]
  public SynonymHit() { }
  /// <summary>
  /// Initializes a new instance of the SynonymHit class.
  /// </summary>
  /// <param name="objectID">Unique identifier of a synonym object. (required).</param>
  /// <param name="type">type (required).</param>
  public SynonymHit(string objectID, SynonymType type)
  {
    ObjectID = objectID ?? throw new ArgumentNullException(nameof(objectID));
    Type = type;
  }

  /// <summary>
  /// Unique identifier of a synonym object.
  /// </summary>
  /// <value>Unique identifier of a synonym object.</value>
  [DataMember(Name = "objectID")]
  public string ObjectID { get; set; }

  /// <summary>
  /// Words or phrases considered equivalent.
  /// </summary>
  /// <value>Words or phrases considered equivalent.</value>
  [DataMember(Name = "synonyms")]
  public List<string> Synonyms { get; set; }

  /// <summary>
  /// Word or phrase to appear in query strings (for [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/)).
  /// </summary>
  /// <value>Word or phrase to appear in query strings (for [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/)).</value>
  [DataMember(Name = "input")]
  public string Input { get; set; }

  /// <summary>
  /// Word or phrase to appear in query strings (for [`altcorrection1` and `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/)).
  /// </summary>
  /// <value>Word or phrase to appear in query strings (for [`altcorrection1` and `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/)).</value>
  [DataMember(Name = "word")]
  public string Word { get; set; }

  /// <summary>
  /// Words to be matched in records.
  /// </summary>
  /// <value>Words to be matched in records.</value>
  [DataMember(Name = "corrections")]
  public List<string> Corrections { get; set; }

  /// <summary>
  /// [Placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/) to be put inside records. 
  /// </summary>
  /// <value>[Placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/) to be put inside records. </value>
  [DataMember(Name = "placeholder")]
  public string Placeholder { get; set; }

  /// <summary>
  /// Query words that will match the [placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/).
  /// </summary>
  /// <value>Query words that will match the [placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/).</value>
  [DataMember(Name = "replacements")]
  public List<string> Replacements { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SynonymHit {\n");
    sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
    sb.Append("  Type: ").Append(Type).Append("\n");
    sb.Append("  Synonyms: ").Append(Synonyms).Append("\n");
    sb.Append("  Input: ").Append(Input).Append("\n");
    sb.Append("  Word: ").Append(Word).Append("\n");
    sb.Append("  Corrections: ").Append(Corrections).Append("\n");
    sb.Append("  Placeholder: ").Append(Placeholder).Append("\n");
    sb.Append("  Replacements: ").Append(Replacements).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonConvert.SerializeObject(this, Formatting.Indented);
  }

}

