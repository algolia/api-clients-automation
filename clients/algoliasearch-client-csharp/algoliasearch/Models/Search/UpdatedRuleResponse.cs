//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Search;

/// <summary>
/// UpdatedRuleResponse
/// </summary>
public partial class UpdatedRuleResponse
{
  /// <summary>
  /// Initializes a new instance of the UpdatedRuleResponse class.
  /// </summary>
  [JsonConstructor]
  public UpdatedRuleResponse() { }
  /// <summary>
  /// Initializes a new instance of the UpdatedRuleResponse class.
  /// </summary>
  /// <param name="objectID">Unique identifier of a rule object. (required).</param>
  /// <param name="updatedAt">Date and time when the object was updated, in RFC 3339 format. (required).</param>
  /// <param name="taskID">Unique identifier of a task.  A successful API response means that a task was added to a queue. It might not run immediately. You can check the task&#39;s progress with the [&#x60;task&#x60; operation](#tag/Indices/operation/getTask) and this &#x60;taskID&#x60;.  (required).</param>
  public UpdatedRuleResponse(string objectID, string updatedAt, long taskID)
  {
    ObjectID = objectID ?? throw new ArgumentNullException(nameof(objectID));
    UpdatedAt = updatedAt ?? throw new ArgumentNullException(nameof(updatedAt));
    TaskID = taskID;
  }

  /// <summary>
  /// Unique identifier of a rule object.
  /// </summary>
  /// <value>Unique identifier of a rule object.</value>
  [JsonPropertyName("objectID")]
  public string ObjectID { get; set; }

  /// <summary>
  /// Date and time when the object was updated, in RFC 3339 format.
  /// </summary>
  /// <value>Date and time when the object was updated, in RFC 3339 format.</value>
  [JsonPropertyName("updatedAt")]
  public string UpdatedAt { get; set; }

  /// <summary>
  /// Unique identifier of a task.  A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`. 
  /// </summary>
  /// <value>Unique identifier of a task.  A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the [`task` operation](#tag/Indices/operation/getTask) and this `taskID`. </value>
  [JsonPropertyName("taskID")]
  public long TaskID { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class UpdatedRuleResponse {\n");
    sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
    sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
    sb.Append("  TaskID: ").Append(TaskID).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not UpdatedRuleResponse input)
    {
      return false;
    }

    return
        (ObjectID == input.ObjectID || (ObjectID != null && ObjectID.Equals(input.ObjectID))) &&
        (UpdatedAt == input.UpdatedAt || (UpdatedAt != null && UpdatedAt.Equals(input.UpdatedAt))) &&
        (TaskID == input.TaskID || TaskID.Equals(input.TaskID));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ObjectID != null)
      {
        hashCode = (hashCode * 59) + ObjectID.GetHashCode();
      }
      if (UpdatedAt != null)
      {
        hashCode = (hashCode * 59) + UpdatedAt.GetHashCode();
      }
      hashCode = (hashCode * 59) + TaskID.GetHashCode();
      return hashCode;
    }
  }

}

