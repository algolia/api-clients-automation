//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Search;

/// <summary>
/// MultipleBatchResponse
/// </summary>
public partial class MultipleBatchResponse
{
  /// <summary>
  /// Initializes a new instance of the MultipleBatchResponse class.
  /// </summary>
  [JsonConstructor]
  public MultipleBatchResponse() { }
  /// <summary>
  /// Initializes a new instance of the MultipleBatchResponse class.
  /// </summary>
  /// <param name="taskID">TaskIDs per index. (required).</param>
  /// <param name="objectIDs">Unique object (record) identifiers. (required).</param>
  public MultipleBatchResponse(Dictionary<string, long> taskID, List<string> objectIDs)
  {
    TaskID = taskID ?? throw new ArgumentNullException(nameof(taskID));
    ObjectIDs = objectIDs ?? throw new ArgumentNullException(nameof(objectIDs));
  }

  /// <summary>
  /// TaskIDs per index.
  /// </summary>
  /// <value>TaskIDs per index.</value>
  [JsonPropertyName("taskID")]
  public Dictionary<string, long> TaskID { get; set; }

  /// <summary>
  /// Unique object (record) identifiers.
  /// </summary>
  /// <value>Unique object (record) identifiers.</value>
  [JsonPropertyName("objectIDs")]
  public List<string> ObjectIDs { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class MultipleBatchResponse {\n");
    sb.Append("  TaskID: ").Append(TaskID).Append("\n");
    sb.Append("  ObjectIDs: ").Append(ObjectIDs).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not MultipleBatchResponse input)
    {
      return false;
    }

    return
        (TaskID == input.TaskID || TaskID != null && input.TaskID != null && TaskID.SequenceEqual(input.TaskID)) &&
        (ObjectIDs == input.ObjectIDs || ObjectIDs != null && input.ObjectIDs != null && ObjectIDs.SequenceEqual(input.ObjectIDs));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (TaskID != null)
      {
        hashCode = (hashCode * 59) + TaskID.GetHashCode();
      }
      if (ObjectIDs != null)
      {
        hashCode = (hashCode * 59) + ObjectIDs.GetHashCode();
      }
      return hashCode;
    }
  }

}

