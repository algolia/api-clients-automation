//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Dictionary entry.
/// </summary>
public partial class DictionaryEntry
{

  /// <summary>
  /// Gets or Sets State
  /// </summary>
  [JsonPropertyName("state")]
  public DictionaryEntryState? State { get; set; }
  /// <summary>
  /// Initializes a new instance of the DictionaryEntry class.
  /// </summary>
  [JsonConstructor]
  public DictionaryEntry()
  {
    AdditionalProperties = new Dictionary<string, object>();
  }
  /// <summary>
  /// Initializes a new instance of the DictionaryEntry class.
  /// </summary>
  /// <param name="objectID">Unique identifier for a dictionary object. (required).</param>
  /// <param name="language">[Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/).  (required).</param>
  public DictionaryEntry(string objectID, string language)
  {
    ObjectID = objectID ?? throw new ArgumentNullException(nameof(objectID));
    Language = language ?? throw new ArgumentNullException(nameof(language));
    AdditionalProperties = new Dictionary<string, object>();
  }

  /// <summary>
  /// Unique identifier for a dictionary object.
  /// </summary>
  /// <value>Unique identifier for a dictionary object.</value>
  [JsonPropertyName("objectID")]
  public string ObjectID { get; set; }

  /// <summary>
  /// [Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/). 
  /// </summary>
  /// <value>[Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/). </value>
  [JsonPropertyName("language")]
  public string Language { get; set; }

  /// <summary>
  /// Dictionary entry word. Usage depends on the type of dictionary entry. **`stopwordEntry`** The stop word you want to add or update. If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`. **`compoundEntry`** When `decomposition` is empty: adds `word` as a compound atom. For example, atom “kino” decomposes the query “kopfkino” into \"kopf\" and \"kino\". When `decomposition` isn't empty: creates a decomposition exception. For example, when decomposition is set to the [\"hund\", \"hutte\"] exception, \"hundehutte\" decomposes into “hund” and “hutte”, discarding the linking \"e\". 
  /// </summary>
  /// <value>Dictionary entry word. Usage depends on the type of dictionary entry. **`stopwordEntry`** The stop word you want to add or update. If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`. **`compoundEntry`** When `decomposition` is empty: adds `word` as a compound atom. For example, atom “kino” decomposes the query “kopfkino” into \"kopf\" and \"kino\". When `decomposition` isn't empty: creates a decomposition exception. For example, when decomposition is set to the [\"hund\", \"hutte\"] exception, \"hundehutte\" decomposes into “hund” and “hutte”, discarding the linking \"e\". </value>
  [JsonPropertyName("word")]
  public string Word { get; set; }

  /// <summary>
  /// Compound dictionary [word declensions](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/). If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`. 
  /// </summary>
  /// <value>Compound dictionary [word declensions](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/). If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`. </value>
  [JsonPropertyName("words")]
  public List<string> Words { get; set; }

  /// <summary>
  /// For compound entries, governs the behavior of the `word` parameter.
  /// </summary>
  /// <value>For compound entries, governs the behavior of the `word` parameter.</value>
  [JsonPropertyName("decomposition")]
  public List<string> Decomposition { get; set; }

  /// <summary>
  /// Gets or Sets additional properties
  /// </summary>
  [JsonExtensionData]
  public IDictionary<string, object> AdditionalProperties { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class DictionaryEntry {\n");
    sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
    sb.Append("  Language: ").Append(Language).Append("\n");
    sb.Append("  Word: ").Append(Word).Append("\n");
    sb.Append("  Words: ").Append(Words).Append("\n");
    sb.Append("  Decomposition: ").Append(Decomposition).Append("\n");
    sb.Append("  State: ").Append(State).Append("\n");
    sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not DictionaryEntry input)
    {
      return false;
    }

    return
        (ObjectID == input.ObjectID || (ObjectID != null && ObjectID.Equals(input.ObjectID))) &&
        (Language == input.Language || (Language != null && Language.Equals(input.Language))) &&
        (Word == input.Word || (Word != null && Word.Equals(input.Word))) &&
        (Words == input.Words || Words != null && input.Words != null && Words.SequenceEqual(input.Words)) &&
        (Decomposition == input.Decomposition || Decomposition != null && input.Decomposition != null && Decomposition.SequenceEqual(input.Decomposition)) &&
        (State == input.State || State.Equals(input.State))
        && (AdditionalProperties.Count == input.AdditionalProperties.Count && !AdditionalProperties.Except(input.AdditionalProperties).Any());
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ObjectID != null)
      {
        hashCode = (hashCode * 59) + ObjectID.GetHashCode();
      }
      if (Language != null)
      {
        hashCode = (hashCode * 59) + Language.GetHashCode();
      }
      if (Word != null)
      {
        hashCode = (hashCode * 59) + Word.GetHashCode();
      }
      if (Words != null)
      {
        hashCode = (hashCode * 59) + Words.GetHashCode();
      }
      if (Decomposition != null)
      {
        hashCode = (hashCode * 59) + Decomposition.GetHashCode();
      }
      hashCode = (hashCode * 59) + State.GetHashCode();
      if (AdditionalProperties != null)
      {
        hashCode = (hashCode * 59) + AdditionalProperties.GetHashCode();
      }
      return hashCode;
    }
  }

}

