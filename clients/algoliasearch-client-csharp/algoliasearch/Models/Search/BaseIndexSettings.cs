//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Search;

/// <summary>
/// BaseIndexSettings
/// </summary>
public partial class BaseIndexSettings
{
  /// <summary>
  /// Initializes a new instance of the BaseIndexSettings class.
  /// </summary>
  public BaseIndexSettings()
  {
  }

  /// <summary>
  /// Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/).  Facets are attributes that let you categorize search results. They can be used for filtering search results. By default, no attribute is used for faceting. Attribute names are case-sensitive.  **Modifiers**  - `filterOnly(\"ATTRIBUTE\")`.   Allows using this attribute as a filter, but doesn't evalue the facet values.  - `searchable(\"ATTRIBUTE\")`.   Allows searching for facet values.  - `afterDistinct(\"ATTRIBUTE\")`.   Evaluates the facet count _after_ deduplication with `distinct`.   This ensures accurate facet counts.   You can apply this modifier to searchable facets: `afterDistinct(searchable(ATTRIBUTE))`. 
  /// </summary>
  /// <value>Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/).  Facets are attributes that let you categorize search results. They can be used for filtering search results. By default, no attribute is used for faceting. Attribute names are case-sensitive.  **Modifiers**  - `filterOnly(\"ATTRIBUTE\")`.   Allows using this attribute as a filter, but doesn't evalue the facet values.  - `searchable(\"ATTRIBUTE\")`.   Allows searching for facet values.  - `afterDistinct(\"ATTRIBUTE\")`.   Evaluates the facet count _after_ deduplication with `distinct`.   This ensures accurate facet counts.   You can apply this modifier to searchable facets: `afterDistinct(searchable(ATTRIBUTE))`. </value>
  [JsonPropertyName("attributesForFaceting")]
  public List<string> AttributesForFaceting { get; set; }

  /// <summary>
  /// Creates [replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/).  Replicas are copies of a primary index with the same records but different settings, synonyms, or rules. If you want to offer a different ranking or sorting of your search results, you'll use replica indices. All index operations on a primary index are automatically forwarded to its replicas. To add a replica index, you must provide the complete set of replicas to this parameter. If you omit a replica from this list, the replica turns into a regular, standalone index that will no longer by synced with the primary index.  **Modifier**  - `virtual(\"REPLICA\")`.   Create a virtual replica,   Virtual replicas don't increase the number of records and are optimized for [Relevant sorting](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/relevant-sort/). 
  /// </summary>
  /// <value>Creates [replica indices](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/).  Replicas are copies of a primary index with the same records but different settings, synonyms, or rules. If you want to offer a different ranking or sorting of your search results, you'll use replica indices. All index operations on a primary index are automatically forwarded to its replicas. To add a replica index, you must provide the complete set of replicas to this parameter. If you omit a replica from this list, the replica turns into a regular, standalone index that will no longer by synced with the primary index.  **Modifier**  - `virtual(\"REPLICA\")`.   Create a virtual replica,   Virtual replicas don't increase the number of records and are optimized for [Relevant sorting](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/relevant-sort/). </value>
  [JsonPropertyName("replicas")]
  public List<string> Replicas { get; set; }

  /// <summary>
  /// Maximum number of search results that can be obtained through pagination.  Higher pagination limits might slow down your search. For pagination limits above 1,000, the sorting of results beyond the 1,000th hit can't be guaranteed. 
  /// </summary>
  /// <value>Maximum number of search results that can be obtained through pagination.  Higher pagination limits might slow down your search. For pagination limits above 1,000, the sorting of results beyond the 1,000th hit can't be guaranteed. </value>
  [JsonPropertyName("paginationLimitedTo")]
  public int? PaginationLimitedTo { get; set; }

  /// <summary>
  /// Attributes that can't be retrieved at query time.  This can be useful if you want to use an attribute for ranking or to [restrict access](https://www.algolia.com/doc/guides/security/api-keys/how-to/user-restricted-access-to-data/), but don't want to include it in the search results. Attribute names are case-sensitive. 
  /// </summary>
  /// <value>Attributes that can't be retrieved at query time.  This can be useful if you want to use an attribute for ranking or to [restrict access](https://www.algolia.com/doc/guides/security/api-keys/how-to/user-restricted-access-to-data/), but don't want to include it in the search results. Attribute names are case-sensitive. </value>
  [JsonPropertyName("unretrievableAttributes")]
  public List<string> UnretrievableAttributes { get; set; }

  /// <summary>
  /// Words for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/). This also turns off [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) for the specified words. 
  /// </summary>
  /// <value>Words for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/). This also turns off [word splitting and concatenation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/splitting-and-concatenation/) for the specified words. </value>
  [JsonPropertyName("disableTypoToleranceOnWords")]
  public List<string> DisableTypoToleranceOnWords { get; set; }

  /// <summary>
  /// Attributes, for which you want to support [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead).  Transliteration supports searching in any of the Japanese writing systems. To support transliteration, you must set the indexing language to Japanese. Attribute names are case-sensitive. 
  /// </summary>
  /// <value>Attributes, for which you want to support [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead).  Transliteration supports searching in any of the Japanese writing systems. To support transliteration, you must set the indexing language to Japanese. Attribute names are case-sensitive. </value>
  [JsonPropertyName("attributesToTransliterate")]
  public List<string> AttributesToTransliterate { get; set; }

  /// <summary>
  /// Attributes for which to split [camel case](https://wikipedia.org/wiki/Camel_case) words. Attribute names are case-sensitive. 
  /// </summary>
  /// <value>Attributes for which to split [camel case](https://wikipedia.org/wiki/Camel_case) words. Attribute names are case-sensitive. </value>
  [JsonPropertyName("camelCaseAttributes")]
  public List<string> CamelCaseAttributes { get; set; }

  /// <summary>
  /// Searchable attributes to which Algolia should apply [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding). Attribute names are case-sensitive.  Compound words are formed by combining two or more individual words, and are particularly prevalent in Germanic languages—for example, \"firefighter\". With decompounding, the individual components are indexed separately.  You can specify different lists for different languages. Decompounding is supported for these languages: Dutch (`nl`), German (`de`), Finnish (`fi`), Danish (`da`), Swedish (`sv`), and Norwegian (`no`). 
  /// </summary>
  /// <value>Searchable attributes to which Algolia should apply [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding). Attribute names are case-sensitive.  Compound words are formed by combining two or more individual words, and are particularly prevalent in Germanic languages—for example, \"firefighter\". With decompounding, the individual components are indexed separately.  You can specify different lists for different languages. Decompounding is supported for these languages: Dutch (`nl`), German (`de`), Finnish (`fi`), Danish (`da`), Swedish (`sv`), and Norwegian (`no`). </value>
  [JsonPropertyName("decompoundedAttributes")]
  public object DecompoundedAttributes { get; set; }

  /// <summary>
  /// Languages for language-specific processing steps, such as word detection and dictionary settings.  **You should always specify an indexing language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/). 
  /// </summary>
  /// <value>Languages for language-specific processing steps, such as word detection and dictionary settings.  **You should always specify an indexing language.** If you don't specify an indexing language, the search engine uses all [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/), or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to unexpected search results. For more information, see [Language-specific configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/). </value>
  [JsonPropertyName("indexLanguages")]
  public List<SupportedLanguage> IndexLanguages { get; set; }

  /// <summary>
  /// Searchable attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search). Attribute names are case-sensitive. 
  /// </summary>
  /// <value>Searchable attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search). Attribute names are case-sensitive. </value>
  [JsonPropertyName("disablePrefixOnAttributes")]
  public List<string> DisablePrefixOnAttributes { get; set; }

  /// <summary>
  /// Whether arrays with exclusively non-negative integers should be compressed for better performance. If true, the compressed arrays may be reordered. 
  /// </summary>
  /// <value>Whether arrays with exclusively non-negative integers should be compressed for better performance. If true, the compressed arrays may be reordered. </value>
  [JsonPropertyName("allowCompressionOfIntegerArray")]
  public bool? AllowCompressionOfIntegerArray { get; set; }

  /// <summary>
  /// Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters). Attribute names are case-sensitive.  By default, all numeric attributes are available as numerical filters. For faster indexing, reduce the number of numeric attributes.  If you want to turn off filtering for all numeric attributes, specifiy an attribute that doesn't exist in your index, such as `NO_NUMERIC_FILTERING`.  **Modifier**  - `equalOnly(\"ATTRIBUTE\")`.   Support only filtering based on equality comparisons `=` and `!=`. 
  /// </summary>
  /// <value>Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters). Attribute names are case-sensitive.  By default, all numeric attributes are available as numerical filters. For faster indexing, reduce the number of numeric attributes.  If you want to turn off filtering for all numeric attributes, specifiy an attribute that doesn't exist in your index, such as `NO_NUMERIC_FILTERING`.  **Modifier**  - `equalOnly(\"ATTRIBUTE\")`.   Support only filtering based on equality comparisons `=` and `!=`. </value>
  [JsonPropertyName("numericAttributesForFiltering")]
  public List<string> NumericAttributesForFiltering { get; set; }

  /// <summary>
  /// Controls which separators are indexed.  Separators are all non-letter characters except spaces and currency characters, such as $€£¥. By default, separator characters aren't indexed. With `separatorsToIndex`, Algolia treats separator characters as separate words. For example, a search for `C#` would report two matches. 
  /// </summary>
  /// <value>Controls which separators are indexed.  Separators are all non-letter characters except spaces and currency characters, such as $€£¥. By default, separator characters aren't indexed. With `separatorsToIndex`, Algolia treats separator characters as separate words. For example, a search for `C#` would report two matches. </value>
  [JsonPropertyName("separatorsToIndex")]
  public string SeparatorsToIndex { get; set; }

  /// <summary>
  /// Attributes used for searching. Attribute names are case-sensitive.  By default, all attributes are searchable and the [Attribute](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute) ranking criterion is turned off. With a non-empty list, Algolia only returns results with matches in the selected attributes. In addition, the Attribute ranking criterion is turned on: matches in attributes that are higher in the list of `searchableAttributes` rank first. To make matches in two attributes rank equally, include them in a comma-separated string, such as `\"title,alternate_title\"`. Attributes with the same priority are always unordered.  For more information, see [Searchable attributes](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/setting-searchable-attributes/).  **Modifier**  - `unordered(\"ATTRIBUTE\")`.   Ignore the position of a match within the attribute.  Without modifier, matches at the beginning of an attribute rank higer than matches at the end. 
  /// </summary>
  /// <value>Attributes used for searching. Attribute names are case-sensitive.  By default, all attributes are searchable and the [Attribute](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute) ranking criterion is turned off. With a non-empty list, Algolia only returns results with matches in the selected attributes. In addition, the Attribute ranking criterion is turned on: matches in attributes that are higher in the list of `searchableAttributes` rank first. To make matches in two attributes rank equally, include them in a comma-separated string, such as `\"title,alternate_title\"`. Attributes with the same priority are always unordered.  For more information, see [Searchable attributes](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/setting-searchable-attributes/).  **Modifier**  - `unordered(\"ATTRIBUTE\")`.   Ignore the position of a match within the attribute.  Without modifier, matches at the beginning of an attribute rank higer than matches at the end. </value>
  [JsonPropertyName("searchableAttributes")]
  public List<string> SearchableAttributes { get; set; }

  /// <summary>
  /// An object with custom data.  You can store up to 32&nbsp;kB as custom data. 
  /// </summary>
  /// <value>An object with custom data.  You can store up to 32&nbsp;kB as custom data. </value>
  [JsonPropertyName("userData")]
  public object UserData { get; set; }

  /// <summary>
  /// Characters and their normalized replacements. This overrides Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/). 
  /// </summary>
  /// <value>Characters and their normalized replacements. This overrides Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/). </value>
  [JsonPropertyName("customNormalization")]
  public Dictionary<string, Dictionary<string, string>> CustomNormalization { get; set; }

  /// <summary>
  /// Attribute that should be used to establish groups of results. Attribute names are case-sensitive.  All records with the same value for this attribute are considered a group. You can combine `attributeForDistinct` with the `distinct` search parameter to control how many items per group are included in the search results.  If you want to use the same attribute also for faceting, use the `afterDistinct` modifier of the `attributesForFaceting` setting. This applies faceting _after_ deduplication, which will result in accurate facet counts. 
  /// </summary>
  /// <value>Attribute that should be used to establish groups of results. Attribute names are case-sensitive.  All records with the same value for this attribute are considered a group. You can combine `attributeForDistinct` with the `distinct` search parameter to control how many items per group are included in the search results.  If you want to use the same attribute also for faceting, use the `afterDistinct` modifier of the `attributesForFaceting` setting. This applies faceting _after_ deduplication, which will result in accurate facet counts. </value>
  [JsonPropertyName("attributeForDistinct")]
  public string AttributeForDistinct { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class BaseIndexSettings {\n");
    sb.Append("  AttributesForFaceting: ").Append(AttributesForFaceting).Append("\n");
    sb.Append("  Replicas: ").Append(Replicas).Append("\n");
    sb.Append("  PaginationLimitedTo: ").Append(PaginationLimitedTo).Append("\n");
    sb.Append("  UnretrievableAttributes: ").Append(UnretrievableAttributes).Append("\n");
    sb.Append("  DisableTypoToleranceOnWords: ").Append(DisableTypoToleranceOnWords).Append("\n");
    sb.Append("  AttributesToTransliterate: ").Append(AttributesToTransliterate).Append("\n");
    sb.Append("  CamelCaseAttributes: ").Append(CamelCaseAttributes).Append("\n");
    sb.Append("  DecompoundedAttributes: ").Append(DecompoundedAttributes).Append("\n");
    sb.Append("  IndexLanguages: ").Append(IndexLanguages).Append("\n");
    sb.Append("  DisablePrefixOnAttributes: ").Append(DisablePrefixOnAttributes).Append("\n");
    sb.Append("  AllowCompressionOfIntegerArray: ").Append(AllowCompressionOfIntegerArray).Append("\n");
    sb.Append("  NumericAttributesForFiltering: ").Append(NumericAttributesForFiltering).Append("\n");
    sb.Append("  SeparatorsToIndex: ").Append(SeparatorsToIndex).Append("\n");
    sb.Append("  SearchableAttributes: ").Append(SearchableAttributes).Append("\n");
    sb.Append("  UserData: ").Append(UserData).Append("\n");
    sb.Append("  CustomNormalization: ").Append(CustomNormalization).Append("\n");
    sb.Append("  AttributeForDistinct: ").Append(AttributeForDistinct).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not BaseIndexSettings input)
    {
      return false;
    }

    return
        (AttributesForFaceting == input.AttributesForFaceting || AttributesForFaceting != null && input.AttributesForFaceting != null && AttributesForFaceting.SequenceEqual(input.AttributesForFaceting)) &&
        (Replicas == input.Replicas || Replicas != null && input.Replicas != null && Replicas.SequenceEqual(input.Replicas)) &&
        (PaginationLimitedTo == input.PaginationLimitedTo || PaginationLimitedTo.Equals(input.PaginationLimitedTo)) &&
        (UnretrievableAttributes == input.UnretrievableAttributes || UnretrievableAttributes != null && input.UnretrievableAttributes != null && UnretrievableAttributes.SequenceEqual(input.UnretrievableAttributes)) &&
        (DisableTypoToleranceOnWords == input.DisableTypoToleranceOnWords || DisableTypoToleranceOnWords != null && input.DisableTypoToleranceOnWords != null && DisableTypoToleranceOnWords.SequenceEqual(input.DisableTypoToleranceOnWords)) &&
        (AttributesToTransliterate == input.AttributesToTransliterate || AttributesToTransliterate != null && input.AttributesToTransliterate != null && AttributesToTransliterate.SequenceEqual(input.AttributesToTransliterate)) &&
        (CamelCaseAttributes == input.CamelCaseAttributes || CamelCaseAttributes != null && input.CamelCaseAttributes != null && CamelCaseAttributes.SequenceEqual(input.CamelCaseAttributes)) &&
        (DecompoundedAttributes == input.DecompoundedAttributes || (DecompoundedAttributes != null && DecompoundedAttributes.Equals(input.DecompoundedAttributes))) &&
        (IndexLanguages == input.IndexLanguages || IndexLanguages != null && input.IndexLanguages != null && IndexLanguages.SequenceEqual(input.IndexLanguages)) &&
        (DisablePrefixOnAttributes == input.DisablePrefixOnAttributes || DisablePrefixOnAttributes != null && input.DisablePrefixOnAttributes != null && DisablePrefixOnAttributes.SequenceEqual(input.DisablePrefixOnAttributes)) &&
        (AllowCompressionOfIntegerArray == input.AllowCompressionOfIntegerArray || AllowCompressionOfIntegerArray.Equals(input.AllowCompressionOfIntegerArray)) &&
        (NumericAttributesForFiltering == input.NumericAttributesForFiltering || NumericAttributesForFiltering != null && input.NumericAttributesForFiltering != null && NumericAttributesForFiltering.SequenceEqual(input.NumericAttributesForFiltering)) &&
        (SeparatorsToIndex == input.SeparatorsToIndex || (SeparatorsToIndex != null && SeparatorsToIndex.Equals(input.SeparatorsToIndex))) &&
        (SearchableAttributes == input.SearchableAttributes || SearchableAttributes != null && input.SearchableAttributes != null && SearchableAttributes.SequenceEqual(input.SearchableAttributes)) &&
        (UserData == input.UserData || (UserData != null && UserData.Equals(input.UserData))) &&
        (CustomNormalization == input.CustomNormalization || CustomNormalization != null && input.CustomNormalization != null && CustomNormalization.SequenceEqual(input.CustomNormalization)) &&
        (AttributeForDistinct == input.AttributeForDistinct || (AttributeForDistinct != null && AttributeForDistinct.Equals(input.AttributeForDistinct)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (AttributesForFaceting != null)
      {
        hashCode = (hashCode * 59) + AttributesForFaceting.GetHashCode();
      }
      if (Replicas != null)
      {
        hashCode = (hashCode * 59) + Replicas.GetHashCode();
      }
      hashCode = (hashCode * 59) + PaginationLimitedTo.GetHashCode();
      if (UnretrievableAttributes != null)
      {
        hashCode = (hashCode * 59) + UnretrievableAttributes.GetHashCode();
      }
      if (DisableTypoToleranceOnWords != null)
      {
        hashCode = (hashCode * 59) + DisableTypoToleranceOnWords.GetHashCode();
      }
      if (AttributesToTransliterate != null)
      {
        hashCode = (hashCode * 59) + AttributesToTransliterate.GetHashCode();
      }
      if (CamelCaseAttributes != null)
      {
        hashCode = (hashCode * 59) + CamelCaseAttributes.GetHashCode();
      }
      if (DecompoundedAttributes != null)
      {
        hashCode = (hashCode * 59) + DecompoundedAttributes.GetHashCode();
      }
      if (IndexLanguages != null)
      {
        hashCode = (hashCode * 59) + IndexLanguages.GetHashCode();
      }
      if (DisablePrefixOnAttributes != null)
      {
        hashCode = (hashCode * 59) + DisablePrefixOnAttributes.GetHashCode();
      }
      hashCode = (hashCode * 59) + AllowCompressionOfIntegerArray.GetHashCode();
      if (NumericAttributesForFiltering != null)
      {
        hashCode = (hashCode * 59) + NumericAttributesForFiltering.GetHashCode();
      }
      if (SeparatorsToIndex != null)
      {
        hashCode = (hashCode * 59) + SeparatorsToIndex.GetHashCode();
      }
      if (SearchableAttributes != null)
      {
        hashCode = (hashCode * 59) + SearchableAttributes.GetHashCode();
      }
      if (UserData != null)
      {
        hashCode = (hashCode * 59) + UserData.GetHashCode();
      }
      if (CustomNormalization != null)
      {
        hashCode = (hashCode * 59) + CustomNormalization.GetHashCode();
      }
      if (AttributeForDistinct != null)
      {
        hashCode = (hashCode * 59) + AttributeForDistinct.GetHashCode();
      }
      return hashCode;
    }
  }

}

