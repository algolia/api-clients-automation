//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Search;

/// <summary>
/// BaseIndexSettings
/// </summary>
public partial class BaseIndexSettings
{
  /// <summary>
  /// Initializes a new instance of the BaseIndexSettings class.
  /// </summary>
  public BaseIndexSettings()
  {
  }

  /// <summary>
  /// Creates [replicas](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/), which are copies of a primary index with the same records but different settings.
  /// </summary>
  /// <value>Creates [replicas](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/), which are copies of a primary index with the same records but different settings.</value>
  [JsonPropertyName("replicas")]
  public List<string> Replicas { get; set; }

  /// <summary>
  /// Maximum number of hits accessible through pagination.
  /// </summary>
  /// <value>Maximum number of hits accessible through pagination.</value>
  [JsonPropertyName("paginationLimitedTo")]
  public int? PaginationLimitedTo { get; set; }

  /// <summary>
  /// Attributes that can't be retrieved at query time.
  /// </summary>
  /// <value>Attributes that can't be retrieved at query time.</value>
  [JsonPropertyName("unretrievableAttributes")]
  public List<string> UnretrievableAttributes { get; set; }

  /// <summary>
  /// Words for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).
  /// </summary>
  /// <value>Words for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/).</value>
  [JsonPropertyName("disableTypoToleranceOnWords")]
  public List<string> DisableTypoToleranceOnWords { get; set; }

  /// <summary>
  /// Attributes in your index to which [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead) applies. This will ensure that words indexed in Katakana or Kanji can also be searched in Hiragana.
  /// </summary>
  /// <value>Attributes in your index to which [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead) applies. This will ensure that words indexed in Katakana or Kanji can also be searched in Hiragana.</value>
  [JsonPropertyName("attributesToTransliterate")]
  public List<string> AttributesToTransliterate { get; set; }

  /// <summary>
  /// Attributes on which to split [camel case](https://wikipedia.org/wiki/Camel_case) words.
  /// </summary>
  /// <value>Attributes on which to split [camel case](https://wikipedia.org/wiki/Camel_case) words.</value>
  [JsonPropertyName("camelCaseAttributes")]
  public List<string> CamelCaseAttributes { get; set; }

  /// <summary>
  /// Attributes in your index to which [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding) applies.
  /// </summary>
  /// <value>Attributes in your index to which [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/) (decompounding) applies.</value>
  [JsonPropertyName("decompoundedAttributes")]
  public object DecompoundedAttributes { get; set; }

  /// <summary>
  /// Set the languages of your index, for language-specific processing steps such as [tokenization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/tokenization/) and [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
  /// </summary>
  /// <value>Set the languages of your index, for language-specific processing steps such as [tokenization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/tokenization/) and [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).</value>
  [JsonPropertyName("indexLanguages")]
  public List<string> IndexLanguages { get; set; }

  /// <summary>
  /// Attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search).
  /// </summary>
  /// <value>Attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search).</value>
  [JsonPropertyName("disablePrefixOnAttributes")]
  public List<string> DisablePrefixOnAttributes { get; set; }

  /// <summary>
  /// Incidates whether the engine compresses arrays with exclusively non-negative integers. When enabled, the compressed arrays may be reordered. 
  /// </summary>
  /// <value>Incidates whether the engine compresses arrays with exclusively non-negative integers. When enabled, the compressed arrays may be reordered. </value>
  [JsonPropertyName("allowCompressionOfIntegerArray")]
  public bool? AllowCompressionOfIntegerArray { get; set; }

  /// <summary>
  /// Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters).
  /// </summary>
  /// <value>Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters).</value>
  [JsonPropertyName("numericAttributesForFiltering")]
  public List<string> NumericAttributesForFiltering { get; set; }

  /// <summary>
  /// Controls which separators are added to an Algolia index as part of [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean). Separators are all non-letter characters except spaces and currency characters, such as $€£¥.
  /// </summary>
  /// <value>Controls which separators are added to an Algolia index as part of [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean). Separators are all non-letter characters except spaces and currency characters, such as $€£¥.</value>
  [JsonPropertyName("separatorsToIndex")]
  public string SeparatorsToIndex { get; set; }

  /// <summary>
  /// [Attributes used for searching](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/), including determining [if matches at the beginning of a word are important (ordered) or not (unordered)](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/how-to/configuring-searchable-attributes-the-right-way/#understanding-word-position). 
  /// </summary>
  /// <value>[Attributes used for searching](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/), including determining [if matches at the beginning of a word are important (ordered) or not (unordered)](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/how-to/configuring-searchable-attributes-the-right-way/#understanding-word-position). </value>
  [JsonPropertyName("searchableAttributes")]
  public List<string> SearchableAttributes { get; set; }

  /// <summary>
  /// Lets you store custom data in your indices.
  /// </summary>
  /// <value>Lets you store custom data in your indices.</value>
  [JsonPropertyName("userData")]
  public object UserData { get; set; }

  /// <summary>
  /// A list of characters and their normalized replacements to override Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).
  /// </summary>
  /// <value>A list of characters and their normalized replacements to override Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/).</value>
  [JsonPropertyName("customNormalization")]
  public Dictionary<string, Dictionary<string, string>> CustomNormalization { get; set; }

  /// <summary>
  /// Name of the deduplication attribute to be used with Algolia's [_distinct_ feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).
  /// </summary>
  /// <value>Name of the deduplication attribute to be used with Algolia's [_distinct_ feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature).</value>
  [JsonPropertyName("attributeForDistinct")]
  public string AttributeForDistinct { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class BaseIndexSettings {\n");
    sb.Append("  Replicas: ").Append(Replicas).Append("\n");
    sb.Append("  PaginationLimitedTo: ").Append(PaginationLimitedTo).Append("\n");
    sb.Append("  UnretrievableAttributes: ").Append(UnretrievableAttributes).Append("\n");
    sb.Append("  DisableTypoToleranceOnWords: ").Append(DisableTypoToleranceOnWords).Append("\n");
    sb.Append("  AttributesToTransliterate: ").Append(AttributesToTransliterate).Append("\n");
    sb.Append("  CamelCaseAttributes: ").Append(CamelCaseAttributes).Append("\n");
    sb.Append("  DecompoundedAttributes: ").Append(DecompoundedAttributes).Append("\n");
    sb.Append("  IndexLanguages: ").Append(IndexLanguages).Append("\n");
    sb.Append("  DisablePrefixOnAttributes: ").Append(DisablePrefixOnAttributes).Append("\n");
    sb.Append("  AllowCompressionOfIntegerArray: ").Append(AllowCompressionOfIntegerArray).Append("\n");
    sb.Append("  NumericAttributesForFiltering: ").Append(NumericAttributesForFiltering).Append("\n");
    sb.Append("  SeparatorsToIndex: ").Append(SeparatorsToIndex).Append("\n");
    sb.Append("  SearchableAttributes: ").Append(SearchableAttributes).Append("\n");
    sb.Append("  UserData: ").Append(UserData).Append("\n");
    sb.Append("  CustomNormalization: ").Append(CustomNormalization).Append("\n");
    sb.Append("  AttributeForDistinct: ").Append(AttributeForDistinct).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not BaseIndexSettings input)
    {
      return false;
    }

    return
        (Replicas == input.Replicas || Replicas != null && input.Replicas != null && Replicas.SequenceEqual(input.Replicas)) &&
        (PaginationLimitedTo == input.PaginationLimitedTo || PaginationLimitedTo.Equals(input.PaginationLimitedTo)) &&
        (UnretrievableAttributes == input.UnretrievableAttributes || UnretrievableAttributes != null && input.UnretrievableAttributes != null && UnretrievableAttributes.SequenceEqual(input.UnretrievableAttributes)) &&
        (DisableTypoToleranceOnWords == input.DisableTypoToleranceOnWords || DisableTypoToleranceOnWords != null && input.DisableTypoToleranceOnWords != null && DisableTypoToleranceOnWords.SequenceEqual(input.DisableTypoToleranceOnWords)) &&
        (AttributesToTransliterate == input.AttributesToTransliterate || AttributesToTransliterate != null && input.AttributesToTransliterate != null && AttributesToTransliterate.SequenceEqual(input.AttributesToTransliterate)) &&
        (CamelCaseAttributes == input.CamelCaseAttributes || CamelCaseAttributes != null && input.CamelCaseAttributes != null && CamelCaseAttributes.SequenceEqual(input.CamelCaseAttributes)) &&
        (DecompoundedAttributes == input.DecompoundedAttributes || (DecompoundedAttributes != null && DecompoundedAttributes.Equals(input.DecompoundedAttributes))) &&
        (IndexLanguages == input.IndexLanguages || IndexLanguages != null && input.IndexLanguages != null && IndexLanguages.SequenceEqual(input.IndexLanguages)) &&
        (DisablePrefixOnAttributes == input.DisablePrefixOnAttributes || DisablePrefixOnAttributes != null && input.DisablePrefixOnAttributes != null && DisablePrefixOnAttributes.SequenceEqual(input.DisablePrefixOnAttributes)) &&
        (AllowCompressionOfIntegerArray == input.AllowCompressionOfIntegerArray || AllowCompressionOfIntegerArray.Equals(input.AllowCompressionOfIntegerArray)) &&
        (NumericAttributesForFiltering == input.NumericAttributesForFiltering || NumericAttributesForFiltering != null && input.NumericAttributesForFiltering != null && NumericAttributesForFiltering.SequenceEqual(input.NumericAttributesForFiltering)) &&
        (SeparatorsToIndex == input.SeparatorsToIndex || (SeparatorsToIndex != null && SeparatorsToIndex.Equals(input.SeparatorsToIndex))) &&
        (SearchableAttributes == input.SearchableAttributes || SearchableAttributes != null && input.SearchableAttributes != null && SearchableAttributes.SequenceEqual(input.SearchableAttributes)) &&
        (UserData == input.UserData || (UserData != null && UserData.Equals(input.UserData))) &&
        (CustomNormalization == input.CustomNormalization || CustomNormalization != null && input.CustomNormalization != null && CustomNormalization.SequenceEqual(input.CustomNormalization)) &&
        (AttributeForDistinct == input.AttributeForDistinct || (AttributeForDistinct != null && AttributeForDistinct.Equals(input.AttributeForDistinct)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Replicas != null)
      {
        hashCode = (hashCode * 59) + Replicas.GetHashCode();
      }
      hashCode = (hashCode * 59) + PaginationLimitedTo.GetHashCode();
      if (UnretrievableAttributes != null)
      {
        hashCode = (hashCode * 59) + UnretrievableAttributes.GetHashCode();
      }
      if (DisableTypoToleranceOnWords != null)
      {
        hashCode = (hashCode * 59) + DisableTypoToleranceOnWords.GetHashCode();
      }
      if (AttributesToTransliterate != null)
      {
        hashCode = (hashCode * 59) + AttributesToTransliterate.GetHashCode();
      }
      if (CamelCaseAttributes != null)
      {
        hashCode = (hashCode * 59) + CamelCaseAttributes.GetHashCode();
      }
      if (DecompoundedAttributes != null)
      {
        hashCode = (hashCode * 59) + DecompoundedAttributes.GetHashCode();
      }
      if (IndexLanguages != null)
      {
        hashCode = (hashCode * 59) + IndexLanguages.GetHashCode();
      }
      if (DisablePrefixOnAttributes != null)
      {
        hashCode = (hashCode * 59) + DisablePrefixOnAttributes.GetHashCode();
      }
      hashCode = (hashCode * 59) + AllowCompressionOfIntegerArray.GetHashCode();
      if (NumericAttributesForFiltering != null)
      {
        hashCode = (hashCode * 59) + NumericAttributesForFiltering.GetHashCode();
      }
      if (SeparatorsToIndex != null)
      {
        hashCode = (hashCode * 59) + SeparatorsToIndex.GetHashCode();
      }
      if (SearchableAttributes != null)
      {
        hashCode = (hashCode * 59) + SearchableAttributes.GetHashCode();
      }
      if (UserData != null)
      {
        hashCode = (hashCode * 59) + UserData.GetHashCode();
      }
      if (CustomNormalization != null)
      {
        hashCode = (hashCode * 59) + CustomNormalization.GetHashCode();
      }
      if (AttributeForDistinct != null)
      {
        hashCode = (hashCode * 59) + AttributeForDistinct.GetHashCode();
      }
      return hashCode;
    }
  }

}

