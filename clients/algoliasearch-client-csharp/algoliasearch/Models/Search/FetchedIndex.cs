//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// FetchedIndex
/// </summary>
[DataContract(Name = "fetchedIndex")]
[JsonObject(MemberSerialization.OptOut)]
public partial class FetchedIndex
{
  /// <summary>
  /// Initializes a new instance of the FetchedIndex class.
  /// </summary>
  [JsonConstructor]
  public FetchedIndex() { }
  /// <summary>
  /// Initializes a new instance of the FetchedIndex class.
  /// </summary>
  /// <param name="name">Index name. (required).</param>
  /// <param name="createdAt">Index creation date. An empty string means that the index has no records. (required).</param>
  /// <param name="updatedAt">Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. (required).</param>
  /// <param name="entries">Number of records contained in the index. (required).</param>
  /// <param name="dataSize">Number of bytes of the index in minified format. (required).</param>
  /// <param name="fileSize">Number of bytes of the index binary file. (required).</param>
  /// <param name="lastBuildTimeS">Last build time. (required).</param>
  /// <param name="numberOfPendingTasks">Number of pending indexing operations. This value is deprecated and should not be used. (required) (default to 0).</param>
  /// <param name="pendingTask">A boolean which says whether the index has pending tasks. This value is deprecated and should not be used. (required) (default to false).</param>
  public FetchedIndex(string name, string createdAt, string updatedAt, int entries, int dataSize, int fileSize, int lastBuildTimeS, int numberOfPendingTasks, bool pendingTask)
  {
    Name = name ?? throw new ArgumentNullException(nameof(name));
    CreatedAt = createdAt ?? throw new ArgumentNullException(nameof(createdAt));
    UpdatedAt = updatedAt ?? throw new ArgumentNullException(nameof(updatedAt));
    Entries = entries;
    DataSize = dataSize;
    FileSize = fileSize;
    LastBuildTimeS = lastBuildTimeS;
    NumberOfPendingTasks = numberOfPendingTasks;
    PendingTask = pendingTask;
  }

  /// <summary>
  /// Index name.
  /// </summary>
  /// <value>Index name.</value>
  [DataMember(Name = "name")]
  public string Name { get; set; }

  /// <summary>
  /// Index creation date. An empty string means that the index has no records.
  /// </summary>
  /// <value>Index creation date. An empty string means that the index has no records.</value>
  [DataMember(Name = "createdAt")]
  public string CreatedAt { get; set; }

  /// <summary>
  /// Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
  /// </summary>
  /// <value>Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.</value>
  [DataMember(Name = "updatedAt")]
  public string UpdatedAt { get; set; }

  /// <summary>
  /// Number of records contained in the index.
  /// </summary>
  /// <value>Number of records contained in the index.</value>
  [DataMember(Name = "entries")]
  public int Entries { get; set; }

  /// <summary>
  /// Number of bytes of the index in minified format.
  /// </summary>
  /// <value>Number of bytes of the index in minified format.</value>
  [DataMember(Name = "dataSize")]
  public int DataSize { get; set; }

  /// <summary>
  /// Number of bytes of the index binary file.
  /// </summary>
  /// <value>Number of bytes of the index binary file.</value>
  [DataMember(Name = "fileSize")]
  public int FileSize { get; set; }

  /// <summary>
  /// Last build time.
  /// </summary>
  /// <value>Last build time.</value>
  [DataMember(Name = "lastBuildTimeS")]
  public int LastBuildTimeS { get; set; }

  /// <summary>
  /// Number of pending indexing operations. This value is deprecated and should not be used.
  /// </summary>
  /// <value>Number of pending indexing operations. This value is deprecated and should not be used.</value>
  [DataMember(Name = "numberOfPendingTasks")]
  public int NumberOfPendingTasks { get; set; }

  /// <summary>
  /// A boolean which says whether the index has pending tasks. This value is deprecated and should not be used.
  /// </summary>
  /// <value>A boolean which says whether the index has pending tasks. This value is deprecated and should not be used.</value>
  [DataMember(Name = "pendingTask")]
  public bool PendingTask { get; set; }

  /// <summary>
  /// Only present if the index is a replica. Contains the name of the related primary index.
  /// </summary>
  /// <value>Only present if the index is a replica. Contains the name of the related primary index.</value>
  [DataMember(Name = "primary")]
  public string Primary { get; set; }

  /// <summary>
  /// Only present if the index is a primary index with replicas. Contains the names of all linked replicas.
  /// </summary>
  /// <value>Only present if the index is a primary index with replicas. Contains the names of all linked replicas.</value>
  [DataMember(Name = "replicas")]
  public List<string> Replicas { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class FetchedIndex {\n");
    sb.Append("  Name: ").Append(Name).Append("\n");
    sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
    sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
    sb.Append("  Entries: ").Append(Entries).Append("\n");
    sb.Append("  DataSize: ").Append(DataSize).Append("\n");
    sb.Append("  FileSize: ").Append(FileSize).Append("\n");
    sb.Append("  LastBuildTimeS: ").Append(LastBuildTimeS).Append("\n");
    sb.Append("  NumberOfPendingTasks: ").Append(NumberOfPendingTasks).Append("\n");
    sb.Append("  PendingTask: ").Append(PendingTask).Append("\n");
    sb.Append("  Primary: ").Append(Primary).Append("\n");
    sb.Append("  Replicas: ").Append(Replicas).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonConvert.SerializeObject(this, Formatting.Indented);
  }

}

