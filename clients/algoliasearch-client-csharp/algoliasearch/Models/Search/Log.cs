//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Search;

/// <summary>
/// Log
/// </summary>
[DataContract(Name = "log")]
[JsonObject(MemberSerialization.OptOut)]
public partial class Log
{
  /// <summary>
  /// Initializes a new instance of the Log class.
  /// </summary>
  [JsonConstructor]
  public Log() { }
  /// <summary>
  /// Initializes a new instance of the Log class.
  /// </summary>
  /// <param name="timestamp">Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format. (required).</param>
  /// <param name="method">HTTP method of the performed request. (required).</param>
  /// <param name="answerCode">HTTP response code. (required).</param>
  /// <param name="queryBody">Request body. Truncated after 1,000 characters. (required).</param>
  /// <param name="answer">Answer body. Truncated after 1,000 characters. (required).</param>
  /// <param name="url">Request URL. (required).</param>
  /// <param name="ip">IP address of the client that performed the request. (required).</param>
  /// <param name="queryHeaders">Request headers (API key is obfuscated). (required).</param>
  /// <param name="sha1">SHA1 signature of the log entry. (required).</param>
  /// <param name="nbApiCalls">Number of API calls. (required).</param>
  /// <param name="processingTimeMs">Processing time for the query. Doesn&#39;t include network time. (required).</param>
  public Log(string timestamp, string method, string answerCode, string queryBody, string answer, string url, string ip, string queryHeaders, string sha1, string nbApiCalls, string processingTimeMs)
  {
    Timestamp = timestamp ?? throw new ArgumentNullException(nameof(timestamp));
    Method = method ?? throw new ArgumentNullException(nameof(method));
    AnswerCode = answerCode ?? throw new ArgumentNullException(nameof(answerCode));
    QueryBody = queryBody ?? throw new ArgumentNullException(nameof(queryBody));
    Answer = answer ?? throw new ArgumentNullException(nameof(answer));
    Url = url ?? throw new ArgumentNullException(nameof(url));
    Ip = ip ?? throw new ArgumentNullException(nameof(ip));
    QueryHeaders = queryHeaders ?? throw new ArgumentNullException(nameof(queryHeaders));
    Sha1 = sha1 ?? throw new ArgumentNullException(nameof(sha1));
    NbApiCalls = nbApiCalls ?? throw new ArgumentNullException(nameof(nbApiCalls));
    ProcessingTimeMs = processingTimeMs ?? throw new ArgumentNullException(nameof(processingTimeMs));
  }

  /// <summary>
  /// Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.
  /// </summary>
  /// <value>Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601) format.</value>
  [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = false)]
  public string Timestamp { get; set; }

  /// <summary>
  /// HTTP method of the performed request.
  /// </summary>
  /// <value>HTTP method of the performed request.</value>
  [DataMember(Name = "method", IsRequired = true, EmitDefaultValue = false)]
  public string Method { get; set; }

  /// <summary>
  /// HTTP response code.
  /// </summary>
  /// <value>HTTP response code.</value>
  [DataMember(Name = "answer_code", IsRequired = true, EmitDefaultValue = false)]
  public string AnswerCode { get; set; }

  /// <summary>
  /// Request body. Truncated after 1,000 characters.
  /// </summary>
  /// <value>Request body. Truncated after 1,000 characters.</value>
  [DataMember(Name = "query_body", IsRequired = true, EmitDefaultValue = false)]
  public string QueryBody { get; set; }

  /// <summary>
  /// Answer body. Truncated after 1,000 characters.
  /// </summary>
  /// <value>Answer body. Truncated after 1,000 characters.</value>
  [DataMember(Name = "answer", IsRequired = true, EmitDefaultValue = false)]
  public string Answer { get; set; }

  /// <summary>
  /// Request URL.
  /// </summary>
  /// <value>Request URL.</value>
  [DataMember(Name = "url", IsRequired = true, EmitDefaultValue = false)]
  public string Url { get; set; }

  /// <summary>
  /// IP address of the client that performed the request.
  /// </summary>
  /// <value>IP address of the client that performed the request.</value>
  [DataMember(Name = "ip", IsRequired = true, EmitDefaultValue = false)]
  public string Ip { get; set; }

  /// <summary>
  /// Request headers (API key is obfuscated).
  /// </summary>
  /// <value>Request headers (API key is obfuscated).</value>
  [DataMember(Name = "query_headers", IsRequired = true, EmitDefaultValue = false)]
  public string QueryHeaders { get; set; }

  /// <summary>
  /// SHA1 signature of the log entry.
  /// </summary>
  /// <value>SHA1 signature of the log entry.</value>
  [DataMember(Name = "sha1", IsRequired = true, EmitDefaultValue = false)]
  public string Sha1 { get; set; }

  /// <summary>
  /// Number of API calls.
  /// </summary>
  /// <value>Number of API calls.</value>
  [DataMember(Name = "nb_api_calls", IsRequired = true, EmitDefaultValue = false)]
  public string NbApiCalls { get; set; }

  /// <summary>
  /// Processing time for the query. Doesn't include network time.
  /// </summary>
  /// <value>Processing time for the query. Doesn't include network time.</value>
  [DataMember(Name = "processing_time_ms", IsRequired = true, EmitDefaultValue = false)]
  public string ProcessingTimeMs { get; set; }

  /// <summary>
  /// Index targeted by the query.
  /// </summary>
  /// <value>Index targeted by the query.</value>
  [DataMember(Name = "index", EmitDefaultValue = false)]
  public string Index { get; set; }

  /// <summary>
  /// Query parameters sent with the request.
  /// </summary>
  /// <value>Query parameters sent with the request.</value>
  [DataMember(Name = "query_params", EmitDefaultValue = false)]
  public string QueryParams { get; set; }

  /// <summary>
  /// Number of hits returned for the query.
  /// </summary>
  /// <value>Number of hits returned for the query.</value>
  [DataMember(Name = "query_nb_hits", EmitDefaultValue = false)]
  public string QueryNbHits { get; set; }

  /// <summary>
  /// Performed queries for the given request.
  /// </summary>
  /// <value>Performed queries for the given request.</value>
  [DataMember(Name = "inner_queries", EmitDefaultValue = false)]
  public List<LogQuery> InnerQueries { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Log {\n");
    sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
    sb.Append("  Method: ").Append(Method).Append("\n");
    sb.Append("  AnswerCode: ").Append(AnswerCode).Append("\n");
    sb.Append("  QueryBody: ").Append(QueryBody).Append("\n");
    sb.Append("  Answer: ").Append(Answer).Append("\n");
    sb.Append("  Url: ").Append(Url).Append("\n");
    sb.Append("  Ip: ").Append(Ip).Append("\n");
    sb.Append("  QueryHeaders: ").Append(QueryHeaders).Append("\n");
    sb.Append("  Sha1: ").Append(Sha1).Append("\n");
    sb.Append("  NbApiCalls: ").Append(NbApiCalls).Append("\n");
    sb.Append("  ProcessingTimeMs: ").Append(ProcessingTimeMs).Append("\n");
    sb.Append("  Index: ").Append(Index).Append("\n");
    sb.Append("  QueryParams: ").Append(QueryParams).Append("\n");
    sb.Append("  QueryNbHits: ").Append(QueryNbHits).Append("\n");
    sb.Append("  InnerQueries: ").Append(InnerQueries).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonConvert.SerializeObject(this, Formatting.Indented);
  }

}

