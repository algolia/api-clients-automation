//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Search;

/// <summary>
/// SearchForFacetsOptions
/// </summary>
public partial class SearchForFacetsOptions
{

  /// <summary>
  /// Gets or Sets Type
  /// </summary>
  [JsonPropertyName("type")]
  public SearchTypeFacet? Type { get; set; }
  /// <summary>
  /// Initializes a new instance of the SearchForFacetsOptions class.
  /// </summary>
  [JsonConstructor]
  public SearchForFacetsOptions() { }
  /// <summary>
  /// Initializes a new instance of the SearchForFacetsOptions class.
  /// </summary>
  /// <param name="facet">Facet name. (required).</param>
  /// <param name="indexName">Index name (case-sensitive). (required).</param>
  /// <param name="type">type (required).</param>
  public SearchForFacetsOptions(string facet, string indexName, SearchTypeFacet? type)
  {
    Facet = facet ?? throw new ArgumentNullException(nameof(facet));
    IndexName = indexName ?? throw new ArgumentNullException(nameof(indexName));
    Type = type;
  }

  /// <summary>
  /// Facet name.
  /// </summary>
  /// <value>Facet name.</value>
  [JsonPropertyName("facet")]
  public string Facet { get; set; }

  /// <summary>
  /// Index name (case-sensitive).
  /// </summary>
  /// <value>Index name (case-sensitive).</value>
  [JsonPropertyName("indexName")]
  public string IndexName { get; set; }

  /// <summary>
  /// Text to search inside the facet's values.
  /// </summary>
  /// <value>Text to search inside the facet's values.</value>
  [JsonPropertyName("facetQuery")]
  public string FacetQuery { get; set; }

  /// <summary>
  /// Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
  /// </summary>
  /// <value>Maximum number of facet values to return when [searching for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).</value>
  [JsonPropertyName("maxFacetHits")]
  public int? MaxFacetHits { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SearchForFacetsOptions {\n");
    sb.Append("  Facet: ").Append(Facet).Append("\n");
    sb.Append("  IndexName: ").Append(IndexName).Append("\n");
    sb.Append("  FacetQuery: ").Append(FacetQuery).Append("\n");
    sb.Append("  MaxFacetHits: ").Append(MaxFacetHits).Append("\n");
    sb.Append("  Type: ").Append(Type).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SearchForFacetsOptions input)
    {
      return false;
    }

    return
        (Facet == input.Facet || (Facet != null && Facet.Equals(input.Facet))) &&
        (IndexName == input.IndexName || (IndexName != null && IndexName.Equals(input.IndexName))) &&
        (FacetQuery == input.FacetQuery || (FacetQuery != null && FacetQuery.Equals(input.FacetQuery))) &&
        (MaxFacetHits == input.MaxFacetHits || MaxFacetHits.Equals(input.MaxFacetHits)) &&
        (Type == input.Type || Type.Equals(input.Type));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Facet != null)
      {
        hashCode = (hashCode * 59) + Facet.GetHashCode();
      }
      if (IndexName != null)
      {
        hashCode = (hashCode * 59) + IndexName.GetHashCode();
      }
      if (FacetQuery != null)
      {
        hashCode = (hashCode * 59) + FacetQuery.GetHashCode();
      }
      hashCode = (hashCode * 59) + MaxFacetHits.GetHashCode();
      hashCode = (hashCode * 59) + Type.GetHashCode();
      return hashCode;
    }
  }

}

