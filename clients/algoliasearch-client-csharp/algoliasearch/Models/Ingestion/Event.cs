//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// An event describe a step of the task execution flow..
/// </summary>
[DataContract(Name = "Event")]
[JsonObject(MemberSerialization.OptOut)]
public partial class Event
{

  /// <summary>
  /// Gets or Sets Status
  /// </summary>
  [DataMember(Name = "status")]
  public EventStatus Status { get; set; }

  /// <summary>
  /// Gets or Sets Type
  /// </summary>
  [DataMember(Name = "type")]
  public EventType Type { get; set; }
  /// <summary>
  /// Initializes a new instance of the Event class.
  /// </summary>
  [JsonConstructor]
  public Event() { }
  /// <summary>
  /// Initializes a new instance of the Event class.
  /// </summary>
  /// <param name="eventID">The event UUID. (required).</param>
  /// <param name="runID">The run UUID. (required).</param>
  /// <param name="status">status (required).</param>
  /// <param name="type">type (required).</param>
  /// <param name="batchSize">The extracted record batch size. (required).</param>
  /// <param name="publishedAt">Date of publish (RFC3339 format). (required).</param>
  public Event(string eventID, string runID, EventStatus status, EventType type, int batchSize, string publishedAt)
  {
    EventID = eventID ?? throw new ArgumentNullException(nameof(eventID));
    RunID = runID ?? throw new ArgumentNullException(nameof(runID));
    Status = status;
    Type = type;
    BatchSize = batchSize;
    PublishedAt = publishedAt ?? throw new ArgumentNullException(nameof(publishedAt));
  }

  /// <summary>
  /// The event UUID.
  /// </summary>
  /// <value>The event UUID.</value>
  [DataMember(Name = "eventID")]
  public string EventID { get; set; }

  /// <summary>
  /// The run UUID.
  /// </summary>
  /// <value>The run UUID.</value>
  [DataMember(Name = "runID")]
  public string RunID { get; set; }

  /// <summary>
  /// The parent event, the cause of this event.
  /// </summary>
  /// <value>The parent event, the cause of this event.</value>
  [DataMember(Name = "parentID")]
  public string? ParentID { get; set; }

  /// <summary>
  /// The extracted record batch size.
  /// </summary>
  /// <value>The extracted record batch size.</value>
  [DataMember(Name = "batchSize")]
  public int BatchSize { get; set; }

  /// <summary>
  /// Gets or Sets Data
  /// </summary>
  [DataMember(Name = "data")]
  public Dictionary<string, object> Data { get; set; }

  /// <summary>
  /// Date of publish (RFC3339 format).
  /// </summary>
  /// <value>Date of publish (RFC3339 format).</value>
  [DataMember(Name = "publishedAt")]
  public string PublishedAt { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class Event {\n");
    sb.Append("  EventID: ").Append(EventID).Append("\n");
    sb.Append("  RunID: ").Append(RunID).Append("\n");
    sb.Append("  ParentID: ").Append(ParentID).Append("\n");
    sb.Append("  Status: ").Append(Status).Append("\n");
    sb.Append("  Type: ").Append(Type).Append("\n");
    sb.Append("  BatchSize: ").Append(BatchSize).Append("\n");
    sb.Append("  Data: ").Append(Data).Append("\n");
    sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonConvert.SerializeObject(this, Formatting.Indented);
  }

}

