//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.Reflection;
using Algolia.Search.Models;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// SourceUpdateInput
/// </summary>
[JsonConverter(typeof(SourceUpdateInputJsonConverter))]
[DataContract(Name = "SourceUpdateInput")]
public partial class SourceUpdateInput : AbstractSchema
{
  /// <summary>
  /// Initializes a new instance of the SourceUpdateInput class
  /// with a SourceUpdateCommercetools
  /// </summary>
  /// <param name="actualInstance">An instance of SourceUpdateCommercetools.</param>
  public SourceUpdateInput(SourceUpdateCommercetools actualInstance)
  {
    IsNullable = false;
    SchemaType = "oneOf";
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceUpdateInput class
  /// with a SourceJSON
  /// </summary>
  /// <param name="actualInstance">An instance of SourceJSON.</param>
  public SourceUpdateInput(SourceJSON actualInstance)
  {
    IsNullable = false;
    SchemaType = "oneOf";
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceUpdateInput class
  /// with a SourceCSV
  /// </summary>
  /// <param name="actualInstance">An instance of SourceCSV.</param>
  public SourceUpdateInput(SourceCSV actualInstance)
  {
    IsNullable = false;
    SchemaType = "oneOf";
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceUpdateInput class
  /// with a SourceBigQuery
  /// </summary>
  /// <param name="actualInstance">An instance of SourceBigQuery.</param>
  public SourceUpdateInput(SourceBigQuery actualInstance)
  {
    IsNullable = false;
    SchemaType = "oneOf";
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }

  /// <summary>
  /// Initializes a new instance of the SourceUpdateInput class
  /// with a SourceUpdateDocker
  /// </summary>
  /// <param name="actualInstance">An instance of SourceUpdateDocker.</param>
  public SourceUpdateInput(SourceUpdateDocker actualInstance)
  {
    IsNullable = false;
    SchemaType = "oneOf";
    ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
  }


  /// <summary>
  /// Gets or Sets ActualInstance
  /// </summary>
  public sealed override object ActualInstance { get; set; }

  /// <summary>
  /// Get the actual instance of `SourceUpdateCommercetools`. If the actual instance is not `SourceUpdateCommercetools`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceUpdateCommercetools</returns>
  public SourceUpdateCommercetools AsSourceUpdateCommercetools()
  {
    return (SourceUpdateCommercetools)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceJSON`. If the actual instance is not `SourceJSON`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceJSON</returns>
  public SourceJSON AsSourceJSON()
  {
    return (SourceJSON)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceCSV`. If the actual instance is not `SourceCSV`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceCSV</returns>
  public SourceCSV AsSourceCSV()
  {
    return (SourceCSV)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceBigQuery`. If the actual instance is not `SourceBigQuery`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceBigQuery</returns>
  public SourceBigQuery AsSourceBigQuery()
  {
    return (SourceBigQuery)ActualInstance;
  }

  /// <summary>
  /// Get the actual instance of `SourceUpdateDocker`. If the actual instance is not `SourceUpdateDocker`,
  /// the InvalidClassException will be thrown
  /// </summary>
  /// <returns>An instance of SourceUpdateDocker</returns>
  public SourceUpdateDocker AsSourceUpdateDocker()
  {
    return (SourceUpdateDocker)ActualInstance;
  }


  /// <summary>
  /// Check if the actual instance is of `SourceUpdateCommercetools` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceUpdateCommercetools()
  {
    return ActualInstance.GetType() == typeof(SourceUpdateCommercetools);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceJSON` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceJSON()
  {
    return ActualInstance.GetType() == typeof(SourceJSON);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceCSV` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceCSV()
  {
    return ActualInstance.GetType() == typeof(SourceCSV);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceBigQuery` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceBigQuery()
  {
    return ActualInstance.GetType() == typeof(SourceBigQuery);
  }

  /// <summary>
  /// Check if the actual instance is of `SourceUpdateDocker` type.
  /// </summary>
  /// <returns>Whether or not the instance is the type</returns>
  public bool IsSourceUpdateDocker()
  {
    return ActualInstance.GetType() == typeof(SourceUpdateDocker);
  }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    var sb = new StringBuilder();
    sb.Append("class SourceUpdateInput {\n");
    sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public override string ToJson()
  {
    return JsonConvert.SerializeObject(ActualInstance, JsonConfig.AlgoliaJsonSerializerSettings);
  }

  /// <summary>
  /// Converts the JSON string into an instance of SourceUpdateInput
  /// </summary>
  /// <param name="jsonString">JSON string</param>
  /// <returns>An instance of SourceUpdateInput</returns>
  public static SourceUpdateInput FromJson(string jsonString)
  {
    SourceUpdateInput newSourceUpdateInput = null;

    if (string.IsNullOrEmpty(jsonString))
    {
      return newSourceUpdateInput;
    }
    try
    {
      return new SourceUpdateInput(JsonConvert.DeserializeObject<SourceUpdateCommercetools>(jsonString, AdditionalPropertiesSerializerSettings));
    }
    catch (Exception exception)
    {
      // deserialization failed, try the next one
      System.Diagnostics.Debug.WriteLine($"Failed to deserialize `{jsonString}` into SourceUpdateCommercetools: {exception}");
    }
    try
    {
      return new SourceUpdateInput(JsonConvert.DeserializeObject<SourceJSON>(jsonString, AdditionalPropertiesSerializerSettings));
    }
    catch (Exception exception)
    {
      // deserialization failed, try the next one
      System.Diagnostics.Debug.WriteLine($"Failed to deserialize `{jsonString}` into SourceJSON: {exception}");
    }
    try
    {
      return new SourceUpdateInput(JsonConvert.DeserializeObject<SourceCSV>(jsonString, AdditionalPropertiesSerializerSettings));
    }
    catch (Exception exception)
    {
      // deserialization failed, try the next one
      System.Diagnostics.Debug.WriteLine($"Failed to deserialize `{jsonString}` into SourceCSV: {exception}");
    }
    try
    {
      return new SourceUpdateInput(JsonConvert.DeserializeObject<SourceBigQuery>(jsonString, AdditionalPropertiesSerializerSettings));
    }
    catch (Exception exception)
    {
      // deserialization failed, try the next one
      System.Diagnostics.Debug.WriteLine($"Failed to deserialize `{jsonString}` into SourceBigQuery: {exception}");
    }
    try
    {
      return new SourceUpdateInput(JsonConvert.DeserializeObject<SourceUpdateDocker>(jsonString, AdditionalPropertiesSerializerSettings));
    }
    catch (Exception exception)
    {
      // deserialization failed, try the next one
      System.Diagnostics.Debug.WriteLine($"Failed to deserialize `{jsonString}` into SourceUpdateDocker: {exception}");
    }

    throw new InvalidDataException($"The JSON string `{jsonString}` cannot be deserialized into any schema defined.");
  }

}

/// <summary>
/// Custom JSON converter for SourceUpdateInput
/// </summary>
public class SourceUpdateInputJsonConverter : JsonConverter
{
  /// <summary>
  /// To write the JSON string
  /// </summary>
  /// <param name="writer">JSON writer</param>
  /// <param name="value">Object to be converted into a JSON string</param>
  /// <param name="serializer">JSON Serializer</param>
  public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
  {
    writer.WriteRawValue((string)(typeof(SourceUpdateInput).GetMethod("ToJson")?.Invoke(value, null)));
  }

  /// <summary>
  /// To convert a JSON string into an object
  /// </summary>
  /// <param name="reader">JSON reader</param>
  /// <param name="objectType">Object type</param>
  /// <param name="existingValue">Existing value</param>
  /// <param name="serializer">JSON Serializer</param>
  /// <returns>The object converted from the JSON string</returns>
  public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
  {
    if (reader.TokenType != JsonToken.Null)
    {
      return objectType.GetMethod("FromJson")?.Invoke(null, new object[] { JObject.Load(reader).ToString(Formatting.None) });
    }
    return null;
  }

  /// <summary>
  /// Check if the object can be converted
  /// </summary>
  /// <param name="objectType">Object type</param>
  /// <returns>True if the object can be converted</returns>
  public override bool CanConvert(Type objectType)
  {
    return false;
  }
}

