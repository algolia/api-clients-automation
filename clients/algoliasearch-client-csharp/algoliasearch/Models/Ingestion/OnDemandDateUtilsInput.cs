//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// Input for a manually-triggered task whose source is of type `bigquery` and for which extracted data spans a given time range.
/// </summary>
public partial class OnDemandDateUtilsInput
{
  /// <summary>
  /// Initializes a new instance of the OnDemandDateUtilsInput class.
  /// </summary>
  [JsonConstructor]
  public OnDemandDateUtilsInput() { }
  /// <summary>
  /// Initializes a new instance of the OnDemandDateUtilsInput class.
  /// </summary>
  /// <param name="startDate">Earliest date in RFC3339 format of the extracted data from Big Query. (required).</param>
  /// <param name="endDate">Latest date in RFC3339 format of the extracted data from Big Query. (required).</param>
  public OnDemandDateUtilsInput(string startDate, string endDate)
  {
    StartDate = startDate ?? throw new ArgumentNullException(nameof(startDate));
    EndDate = endDate ?? throw new ArgumentNullException(nameof(endDate));
  }

  /// <summary>
  /// Earliest date in RFC3339 format of the extracted data from Big Query.
  /// </summary>
  /// <value>Earliest date in RFC3339 format of the extracted data from Big Query.</value>
  [JsonPropertyName("startDate")]
  public string StartDate { get; set; }

  /// <summary>
  /// Latest date in RFC3339 format of the extracted data from Big Query.
  /// </summary>
  /// <value>Latest date in RFC3339 format of the extracted data from Big Query.</value>
  [JsonPropertyName("endDate")]
  public string EndDate { get; set; }

  /// <summary>
  /// Gets or Sets Mapping
  /// </summary>
  [JsonPropertyName("mapping")]
  public MappingInput Mapping { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class OnDemandDateUtilsInput {\n");
    sb.Append("  StartDate: ").Append(StartDate).Append("\n");
    sb.Append("  EndDate: ").Append(EndDate).Append("\n");
    sb.Append("  Mapping: ").Append(Mapping).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not OnDemandDateUtilsInput input)
    {
      return false;
    }

    return
        (StartDate == input.StartDate || (StartDate != null && StartDate.Equals(input.StartDate))) &&
        (EndDate == input.EndDate || (EndDate != null && EndDate.Equals(input.EndDate))) &&
        (Mapping == input.Mapping || (Mapping != null && Mapping.Equals(input.Mapping)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (StartDate != null)
      {
        hashCode = (hashCode * 59) + StartDate.GetHashCode();
      }
      if (EndDate != null)
      {
        hashCode = (hashCode * 59) + EndDate.GetHashCode();
      }
      if (Mapping != null)
      {
        hashCode = (hashCode * 59) + Mapping.GetHashCode();
      }
      return hashCode;
    }
  }

}

