//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// DestinationIndexName
/// </summary>
public partial class DestinationIndexName
{

  /// <summary>
  /// Gets or Sets RecordType
  /// </summary>
  [JsonPropertyName("recordType")]
  public RecordType? RecordType { get; set; }
  /// <summary>
  /// Initializes a new instance of the DestinationIndexName class.
  /// </summary>
  [JsonConstructor]
  public DestinationIndexName() { }
  /// <summary>
  /// Initializes a new instance of the DestinationIndexName class.
  /// </summary>
  /// <param name="indexName">The index name to store data in. (required).</param>
  public DestinationIndexName(string indexName)
  {
    IndexName = indexName ?? throw new ArgumentNullException(nameof(indexName));
  }

  /// <summary>
  /// The index name to store data in.
  /// </summary>
  /// <value>The index name to store data in.</value>
  [JsonPropertyName("indexName")]
  public string IndexName { get; set; }

  /// <summary>
  /// Determines the attributes to exclude from an Algolia record. To remove nested element, you can separate the path to the element with dots (`.`):   - \"foo.bar\": will remove `bar` from `foo`. To remove elements from an array, you can use the following:   - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.   - \"foo.[*].bar\": will remove `bar` from every elements of `foo`. 
  /// </summary>
  /// <value>Determines the attributes to exclude from an Algolia record. To remove nested element, you can separate the path to the element with dots (`.`):   - \"foo.bar\": will remove `bar` from `foo`. To remove elements from an array, you can use the following:   - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.   - \"foo.[*].bar\": will remove `bar` from every elements of `foo`. </value>
  [JsonPropertyName("attributesToExclude")]
  public List<string> AttributesToExclude { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class DestinationIndexName {\n");
    sb.Append("  IndexName: ").Append(IndexName).Append("\n");
    sb.Append("  RecordType: ").Append(RecordType).Append("\n");
    sb.Append("  AttributesToExclude: ").Append(AttributesToExclude).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not DestinationIndexName input)
    {
      return false;
    }

    return
        (IndexName == input.IndexName || (IndexName != null && IndexName.Equals(input.IndexName))) &&
        (RecordType == input.RecordType || RecordType.Equals(input.RecordType)) &&
        (AttributesToExclude == input.AttributesToExclude || AttributesToExclude != null && input.AttributesToExclude != null && AttributesToExclude.SequenceEqual(input.AttributesToExclude));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (IndexName != null)
      {
        hashCode = (hashCode * 59) + IndexName.GetHashCode();
      }
      hashCode = (hashCode * 59) + RecordType.GetHashCode();
      if (AttributesToExclude != null)
      {
        hashCode = (hashCode * 59) + AttributesToExclude.GetHashCode();
      }
      return hashCode;
    }
  }

}

