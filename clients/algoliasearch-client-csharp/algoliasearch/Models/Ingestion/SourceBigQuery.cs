//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// SourceBigQuery
/// </summary>
public partial class SourceBigQuery
{

  /// <summary>
  /// Gets or Sets DataType
  /// </summary>
  [JsonPropertyName("dataType")]
  public BigQueryDataType? DataType { get; set; }
  /// <summary>
  /// Initializes a new instance of the SourceBigQuery class.
  /// </summary>
  [JsonConstructor]
  public SourceBigQuery() { }
  /// <summary>
  /// Initializes a new instance of the SourceBigQuery class.
  /// </summary>
  /// <param name="projectID">Project ID of the BigQuery Source. (required).</param>
  /// <param name="datasetID">Dataset ID of the BigQuery Source. (required).</param>
  public SourceBigQuery(string projectID, string datasetID)
  {
    ProjectID = projectID ?? throw new ArgumentNullException(nameof(projectID));
    DatasetID = datasetID ?? throw new ArgumentNullException(nameof(datasetID));
  }

  /// <summary>
  /// Project ID of the BigQuery Source.
  /// </summary>
  /// <value>Project ID of the BigQuery Source.</value>
  [JsonPropertyName("projectID")]
  public string ProjectID { get; set; }

  /// <summary>
  /// Dataset ID of the BigQuery Source.
  /// </summary>
  /// <value>Dataset ID of the BigQuery Source.</value>
  [JsonPropertyName("datasetID")]
  public string DatasetID { get; set; }

  /// <summary>
  /// Table name (for default BQ).
  /// </summary>
  /// <value>Table name (for default BQ).</value>
  [JsonPropertyName("table")]
  public string Table { get; set; }

  /// <summary>
  /// Table prefix (for Google Analytics).
  /// </summary>
  /// <value>Table prefix (for Google Analytics).</value>
  [JsonPropertyName("tablePrefix")]
  public string TablePrefix { get; set; }

  /// <summary>
  /// Custom SQL request to extract data from the BigQuery table.
  /// </summary>
  /// <value>Custom SQL request to extract data from the BigQuery table.</value>
  [JsonPropertyName("customSQLRequest")]
  public string CustomSQLRequest { get; set; }

  /// <summary>
  /// The name of the column that contains the unique ID, used as `objectID` in Algolia.
  /// </summary>
  /// <value>The name of the column that contains the unique ID, used as `objectID` in Algolia.</value>
  [JsonPropertyName("uniqueIDColumn")]
  public string UniqueIDColumn { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SourceBigQuery {\n");
    sb.Append("  ProjectID: ").Append(ProjectID).Append("\n");
    sb.Append("  DatasetID: ").Append(DatasetID).Append("\n");
    sb.Append("  DataType: ").Append(DataType).Append("\n");
    sb.Append("  Table: ").Append(Table).Append("\n");
    sb.Append("  TablePrefix: ").Append(TablePrefix).Append("\n");
    sb.Append("  CustomSQLRequest: ").Append(CustomSQLRequest).Append("\n");
    sb.Append("  UniqueIDColumn: ").Append(UniqueIDColumn).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SourceBigQuery input)
    {
      return false;
    }

    return
        (ProjectID == input.ProjectID || (ProjectID != null && ProjectID.Equals(input.ProjectID))) &&
        (DatasetID == input.DatasetID || (DatasetID != null && DatasetID.Equals(input.DatasetID))) &&
        (DataType == input.DataType || DataType.Equals(input.DataType)) &&
        (Table == input.Table || (Table != null && Table.Equals(input.Table))) &&
        (TablePrefix == input.TablePrefix || (TablePrefix != null && TablePrefix.Equals(input.TablePrefix))) &&
        (CustomSQLRequest == input.CustomSQLRequest || (CustomSQLRequest != null && CustomSQLRequest.Equals(input.CustomSQLRequest))) &&
        (UniqueIDColumn == input.UniqueIDColumn || (UniqueIDColumn != null && UniqueIDColumn.Equals(input.UniqueIDColumn)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (ProjectID != null)
      {
        hashCode = (hashCode * 59) + ProjectID.GetHashCode();
      }
      if (DatasetID != null)
      {
        hashCode = (hashCode * 59) + DatasetID.GetHashCode();
      }
      hashCode = (hashCode * 59) + DataType.GetHashCode();
      if (Table != null)
      {
        hashCode = (hashCode * 59) + Table.GetHashCode();
      }
      if (TablePrefix != null)
      {
        hashCode = (hashCode * 59) + TablePrefix.GetHashCode();
      }
      if (CustomSQLRequest != null)
      {
        hashCode = (hashCode * 59) + CustomSQLRequest.GetHashCode();
      }
      if (UniqueIDColumn != null)
      {
        hashCode = (hashCode * 59) + UniqueIDColumn.GetHashCode();
      }
      return hashCode;
    }
  }

}

