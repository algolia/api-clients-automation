//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Ingestion;

/// <summary>
/// SourceUpdateShopify
/// </summary>
public partial class SourceUpdateShopify
{
  /// <summary>
  /// Initializes a new instance of the SourceUpdateShopify class.
  /// </summary>
  public SourceUpdateShopify()
  {
  }

  /// <summary>
  /// Whether to index collection IDs.   If your store has `has_collection_search_page` set to true, collection IDs will be indexed even if `collectionIDIndexing` is false.  
  /// </summary>
  /// <value>Whether to index collection IDs.   If your store has `has_collection_search_page` set to true, collection IDs will be indexed even if `collectionIDIndexing` is false.  </value>
  [JsonPropertyName("collectionIDIndexing")]
  public bool? CollectionIDIndexing { get; set; }

  /// <summary>
  /// Whether to increase the number of indexed collections per product. If true, Algolia indexes 200 collections per product. If false, 100 collections per product are indexed. 
  /// </summary>
  /// <value>Whether to increase the number of indexed collections per product. If true, Algolia indexes 200 collections per product. If false, 100 collections per product are indexed. </value>
  [JsonPropertyName("increaseProductCollectionLimit")]
  public bool? IncreaseProductCollectionLimit { get; set; }

  /// <summary>
  /// Whether to set the default price ratio to 1 if no sale price is present.  The price ratio is determined by the ratio: `sale_price` / `regular_price`. If no sale price is present, the price ratio would be 0. If `defaultPriceRatioAsOne` is true, the price ratio is indexed as 1 instead. 
  /// </summary>
  /// <value>Whether to set the default price ratio to 1 if no sale price is present.  The price ratio is determined by the ratio: `sale_price` / `regular_price`. If no sale price is present, the price ratio would be 0. If `defaultPriceRatioAsOne` is true, the price ratio is indexed as 1 instead. </value>
  [JsonPropertyName("defaultPriceRatioAsOne")]
  public bool? DefaultPriceRatioAsOne { get; set; }

  /// <summary>
  /// Whether to exclude out-of-stock variants when determining the `max_variant_price` and `min_variant_price` attributes. 
  /// </summary>
  /// <value>Whether to exclude out-of-stock variants when determining the `max_variant_price` and `min_variant_price` attributes. </value>
  [JsonPropertyName("excludeOOSVariantsForPriceAtTRS")]
  public bool? ExcludeOOSVariantsForPriceAtTRS { get; set; }

  /// <summary>
  /// Whether to include an inventory with every variant for every product record. 
  /// </summary>
  /// <value>Whether to include an inventory with every variant for every product record. </value>
  [JsonPropertyName("includeVariantsInventory")]
  public bool? IncludeVariantsInventory { get; set; }

  /// <summary>
  /// Whether to include collection IDs and handles in the product records. 
  /// </summary>
  /// <value>Whether to include collection IDs and handles in the product records. </value>
  [JsonPropertyName("hasCollectionSearchPage")]
  public bool? HasCollectionSearchPage { get; set; }

  /// <summary>
  /// Whether to convert tags on products to named tags.  To learn more, see [Named tags](https://www.algolia.com/doc/integration/shopify/sending-and-managing-data/named-tags). 
  /// </summary>
  /// <value>Whether to convert tags on products to named tags.  To learn more, see [Named tags](https://www.algolia.com/doc/integration/shopify/sending-and-managing-data/named-tags). </value>
  [JsonPropertyName("productNamedTags")]
  public bool? ProductNamedTags { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class SourceUpdateShopify {\n");
    sb.Append("  CollectionIDIndexing: ").Append(CollectionIDIndexing).Append("\n");
    sb.Append("  IncreaseProductCollectionLimit: ").Append(IncreaseProductCollectionLimit).Append("\n");
    sb.Append("  DefaultPriceRatioAsOne: ").Append(DefaultPriceRatioAsOne).Append("\n");
    sb.Append("  ExcludeOOSVariantsForPriceAtTRS: ").Append(ExcludeOOSVariantsForPriceAtTRS).Append("\n");
    sb.Append("  IncludeVariantsInventory: ").Append(IncludeVariantsInventory).Append("\n");
    sb.Append("  HasCollectionSearchPage: ").Append(HasCollectionSearchPage).Append("\n");
    sb.Append("  ProductNamedTags: ").Append(ProductNamedTags).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not SourceUpdateShopify input)
    {
      return false;
    }

    return
        (CollectionIDIndexing == input.CollectionIDIndexing || CollectionIDIndexing.Equals(input.CollectionIDIndexing)) &&
        (IncreaseProductCollectionLimit == input.IncreaseProductCollectionLimit || IncreaseProductCollectionLimit.Equals(input.IncreaseProductCollectionLimit)) &&
        (DefaultPriceRatioAsOne == input.DefaultPriceRatioAsOne || DefaultPriceRatioAsOne.Equals(input.DefaultPriceRatioAsOne)) &&
        (ExcludeOOSVariantsForPriceAtTRS == input.ExcludeOOSVariantsForPriceAtTRS || ExcludeOOSVariantsForPriceAtTRS.Equals(input.ExcludeOOSVariantsForPriceAtTRS)) &&
        (IncludeVariantsInventory == input.IncludeVariantsInventory || IncludeVariantsInventory.Equals(input.IncludeVariantsInventory)) &&
        (HasCollectionSearchPage == input.HasCollectionSearchPage || HasCollectionSearchPage.Equals(input.HasCollectionSearchPage)) &&
        (ProductNamedTags == input.ProductNamedTags || ProductNamedTags.Equals(input.ProductNamedTags));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + CollectionIDIndexing.GetHashCode();
      hashCode = (hashCode * 59) + IncreaseProductCollectionLimit.GetHashCode();
      hashCode = (hashCode * 59) + DefaultPriceRatioAsOne.GetHashCode();
      hashCode = (hashCode * 59) + ExcludeOOSVariantsForPriceAtTRS.GetHashCode();
      hashCode = (hashCode * 59) + IncludeVariantsInventory.GetHashCode();
      hashCode = (hashCode * 59) + HasCollectionSearchPage.GetHashCode();
      hashCode = (hashCode * 59) + ProductNamedTags.GetHashCode();
      return hashCode;
    }
  }

}

