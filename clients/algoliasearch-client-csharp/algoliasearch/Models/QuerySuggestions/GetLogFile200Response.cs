//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.QuerySuggestions;

/// <summary>
/// GetLogFile200Response
/// </summary>
public partial class GetLogFile200Response
{

  /// <summary>
  /// Gets or Sets Level
  /// </summary>
  [JsonPropertyName("level")]
  public LogLevel? Level { get; set; }
  /// <summary>
  /// Initializes a new instance of the GetLogFile200Response class.
  /// </summary>
  public GetLogFile200Response()
  {
  }

  /// <summary>
  /// Date and time of the log entry, in RFC 3339 format.
  /// </summary>
  /// <value>Date and time of the log entry, in RFC 3339 format.</value>
  [JsonPropertyName("timestamp")]
  public string Timestamp { get; set; }

  /// <summary>
  /// Details about this log entry.
  /// </summary>
  /// <value>Details about this log entry.</value>
  [JsonPropertyName("message")]
  public string Message { get; set; }

  /// <summary>
  /// Level indicating the position of a suggestion in a hierarchy of records.  For example, a `contextLevel` of 1 indicates that this suggestion belongs to a previous suggestion with `contextLevel` 0. 
  /// </summary>
  /// <value>Level indicating the position of a suggestion in a hierarchy of records.  For example, a `contextLevel` of 1 indicates that this suggestion belongs to a previous suggestion with `contextLevel` 0. </value>
  [JsonPropertyName("contextLevel")]
  public int? ContextLevel { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class GetLogFile200Response {\n");
    sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
    sb.Append("  Level: ").Append(Level).Append("\n");
    sb.Append("  Message: ").Append(Message).Append("\n");
    sb.Append("  ContextLevel: ").Append(ContextLevel).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not GetLogFile200Response input)
    {
      return false;
    }

    return
        (Timestamp == input.Timestamp || (Timestamp != null && Timestamp.Equals(input.Timestamp))) &&
        (Level == input.Level || Level.Equals(input.Level)) &&
        (Message == input.Message || (Message != null && Message.Equals(input.Message))) &&
        (ContextLevel == input.ContextLevel || ContextLevel.Equals(input.ContextLevel));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Timestamp != null)
      {
        hashCode = (hashCode * 59) + Timestamp.GetHashCode();
      }
      hashCode = (hashCode * 59) + Level.GetHashCode();
      if (Message != null)
      {
        hashCode = (hashCode * 59) + Message.GetHashCode();
      }
      hashCode = (hashCode * 59) + ContextLevel.GetHashCode();
      return hashCode;
    }
  }

}

