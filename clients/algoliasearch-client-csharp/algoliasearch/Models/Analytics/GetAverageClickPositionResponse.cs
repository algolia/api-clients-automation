//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// GetAverageClickPositionResponse
/// </summary>
public partial class GetAverageClickPositionResponse
{
  /// <summary>
  /// Initializes a new instance of the GetAverageClickPositionResponse class.
  /// </summary>
  [JsonConstructor]
  public GetAverageClickPositionResponse() { }
  /// <summary>
  /// Initializes a new instance of the GetAverageClickPositionResponse class.
  /// </summary>
  /// <param name="average">Average count of all click events. (required).</param>
  /// <param name="clickCount">Number of click events. (required).</param>
  /// <param name="dates">Average click positions. (required).</param>
  public GetAverageClickPositionResponse(double average, int clickCount, List<AverageClickEvent> dates)
  {
    Average = average;
    ClickCount = clickCount;
    Dates = dates ?? throw new ArgumentNullException(nameof(dates));
  }

  /// <summary>
  /// Average count of all click events.
  /// </summary>
  /// <value>Average count of all click events.</value>
  [JsonPropertyName("average")]
  public double Average { get; set; }

  /// <summary>
  /// Number of click events.
  /// </summary>
  /// <value>Number of click events.</value>
  [JsonPropertyName("clickCount")]
  public int ClickCount { get; set; }

  /// <summary>
  /// Average click positions.
  /// </summary>
  /// <value>Average click positions.</value>
  [JsonPropertyName("dates")]
  public List<AverageClickEvent> Dates { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class GetAverageClickPositionResponse {\n");
    sb.Append("  Average: ").Append(Average).Append("\n");
    sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
    sb.Append("  Dates: ").Append(Dates).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not GetAverageClickPositionResponse input)
    {
      return false;
    }

    return
        (Average == input.Average || Average.Equals(input.Average)) &&
        (ClickCount == input.ClickCount || ClickCount.Equals(input.ClickCount)) &&
        (Dates == input.Dates || Dates != null && input.Dates != null && Dates.SequenceEqual(input.Dates));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + Average.GetHashCode();
      hashCode = (hashCode * 59) + ClickCount.GetHashCode();
      if (Dates != null)
      {
        hashCode = (hashCode * 59) + Dates.GetHashCode();
      }
      return hashCode;
    }
  }

}

