//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// GetConversationRateResponse
/// </summary>
public partial class GetConversationRateResponse
{
  /// <summary>
  /// Initializes a new instance of the GetConversationRateResponse class.
  /// </summary>
  [JsonConstructor]
  public GetConversationRateResponse() { }
  /// <summary>
  /// Initializes a new instance of the GetConversationRateResponse class.
  /// </summary>
  /// <param name="rate">[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).  (required).</param>
  /// <param name="trackedSearchCount">Number of tracked searches. This is the number of search requests where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. (required).</param>
  /// <param name="conversionCount">Number of converted clicks. (required).</param>
  /// <param name="dates">Conversion events. (required).</param>
  public GetConversationRateResponse(double rate, int? trackedSearchCount, int conversionCount, List<ConversionRateEvent> dates)
  {
    Rate = rate;
    TrackedSearchCount = trackedSearchCount ?? throw new ArgumentNullException(nameof(trackedSearchCount));
    ConversionCount = conversionCount;
    Dates = dates ?? throw new ArgumentNullException(nameof(dates));
  }

  /// <summary>
  /// [Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). 
  /// </summary>
  /// <value>[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). </value>
  [JsonPropertyName("rate")]
  public double Rate { get; set; }

  /// <summary>
  /// Number of tracked searches. This is the number of search requests where the `clickAnalytics` parameter is `true`.
  /// </summary>
  /// <value>Number of tracked searches. This is the number of search requests where the `clickAnalytics` parameter is `true`.</value>
  [JsonPropertyName("trackedSearchCount")]
  public int? TrackedSearchCount { get; set; }

  /// <summary>
  /// Number of converted clicks.
  /// </summary>
  /// <value>Number of converted clicks.</value>
  [JsonPropertyName("conversionCount")]
  public int ConversionCount { get; set; }

  /// <summary>
  /// Conversion events.
  /// </summary>
  /// <value>Conversion events.</value>
  [JsonPropertyName("dates")]
  public List<ConversionRateEvent> Dates { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class GetConversationRateResponse {\n");
    sb.Append("  Rate: ").Append(Rate).Append("\n");
    sb.Append("  TrackedSearchCount: ").Append(TrackedSearchCount).Append("\n");
    sb.Append("  ConversionCount: ").Append(ConversionCount).Append("\n");
    sb.Append("  Dates: ").Append(Dates).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not GetConversationRateResponse input)
    {
      return false;
    }

    return
        (Rate == input.Rate || Rate.Equals(input.Rate)) &&
        (TrackedSearchCount == input.TrackedSearchCount || (TrackedSearchCount != null && TrackedSearchCount.Equals(input.TrackedSearchCount))) &&
        (ConversionCount == input.ConversionCount || ConversionCount.Equals(input.ConversionCount)) &&
        (Dates == input.Dates || Dates != null && input.Dates != null && Dates.SequenceEqual(input.Dates));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      hashCode = (hashCode * 59) + Rate.GetHashCode();
      if (TrackedSearchCount != null)
      {
        hashCode = (hashCode * 59) + TrackedSearchCount.GetHashCode();
      }
      hashCode = (hashCode * 59) + ConversionCount.GetHashCode();
      if (Dates != null)
      {
        hashCode = (hashCode * 59) + Dates.GetHashCode();
      }
      return hashCode;
    }
  }

}

