//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// TopSearchWithAnalytics
/// </summary>
public partial class TopSearchWithAnalytics
{
  /// <summary>
  /// Initializes a new instance of the TopSearchWithAnalytics class.
  /// </summary>
  [JsonConstructor]
  public TopSearchWithAnalytics() { }
  /// <summary>
  /// Initializes a new instance of the TopSearchWithAnalytics class.
  /// </summary>
  /// <param name="search">User query. (required).</param>
  /// <param name="count">Number of tracked _and_ untracked searches (where the &#x60;clickAnalytics&#x60; parameter isn&#39;t &#x60;true&#x60;). (required).</param>
  /// <param name="clickThroughRate">[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).  (required).</param>
  /// <param name="averageClickPosition">Average [position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) of clicked search result. (required).</param>
  /// <param name="conversionRate">[Conversion rate (CR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).  (required).</param>
  /// <param name="trackedSearchCount">Number of tracked searches. This is the number of search requests where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. (required).</param>
  /// <param name="clickCount">Number of click events. (required).</param>
  /// <param name="conversionCount">Number of converted clicks. (required).</param>
  /// <param name="nbHits">Number of results (hits). (required).</param>
  public TopSearchWithAnalytics(string search, int count, double clickThroughRate, int averageClickPosition, double conversionRate, int? trackedSearchCount, int clickCount, int conversionCount, int nbHits)
  {
    Search = search ?? throw new ArgumentNullException(nameof(search));
    Count = count;
    ClickThroughRate = clickThroughRate;
    AverageClickPosition = averageClickPosition;
    ConversionRate = conversionRate;
    TrackedSearchCount = trackedSearchCount ?? throw new ArgumentNullException(nameof(trackedSearchCount));
    ClickCount = clickCount;
    ConversionCount = conversionCount;
    NbHits = nbHits;
  }

  /// <summary>
  /// User query.
  /// </summary>
  /// <value>User query.</value>
  [JsonPropertyName("search")]
  public string Search { get; set; }

  /// <summary>
  /// Number of tracked _and_ untracked searches (where the `clickAnalytics` parameter isn't `true`).
  /// </summary>
  /// <value>Number of tracked _and_ untracked searches (where the `clickAnalytics` parameter isn't `true`).</value>
  [JsonPropertyName("count")]
  public int Count { get; set; }

  /// <summary>
  /// [Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). 
  /// </summary>
  /// <value>[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). </value>
  [JsonPropertyName("clickThroughRate")]
  public double ClickThroughRate { get; set; }

  /// <summary>
  /// Average [position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) of clicked search result.
  /// </summary>
  /// <value>Average [position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) of clicked search result.</value>
  [JsonPropertyName("averageClickPosition")]
  public int AverageClickPosition { get; set; }

  /// <summary>
  /// [Conversion rate (CR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate). 
  /// </summary>
  /// <value>[Conversion rate (CR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate). </value>
  [JsonPropertyName("conversionRate")]
  public double ConversionRate { get; set; }

  /// <summary>
  /// Number of tracked searches. This is the number of search requests where the `clickAnalytics` parameter is `true`.
  /// </summary>
  /// <value>Number of tracked searches. This is the number of search requests where the `clickAnalytics` parameter is `true`.</value>
  [JsonPropertyName("trackedSearchCount")]
  public int? TrackedSearchCount { get; set; }

  /// <summary>
  /// Number of click events.
  /// </summary>
  /// <value>Number of click events.</value>
  [JsonPropertyName("clickCount")]
  public int ClickCount { get; set; }

  /// <summary>
  /// Number of converted clicks.
  /// </summary>
  /// <value>Number of converted clicks.</value>
  [JsonPropertyName("conversionCount")]
  public int ConversionCount { get; set; }

  /// <summary>
  /// Number of results (hits).
  /// </summary>
  /// <value>Number of results (hits).</value>
  [JsonPropertyName("nbHits")]
  public int NbHits { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class TopSearchWithAnalytics {\n");
    sb.Append("  Search: ").Append(Search).Append("\n");
    sb.Append("  Count: ").Append(Count).Append("\n");
    sb.Append("  ClickThroughRate: ").Append(ClickThroughRate).Append("\n");
    sb.Append("  AverageClickPosition: ").Append(AverageClickPosition).Append("\n");
    sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
    sb.Append("  TrackedSearchCount: ").Append(TrackedSearchCount).Append("\n");
    sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
    sb.Append("  ConversionCount: ").Append(ConversionCount).Append("\n");
    sb.Append("  NbHits: ").Append(NbHits).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not TopSearchWithAnalytics input)
    {
      return false;
    }

    return
        (Search == input.Search || (Search != null && Search.Equals(input.Search))) &&
        (Count == input.Count || Count.Equals(input.Count)) &&
        (ClickThroughRate == input.ClickThroughRate || ClickThroughRate.Equals(input.ClickThroughRate)) &&
        (AverageClickPosition == input.AverageClickPosition || AverageClickPosition.Equals(input.AverageClickPosition)) &&
        (ConversionRate == input.ConversionRate || ConversionRate.Equals(input.ConversionRate)) &&
        (TrackedSearchCount == input.TrackedSearchCount || (TrackedSearchCount != null && TrackedSearchCount.Equals(input.TrackedSearchCount))) &&
        (ClickCount == input.ClickCount || ClickCount.Equals(input.ClickCount)) &&
        (ConversionCount == input.ConversionCount || ConversionCount.Equals(input.ConversionCount)) &&
        (NbHits == input.NbHits || NbHits.Equals(input.NbHits));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Search != null)
      {
        hashCode = (hashCode * 59) + Search.GetHashCode();
      }
      hashCode = (hashCode * 59) + Count.GetHashCode();
      hashCode = (hashCode * 59) + ClickThroughRate.GetHashCode();
      hashCode = (hashCode * 59) + AverageClickPosition.GetHashCode();
      hashCode = (hashCode * 59) + ConversionRate.GetHashCode();
      if (TrackedSearchCount != null)
      {
        hashCode = (hashCode * 59) + TrackedSearchCount.GetHashCode();
      }
      hashCode = (hashCode * 59) + ClickCount.GetHashCode();
      hashCode = (hashCode * 59) + ConversionCount.GetHashCode();
      hashCode = (hashCode * 59) + NbHits.GetHashCode();
      return hashCode;
    }
  }

}

