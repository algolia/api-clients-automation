//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// Currency code.
/// </summary>
public partial class CurrenciesValue
{
  /// <summary>
  /// Initializes a new instance of the CurrenciesValue class.
  /// </summary>
  public CurrenciesValue()
  {
  }

  /// <summary>
  /// Currency code.
  /// </summary>
  /// <value>Currency code.</value>
  [JsonPropertyName("currency")]
  public string Currency { get; set; }

  /// <summary>
  /// Revenue associated with this search in this currency.
  /// </summary>
  /// <value>Revenue associated with this search in this currency.</value>
  [JsonPropertyName("revenue")]
  public float? Revenue { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class CurrenciesValue {\n");
    sb.Append("  Currency: ").Append(Currency).Append("\n");
    sb.Append("  Revenue: ").Append(Revenue).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not CurrenciesValue input)
    {
      return false;
    }

    return
        (Currency == input.Currency || (Currency != null && Currency.Equals(input.Currency))) &&
        (Revenue == input.Revenue || Revenue.Equals(input.Revenue));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Currency != null)
      {
        hashCode = (hashCode * 59) + Currency.GetHashCode();
      }
      hashCode = (hashCode * 59) + Revenue.GetHashCode();
      return hashCode;
    }
  }

}

