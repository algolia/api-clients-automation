//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Analytics;

/// <summary>
/// Click position.
/// </summary>
public partial class ClickPositionsInner
{
  /// <summary>
  /// Initializes a new instance of the ClickPositionsInner class.
  /// </summary>
  public ClickPositionsInner()
  {
  }

  /// <summary>
  /// Range of positions in the search results, using the pattern `[start,end]`.  For positions 11 and up, click events are summed over the specified range. `-1` indicates the end of the list of search results. 
  /// </summary>
  /// <value>Range of positions in the search results, using the pattern `[start,end]`.  For positions 11 and up, click events are summed over the specified range. `-1` indicates the end of the list of search results. </value>
  [JsonPropertyName("position")]
  public List<int> Position { get; set; }

  /// <summary>
  /// Number of times this search has been clicked at that position.
  /// </summary>
  /// <value>Number of times this search has been clicked at that position.</value>
  [JsonPropertyName("clickCount")]
  public int? ClickCount { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class ClickPositionsInner {\n");
    sb.Append("  Position: ").Append(Position).Append("\n");
    sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not ClickPositionsInner input)
    {
      return false;
    }

    return
        (Position == input.Position || Position != null && input.Position != null && Position.SequenceEqual(input.Position)) &&
        (ClickCount == input.ClickCount || ClickCount.Equals(input.ClickCount));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Position != null)
      {
        hashCode = (hashCode * 59) + Position.GetHashCode();
      }
      hashCode = (hashCode * 59) + ClickCount.GetHashCode();
      return hashCode;
    }
  }

}

