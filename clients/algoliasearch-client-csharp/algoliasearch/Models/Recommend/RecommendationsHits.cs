//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Text;
using System.Linq;
using System.Text.Json.Serialization;
using System.Collections.Generic;
using Algolia.Search.Serializer;
using System.Text.Json;

namespace Algolia.Search.Models.Recommend;

/// <summary>
/// RecommendationsHits
/// </summary>
public partial class RecommendationsHits
{
  /// <summary>
  /// Initializes a new instance of the RecommendationsHits class.
  /// </summary>
  [JsonConstructor]
  public RecommendationsHits() { }
  /// <summary>
  /// Initializes a new instance of the RecommendationsHits class.
  /// </summary>
  /// <param name="hits">hits (required).</param>
  public RecommendationsHits(List<RecommendationsHit> hits)
  {
    Hits = hits ?? throw new ArgumentNullException(nameof(hits));
  }

  /// <summary>
  /// Gets or Sets Hits
  /// </summary>
  [JsonPropertyName("hits")]
  public List<RecommendationsHit> Hits { get; set; }

  /// <summary>
  /// Search query.
  /// </summary>
  /// <value>Search query.</value>
  [JsonPropertyName("query")]
  public string Query { get; set; }

  /// <summary>
  /// URL-encoded string of all search parameters.
  /// </summary>
  /// <value>URL-encoded string of all search parameters.</value>
  [JsonPropertyName("params")]
  public string VarParams { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class RecommendationsHits {\n");
    sb.Append("  Hits: ").Append(Hits).Append("\n");
    sb.Append("  Query: ").Append(Query).Append("\n");
    sb.Append("  VarParams: ").Append(VarParams).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonSerializer.Serialize(this, JsonConfig.Options);
  }

  /// <summary>
  /// Returns true if objects are equal
  /// </summary>
  /// <param name="obj">Object to be compared</param>
  /// <returns>Boolean</returns>
  public override bool Equals(object obj)
  {
    if (obj is not RecommendationsHits input)
    {
      return false;
    }

    return
        (Hits == input.Hits || Hits != null && input.Hits != null && Hits.SequenceEqual(input.Hits)) &&
        (Query == input.Query || (Query != null && Query.Equals(input.Query))) &&
        (VarParams == input.VarParams || (VarParams != null && VarParams.Equals(input.VarParams)));
  }

  /// <summary>
  /// Gets the hash code
  /// </summary>
  /// <returns>Hash code</returns>
  public override int GetHashCode()
  {
    unchecked // Overflow is fine, just wrap
    {
      int hashCode = 41;
      if (Hits != null)
      {
        hashCode = (hashCode * 59) + Hits.GetHashCode();
      }
      if (Query != null)
      {
        hashCode = (hashCode * 59) + Query.GetHashCode();
      }
      if (VarParams != null)
      {
        hashCode = (hashCode * 59) + VarParams.GetHashCode();
      }
      return hashCode;
    }
  }

}

