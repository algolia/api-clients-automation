//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;
using Algolia.Search.Models.Common;
using Algolia.Search.Serializer;

namespace Algolia.Search.Models.Personalization;

/// <summary>
/// EventScoring
/// </summary>
[DataContract(Name = "eventScoring")]
public partial class EventScoring
{
  /// <summary>
  /// Initializes a new instance of the EventScoring class.
  /// </summary>
  [JsonConstructor]
  public EventScoring() { }
  /// <summary>
  /// Initializes a new instance of the EventScoring class.
  /// </summary>
  /// <param name="score">The score for the event. (required).</param>
  /// <param name="eventName">The name of the event. (required).</param>
  /// <param name="eventType">The type of the event. (required).</param>
  public EventScoring(int score, string eventName, string eventType)
  {
    Score = score;
    EventName = eventName ?? throw new ArgumentNullException(nameof(eventName));
    EventType = eventType ?? throw new ArgumentNullException(nameof(eventType));
  }

  /// <summary>
  /// The score for the event.
  /// </summary>
  /// <value>The score for the event.</value>
  [DataMember(Name = "score")]
  public int Score { get; set; }

  /// <summary>
  /// The name of the event.
  /// </summary>
  /// <value>The name of the event.</value>
  [DataMember(Name = "eventName")]
  public string EventName { get; set; }

  /// <summary>
  /// The type of the event.
  /// </summary>
  /// <value>The type of the event.</value>
  [DataMember(Name = "eventType")]
  public string EventType { get; set; }

  /// <summary>
  /// Returns the string presentation of the object
  /// </summary>
  /// <returns>String presentation of the object</returns>
  public override string ToString()
  {
    StringBuilder sb = new StringBuilder();
    sb.Append("class EventScoring {\n");
    sb.Append("  Score: ").Append(Score).Append("\n");
    sb.Append("  EventName: ").Append(EventName).Append("\n");
    sb.Append("  EventType: ").Append(EventType).Append("\n");
    sb.Append("}\n");
    return sb.ToString();
  }

  /// <summary>
  /// Returns the JSON string presentation of the object
  /// </summary>
  /// <returns>JSON string presentation of the object</returns>
  public virtual string ToJson()
  {
    return JsonConvert.SerializeObject(this, Formatting.Indented);
  }

}

