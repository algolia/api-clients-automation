//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Personalization.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Personalization.Client.OpenAPIDateConverter;

namespace Algolia.Search.Personalization.Models
{
  /// <summary>
  /// GetUserTokenResponse
  /// </summary>
  [DataContract(Name = "getUserTokenResponse")]
  public partial class GetUserTokenResponse : IEquatable<GetUserTokenResponse>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="GetUserTokenResponse" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected GetUserTokenResponse() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="GetUserTokenResponse" /> class.
    /// </summary>
    /// <param name="userToken">userToken representing the user for which to fetch the Personalization profile. (required).</param>
    /// <param name="lastEventAt">Date of last event update. (ISO-8601 format). (required).</param>
    /// <param name="scores">The userToken scores. (required).</param>
    public GetUserTokenResponse(string userToken = default(string), string lastEventAt = default(string), Object scores = default(Object))
    {
      // to ensure "userToken" is required (not null)
      if (userToken == null)
      {
        throw new ArgumentNullException("userToken is a required property for GetUserTokenResponse and cannot be null");
      }
      this.UserToken = userToken;
      // to ensure "lastEventAt" is required (not null)
      if (lastEventAt == null)
      {
        throw new ArgumentNullException("lastEventAt is a required property for GetUserTokenResponse and cannot be null");
      }
      this.LastEventAt = lastEventAt;
      // to ensure "scores" is required (not null)
      if (scores == null)
      {
        throw new ArgumentNullException("scores is a required property for GetUserTokenResponse and cannot be null");
      }
      this.Scores = scores;
    }

    /// <summary>
    /// userToken representing the user for which to fetch the Personalization profile.
    /// </summary>
    /// <value>userToken representing the user for which to fetch the Personalization profile.</value>
    [DataMember(Name = "userToken", IsRequired = true, EmitDefaultValue = true)]
    public string UserToken { get; set; }

    /// <summary>
    /// Date of last event update. (ISO-8601 format).
    /// </summary>
    /// <value>Date of last event update. (ISO-8601 format).</value>
    [DataMember(Name = "lastEventAt", IsRequired = true, EmitDefaultValue = true)]
    public string LastEventAt { get; set; }

    /// <summary>
    /// The userToken scores.
    /// </summary>
    /// <value>The userToken scores.</value>
    [DataMember(Name = "scores", IsRequired = true, EmitDefaultValue = true)]
    public Object Scores { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class GetUserTokenResponse {\n");
      sb.Append("  UserToken: ").Append(UserToken).Append("\n");
      sb.Append("  LastEventAt: ").Append(LastEventAt).Append("\n");
      sb.Append("  Scores: ").Append(Scores).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as GetUserTokenResponse);
    }

    /// <summary>
    /// Returns true if GetUserTokenResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of GetUserTokenResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(GetUserTokenResponse input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.UserToken == input.UserToken ||
              (this.UserToken != null &&
              this.UserToken.Equals(input.UserToken))
          ) &&
          (
              this.LastEventAt == input.LastEventAt ||
              (this.LastEventAt != null &&
              this.LastEventAt.Equals(input.LastEventAt))
          ) &&
          (
              this.Scores == input.Scores ||
              (this.Scores != null &&
              this.Scores.Equals(input.Scores))
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.UserToken != null)
        {
          hashCode = (hashCode * 59) + this.UserToken.GetHashCode();
        }
        if (this.LastEventAt != null)
        {
          hashCode = (hashCode * 59) + this.LastEventAt.GetHashCode();
        }
        if (this.Scores != null)
        {
          hashCode = (hashCode * 59) + this.Scores.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
