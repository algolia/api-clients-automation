//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections.Generic;
using Algolia.Search.Models;
using Algolia.Search.Transport;
using Algolia.Search.Utils;

namespace Algolia.Search.Clients
{
  /// <summary>
  /// Recommend client configuration
  /// </summary>
  public sealed class RecommendConfig : AlgoliaConfig
  {
    /// <summary>
    /// The configuration of the Recommend client
    /// A client should have it's own configuration ie on configuration per client instance
    /// </summary>
    /// <param name="appId">Your application ID</param>
    /// <param name="apiKey">Your API Key</param>
    public RecommendConfig(string appId, string apiKey) : base(appId, apiKey, "Recommend")
    {
      DefaultHosts = GetDefaultHosts(appId);
      Compression = CompressionType.NONE;
    }

    private static List<StatefulHost> GetDefaultHosts(string appId)
    {
      List<StatefulHost> hosts = new List<StatefulHost>
    {
      new StatefulHost
      {
        Url = $"{appId}-dsn.algolia.net",
        Up = true,
        LastUse = DateTime.UtcNow,
        Accept = CallType.Read
      },
      new StatefulHost
      {
        Url = $"{appId}.algolia.net", Up = true, LastUse = DateTime.UtcNow, Accept = CallType.Write,
      }
    };

      var commonHosts = new List<StatefulHost>
    {
      new StatefulHost
      {
        Url = $"{appId}-1.algolianet.com",
        Up = true,
        LastUse = DateTime.UtcNow,
        Accept = CallType.Read | CallType.Write,
      },
      new StatefulHost
      {
        Url = $"{appId}-2.algolianet.com",
        Up = true,
        LastUse = DateTime.UtcNow,
        Accept = CallType.Read | CallType.Write,
      },
      new StatefulHost
      {
        Url = $"{appId}-3.algolianet.com",
        Up = true,
        LastUse = DateTime.UtcNow,
        Accept = CallType.Read | CallType.Write,
      }
    }.Shuffle();

      hosts.AddRange(commonHosts);
      return hosts;
    }
  }
}
