//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Recommend.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Recommend.Client.OpenAPIDateConverter;

namespace Algolia.Search.Recommend.Models
{
  /// <summary>
  /// Recommend hit.
  /// </summary>
  [DataContract(Name = "recommendHit")]
  public partial class RecommendHit : Dictionary<String, Object>, IEquatable<RecommendHit>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="RecommendHit" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected RecommendHit()
    {
      this.AdditionalProperties = new Dictionary<string, object>();
    }
    /// <summary>
    /// Initializes a new instance of the <see cref="RecommendHit" /> class.
    /// </summary>
    /// <param name="objectID">Unique object identifier. (required).</param>
    /// <param name="highlightResult">Show highlighted section and words matched on a query..</param>
    /// <param name="snippetResult">Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty..</param>
    /// <param name="rankingInfo">rankingInfo.</param>
    /// <param name="distinctSeqID">distinctSeqID.</param>
    /// <param name="score">Recommendation score. (required).</param>
    public RecommendHit(string objectID = default(string), Dictionary<string, HighlightResult> highlightResult = default(Dictionary<string, HighlightResult>), Dictionary<string, SnippetResult> snippetResult = default(Dictionary<string, SnippetResult>), RankingInfo rankingInfo = default(RankingInfo), int distinctSeqID = default(int), double score = default(double)) : base()
    {
      // to ensure "objectID" is required (not null)
      if (objectID == null)
      {
        throw new ArgumentNullException("objectID is a required property for RecommendHit and cannot be null");
      }
      this.ObjectID = objectID;
      this.Score = score;
      this.HighlightResult = highlightResult;
      this.SnippetResult = snippetResult;
      this.RankingInfo = rankingInfo;
      this.DistinctSeqID = distinctSeqID;
      this.AdditionalProperties = new Dictionary<string, object>();
    }

    /// <summary>
    /// Unique object identifier.
    /// </summary>
    /// <value>Unique object identifier.</value>
    [DataMember(Name = "objectID", IsRequired = true, EmitDefaultValue = true)]
    public string ObjectID { get; set; }

    /// <summary>
    /// Show highlighted section and words matched on a query.
    /// </summary>
    /// <value>Show highlighted section and words matched on a query.</value>
    [DataMember(Name = "_highlightResult", EmitDefaultValue = false)]
    public Dictionary<string, HighlightResult> HighlightResult { get; set; }

    /// <summary>
    /// Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty.
    /// </summary>
    /// <value>Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty.</value>
    [DataMember(Name = "_snippetResult", EmitDefaultValue = false)]
    public Dictionary<string, SnippetResult> SnippetResult { get; set; }

    /// <summary>
    /// Gets or Sets RankingInfo
    /// </summary>
    [DataMember(Name = "_rankingInfo", EmitDefaultValue = false)]
    public RankingInfo RankingInfo { get; set; }

    /// <summary>
    /// Gets or Sets DistinctSeqID
    /// </summary>
    [DataMember(Name = "_distinctSeqID", EmitDefaultValue = false)]
    public int DistinctSeqID { get; set; }

    /// <summary>
    /// Recommendation score.
    /// </summary>
    /// <value>Recommendation score.</value>
    [DataMember(Name = "_score", IsRequired = true, EmitDefaultValue = true)]
    public double Score { get; set; }

    /// <summary>
    /// Gets or Sets additional properties
    /// </summary>
    [JsonExtensionData]
    public IDictionary<string, object> AdditionalProperties { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class RecommendHit {\n");
      sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
      sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
      sb.Append("  HighlightResult: ").Append(HighlightResult).Append("\n");
      sb.Append("  SnippetResult: ").Append(SnippetResult).Append("\n");
      sb.Append("  RankingInfo: ").Append(RankingInfo).Append("\n");
      sb.Append("  DistinctSeqID: ").Append(DistinctSeqID).Append("\n");
      sb.Append("  Score: ").Append(Score).Append("\n");
      sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as RecommendHit);
    }

    /// <summary>
    /// Returns true if RecommendHit instances are equal
    /// </summary>
    /// <param name="input">Instance of RecommendHit to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(RecommendHit input)
    {
      if (input == null)
      {
        return false;
      }
      return base.Equals(input) &&
          (
              this.ObjectID == input.ObjectID ||
              (this.ObjectID != null &&
              this.ObjectID.Equals(input.ObjectID))
          ) && base.Equals(input) &&
          (
              this.HighlightResult == input.HighlightResult ||
              this.HighlightResult != null &&
              input.HighlightResult != null &&
              this.HighlightResult.SequenceEqual(input.HighlightResult)
          ) && base.Equals(input) &&
          (
              this.SnippetResult == input.SnippetResult ||
              this.SnippetResult != null &&
              input.SnippetResult != null &&
              this.SnippetResult.SequenceEqual(input.SnippetResult)
          ) && base.Equals(input) &&
          (
              this.RankingInfo == input.RankingInfo ||
              (this.RankingInfo != null &&
              this.RankingInfo.Equals(input.RankingInfo))
          ) && base.Equals(input) &&
          (
              this.DistinctSeqID == input.DistinctSeqID ||
              this.DistinctSeqID.Equals(input.DistinctSeqID)
          ) && base.Equals(input) &&
          (
              this.Score == input.Score ||
              this.Score.Equals(input.Score)
          )
          && (this.AdditionalProperties.Count == input.AdditionalProperties.Count && !this.AdditionalProperties.Except(input.AdditionalProperties).Any());
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = base.GetHashCode();
        if (this.ObjectID != null)
        {
          hashCode = (hashCode * 59) + this.ObjectID.GetHashCode();
        }
        if (this.HighlightResult != null)
        {
          hashCode = (hashCode * 59) + this.HighlightResult.GetHashCode();
        }
        if (this.SnippetResult != null)
        {
          hashCode = (hashCode * 59) + this.SnippetResult.GetHashCode();
        }
        if (this.RankingInfo != null)
        {
          hashCode = (hashCode * 59) + this.RankingInfo.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.DistinctSeqID.GetHashCode();
        hashCode = (hashCode * 59) + this.Score.GetHashCode();
        if (this.AdditionalProperties != null)
        {
          hashCode = (hashCode * 59) + this.AdditionalProperties.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      return this.BaseValidate(validationContext);
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    protected IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> BaseValidate(ValidationContext validationContext)
    {
      // Score (double) maximum
      if (this.Score > (double)100)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value less than or equal to 100.", new[] { "Score" });
      }

      // Score (double) minimum
      if (this.Score < (double)0)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Score, must be a value greater than or equal to 0.", new[] { "Score" });
      }

      yield break;
    }
  }

}
