//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Models.Recommend
{
  /// <summary>
  /// Recommend hit.
  /// </summary>
  [DataContract(Name = "recommendHit")]
  public partial class RecommendHit
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="RecommendHit" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    public RecommendHit()
    {
      this.AdditionalProperties = new Dictionary<string, object>();
    }
    /// <summary>
    /// Initializes a new instance of the <see cref="RecommendHit" /> class.
    /// </summary>
    /// <param name="objectID">Unique object identifier. (required).</param>
    /// <param name="score">Recommendation score. (required).</param>
    public RecommendHit(string objectID, double score)
    {
      this.ObjectID = objectID ?? throw new ArgumentNullException("objectID is a required property for RecommendHit and cannot be null");
      this.Score = score;
      this.AdditionalProperties = new Dictionary<string, object>();
    }

    /// <summary>
    /// Unique object identifier.
    /// </summary>
    /// <value>Unique object identifier.</value>
    [DataMember(Name = "objectID", IsRequired = true, EmitDefaultValue = true)]
    public string ObjectID { get; set; }

    /// <summary>
    /// Show highlighted section and words matched on a query.
    /// </summary>
    /// <value>Show highlighted section and words matched on a query.</value>
    [DataMember(Name = "_highlightResult", EmitDefaultValue = false)]
    public Dictionary<string, HighlightResult> HighlightResult { get; set; }

    /// <summary>
    /// Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty.
    /// </summary>
    /// <value>Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty.</value>
    [DataMember(Name = "_snippetResult", EmitDefaultValue = false)]
    public Dictionary<string, SnippetResult> SnippetResult { get; set; }

    /// <summary>
    /// Gets or Sets RankingInfo
    /// </summary>
    [DataMember(Name = "_rankingInfo", EmitDefaultValue = false)]
    public RankingInfo RankingInfo { get; set; }

    /// <summary>
    /// Gets or Sets DistinctSeqID
    /// </summary>
    [DataMember(Name = "_distinctSeqID", EmitDefaultValue = false)]
    public int? DistinctSeqID { get; set; }

    /// <summary>
    /// Recommendation score.
    /// </summary>
    /// <value>Recommendation score.</value>
    [DataMember(Name = "_score", IsRequired = true, EmitDefaultValue = true)]
    public double Score { get; set; }

    /// <summary>
    /// Gets or Sets additional properties
    /// </summary>
    [JsonExtensionData]
    public IDictionary<string, object> AdditionalProperties { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class RecommendHit {\n");
      sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
      sb.Append("  HighlightResult: ").Append(HighlightResult).Append("\n");
      sb.Append("  SnippetResult: ").Append(SnippetResult).Append("\n");
      sb.Append("  RankingInfo: ").Append(RankingInfo).Append("\n");
      sb.Append("  DistinctSeqID: ").Append(DistinctSeqID).Append("\n");
      sb.Append("  Score: ").Append(Score).Append("\n");
      sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
