//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using Algolia.Search.Models;

namespace Algolia.Search.Models.Recommend
{
  /// <summary>
  /// TrendingFacetsQuery
  /// </summary>
  [DataContract(Name = "trendingFacetsQuery")]
  public partial class TrendingFacetsQuery
  {

    /// <summary>
    /// Gets or Sets Model
    /// </summary>
    [DataMember(Name = "model", EmitDefaultValue = false)]
    public TrendingFacetsModel Model { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="TrendingFacetsQuery" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    public TrendingFacetsQuery() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="TrendingFacetsQuery" /> class.
    /// </summary>
    /// <param name="indexName">Algolia index name. (required).</param>
    /// <param name="facetName">Facet name for trending models. (required).</param>
    public TrendingFacetsQuery(string indexName, string facetName)
    {
      this.IndexName = indexName ?? throw new ArgumentNullException("indexName is a required property for TrendingFacetsQuery and cannot be null");
      this.FacetName = facetName ?? throw new ArgumentNullException("facetName is a required property for TrendingFacetsQuery and cannot be null");
    }

    /// <summary>
    /// Algolia index name.
    /// </summary>
    /// <value>Algolia index name.</value>
    [DataMember(Name = "indexName", IsRequired = true, EmitDefaultValue = true)]
    public string IndexName { get; set; }

    /// <summary>
    /// Recommendations with a confidence score lower than &#x60;threshold&#x60; won&#39;t appear in results. &gt; **Note**: Each recommendation has a confidence score of 0 to 100. The closer the score is to 100, the more relevant the recommendations are. 
    /// </summary>
    /// <value>Recommendations with a confidence score lower than &#x60;threshold&#x60; won&#39;t appear in results. &gt; **Note**: Each recommendation has a confidence score of 0 to 100. The closer the score is to 100, the more relevant the recommendations are. </value>
    [DataMember(Name = "threshold", EmitDefaultValue = false)]
    public int? Threshold { get; set; }

    /// <summary>
    /// Maximum number of recommendations to retrieve. If 0, all recommendations will be returned.
    /// </summary>
    /// <value>Maximum number of recommendations to retrieve. If 0, all recommendations will be returned.</value>
    [DataMember(Name = "maxRecommendations", EmitDefaultValue = false)]
    public int? MaxRecommendations { get; set; }

    /// <summary>
    /// Facet name for trending models.
    /// </summary>
    /// <value>Facet name for trending models.</value>
    [DataMember(Name = "facetName", IsRequired = true, EmitDefaultValue = true)]
    public string FacetName { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class TrendingFacetsQuery {\n");
      sb.Append("  IndexName: ").Append(IndexName).Append("\n");
      sb.Append("  Threshold: ").Append(Threshold).Append("\n");
      sb.Append("  MaxRecommendations: ").Append(MaxRecommendations).Append("\n");
      sb.Append("  FacetName: ").Append(FacetName).Append("\n");
      sb.Append("  Model: ").Append(Model).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

  }

}
