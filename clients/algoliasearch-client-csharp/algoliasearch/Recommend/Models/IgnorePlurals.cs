//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.Reflection;
using Algolia.Search.Models;

namespace Algolia.Search.Models.Recommend
{
  /// <summary>
  /// Treats singular, plurals, and other forms of declensions as matching terms. &#x60;ignorePlurals&#x60; is used in conjunction with the &#x60;queryLanguages&#x60; setting. _list_: language ISO codes for which ignoring plurals should be enabled. This list will override any values that you may have set in &#x60;queryLanguages&#x60;. _true_: enables the ignore plurals feature, where singulars and plurals are considered equivalent (\&quot;foot\&quot; &#x3D; \&quot;feet\&quot;). The languages supported here are either [every language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) (this is the default) or those set by &#x60;queryLanguages&#x60;. _false_: turns off the ignore plurals feature, so that singulars and plurals aren&#39;t considered to be the same (\&quot;foot\&quot; will not find \&quot;feet\&quot;). 
  /// </summary>
  [JsonConverter(typeof(IgnorePluralsJsonConverter))]
  [DataContract(Name = "ignorePlurals")]
  public partial class IgnorePlurals : AbstractSchema
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="IgnorePlurals" /> class
    /// with the <see cref="List{String}" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of List&lt;string&gt;.</param>
    public IgnorePlurals(List<string> actualInstance)
    {
      IsNullable = false;
      SchemaType = "oneOf";
      ActualInstance = actualInstance ?? throw new ArgumentException("Invalid instance found. Must not be null.");
    }

    /// <summary>
    /// Initializes a new instance of the <see cref="IgnorePlurals" /> class
    /// with the <see cref="bool" /> class
    /// </summary>
    /// <param name="actualInstance">An instance of bool.</param>
    public IgnorePlurals(bool actualInstance)
    {
      IsNullable = false;
      SchemaType = "oneOf";
      ActualInstance = actualInstance;
    }


    private Object _actualInstance;

    /// <summary>
    /// Gets or Sets ActualInstance
    /// </summary>
    public override Object ActualInstance
    {
      get
      {
        return _actualInstance;
      }
      set
      {
        this._actualInstance = value;
      }
    }

    /// <summary>
    /// Get the actual instance of `List&lt;string&gt;`. If the actual instance is not `List&lt;string&gt;`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of List&lt;string&gt;</returns>
    public List<string> AsListString()
    {
      return (List<string>)ActualInstance;
    }

    /// <summary>
    /// Get the actual instance of `bool`. If the actual instance is not `bool`,
    /// the InvalidClassException will be thrown
    /// </summary>
    /// <returns>An instance of bool</returns>
    public bool AsBool()
    {
      return (bool)ActualInstance;
    }


    /// <summary>
    /// Check if the actual instance is of `List&lt;string&gt;` type.
    /// </summary>
    /// <returns>Whether or not the instance is the type</returns>
    public bool IsListString()
    {
      return ActualInstance.GetType() == typeof(List<string>);
    }

    /// <summary>
    /// Check if the actual instance is of `bool` type.
    /// </summary>
    /// <returns>Whether or not the instance is the type</returns>
    public bool IsBool()
    {
      return ActualInstance.GetType() == typeof(bool);
    }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class IgnorePlurals {\n");
      sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public override string ToJson()
    {
      return JsonConvert.SerializeObject(ActualInstance, SerializerSettings);
    }

    /// <summary>
    /// Converts the JSON string into an instance of IgnorePlurals
    /// </summary>
    /// <param name="jsonString">JSON string</param>
    /// <returns>An instance of IgnorePlurals</returns>
    public static IgnorePlurals FromJson(string jsonString)
    {
      IgnorePlurals newIgnorePlurals = null;

      if (string.IsNullOrEmpty(jsonString))
      {
        return newIgnorePlurals;
      }
      try
      {
        return new IgnorePlurals(JsonConvert.DeserializeObject<List<string>>(jsonString, AdditionalPropertiesSerializerSettings));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into List<string>: {1}", jsonString, exception.ToString()));
      }
      try
      {
        return new IgnorePlurals(JsonConvert.DeserializeObject<bool>(jsonString, AdditionalPropertiesSerializerSettings));
      }
      catch (Exception exception)
      {
        // deserialization failed, try the next one
        System.Diagnostics.Debug.WriteLine(string.Format("Failed to deserialize `{0}` into bool: {1}", jsonString, exception.ToString()));
      }

      throw new InvalidDataException("The JSON string `" + jsonString + "` cannot be deserialized into any schema defined.");
    }

  }

  /// <summary>
  /// Custom JSON converter for IgnorePlurals
  /// </summary>
  public class IgnorePluralsJsonConverter : JsonConverter
  {
    /// <summary>
    /// To write the JSON string
    /// </summary>
    /// <param name="writer">JSON writer</param>
    /// <param name="value">Object to be converted into a JSON string</param>
    /// <param name="serializer">JSON Serializer</param>
    public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    {
      writer.WriteRawValue((string)(typeof(IgnorePlurals).GetMethod("ToJson").Invoke(value, null)));
    }

    /// <summary>
    /// To convert a JSON string into an object
    /// </summary>
    /// <param name="reader">JSON reader</param>
    /// <param name="objectType">Object type</param>
    /// <param name="existingValue">Existing value</param>
    /// <param name="serializer">JSON Serializer</param>
    /// <returns>The object converted from the JSON string</returns>
    public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    {
      if (reader.TokenType != JsonToken.Null)
      {
        return objectType.GetMethod("FromJson").Invoke(null, new[] { JObject.Load(reader).ToString(Formatting.None) });
      }
      return null;
    }

    /// <summary>
    /// Check if the object can be converted
    /// </summary>
    /// <param name="objectType">Object type</param>
    /// <returns>True if the object can be converted</returns>
    public override bool CanConvert(Type objectType)
    {
      return false;
    }
  }

}
