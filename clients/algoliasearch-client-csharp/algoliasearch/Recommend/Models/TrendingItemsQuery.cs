//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Recommend.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Recommend.Client.OpenAPIDateConverter;

namespace Algolia.Search.Recommend.Models
{
  /// <summary>
  /// TrendingItemsQuery
  /// </summary>
  [DataContract(Name = "trendingItemsQuery")]
  public partial class TrendingItemsQuery : IEquatable<TrendingItemsQuery>, IValidatableObject
  {

    /// <summary>
    /// Gets or Sets Model
    /// </summary>
    [DataMember(Name = "model", EmitDefaultValue = false)]
    public TrendingItemsModel? Model { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="TrendingItemsQuery" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected TrendingItemsQuery() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="TrendingItemsQuery" /> class.
    /// </summary>
    /// <param name="facetName">Facet name for trending models..</param>
    /// <param name="facetValue">Facet value for trending models..</param>
    /// <param name="model">model.</param>
    /// <param name="queryParameters">queryParameters.</param>
    /// <param name="fallbackParameters">fallbackParameters.</param>
    /// <param name="indexName">Algolia index name. (required).</param>
    /// <param name="threshold">Recommendations with a confidence score lower than &#x60;threshold&#x60; won&#39;t appear in results. &gt; **Note**: Each recommendation has a confidence score of 0 to 100. The closer the score is to 100, the more relevant the recommendations are. .</param>
    /// <param name="maxRecommendations">Maximum number of recommendations to retrieve. If 0, all recommendations will be returned. (default to 0).</param>
    public TrendingItemsQuery(string facetName = default(string), string facetValue = default(string), TrendingItemsModel? model = default(TrendingItemsModel?), SearchParamsObject queryParameters = default(SearchParamsObject), SearchParamsObject fallbackParameters = default(SearchParamsObject), string indexName = default(string), int threshold = default(int), int maxRecommendations = 0)
    {
      // to ensure "indexName" is required (not null)
      if (indexName == null)
      {
        throw new ArgumentNullException("indexName is a required property for TrendingItemsQuery and cannot be null");
      }
      this.IndexName = indexName;
      this.FacetName = facetName;
      this.FacetValue = facetValue;
      this.Model = model;
      this.QueryParameters = queryParameters;
      this.FallbackParameters = fallbackParameters;
      this.Threshold = threshold;
      this.MaxRecommendations = maxRecommendations;
    }

    /// <summary>
    /// Facet name for trending models.
    /// </summary>
    /// <value>Facet name for trending models.</value>
    [DataMember(Name = "facetName", EmitDefaultValue = false)]
    public string FacetName { get; set; }

    /// <summary>
    /// Facet value for trending models.
    /// </summary>
    /// <value>Facet value for trending models.</value>
    [DataMember(Name = "facetValue", EmitDefaultValue = false)]
    public string FacetValue { get; set; }

    /// <summary>
    /// Gets or Sets QueryParameters
    /// </summary>
    [DataMember(Name = "queryParameters", EmitDefaultValue = false)]
    public SearchParamsObject QueryParameters { get; set; }

    /// <summary>
    /// Gets or Sets FallbackParameters
    /// </summary>
    [DataMember(Name = "fallbackParameters", EmitDefaultValue = false)]
    public SearchParamsObject FallbackParameters { get; set; }

    /// <summary>
    /// Algolia index name.
    /// </summary>
    /// <value>Algolia index name.</value>
    [DataMember(Name = "indexName", IsRequired = true, EmitDefaultValue = true)]
    public string IndexName { get; set; }

    /// <summary>
    /// Recommendations with a confidence score lower than &#x60;threshold&#x60; won&#39;t appear in results. &gt; **Note**: Each recommendation has a confidence score of 0 to 100. The closer the score is to 100, the more relevant the recommendations are. 
    /// </summary>
    /// <value>Recommendations with a confidence score lower than &#x60;threshold&#x60; won&#39;t appear in results. &gt; **Note**: Each recommendation has a confidence score of 0 to 100. The closer the score is to 100, the more relevant the recommendations are. </value>
    [DataMember(Name = "threshold", EmitDefaultValue = false)]
    public int Threshold { get; set; }

    /// <summary>
    /// Maximum number of recommendations to retrieve. If 0, all recommendations will be returned.
    /// </summary>
    /// <value>Maximum number of recommendations to retrieve. If 0, all recommendations will be returned.</value>
    [DataMember(Name = "maxRecommendations", EmitDefaultValue = false)]
    public int MaxRecommendations { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class TrendingItemsQuery {\n");
      sb.Append("  FacetName: ").Append(FacetName).Append("\n");
      sb.Append("  FacetValue: ").Append(FacetValue).Append("\n");
      sb.Append("  Model: ").Append(Model).Append("\n");
      sb.Append("  QueryParameters: ").Append(QueryParameters).Append("\n");
      sb.Append("  FallbackParameters: ").Append(FallbackParameters).Append("\n");
      sb.Append("  IndexName: ").Append(IndexName).Append("\n");
      sb.Append("  Threshold: ").Append(Threshold).Append("\n");
      sb.Append("  MaxRecommendations: ").Append(MaxRecommendations).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as TrendingItemsQuery);
    }

    /// <summary>
    /// Returns true if TrendingItemsQuery instances are equal
    /// </summary>
    /// <param name="input">Instance of TrendingItemsQuery to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TrendingItemsQuery input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.FacetName == input.FacetName ||
              (this.FacetName != null &&
              this.FacetName.Equals(input.FacetName))
          ) &&
          (
              this.FacetValue == input.FacetValue ||
              (this.FacetValue != null &&
              this.FacetValue.Equals(input.FacetValue))
          ) &&
          (
              this.Model == input.Model ||
              this.Model.Equals(input.Model)
          ) &&
          (
              this.QueryParameters == input.QueryParameters ||
              (this.QueryParameters != null &&
              this.QueryParameters.Equals(input.QueryParameters))
          ) &&
          (
              this.FallbackParameters == input.FallbackParameters ||
              (this.FallbackParameters != null &&
              this.FallbackParameters.Equals(input.FallbackParameters))
          ) &&
          (
              this.IndexName == input.IndexName ||
              (this.IndexName != null &&
              this.IndexName.Equals(input.IndexName))
          ) &&
          (
              this.Threshold == input.Threshold ||
              this.Threshold.Equals(input.Threshold)
          ) &&
          (
              this.MaxRecommendations == input.MaxRecommendations ||
              this.MaxRecommendations.Equals(input.MaxRecommendations)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.FacetName != null)
        {
          hashCode = (hashCode * 59) + this.FacetName.GetHashCode();
        }
        if (this.FacetValue != null)
        {
          hashCode = (hashCode * 59) + this.FacetValue.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Model.GetHashCode();
        if (this.QueryParameters != null)
        {
          hashCode = (hashCode * 59) + this.QueryParameters.GetHashCode();
        }
        if (this.FallbackParameters != null)
        {
          hashCode = (hashCode * 59) + this.FallbackParameters.GetHashCode();
        }
        if (this.IndexName != null)
        {
          hashCode = (hashCode * 59) + this.IndexName.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Threshold.GetHashCode();
        hashCode = (hashCode * 59) + this.MaxRecommendations.GetHashCode();
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      // Threshold (int) maximum
      if (this.Threshold > (int)100)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Threshold, must be a value less than or equal to 100.", new[] { "Threshold" });
      }

      // Threshold (int) minimum
      if (this.Threshold < (int)0)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Threshold, must be a value greater than or equal to 0.", new[] { "Threshold" });
      }

      yield break;
    }
  }

}
