//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Recommend.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Recommend.Client.OpenAPIDateConverter;

namespace Algolia.Search.Recommend.Models
{
  /// <summary>
  /// BaseRecommendationsQuery
  /// </summary>
  [DataContract(Name = "baseRecommendationsQuery")]
  public partial class BaseRecommendationsQuery : IEquatable<BaseRecommendationsQuery>, IValidatableObject
  {

    /// <summary>
    /// Gets or Sets Model
    /// </summary>
    [DataMember(Name = "model", IsRequired = true, EmitDefaultValue = true)]
    public RecommendationModels Model { get; set; }
    /// <summary>
    /// Initializes a new instance of the <see cref="BaseRecommendationsQuery" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected BaseRecommendationsQuery() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="BaseRecommendationsQuery" /> class.
    /// </summary>
    /// <param name="model">model (required).</param>
    /// <param name="objectID">Unique object identifier. (required).</param>
    /// <param name="queryParameters">queryParameters.</param>
    /// <param name="fallbackParameters">fallbackParameters.</param>
    public BaseRecommendationsQuery(RecommendationModels model = default(RecommendationModels), string objectID = default(string), SearchParamsObject queryParameters = default(SearchParamsObject), SearchParamsObject fallbackParameters = default(SearchParamsObject))
    {
      this.Model = model;
      // to ensure "objectID" is required (not null)
      if (objectID == null)
      {
        throw new ArgumentNullException("objectID is a required property for BaseRecommendationsQuery and cannot be null");
      }
      this.ObjectID = objectID;
      this.QueryParameters = queryParameters;
      this.FallbackParameters = fallbackParameters;
    }

    /// <summary>
    /// Unique object identifier.
    /// </summary>
    /// <value>Unique object identifier.</value>
    [DataMember(Name = "objectID", IsRequired = true, EmitDefaultValue = true)]
    public string ObjectID { get; set; }

    /// <summary>
    /// Gets or Sets QueryParameters
    /// </summary>
    [DataMember(Name = "queryParameters", EmitDefaultValue = false)]
    public SearchParamsObject QueryParameters { get; set; }

    /// <summary>
    /// Gets or Sets FallbackParameters
    /// </summary>
    [DataMember(Name = "fallbackParameters", EmitDefaultValue = false)]
    public SearchParamsObject FallbackParameters { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class BaseRecommendationsQuery {\n");
      sb.Append("  Model: ").Append(Model).Append("\n");
      sb.Append("  ObjectID: ").Append(ObjectID).Append("\n");
      sb.Append("  QueryParameters: ").Append(QueryParameters).Append("\n");
      sb.Append("  FallbackParameters: ").Append(FallbackParameters).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as BaseRecommendationsQuery);
    }

    /// <summary>
    /// Returns true if BaseRecommendationsQuery instances are equal
    /// </summary>
    /// <param name="input">Instance of BaseRecommendationsQuery to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(BaseRecommendationsQuery input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Model == input.Model ||
              this.Model.Equals(input.Model)
          ) &&
          (
              this.ObjectID == input.ObjectID ||
              (this.ObjectID != null &&
              this.ObjectID.Equals(input.ObjectID))
          ) &&
          (
              this.QueryParameters == input.QueryParameters ||
              (this.QueryParameters != null &&
              this.QueryParameters.Equals(input.QueryParameters))
          ) &&
          (
              this.FallbackParameters == input.FallbackParameters ||
              (this.FallbackParameters != null &&
              this.FallbackParameters.Equals(input.FallbackParameters))
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        hashCode = (hashCode * 59) + this.Model.GetHashCode();
        if (this.ObjectID != null)
        {
          hashCode = (hashCode * 59) + this.ObjectID.GetHashCode();
        }
        if (this.QueryParameters != null)
        {
          hashCode = (hashCode * 59) + this.QueryParameters.GetHashCode();
        }
        if (this.FallbackParameters != null)
        {
          hashCode = (hashCode * 59) + this.FallbackParameters.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }
  }

}
