//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Analytics.Client;
using Algolia.Search.Analytics.Models;
using Algolia.Search.Transport;
using Algolia.Search.Http;
using Algolia.Search.Client;

namespace Algolia.Search.Analytics.Api
{

  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public interface IAnalyticsClient
  {
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomDeleteAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomGetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomPostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Send requests to the Algolia REST API.
    /// </summary>
    /// <remarks>
    /// This method allow you to send requests to the Algolia REST API.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    Task<Object> CustomPutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get average click position.
    /// </summary>
    /// <remarks>
    /// Return the average click position for the complete time range and for individual days. &gt; **Note**: If all &#x60;positions&#x60; have a &#x60;clickCount&#x60; of &#x60;0&#x60; or &#x60;null&#x60;, it means Algolia didn&#39;t receive any click events for tracked searches. A _tracked_ search is a search request where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetAverageClickPositionResponse</returns>
    Task<GetAverageClickPositionResponse> GetAverageClickPositionAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get click positions.
    /// </summary>
    /// <remarks>
    /// Show the number of clicks events and their associated position in the search results.  &gt; **Note**: If all &#x60;positions&#x60; have a &#x60;clickCount&#x60; of &#x60;0&#x60; or &#x60;null&#x60;, it means Algolia didn&#39;t receive any click events for tracked searches. A _tracked_ search is a search request where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetClickPositionsResponse</returns>
    Task<GetClickPositionsResponse> GetClickPositionsAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get click-through rate (CTR).
    /// </summary>
    /// <remarks>
    /// Returns a [click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetClickThroughRateResponse</returns>
    Task<GetClickThroughRateResponse> GetClickThroughRateAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get conversion rate (CR).
    /// </summary>
    /// <remarks>
    /// Return a [conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetConversationRateResponse</returns>
    Task<GetConversationRateResponse> GetConversationRateAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get no click rate.
    /// </summary>
    /// <remarks>
    /// Returns the rate at which searches don&#39;t lead to any clicks. The endpoint returns a value for the complete given time range, as well as a value per day. It also returns the count of searches and searches without clicks.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetNoClickRateResponse</returns>
    Task<GetNoClickRateResponse> GetNoClickRateAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get no results rate.
    /// </summary>
    /// <remarks>
    /// Returns the rate at which searches didn&#39;t return any results.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetNoResultsRateResponse</returns>
    Task<GetNoResultsRateResponse> GetNoResultsRateAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get number of searches.
    /// </summary>
    /// <remarks>
    /// Returns the number of searches within a time range.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSearchesCountResponse</returns>
    Task<GetSearchesCountResponse> GetSearchesCountAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get top searches with no clicks.
    /// </summary>
    /// <remarks>
    /// Return the most popular of the last 1,000 searches that didn&#39;t lead to any clicks.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSearchesNoClicksResponse</returns>
    Task<GetSearchesNoClicksResponse> GetSearchesNoClicksAsync(string index, string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get top searches with no results.
    /// </summary>
    /// <remarks>
    /// Returns the most popular of the latest 1,000 searches that didn&#39;t return any results.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSearchesNoResultsResponse</returns>
    Task<GetSearchesNoResultsResponse> GetSearchesNoResultsAsync(string index, string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get Analytics API status.
    /// </summary>
    /// <remarks>
    /// Return the latest update time of the Analytics API for an index. If the index has been recently created or no search has been performed yet, &#x60;updatedAt&#x60; will be &#x60;null&#x60;. &gt; **Note**: The Analytics API is updated every 5&amp;nbsp;minutes. 
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetStatusResponse</returns>
    Task<GetStatusResponse> GetStatusAsync(string index, RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get top countries.
    /// </summary>
    /// <remarks>
    /// Returns top countries. Limited to the 1,000 most frequent ones.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopCountriesResponse</returns>
    Task<GetTopCountriesResponse> GetTopCountriesAsync(string index, string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get top filterable attributes.
    /// </summary>
    /// <remarks>
    /// Return the most popular [filterable attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) in the 1,000 most recently used filters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="search">User query. (optional)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopFilterAttributesResponse</returns>
    Task<GetTopFilterAttributesResponse> GetTopFilterAttributesAsync(string index, string search = default(string), string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get top filter values for an attribute.
    /// </summary>
    /// <remarks>
    /// Returns the most popular filter values for an attribute in the 1,000 most recently used filters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="attribute">Attribute name.</param>
    /// <param name="index">Index name to target.</param>
    /// <param name="search">User query. (optional)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopFilterForAttributeResponse</returns>
    Task<GetTopFilterForAttributeResponse> GetTopFilterForAttributeAsync(string attribute, string index, string search = default(string), string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get top filters for a no result search.
    /// </summary>
    /// <remarks>
    /// Returns top filters for filter-enabled searches that don&#39;t return results. Limited to the 1,000 most recently used filters.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="search">User query. (optional)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopFiltersNoResultsResponse</returns>
    Task<GetTopFiltersNoResultsResponse> GetTopFiltersNoResultsAsync(string index, string search = default(string), string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get top hits.
    /// </summary>
    /// <remarks>
    /// Return the most popular clicked results in the last 1,000 searches.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="search">User query. (optional)</param>
    /// <param name="clickAnalytics">Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional, default to false)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopHitsResponse</returns>
    Task<GetTopHitsResponse> GetTopHitsAsync(string index, string search = default(string), bool? clickAnalytics = default(bool?), string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get top searches.
    /// </summary>
    /// <remarks>
    /// Returns the most popular of the latest 1,000 searches. For each search, also returns the number of hits.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="clickAnalytics">Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional, default to false)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="orderBy">Reorder the results. (optional)</param>
    /// <param name="direction">Sorting direction of the results: ascending or descending.  (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopSearchesResponse</returns>
    Task<GetTopSearchesResponse> GetTopSearchesAsync(string index, bool? clickAnalytics = default(bool?), string startDate = default(string), string endDate = default(string), OrderBy orderBy = default(OrderBy), Direction direction = default(Direction), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
    /// <summary>
    /// Get user count.
    /// </summary>
    /// <remarks>
    /// Return the count of unique users.
    /// </remarks>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetUsersCountResponse</returns>
    Task<GetUsersCountResponse> GetUsersCountAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default);
  }


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  public partial class AnalyticsClient : IAnalyticsClient
  {
    private readonly HttpTransport _transport;
    private readonly AlgoliaConfig _config;

    /// <summary>
    /// Create a new Analytics client for the given appID and apiKey.
    /// </summary>
    /// <param name="applicationId">Your application</param>
    /// <param name="apiKey">Your API key</param>
    public AnalyticsClient(string applicationId, string apiKey) : this(new AnalyticsConfig(applicationId, apiKey), new AlgoliaHttpRequester())
    {
    }

    /// <summary>
    /// Initialize a client with custom config
    /// </summary>
    /// <param name="config">Algolia configuration</param>
    public AnalyticsClient(AnalyticsConfig config) : this(config, new AlgoliaHttpRequester())
    {
    }

    /// <summary>
    /// Initialize the client with custom config and custom Requester
    /// </summary>
    /// <param name="config">Algolia Config</param>
    /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
    public AnalyticsClient(AnalyticsConfig config, IHttpRequester httpRequester)
    {
      if (httpRequester == null)
      {
        throw new ArgumentNullException(nameof(httpRequester), "An httpRequester is required");
      }

      if (config == null)
      {
        throw new ArgumentNullException(nameof(config), "A config is required");
      }

      if (string.IsNullOrWhiteSpace(config.AppId))
      {
        throw new ArgumentNullException(nameof(config.AppId), "Application ID is required");
      }

      if (string.IsNullOrWhiteSpace(config.ApiKey))
      {
        throw new ArgumentNullException(nameof(config.ApiKey), "An API key is required");
      }

      _config = config;
      _transport = new HttpTransport(config, httpRequester);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomDeleteAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling AnalyticsClient->CustomDelete");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("DELETE"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomGetAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling AnalyticsClient->CustomGet");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("GET"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomPostAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling AnalyticsClient->CustomPost");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }
      requestOptions.Data = body;


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("POST"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Send requests to the Algolia REST API. This method allow you to send requests to the Algolia REST API.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
    /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
    /// <param name="body">Parameters to send with the custom request. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of Object</returns>
    public async Task<Object> CustomPutAsync(string path, Dictionary<string, Object> parameters = default(Dictionary<string, Object>), Object body = default(Object), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'path' is set
      if (path == null)
        throw new ApiException(400, "Missing required parameter 'path' when calling AnalyticsClient->CustomPut");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("path", ClientUtils.ParameterToString(path));
      if (parameters != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "parameters", parameters);
      }
      requestOptions.Data = body;


      return await _transport.ExecuteRequestAsync<Object>(new HttpMethod("PUT"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get average click position. Return the average click position for the complete time range and for individual days. &gt; **Note**: If all &#x60;positions&#x60; have a &#x60;clickCount&#x60; of &#x60;0&#x60; or &#x60;null&#x60;, it means Algolia didn&#39;t receive any click events for tracked searches. A _tracked_ search is a search request where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. 
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetAverageClickPositionResponse</returns>
    public async Task<GetAverageClickPositionResponse> GetAverageClickPositionAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetAverageClickPosition");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetAverageClickPositionResponse>(new HttpMethod("GET"), "/2/clicks/averageClickPosition", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get click positions. Show the number of clicks events and their associated position in the search results.  &gt; **Note**: If all &#x60;positions&#x60; have a &#x60;clickCount&#x60; of &#x60;0&#x60; or &#x60;null&#x60;, it means Algolia didn&#39;t receive any click events for tracked searches. A _tracked_ search is a search request where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. 
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetClickPositionsResponse</returns>
    public async Task<GetClickPositionsResponse> GetClickPositionsAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetClickPositions");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetClickPositionsResponse>(new HttpMethod("GET"), "/2/clicks/positions", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get click-through rate (CTR). Returns a [click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetClickThroughRateResponse</returns>
    public async Task<GetClickThroughRateResponse> GetClickThroughRateAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetClickThroughRate");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetClickThroughRateResponse>(new HttpMethod("GET"), "/2/clicks/clickThroughRate", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get conversion rate (CR). Return a [conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetConversationRateResponse</returns>
    public async Task<GetConversationRateResponse> GetConversationRateAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetConversationRate");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetConversationRateResponse>(new HttpMethod("GET"), "/2/conversions/conversionRate", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get no click rate. Returns the rate at which searches don&#39;t lead to any clicks. The endpoint returns a value for the complete given time range, as well as a value per day. It also returns the count of searches and searches without clicks.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetNoClickRateResponse</returns>
    public async Task<GetNoClickRateResponse> GetNoClickRateAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetNoClickRate");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetNoClickRateResponse>(new HttpMethod("GET"), "/2/searches/noClickRate", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get no results rate. Returns the rate at which searches didn&#39;t return any results.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetNoResultsRateResponse</returns>
    public async Task<GetNoResultsRateResponse> GetNoResultsRateAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetNoResultsRate");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetNoResultsRateResponse>(new HttpMethod("GET"), "/2/searches/noResultRate", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get number of searches. Returns the number of searches within a time range.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSearchesCountResponse</returns>
    public async Task<GetSearchesCountResponse> GetSearchesCountAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetSearchesCount");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetSearchesCountResponse>(new HttpMethod("GET"), "/2/searches/count", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get top searches with no clicks. Return the most popular of the last 1,000 searches that didn&#39;t lead to any clicks.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSearchesNoClicksResponse</returns>
    public async Task<GetSearchesNoClicksResponse> GetSearchesNoClicksAsync(string index, string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetSearchesNoClicks");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (limit != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "limit", limit);
      }
      if (offset != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "offset", offset);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetSearchesNoClicksResponse>(new HttpMethod("GET"), "/2/searches/noClicks", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get top searches with no results. Returns the most popular of the latest 1,000 searches that didn&#39;t return any results.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetSearchesNoResultsResponse</returns>
    public async Task<GetSearchesNoResultsResponse> GetSearchesNoResultsAsync(string index, string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetSearchesNoResults");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (limit != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "limit", limit);
      }
      if (offset != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "offset", offset);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetSearchesNoResultsResponse>(new HttpMethod("GET"), "/2/searches/noResults", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get Analytics API status. Return the latest update time of the Analytics API for an index. If the index has been recently created or no search has been performed yet, &#x60;updatedAt&#x60; will be &#x60;null&#x60;. &gt; **Note**: The Analytics API is updated every 5&amp;nbsp;minutes. 
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetStatusResponse</returns>
    public async Task<GetStatusResponse> GetStatusAsync(string index, RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetStatus");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);


      return await _transport.ExecuteRequestAsync<GetStatusResponse>(new HttpMethod("GET"), "/2/status", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get top countries. Returns top countries. Limited to the 1,000 most frequent ones.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopCountriesResponse</returns>
    public async Task<GetTopCountriesResponse> GetTopCountriesAsync(string index, string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetTopCountries");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (limit != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "limit", limit);
      }
      if (offset != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "offset", offset);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetTopCountriesResponse>(new HttpMethod("GET"), "/2/countries", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get top filterable attributes. Return the most popular [filterable attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) in the 1,000 most recently used filters.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="search">User query. (optional)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopFilterAttributesResponse</returns>
    public async Task<GetTopFilterAttributesResponse> GetTopFilterAttributesAsync(string index, string search = default(string), string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetTopFilterAttributes");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (search != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "search", search);
      }
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (limit != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "limit", limit);
      }
      if (offset != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "offset", offset);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetTopFilterAttributesResponse>(new HttpMethod("GET"), "/2/filters", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get top filter values for an attribute. Returns the most popular filter values for an attribute in the 1,000 most recently used filters.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="attribute">Attribute name.</param>
    /// <param name="index">Index name to target.</param>
    /// <param name="search">User query. (optional)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopFilterForAttributeResponse</returns>
    public async Task<GetTopFilterForAttributeResponse> GetTopFilterForAttributeAsync(string attribute, string index, string search = default(string), string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'attribute' is set
      if (attribute == null)
        throw new ApiException(400, "Missing required parameter 'attribute' when calling AnalyticsClient->GetTopFilterForAttribute");

      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetTopFilterForAttribute");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.PathParameters.Add("attribute", ClientUtils.ParameterToString(attribute));
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (search != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "search", search);
      }
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (limit != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "limit", limit);
      }
      if (offset != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "offset", offset);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetTopFilterForAttributeResponse>(new HttpMethod("GET"), "/2/filters/{attribute}", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get top filters for a no result search. Returns top filters for filter-enabled searches that don&#39;t return results. Limited to the 1,000 most recently used filters.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="search">User query. (optional)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopFiltersNoResultsResponse</returns>
    public async Task<GetTopFiltersNoResultsResponse> GetTopFiltersNoResultsAsync(string index, string search = default(string), string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetTopFiltersNoResults");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (search != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "search", search);
      }
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (limit != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "limit", limit);
      }
      if (offset != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "offset", offset);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetTopFiltersNoResultsResponse>(new HttpMethod("GET"), "/2/filters/noResults", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get top hits. Return the most popular clicked results in the last 1,000 searches.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="search">User query. (optional)</param>
    /// <param name="clickAnalytics">Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional, default to false)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopHitsResponse</returns>
    public async Task<GetTopHitsResponse> GetTopHitsAsync(string index, string search = default(string), bool? clickAnalytics = default(bool?), string startDate = default(string), string endDate = default(string), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetTopHits");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (search != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "search", search);
      }
      if (clickAnalytics != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "clickAnalytics", clickAnalytics);
      }
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (limit != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "limit", limit);
      }
      if (offset != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "offset", offset);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetTopHitsResponse>(new HttpMethod("GET"), "/2/hits", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get top searches. Returns the most popular of the latest 1,000 searches. For each search, also returns the number of hits.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="clickAnalytics">Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional, default to false)</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="orderBy">Reorder the results. (optional)</param>
    /// <param name="direction">Sorting direction of the results: ascending or descending.  (optional)</param>
    /// <param name="limit">Number of records to return (page size). (optional, default to 10)</param>
    /// <param name="offset">Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetTopSearchesResponse</returns>
    public async Task<GetTopSearchesResponse> GetTopSearchesAsync(string index, bool? clickAnalytics = default(bool?), string startDate = default(string), string endDate = default(string), OrderBy orderBy = default(OrderBy), Direction direction = default(Direction), int? limit = default(int?), int? offset = default(int?), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetTopSearches");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (clickAnalytics != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "clickAnalytics", clickAnalytics);
      }
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (orderBy != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "orderBy", orderBy);
      }
      if (direction != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "direction", direction);
      }
      if (limit != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "limit", limit);
      }
      if (offset != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "offset", offset);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetTopSearchesResponse>(new HttpMethod("GET"), "/2/searches", requestOptions, cancellationToken).ConfigureAwait(false);
    }


    /// <summary>
    /// Get user count. Return the count of unique users.
    /// </summary>
    /// <exception cref="Algolia.Search.Analytics.Client.ApiException">Thrown when fails to make API call</exception>
    /// <param name="index">Index name to target.</param>
    /// <param name="startDate">Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="endDate">End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)</param>
    /// <param name="tags">Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)</param>
    /// <param name="options">Add extra http header or query parameters to Algolia.</param>
    /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
    /// <returns>Task of GetUsersCountResponse</returns>
    public async Task<GetUsersCountResponse> GetUsersCountAsync(string index, string startDate = default(string), string endDate = default(string), string tags = default(string), RequestOptions options = null, CancellationToken cancellationToken = default)
    {
      // verify the required parameter 'index' is set
      if (index == null)
        throw new ApiException(400, "Missing required parameter 'index' when calling AnalyticsClient->GetUsersCount");


      RequestOptions requestOptions = new RequestOptions();
      requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "index", index);
      if (startDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "startDate", startDate);
      }
      if (endDate != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "endDate", endDate);
      }
      if (tags != null)
      {
        requestOptions.QueryParameters = ClientUtils.ParameterToDictionary("", "tags", tags);
      }


      return await _transport.ExecuteRequestAsync<GetUsersCountResponse>(new HttpMethod("GET"), "/2/users/count", requestOptions, cancellationToken).ConfigureAwait(false);
    }

  }
}
