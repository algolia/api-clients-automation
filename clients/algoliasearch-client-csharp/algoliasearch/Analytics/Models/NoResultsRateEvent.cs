//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Analytics.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Analytics.Client.OpenAPIDateConverter;

namespace Algolia.Search.Analytics.Models
{
  /// <summary>
  /// NoResultsRateEvent
  /// </summary>
  [DataContract(Name = "noResultsRateEvent")]
  public partial class NoResultsRateEvent : IEquatable<NoResultsRateEvent>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="NoResultsRateEvent" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected NoResultsRateEvent() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="NoResultsRateEvent" /> class.
    /// </summary>
    /// <param name="date">Date of the event in the format YYYY-MM-DD. (required).</param>
    /// <param name="noResultCount">Number of occurences. (required).</param>
    /// <param name="count">Number of tracked _and_ untracked searches (where the &#x60;clickAnalytics&#x60; parameter isn&#39;t &#x60;true&#x60;). (required).</param>
    /// <param name="rate">[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).  (required).</param>
    public NoResultsRateEvent(string date = default(string), int noResultCount = default(int), int count = default(int), double rate = default(double))
    {
      // to ensure "date" is required (not null)
      if (date == null)
      {
        throw new ArgumentNullException("date is a required property for NoResultsRateEvent and cannot be null");
      }
      this.Date = date;
      this.NoResultCount = noResultCount;
      this.Count = count;
      this.Rate = rate;
    }

    /// <summary>
    /// Date of the event in the format YYYY-MM-DD.
    /// </summary>
    /// <value>Date of the event in the format YYYY-MM-DD.</value>
    [DataMember(Name = "date", IsRequired = true, EmitDefaultValue = true)]
    public string Date { get; set; }

    /// <summary>
    /// Number of occurences.
    /// </summary>
    /// <value>Number of occurences.</value>
    [DataMember(Name = "noResultCount", IsRequired = true, EmitDefaultValue = true)]
    public int NoResultCount { get; set; }

    /// <summary>
    /// Number of tracked _and_ untracked searches (where the &#x60;clickAnalytics&#x60; parameter isn&#39;t &#x60;true&#x60;).
    /// </summary>
    /// <value>Number of tracked _and_ untracked searches (where the &#x60;clickAnalytics&#x60; parameter isn&#39;t &#x60;true&#x60;).</value>
    [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
    public int Count { get; set; }

    /// <summary>
    /// [Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). 
    /// </summary>
    /// <value>[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). </value>
    [DataMember(Name = "rate", IsRequired = true, EmitDefaultValue = true)]
    public double Rate { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class NoResultsRateEvent {\n");
      sb.Append("  Date: ").Append(Date).Append("\n");
      sb.Append("  NoResultCount: ").Append(NoResultCount).Append("\n");
      sb.Append("  Count: ").Append(Count).Append("\n");
      sb.Append("  Rate: ").Append(Rate).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as NoResultsRateEvent);
    }

    /// <summary>
    /// Returns true if NoResultsRateEvent instances are equal
    /// </summary>
    /// <param name="input">Instance of NoResultsRateEvent to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(NoResultsRateEvent input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Date == input.Date ||
              (this.Date != null &&
              this.Date.Equals(input.Date))
          ) &&
          (
              this.NoResultCount == input.NoResultCount ||
              this.NoResultCount.Equals(input.NoResultCount)
          ) &&
          (
              this.Count == input.Count ||
              this.Count.Equals(input.Count)
          ) &&
          (
              this.Rate == input.Rate ||
              this.Rate.Equals(input.Rate)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.Date != null)
        {
          hashCode = (hashCode * 59) + this.Date.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.NoResultCount.GetHashCode();
        hashCode = (hashCode * 59) + this.Count.GetHashCode();
        hashCode = (hashCode * 59) + this.Rate.GetHashCode();
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      // Rate (double) maximum
      if (this.Rate > (double)1)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rate, must be a value less than or equal to 1.", new[] { "Rate" });
      }

      // Rate (double) minimum
      if (this.Rate < (double)0)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rate, must be a value greater than or equal to 0.", new[] { "Rate" });
      }

      yield break;
    }
  }

}
