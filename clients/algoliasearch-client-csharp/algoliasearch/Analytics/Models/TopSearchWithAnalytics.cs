//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Analytics.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Analytics.Client.OpenAPIDateConverter;

namespace Algolia.Search.Analytics.Models
{
  /// <summary>
  /// TopSearchWithAnalytics
  /// </summary>
  [DataContract(Name = "topSearchWithAnalytics")]
  public partial class TopSearchWithAnalytics : IEquatable<TopSearchWithAnalytics>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="TopSearchWithAnalytics" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected TopSearchWithAnalytics() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="TopSearchWithAnalytics" /> class.
    /// </summary>
    /// <param name="search">User query. (required).</param>
    /// <param name="count">Number of tracked _and_ untracked searches (where the &#x60;clickAnalytics&#x60; parameter isn&#39;t &#x60;true&#x60;). (required).</param>
    /// <param name="clickThroughRate">[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).  (required).</param>
    /// <param name="averageClickPosition">Average [position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) of clicked search result. (required).</param>
    /// <param name="conversionRate">[Conversion rate (CR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).  (required).</param>
    /// <param name="trackedSearchCount">Number of tracked searches. This is the number of search requests where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;. (required).</param>
    /// <param name="clickCount">Number of click events. (required).</param>
    /// <param name="conversionCount">Number of converted clicks. (required).</param>
    /// <param name="nbHits">Number of hits the search query matched. (required).</param>
    public TopSearchWithAnalytics(string search = default(string), int count = default(int), double clickThroughRate = default(double), int averageClickPosition = default(int), double conversionRate = default(double), int trackedSearchCount = default(int), int clickCount = default(int), int conversionCount = default(int), int nbHits = default(int))
    {
      // to ensure "search" is required (not null)
      if (search == null)
      {
        throw new ArgumentNullException("search is a required property for TopSearchWithAnalytics and cannot be null");
      }
      this.Search = search;
      this.Count = count;
      this.ClickThroughRate = clickThroughRate;
      this.AverageClickPosition = averageClickPosition;
      this.ConversionRate = conversionRate;
      this.TrackedSearchCount = trackedSearchCount;
      this.ClickCount = clickCount;
      this.ConversionCount = conversionCount;
      this.NbHits = nbHits;
    }

    /// <summary>
    /// User query.
    /// </summary>
    /// <value>User query.</value>
    [DataMember(Name = "search", IsRequired = true, EmitDefaultValue = true)]
    public string Search { get; set; }

    /// <summary>
    /// Number of tracked _and_ untracked searches (where the &#x60;clickAnalytics&#x60; parameter isn&#39;t &#x60;true&#x60;).
    /// </summary>
    /// <value>Number of tracked _and_ untracked searches (where the &#x60;clickAnalytics&#x60; parameter isn&#39;t &#x60;true&#x60;).</value>
    [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
    public int Count { get; set; }

    /// <summary>
    /// [Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). 
    /// </summary>
    /// <value>[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). </value>
    [DataMember(Name = "clickThroughRate", IsRequired = true, EmitDefaultValue = true)]
    public double ClickThroughRate { get; set; }

    /// <summary>
    /// Average [position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) of clicked search result.
    /// </summary>
    /// <value>Average [position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position) of clicked search result.</value>
    [DataMember(Name = "averageClickPosition", IsRequired = true, EmitDefaultValue = true)]
    public int AverageClickPosition { get; set; }

    /// <summary>
    /// [Conversion rate (CR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate). 
    /// </summary>
    /// <value>[Conversion rate (CR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate). </value>
    [DataMember(Name = "conversionRate", IsRequired = true, EmitDefaultValue = true)]
    public double ConversionRate { get; set; }

    /// <summary>
    /// Number of tracked searches. This is the number of search requests where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;.
    /// </summary>
    /// <value>Number of tracked searches. This is the number of search requests where the &#x60;clickAnalytics&#x60; parameter is &#x60;true&#x60;.</value>
    [DataMember(Name = "trackedSearchCount", IsRequired = true, EmitDefaultValue = true)]
    public int TrackedSearchCount { get; set; }

    /// <summary>
    /// Number of click events.
    /// </summary>
    /// <value>Number of click events.</value>
    [DataMember(Name = "clickCount", IsRequired = true, EmitDefaultValue = true)]
    public int ClickCount { get; set; }

    /// <summary>
    /// Number of converted clicks.
    /// </summary>
    /// <value>Number of converted clicks.</value>
    [DataMember(Name = "conversionCount", IsRequired = true, EmitDefaultValue = true)]
    public int ConversionCount { get; set; }

    /// <summary>
    /// Number of hits the search query matched.
    /// </summary>
    /// <value>Number of hits the search query matched.</value>
    [DataMember(Name = "nbHits", IsRequired = true, EmitDefaultValue = true)]
    public int NbHits { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class TopSearchWithAnalytics {\n");
      sb.Append("  Search: ").Append(Search).Append("\n");
      sb.Append("  Count: ").Append(Count).Append("\n");
      sb.Append("  ClickThroughRate: ").Append(ClickThroughRate).Append("\n");
      sb.Append("  AverageClickPosition: ").Append(AverageClickPosition).Append("\n");
      sb.Append("  ConversionRate: ").Append(ConversionRate).Append("\n");
      sb.Append("  TrackedSearchCount: ").Append(TrackedSearchCount).Append("\n");
      sb.Append("  ClickCount: ").Append(ClickCount).Append("\n");
      sb.Append("  ConversionCount: ").Append(ConversionCount).Append("\n");
      sb.Append("  NbHits: ").Append(NbHits).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as TopSearchWithAnalytics);
    }

    /// <summary>
    /// Returns true if TopSearchWithAnalytics instances are equal
    /// </summary>
    /// <param name="input">Instance of TopSearchWithAnalytics to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(TopSearchWithAnalytics input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Search == input.Search ||
              (this.Search != null &&
              this.Search.Equals(input.Search))
          ) &&
          (
              this.Count == input.Count ||
              this.Count.Equals(input.Count)
          ) &&
          (
              this.ClickThroughRate == input.ClickThroughRate ||
              this.ClickThroughRate.Equals(input.ClickThroughRate)
          ) &&
          (
              this.AverageClickPosition == input.AverageClickPosition ||
              this.AverageClickPosition.Equals(input.AverageClickPosition)
          ) &&
          (
              this.ConversionRate == input.ConversionRate ||
              this.ConversionRate.Equals(input.ConversionRate)
          ) &&
          (
              this.TrackedSearchCount == input.TrackedSearchCount ||
              this.TrackedSearchCount.Equals(input.TrackedSearchCount)
          ) &&
          (
              this.ClickCount == input.ClickCount ||
              this.ClickCount.Equals(input.ClickCount)
          ) &&
          (
              this.ConversionCount == input.ConversionCount ||
              this.ConversionCount.Equals(input.ConversionCount)
          ) &&
          (
              this.NbHits == input.NbHits ||
              this.NbHits.Equals(input.NbHits)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        if (this.Search != null)
        {
          hashCode = (hashCode * 59) + this.Search.GetHashCode();
        }
        hashCode = (hashCode * 59) + this.Count.GetHashCode();
        hashCode = (hashCode * 59) + this.ClickThroughRate.GetHashCode();
        hashCode = (hashCode * 59) + this.AverageClickPosition.GetHashCode();
        hashCode = (hashCode * 59) + this.ConversionRate.GetHashCode();
        hashCode = (hashCode * 59) + this.TrackedSearchCount.GetHashCode();
        hashCode = (hashCode * 59) + this.ClickCount.GetHashCode();
        hashCode = (hashCode * 59) + this.ConversionCount.GetHashCode();
        hashCode = (hashCode * 59) + this.NbHits.GetHashCode();
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      // ClickThroughRate (double) maximum
      if (this.ClickThroughRate > (double)1)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClickThroughRate, must be a value less than or equal to 1.", new[] { "ClickThroughRate" });
      }

      // ClickThroughRate (double) minimum
      if (this.ClickThroughRate < (double)0)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for ClickThroughRate, must be a value greater than or equal to 0.", new[] { "ClickThroughRate" });
      }

      yield break;
    }
  }

}
