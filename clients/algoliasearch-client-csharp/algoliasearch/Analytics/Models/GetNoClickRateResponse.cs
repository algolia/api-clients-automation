//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.Search.Analytics.Client.FileParameter;
using OpenAPIDateConverter = Algolia.Search.Analytics.Client.OpenAPIDateConverter;

namespace Algolia.Search.Analytics.Models
{
  /// <summary>
  /// GetNoClickRateResponse
  /// </summary>
  [DataContract(Name = "getNoClickRateResponse")]
  public partial class GetNoClickRateResponse : IEquatable<GetNoClickRateResponse>, IValidatableObject
  {
    /// <summary>
    /// Initializes a new instance of the <see cref="GetNoClickRateResponse" /> class.
    /// </summary>
    [JsonConstructorAttribute]
    protected GetNoClickRateResponse() { }
    /// <summary>
    /// Initializes a new instance of the <see cref="GetNoClickRateResponse" /> class.
    /// </summary>
    /// <param name="rate">[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).  (required).</param>
    /// <param name="count">Number of click events. (required).</param>
    /// <param name="noClickCount">Number of click events. (required).</param>
    /// <param name="dates">Overall count of searches without clicks plus a daily breakdown. (required).</param>
    public GetNoClickRateResponse(double rate = default(double), int count = default(int), int noClickCount = default(int), List<NoClickRateEvent> dates = default(List<NoClickRateEvent>))
    {
      this.Rate = rate;
      this.Count = count;
      this.NoClickCount = noClickCount;
      // to ensure "dates" is required (not null)
      if (dates == null)
      {
        throw new ArgumentNullException("dates is a required property for GetNoClickRateResponse and cannot be null");
      }
      this.Dates = dates;
    }

    /// <summary>
    /// [Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). 
    /// </summary>
    /// <value>[Click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate). </value>
    [DataMember(Name = "rate", IsRequired = true, EmitDefaultValue = true)]
    public double Rate { get; set; }

    /// <summary>
    /// Number of click events.
    /// </summary>
    /// <value>Number of click events.</value>
    [DataMember(Name = "count", IsRequired = true, EmitDefaultValue = true)]
    public int Count { get; set; }

    /// <summary>
    /// Number of click events.
    /// </summary>
    /// <value>Number of click events.</value>
    [DataMember(Name = "noClickCount", IsRequired = true, EmitDefaultValue = true)]
    public int NoClickCount { get; set; }

    /// <summary>
    /// Overall count of searches without clicks plus a daily breakdown.
    /// </summary>
    /// <value>Overall count of searches without clicks plus a daily breakdown.</value>
    [DataMember(Name = "dates", IsRequired = true, EmitDefaultValue = true)]
    public List<NoClickRateEvent> Dates { get; set; }

    /// <summary>
    /// Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      StringBuilder sb = new StringBuilder();
      sb.Append("class GetNoClickRateResponse {\n");
      sb.Append("  Rate: ").Append(Rate).Append("\n");
      sb.Append("  Count: ").Append(Count).Append("\n");
      sb.Append("  NoClickCount: ").Append(NoClickCount).Append("\n");
      sb.Append("  Dates: ").Append(Dates).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    /// Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public virtual string ToJson()
    {
      return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
    }

    /// <summary>
    /// Returns true if objects are equal
    /// </summary>
    /// <param name="input">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object input)
    {
      return this.Equals(input as GetNoClickRateResponse);
    }

    /// <summary>
    /// Returns true if GetNoClickRateResponse instances are equal
    /// </summary>
    /// <param name="input">Instance of GetNoClickRateResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(GetNoClickRateResponse input)
    {
      if (input == null)
      {
        return false;
      }
      return
          (
              this.Rate == input.Rate ||
              this.Rate.Equals(input.Rate)
          ) &&
          (
              this.Count == input.Count ||
              this.Count.Equals(input.Count)
          ) &&
          (
              this.NoClickCount == input.NoClickCount ||
              this.NoClickCount.Equals(input.NoClickCount)
          ) &&
          (
              this.Dates == input.Dates ||
              this.Dates != null &&
              input.Dates != null &&
              this.Dates.SequenceEqual(input.Dates)
          );
    }

    /// <summary>
    /// Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      unchecked // Overflow is fine, just wrap
      {
        int hashCode = 41;
        hashCode = (hashCode * 59) + this.Rate.GetHashCode();
        hashCode = (hashCode * 59) + this.Count.GetHashCode();
        hashCode = (hashCode * 59) + this.NoClickCount.GetHashCode();
        if (this.Dates != null)
        {
          hashCode = (hashCode * 59) + this.Dates.GetHashCode();
        }
        return hashCode;
      }
    }

    /// <summary>
    /// To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      // Rate (double) maximum
      if (this.Rate > (double)1)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rate, must be a value less than or equal to 1.", new[] { "Rate" });
      }

      // Rate (double) minimum
      if (this.Rate < (double)0)
      {
        yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Rate, must be a value greater than or equal to 0.", new[] { "Rate" });
      }

      yield break;
    }
  }

}
