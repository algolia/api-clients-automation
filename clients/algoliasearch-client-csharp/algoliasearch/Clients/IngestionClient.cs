//
// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
//
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Clients;
using Algolia.Search.Models;
using Algolia.Search.Models.Ingestion;
using Algolia.Search.Transport;
using Algolia.Search.Http;

namespace Algolia.Search.Clients;


/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public interface IIngestionClient
{
  /// <summary>
  /// Create a authentication.
  /// </summary>
  /// <param name="authenticationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of AuthenticationCreateResponse</returns>
  Task<AuthenticationCreateResponse> CreateAuthenticationAsync(AuthenticationCreate authenticationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Create a destination.
  /// </summary>
  /// <param name="destinationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DestinationCreateResponse</returns>
  Task<DestinationCreateResponse> CreateDestinationAsync(DestinationCreate destinationCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Create a source.
  /// </summary>
  /// <param name="sourceCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of SourceCreateResponse</returns>
  Task<SourceCreateResponse> CreateSourceAsync(SourceCreate sourceCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Create a task.
  /// </summary>
  /// <param name="taskCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskCreateResponse</returns>
  Task<TaskCreateResponse> CreateTaskAsync(TaskCreate taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomDeleteAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomGetAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomPostAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \"/1\" must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  Task<object> CustomPutAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Soft delete the authentication of the given authenticationID.
  /// </summary>
  /// <param name="authenticationID">The authentication UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Soft delete the destination of the given destinationID.
  /// </summary>
  /// <param name="destinationID">The destination UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Soft delete the source of the given sourceID.
  /// </summary>
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Soft delete the task of the given taskID.
  /// </summary>
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  Task<DeleteResponse> DeleteTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Disable the task of the given taskID.
  /// </summary>
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  Task<TaskUpdateResponse> DisableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Enable the task of the given taskID.
  /// </summary>
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  Task<TaskUpdateResponse> EnableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get the authentication of the given authenticationID.
  /// </summary>
  /// <param name="authenticationID">The authentication UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Authentication</returns>
  Task<Authentication> GetAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get a list of authentications for the given query parameters, with pagination details.
  /// </summary>
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="type">The type of the authentications to retrieve. (optional)</param>
  /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListAuthenticationsResponse</returns>
  Task<ListAuthenticationsResponse> GetAuthenticationsAsync(int? itemsPerPage = default, int? page = default, List<AuthenticationType> type = default, List<PlatformWithNone> platform = default, AuthenticationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get the destination of the given destinationID.
  /// </summary>
  /// <param name="destinationID">The destination UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Destination</returns>
  Task<Destination> GetDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get a list of destinations for the given query parameters, with pagination details.
  /// </summary>
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="type">The type of the destinations to retrive. (optional)</param>
  /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListDestinationsResponse</returns>
  Task<ListDestinationsResponse> GetDestinationsAsync(int? itemsPerPage = default, int? page = default, List<DestinationType> type = default, List<string> authenticationID = default, DestinationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Retrieve a stream listing for a given Singer specification compatible docker type source ID.
  /// </summary>
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DockerSourceStreams</returns>
  Task<DockerSourceStreams> GetDockerSourceStreamsAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get a single event for a specific runID.
  /// </summary>
  /// <param name="runID">The run UUID.</param>
  /// <param name="eventID">The event UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Event</returns>
  Task<Event> GetEventAsync(string runID, string eventID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get a list of events associated to the given runID, for the given query parameters.
  /// </summary>
  /// <param name="runID">The run UUID.</param>
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="status">Filter the status of the events. (optional)</param>
  /// <param name="type">Filter the type of the events. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to 'now'-3 hours if omitted. (optional)</param>
  /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to 'now' days if omitted. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListEventsResponse</returns>
  Task<ListEventsResponse> GetEventsAsync(string runID, int? itemsPerPage = default, int? page = default, List<EventStatus> status = default, List<EventType> type = default, EventSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get a single run for the given ID.
  /// </summary>
  /// <param name="runID">The run UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Run</returns>
  Task<Run> GetRunAsync(string runID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get a list of runs for the given query parameters, with pagination details.
  /// </summary>
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="status">Filter the status of the runs. (optional)</param>
  /// <param name="taskID">Filter by taskID. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to 'now'-7 days if omitted. (optional)</param>
  /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to 'now' days if omitted. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of RunListResponse</returns>
  Task<RunListResponse> GetRunsAsync(int? itemsPerPage = default, int? page = default, List<RunStatus> status = default, string taskID = default, RunSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get the source of the given sourceID.
  /// </summary>
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Source</returns>
  Task<Source> GetSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get a list of sources for the given query parameters, with pagination details.
  /// </summary>
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="type">The type of the sources to retrieve. (optional)</param>
  /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. 'none' returns sources that doesn't have an authentication.  (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListSourcesResponse</returns>
  Task<ListSourcesResponse> GetSourcesAsync(int? itemsPerPage = default, int? page = default, List<SourceType> type = default, List<string> authenticationID = default, SourceSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get the task of the given taskID.
  /// </summary>
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of IngestionTask</returns>
  Task<IngestionTask> GetTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Get a list of tasks for the given query parameters, with pagination details.
  /// </summary>
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="action">The action of the tasks to retrieve. (optional)</param>
  /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
  /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
  /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
  /// <param name="triggerType">The trigger type of the task. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListTasksResponse</returns>
  Task<ListTasksResponse> GetTasksAsync(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<string> destinationID = default, List<TriggerType> triggerType = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Run the task of the given taskID.
  /// </summary>
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of RunResponse</returns>
  Task<RunResponse> RunTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Search among authentications with a defined set of parameters.
  /// </summary>
  /// <param name="authenticationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Authentication}</returns>
  Task<List<Authentication>> SearchAuthenticationsAsync(AuthenticationSearch authenticationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Search among destinations with a defined set of parameters.
  /// </summary>
  /// <param name="destinationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Destination}</returns>
  Task<List<Destination>> SearchDestinationsAsync(DestinationSearch destinationSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Search among sources with a defined set of parameters.
  /// </summary>
  /// <param name="sourceSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Source}</returns>
  Task<List<Source>> SearchSourcesAsync(SourceSearch sourceSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Search among tasks with a defined set of parameters.
  /// </summary>
  /// <param name="taskSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{IngestionTask}</returns>
  Task<List<IngestionTask>> SearchTasksAsync(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Trigger a stream listing request for a Singer specification compatible docker type source.
  /// </summary>
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DockerSourceDiscover</returns>
  Task<DockerSourceDiscover> TriggerDockerSourceDiscoverAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Update the authentication of the given authenticationID.
  /// </summary>
  /// <param name="authenticationID">The authentication UUID.</param>
  /// <param name="authenticationUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of AuthenticationUpdateResponse</returns>
  Task<AuthenticationUpdateResponse> UpdateAuthenticationAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Update the destination of the given destinationID.
  /// </summary>
  /// <param name="destinationID">The destination UUID.</param>
  /// <param name="destinationUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DestinationUpdateResponse</returns>
  Task<DestinationUpdateResponse> UpdateDestinationAsync(string destinationID, DestinationUpdate destinationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Update the source of the given sourceID.
  /// </summary>
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="sourceUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of SourceUpdateResponse</returns>
  Task<SourceUpdateResponse> UpdateSourceAsync(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

  /// <summary>
  /// Update the task of the given taskID.
  /// </summary>
  /// <param name="taskID">The task UUID.</param>
  /// <param name="taskUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  Task<TaskUpdateResponse> UpdateTaskAsync(string taskID, TaskUpdate taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default);

}



/// <summary>
/// Represents a collection of functions to interact with the API endpoints
/// </summary>
public partial class IngestionClient : IIngestionClient
{
  private readonly HttpTransport _transport;

  /// <summary>
  /// Create a new Ingestion client for the given appID and apiKey.
  /// </summary>
  /// <param name="applicationId">Your application</param>
  /// <param name="apiKey">Your API key</param>
  /// <param name="region">The targeted region</param>
  public IngestionClient(string applicationId, string apiKey, string region) : this(new IngestionConfig(applicationId, apiKey, region), new AlgoliaHttpRequester())
  {
  }

  /// <summary>
  /// Initialize a client with custom config
  /// </summary>
  /// <param name="config">Algolia configuration</param>
  public IngestionClient(IngestionConfig config) : this(config, new AlgoliaHttpRequester())
  {
  }

  /// <summary>
  /// Initialize the client with custom config and custom Requester
  /// </summary>
  /// <param name="config">Algolia Config</param>
  /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
  public IngestionClient(IngestionConfig config, IHttpRequester httpRequester)
  {
    if (httpRequester == null)
    {
      throw new ArgumentException("An httpRequester is required");
    }
    if (config == null)
    {
      throw new ArgumentException("A config is required");
    }
    if (string.IsNullOrWhiteSpace(config.AppId))
    {
      throw new ArgumentException("`AppId` is missing.");
    }
    if (string.IsNullOrWhiteSpace(config.ApiKey))
    {
      throw new ArgumentException("`ApiKey` is missing.");
    }

    _transport = new HttpTransport(config, httpRequester);
  }


  /// <summary>
  /// Create a authentication.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of AuthenticationCreateResponse</returns>
  public async Task<AuthenticationCreateResponse> CreateAuthenticationAsync(AuthenticationCreate authenticationCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationCreate == null)
      throw new ArgumentException("Parameter `authenticationCreate` is required when calling `CreateAuthentication`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = authenticationCreate;
    return await _transport.ExecuteRequestAsync<AuthenticationCreateResponse>(new HttpMethod("POST"), "/1/authentications", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Create a destination.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DestinationCreateResponse</returns>
  public async Task<DestinationCreateResponse> CreateDestinationAsync(DestinationCreate destinationCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationCreate == null)
      throw new ArgumentException("Parameter `destinationCreate` is required when calling `CreateDestination`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = destinationCreate;
    return await _transport.ExecuteRequestAsync<DestinationCreateResponse>(new HttpMethod("POST"), "/1/destinations", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Create a source.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of SourceCreateResponse</returns>
  public async Task<SourceCreateResponse> CreateSourceAsync(SourceCreate sourceCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceCreate == null)
      throw new ArgumentException("Parameter `sourceCreate` is required when calling `CreateSource`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = sourceCreate;
    return await _transport.ExecuteRequestAsync<SourceCreateResponse>(new HttpMethod("POST"), "/1/sources", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Create a task.
  /// </summary>
  /// <param name="taskCreate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskCreateResponse</returns>
  public async Task<TaskCreateResponse> CreateTaskAsync(TaskCreate taskCreate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskCreate == null)
      throw new ArgumentException("Parameter `taskCreate` is required when calling `CreateTask`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = taskCreate;
    return await _transport.ExecuteRequestAsync<TaskCreateResponse>(new HttpMethod("POST"), "/1/tasks", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  public async Task<object> CustomDeleteAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomDelete`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", ClientUtils.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("DELETE"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  public async Task<object> CustomGetAsync(string path, Dictionary<string, object> parameters = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomGet`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", ClientUtils.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("GET"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  public async Task<object> CustomPostAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomPost`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", ClientUtils.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    requestOptions.Data = body;
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("POST"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// This method allow you to send requests to the Algolia REST API.
  /// </summary>
  /// <param name="path">Path of the endpoint, anything after \&quot;/1\&quot; must be specified.</param>
  /// <param name="parameters">Query parameters to apply to the current query. (optional)</param>
  /// <param name="body">Parameters to send with the custom request. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of object</returns>
  public async Task<object> CustomPutAsync(string path, Dictionary<string, object> parameters = default, object body = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (path == null)
      throw new ArgumentException("Parameter `path` is required when calling `CustomPut`.");

    var requestOptions = new InternalRequestOptions(options);
    requestOptions.CustomPathParameters.Add("path", ClientUtils.ParameterToString(path));

    requestOptions.AddCustomQueryParameters(parameters);
    requestOptions.Data = body;
    return await _transport.ExecuteRequestAsync<object>(new HttpMethod("PUT"), "/1{path}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Soft delete the authentication of the given authenticationID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">The authentication UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  public async Task<DeleteResponse> DeleteAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationID == null)
      throw new ArgumentException("Parameter `authenticationID` is required when calling `DeleteAuthentication`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("authenticationID", ClientUtils.ParameterToString(authenticationID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Soft delete the destination of the given destinationID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">The destination UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  public async Task<DeleteResponse> DeleteDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationID == null)
      throw new ArgumentException("Parameter `destinationID` is required when calling `DeleteDestination`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("destinationID", ClientUtils.ParameterToString(destinationID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Soft delete the source of the given sourceID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  public async Task<DeleteResponse> DeleteSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `DeleteSource`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Soft delete the task of the given taskID.
  /// </summary>
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DeleteResponse</returns>
  public async Task<DeleteResponse> DeleteTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `DeleteTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<DeleteResponse>(new HttpMethod("DELETE"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Disable the task of the given taskID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  public async Task<TaskUpdateResponse> DisableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `DisableTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PUT"), "/1/tasks/{taskID}/disable", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Enable the task of the given taskID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  public async Task<TaskUpdateResponse> EnableTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `EnableTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PUT"), "/1/tasks/{taskID}/enable", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get the authentication of the given authenticationID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">The authentication UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Authentication</returns>
  public async Task<Authentication> GetAuthenticationAsync(string authenticationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationID == null)
      throw new ArgumentException("Parameter `authenticationID` is required when calling `GetAuthentication`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("authenticationID", ClientUtils.ParameterToString(authenticationID));

    return await _transport.ExecuteRequestAsync<Authentication>(new HttpMethod("GET"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get a list of authentications for the given query parameters, with pagination details.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="type">The type of the authentications to retrieve. (optional)</param>
  /// <param name="platform">The platform of the authentications to retrieve. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListAuthenticationsResponse</returns>
  public async Task<ListAuthenticationsResponse> GetAuthenticationsAsync(int? itemsPerPage = default, int? page = default, List<AuthenticationType> type = default, List<PlatformWithNone> platform = default, AuthenticationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("platform", platform);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListAuthenticationsResponse>(new HttpMethod("GET"), "/1/authentications", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get the destination of the given destinationID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">The destination UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Destination</returns>
  public async Task<Destination> GetDestinationAsync(string destinationID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationID == null)
      throw new ArgumentException("Parameter `destinationID` is required when calling `GetDestination`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("destinationID", ClientUtils.ParameterToString(destinationID));

    return await _transport.ExecuteRequestAsync<Destination>(new HttpMethod("GET"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get a list of destinations for the given query parameters, with pagination details.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="type">The type of the destinations to retrive. (optional)</param>
  /// <param name="authenticationID">The authenticationIDs of the destinations to retrive. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListDestinationsResponse</returns>
  public async Task<ListDestinationsResponse> GetDestinationsAsync(int? itemsPerPage = default, int? page = default, List<DestinationType> type = default, List<string> authenticationID = default, DestinationSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("authenticationID", authenticationID);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListDestinationsResponse>(new HttpMethod("GET"), "/1/destinations", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Retrieve a stream listing for a given Singer specification compatible docker type source ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DockerSourceStreams</returns>
  public async Task<DockerSourceStreams> GetDockerSourceStreamsAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `GetDockerSourceStreams`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));

    return await _transport.ExecuteRequestAsync<DockerSourceStreams>(new HttpMethod("GET"), "/1/sources/{sourceID}/discover", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get a single event for a specific runID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">The run UUID.</param>
  /// <param name="eventID">The event UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Event</returns>
  public async Task<Event> GetEventAsync(string runID, string eventID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (runID == null)
      throw new ArgumentException("Parameter `runID` is required when calling `GetEvent`.");


    if (eventID == null)
      throw new ArgumentException("Parameter `eventID` is required when calling `GetEvent`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("runID", ClientUtils.ParameterToString(runID));
    requestOptions.PathParameters.Add("eventID", ClientUtils.ParameterToString(eventID));

    return await _transport.ExecuteRequestAsync<Event>(new HttpMethod("GET"), "/1/runs/{runID}/events/{eventID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get a list of events associated to the given runID, for the given query parameters.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">The run UUID.</param>
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="status">Filter the status of the events. (optional)</param>
  /// <param name="type">Filter the type of the events. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="startDate">The start date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39;-3 hours if omitted. (optional)</param>
  /// <param name="endDate">The end date (in RFC3339 format) of the events fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListEventsResponse</returns>
  public async Task<ListEventsResponse> GetEventsAsync(string runID, int? itemsPerPage = default, int? page = default, List<EventStatus> status = default, List<EventType> type = default, EventSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (runID == null)
      throw new ArgumentException("Parameter `runID` is required when calling `GetEvents`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("runID", ClientUtils.ParameterToString(runID));

    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("status", status);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    requestOptions.AddQueryParameter("startDate", startDate);
    requestOptions.AddQueryParameter("endDate", endDate);
    return await _transport.ExecuteRequestAsync<ListEventsResponse>(new HttpMethod("GET"), "/1/runs/{runID}/events", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get a single run for the given ID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="runID">The run UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Run</returns>
  public async Task<Run> GetRunAsync(string runID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (runID == null)
      throw new ArgumentException("Parameter `runID` is required when calling `GetRun`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("runID", ClientUtils.ParameterToString(runID));

    return await _transport.ExecuteRequestAsync<Run>(new HttpMethod("GET"), "/1/runs/{runID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get a list of runs for the given query parameters, with pagination details.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="status">Filter the status of the runs. (optional)</param>
  /// <param name="taskID">Filter by taskID. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="startDate">The start date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39;-7 days if omitted. (optional)</param>
  /// <param name="endDate">The end date (in RFC3339 format) of the runs fetching window. Defaults to &#39;now&#39; days if omitted. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of RunListResponse</returns>
  public async Task<RunListResponse> GetRunsAsync(int? itemsPerPage = default, int? page = default, List<RunStatus> status = default, string taskID = default, RunSortKeys? sort = default, OrderKeys? order = default, string startDate = default, string endDate = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("status", status);
    requestOptions.AddQueryParameter("taskID", taskID);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    requestOptions.AddQueryParameter("startDate", startDate);
    requestOptions.AddQueryParameter("endDate", endDate);
    return await _transport.ExecuteRequestAsync<RunListResponse>(new HttpMethod("GET"), "/1/runs", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get the source of the given sourceID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of Source</returns>
  public async Task<Source> GetSourceAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `GetSource`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));

    return await _transport.ExecuteRequestAsync<Source>(new HttpMethod("GET"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get a list of sources for the given query parameters, with pagination details.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="type">The type of the sources to retrieve. (optional)</param>
  /// <param name="authenticationID">The authenticationIDs of the sources to retrieve. &#39;none&#39; returns sources that doesn&#39;t have an authentication.  (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListSourcesResponse</returns>
  public async Task<ListSourcesResponse> GetSourcesAsync(int? itemsPerPage = default, int? page = default, List<SourceType> type = default, List<string> authenticationID = default, SourceSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("type", type);
    requestOptions.AddQueryParameter("authenticationID", authenticationID);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListSourcesResponse>(new HttpMethod("GET"), "/1/sources", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get the task of the given taskID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of IngestionTask</returns>
  public async Task<IngestionTask> GetTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `GetTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<IngestionTask>(new HttpMethod("GET"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Get a list of tasks for the given query parameters, with pagination details.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="itemsPerPage">The number of items per page to return. (optional)</param>
  /// <param name="page">The page number to fetch, starting at 1. (optional)</param>
  /// <param name="action">The action of the tasks to retrieve. (optional)</param>
  /// <param name="enabled">Whether the task is enabled or not. (optional)</param>
  /// <param name="sourceID">The sourceIDs of the tasks to retrive. (optional)</param>
  /// <param name="destinationID">The destinationIDs of the tasks to retrive. (optional)</param>
  /// <param name="triggerType">The trigger type of the task. (optional)</param>
  /// <param name="sort">The key by which the list should be sorted. (optional)</param>
  /// <param name="order">The order of the returned list. (optional)</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of ListTasksResponse</returns>
  public async Task<ListTasksResponse> GetTasksAsync(int? itemsPerPage = default, int? page = default, List<ActionType> action = default, bool? enabled = default, List<string> sourceID = default, List<string> destinationID = default, List<TriggerType> triggerType = default, TaskSortKeys? sort = default, OrderKeys? order = default, RequestOptions options = null, CancellationToken cancellationToken = default)
  {
    var requestOptions = new InternalRequestOptions(options);


    requestOptions.AddQueryParameter("itemsPerPage", itemsPerPage);
    requestOptions.AddQueryParameter("page", page);
    requestOptions.AddQueryParameter("action", action);
    requestOptions.AddQueryParameter("enabled", enabled);
    requestOptions.AddQueryParameter("sourceID", sourceID);
    requestOptions.AddQueryParameter("destinationID", destinationID);
    requestOptions.AddQueryParameter("triggerType", triggerType);
    requestOptions.AddQueryParameter("sort", sort);
    requestOptions.AddQueryParameter("order", order);
    return await _transport.ExecuteRequestAsync<ListTasksResponse>(new HttpMethod("GET"), "/1/tasks", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Run the task of the given taskID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskID">The task UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of RunResponse</returns>
  public async Task<RunResponse> RunTaskAsync(string taskID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `RunTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));

    return await _transport.ExecuteRequestAsync<RunResponse>(new HttpMethod("POST"), "/1/tasks/{taskID}/run", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Search among authentications with a defined set of parameters.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Authentication}</returns>
  public async Task<List<Authentication>> SearchAuthenticationsAsync(AuthenticationSearch authenticationSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationSearch == null)
      throw new ArgumentException("Parameter `authenticationSearch` is required when calling `SearchAuthentications`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = authenticationSearch;
    return await _transport.ExecuteRequestAsync<List<Authentication>>(new HttpMethod("POST"), "/1/authentications/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Search among destinations with a defined set of parameters.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Destination}</returns>
  public async Task<List<Destination>> SearchDestinationsAsync(DestinationSearch destinationSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationSearch == null)
      throw new ArgumentException("Parameter `destinationSearch` is required when calling `SearchDestinations`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = destinationSearch;
    return await _transport.ExecuteRequestAsync<List<Destination>>(new HttpMethod("POST"), "/1/destinations/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Search among sources with a defined set of parameters.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{Source}</returns>
  public async Task<List<Source>> SearchSourcesAsync(SourceSearch sourceSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceSearch == null)
      throw new ArgumentException("Parameter `sourceSearch` is required when calling `SearchSources`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = sourceSearch;
    return await _transport.ExecuteRequestAsync<List<Source>>(new HttpMethod("POST"), "/1/sources/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Search among tasks with a defined set of parameters.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="taskSearch"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of List{IngestionTask}</returns>
  public async Task<List<IngestionTask>> SearchTasksAsync(TaskSearch taskSearch, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskSearch == null)
      throw new ArgumentException("Parameter `taskSearch` is required when calling `SearchTasks`.");

    var requestOptions = new InternalRequestOptions(options);


    requestOptions.Data = taskSearch;
    return await _transport.ExecuteRequestAsync<List<IngestionTask>>(new HttpMethod("POST"), "/1/tasks/search", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Trigger a stream listing request for a Singer specification compatible docker type source.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DockerSourceDiscover</returns>
  public async Task<DockerSourceDiscover> TriggerDockerSourceDiscoverAsync(string sourceID, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `TriggerDockerSourceDiscover`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));

    return await _transport.ExecuteRequestAsync<DockerSourceDiscover>(new HttpMethod("POST"), "/1/sources/{sourceID}/discover", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Update the authentication of the given authenticationID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="authenticationID">The authentication UUID.</param>
  /// <param name="authenticationUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of AuthenticationUpdateResponse</returns>
  public async Task<AuthenticationUpdateResponse> UpdateAuthenticationAsync(string authenticationID, AuthenticationUpdate authenticationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (authenticationID == null)
      throw new ArgumentException("Parameter `authenticationID` is required when calling `UpdateAuthentication`.");


    if (authenticationUpdate == null)
      throw new ArgumentException("Parameter `authenticationUpdate` is required when calling `UpdateAuthentication`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("authenticationID", ClientUtils.ParameterToString(authenticationID));

    requestOptions.Data = authenticationUpdate;
    return await _transport.ExecuteRequestAsync<AuthenticationUpdateResponse>(new HttpMethod("PATCH"), "/1/authentications/{authenticationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Update the destination of the given destinationID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="destinationID">The destination UUID.</param>
  /// <param name="destinationUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of DestinationUpdateResponse</returns>
  public async Task<DestinationUpdateResponse> UpdateDestinationAsync(string destinationID, DestinationUpdate destinationUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (destinationID == null)
      throw new ArgumentException("Parameter `destinationID` is required when calling `UpdateDestination`.");


    if (destinationUpdate == null)
      throw new ArgumentException("Parameter `destinationUpdate` is required when calling `UpdateDestination`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("destinationID", ClientUtils.ParameterToString(destinationID));

    requestOptions.Data = destinationUpdate;
    return await _transport.ExecuteRequestAsync<DestinationUpdateResponse>(new HttpMethod("PATCH"), "/1/destinations/{destinationID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Update the source of the given sourceID.
  /// </summary>
  ///
  /// Required API Key ACLs:
  ///   - addObject
  ///   - deleteIndex
  ///   - editSettings
  /// <param name="sourceID">The source UUID.</param>
  /// <param name="sourceUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of SourceUpdateResponse</returns>
  public async Task<SourceUpdateResponse> UpdateSourceAsync(string sourceID, SourceUpdate sourceUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (sourceID == null)
      throw new ArgumentException("Parameter `sourceID` is required when calling `UpdateSource`.");


    if (sourceUpdate == null)
      throw new ArgumentException("Parameter `sourceUpdate` is required when calling `UpdateSource`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("sourceID", ClientUtils.ParameterToString(sourceID));

    requestOptions.Data = sourceUpdate;
    return await _transport.ExecuteRequestAsync<SourceUpdateResponse>(new HttpMethod("PATCH"), "/1/sources/{sourceID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }

  /// <summary>
  /// Update the task of the given taskID.
  /// </summary>
  /// <param name="taskID">The task UUID.</param>
  /// <param name="taskUpdate"></param>
  /// <param name="options">Add extra http header or query parameters to Algolia.</param>
  /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
  /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
  /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
  /// <returns>Task of TaskUpdateResponse</returns>
  public async Task<TaskUpdateResponse> UpdateTaskAsync(string taskID, TaskUpdate taskUpdate, RequestOptions options = null, CancellationToken cancellationToken = default)
  {

    if (taskID == null)
      throw new ArgumentException("Parameter `taskID` is required when calling `UpdateTask`.");


    if (taskUpdate == null)
      throw new ArgumentException("Parameter `taskUpdate` is required when calling `UpdateTask`.");

    var requestOptions = new InternalRequestOptions(options);

    requestOptions.PathParameters.Add("taskID", ClientUtils.ParameterToString(taskID));

    requestOptions.Data = taskUpdate;
    return await _transport.ExecuteRequestAsync<TaskUpdateResponse>(new HttpMethod("PATCH"), "/1/tasks/{taskID}", requestOptions, cancellationToken).ConfigureAwait(false);
  }
}

