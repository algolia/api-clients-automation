/*
* Query Suggestions API
*
* The Query Suggestions API lets you manage Algolia's Query Suggestions configurations. Query Suggestions add new indices with popular search queries, external suggestions, or facet values to your Algolia application. In your user interface, you can query the Query Suggestions indices like regular indices and add [suggested searches](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/query-suggestions/js/) to guide users and speed up their search. 
*
* The version of the OpenAPI document: 1.0.0
* Generated by: https://github.com/openapitools/openapi-generator.git
*/


using System;
using System.Collections.Generic;
using Algolia.Search.Models;
using Algolia.Search.Models.Common;
using Algolia.Search.Transport;
using Algolia.Search.Utils;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;

namespace Algolia.Search.Clients;

/// <summary>
/// QuerySuggestions client configuration
/// </summary>
public sealed class QuerySuggestionsConfig : AlgoliaConfig
{
  /// <summary>
  /// The configuration of the QuerySuggestions client
  /// A client should have it's own configuration ie on configuration per client instance
  /// </summary>
  /// <param name="appId">Your application ID</param>
  /// <param name="apiKey">Your API Key</param>
  /// <param name="region">Targeted region </param>
  public QuerySuggestionsConfig(string appId, string apiKey, string region) : base(appId, apiKey, "QuerySuggestions")
  {
    DefaultHosts = GetDefaultHosts(region);
    Compression = CompressionType.NONE;
  }
  private static List<StatefulHost> GetDefaultHosts(string region)
  {
    var regions = new List<string> { "eu", "us" };
    if (region == null || !regions.Contains(region))
    {
      throw new ArgumentException($"`region` is required and must be one of the following: {string.Join(", ", regions)}");
    }

    var selectedRegion = "query-suggestions.{region}.algolia.com".Replace("{region}", region);

    List<StatefulHost> hosts = new List<StatefulHost>
  {
    new StatefulHost
    {
      Url = selectedRegion, Accept = CallType.Read | CallType.Write
    }
  };
    return hosts;
  }
}

