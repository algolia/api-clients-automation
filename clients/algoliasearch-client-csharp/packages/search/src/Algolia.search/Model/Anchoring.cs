/*
 * Search API
 *
 * Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using FileParameter = Algolia.search.Client.FileParameter;
using OpenAPIDateConverter = Algolia.search.Client.OpenAPIDateConverter;

namespace Algolia.search.Model
{
  /// <summary>
  /// Whether the pattern parameter matches the beginning (&#x60;startsWith&#x60;) or end (&#x60;endsWith&#x60;) of the query string, is an exact match (&#x60;is&#x60;), or a partial match (&#x60;contains&#x60;).
  /// </summary>
  /// <value>Whether the pattern parameter matches the beginning (&#x60;startsWith&#x60;) or end (&#x60;endsWith&#x60;) of the query string, is an exact match (&#x60;is&#x60;), or a partial match (&#x60;contains&#x60;).</value>
  [JsonConverter(typeof(StringEnumConverter))]
  public enum Anchoring
  {
    /// <summary>
    /// Enum Is for value: is
    /// </summary>
    [EnumMember(Value = "is")]
    Is = 1,

    /// <summary>
    /// Enum StartsWith for value: startsWith
    /// </summary>
    [EnumMember(Value = "startsWith")]
    StartsWith = 2,

    /// <summary>
    /// Enum EndsWith for value: endsWith
    /// </summary>
    [EnumMember(Value = "endsWith")]
    EndsWith = 3,

    /// <summary>
    /// Enum Contains for value: contains
    /// </summary>
    [EnumMember(Value = "contains")]
    Contains = 4
  }

}
