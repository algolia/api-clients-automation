/*
 * Search API
 *
 * Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System.IO;

namespace Algolia.search.Client
{

  /// <summary>
  /// Represents a File passed to the API as a Parameter, allows using different backends for files
  /// </summary>
  public class FileParameter
  {
    /// <summary>
    /// The filename
    /// </summary>
    public string Name { get; set; } = "no_name_provided";

    /// <summary>
    /// The content type of the file
    /// </summary>
    public string ContentType { get; set; } = "application/octet-stream";

    /// <summary>
    /// The content of the file
    /// </summary>
    public Stream Content { get; set; }

    /// <summary>
    /// Construct a FileParameter just from the contents, will extract the filename from a filestream
    /// </summary>
    /// <param name="content"> The file content </param>
    public FileParameter(Stream content)
    {
      if (content is FileStream fs)
      {
        Name = fs.Name;
      }
      Content = content;
    }

    /// <summary>
    /// Construct a FileParameter from name and content
    /// </summary>
    /// <param name="filename">The filename</param>
    /// <param name="content">The file content</param>
    public FileParameter(string filename, Stream content)
    {
      Name = filename;
      Content = content;
    }

    /// <summary>
    /// Construct a FileParameter from name and content
    /// </summary>
    /// <param name="filename">The filename</param>
    /// <param name="contentType">The content type of the file</param>
    /// <param name="content">The file content</param>
    public FileParameter(string filename, string contentType, Stream content)
    {
      Name = filename;
      ContentType = contentType;
      Content = content;
    }

    /// <summary>
    /// Implicit conversion of stream to file parameter. Useful for backwards compatibility.
    /// </summary>
    /// <param name="s">Stream to convert</param>
    /// <returns>FileParameter</returns>
    public static implicit operator FileParameter(Stream s) => new FileParameter(s);
  }
}
