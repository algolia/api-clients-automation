openapi: 3.0.2
info:
  description: |-
    Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).

    Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead.
    There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  title: Search API
  version: 1.0.0
servers:
- url: "https://{appId}.algolia.net"
  variables:
    appId:
      default: myAppId
- url: "https://{appId}-1.algolianet.com"
  variables:
    appId:
      default: myAppId
- url: "https://{appId}-2.algolianet.com"
  variables:
    appId:
      default: myAppId
- url: "https://{appId}-3.algolianet.com"
  variables:
    appId:
      default: myAppId
- url: "https://{appId}-dsn.algolia.net"
  variables:
    appId:
      default: myAppId
security:
- appId: []
  apiKey: []
tags:
- description: Advanced operations.
  name: Advanced
- description: Manage your API keys.
  name: Api Keys
- description: |
    Multi-cluster operations.
    Algolia no longer offers [multi-cluster management](https://www.algolia.com/doc/guides/scaling/managing-multiple-clusters-mcm/).
    - If you want to partition your data per user, use facets and secured API keys instead. - If you need more data, consider upgrading to a bigger cluster to suit your needs. Contact [Algolia's support team](https://support.algolia.com/hc/en-us/requests/new) for details.
  name: Clusters
- description: "Dictionary operations allow you to customize linguistic features such\
    \ as [stop words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/),\
    \ [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/),\
    \ and [segmentation (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/)."
  name: Dictionaries
- description: "Manage indices, including listing them, checking and updating settings,\
    \ deleting, copying, and renaming."
  name: Indices
- description: Record operations.
  name: Records
- description: Rules operations.
  name: Rules
- description: Search operations.
  name: Search
- description: Synonym operations.
  name: Synonyms
- description: |
    Vault operations.
    Algolia Vault allows you to restrict network-level access to your cluster to a specific set of IP addresses: for non-authorized IP addresses, the cluster is invisible.
    You should authorize the IP addresses of team members who need to access the Alglolia dashboard, as it's also affected by the restricted list you set up.
    To access this feature, [Algolia Vault](https://www.algolia.com/doc/guides/security/algolia-vault/) must be enabled on your server. Contact [Algolia's support team](https://support.algolia.com/hc/en-us/requests/new) for details.
    > **Note**: The maximum number of allowed sources is 1,000.
  name: Vaults
- description: |
    <SchemaDefinition schemaRef="#/components/schemas/indexSettings" />.
  name: _model_index_settings
  x-displayName: Index settings
paths:
  /1{path}:
    delete:
      description: This method allow you to send requests to the Algolia REST API.
      operationId: del
      parameters:
      - description: "Path of the endpoint, anything after \"/1\" must be specified."
        explode: false
        in: path
        name: path
        required: true
        schema:
          example: /keys
          type: string
        style: simple
      - description: Query parameters to apply to the current query.
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          additionalProperties: true
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Send requests to the Algolia REST API.
      tags:
      - search
    get:
      description: This method allow you to send requests to the Algolia REST API.
      operationId: get
      parameters:
      - description: "Path of the endpoint, anything after \"/1\" must be specified."
        explode: false
        in: path
        name: path
        required: true
        schema:
          example: /keys
          type: string
        style: simple
      - description: Query parameters to apply to the current query.
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          additionalProperties: true
          type: object
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Send requests to the Algolia REST API.
      tags:
      - search
    post:
      description: This method allow you to send requests to the Algolia REST API.
      operationId: post
      parameters:
      - description: "Path of the endpoint, anything after \"/1\" must be specified."
        explode: false
        in: path
        name: path
        required: true
        schema:
          example: /keys
          type: string
        style: simple
      - description: Query parameters to apply to the current query.
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          additionalProperties: true
          type: object
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Parameters to send with the custom request.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Send requests to the Algolia REST API.
      tags:
      - search
    put:
      description: This method allow you to send requests to the Algolia REST API.
      operationId: put
      parameters:
      - description: "Path of the endpoint, anything after \"/1\" must be specified."
        explode: false
        in: path
        name: path
        required: true
        schema:
          example: /keys
          type: string
        style: simple
      - description: Query parameters to apply to the current query.
        explode: true
        in: query
        name: parameters
        required: false
        schema:
          additionalProperties: true
          type: object
        style: form
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Parameters to send with the custom request.
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Send requests to the Algolia REST API.
      tags:
      - search
  /1/indexes/{indexName}/query:
    post:
      description: Return records that match the query.
      operationId: searchSingleIndex
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchParams'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Search an index.
      tags:
      - search
      x-use-read-transporter: true
      x-cacheable: true
  /1/indexes/*/queries:
    post:
      description: Send multiple search queries to one or more indices.
      operationId: search
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchMethodParams'
        description: Query requests and strategies. Results will be received in the
          same order as the queries.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchResponses'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Search multiple indices.
      tags:
      - search
      x-use-read-transporter: true
      x-cacheable: true
      x-legacy-signature: true
  /1/indexes/{indexName}/facets/{facetName}/query:
    post:
      description: |
        [Search for a facet's values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values), optionally restricting the returned values to those contained in records matching other search criteria.
        > **Note**: Pagination isn't supported (`page` and `hitsPerPage` are ignored). By default, the engine returns a maximum of 10 values but you can adjust this with `maxFacetHits`.
      operationId: searchForFacetValues
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Facet name.
        explode: false
        in: path
        name: facetName
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchForFacetValuesRequest'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchForFacetValuesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Search for facet values.
      tags:
      - search
      x-use-read-transporter: true
      x-cacheable: true
  /1/indexes/{indexName}/browse:
    post:
      description: |
        Retrieve up to 1,000 records per call.
        Supports full-text search and filters. For better performance, it doesn't support:
        - The `distinct` query parameter - Sorting by typos, proximity, words, or geographical distance.
      operationId: browse
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/browseParams'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/browseResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get all records from an index.
      tags:
      - search
  /1/indexes/{indexName}:
    delete:
      description: Delete an existing index.
      operationId: deleteIndex
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete index.
      tags:
      - search
    post:
      description: |
        Add a record (object) to an index or replace it.
        If the record doesn't contain an `objectID`, Algolia automatically adds it.
        If you use an existing `objectID`, the existing record is replaced with the new one.
        To add multiple records to your index in a single API request, use the [`batch` operation](#tag/Records/operation/batch).
      operationId: saveObject
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: The Algolia record.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveObjectResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Add or update a record.
      tags:
      - search
  /1/indexes/{indexName}/{objectID}:
    delete:
      description: "To delete a set of records matching a query, use the [`deleteByQuery`\
        \ operation](#tag/Records/operation/deleteBy) instead."
      operationId: deleteObject
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique record (object) identifier.
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          example: "123"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete a record.
      tags:
      - search
    get:
      description: "To get more than one record, use the [`objects` operation](#tag/Records/operation/getObjects)."
      operationId: getObject
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique record (object) identifier.
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          example: "123"
          type: string
        style: simple
      - description: |
          Attributes to include with the records in the response. This is useful to reduce the size of the API response. By default, all retrievable attributes are returned.
          `objectID` is always retrieved, even when not specified.
          [`unretrievableAttributes`](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/) won't be retrieved unless the request is authenticated with the admin API key.
        explode: true
        in: query
        name: attributesToRetrieve
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/attribute'
                description: Fetched object.
                title: getObjectResponse
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get a record.
      tags:
      - search
    put:
      description: |
        If you use an existing `objectID`, the existing record will be replaced with the new one.

        To update only some attributes of an existing record, use the [`partial` operation](#tag/Records/operation/partialUpdateObject) instead.

        To add multiple records to your index in a single API request, use the [`batch` operation](#tag/Records/operation/batch).
      operationId: addOrUpdateObject
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique record (object) identifier.
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          example: "123"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              type: object
        description: Algolia record.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtWithObjectIdResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Add or update a record (using objectID).
      tags:
      - search
  /1/indexes/{indexName}/deleteByQuery:
    post:
      description: |
        This operation doesn't support all the query options, only its filters (numeric, facet, or tag) and geo queries.
        It doesn't accept empty filters or queries.
      operationId: deleteBy
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteByParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete all records matching a query.
      tags:
      - search
  /1/indexes/{indexName}/clear:
    post:
      description: Delete the records but leave settings and index-specific API keys
        untouched.
      operationId: clearObjects
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete all records from an index.
      tags:
      - search
  /1/indexes/{indexName}/{objectID}/partial:
    post:
      description: |
        Add new attributes or update current ones in an existing record.
        You can use any first-level attribute but not nested attributes. If you specify a [nested attribute](https://www.algolia.com/doc/guides/sending-and-managing-data/prepare-your-data/how-to/creating-and-using-nested-attributes/), the engine treats it as a replacement for its first-level ancestor.
      operationId: partialUpdateObject
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique record (object) identifier.
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          example: "123"
          type: string
        style: simple
      - description: |
          Indicates whether to create a new record if it doesn't exist yet.
        explode: true
        in: query
        name: createIfNotExists
        required: false
        schema:
          default: true
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              additionalProperties:
                $ref: '#/components/schemas/attributeToUpdate'
              description: Attributes to update.
              type: object
        description: Object with attributes to update.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtWithObjectIdResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Update record attributes.
      tags:
      - search
      x-codegen-request-body-name: attributesToUpdate
  /1/indexes/{indexName}/batch:
    post:
      description: |
        To reduce the time spent on network round trips, you can perform several write actions in a single API call. Actions are applied in the order they are specified.
        The supported `action`s are equivalent to the individual operations of the same name.
      operationId: batch
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batchWriteParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/batchResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Batch write operations on one index.
      tags:
      - search
  /1/indexes/*/batch:
    post:
      description: |
        To reduce the time spent on network round trips, you can perform several write actions in a single request. It's a multi-index version of the [`batch` operation](#tag/Records/operation/batch). Actions are applied in the order they are specified.
        The supported actions are equivalent to the individual operations of the same name.
      operationId: multipleBatch
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batchParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/multipleBatchResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Batch write operations on multiple indices.
      tags:
      - search
  /1/indexes/*/objects:
    post:
      description: |
        Retrieve one or more records, potentially from different indices, in a single API operation. Results will be received in the same order as the requests.
      operationId: getObjects
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/getObjectsParams'
        description: Request object.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getObjectsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get multiple records.
      tags:
      - search
      x-use-read-transporter: true
      x-cacheable: true
  /1/indexes/{indexName}/settings:
    get:
      description: "Return an object containing an index's [configuration settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/)."
      operationId: getSettings
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/indexSettings'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get index settings.
      tags:
      - search
    put:
      description: "Update the specified [index settings](https://www.algolia.com/doc/api-reference/settings-api-parameters/).\
        \ Specifying null for a setting resets it to its default value."
      operationId: setSettings
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/indexSettings'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Update index settings.
      tags:
      - search
  /1/indexes/{indexName}/synonyms/{objectID}:
    delete:
      description: "Delete a synonym by its `objectID`. To find the object IDs of\
        \ your synonyms, use the [`search` operation](#tag/Synonyms/operation/searchSynonyms)."
      operationId: deleteSynonym
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique identifier of a synonym object.
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          example: synonymID
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deletedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete a synonym.
      tags:
      - search
    get:
      description: "Get a syonym by its `objectID`. To find the object IDs for your\
        \ synonyms, use the [`search` operation](#tag/Synonyms/operation/searchSynonyms)."
      operationId: getSynonym
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique identifier of a synonym object.
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          example: synonymID
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/synonymHit'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get a synonym object.
      tags:
      - search
    put:
      description: |
        Add a [synonym](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms) to an index or replace it.
        If the synonym `objectID` doesn't exist, Algolia adds a new one.
        If you use an existing synonym `objectID`, the existing synonym is replaced with the new one.
        To add multiple synonyms in a single API request, use the [`batch` operation](#tag/Synonyms/operation/saveSynonyms).
      operationId: saveSynonym
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique identifier of a synonym object.
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          example: synonymID
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/synonymHit'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/saveSynonymResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Save a synonym.
      tags:
      - search
  /1/indexes/{indexName}/synonyms/batch:
    post:
      description: Create or update multiple synonyms.
      operationId: saveSynonyms
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      - description: Indicates whether to replace all synonyms in the index with the
          ones sent with this request.
        explode: true
        in: query
        name: replaceExistingSynonyms
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/synonymHits'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Save a batch of synonyms.
      tags:
      - search
  /1/indexes/{indexName}/synonyms/clear:
    post:
      description: Delete all synonyms in the index.
      operationId: clearAllSynonyms
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete all synonyms.
      tags:
      - search
  /1/indexes/{indexName}/synonyms/search:
    post:
      description: "Search for synonyms in your index. You can control and filter\
        \ the search with parameters. To get all synonyms, send an empty request body."
      operationId: searchSynonyms
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: "Search for specific [types of synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms)."
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/SynonymType'
        style: form
      - description: |
          Returns the requested page number (the first page is 0). Page size is set by `hitsPerPage`. When null, there's no pagination.
        explode: true
        in: query
        name: page
        required: false
        schema:
          default: 0
          minimum: 0
          nullable: true
          type: integer
        style: form
      - description: Maximum number of hits per page.
        explode: true
        in: query
        name: hitsPerPage
        required: false
        schema:
          default: 100
          type: integer
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchSynonymsParams'
        description: Body of the `searchSynonyms` operation.
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchSynonymsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Search for synonyms.
      tags:
      - search
      x-use-read-transporter: true
      x-cacheable: true
  /1/keys:
    get:
      description: "List all API keys associated with your Algolia application, including\
        \ their permissions and restrictions."
      operationId: listApiKeys
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listApiKeysResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: List API keys.
      tags:
      - search
    post:
      description: |
        Add a new API key with specific permissions and restrictions.
        The request must be authenticated with the admin API key.
        The response returns an API key string.
      operationId: addApiKey
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiKey'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addApiKeyResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Add API key.
      tags:
      - search
  /1/keys/{key}:
    delete:
      description: |
        Delete an existing API key.
        The request must be authenticated with the admin API key.
      operationId: deleteApiKey
      parameters:
      - description: API key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: YourAPIKey
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteApiKeyResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete API key.
      tags:
      - search
    get:
      description: |
        Get the permissions and restrictions of a specific API key.
        When authenticating with the admin API key, you can request information for any of your application's keys. When authenticating with other API keys, you can only retrieve information for that key.
      operationId: getApiKey
      parameters:
      - description: API key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: YourAPIKey
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getApiKeyResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get API key permissions.
      tags:
      - search
    put:
      description: |
        Replace the permissions of an existing API key.
        Any unspecified parameter resets that permission to its default value.
        The request must be authenticated with the admin API key.
      operationId: updateApiKey
      parameters:
      - description: API key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: YourAPIKey
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/apiKey'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updateApiKeyResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Update an API key.
      tags:
      - search
  /1/keys/{key}/restore:
    post:
      description: |
        Restore a deleted API key, along with its associated permissions.
        The request must be authenticated with the admin API key.
      operationId: restoreApiKey
      parameters:
      - description: API key.
        explode: false
        in: path
        name: key
        required: true
        schema:
          example: YourAPIKey
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/addApiKeyResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Restore API key.
      tags:
      - search
  /1/indexes/{indexName}/rules/{objectID}:
    delete:
      description: "Delete a rule by its `objectID`. To find the `objectID` for rules,\
        \ use the [`search` operation](#tag/Rules/operation/searchRules)."
      operationId: deleteRule
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique identifier of a rule object.
        example: a-rule-id
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete a rule.
      tags:
      - search
    get:
      description: "Get a rule by its `objectID`. To find the `objectID` for rules,\
        \ use the [`search` operation](#tag/Rules/operation/searchRules)."
      operationId: getRule
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique identifier of a rule object.
        example: a-rule-id
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/rule'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get a rule.
      tags:
      - search
    put:
      description: "To create or update more than one rule, use the [`batch` operation](#tag/Rules/operation/saveRules)."
      operationId: saveRule
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique identifier of a rule object.
        example: a-rule-id
        explode: false
        in: path
        name: objectID
        required: true
        schema:
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/rule'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedRuleResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Create or update a rule.
      tags:
      - search
  /1/indexes/{indexName}/rules/batch:
    post:
      description: Create or update multiple rules.
      operationId: saveRules
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      - description: Indicates whether existing rules should be deleted before adding
          this batch.
        explode: true
        in: query
        name: clearExistingRules
        required: false
        schema:
          type: boolean
        style: form
      requestBody:
        content:
          application/json:
            schema:
              description: Rules to add.
              items:
                $ref: '#/components/schemas/rule'
              type: array
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Save a batch of rules.
      tags:
      - search
      x-codegen-request-body-name: rules
  /1/indexes/{indexName}/rules/clear:
    post:
      description: Delete all rules in the index.
      operationId: clearRules
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Indicates whether changed index settings are forwarded to the
          replica indices.
        explode: true
        in: query
        name: forwardToReplicas
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Delete all rules.
      tags:
      - search
  /1/indexes/{indexName}/rules/search:
    post:
      description: "Search for rules in your index. You can control the search with\
        \ parameters. To list all rules, send an empty request body."
      operationId: searchRules
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchRulesParams'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchRulesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Search for rules.
      tags:
      - search
      x-use-read-transporter: true
      x-cacheable: true
  /1/dictionaries/{dictionaryName}/batch:
    post:
      description: Add or remove a batch of dictionary entries.
      operationId: batchDictionaryEntries
      parameters:
      - description: Dictionary to search in.
        explode: false
        in: path
        name: dictionaryName
        required: true
        schema:
          $ref: '#/components/schemas/dictionaryType'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batchDictionaryEntriesParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Batch dictionary entries.
      tags:
      - search
  /1/dictionaries/{dictionaryName}/search:
    post:
      description: "Search for standard and [custom](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/)\
        \ entries in the [stop words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/),\
        \ [plurals](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/),\
        \ or [segmentation (compounds)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/)\
        \ dictionaries."
      operationId: searchDictionaryEntries
      parameters:
      - description: Dictionary to search in.
        explode: false
        in: path
        name: dictionaryName
        required: true
        schema:
          $ref: '#/components/schemas/dictionaryType'
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchDictionaryEntriesParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Search dictionary entries.
      tags:
      - search
      x-use-read-transporter: true
      x-cacheable: true
  /1/dictionaries/*/settings:
    get:
      description: "Get the languages for which [stop words are turned off](#tag/Dictionaries/operation/setDictionarySettings)."
      operationId: getDictionarySettings
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDictionarySettingsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get stop word settings.
      tags:
      - search
    put:
      description: Set stop word settings for a specific language.
      operationId: setDictionarySettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dictionarySettingsParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Set stop word settings.
      tags:
      - search
  /1/dictionaries/*/languages:
    get:
      description: "Lists Algolia's [supported languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/)\
        \ and any customizations applied to each language's [stop word](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-stop-words/),\
        \ [plural](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/),\
        \ and [segmentation (compound)](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/)\
        \ features."
      operationId: getDictionaryLanguages
      responses:
        "200":
          content:
            application/json:
              schema:
                additionalProperties:
                  $ref: '#/components/schemas/languages'
                title: getDictionaryLanguagesResponse
                type: object
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: List available languages.
      tags:
      - search
  /1/clusters/mapping:
    get:
      description: |
        List the userIDs assigned to a multi-cluster application.
        Since it can take up to a few seconds to get the data from the different clusters, the response isn't real-time.
      operationId: listUserIds
      parameters:
      - description: |
          Returns the requested page number. The page size is determined by the `hitsPerPage` parameter. You can see the number of available pages in the `nbPages` response attribute. When `page` is null, the API response is not paginated.
        explode: true
        in: query
        name: page
        required: false
        schema:
          minimum: 0
          nullable: true
          type: integer
        style: form
      - description: Maximum number of hits per page.
        explode: true
        in: query
        name: hitsPerPage
        required: false
        schema:
          default: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listUserIdsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: List userIDs.
      tags:
      - search
    post:
      description: |
        Assign or move a user ID to a cluster.
        The time it takes to move a user is proportional to the amount of data linked to the user ID.
      operationId: assignUserId
      parameters:
      - description: userID to assign.
        explode: false
        in: header
        name: X-Algolia-User-ID
        required: true
        schema:
          pattern: "^[a-zA-Z0-9 \\-*.]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/assignUserIdParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Assign or move a user ID.
      tags:
      - search
  /1/clusters/mapping/batch:
    post:
      description: |
        Assign multiple user IDs to a cluster.
        **You can't _move_ users with this operation.**.
      operationId: batchAssignUserIds
      parameters:
      - description: userID to assign.
        explode: false
        in: header
        name: X-Algolia-User-ID
        required: true
        schema:
          pattern: "^[a-zA-Z0-9 \\-*.]+$"
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/batchAssignUserIdsParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Batch assign userIDs.
      tags:
      - search
  /1/clusters/mapping/top:
    get:
      description: |
        Get the IDs of the 10 users with the highest number of records per cluster.
        Since it can take up to a few seconds to get the data from the different clusters, the response isn't real-time.
      operationId: getTopUserIds
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTopUserIdsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get top userID.
      tags:
      - search
  /1/clusters/mapping/{userID}:
    delete:
      description: Remove a userID and its associated data from the multi-clusters.
      operationId: removeUserId
      parameters:
      - description: userID to assign.
        explode: false
        in: path
        name: userID
        required: true
        schema:
          pattern: "^[a-zA-Z0-9 \\-*.]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/removeUserIdResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Remove userID.
      tags:
      - search
    get:
      description: |
        Returns the userID data stored in the mapping.
        Since it can take up to a few seconds to get the data from the different clusters, the response isn't real-time.
      operationId: getUserId
      parameters:
      - description: userID to assign.
        explode: false
        in: path
        name: userID
        required: true
        schema:
          pattern: "^[a-zA-Z0-9 \\-*.]+$"
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userId'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get userID.
      tags:
      - search
  /1/clusters:
    get:
      description: List the available clusters in a multi-cluster setup.
      operationId: listClusters
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listClustersResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: List clusters.
      tags:
      - search
  /1/clusters/mapping/search:
    post:
      description: "Since it can take up to a few seconds to get the data from the\
        \ different clusters, the response isn't real-time.\nTo ensure rapid updates,\
        \ the user IDs index isn't built at the same time as the mapping. Instead,\
        \ it's built every 12 hours, at the same time as the update of user ID usage.\
        \ For example, if you add or move a user ID, the search will show an old value\
        \ until the next time the mapping is rebuilt (every 12 hours). \n"
      operationId: searchUserIds
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/searchUserIdsParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/searchUserIdsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Search for a user ID.
      tags:
      - search
      x-use-read-transporter: true
      x-cacheable: true
  /1/clusters/mapping/pending:
    get:
      description: |
        To determine when the time-consuming process of creating a large batch of users or migrating users from one cluster to another is complete, this operation retrieves the status of the process.
      operationId: hasPendingMappings
      parameters:
      - description: Indicates whether to include the cluster's pending mapping state
          in the response.
        explode: true
        in: query
        name: getClusters
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/hasPendingMappingsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get migration and user mapping status.
      tags:
      - search
  /1/security/sources:
    get:
      description: Get all allowed sources (IP addresses).
      operationId: getSources
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/sources'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Get all allowed IP addresses.
      tags:
      - search
    put:
      description: Replace all allowed sources.
      operationId: replaceSources
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/sources'
        description: Allowed sources.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/replaceSourceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Replace all sources.
      tags:
      - search
  /1/security/sources/append:
    post:
      description: Add a source to the list of allowed sources.
      operationId: appendSource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/source'
        description: Source to add.
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/createdAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Add a source.
      tags:
      - search
  /1/security/sources/{source}:
    delete:
      description: Remove a source from the list of allowed sources.
      operationId: deleteSource
      parameters:
      - description: IP address range of the source.
        explode: false
        in: path
        name: source
        required: true
        schema:
          example: 10.0.0.1/32
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteSourceResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Remove a source.
      tags:
      - search
  /1/logs:
    get:
      description: |
        The request must be authenticated by an API key with the [`logs` ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl).
        Logs are held for the last seven days. There's also a logging limit of 1,000 API calls per server.
        This request counts towards your [operations quota](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-) but doesn't appear in the logs itself.
        > **Note**: To fetch the logs for a Distributed Search Network (DSN) cluster, target the [DSN's endpoint](https://www.algolia.com/doc/guides/scaling/distributed-search-network-dsn/#accessing-dsn-servers).
      operationId: getLogs
      parameters:
      - description: First log entry to retrieve. Sorted by decreasing date with 0
          being the most recent.
        explode: true
        in: query
        name: offset
        required: false
        schema:
          default: 0
          type: integer
        style: form
      - description: Maximum number of entries to retrieve.
        explode: true
        in: query
        name: length
        required: false
        schema:
          default: 10
          maximum: 1000
          type: integer
        style: form
      - description: "Index for which log entries should be retrieved. When omitted,\
          \ log entries are retrieved for all indices."
        example: products
        explode: true
        in: query
        name: indexName
        required: false
        schema:
          nullable: true
          type: string
        style: form
      - description: "Type of log entries to retrieve. When omitted, all log entries\
          \ are retrieved."
        explode: true
        in: query
        name: type
        required: false
        schema:
          $ref: '#/components/schemas/logType'
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getLogsResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Return the latest log entries.
      tags:
      - search
  /1/indexes/{indexName}/task/{taskID}:
    get:
      description: "Some operations, such as copying an index, will respond with a\
        \ `taskID` value. Use this value here to check the status of that task."
      operationId: getTask
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      - description: Unique task identifier.
        explode: false
        in: path
        name: taskID
        required: true
        schema:
          example: 1506303845001
          format: int64
          type: integer
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTaskResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: Check a task's status.
      tags:
      - search
  /1/indexes/{indexName}/operation:
    post:
      description: |-
        This `operation`, _copy_ or _move_, will copy or move a source index's (`IndexName`) records, settings, synonyms, and rules to a `destination` index.
        If the destination index exists, it will be replaced, except for index-specific API keys and analytics data.
        If the destination index doesn't exist, it will be created.

        The choice between moving or copying an index depends on your needs. Choose:

        - **Move** to rename an index.
        - **Copy** to create a new index with the same records and configuration as an existing one.

        > **Note**: When considering copying or moving, be aware of the [rate limitations](https://www.algolia.com/doc/guides/scaling/algolia-service-limits/#application-record-and-index-limits) on these processes and the [impact on your analytics data](https://www.algolia.com/doc/guides/sending-and-managing-data/manage-indices-and-apps/manage-indices/concepts/indices-analytics/).
      operationId: operationIndex
      parameters:
      - description: Index on which to perform the request.
        explode: false
        in: path
        name: indexName
        required: true
        schema:
          example: myIndexName
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/operationIndexParams'
        required: true
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/updatedAtResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: "Copy, move, or rename an index."
      tags:
      - search
  /1/indexes:
    get:
      description: List indices in an Algolia application.
      operationId: listIndices
      parameters:
      - description: |
          Returns the requested page number. The page size is determined by the `hitsPerPage` parameter. You can see the number of available pages in the `nbPages` response attribute. When `page` is null, the API response is not paginated.
        explode: true
        in: query
        name: page
        required: false
        schema:
          minimum: 0
          nullable: true
          type: integer
        style: form
      - description: Maximum number of hits per page.
        explode: true
        in: query
        name: hitsPerPage
        required: false
        schema:
          default: 100
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/listIndicesResponse'
          description: OK
        "400":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Bad request or request arguments.
        "402":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: This feature is not enabled on your Algolia account.
        "403":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Method not allowed with this API key.
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorBase'
          description: Index not found.
      summary: List indices.
      tags:
      - search
components:
  parameters:
    PathInPath:
      description: "Path of the endpoint, anything after \"/1\" must be specified."
      explode: false
      in: path
      name: path
      required: true
      schema:
        example: /keys
        type: string
      style: simple
    Parameters:
      description: Query parameters to apply to the current query.
      explode: true
      in: query
      name: parameters
      required: false
      schema:
        additionalProperties: true
        type: object
      style: form
    IndexName:
      description: Index on which to perform the request.
      explode: false
      in: path
      name: indexName
      required: true
      schema:
        example: myIndexName
        type: string
      style: simple
    ObjectID:
      description: Unique record (object) identifier.
      explode: false
      in: path
      name: objectID
      required: true
      schema:
        example: "123"
        type: string
      style: simple
    ForwardToReplicas:
      description: Indicates whether changed index settings are forwarded to the replica
        indices.
      explode: true
      in: query
      name: forwardToReplicas
      required: false
      schema:
        type: boolean
      style: form
    parameters_ObjectID:
      description: Unique identifier of a synonym object.
      explode: false
      in: path
      name: objectID
      required: true
      schema:
        example: synonymID
        type: string
      style: simple
    ReplaceExistingSynonyms:
      description: Indicates whether to replace all synonyms in the index with the
        ones sent with this request.
      explode: true
      in: query
      name: replaceExistingSynonyms
      required: false
      schema:
        type: boolean
      style: form
    Type:
      description: "Search for specific [types of synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#the-different-types-of-synonyms)."
      explode: true
      in: query
      name: type
      required: false
      schema:
        $ref: '#/components/schemas/SynonymType'
      style: form
    PageDefault0:
      description: |
        Returns the requested page number (the first page is 0). Page size is set by `hitsPerPage`. When null, there's no pagination.
      explode: true
      in: query
      name: page
      required: false
      schema:
        default: 0
        minimum: 0
        nullable: true
        type: integer
      style: form
    HitsPerPage:
      description: Maximum number of hits per page.
      explode: true
      in: query
      name: hitsPerPage
      required: false
      schema:
        default: 100
        type: integer
      style: form
    KeyString:
      description: API key.
      explode: false
      in: path
      name: key
      required: true
      schema:
        example: YourAPIKey
        type: string
      style: simple
    ObjectIDRule:
      description: Unique identifier of a rule object.
      example: a-rule-id
      explode: false
      in: path
      name: objectID
      required: true
      schema:
        type: string
      style: simple
    ClearExistingRules:
      description: Indicates whether existing rules should be deleted before adding
        this batch.
      explode: true
      in: query
      name: clearExistingRules
      required: false
      schema:
        type: boolean
      style: form
    DictionaryName:
      description: Dictionary to search in.
      explode: false
      in: path
      name: dictionaryName
      required: true
      schema:
        $ref: '#/components/schemas/dictionaryType'
      style: simple
    Page:
      description: |
        Returns the requested page number. The page size is determined by the `hitsPerPage` parameter. You can see the number of available pages in the `nbPages` response attribute. When `page` is null, the API response is not paginated.
      explode: true
      in: query
      name: page
      required: false
      schema:
        minimum: 0
        nullable: true
        type: integer
      style: form
    UserIDInHeader:
      description: userID to assign.
      explode: false
      in: header
      name: X-Algolia-User-ID
      required: true
      schema:
        pattern: "^[a-zA-Z0-9 \\-*.]+$"
        type: string
      style: simple
    UserIDInPath:
      description: userID to assign.
      explode: false
      in: path
      name: userID
      required: true
      schema:
        pattern: "^[a-zA-Z0-9 \\-*.]+$"
        type: string
      style: simple
  responses:
    BadRequest:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
      description: Bad request or request arguments.
    FeatureNotEnabled:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
      description: This feature is not enabled on your Algolia account.
    MethodNotAllowed:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
      description: Method not allowed with this API key.
    IndexNotFound:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
      description: Index not found.
    DeletedAt:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/deletedAtResponse'
      description: OK
    UpdatedAtWithObjectId:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updatedAtWithObjectIdResponse'
      description: OK
    UpdatedAt:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/updatedAtResponse'
      description: OK
    CreatedAt:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/createdAtResponse'
      description: OK
  schemas:
    ErrorBase:
      additionalProperties: true
      description: Error.
      properties:
        message:
          example: Invalid Application-Id or API-Key
          type: string
      type: object
    paramsAsString:
      default: ""
      description: Search parameters as a URL-encoded query string.
      example: hitsPerPage=2&getRankingInfo=1
      type: string
    searchParamsString:
      additionalProperties: false
      properties:
        params:
          default: ""
          description: Search parameters as a URL-encoded query string.
          example: hitsPerPage=2&getRankingInfo=1
          type: string
      type: object
      x-discriminator-fields:
      - params
    query:
      default: ""
      description: Text to search for in an index.
      type: string
      x-categories:
      - Search
    searchParamsQuery:
      additionalProperties: false
      properties:
        query:
          default: ""
          description: Text to search for in an index.
          type: string
          x-categories:
          - Search
      type: object
    filters:
      default: ""
      description: |
        [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) the query with numeric, facet, or tag filters.
      example: (category:Book OR category:Ebook) AND _tags:published
      type: string
      x-categories:
      - Filtering
    searchFiltersArrayString:
      items:
        type: string
      type: array
    mixedSearchFilters:
      oneOf:
      - $ref: '#/components/schemas/searchFiltersArrayString'
      - type: string
    listOfSearchFilters:
      items:
        $ref: '#/components/schemas/mixedSearchFilters'
      type: array
    facetFilters:
      description: |
        [Filter hits by facet value](https://www.algolia.com/doc/api-reference/api-parameters/facetFilters/).
      example:
      - category:Book
      - author:John Doe
      oneOf:
      - $ref: '#/components/schemas/listOfSearchFilters'
      - type: string
      x-categories:
      - Filtering
    optionalFilters:
      description: "Create filters to boost or demote records. \n\nRecords that match\
        \ the filter are ranked higher for positive and lower for negative optional\
        \ filters. In contrast to regular filters, records that don't match the optional\
        \ filter are still included in the results, only their ranking is affected.\n"
      example:
      - category:Book
      - author:John Doe
      oneOf:
      - $ref: '#/components/schemas/listOfSearchFilters'
      - type: string
      x-categories:
      - Filtering
    numericFilters:
      description: |
        [Filter on numeric attributes](https://www.algolia.com/doc/api-reference/api-parameters/numericFilters/).
      example:
      - - inStock = 1
        - deliveryDate < 1441755506
      - price < 1000
      oneOf:
      - $ref: '#/components/schemas/listOfSearchFilters'
      - type: string
      x-categories:
      - Filtering
    tagFilters:
      description: |
        [Filter hits by tags](https://www.algolia.com/doc/api-reference/api-parameters/tagFilters/).
      example:
      - - Book
        - Movie
      - SciFi
      oneOf:
      - $ref: '#/components/schemas/listOfSearchFilters'
      - type: string
      x-categories:
      - Filtering
    page:
      default: 0
      description: "Page to retrieve (the first page is `0`, not `1`)."
      type: integer
      x-categories:
      - Pagination
    aroundLatLng:
      default: ""
      description: "Search for entries [around a central location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point),\
        \ enabling a geographical search within a circular area."
      example: "40.71,-74.01"
      type: string
      x-categories:
      - Geo-Search
    aroundLatLngViaIP:
      default: false
      description: Search for entries around a location. The location is automatically
        computed from the requester's IP address.
      type: boolean
      x-categories:
      - Geo-Search
    aroundRadiusAll:
      enum:
      - all
      type: string
    aroundRadius:
      description: |
        [Maximum radius](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#increase-the-search-radius) for a geographical search (in meters).
      oneOf:
      - minimum: 1
        type: integer
      - $ref: '#/components/schemas/aroundRadiusAll'
      x-categories:
      - Geo-Search
    aroundPrecisionFromValue:
      description: "Precision of a geographical search (in meters), to [group results\
        \ that are more or less the same distance from a central point](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/in-depth/geo-ranking-precision/)."
      items:
        $ref: '#/components/schemas/aroundPrecisionFromValue_inner'
      type: array
    aroundPrecision:
      description: "Precision of a geographical search (in meters), to [group results\
        \ that are more or less the same distance from a central point](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/in-depth/geo-ranking-precision/)."
      oneOf:
      - default: 10
        type: integer
      - $ref: '#/components/schemas/aroundPrecisionFromValue'
      x-categories:
      - Geo-Search
    insideBoundingBox:
      description: "Search inside a [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)\
        \ (in geographical coordinates)."
      example:
      - - 47.3165
        - 4.9665
        - 47.3424
        - 5.0201
      - - 40.9234
        - 2.1185
        - 38.643
        - 1.9916
      items:
        items:
          format: double
          type: number
        type: array
      type: array
      x-categories:
      - Geo-Search
    insidePolygon:
      description: "Search inside a [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)\
        \ (in geographical coordinates)."
      example:
      - - 47.3165
        - 4.9665
        - 47.3424
        - 5.0201
        - 47.32
        - 4.9
      - - 40.9234
        - 2.1185
        - 38.643
        - 1.9916
        - 39.2587
        - 2.0104
      items:
        items:
          format: double
          type: number
        type: array
      type: array
      x-categories:
      - Geo-Search
    baseSearchParamsWithoutQuery:
      additionalProperties: false
      properties:
        similarQuery:
          default: ""
          description: Overrides the query parameter and performs a more generic search.
          type: string
          x-categories:
          - Search
        filters:
          default: ""
          description: |
            [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) the query with numeric, facet, or tag filters.
          example: (category:Book OR category:Ebook) AND _tags:published
          type: string
          x-categories:
          - Filtering
        facetFilters:
          $ref: '#/components/schemas/facetFilters'
        optionalFilters:
          $ref: '#/components/schemas/optionalFilters'
        numericFilters:
          $ref: '#/components/schemas/numericFilters'
        tagFilters:
          $ref: '#/components/schemas/tagFilters'
        sumOrFiltersScores:
          default: false
          description: |
            Determines how to calculate [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).
            If `false`, maximum score is kept.
            If `true`, score is summed.
          type: boolean
          x-categories:
          - Filtering
        restrictSearchableAttributes:
          default: []
          description: "Restricts a query to only look at a subset of your [searchable\
            \ attributes](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/)."
          example:
          - title
          - author
          items:
            type: string
          type: array
          x-categories:
          - Filtering
        facets:
          default: []
          description: "Returns [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts),\
            \ their facet values, and the number of matching facet values."
          items:
            type: string
          type: array
          x-categories:
          - Faceting
        facetingAfterDistinct:
          default: false
          description: |
            Forces faceting to be applied after [de-duplication](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/) (with the distinct feature). Alternatively, the `afterDistinct` [modifier](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers) of `attributesForFaceting` allows for more granular control.
          type: boolean
          x-categories:
          - Faceting
        page:
          default: 0
          description: "Page to retrieve (the first page is `0`, not `1`)."
          type: integer
          x-categories:
          - Pagination
        offset:
          description: |
            Specifies the offset of the first hit to return.
            > **Note**: Using `page` and `hitsPerPage` is the recommended method for [paging results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/). However, you can use `offset` and `length` to implement [an alternative approach to paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
          type: integer
          x-categories:
          - Pagination
        length:
          description: |
            Sets the number of hits to retrieve (for use with `offset`).
            > **Note**: Using `page` and `hitsPerPage` is the recommended method for [paging results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/). However, you can use `offset` and `length` to implement [an alternative approach to paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
          maximum: 1000
          minimum: 1
          type: integer
          x-categories:
          - Pagination
        aroundLatLng:
          default: ""
          description: "Search for entries [around a central location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point),\
            \ enabling a geographical search within a circular area."
          example: "40.71,-74.01"
          type: string
          x-categories:
          - Geo-Search
        aroundLatLngViaIP:
          default: false
          description: Search for entries around a location. The location is automatically
            computed from the requester's IP address.
          type: boolean
          x-categories:
          - Geo-Search
        aroundRadius:
          $ref: '#/components/schemas/aroundRadius'
        aroundPrecision:
          $ref: '#/components/schemas/aroundPrecision'
        minimumAroundRadius:
          description: Minimum radius (in meters) used for a geographical search when
            `aroundRadius` isn't set.
          minimum: 1
          type: integer
          x-categories:
          - Geo-Search
        insideBoundingBox:
          description: "Search inside a [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)\
            \ (in geographical coordinates)."
          example:
          - - 47.3165
            - 4.9665
            - 47.3424
            - 5.0201
          - - 40.9234
            - 2.1185
            - 38.643
            - 1.9916
          items:
            items:
              format: double
              type: number
            type: array
          type: array
          x-categories:
          - Geo-Search
        insidePolygon:
          description: "Search inside a [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)\
            \ (in geographical coordinates)."
          example:
          - - 47.3165
            - 4.9665
            - 47.3424
            - 5.0201
            - 47.32
            - 4.9
          - - 40.9234
            - 2.1185
            - 38.643
            - 1.9916
            - 39.2587
            - 2.0104
          items:
            items:
              format: double
              type: number
            type: array
          type: array
          x-categories:
          - Geo-Search
        naturalLanguages:
          default: []
          description: "Changes the default values of parameters that work best for\
            \ a natural language query, such as `ignorePlurals`, `removeStopWords`,\
            \ `removeWordsIfNoResults`, `analyticsTags`, and `ruleContexts`. These\
            \ parameters work well together when the query consists of fuller natural\
            \ language strings instead of keywords, for example when processing voice\
            \ search queries."
          items:
            type: string
          type: array
          x-categories:
          - Languages
        ruleContexts:
          default: []
          description: "Assigns [rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context)\
            \ to search queries."
          items:
            type: string
          type: array
          x-categories:
          - Rules
        personalizationImpact:
          default: 100
          description: "Defines how much [Personalization affects results](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact)."
          type: integer
          x-categories:
          - Personalization
        userToken:
          description: "Associates a [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/)\
            \ with the current search."
          example: "123456"
          type: string
          x-categories:
          - Personalization
        getRankingInfo:
          default: false
          description: "Incidates whether the search response includes [detailed ranking\
            \ information](https://www.algolia.com/doc/guides/building-search-ui/going-further/backend-search/in-depth/understanding-the-api-response/#ranking-information)."
          type: boolean
          x-categories:
          - Advanced
        explain:
          default: []
          description: Enriches the API's response with information about how the
            query was processed.
          items:
            type: string
          type: array
          x-categories:
          - Advanced
        synonyms:
          default: true
          description: Whether to take into account an index's synonyms for a particular
            search.
          type: boolean
          x-categories:
          - Advanced
        clickAnalytics:
          default: false
          description: "Indicates whether a query ID parameter is included in the\
            \ search response. This is required for [tracking click and conversion\
            \ events](https://www.algolia.com/doc/guides/sending-events/concepts/event-types/#events-related-to-algolia-requests)."
          type: boolean
          x-categories:
          - Analytics
        analytics:
          default: true
          description: "Indicates whether this query will be included in [analytics](https://www.algolia.com/doc/guides/search-analytics/guides/exclude-queries/)."
          type: boolean
          x-categories:
          - Analytics
        analyticsTags:
          default: []
          description: "Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/)."
          items:
            type: string
          type: array
          x-categories:
          - Analytics
        percentileComputation:
          default: true
          description: Whether to include or exclude a query from the processing-time
            percentile computation.
          type: boolean
          x-categories:
          - Advanced
        enableABTest:
          default: true
          description: Incidates whether this search will be considered in A/B testing.
          type: boolean
          x-categories:
          - Advanced
      type: object
    baseSearchParams:
      allOf:
      - $ref: '#/components/schemas/searchParamsQuery'
      - $ref: '#/components/schemas/baseSearchParamsWithoutQuery'
    hitsPerPage:
      default: 20
      description: Number of hits per page.
      maximum: 1000
      minimum: 1
      type: integer
      x-categories:
      - Pagination
    typoToleranceEnum:
      enum:
      - min
      - strict
      type: string
    typoTolerance:
      description: "Controls whether [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/)\
        \ is enabled and how it is applied."
      oneOf:
      - default: true
        type: boolean
      - $ref: '#/components/schemas/typoToleranceEnum'
      x-categories:
      - Typos
    ignorePlurals:
      description: |
        Treats singular, plurals, and other forms of declensions as matching terms.
        `ignorePlurals` is used in conjunction with the `queryLanguages` setting.
        _list_: language ISO codes for which ignoring plurals should be enabled. This list will override any values that you may have set in `queryLanguages`. _true_: enables the ignore plurals feature, where singulars and plurals are considered equivalent ("foot" = "feet"). The languages supported here are either [every language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) (this is the default) or those set by `queryLanguages`. _false_: turns off the ignore plurals feature, so that singulars and plurals aren't considered to be the same ("foot" will not find "feet").
      example:
      - ca
      - es
      oneOf:
      - items:
          type: string
        type: array
      - default: false
        type: boolean
      x-categories:
      - Languages
    removeStopWords:
      description: |
        Removes stop (common) words from the query before executing it.
        `removeStopWords` is used in conjunction with the `queryLanguages` setting.
        _list_: language ISO codes for which stop words should be enabled. This list will override any values that you may have set in `queryLanguages`. _true_: enables the stop words feature, ensuring that stop words are removed from consideration in a search. The languages supported here are either [every language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) (this is the default) or those set by `queryLanguages`. _false_: turns off the stop words feature, allowing stop words to be taken into account in a search.
      example:
      - ca
      - es
      oneOf:
      - items:
          type: string
        type: array
      - default: false
        type: boolean
      x-categories:
      - Languages
    queryType:
      default: prefixLast
      description: "Determines how query words are [interpreted as prefixes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/prefix-searching/)."
      enum:
      - prefixLast
      - prefixAll
      - prefixNone
      type: string
      x-categories:
      - Query strategy
    removeWordsIfNoResults:
      default: none
      description: "Strategy to [remove words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/in-depth/why-use-remove-words-if-no-results/)\
        \ from the query when it doesn't match any hits."
      enum:
      - none
      - lastWords
      - firstWords
      - allOptional
      example: firstWords
      type: string
      x-categories:
      - Query strategy
    mode:
      default: keywordSearch
      description: Search mode the index will use to query for results.
      enum:
      - neuralSearch
      - keywordSearch
      type: string
      x-categories:
      - Query strategy
    semanticSearch:
      description: |
        Settings for the semantic search part of NeuralSearch. Only used when `mode` is _neuralSearch_.
      properties:
        eventSources:
          description: "Indices from which to collect click and conversion events.\
            \ If null, the current index and replica group will be used as the event\
            \ source."
          items:
            type: string
          nullable: true
          type: array
      type: object
    exactOnSingleWordQuery:
      default: attribute
      description: "Determines how the [Exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes)\
        \ is computed when the query contains only one word."
      enum:
      - attribute
      - none
      - word
      type: string
      x-categories:
      - Query strategy
    alternativesAsExact:
      enum:
      - ignorePlurals
      - singleWordSynonym
      - multiWordsSynonym
      type: string
      x-categories:
      - Query strategy
    advancedSyntaxFeatures:
      enum:
      - exactPhrase
      - excludeWords
      type: string
      x-categories:
      - Query strategy
    distinct:
      description: "Enables [deduplication or grouping of results (Algolia's _distinct_\
        \ feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature))."
      example: 1
      oneOf:
      - type: boolean
      - default: 0
        maximum: 4
        minimum: 0
        type: integer
      x-categories:
      - Advanced
    maxFacetHits:
      default: 10
      description: "Maximum number of facet hits to return when [searching for facet\
        \ values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values)."
      maximum: 100
      type: integer
      x-categories:
      - Advanced
    order:
      description: Pinned order of facet lists.
      items:
        type: string
      type: array
    facets:
      additionalProperties: false
      description: Ordering of facets (widgets).
      properties:
        order:
          description: Pinned order of facet lists.
          items:
            type: string
          type: array
      type: object
    sortRemainingBy:
      description: |
        How to display the remaining items:

          - `count`: facet count (descending).
          - `alpha`: alphabetical (ascending).
          - `hidden`: show only pinned values.
      enum:
      - count
      - alpha
      - hidden
      type: string
    value:
      additionalProperties: false
      properties:
        order:
          description: Pinned order of facet lists.
          items:
            type: string
          type: array
        sortRemainingBy:
          $ref: '#/components/schemas/sortRemainingBy'
      type: object
    values:
      additionalProperties:
        $ref: '#/components/schemas/value'
      description: Ordering of facet values within an individual facet.
      type: object
    facetOrdering:
      additionalProperties: false
      description: Defines the ordering of facets (widgets).
      properties:
        facets:
          $ref: '#/components/schemas/facets'
        values:
          additionalProperties:
            $ref: '#/components/schemas/value'
          description: Ordering of facet values within an individual facet.
          type: object
      type: object
    renderingContent:
      additionalProperties: false
      description: "Extra content for the search UI, for example, to control the [ordering\
        \ and display of facets](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/merchandising-facets/#merchandise-facets-and-their-values-in-the-manual-editor).\
        \ You can set a default value and dynamically override it with [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/)."
      properties:
        facetOrdering:
          $ref: '#/components/schemas/facetOrdering'
      type: object
      x-categories:
      - Advanced
    reRankingApplyFilter:
      description: "When [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/)\
        \ is enabled, only records that match these filters will be affected by Dynamic\
        \ Re-Ranking."
      nullable: true
      oneOf:
      - $ref: '#/components/schemas/listOfSearchFilters'
      - type: string
        x-categories:
        - Filtering
    indexSettingsAsSearchParams:
      additionalProperties: false
      properties:
        attributesForFaceting:
          default: []
          description: |
            Attributes used for [faceting](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/) and the [modifiers](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers) that can be applied: `filterOnly`, `searchable`, and `afterDistinct`.
          example:
          - author
          - filterOnly(isbn)
          - searchable(edition)
          - afterDistinct(category)
          - afterDistinct(searchable(publisher))
          items:
            type: string
          type: array
          x-categories:
          - Faceting
        attributesToRetrieve:
          default:
          - '*'
          description: "Attributes to include in the API response. To reduce the size\
            \ of your response, you can retrieve only some of the attributes. By default,\
            \ the response includes all attributes."
          example:
          - author
          - title
          - content
          items:
            type: string
          type: array
          x-categories:
          - Attributes
        ranking:
          default:
          - typo
          - geo
          - words
          - filters
          - proximity
          - attribute
          - exact
          - custom
          description: "Determines the order in which Algolia [returns your results](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/)."
          items:
            type: string
          type: array
          x-categories:
          - Ranking
        customRanking:
          default: []
          description: |
            Specifies the [Custom ranking criterion](https://www.algolia.com/doc/guides/managing-results/must-do/custom-ranking/). Use the `asc` and `desc` modifiers to specify the ranking order: ascending or descending.
          example:
          - desc(popularity)
          - asc(price)
          items:
            type: string
          type: array
          x-categories:
          - Ranking
        relevancyStrictness:
          default: 100
          description: Relevancy threshold below which less relevant results aren't
            included in the results.
          example: 90
          type: integer
          x-categories:
          - Ranking
        attributesToHighlight:
          description: Attributes to highlight. Strings that match the search query
            in the attributes are highlighted by surrounding them with HTML tags (`highlightPreTag`
            and `highlightPostTag`).
          example:
          - author
          - title
          - content
          items:
            type: string
          type: array
          x-categories:
          - Highlighting and Snippeting
        attributesToSnippet:
          default: []
          description: |
            Attributes to _snippet_. 'Snippeting' is shortening the attribute to a certain number of words. If not specified, the attribute is shortened to the 10 words around the matching string but you can specify the number. For example: `body:20`.
          example:
          - content:80
          - description
          items:
            type: string
          type: array
          x-categories:
          - Highlighting and Snippeting
        highlightPreTag:
          default: <em>
          description: HTML string to insert before the highlighted parts in all highlight
            and snippet results.
          type: string
          x-categories:
          - Highlighting and Snippeting
        highlightPostTag:
          default: </em>
          description: HTML string to insert after the highlighted parts in all highlight
            and snippet results.
          type: string
          x-categories:
          - Highlighting and Snippeting
        snippetEllipsisText:
          default: …
          description: String used as an ellipsis indicator when a snippet is truncated.
          type: string
          x-categories:
          - Highlighting and Snippeting
        restrictHighlightAndSnippetArrays:
          default: false
          description: Restrict highlighting and snippeting to items that matched
            the query.
          type: boolean
          x-categories:
          - Highlighting and Snippeting
        hitsPerPage:
          default: 20
          description: Number of hits per page.
          maximum: 1000
          minimum: 1
          type: integer
          x-categories:
          - Pagination
        minWordSizefor1Typo:
          default: 4
          description: "Minimum number of characters a word in the query string must\
            \ contain to accept matches with [one typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos)."
          type: integer
          x-categories:
          - Typos
        minWordSizefor2Typos:
          default: 8
          description: "Minimum number of characters a word in the query string must\
            \ contain to accept matches with [two typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos)."
          type: integer
          x-categories:
          - Typos
        typoTolerance:
          $ref: '#/components/schemas/typoTolerance'
        allowTyposOnNumericTokens:
          default: true
          description: Whether to allow typos on numbers ("numeric tokens") in the
            query string.
          type: boolean
          x-categories:
          - Typos
        disableTypoToleranceOnAttributes:
          default: []
          description: "Attributes for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/)."
          example:
          - sku
          items:
            type: string
          type: array
          x-categories:
          - Typos
        ignorePlurals:
          $ref: '#/components/schemas/ignorePlurals'
        removeStopWords:
          $ref: '#/components/schemas/removeStopWords'
        keepDiacriticsOnCharacters:
          default: ""
          description: "Characters that the engine shouldn't automatically [normalize](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/)."
          example: øé
          type: string
          x-categories:
          - Languages
        queryLanguages:
          default: []
          description: "Sets your user's search language. This adjusts language-specific\
            \ settings and features such as `ignorePlurals`, `removeStopWords`, and\
            \ [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk)\
            \ word detection."
          example:
          - es
          items:
            type: string
          type: array
          x-categories:
          - Languages
        decompoundQuery:
          default: true
          description: |
            [Splits compound words](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words) into their component word parts in the query.
          type: boolean
          x-categories:
          - Languages
        enableRules:
          default: true
          description: "Incidates whether [Rules](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/)\
            \ are enabled."
          type: boolean
          x-categories:
          - Rules
        enablePersonalization:
          default: false
          description: "Incidates whether [Personalization](https://www.algolia.com/doc/guides/personalization/what-is-personalization/)\
            \ is enabled."
          type: boolean
          x-categories:
          - Personalization
        queryType:
          $ref: '#/components/schemas/queryType'
        removeWordsIfNoResults:
          $ref: '#/components/schemas/removeWordsIfNoResults'
        mode:
          $ref: '#/components/schemas/mode'
        semanticSearch:
          $ref: '#/components/schemas/semanticSearch'
        advancedSyntax:
          default: false
          description: "Enables the [advanced query syntax](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#advanced-syntax)."
          type: boolean
          x-categories:
          - Query strategy
        optionalWords:
          default: []
          description: "Words which should be considered [optional](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/empty-or-insufficient-results/#creating-a-list-of-optional-words)\
            \ when found in a query."
          example:
          - blue
          - iphone case
          items:
            type: string
          type: array
          x-categories:
          - Query strategy
        disableExactOnAttributes:
          default: []
          description: "Attributes for which you want to [turn off the exact ranking\
            \ criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes)."
          example:
          - description
          items:
            type: string
          type: array
          x-categories:
          - Query strategy
        exactOnSingleWordQuery:
          $ref: '#/components/schemas/exactOnSingleWordQuery'
        alternativesAsExact:
          default:
          - ignorePlurals
          - singleWordSynonym
          description: "Alternatives that should be considered an exact match by [the\
            \ exact ranking criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes)."
          items:
            $ref: '#/components/schemas/alternativesAsExact'
          type: array
          x-categories:
          - Query strategy
        advancedSyntaxFeatures:
          default:
          - exactPhrase
          - excludeWords
          description: Allows you to specify which advanced syntax features are active
            when `advancedSyntax` is enabled.
          items:
            $ref: '#/components/schemas/advancedSyntaxFeatures'
          type: array
          x-categories:
          - Query strategy
        distinct:
          $ref: '#/components/schemas/distinct'
        replaceSynonymsInHighlight:
          default: false
          description: Whether to highlight and snippet the original word that matches
            the synonym or the synonym itself.
          type: boolean
          x-categories:
          - Highlighting and Snippeting
        minProximity:
          default: 1
          description: "Precision of the [proximity ranking criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity)."
          maximum: 7
          minimum: 1
          type: integer
          x-categories:
          - Advanced
        responseFields:
          default: []
          description: Attributes to include in the API response for search and browse
            queries.
          items:
            type: string
          type: array
          x-categories:
          - Advanced
        maxFacetHits:
          default: 10
          description: "Maximum number of facet hits to return when [searching for\
            \ facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values)."
          maximum: 100
          type: integer
          x-categories:
          - Advanced
        maxValuesPerFacet:
          default: 100
          description: Maximum number of facet values to return for each facet.
          type: integer
          x-categories:
          - Faceting
        sortFacetValuesBy:
          default: count
          description: Controls how facet values are fetched.
          type: string
          x-categories:
          - Faceting
        attributeCriteriaComputedByMinProximity:
          default: false
          description: "When the [Attribute criterion is ranked above Proximity](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#attribute-and-proximity-combinations)\
            \ in your ranking formula, Proximity is used to select which searchable\
            \ attribute is matched in the Attribute ranking stage."
          type: boolean
          x-categories:
          - Advanced
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
        enableReRanking:
          default: true
          description: "Indicates whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/)."
          type: boolean
          x-categories:
          - Filtering
        reRankingApplyFilter:
          $ref: '#/components/schemas/reRankingApplyFilter'
      type: object
    searchParamsObject:
      allOf:
      - $ref: '#/components/schemas/baseSearchParams'
      - $ref: '#/components/schemas/indexSettingsAsSearchParams'
    searchParams:
      oneOf:
      - $ref: '#/components/schemas/searchParamsString'
      - $ref: '#/components/schemas/searchParamsObject'
    nbHits:
      description: Number of hits the search query matched.
      example: 20
      type: integer
    nbPages:
      description: Number of pages of results for the current query.
      example: 1
      type: integer
    RedirectRuleIndexMetadata:
      properties:
        source:
          description: Source index for the redirect rule.
          type: string
        dest:
          description: Destination index for the redirect rule.
          type: string
        reason:
          description: Reason for the redirect rule.
          type: string
        succeed:
          description: Redirect rule status.
          type: boolean
        data:
          $ref: '#/components/schemas/RedirectRuleIndexMetadata_data'
      required:
      - data
      - dest
      - reason
      - source
      - succeed
      type: object
    userData:
      default: {}
      description: Lets you store custom data in your indices.
      example:
        settingID: f2a7b51e3503acc6a39b3784ffb84300
        pluginVersion: 1.6.0
      x-categories:
      - Advanced
    baseSearchResponse:
      additionalProperties: true
      properties:
        abTestID:
          description: A/B test ID. This is only included in the response for indices
            that are part of an A/B test.
          type: integer
        abTestVariantID:
          description: Variant ID. This is only included in the response for indices
            that are part of an A/B test.
          minimum: 1
          type: integer
        aroundLatLng:
          description: Computed geographical location.
          example: "40.71,-74.01"
          pattern: "^(-?\\d+(\\.\\d+)?),\\s*(-?\\d+(\\.\\d+)?)$"
          type: string
        automaticRadius:
          description: Automatically-computed radius.
          type: string
        exhaustive:
          $ref: '#/components/schemas/exhaustive'
        exhaustiveFacetsCount:
          deprecated: true
          description: See the `facetsCount` field of the `exhaustive` object in the
            response.
          type: boolean
        exhaustiveNbHits:
          deprecated: true
          description: See the `nbHits` field of the `exhaustive` object in the response.
          type: boolean
        exhaustiveTypo:
          deprecated: true
          description: See the `typo` field of the `exhaustive` object in the response.
          type: boolean
        facets:
          additionalProperties:
            additionalProperties:
              type: integer
            type: object
          description: Mapping of each facet name to the corresponding facet counts.
          example:
            category:
              food: 1
              tech: 42
          title: facets
          type: object
        facets_stats:
          additionalProperties:
            $ref: '#/components/schemas/facetsStats'
          description: Statistics for numerical facets.
          title: facetsStats
          type: object
        hitsPerPage:
          default: 20
          description: Number of hits per page.
          maximum: 1000
          minimum: 1
          type: integer
          x-categories:
          - Pagination
        index:
          description: Index name used for the query.
          example: indexName
          type: string
        indexUsed:
          description: "Index name used for the query. During A/B testing, the targeted\
            \ index isn't always the index used by the query."
          example: indexNameAlt
          type: string
        message:
          description: Warnings about the query.
          type: string
        nbHits:
          description: Number of hits the search query matched.
          example: 20
          type: integer
        nbPages:
          description: Number of pages of results for the current query.
          example: 1
          type: integer
        nbSortedHits:
          description: Number of hits selected and sorted by the relevant sort algorithm.
          example: 20
          type: integer
        page:
          default: 0
          description: "Page to retrieve (the first page is `0`, not `1`)."
          type: integer
          x-categories:
          - Pagination
        parsedQuery:
          description: "Post-[normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean)\
            \ query string that will be searched."
          example: george clo
          type: string
        processingTimeMS:
          description: "Time the server took to process the request, in milliseconds."
          example: 20
          type: integer
        processingTimingsMS:
          description: "Experimental. List of processing steps and their times, in\
            \ milliseconds. You can use this list to investigate performance issues."
          type: object
        queryAfterRemoval:
          description: Markup text indicating which parts of the original query have
            been removed to retrieve a non-empty result set.
          type: string
        redirect:
          $ref: '#/components/schemas/redirect'
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
        serverTimeMS:
          description: "Time the server took to process the request, in milliseconds."
          example: 20
          type: integer
        serverUsed:
          description: Host name of the server that processed the request.
          example: c2-uk-3.algolia.net
          type: string
        userData:
          default: {}
          description: Lets you store custom data in your indices.
          example:
            settingID: f2a7b51e3503acc6a39b3784ffb84300
            pluginVersion: 1.6.0
          x-categories:
          - Advanced
      required:
      - hitsPerPage
      - nbHits
      - nbPages
      - page
      - processingTimeMS
      type: object
    objectID:
      description: Unique object identifier.
      example: product-1
      type: string
    highlightedValue:
      description: Markup text with `facetQuery` matches highlighted.
      example: <em>George</em> <em>Clo</em>oney
      type: string
    matchLevel:
      description: Indicates how well the attribute matched the search query.
      enum:
      - none
      - partial
      - full
      type: string
    highlightResultOption:
      additionalProperties: false
      description: Show highlighted section and words matched on a query.
      properties:
        value:
          description: Markup text with `facetQuery` matches highlighted.
          example: <em>George</em> <em>Clo</em>oney
          type: string
        matchLevel:
          $ref: '#/components/schemas/matchLevel'
        matchedWords:
          description: List of words from the query that matched the object.
          example:
          - action
          items:
            type: string
          type: array
        fullyHighlighted:
          description: Whether the entire attribute value is highlighted.
          type: boolean
      required:
      - matchLevel
      - matchedWords
      - value
      type: object
    highlightResult:
      oneOf:
      - $ref: '#/components/schemas/highlightResultOption'
      - items:
          $ref: '#/components/schemas/highlightResultOption'
        type: array
    highlightResultMap:
      additionalProperties:
        $ref: '#/components/schemas/highlightResult'
      description: Show highlighted section and words matched on a query.
      type: object
    snippetResultOption:
      additionalProperties: false
      description: Snippeted attributes show parts of the matched attributes. Only
        returned when attributesToSnippet is non-empty.
      properties:
        value:
          description: Markup text with `facetQuery` matches highlighted.
          example: <em>George</em> <em>Clo</em>oney
          type: string
        matchLevel:
          $ref: '#/components/schemas/matchLevel'
      required:
      - matchLevel
      - value
      type: object
    snippetResult:
      oneOf:
      - $ref: '#/components/schemas/snippetResultOption'
      - items:
          $ref: '#/components/schemas/snippetResultOption'
        type: array
    snippetResultMap:
      additionalProperties:
        $ref: '#/components/schemas/snippetResult'
      description: Snippeted attributes show parts of the matched attributes. Only
        returned when attributesToSnippet is non-empty.
      type: object
    matchedGeoLocation:
      properties:
        lat:
          description: Latitude of the matched location.
          format: double
          type: number
        lng:
          description: Longitude of the matched location.
          format: double
          type: number
        distance:
          description: Distance between the matched location and the search location
            (in meters).
          type: integer
      type: object
    personalization:
      properties:
        filtersScore:
          description: The score of the filters.
          type: integer
        rankingScore:
          description: The score of the ranking.
          type: integer
        score:
          description: The score of the event.
          type: integer
      type: object
    rankingInfo:
      additionalProperties: false
      properties:
        filters:
          description: This field is reserved for advanced usage.
          type: integer
        firstMatchedWord:
          description: Position of the most important matched attribute in the attributes
            to index list.
          type: integer
        geoDistance:
          description: "Distance between the geo location in the search query and\
            \ the best matching geo location in the record, divided by the geo precision\
            \ (in meters)."
          type: integer
        geoPrecision:
          description: "Precision used when computing the geo distance, in meters."
          type: integer
        matchedGeoLocation:
          $ref: '#/components/schemas/matchedGeoLocation'
        personalization:
          $ref: '#/components/schemas/personalization'
        nbExactWords:
          description: Number of exactly matched words.
          type: integer
        nbTypos:
          description: Number of typos encountered when matching the record.
          type: integer
        promoted:
          description: Present and set to true if a Rule promoted the hit.
          type: boolean
        proximityDistance:
          description: "When the query contains more than one word, the sum of the\
            \ distances between matched words (in meters)."
          type: integer
        userScore:
          description: "Custom ranking for the object, expressed as a single integer\
            \ value."
          type: integer
        words:
          description: "Number of matched words, including prefixes and typos."
          type: integer
        promotedByReRanking:
          description: Wether the record are promoted by the re-ranking strategy.
          type: boolean
      required:
      - filters
      - firstMatchedWord
      - geoDistance
      - nbExactWords
      - nbTypos
      - promoted
      - userScore
      - words
      type: object
    _distinctSeqID:
      type: integer
    hit:
      additionalProperties: true
      description: A single hit.
      properties:
        objectID:
          description: Unique object identifier.
          example: product-1
          type: string
        _highlightResult:
          additionalProperties:
            $ref: '#/components/schemas/highlightResult'
          description: Show highlighted section and words matched on a query.
          type: object
        _snippetResult:
          additionalProperties:
            $ref: '#/components/schemas/snippetResult'
          description: Snippeted attributes show parts of the matched attributes.
            Only returned when attributesToSnippet is non-empty.
          type: object
        _rankingInfo:
          $ref: '#/components/schemas/rankingInfo'
        _distinctSeqID:
          type: integer
      required:
      - objectID
      type: object
      x-is-generic: true
    searchHits:
      additionalProperties: true
      properties:
        hits:
          items:
            $ref: '#/components/schemas/hit'
          type: array
        query:
          default: ""
          description: Text to search for in an index.
          type: string
          x-categories:
          - Search
        params:
          description: URL-encoded string of all search parameters.
          example: query=a&hitsPerPage=20
          type: string
      required:
      - hits
      - params
      - query
      type: object
    searchResponse:
      additionalProperties: true
      allOf:
      - $ref: '#/components/schemas/baseSearchResponse'
      - $ref: '#/components/schemas/searchHits'
    indexName:
      description: Algolia index name.
      example: products
      type: string
    searchTypeDefault:
      default: default
      description: |
        - `default`: perform a search query - `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
      enum:
      - default
      type: string
    searchForHitsOptions:
      properties:
        indexName:
          description: Algolia index name.
          example: products
          type: string
        type:
          $ref: '#/components/schemas/searchTypeDefault'
      required:
      - indexName
      type: object
      x-is-SearchForHitsOptions: true
    SearchForHits:
      allOf:
      - $ref: '#/components/schemas/searchParams'
      - $ref: '#/components/schemas/searchForHitsOptions'
    facetQuery:
      default: ""
      description: Text to search inside the facet's values.
      example: george
      type: string
    searchTypeFacet:
      default: facet
      description: |
        - `default`: perform a search query - `facet` [searches for facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
      enum:
      - facet
      type: string
    searchForFacetsOptions:
      properties:
        facet:
          description: Facet name.
          type: string
        indexName:
          description: Algolia index name.
          example: products
          type: string
        facetQuery:
          default: ""
          description: Text to search inside the facet's values.
          example: george
          type: string
        maxFacetHits:
          default: 10
          description: "Maximum number of facet hits to return when [searching for\
            \ facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values)."
          maximum: 100
          type: integer
          x-categories:
          - Advanced
        type:
          $ref: '#/components/schemas/searchTypeFacet'
      required:
      - facet
      - indexName
      - type
      type: object
    SearchForFacets:
      allOf:
      - $ref: '#/components/schemas/searchParams'
      - $ref: '#/components/schemas/searchForFacetsOptions'
      x-discriminator-fields:
      - facet
      - type
    SearchQuery:
      oneOf:
      - $ref: '#/components/schemas/SearchForHits'
      - $ref: '#/components/schemas/SearchForFacets'
    searchStrategy:
      description: "- `none`: executes all queries. - `stopIfEnoughMatches`: executes\
        \ queries one by one, stopping further query execution as soon as a query\
        \ matches at least the `hitsPerPage` number of results. \n"
      enum:
      - none
      - stopIfEnoughMatches
      type: string
    searchForFacetValuesResponse:
      additionalProperties: false
      example:
        facetHits:
        - highlighted: <em>George</em> <em>Clo</em>oney
          count: 0
          value: Mobile phone
        - highlighted: <em>George</em> <em>Clo</em>oney
          count: 0
          value: Mobile phone
      properties:
        facetHits:
          items:
            $ref: '#/components/schemas/facetHits'
          type: array
      required:
      - facetHits
      type: object
      x-discriminator-fields:
      - facetHits
    searchResult:
      oneOf:
      - $ref: '#/components/schemas/searchResponse'
      - $ref: '#/components/schemas/searchForFacetValuesResponse'
    cursor:
      additionalProperties: false
      properties:
        cursor:
          description: |
            Cursor indicating the location to resume browsing from. Must match the value returned by the previous call.
            Pass this value to the subsequent browse call to get the next page of results.
            When the end of the index has been reached, `cursor` is absent from the response.
          example: jMDY3M2MwM2QwMWUxMmQwYWI0ZTN
          type: string
      type: object
    browseParamsObject:
      allOf:
      - $ref: '#/components/schemas/searchParamsObject'
      - $ref: '#/components/schemas/cursor'
    browseParams:
      oneOf:
      - $ref: '#/components/schemas/searchParamsString'
      - $ref: '#/components/schemas/browseParamsObject'
    browseResponse:
      allOf:
      - $ref: '#/components/schemas/baseSearchResponse'
      - $ref: '#/components/schemas/searchHits'
      - $ref: '#/components/schemas/cursor'
    taskID:
      description: |
        Unique identifier of a task.
        A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
      example: 1514562690001
      format: int64
      type: integer
    deletedAt:
      description: "Timestamp of deletion in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
        \ format."
      example: 2023-06-27T14:42:38.831Z
      type: string
    attribute:
      description: Value of the attribute to be updated.
      type: string
    updatedAt:
      description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
        \ format."
      example: 2023-07-04T12:49:15Z
      type: string
    deleteByParams:
      additionalProperties: false
      properties:
        facetFilters:
          $ref: '#/components/schemas/facetFilters'
        filters:
          default: ""
          description: |
            [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) the query with numeric, facet, or tag filters.
          example: (category:Book OR category:Ebook) AND _tags:published
          type: string
          x-categories:
          - Filtering
        numericFilters:
          $ref: '#/components/schemas/numericFilters'
        tagFilters:
          $ref: '#/components/schemas/tagFilters'
        aroundLatLng:
          default: ""
          description: "Search for entries [around a central location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point),\
            \ enabling a geographical search within a circular area."
          example: "40.71,-74.01"
          type: string
          x-categories:
          - Geo-Search
        aroundRadius:
          $ref: '#/components/schemas/aroundRadius'
        insideBoundingBox:
          description: "Search inside a [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)\
            \ (in geographical coordinates)."
          example:
          - - 47.3165
            - 4.9665
            - 47.3424
            - 5.0201
          - - 40.9234
            - 2.1185
            - 38.643
            - 1.9916
          items:
            items:
              format: double
              type: number
            type: array
          type: array
          x-categories:
          - Geo-Search
        insidePolygon:
          description: "Search inside a [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)\
            \ (in geographical coordinates)."
          example:
          - - 47.3165
            - 4.9665
            - 47.3424
            - 5.0201
            - 47.32
            - 4.9
          - - 40.9234
            - 2.1185
            - 38.643
            - 1.9916
            - 39.2587
            - 2.0104
          items:
            items:
              format: double
              type: number
            type: array
          type: array
          x-categories:
          - Geo-Search
      type: object
    builtInOperationType:
      description: Operation to apply to the attribute.
      enum:
      - Increment
      - Decrement
      - Add
      - Remove
      - AddUnique
      - IncrementFrom
      - IncrementSet
      type: string
    builtInOperation:
      additionalProperties: false
      description: "To update an attribute without pushing the entire record, you\
        \ can use these built-in operations."
      properties:
        _operation:
          $ref: '#/components/schemas/builtInOperationType'
        value:
          description: "Value that corresponds to the operation, for example an `Increment`\
            \ or `Decrement` step, `Add` or `Remove` value."
          type: string
      required:
      - _operation
      - value
      type: object
    attributeToUpdate:
      oneOf:
      - $ref: '#/components/schemas/attribute'
      - $ref: '#/components/schemas/builtInOperation'
    action:
      description: Type of batch operation.
      enum:
      - addObject
      - updateObject
      - partialUpdateObject
      - partialUpdateObjectNoCreate
      - deleteObject
      - delete
      - clear
      type: string
    objectIDs:
      description: Unique object (record) identifiers.
      example:
      - record-1
      - record-2
      items:
        type: string
      type: array
    baseIndexSettings:
      additionalProperties: false
      properties:
        replicas:
          default: []
          description: "Creates [replicas](https://www.algolia.com/doc/guides/managing-results/refine-results/sorting/in-depth/replicas/),\
            \ which are copies of a primary index with the same records but different\
            \ settings."
          example:
          - virtual(prod_products_price_asc)
          - dev_products_replica
          items:
            type: string
          type: array
          x-categories:
          - Ranking
        paginationLimitedTo:
          default: 1000
          description: Maximum number of hits accessible through pagination.
          example: 20
          type: integer
        unretrievableAttributes:
          default: []
          description: Attributes that can't be retrieved at query time.
          example:
          - popularity
          items:
            type: string
          type: array
          x-categories:
          - Attributes
        disableTypoToleranceOnWords:
          default: []
          description: "Words for which you want to turn off [typo tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/)."
          example:
          - wheel
          - 1X2BCD
          items:
            type: string
          type: array
          x-categories:
          - Typos
        attributesToTransliterate:
          description: "Attributes in your index to which [Japanese transliteration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#japanese-transliteration-and-type-ahead)\
            \ applies. This will ensure that words indexed in Katakana or Kanji can\
            \ also be searched in Hiragana."
          example:
          - name
          - description
          items:
            type: string
          type: array
          x-categories:
          - Languages
        camelCaseAttributes:
          default: []
          description: "Attributes on which to split [camel case](https://wikipedia.org/wiki/Camel_case)\
            \ words."
          example:
          - description
          items:
            type: string
          type: array
          x-categories:
          - Languages
        decompoundedAttributes:
          default: {}
          description: "Attributes in your index to which [word segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-segmentation/)\
            \ (decompounding) applies."
          example:
            de:
            - name
          type: object
          x-categories:
          - Languages
        indexLanguages:
          default: []
          description: "Set the languages of your index, for language-specific processing\
            \ steps such as [tokenization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/tokenization/)\
            \ and [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/)."
          example:
          - ja
          items:
            type: string
          type: array
          x-categories:
          - Languages
        disablePrefixOnAttributes:
          default: []
          description: "Attributes for which you want to turn off [prefix matching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/#adjusting-prefix-search)."
          example:
          - sku
          items:
            type: string
          type: array
          x-categories:
          - Query strategy
        allowCompressionOfIntegerArray:
          default: false
          description: |
            Incidates whether the engine compresses arrays with exclusively non-negative integers.
            When enabled, the compressed arrays may be reordered.
          type: boolean
          x-categories:
          - Performance
        numericAttributesForFiltering:
          default: []
          description: "Numeric attributes that can be used as [numerical filters](https://www.algolia.com/doc/guides/managing-results/rules/detecting-intent/how-to/applying-a-custom-filter-for-a-specific-query/#numerical-filters)."
          example:
          - quantity
          - popularity
          items:
            type: string
          type: array
          x-categories:
          - Performance
        separatorsToIndex:
          default: ""
          description: "Controls which separators are added to an Algolia index as\
            \ part of [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/#what-does-normalization-mean).\
            \ Separators are all non-letter characters except spaces and currency\
            \ characters, such as $€£¥."
          example: +#
          type: string
          x-categories:
          - Typos
        searchableAttributes:
          default: []
          description: |
            [Attributes used for searching](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/), including determining [if matches at the beginning of a word are important (ordered) or not (unordered)](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/how-to/configuring-searchable-attributes-the-right-way/#understanding-word-position).
          example:
          - "title,alternative_title"
          - author
          - unordered(text)
          - emails.personal
          items:
            type: string
          type: array
          x-categories:
          - Attributes
        userData:
          default: {}
          description: Lets you store custom data in your indices.
          example:
            settingID: f2a7b51e3503acc6a39b3784ffb84300
            pluginVersion: 1.6.0
          x-categories:
          - Advanced
        customNormalization:
          additionalProperties:
            additionalProperties:
              type: string
            type: object
          description: "A list of characters and their normalized replacements to\
            \ override Algolia's default [normalization](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/)."
          example: |
            {default: {'ä': 'ae', 'ü': 'ue'}}
          type: object
          x-categories:
          - Languages
        attributeForDistinct:
          description: "Name of the deduplication attribute to be used with Algolia's\
            \ [_distinct_ feature](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/#introducing-algolias-distinct-feature)."
          example: url
          type: string
      type: object
    indexSettings:
      allOf:
      - $ref: '#/components/schemas/baseIndexSettings'
      - $ref: '#/components/schemas/indexSettingsAsSearchParams'
      description: Algolia index settings.
    SynonymType:
      description: Synonym type.
      enum:
      - synonym
      - onewaysynonym
      - altcorrection1
      - altcorrection2
      - placeholder
      example: onewaysynonym
      type: string
    synonymHit:
      additionalProperties: false
      description: Synonym object.
      example:
        input: car
        corrections:
        - vehicle
        - auto
        synonyms:
        - vehicle
        - auto
        placeholder: <Street>
        replacements:
        - street
        - st
        type: onewaysynonym
        word: car
        objectID: synonymID
      properties:
        objectID:
          description: Unique identifier of a synonym object.
          example: synonymID
          type: string
        type:
          $ref: '#/components/schemas/SynonymType'
        synonyms:
          description: Words or phrases considered equivalent.
          example:
          - vehicle
          - auto
          items:
            type: string
          type: array
        input:
          description: "Word or phrase to appear in query strings (for [`onewaysynonym`s](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/one-way-synonyms/))."
          example: car
          type: string
        word:
          description: "Word or phrase to appear in query strings (for [`altcorrection1`\
            \ and `altcorrection2`](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-alternative-corrections/))."
          example: car
          type: string
        corrections:
          description: Words to be matched in records.
          example:
          - vehicle
          - auto
          items:
            type: string
          type: array
        placeholder:
          description: |
            [Placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/) to be put inside records.
          example: <Street>
          type: string
        replacements:
          description: "Query words that will match the [placeholder token](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/in-depth/synonyms-placeholders/)."
          example:
          - street
          - st
          items:
            type: string
          type: array
      required:
      - objectID
      - type
      type: object
    id:
      description: Unique identifier of a synonym object.
      example: "12"
      type: string
    synonymHits:
      description: Synonym objects.
      items:
        $ref: '#/components/schemas/synonymHit'
      type: array
    searchSynonymsResponse:
      additionalProperties: true
      example:
        hits:
        - input: car
          corrections:
          - vehicle
          - auto
          synonyms:
          - vehicle
          - auto
          placeholder: <Street>
          replacements:
          - street
          - st
          type: onewaysynonym
          word: car
          objectID: synonymID
        - input: car
          corrections:
          - vehicle
          - auto
          synonyms:
          - vehicle
          - auto
          placeholder: <Street>
          replacements:
          - street
          - st
          type: onewaysynonym
          word: car
          objectID: synonymID
        nbHits: 20
      properties:
        hits:
          description: Synonym objects.
          items:
            $ref: '#/components/schemas/synonymHit'
          type: array
        nbHits:
          description: Number of hits the search query matched.
          example: 20
          type: integer
      required:
      - hits
      - nbHits
      type: object
    keyString:
      description: API key.
      example: 13ad45b4d0a2f6ea65ecbddf6aa260f2
      type: string
    createdAtTimestamp:
      description: "Timestamp of creation in milliseconds in [Unix epoch time](https://wikipedia.org/wiki/Unix_time)."
      example: 1656345570000
      format: int64
      type: integer
    baseGetApiKeyResponse:
      additionalProperties: false
      properties:
        value:
          description: API key.
          example: 13ad45b4d0a2f6ea65ecbddf6aa260f2
          type: string
        createdAt:
          description: "Timestamp of creation in milliseconds in [Unix epoch time](https://wikipedia.org/wiki/Unix_time)."
          example: 1656345570000
          format: int64
          type: integer
      required:
      - createdAt
      - key
      type: object
    acl:
      description: |
        API key permissions:

        `addObject`: required to add or update records, copy or move an index.
        `analytics`: required to access the Analytics API.
        `browse`: required to view records
        `deleteIndex`: required to delete indices.
        `deleteObject`: required to delete records.
        `editSettings`: required to change index settings.
        `inference`: required to access the Inference API.
        `listIndexes`: required to list indices.
        `logs`: required to access logs of search and indexing operations.
        `recommendation`: required to access the Personalization and Recommend APIs.
        `search`: required to search records
        `seeUnretrievableAttributes`: required to retrieve [`unretrievableAttributes`](https://www.algolia.com/doc/api-reference/api-parameters/unretrievableAttributes/) for all operations that return records.
        `settings`: required to examine index settings.
      enum:
      - addObject
      - analytics
      - browse
      - deleteObject
      - deleteIndex
      - editSettings
      - inference
      - listIndexes
      - logs
      - personalization
      - recommendation
      - search
      - seeUnretrievableAttributes
      - settings
      - usage
      type: string
    apiKey:
      additionalProperties: false
      description: API key object.
      properties:
        acl:
          default: []
          description: |
            [Permissions](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl) associated with the key.
          example:
          - search
          - addObject
          items:
            $ref: '#/components/schemas/acl'
          type: array
        description:
          default: ""
          description: Description of an API key for you and your team members.
          example: Browse-restricted key
          type: string
        indexes:
          default: []
          description: |
            Restricts this API key to a list of indices or index patterns. If the list is empty, all indices are allowed.
            Specify either an exact index name or a pattern with a leading or trailing wildcard character (or both). For example:
            - `dev_*` matches all indices starting with "dev_" - `*_dev` matches all indices ending with "_dev" - `*_products_*` matches all indices containing "_products_".
          example:
          - dev_*
          - prod_products
          items:
            type: string
          type: array
        maxHitsPerQuery:
          default: 0
          description: |
            Maximum number of hits this API key can retrieve in one query. If zero, no limit is enforced.
            > **Note**: Use this parameter to protect you from third-party attempts to retrieve your entire content by massively querying the index.
          type: integer
        maxQueriesPerIPPerHour:
          default: 0
          description: |
            Maximum number of API calls per hour allowed from a given IP address or [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).
            Each time an API call is performed with this key, a check is performed. If there were more than the specified number of calls within the last hour, the API returns an error with the status code `429` (Too Many Requests).

            > **Note**: Use this parameter to protect you from third-party attempts to retrieve your entire content by massively querying the index.
          type: integer
        queryParameters:
          default: ""
          description: |
            Force some [query parameters](https://www.algolia.com/doc/api-reference/api-parameters/) to be applied for each query made with this API key.
            It's a URL-encoded query string.
          example: typoTolerance%3Dstrict%26ignorePlurals%3Dfalse%26filters%3Drights%3Apublic
          type: string
        referers:
          default: []
          description: |
            Restrict this API key to specific [referrers](https://www.algolia.com/doc/guides/security/api-keys/in-depth/api-key-restrictions/#http-referrers). If empty, all referrers are allowed.
            For example:
            - `https://algolia.com/*` matches all referrers starting with "https://algolia.com/" - `*.algolia.com` matches all referrers ending with ".algolia.com" - `*algolia.com*` allows everything in the domain "algolia.com".
          example:
          - '*algolia.com*'
          items:
            type: string
          type: array
        validity:
          default: 0
          description: |
            Validity duration of a key (in seconds).  The key will automatically be removed after this time has expired. The default value of 0 never expires.
            Short-lived API keys are useful to grant temporary access to your data. For example, in mobile apps, you can't [control when users update your app](https://www.algolia.com/doc/guides/security/security-best-practices/#use-secured-api-keys-in-mobile-apps). So instead of encoding keys into your app as you would for a web app, you should dynamically fetch them from your mobile app's backend.
          example: 86400
          type: integer
      required:
      - acl
      type: object
    getApiKeyResponse:
      allOf:
      - $ref: '#/components/schemas/baseGetApiKeyResponse'
      - $ref: '#/components/schemas/apiKey'
    createdAt:
      description: "Timestamp of creation in [ISO-8601](https://wikipedia.org/wiki/ISO_8601)\
        \ format."
      example: 2023-07-04T12:49:15Z
      type: string
    addApiKeyResponse:
      additionalProperties: false
      example:
        createdAt: 2023-07-04T12:49:15Z
        key: 13ad45b4d0a2f6ea65ecbddf6aa260f2
      properties:
        key:
          description: API key.
          example: 13ad45b4d0a2f6ea65ecbddf6aa260f2
          type: string
        createdAt:
          description: "Timestamp of creation in [ISO-8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
      required:
      - createdAt
      - key
      type: object
    anchoring:
      description: "Whether the pattern parameter matches the beginning (`startsWith`)\
        \ or end (`endsWith`) of the query string, is an exact match (`is`), or a\
        \ partial match (`contains`)."
      enum:
      - is
      - startsWith
      - endsWith
      - contains
      type: string
    condition:
      additionalProperties: false
      example:
        pattern: "{facet:brand}"
        context: trackedFilters
        alternatives: false
        anchoring: null
      properties:
        pattern:
          description: Query pattern syntax.
          example: "{facet:brand}"
          type: string
        anchoring:
          $ref: '#/components/schemas/anchoring'
        alternatives:
          default: false
          description: "Whether the pattern matches on plurals, synonyms, and typos."
          type: boolean
        context:
          description: "Rule context format: [A-Za-z0-9_-]+)."
          example: trackedFilters
          type: string
      type: object
    editType:
      description: Type of edit.
      enum:
      - remove
      - replace
      type: string
    edit:
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/editType'
        delete:
          description: Text or patterns to remove from the query string.
          type: string
        insert:
          description: Text that should be inserted in place of the removed text inside
            the query string.
          type: string
      type: object
    consequenceQueryObject:
      additionalProperties: false
      properties:
        remove:
          description: Words to remove.
          items:
            type: string
          type: array
        edits:
          description: Edits to apply.
          items:
            $ref: '#/components/schemas/edit'
          type: array
      type: object
    consequenceQuery:
      description: "When providing a string, it replaces the entire query string.\
        \ When providing an object, it describes incremental edits to be made to the\
        \ query string (but you can't do both)."
      oneOf:
      - $ref: '#/components/schemas/consequenceQueryObject'
      - type: string
    automaticFacetFilter:
      additionalProperties: false
      description: Automatic facet Filter.
      properties:
        facet:
          description: Attribute to filter on. This must match a facet placeholder
            in the Rule's pattern.
          type: string
        score:
          default: 1
          description: Score for the filter. Typically used for optional or disjunctive
            filters.
          type: integer
        disjunctive:
          default: false
          description: Whether the filter is disjunctive (true) or conjunctive (false).
          type: boolean
      required:
      - facet
      type: object
    automaticFacetFilters:
      description: Names of facets to which automatic filtering must be applied; they
        must match the facet name of a facet value placeholder in the query pattern.
      oneOf:
      - items:
          $ref: '#/components/schemas/automaticFacetFilter'
        type: array
      - items:
          type: string
        type: array
    params:
      additionalProperties: false
      description: Additional search parameters.
      properties:
        query:
          $ref: '#/components/schemas/consequenceQuery'
        automaticFacetFilters:
          $ref: '#/components/schemas/automaticFacetFilters'
        automaticOptionalFacetFilters:
          $ref: '#/components/schemas/automaticFacetFilters'
        renderingContent:
          $ref: '#/components/schemas/renderingContent'
      type: object
    consequenceParams:
      allOf:
      - $ref: '#/components/schemas/baseSearchParamsWithoutQuery'
      - $ref: '#/components/schemas/indexSettingsAsSearchParams'
      - $ref: '#/components/schemas/params'
    promotePosition:
      description: "The position to promote the records to. If you pass objectIDs,\
        \ the records are placed at this position as a group. For example, if you\
        \ pronmote four objectIDs to position 0, the records take the first four positions."
      example: 0
      type: integer
    promoteObjectIDs:
      additionalProperties: false
      description: Records to promote.
      properties:
        objectIDs:
          description: Unique identifiers of the records to promote.
          example:
          - 3f31c087763a2ceec359b318fc3edef3
          - 63c3c871e31a152d67df7720192fd752
          items:
            type: string
          type: array
        position:
          description: "The position to promote the records to. If you pass objectIDs,\
            \ the records are placed at this position as a group. For example, if\
            \ you pronmote four objectIDs to position 0, the records take the first\
            \ four positions."
          example: 0
          type: integer
      required:
      - objectIDs
      - position
      type: object
    promoteObjectID:
      additionalProperties: false
      description: Record to promote.
      properties:
        objectID:
          description: Unique identifier of the record to promote.
          example: 2b642cf64c587f50388eb1b8d047bf56
          type: string
        position:
          description: "The position to promote the records to. If you pass objectIDs,\
            \ the records are placed at this position as a group. For example, if\
            \ you pronmote four objectIDs to position 0, the records take the first\
            \ four positions."
          example: 0
          type: integer
      required:
      - objectID
      - position
      type: object
    promote:
      oneOf:
      - $ref: '#/components/schemas/promoteObjectIDs'
      - $ref: '#/components/schemas/promoteObjectID'
    consequence:
      additionalProperties: false
      description: |
        [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences) of a rule.
      example:
        promote:
        - null
        - null
        hide:
        - objectID: product-1
        - objectID: product-1
        userData:
          settingID: f2a7b51e3503acc6a39b3784ffb84300
          pluginVersion: 1.6.0
        params: null
        filterPromotes: false
      properties:
        params:
          $ref: '#/components/schemas/consequenceParams'
        promote:
          description: Records to promote.
          items:
            $ref: '#/components/schemas/promote'
          type: array
        filterPromotes:
          default: false
          description: "Only use in combination with the `promote` consequence. When\
            \ `true`, promoted results will be restricted to match the filters of\
            \ the current search. When `false`, the promoted results will show up\
            \ regardless of the filters."
          type: boolean
        hide:
          description: "Records to hide. By default, you can hide up to 50 records\
            \ per rule."
          items:
            $ref: '#/components/schemas/consequenceHide'
          type: array
        userData:
          description: Custom JSON object that will be appended to the userData array
            in the response. This object isn't interpreted by the API. It's limited
            to 1kB of minified JSON.
          example:
            settingID: f2a7b51e3503acc6a39b3784ffb84300
            pluginVersion: 1.6.0
      type: object
    timeRange:
      additionalProperties: false
      example:
        from: 0
        until: 6
      properties:
        from:
          description: Lower bound of the time range (Unix timestamp).
          type: integer
        until:
          description: Upper bound of the time range (Unix timestamp).
          type: integer
      required:
      - from
      - until
      type: object
    rule:
      additionalProperties: false
      description: Rule object.
      example:
        consequence:
          promote:
          - null
          - null
          hide:
          - objectID: product-1
          - objectID: product-1
          userData:
            settingID: f2a7b51e3503acc6a39b3784ffb84300
            pluginVersion: 1.6.0
          params: null
          filterPromotes: false
        description: Display a promotional banner
        validity:
        - from: 0
          until: 6
        - from: 0
          until: 6
        conditions:
        - pattern: "{facet:brand}"
          context: trackedFilters
          alternatives: false
          anchoring: null
        - pattern: "{facet:brand}"
          context: trackedFilters
          alternatives: false
          anchoring: null
        objectID: hide-12345
        enabled: true
      properties:
        objectID:
          description: Unique identifier for a rule object.
          example: hide-12345
          type: string
        conditions:
          description: |
            [Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions) required to activate a rule. You can use up to 25 conditions per rule.
          items:
            $ref: '#/components/schemas/condition'
          type: array
        consequence:
          $ref: '#/components/schemas/consequence'
        description:
          description: Description of the rule's purpose. This can be helpful for
            display in the Algolia dashboard.
          example: Display a promotional banner
          type: string
        enabled:
          default: true
          description: "Indicates whether to enable the rule. If it isn't enabled,\
            \ it isn't applied at query time."
          type: boolean
        validity:
          description: "If you specify a validity period, the rule _only_ applies\
            \ only during that period. If specified, the array must not be empty."
          items:
            $ref: '#/components/schemas/timeRange'
          type: array
      required:
      - objectID
      type: object
    updatedRuleResponse:
      additionalProperties: false
      example:
        objectID: product-1
        taskID: 1514562690001
        updatedAt: 2023-07-04T12:49:15Z
      properties:
        objectID:
          description: Unique object identifier.
          example: product-1
          type: string
        updatedAt:
          description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
        taskID:
          description: |
            Unique identifier of a task.
            A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
          example: 1514562690001
          format: int64
          type: integer
      required:
      - objectID
      - taskID
      - updatedAt
      type: object
    parameters_query:
      default: ""
      description: Rule object query.
      type: string
    parameters_page:
      description: Requested page (the first page is page 0).
      minimum: 0
      type: integer
    parameters_hitsPerPage:
      default: 20
      description: Maximum number of hits per page.
      maximum: 1000
      minimum: 1
      type: integer
    dictionaryType:
      enum:
      - plurals
      - stopwords
      - compounds
      type: string
    dictionaryAction:
      description: Actions to perform.
      enum:
      - addEntry
      - deleteEntry
      type: string
    dictionaryEntryState:
      default: enabled
      description: Indicates whether a dictionary entry is active (`enabled`) or inactive
        (`disabled`).
      enum:
      - enabled
      - disabled
      type: string
    dictionaryEntry:
      additionalProperties: true
      description: Dictionary entry.
      properties:
        objectID:
          description: Unique identifier for a dictionary object.
          example: under
          type: string
        language:
          description: |
            [Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/).
          example: de
          type: string
        word:
          description: |
            Dictionary entry word. Usage depends on the type of dictionary entry.
            **`stopwordEntry`**
            The stop word you want to add or update. If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`.
            **`compoundEntry`**
            When `decomposition` is empty: adds `word` as a compound atom. For example, atom “kino” decomposes the query “kopfkino” into "kopf" and "kino".
            When `decomposition` isn't empty: creates a decomposition exception. For example, when decomposition is set to the ["hund", "hutte"] exception, "hundehutte" decomposes into “hund” and “hutte”, discarding the linking "e".
          example: down
          type: string
        words:
          description: |
            Compound dictionary [word declensions](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/).
            If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`.
          example:
          - cheval
          - chevaux
          items:
            type: string
          type: array
        decomposition:
          description: "For compound entries, governs the behavior of the `word` parameter."
          example:
          - kopf
          - schmerz
          - tablette
          items:
            type: string
          type: array
        state:
          $ref: '#/components/schemas/dictionaryEntryState'
      required:
      - language
      - objectID
      type: object
    language:
      description: |
        [Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/).
      example: en
      type: string
    standardEntry:
      additionalProperties:
        type: boolean
      description: Key-value pair of a language ISO code and a boolean value.
      example: |
        {'fr': false}
      nullable: true
      type: object
    standardEntries:
      additionalProperties: false
      description: |
        Key-value pairs of [supported language ISO codes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) and boolean values.
      example:
        plurals: |
          {'fr': false}
        compounds: |
          {'fr': false}
        stopwords: |
          {'fr': false}
      properties:
        plurals:
          additionalProperties:
            type: boolean
          description: Key-value pair of a language ISO code and a boolean value.
          example: |
            {'fr': false}
          nullable: true
          type: object
        stopwords:
          additionalProperties:
            type: boolean
          description: Key-value pair of a language ISO code and a boolean value.
          example: |
            {'fr': false}
          nullable: true
          type: object
        compounds:
          additionalProperties:
            type: boolean
          description: Key-value pair of a language ISO code and a boolean value.
          example: |
            {'fr': false}
          nullable: true
          type: object
      type: object
    dictionaryLanguage:
      additionalProperties: false
      description: Custom entries for a dictionary.
      nullable: true
      properties:
        nbCustomEntries:
          description: |
            If `0`, the dictionary hasn't been customized and only contains standard entries provided by Algolia.
            If `null`, that feature isn't available or isn't supported for that language.
          type: integer
      type: object
    languages:
      additionalProperties: false
      description: Dictionary language.
      properties:
        plurals:
          $ref: '#/components/schemas/dictionaryLanguage'
        stopwords:
          $ref: '#/components/schemas/dictionaryLanguage'
        compounds:
          $ref: '#/components/schemas/dictionaryLanguage'
      required:
      - compounds
      - plurals
      - stopwords
      type: object
    userID:
      description: userID of the user.
      example: user1
      pattern: "^[a-zA-Z0-9 \\-*.]+$"
      type: string
    userId:
      description: Unique user ID.
      example:
        nbRecords: 42
        clusterName: c1-test
        dataSize: 0
        userID: user1
      properties:
        userID:
          description: userID of the user.
          example: user1
          pattern: "^[a-zA-Z0-9 \\-*.]+$"
          type: string
        clusterName:
          description: Cluster to which the user is assigned.
          example: c1-test
          type: string
        nbRecords:
          description: Number of records belonging to the user.
          example: 42
          type: integer
        dataSize:
          description: Data size used by the user.
          example: 0
          type: integer
      required:
      - clusterName
      - dataSize
      - nbRecords
      - userID
      title: userID
      type: object
    clusterName:
      description: Cluster name.
      example: c11-test
      type: string
    nbRecords:
      description: Number of records in the cluster.
      example: 3
      type: integer
    dataSize:
      description: Data size taken by all the users assigned to the cluster.
      example: 481
      type: integer
    source:
      description: Source.
      example:
        description: Server subnet
        source: 10.0.0.1/32
      properties:
        source:
          description: IP address range of the source.
          example: 10.0.0.1/32
          type: string
        description:
          description: Source description.
          example: Server subnet
          type: string
      required:
      - source
    sources:
      description: Sources.
      items:
        $ref: '#/components/schemas/source'
      type: array
    logType:
      default: all
      enum:
      - all
      - query
      - build
      - error
      type: string
    taskStatus:
      description: "_published_ if the task has been processed, _notPublished_ otherwise."
      enum:
      - published
      - notPublished
      type: string
    operationType:
      description: Operation to perform (_move_ or _copy_).
      enum:
      - move
      - copy
      example: copy
      type: string
    scopeType:
      enum:
      - settings
      - synonyms
      - rules
      type: string
    fetchedIndex:
      additionalProperties: false
      example:
        createdAt: 2022-09-19T16:36:44.471Z
        numberOfPendingTasks: 0
        entries: 100
        lastBuildTimeS: 3
        fileSize: 112927
        replicas:
        - T02_push
        - T2replica
        pendingTask: false
        name: movies
        dataSize: 48450
        updatedAt: 2023-07-04T12:49:15Z
        primary: T02
      properties:
        name:
          description: Index name.
          example: movies
          type: string
        createdAt:
          description: Index creation date. An empty string means that the index has
            no records.
          example: 2022-09-19T16:36:44.471Z
          type: string
        updatedAt:
          description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
        entries:
          description: Number of records contained in the index.
          example: 100
          type: integer
        dataSize:
          description: Number of bytes of the index in minified format.
          example: 48450
          type: integer
        fileSize:
          description: Number of bytes of the index binary file.
          example: 112927
          type: integer
        lastBuildTimeS:
          description: Last build time.
          example: 3
          type: integer
        numberOfPendingTasks:
          default: 0
          description: Number of pending indexing operations. This value is deprecated
            and should not be used.
          type: integer
        pendingTask:
          default: false
          description: A boolean which says whether the index has pending tasks. This
            value is deprecated and should not be used.
          type: boolean
        primary:
          description: Only present if the index is a replica. Contains the name of
            the related primary index.
          example: T02
          type: string
        replicas:
          description: Only present if the index is a primary index with replicas.
            Contains the names of all linked replicas.
          example:
          - T02_push
          - T2replica
          items:
            type: string
          type: array
      required:
      - createdAt
      - dataSize
      - entries
      - fileSize
      - lastBuildTimeS
      - name
      - numberOfPendingTasks
      - pendingTask
      - updatedAt
      type: object
    listIndicesResponse:
      additionalProperties: false
      example:
        items:
        - createdAt: 2022-09-19T16:36:44.471Z
          numberOfPendingTasks: 0
          entries: 100
          lastBuildTimeS: 3
          fileSize: 112927
          replicas:
          - T02_push
          - T2replica
          pendingTask: false
          name: movies
          dataSize: 48450
          updatedAt: 2023-07-04T12:49:15Z
          primary: T02
        - createdAt: 2022-09-19T16:36:44.471Z
          numberOfPendingTasks: 0
          entries: 100
          lastBuildTimeS: 3
          fileSize: 112927
          replicas:
          - T02_push
          - T2replica
          pendingTask: false
          name: movies
          dataSize: 48450
          updatedAt: 2023-07-04T12:49:15Z
          primary: T02
        nbPages: 100
      properties:
        items:
          description: All indices in your Algolia application.
          items:
            $ref: '#/components/schemas/fetchedIndex'
          type: array
        nbPages:
          description: Number of pages.
          example: 100
          type: integer
      required:
      - items
      type: object
    searchMethodParams:
      additionalProperties: false
      properties:
        requests:
          items:
            $ref: '#/components/schemas/SearchQuery'
          type: array
        strategy:
          $ref: '#/components/schemas/searchStrategy'
      required:
      - requests
      title: searchMethodParams
      type: object
    searchResponses:
      additionalProperties: false
      example:
        results:
        - null
        - null
      properties:
        results:
          items:
            $ref: '#/components/schemas/searchResult'
          type: array
      required:
      - results
      title: searchResponses
      type: object
    searchForFacetValuesRequest:
      additionalProperties: false
      properties:
        params:
          default: ""
          description: Search parameters as a URL-encoded query string.
          example: hitsPerPage=2&getRankingInfo=1
          type: string
        facetQuery:
          default: ""
          description: Text to search inside the facet's values.
          example: george
          type: string
        maxFacetHits:
          default: 10
          description: "Maximum number of facet hits to return when [searching for\
            \ facet values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values)."
          maximum: 100
          type: integer
          x-categories:
          - Advanced
      title: searchForFacetValuesRequest
      type: object
    saveObjectResponse:
      additionalProperties: false
      example:
        createdAt: 2023-06-29T15:15:40.747Z
        taskID: 1514562690001
        objectID: product-1
      properties:
        createdAt:
          description: Date of creation (ISO-8601 format).
          example: 2023-06-29T15:15:40.747Z
          type: string
        taskID:
          description: |
            Unique identifier of a task.
            A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
          example: 1514562690001
          format: int64
          type: integer
        objectID:
          description: Unique object identifier.
          example: product-1
          type: string
      required:
      - createdAt
      - taskID
      title: saveObjectResponse
      type: object
    deletedAtResponse:
      additionalProperties: false
      description: "Response, taskID, and deletion timestamp."
      example:
        deletedAt: 2023-06-27T14:42:38.831Z
        taskID: 1514562690001
      properties:
        taskID:
          description: |
            Unique identifier of a task.
            A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
          example: 1514562690001
          format: int64
          type: integer
        deletedAt:
          description: "Timestamp of deletion in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-06-27T14:42:38.831Z
          type: string
      required:
      - deletedAt
      - taskID
      title: deletedAtResponse
      type: object
    updatedAtWithObjectIdResponse:
      additionalProperties: false
      description: "Response, taskID, unique object identifier, and an update timestamp."
      example:
        taskID: 1514562690001
        objectID: product-1
        updatedAt: 2023-07-04T12:49:15Z
      properties:
        taskID:
          description: |
            Unique identifier of a task.
            A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
          example: 1514562690001
          format: int64
          type: integer
        updatedAt:
          description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
        objectID:
          description: Unique object identifier.
          example: product-1
          type: string
      title: updatedAtWithObjectIdResponse
      type: object
    updatedAtResponse:
      additionalProperties: false
      description: "Response, taskID, and update timestamp."
      example:
        taskID: 1514562690001
        updatedAt: 2023-07-04T12:49:15Z
      properties:
        taskID:
          description: |
            Unique identifier of a task.
            A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
          example: 1514562690001
          format: int64
          type: integer
        updatedAt:
          description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
      required:
      - taskID
      - updatedAt
      title: updatedAtResponse
      type: object
    batchRequest:
      additionalProperties: false
      properties:
        action:
          $ref: '#/components/schemas/action'
        body:
          description: Operation arguments (varies with specified `action`).
          example:
            name: Betty Jane McCamey
            company: Vita Foods Inc.
            email: betty@mccamey.com
          type: object
      required:
      - action
      - body
      title: batchRequest
      type: object
    batchWriteParams:
      additionalProperties: false
      description: Batch parameters.
      properties:
        requests:
          items:
            $ref: '#/components/schemas/batchRequest'
          type: array
      required:
      - requests
      title: batchWriteParams
      type: object
    batchResponse:
      additionalProperties: false
      example:
        taskID: 1514562690001
        objectIDs:
        - record-1
        - record-2
      properties:
        taskID:
          description: |
            Unique identifier of a task.
            A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
          example: 1514562690001
          format: int64
          type: integer
        objectIDs:
          description: Unique object (record) identifiers.
          example:
          - record-1
          - record-2
          items:
            type: string
          type: array
      required:
      - objectIDs
      - taskID
      title: batchResponse
      type: object
    multipleBatchRequest:
      additionalProperties: false
      properties:
        action:
          $ref: '#/components/schemas/action'
        body:
          description: Operation arguments (varies with specified `action`).
          example: |
            {'requests':[{'action':'addObject','indexName':'contacts','body':{'name':'Betty Jane McCamey','company':'Vita Foods Inc.','email':'betty@mccamey.com'}},{'action':'addObject','indexName':'public_contacts','body':{'name':'Gayla Geimer','company': "Ortman McCain Co','email':'gayla@geimer.com'}}]}
          type: object
        indexName:
          description: Index to target for this operation.
          example: index1
          type: string
      required:
      - action
      - body
      - indexName
      title: multipleBatchRequest
      type: object
    batchParams:
      additionalProperties: false
      description: Batch parameters.
      properties:
        requests:
          items:
            $ref: '#/components/schemas/multipleBatchRequest'
          type: array
      required:
      - requests
      title: batchParams
      type: object
    multipleBatchResponse:
      additionalProperties: false
      example:
        taskID:
          key: 1514562690001
        objectIDs:
        - record-1
        - record-2
      properties:
        taskID:
          additionalProperties:
            $ref: '#/components/schemas/taskID'
          description: TaskIDs per index.
          type: object
        objectIDs:
          description: Unique object (record) identifiers.
          example:
          - record-1
          - record-2
          items:
            type: string
          type: array
      required:
      - objectIDs
      - taskID
      title: multipleBatchResponse
      type: object
    getObjectsRequest:
      additionalProperties: false
      description: Record retrieval operation.
      properties:
        attributesToRetrieve:
          description: "Attributes to retrieve. If not specified, all retrievable\
            \ attributes are returned."
          example:
          - author
          - title
          - content
          items:
            type: string
          type: array
        objectID:
          description: Record's objectID.
          example: 8b9b7619230b1950f653b962fb0dfd6b
          type: string
        indexName:
          description: Name of the index containing the required records.
          example: books
          type: string
      required:
      - indexName
      - objectID
      title: getObjectsRequest
      type: object
    getObjectsParams:
      additionalProperties: false
      description: Request parameters.
      properties:
        requests:
          items:
            $ref: '#/components/schemas/getObjectsRequest'
          type: array
      required:
      - requests
      title: getObjectsParams
      type: object
    getObjectsResponse:
      additionalProperties: false
      example:
        results:
        - "{}"
        - "{}"
      properties:
        results:
          description: Retrieved results.
          items:
            description: Fetched object.
            type: object
            x-is-generic: true
          type: array
      required:
      - results
      title: getObjectsResponse
      type: object
    saveSynonymResponse:
      additionalProperties: false
      example:
        id: "12"
        taskID: 1514562690001
        updatedAt: 2023-07-04T12:49:15Z
      properties:
        taskID:
          description: |
            Unique identifier of a task.
            A successful API response means that a task was added to a queue. It might not run immediately. You can check the task's progress with the `task` operation and this `taskID`.
          example: 1514562690001
          format: int64
          type: integer
        updatedAt:
          description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
        id:
          description: Unique identifier of a synonym object.
          example: "12"
          type: string
      required:
      - id
      - taskID
      - updatedAt
      title: saveSynonymResponse
      type: object
    searchSynonymsParams:
      additionalProperties: false
      properties:
        query:
          default: ""
          description: Text to search for in an index.
          type: string
          x-categories:
          - Search
      title: searchSynonymsParams
      type: object
    listApiKeysResponse:
      additionalProperties: false
      example:
        keys:
        - null
        - null
      properties:
        keys:
          description: API keys.
          items:
            $ref: '#/components/schemas/getApiKeyResponse'
          type: array
      required:
      - keys
      title: listApiKeysResponse
      type: object
    updateApiKeyResponse:
      additionalProperties: false
      example:
        key: 13ad45b4d0a2f6ea65ecbddf6aa260f2
        updatedAt: 2023-07-04T12:49:15Z
      properties:
        key:
          description: API key.
          example: 13ad45b4d0a2f6ea65ecbddf6aa260f2
          type: string
        updatedAt:
          description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
      required:
      - key
      - updatedAt
      title: updateApiKeyResponse
      type: object
    deleteApiKeyResponse:
      additionalProperties: false
      example:
        deletedAt: 2023-06-27T14:42:38.831Z
      properties:
        deletedAt:
          description: "Timestamp of deletion in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-06-27T14:42:38.831Z
          type: string
      required:
      - deletedAt
      title: deleteApiKeyResponse
      type: object
    searchRulesParams:
      additionalProperties: false
      description: Rules search parameters.
      properties:
        query:
          default: ""
          description: Rule object query.
          type: string
        anchoring:
          $ref: '#/components/schemas/anchoring'
        context:
          description: "Restricts responses to the specified [contextual rule](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#creating-contextual-rules)."
          example: mobile
          type: string
        page:
          description: Requested page (the first page is page 0).
          minimum: 0
          type: integer
        hitsPerPage:
          default: 20
          description: Maximum number of hits per page.
          maximum: 1000
          minimum: 1
          type: integer
        enabled:
          description: "Restricts responses to enabled rules. When not specified (default),\
            \ _all_ rules are retrieved."
          nullable: true
          type: boolean
        requestOptions:
          description: Request options to send with the API call.
          example: |
            {timeouts:{read:20}}
          items:
            description: Request option.
            type: object
          type: array
      title: searchRulesParams
      type: object
    searchRulesResponse:
      additionalProperties: false
      example:
        hits:
        - consequence:
            promote:
            - null
            - null
            hide:
            - objectID: product-1
            - objectID: product-1
            userData:
              settingID: f2a7b51e3503acc6a39b3784ffb84300
              pluginVersion: 1.6.0
            params: null
            filterPromotes: false
          description: Display a promotional banner
          validity:
          - from: 0
            until: 6
          - from: 0
            until: 6
          conditions:
          - pattern: "{facet:brand}"
            context: trackedFilters
            alternatives: false
            anchoring: null
          - pattern: "{facet:brand}"
            context: trackedFilters
            alternatives: false
            anchoring: null
          objectID: hide-12345
          enabled: true
        - consequence:
            promote:
            - null
            - null
            hide:
            - objectID: product-1
            - objectID: product-1
            userData:
              settingID: f2a7b51e3503acc6a39b3784ffb84300
              pluginVersion: 1.6.0
            params: null
            filterPromotes: false
          description: Display a promotional banner
          validity:
          - from: 0
            until: 6
          - from: 0
            until: 6
          conditions:
          - pattern: "{facet:brand}"
            context: trackedFilters
            alternatives: false
            anchoring: null
          - pattern: "{facet:brand}"
            context: trackedFilters
            alternatives: false
            anchoring: null
          objectID: hide-12345
          enabled: true
        nbHits: 0
        page: 6
        nbPages: 1
      properties:
        hits:
          description: Fetched rules.
          items:
            $ref: '#/components/schemas/rule'
          type: array
        nbHits:
          description: Number of fetched rules.
          type: integer
        page:
          description: Current page.
          type: integer
        nbPages:
          description: Number of pages.
          type: integer
      required:
      - hits
      - nbHits
      - nbPages
      - page
      title: searchRulesResponse
      type: object
    batchDictionaryEntriesRequest:
      additionalProperties: false
      properties:
        action:
          $ref: '#/components/schemas/dictionaryAction'
        body:
          $ref: '#/components/schemas/dictionaryEntry'
      required:
      - action
      - body
      title: batchDictionaryEntriesRequest
      type: object
    batchDictionaryEntriesParams:
      additionalProperties: false
      description: |
        `batchDictionaryEntries` parameters.
      properties:
        clearExistingDictionaryEntries:
          default: false
          description: Incidates whether to replace all custom entries in the dictionary
            with the ones sent with this request.
          type: boolean
        requests:
          description: Operations to batch.
          items:
            $ref: '#/components/schemas/batchDictionaryEntriesRequest'
          type: array
      required:
      - requests
      title: batchDictionaryEntriesParams
      type: object
    searchDictionaryEntriesParams:
      additionalProperties: false
      description: |
        `searchDictionaryEntries` parameters.
      properties:
        query:
          default: ""
          description: Text to search for in an index.
          type: string
          x-categories:
          - Search
        page:
          default: 0
          description: "Page to retrieve (the first page is `0`, not `1`)."
          type: integer
          x-categories:
          - Pagination
        hitsPerPage:
          default: 20
          description: Number of hits per page.
          maximum: 1000
          minimum: 1
          type: integer
          x-categories:
          - Pagination
        language:
          description: |
            [Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/).
          example: en
          type: string
      required:
      - query
      title: searchDictionaryEntriesParams
      type: object
    getDictionarySettingsResponse:
      additionalProperties: false
      example:
        disableStandardEntries:
          plurals: |
            {'fr': false}
          compounds: |
            {'fr': false}
          stopwords: |
            {'fr': false}
      properties:
        disableStandardEntries:
          $ref: '#/components/schemas/standardEntries'
      required:
      - disableStandardEntries
      title: getDictionarySettingsResponse
      type: object
    dictionarySettingsParams:
      additionalProperties: false
      description: Enable or turn off the built-in Algolia stop words for a specific
        language.
      properties:
        disableStandardEntries:
          $ref: '#/components/schemas/standardEntries'
      required:
      - disableStandardEntries
      title: dictionarySettingsParams
      type: object
    listUserIdsResponse:
      description: User ID data.
      example:
        userIDs:
        - nbRecords: 42
          clusterName: c1-test
          dataSize: 0
          userID: user1
        - nbRecords: 42
          clusterName: c1-test
          dataSize: 0
          userID: user1
      properties:
        userIDs:
          description: User IDs.
          items:
            $ref: '#/components/schemas/userId'
          type: array
      required:
      - userIDs
      title: listUserIdsResponse
      type: object
    assignUserIdParams:
      additionalProperties: false
      description: Assign userID parameters.
      properties:
        cluster:
          description: Cluster name.
          example: c11-test
          type: string
      required:
      - cluster
      title: assignUserIdParams
      type: object
    createdAtResponse:
      additionalProperties: false
      description: Response and creation timestamp.
      example:
        createdAt: 2023-07-04T12:49:15Z
      properties:
        createdAt:
          description: "Timestamp of creation in [ISO-8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
      required:
      - createdAt
      title: createdAtResponse
      type: object
    batchAssignUserIdsParams:
      additionalProperties: false
      description: Assign userID parameters.
      properties:
        cluster:
          description: Cluster name.
          example: c11-test
          type: string
        users:
          description: User IDs to assign.
          example:
          - einstein
          - bohr
          - feynman
          items:
            type: string
          type: array
      required:
      - cluster
      - users
      title: batchAssignUserIdsParams
      type: object
    getTopUserIdsResponse:
      description: User IDs and clusters.
      example:
        topUsers:
        - key:
          - nbRecords: 42
            clusterName: c1-test
            dataSize: 0
            userID: user1
          - nbRecords: 42
            clusterName: c1-test
            dataSize: 0
            userID: user1
        - key:
          - nbRecords: 42
            clusterName: c1-test
            dataSize: 0
            userID: user1
          - nbRecords: 42
            clusterName: c1-test
            dataSize: 0
            userID: user1
      properties:
        topUsers:
          description: Key-value pairs with cluster names as keys and lists of users
            with the highest number of records per cluster as values.
          items:
            additionalProperties:
              items:
                $ref: '#/components/schemas/userId'
              type: array
            type: object
          type: array
      required:
      - topUsers
      title: getTopUserIdsResponse
      type: object
    removeUserIdResponse:
      additionalProperties: false
      example:
        deletedAt: 2023-06-27T14:42:38.831Z
      properties:
        deletedAt:
          description: "Timestamp of deletion in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-06-27T14:42:38.831Z
          type: string
      required:
      - deletedAt
      title: removeUserIdResponse
      type: object
    listClustersResponse:
      description: Clusters.
      example:
        topUsers:
        - c11-test
        - c11-test
      properties:
        topUsers:
          description: Key-value pairs with cluster names as keys and lists of users
            with the highest number of records per cluster as values.
          items:
            $ref: '#/components/schemas/clusterName'
          type: array
      required:
      - topUsers
      title: listClustersResponse
      type: object
    searchUserIdsParams:
      additionalProperties: false
      description: OK
      properties:
        query:
          description: "Query to search. The search is a prefix search with [typo\
            \ tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/)\
            \ enabled. An empty query will retrieve all users."
          type: string
        clusterName:
          description: Cluster name.
          example: c11-test
          type: string
        page:
          default: 0
          description: "Page to retrieve (the first page is `0`, not `1`)."
          type: integer
          x-categories:
          - Pagination
        hitsPerPage:
          default: 20
          description: Number of hits per page.
          maximum: 1000
          minimum: 1
          type: integer
          x-categories:
          - Pagination
      required:
      - query
      title: searchUserIdsParams
      type: object
    userHighlightResult:
      example:
        clusterName:
          key: null
        userID:
          key: null
      properties:
        userID:
          additionalProperties:
            $ref: '#/components/schemas/highlightResult'
          description: Show highlighted section and words matched on a query.
          type: object
        clusterName:
          additionalProperties:
            $ref: '#/components/schemas/highlightResult'
          description: Show highlighted section and words matched on a query.
          type: object
      required:
      - clusterName
      - userID
      title: userHighlightResult
      type: object
    userHit:
      example:
        _highlightResult:
          clusterName:
            key: null
          userID:
            key: null
        nbRecords: 3
        clusterName: c11-test
        dataSize: 481
        userID: user1
        objectID: objectID
      properties:
        userID:
          description: userID of the user.
          example: user1
          pattern: "^[a-zA-Z0-9 \\-*.]+$"
          type: string
        clusterName:
          description: Cluster name.
          example: c11-test
          type: string
        nbRecords:
          description: Number of records in the cluster.
          example: 3
          type: integer
        dataSize:
          description: Data size taken by all the users assigned to the cluster.
          example: 481
          type: integer
        objectID:
          description: userID of the requested user. Same as userID.
          type: string
        _highlightResult:
          $ref: '#/components/schemas/userHighlightResult'
      required:
      - _highlightResult
      - clusterName
      - dataSize
      - nbRecords
      - objectID
      - userID
      title: userHit
      type: object
    searchUserIdsResponse:
      description: userIDs data.
      example:
        hits:
        - _highlightResult:
            clusterName:
              key: null
            userID:
              key: null
          nbRecords: 3
          clusterName: c11-test
          dataSize: 481
          userID: user1
          objectID: objectID
        - _highlightResult:
            clusterName:
              key: null
            userID:
              key: null
          nbRecords: 3
          clusterName: c11-test
          dataSize: 481
          userID: user1
          objectID: objectID
        hitsPerPage: 603
        nbHits: 20
        page: 0
        updatedAt: 2023-07-04T12:49:15Z
      properties:
        hits:
          description: User objects that match the query.
          items:
            $ref: '#/components/schemas/userHit'
          type: array
        nbHits:
          description: Number of hits the search query matched.
          example: 20
          type: integer
        page:
          default: 0
          description: "Page to retrieve (the first page is `0`, not `1`)."
          type: integer
          x-categories:
          - Pagination
        hitsPerPage:
          default: 20
          description: Maximum number of hits per page.
          maximum: 1000
          minimum: 1
          type: integer
        updatedAt:
          description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
      required:
      - hits
      - hitsPerPage
      - nbHits
      - page
      - updatedAt
      title: searchUserIdsResponse
      type: object
    hasPendingMappingsResponse:
      additionalProperties: false
      example:
        pending: true
        clusters:
          key:
          - clusters
          - clusters
      properties:
        pending:
          description: "Indicates whether there are clusters undergoing migration,\
            \ creation, or deletion."
          type: boolean
        clusters:
          additionalProperties:
            items:
              type: string
            type: array
          description: |
            Cluster pending mapping state: migrating, creating, deleting.
          type: object
      required:
      - pending
      title: hasPendingMappingsResponse
      type: object
    replaceSourceResponse:
      additionalProperties: false
      example:
        updatedAt: 2023-07-04T12:49:15Z
      properties:
        updatedAt:
          description: "Timestamp of the last update in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-07-04T12:49:15Z
          type: string
      required:
      - updatedAt
      title: replaceSourceResponse
      type: object
    deleteSourceResponse:
      additionalProperties: false
      example:
        deletedAt: 2023-06-27T14:42:38.831Z
      properties:
        deletedAt:
          description: "Timestamp of deletion in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-06-27T14:42:38.831Z
          type: string
      required:
      - deletedAt
      title: deleteSourceResponse
      type: object
    logQuery:
      example:
        query_id: "313453231"
        user_token: 93.189.166.128
        index_name: best_buy
      properties:
        index_name:
          description: Index targeted by the query.
          example: best_buy
          type: string
        user_token:
          description: User identifier.
          example: 93.189.166.128
          type: string
        query_id:
          description: Unique query identifier.
          example: "313453231"
          type: string
      title: logQuery
      type: object
    log:
      example:
        method: GET
        query_nb_hits: "1"
        ip: 127.0.0.1
        answer_code: "200"
        index: best_buy
        query_body: "\\n{\\n \\\"requests\\\": [\\n  {\\n   \\\"indexName\\\": \\\"\
          best_buy\\\",\\n   \\\"params\\\": \\\"query=&hitsPerPage=10&page=0&attributesToRetrieve=*&highlightPreTag=%3Cais-highlight-0000000000%3E&highlightPostTag=%3C%2Fais-highlight-0000000000%3E&getRankingInfo=1&facets=%5B%22brand%22%2C%22categories%22%2C%22free_shipping%22%2C%22type%22%5D&tagFilters=\\\
          \"\\n  }\\n ]\\n}\\n"
        query_headers: "User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0\
          \ OpenSSL/0.9.8x zlib/1.2.5\\nHost: localhost.algolia.com:8080\\nAccept:\
          \ */*\\nContent-Type: application/json; charset=utf-8\\nX-Algolia-API-Key:\
          \ 20f***************************\\nX-Algolia-Application-Id: MyApplicationID\\\
          n"
        url: /1/indexes
        sha1: 26c53bd7e38ca71f4741b71994cd94a600b7ac68
        processing_time_ms: "2"
        answer: |
          'n{\n \"results\": [\n  {\n   \"hits\": [\n    {\n     \"name\": \"Amazon - Fire TV Stick\",\n     \"description\": \"Amazon Fire TV Stick connects to your TV's HDMI port. Just grab and go to enjoy Netflix, Prime Instant Video, Hulu Plus, YouTube.com, music, and much more.\",\n     \"brand\": \"Amazon\",\n     \"categories\": [\n      \"TV & Home Theater\",\n      \"Streaming Media Players\"\n     ],\n     \"hierarchicalCategories\": {\n      \"lvl0\": \"TV & Home Theater\",\n      \"lvl1\": \"TV & Home Theater > Streaming Media Players\"\n     },\n     \"type\": \"Streaming media plyr\",\n     \"price\": 39.99,\n     \"price_range\": \"1 - 50\",\n     \"image\": \"https:\/\/cdn-demo.algolia.com\/bestbuy\/9999119_sb.jpg\",\n     \"url\": \"http:\/\/www.bestbuy.com\/site\/amazon-fire-tv-stick\/9999119.p?id=1219460752591&skuId=9999119&cmp=RMX&ky=1uWSHMdQqBeVJB9cXgEke60s5EjfS6M1W\",\n     \"free_shipping\": false,\n     \"popularity\": 9843,\n     \"rating\": 4,\n     \"objectID\": \"9999119\"\n'
        query_params: "query=georgia&attributesToRetrieve=name,city,country"
        nb_api_calls: "1"
        inner_queries:
        - query_id: "313453231"
          user_token: 93.189.166.128
          index_name: best_buy
        - query_id: "313453231"
          user_token: 93.189.166.128
          index_name: best_buy
        timestamp: 2023-03-08T12:34:56Z
      properties:
        timestamp:
          description: "Timestamp in [ISO 8601](https://wikipedia.org/wiki/ISO_8601)\
            \ format."
          example: 2023-03-08T12:34:56Z
          type: string
        method:
          description: HTTP method of the performed request.
          example: GET
          type: string
        answer_code:
          description: HTTP response code.
          example: "200"
          type: string
        query_body:
          description: "Request body. Truncated after 1,000 characters."
          example: "\\n{\\n \\\"requests\\\": [\\n  {\\n   \\\"indexName\\\": \\\"\
            best_buy\\\",\\n   \\\"params\\\": \\\"query=&hitsPerPage=10&page=0&attributesToRetrieve=*&highlightPreTag=%3Cais-highlight-0000000000%3E&highlightPostTag=%3C%2Fais-highlight-0000000000%3E&getRankingInfo=1&facets=%5B%22brand%22%2C%22categories%22%2C%22free_shipping%22%2C%22type%22%5D&tagFilters=\\\
            \"\\n  }\\n ]\\n}\\n"
          type: string
        answer:
          description: "Answer body. Truncated after 1,000 characters."
          example: |
            'n{\n \"results\": [\n  {\n   \"hits\": [\n    {\n     \"name\": \"Amazon - Fire TV Stick\",\n     \"description\": \"Amazon Fire TV Stick connects to your TV's HDMI port. Just grab and go to enjoy Netflix, Prime Instant Video, Hulu Plus, YouTube.com, music, and much more.\",\n     \"brand\": \"Amazon\",\n     \"categories\": [\n      \"TV & Home Theater\",\n      \"Streaming Media Players\"\n     ],\n     \"hierarchicalCategories\": {\n      \"lvl0\": \"TV & Home Theater\",\n      \"lvl1\": \"TV & Home Theater > Streaming Media Players\"\n     },\n     \"type\": \"Streaming media plyr\",\n     \"price\": 39.99,\n     \"price_range\": \"1 - 50\",\n     \"image\": \"https:\/\/cdn-demo.algolia.com\/bestbuy\/9999119_sb.jpg\",\n     \"url\": \"http:\/\/www.bestbuy.com\/site\/amazon-fire-tv-stick\/9999119.p?id=1219460752591&skuId=9999119&cmp=RMX&ky=1uWSHMdQqBeVJB9cXgEke60s5EjfS6M1W\",\n     \"free_shipping\": false,\n     \"popularity\": 9843,\n     \"rating\": 4,\n     \"objectID\": \"9999119\"\n'
          type: string
        url:
          description: Request URL.
          example: /1/indexes
          type: string
        ip:
          description: IP address of the client that performed the request.
          example: 127.0.0.1
          type: string
        query_headers:
          description: Request headers (API key is obfuscated).
          example: "User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0\
            \ OpenSSL/0.9.8x zlib/1.2.5\\nHost: localhost.algolia.com:8080\\nAccept:\
            \ */*\\nContent-Type: application/json; charset=utf-8\\nX-Algolia-API-Key:\
            \ 20f***************************\\nX-Algolia-Application-Id: MyApplicationID\\\
            n"
          type: string
        sha1:
          description: SHA1 signature of the log entry.
          example: 26c53bd7e38ca71f4741b71994cd94a600b7ac68
          type: string
        nb_api_calls:
          description: Number of API calls.
          example: "1"
          type: string
        processing_time_ms:
          description: Processing time for the query. Doesn't include network time.
          example: "2"
          type: string
        index:
          description: Index targeted by the query.
          example: best_buy
          type: string
        query_params:
          description: Query parameters sent with the request.
          example: "query=georgia&attributesToRetrieve=name,city,country"
          type: string
        query_nb_hits:
          description: Number of hits returned for the query.
          example: "1"
          type: string
        inner_queries:
          description: Performed queries for the given request.
          items:
            $ref: '#/components/schemas/logQuery'
          type: array
      required:
      - answer
      - answer_code
      - ip
      - method
      - nb_api_calls
      - processing_time_ms
      - query_body
      - query_headers
      - sha1
      - timestamp
      - url
      title: log
      type: object
    getLogsResponse:
      additionalProperties: false
      example:
        logs:
        - method: GET
          query_nb_hits: "1"
          ip: 127.0.0.1
          answer_code: "200"
          index: best_buy
          query_body: "\\n{\\n \\\"requests\\\": [\\n  {\\n   \\\"indexName\\\": \\\
            \"best_buy\\\",\\n   \\\"params\\\": \\\"query=&hitsPerPage=10&page=0&attributesToRetrieve=*&highlightPreTag=%3Cais-highlight-0000000000%3E&highlightPostTag=%3C%2Fais-highlight-0000000000%3E&getRankingInfo=1&facets=%5B%22brand%22%2C%22categories%22%2C%22free_shipping%22%2C%22type%22%5D&tagFilters=\\\
            \"\\n  }\\n ]\\n}\\n"
          query_headers: "User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0\
            \ OpenSSL/0.9.8x zlib/1.2.5\\nHost: localhost.algolia.com:8080\\nAccept:\
            \ */*\\nContent-Type: application/json; charset=utf-8\\nX-Algolia-API-Key:\
            \ 20f***************************\\nX-Algolia-Application-Id: MyApplicationID\\\
            n"
          url: /1/indexes
          sha1: 26c53bd7e38ca71f4741b71994cd94a600b7ac68
          processing_time_ms: "2"
          answer: |
            'n{\n \"results\": [\n  {\n   \"hits\": [\n    {\n     \"name\": \"Amazon - Fire TV Stick\",\n     \"description\": \"Amazon Fire TV Stick connects to your TV's HDMI port. Just grab and go to enjoy Netflix, Prime Instant Video, Hulu Plus, YouTube.com, music, and much more.\",\n     \"brand\": \"Amazon\",\n     \"categories\": [\n      \"TV & Home Theater\",\n      \"Streaming Media Players\"\n     ],\n     \"hierarchicalCategories\": {\n      \"lvl0\": \"TV & Home Theater\",\n      \"lvl1\": \"TV & Home Theater > Streaming Media Players\"\n     },\n     \"type\": \"Streaming media plyr\",\n     \"price\": 39.99,\n     \"price_range\": \"1 - 50\",\n     \"image\": \"https:\/\/cdn-demo.algolia.com\/bestbuy\/9999119_sb.jpg\",\n     \"url\": \"http:\/\/www.bestbuy.com\/site\/amazon-fire-tv-stick\/9999119.p?id=1219460752591&skuId=9999119&cmp=RMX&ky=1uWSHMdQqBeVJB9cXgEke60s5EjfS6M1W\",\n     \"free_shipping\": false,\n     \"popularity\": 9843,\n     \"rating\": 4,\n     \"objectID\": \"9999119\"\n'
          query_params: "query=georgia&attributesToRetrieve=name,city,country"
          nb_api_calls: "1"
          inner_queries:
          - query_id: "313453231"
            user_token: 93.189.166.128
            index_name: best_buy
          - query_id: "313453231"
            user_token: 93.189.166.128
            index_name: best_buy
          timestamp: 2023-03-08T12:34:56Z
        - method: GET
          query_nb_hits: "1"
          ip: 127.0.0.1
          answer_code: "200"
          index: best_buy
          query_body: "\\n{\\n \\\"requests\\\": [\\n  {\\n   \\\"indexName\\\": \\\
            \"best_buy\\\",\\n   \\\"params\\\": \\\"query=&hitsPerPage=10&page=0&attributesToRetrieve=*&highlightPreTag=%3Cais-highlight-0000000000%3E&highlightPostTag=%3C%2Fais-highlight-0000000000%3E&getRankingInfo=1&facets=%5B%22brand%22%2C%22categories%22%2C%22free_shipping%22%2C%22type%22%5D&tagFilters=\\\
            \"\\n  }\\n ]\\n}\\n"
          query_headers: "User-Agent: curl/7.24.0 (x86_64-apple-darwin12.0) libcurl/7.24.0\
            \ OpenSSL/0.9.8x zlib/1.2.5\\nHost: localhost.algolia.com:8080\\nAccept:\
            \ */*\\nContent-Type: application/json; charset=utf-8\\nX-Algolia-API-Key:\
            \ 20f***************************\\nX-Algolia-Application-Id: MyApplicationID\\\
            n"
          url: /1/indexes
          sha1: 26c53bd7e38ca71f4741b71994cd94a600b7ac68
          processing_time_ms: "2"
          answer: |
            'n{\n \"results\": [\n  {\n   \"hits\": [\n    {\n     \"name\": \"Amazon - Fire TV Stick\",\n     \"description\": \"Amazon Fire TV Stick connects to your TV's HDMI port. Just grab and go to enjoy Netflix, Prime Instant Video, Hulu Plus, YouTube.com, music, and much more.\",\n     \"brand\": \"Amazon\",\n     \"categories\": [\n      \"TV & Home Theater\",\n      \"Streaming Media Players\"\n     ],\n     \"hierarchicalCategories\": {\n      \"lvl0\": \"TV & Home Theater\",\n      \"lvl1\": \"TV & Home Theater > Streaming Media Players\"\n     },\n     \"type\": \"Streaming media plyr\",\n     \"price\": 39.99,\n     \"price_range\": \"1 - 50\",\n     \"image\": \"https:\/\/cdn-demo.algolia.com\/bestbuy\/9999119_sb.jpg\",\n     \"url\": \"http:\/\/www.bestbuy.com\/site\/amazon-fire-tv-stick\/9999119.p?id=1219460752591&skuId=9999119&cmp=RMX&ky=1uWSHMdQqBeVJB9cXgEke60s5EjfS6M1W\",\n     \"free_shipping\": false,\n     \"popularity\": 9843,\n     \"rating\": 4,\n     \"objectID\": \"9999119\"\n'
          query_params: "query=georgia&attributesToRetrieve=name,city,country"
          nb_api_calls: "1"
          inner_queries:
          - query_id: "313453231"
            user_token: 93.189.166.128
            index_name: best_buy
          - query_id: "313453231"
            user_token: 93.189.166.128
            index_name: best_buy
          timestamp: 2023-03-08T12:34:56Z
      properties:
        logs:
          items:
            $ref: '#/components/schemas/log'
          type: array
      required:
      - logs
      title: getLogsResponse
      type: object
    getTaskResponse:
      additionalProperties: false
      example:
        status: null
      properties:
        status:
          $ref: '#/components/schemas/taskStatus'
      required:
      - status
      title: getTaskResponse
      type: object
    operationIndexParams:
      additionalProperties: false
      properties:
        operation:
          $ref: '#/components/schemas/operationType'
        destination:
          description: Algolia index name.
          example: products
          type: string
        scope:
          description: |-
            **This only applies to the _copy_ operation.**

            If you omit `scope`, the copy command copies all records, settings, synonyms, and rules.

            If you specify `scope`, only the specified scopes are copied.
          items:
            $ref: '#/components/schemas/scopeType'
          type: array
      required:
      - destination
      - operation
      title: operationIndexParams
      type: object
    aroundPrecisionFromValue_inner:
      properties:
        from:
          type: integer
        value:
          type: integer
      type: object
    RedirectRuleIndexMetadata_data:
      description: Redirect rule data.
      properties:
        ruleObjectID:
          type: string
      required:
      - ruleObjectID
      type: object
    exhaustive:
      description: Whether certain properties of the search response are calculated
        exhaustive (exact) or approximated.
      properties:
        facetsCount:
          description: "Whether the facet count is exhaustive (`true`) or approximate\
            \ (`false`). See the [related discussion](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-)."
          title: facetsCount
          type: boolean
        facetValues:
          description: The value is `false` if not all facet values are retrieved.
          title: facetValues
          type: boolean
        nbHits:
          description: "Whether the `nbHits` is exhaustive (`true`) or approximate\
            \ (`false`). When the query takes more than 50ms to be processed, the\
            \ engine makes an approximation. This can happen when using complex filters\
            \ on millions of records, when typo-tolerance was not exhaustive, or when\
            \ enough hits have been retrieved (for example, after the engine finds\
            \ 10,000 exact matches). `nbHits` is reported as non-exhaustive whenever\
            \ an approximation is made, even if the approximation didn’t, in the end,\
            \ impact the exhaustivity of the query."
          title: nbHits
          type: boolean
        rulesMatch:
          description: "Rules matching exhaustivity. The value is `false` if rules\
            \ were enable for this query, and could not be fully processed due a timeout.\
            \ This is generally caused by the number of alternatives (such as typos)\
            \ which is too large."
          title: rulesMatch
          type: boolean
        typo:
          description: Whether the typo search was exhaustive (`true`) or approximate
            (`false`). An approximation is done when the typo search query part takes
            more than 10% of the query budget (ie. 5ms by default) to be processed
            (this can happen when a lot of typo alternatives exist for the query).
            This field will not be included when typo-tolerance is entirely disabled.
          title: typo
          type: boolean
      title: exhaustive
      type: object
    facetsStats:
      properties:
        min:
          description: Minimum value in the results.
          format: double
          type: number
        max:
          description: Maximum value in the results.
          format: double
          type: number
        avg:
          description: Average facet value in the results.
          format: double
          type: number
        sum:
          description: Sum of all values in the results.
          format: double
          type: number
      title: facetStats
      type: object
    redirect:
      description: |
        [Redirect results to a URL](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/redirects/).
      properties:
        index:
          items:
            $ref: '#/components/schemas/RedirectRuleIndexMetadata'
          type: array
      title: redirect
      type: object
    facetHits:
      additionalProperties: false
      example:
        highlighted: <em>George</em> <em>Clo</em>oney
        count: 0
        value: Mobile phone
      properties:
        value:
          description: Facet value.
          example: Mobile phone
          type: string
        highlighted:
          description: Markup text with `facetQuery` matches highlighted.
          example: <em>George</em> <em>Clo</em>oney
          type: string
        count:
          description: "Number of records containing this facet value. This takes\
            \ into account the extra search parameters specified in the query. Like\
            \ for a regular search query, the [counts may not be exhaustive](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-)."
          type: integer
      required:
      - count
      - highlighted
      - value
      title: facetHits
      type: object
    consequenceHide:
      additionalProperties: false
      description: Unique identifier of the record to hide.
      example:
        objectID: product-1
      properties:
        objectID:
          description: Unique object identifier.
          example: product-1
          type: string
      required:
      - objectID
      title: consequenceHide
      type: object
  securitySchemes:
    appId:
      in: header
      name: X-Algolia-Application-Id
      type: apiKey
    apiKey:
      in: header
      name: X-Algolia-API-Key
      type: apiKey
x-tagGroups:
- name: Search and indexing
  tags:
  - Indices
  - Records
  - Search
- name: Relevance
  tags:
  - Rules
  - Synonyms
  - Dictionaries
- name: Others
  tags:
  - Api Keys
  - Clusters
  - Vaults
  - Advanced
- name: Models
  tags:
  - _model_index_settings

