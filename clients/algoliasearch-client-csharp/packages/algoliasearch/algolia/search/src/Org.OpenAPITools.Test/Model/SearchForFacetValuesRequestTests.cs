/*
 * Search API
 *
 * Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using Xunit;

using System;
using System.Linq;
using System.IO;
using System.Collections.Generic;
using Org.OpenAPITools.Model;
using Org.OpenAPITools.Client;
using System.Reflection;
using Newtonsoft.Json;

namespace Org.OpenAPITools.Test.Model
{
  /// <summary>
  ///  Class for testing SearchForFacetValuesRequest
  /// </summary>
  /// <remarks>
  /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
  /// Please update the test case below to test the model.
  /// </remarks>
  public class SearchForFacetValuesRequestTests : IDisposable
  {
    // TODO uncomment below to declare an instance variable for SearchForFacetValuesRequest
    //private SearchForFacetValuesRequest instance;

    public SearchForFacetValuesRequestTests()
    {
      // TODO uncomment below to create an instance of SearchForFacetValuesRequest
      //instance = new SearchForFacetValuesRequest();
    }

    public void Dispose()
    {
      // Cleanup when everything is done.
    }

    /// <summary>
    /// Test an instance of SearchForFacetValuesRequest
    /// </summary>
    [Fact]
    public void SearchForFacetValuesRequestInstanceTest()
    {
      // TODO uncomment below to test "IsType" SearchForFacetValuesRequest
      //Assert.IsType<SearchForFacetValuesRequest>(instance);
    }

    /// <summary>
    /// Test the property 'VarParams'
    /// </summary>
    [Fact]
    public void VarParamsTest()
    {
      // TODO unit test for the property 'VarParams'
    }

    /// <summary>
    /// Test the property 'FacetQuery'
    /// </summary>
    [Fact]
    public void FacetQueryTest()
    {
      // TODO unit test for the property 'FacetQuery'
    }

    /// <summary>
    /// Test the property 'MaxFacetHits'
    /// </summary>
    [Fact]
    public void MaxFacetHitsTest()
    {
      // TODO unit test for the property 'MaxFacetHits'
    }
  }
}
