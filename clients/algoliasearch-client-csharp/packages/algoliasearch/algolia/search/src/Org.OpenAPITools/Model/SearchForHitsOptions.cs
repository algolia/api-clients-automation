/*
 * Search API
 *
 * Use the Search REST API  to manage your data (indices and records), implement search, and improve relevance (with Rules, synonyms, and language dictionaries).  Although Algolia provides a REST API, you should use the official open source API [clients, libraries, and tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// SearchForHitsOptions
    /// </summary>
    [DataContract(Name = "searchForHitsOptions")]
    public partial class SearchForHitsOptions : IEquatable<SearchForHitsOptions>, IValidatableObject
    {

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public SearchTypeDefault? Type { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchForHitsOptions" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected SearchForHitsOptions() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchForHitsOptions" /> class.
        /// </summary>
        /// <param name="indexName">Algolia index name. (required).</param>
        /// <param name="type">type.</param>
        public SearchForHitsOptions(string indexName = default(string), SearchTypeDefault? type = default(SearchTypeDefault?))
        {
            // to ensure "indexName" is required (not null)
            if (indexName == null)
            {
                throw new ArgumentNullException("indexName is a required property for SearchForHitsOptions and cannot be null");
            }
            this.IndexName = indexName;
            this.Type = type;
        }

        /// <summary>
        /// Algolia index name.
        /// </summary>
        /// <value>Algolia index name.</value>
        /// <example>products</example>
        [DataMember(Name = "indexName", IsRequired = true, EmitDefaultValue = true)]
        public string IndexName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchForHitsOptions {\n");
            sb.Append("  IndexName: ").Append(IndexName).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as SearchForHitsOptions);
        }

        /// <summary>
        /// Returns true if SearchForHitsOptions instances are equal
        /// </summary>
        /// <param name="input">Instance of SearchForHitsOptions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchForHitsOptions input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.IndexName == input.IndexName ||
                    (this.IndexName != null &&
                    this.IndexName.Equals(input.IndexName))
                ) && 
                (
                    this.Type == input.Type ||
                    this.Type.Equals(input.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IndexName != null)
                {
                    hashCode = (hashCode * 59) + this.IndexName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Type.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
