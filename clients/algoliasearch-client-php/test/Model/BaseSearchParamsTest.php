<?php
/**
 * BaseSearchParamsTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Algolia\AlgoliaSearch
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search API
 *
 * API powering the Search feature of Algolia.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Algolia\AlgoliaSearch\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * BaseSearchParamsTest Class Doc Comment
 *
 * @category    Class
 * @description BaseSearchParams
 * @package     Algolia\AlgoliaSearch
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class BaseSearchParamsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "BaseSearchParams"
     */
    public function testBaseSearchParams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "similarQuery"
     */
    public function testPropertySimilarQuery()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "filters"
     */
    public function testPropertyFilters()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "facetFilters"
     */
    public function testPropertyFacetFilters()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "optionalFilters"
     */
    public function testPropertyOptionalFilters()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "numericFilters"
     */
    public function testPropertyNumericFilters()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "tagFilters"
     */
    public function testPropertyTagFilters()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sumOrFiltersScores"
     */
    public function testPropertySumOrFiltersScores()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "facets"
     */
    public function testPropertyFacets()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "maxValuesPerFacet"
     */
    public function testPropertyMaxValuesPerFacet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "facetingAfterDistinct"
     */
    public function testPropertyFacetingAfterDistinct()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "sortFacetValuesBy"
     */
    public function testPropertySortFacetValuesBy()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "page"
     */
    public function testPropertyPage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "offset"
     */
    public function testPropertyOffset()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "length"
     */
    public function testPropertyLength()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "aroundLatLng"
     */
    public function testPropertyAroundLatLng()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "aroundLatLngViaIP"
     */
    public function testPropertyAroundLatLngViaIP()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "aroundRadius"
     */
    public function testPropertyAroundRadius()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "aroundPrecision"
     */
    public function testPropertyAroundPrecision()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minimumAroundRadius"
     */
    public function testPropertyMinimumAroundRadius()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insideBoundingBox"
     */
    public function testPropertyInsideBoundingBox()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "insidePolygon"
     */
    public function testPropertyInsidePolygon()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "naturalLanguages"
     */
    public function testPropertyNaturalLanguages()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ruleContexts"
     */
    public function testPropertyRuleContexts()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "personalizationImpact"
     */
    public function testPropertyPersonalizationImpact()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "userToken"
     */
    public function testPropertyUserToken()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "getRankingInfo"
     */
    public function testPropertyGetRankingInfo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "clickAnalytics"
     */
    public function testPropertyClickAnalytics()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "analytics"
     */
    public function testPropertyAnalytics()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "analyticsTags"
     */
    public function testPropertyAnalyticsTags()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "percentileComputation"
     */
    public function testPropertyPercentileComputation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enableABTest"
     */
    public function testPropertyEnableABTest()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enableReRanking"
     */
    public function testPropertyEnableReRanking()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
