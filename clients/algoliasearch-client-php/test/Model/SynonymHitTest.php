<?php
/**
 * SynonymHitTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Algolia\AlgoliaSearch
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search API
 *
 * API powering the Search feature of Algolia.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Algolia\AlgoliaSearch\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * SynonymHitTest Class Doc Comment
 *
 * @category    Class
 * @description Synonym object.
 * @package     Algolia\AlgoliaSearch
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class SynonymHitTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "SynonymHit"
     */
    public function testSynonymHit()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "objectID"
     */
    public function testPropertyObjectID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "type"
     */
    public function testPropertyType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "synonyms"
     */
    public function testPropertySynonyms()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "input"
     */
    public function testPropertyInput()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "word"
     */
    public function testPropertyWord()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "corrections"
     */
    public function testPropertyCorrections()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "placeholder"
     */
    public function testPropertyPlaceholder()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "replacements"
     */
    public function testPropertyReplacements()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "highlightResult"
     */
    public function testPropertyHighlightResult()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
