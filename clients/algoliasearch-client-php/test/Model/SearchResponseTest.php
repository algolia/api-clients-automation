<?php
/**
 * SearchResponseTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Algolia\AlgoliaSearch
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search API
 *
 * API powering the Search feature of Algolia.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Algolia\AlgoliaSearch\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * SearchResponseTest Class Doc Comment
 *
 * @category    Class
 * @description SearchResponse
 * @package     Algolia\AlgoliaSearch
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class SearchResponseTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "SearchResponse"
     */
    public function testSearchResponse()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "abTestID"
     */
    public function testPropertyAbTestID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "abTestVariantID"
     */
    public function testPropertyAbTestVariantID()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "aroundLatLng"
     */
    public function testPropertyAroundLatLng()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "automaticRadius"
     */
    public function testPropertyAutomaticRadius()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "exhaustiveFacetsCount"
     */
    public function testPropertyExhaustiveFacetsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "exhaustiveNbHits"
     */
    public function testPropertyExhaustiveNbHits()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "exhaustiveTypo"
     */
    public function testPropertyExhaustiveTypo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "facets"
     */
    public function testPropertyFacets()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "facetsStats"
     */
    public function testPropertyFacetsStats()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hitsPerPage"
     */
    public function testPropertyHitsPerPage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "index"
     */
    public function testPropertyIndex()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "indexUsed"
     */
    public function testPropertyIndexUsed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "message"
     */
    public function testPropertyMessage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "nbHits"
     */
    public function testPropertyNbHits()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "nbPages"
     */
    public function testPropertyNbPages()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "nbSortedHits"
     */
    public function testPropertyNbSortedHits()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "page"
     */
    public function testPropertyPage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "params"
     */
    public function testPropertyParams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "parsedQuery"
     */
    public function testPropertyParsedQuery()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "processingTimeMS"
     */
    public function testPropertyProcessingTimeMS()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "query"
     */
    public function testPropertyQuery()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "queryAfterRemoval"
     */
    public function testPropertyQueryAfterRemoval()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "serverUsed"
     */
    public function testPropertyServerUsed()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "userData"
     */
    public function testPropertyUserData()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hits"
     */
    public function testPropertyHits()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
