<?php
/**
 * IndexSettingsAsSearchParamsTest
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  Algolia\AlgoliaSearch
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Search API
 *
 * API powering the Search feature of Algolia.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.3.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace Algolia\AlgoliaSearch\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * IndexSettingsAsSearchParamsTest Class Doc Comment
 *
 * @category    Class
 * @description IndexSettingsAsSearchParams
 * @package     Algolia\AlgoliaSearch
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class IndexSettingsAsSearchParamsTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "IndexSettingsAsSearchParams"
     */
    public function testIndexSettingsAsSearchParams()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "searchableAttributes"
     */
    public function testPropertySearchableAttributes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "attributesForFaceting"
     */
    public function testPropertyAttributesForFaceting()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "unretrievableAttributes"
     */
    public function testPropertyUnretrievableAttributes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "attributesToRetrieve"
     */
    public function testPropertyAttributesToRetrieve()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "restrictSearchableAttributes"
     */
    public function testPropertyRestrictSearchableAttributes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ranking"
     */
    public function testPropertyRanking()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "customRanking"
     */
    public function testPropertyCustomRanking()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "relevancyStrictness"
     */
    public function testPropertyRelevancyStrictness()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "attributesToHighlight"
     */
    public function testPropertyAttributesToHighlight()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "attributesToSnippet"
     */
    public function testPropertyAttributesToSnippet()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "highlightPreTag"
     */
    public function testPropertyHighlightPreTag()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "highlightPostTag"
     */
    public function testPropertyHighlightPostTag()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "snippetEllipsisText"
     */
    public function testPropertySnippetEllipsisText()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "restrictHighlightAndSnippetArrays"
     */
    public function testPropertyRestrictHighlightAndSnippetArrays()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "hitsPerPage"
     */
    public function testPropertyHitsPerPage()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minWordSizefor1Typo"
     */
    public function testPropertyMinWordSizefor1Typo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minWordSizefor2Typos"
     */
    public function testPropertyMinWordSizefor2Typos()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "typoTolerance"
     */
    public function testPropertyTypoTolerance()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "allowTyposOnNumericTokens"
     */
    public function testPropertyAllowTyposOnNumericTokens()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "disableTypoToleranceOnAttributes"
     */
    public function testPropertyDisableTypoToleranceOnAttributes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "separatorsToIndex"
     */
    public function testPropertySeparatorsToIndex()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "ignorePlurals"
     */
    public function testPropertyIgnorePlurals()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "removeStopWords"
     */
    public function testPropertyRemoveStopWords()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "keepDiacriticsOnCharacters"
     */
    public function testPropertyKeepDiacriticsOnCharacters()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "queryLanguages"
     */
    public function testPropertyQueryLanguages()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "decompoundQuery"
     */
    public function testPropertyDecompoundQuery()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enableRules"
     */
    public function testPropertyEnableRules()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "enablePersonalization"
     */
    public function testPropertyEnablePersonalization()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "queryType"
     */
    public function testPropertyQueryType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "removeWordsIfNoResults"
     */
    public function testPropertyRemoveWordsIfNoResults()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "advancedSyntax"
     */
    public function testPropertyAdvancedSyntax()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "optionalWords"
     */
    public function testPropertyOptionalWords()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "disableExactOnAttributes"
     */
    public function testPropertyDisableExactOnAttributes()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "exactOnSingleWordQuery"
     */
    public function testPropertyExactOnSingleWordQuery()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "alternativesAsExact"
     */
    public function testPropertyAlternativesAsExact()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "advancedSyntaxFeatures"
     */
    public function testPropertyAdvancedSyntaxFeatures()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "distinct"
     */
    public function testPropertyDistinct()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "synonyms"
     */
    public function testPropertySynonyms()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "replaceSynonymsInHighlight"
     */
    public function testPropertyReplaceSynonymsInHighlight()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "minProximity"
     */
    public function testPropertyMinProximity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "responseFields"
     */
    public function testPropertyResponseFields()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "maxFacetHits"
     */
    public function testPropertyMaxFacetHits()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "attributeCriteriaComputedByMinProximity"
     */
    public function testPropertyAttributeCriteriaComputedByMinProximity()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "renderingContent"
     */
    public function testPropertyRenderingContent()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
