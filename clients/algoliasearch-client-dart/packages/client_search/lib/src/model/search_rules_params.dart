// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algolia_client_search/src/model/anchoring.dart';

import 'package:json_annotation/json_annotation.dart';

part 'search_rules_params.g.dart';

@JsonSerializable()
final class SearchRulesParams {
  /// Returns a new [SearchRulesParams] instance.
  const SearchRulesParams({
    this.query,
    this.anchoring,
    this.context,
    this.page,
    this.hitsPerPage,
    this.enabled,
  });

  /// Search query for rules.
  @JsonKey(name: r'query')
  final String? query;

  @JsonKey(name: r'anchoring')
  final Anchoring? anchoring;

  /// Only return rules that match the context (exact match).
  @JsonKey(name: r'context')
  final String? context;

  /// Requested page of the API response.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.
  // minimum: 0
  @JsonKey(name: r'page')
  final int? page;

  /// Maximum number of hits per page.  Algolia uses `page` and `hitsPerPage` to control how search results are displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).  - `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second is `page=1`, and so on.  For example, to display 10 results per page starting from the third page, set `hitsPerPage` to 10 and `page` to 2.
  // minimum: 1
  // maximum: 1000
  @JsonKey(name: r'hitsPerPage')
  final int? hitsPerPage;

  /// If `true`, return only enabled rules. If `false`, return only inactive rules. By default, _all_ rules are returned.
  @JsonKey(name: r'enabled')
  final bool? enabled;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SearchRulesParams &&
          other.query == query &&
          other.anchoring == anchoring &&
          other.context == context &&
          other.page == page &&
          other.hitsPerPage == hitsPerPage &&
          other.enabled == enabled;

  @override
  int get hashCode =>
      query.hashCode +
      anchoring.hashCode +
      context.hashCode +
      page.hashCode +
      hitsPerPage.hashCode +
      (enabled == null ? 0 : enabled.hashCode);

  factory SearchRulesParams.fromJson(Map<String, dynamic> json) =>
      _$SearchRulesParamsFromJson(json);

  Map<String, dynamic> toJson() => _$SearchRulesParamsToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
