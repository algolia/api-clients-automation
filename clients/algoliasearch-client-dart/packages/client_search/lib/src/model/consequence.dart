// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algolia_client_search/src/model/consequence_params.dart';
import 'package:algolia_client_search/src/model/consequence_hide.dart';

import 'package:json_annotation/json_annotation.dart';

part 'consequence.g.dart';

@JsonSerializable()
final class Consequence {
  /// Returns a new [Consequence] instance.
  const Consequence({
    this.params,
    this.promote,
    this.filterPromotes,
    this.hide,
    this.userData,
  });

  @JsonKey(name: r'params')
  final ConsequenceParams? params;

  /// Records you want to pin to a specific position in the search results.  You can promote up to 300 records, either individually, or as groups of up to 100 records each.
  /// One of types:
  /// - [PromoteObjectIDs]
  /// - [PromoteObjectID]
  @JsonKey(name: r'promote')
  final Iterable<dynamic>? promote;

  /// Determines whether promoted records must also match active filters for the consequence to apply.  This ensures user-applied filters take priority and irrelevant matches aren't shown. For example, if you promote a record with `color: red` but the user filters for `color: blue`, the \"red\" record won't be shown.  > In the Algolia dashboard, when you use the **Pin an item** consequence, `filterPromotes` appears as the checkbox: **Pinned items must match active filters to be displayed.** For examples, see [Promote results with rules](https://www.algolia.com/doc/guides/managing-results/rules/merchandising-and-promoting/how-to/promote-hits/#promote-results-matching-active-filters).
  @JsonKey(name: r'filterPromotes')
  final bool? filterPromotes;

  /// Records you want to hide from the search results.
  @JsonKey(name: r'hide')
  final List<ConsequenceHide>? hide;

  /// A JSON object with custom data that will be appended to the `userData` array in the response. This object isn't interpreted by the API and is limited to 1&nbsp;kB of minified JSON.
  @JsonKey(name: r'userData')
  final Object? userData;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Consequence &&
          other.params == params &&
          other.promote == promote &&
          other.filterPromotes == filterPromotes &&
          other.hide == hide &&
          other.userData == userData;

  @override
  int get hashCode =>
      params.hashCode +
      promote.hashCode +
      filterPromotes.hashCode +
      hide.hashCode +
      userData.hashCode;

  factory Consequence.fromJson(Map<String, dynamic> json) =>
      _$ConsequenceFromJson(json);

  Map<String, dynamic> toJson() => _$ConsequenceToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
