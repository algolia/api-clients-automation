// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algolia_client_abtesting_v3/src/model/metric_metadata.dart';

import 'package:json_annotation/json_annotation.dart';

part 'metric_result.g.dart';

@JsonSerializable()
final class MetricResult {
  /// Returns a new [MetricResult] instance.
  const MetricResult({
    required this.name,
    required this.updatedAt,
    required this.value,
    this.valueCIHigh,
    this.valueCILow,
    required this.pValue,
    this.dimension,
    this.metadata,
    this.criticalValue,
    this.significant,
  });

  @JsonKey(name: r'name')
  final String name;

  /// Date and time when the metric was last updated, in RFC 3339 format.
  @JsonKey(name: r'updatedAt')
  final String updatedAt;

  @JsonKey(name: r'value')
  final double value;

  /// The upper bound of the 95% confidence interval for the metric value. The confidence interval is calculated using either the relative ratio or relative difference between the metric values for the control and the variant. Relative ratio is used for metrics that are ratios (e.g., click-through rate, conversion rate), while relative difference is used for continuous metrics (e.g., revenue).
  @JsonKey(name: r'valueCIHigh')
  final double? valueCIHigh;

  /// The lower bound of the 95% confidence interval for the metric value. The confidence interval is calculated using either the relative ratio or relative difference between the metric values for the control and the variant. Relative ratio is used for metrics that are ratios (e.g., click-through rate, conversion rate), while relative difference is used for continuous metrics (e.g., revenue).
  @JsonKey(name: r'valueCILow')
  final double? valueCILow;

  /// PValue for the first variant (control) will always be 0. For the other variants, pValue is calculated for the current variant based on the control.
  @JsonKey(name: r'pValue')
  final double pValue;

  /// Dimension defined during test creation.
  @JsonKey(name: r'dimension')
  final String? dimension;

  @JsonKey(name: r'metadata')
  final MetricMetadata? metadata;

  /// The value that was computed during error correction. It is used to determine significance of the metric pValue. The critical value is calculated using Bonferroni or Benjamini-Hochberg corrections, based on the given configuration during the A/B test creation.
  @JsonKey(name: r'criticalValue')
  final double? criticalValue;

  /// Whether the pValue is significant or not based on the critical value and the error correction algorithm used.
  @JsonKey(name: r'significant')
  final bool? significant;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is MetricResult &&
          other.name == name &&
          other.updatedAt == updatedAt &&
          other.value == value &&
          other.valueCIHigh == valueCIHigh &&
          other.valueCILow == valueCILow &&
          other.pValue == pValue &&
          other.dimension == dimension &&
          other.metadata == metadata &&
          other.criticalValue == criticalValue &&
          other.significant == significant;

  @override
  int get hashCode =>
      name.hashCode +
      updatedAt.hashCode +
      value.hashCode +
      valueCIHigh.hashCode +
      valueCILow.hashCode +
      pValue.hashCode +
      dimension.hashCode +
      metadata.hashCode +
      criticalValue.hashCode +
      significant.hashCode;

  factory MetricResult.fromJson(Map<String, dynamic> json) =>
      _$MetricResultFromJson(json);

  Map<String, dynamic> toJson() => _$MetricResultToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
