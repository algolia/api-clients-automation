// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
// ignore_for_file: unused_element
import 'package:algolia_client_composition/src/model/facet_hits.dart';

import 'package:json_annotation/json_annotation.dart';

part 'search_for_facet_values_results.g.dart';

@JsonSerializable()
final class SearchForFacetValuesResults {
  /// Returns a new [SearchForFacetValuesResults] instance.
  const SearchForFacetValuesResults({
    required this.indexName,
    required this.facetHits,
    required this.exhaustiveFacetsCount,
    this.processingTimeMS,
  });

  @JsonKey(name: r'indexName')
  final String indexName;

  /// Matching facet values.
  @JsonKey(name: r'facetHits')
  final List<FacetHits> facetHits;

  /// Whether the facet count is exhaustive (true) or approximate (false). For more information, see [Why are my facet and hit counts not accurate](https://support.algolia.com/hc/en-us/articles/4406975248145-Why-are-my-facet-and-hit-counts-not-accurate-).
  @JsonKey(name: r'exhaustiveFacetsCount')
  final bool exhaustiveFacetsCount;

  /// Time the server took to process the request, in milliseconds.
  @JsonKey(name: r'processingTimeMS')
  final int? processingTimeMS;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is SearchForFacetValuesResults &&
          other.indexName == indexName &&
          other.facetHits == facetHits &&
          other.exhaustiveFacetsCount == exhaustiveFacetsCount &&
          other.processingTimeMS == processingTimeMS;

  @override
  int get hashCode =>
      indexName.hashCode +
      facetHits.hashCode +
      exhaustiveFacetsCount.hashCode +
      processingTimeMS.hashCode;

  factory SearchForFacetValuesResults.fromJson(Map<String, dynamic> json) =>
      _$SearchForFacetValuesResultsFromJson(json);

  Map<String, dynamic> toJson() => _$SearchForFacetValuesResultsToJson(this);

  @override
  String toString() {
    return toJson().toString();
  }
}
