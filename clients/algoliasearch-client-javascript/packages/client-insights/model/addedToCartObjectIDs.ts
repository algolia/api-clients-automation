// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import type { AddToCartEvent } from './addToCartEvent';
import type { ConversionEvent } from './conversionEvent';
import type { ObjectData } from './objectData';
import type { Value } from './value';

/**
 * Use this event to track when users add items to their shopping cart unrelated to a previous Algolia request. For example, if you don\'t use Algolia to build your category pages, use this event.  To track add-to-cart events related to Algolia requests, use the \"Added to cart object IDs after search\" event.
 */
export type AddedToCartObjectIDs = {
  /**
   * The name of the event, up to 64 ASCII characters.  Consider naming events consistentlyâ€”for example, by adopting Segment\'s [object-action](https://segment.com/academy/collecting-data/naming-conventions-for-clean-data/#the-object-action-framework) framework.
   */
  eventName: string;

  eventType: ConversionEvent;

  eventSubtype: AddToCartEvent;

  /**
   * The name of an Algolia index.
   */
  index: string;

  /**
   * The object IDs of the records that are part of the event.
   */
  objectIDs: string[];

  /**
   * An anonymous or pseudonymous user identifier.  > **Note**: Never include personally identifiable information in user tokens.
   */
  userToken: string;

  /**
   * An identifier for authenticated users.  > **Note**: Never include personally identifiable information in user tokens.
   */
  authenticatedUserToken?: string;

  /**
   * Three-letter [currency code](https://www.iso.org/iso-4217-currency-codes.html).
   */
  currency?: string;

  /**
   * Extra information about the records involved in a purchase or add-to-cart event.  If specified, it must have the same length as `objectIDs`.
   */
  objectData?: ObjectData[];

  /**
   * The timestamp of the event in milliseconds in [Unix epoch time](https://wikipedia.org/wiki/Unix_time). By default, the Insights API uses the time it receives an event as its timestamp.
   */
  timestamp?: number;

  value?: Value;
};
