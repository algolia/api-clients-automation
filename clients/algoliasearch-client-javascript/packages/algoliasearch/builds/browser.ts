// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import type { AbtestingClient, Region as AbtestingRegion } from '@algolia/client-abtesting';
import { abtestingClient } from '@algolia/client-abtesting';
import type { AnalyticsClient, Region as AnalyticsRegion } from '@algolia/client-analytics';
import { analyticsClient } from '@algolia/client-analytics';
import {
  DEFAULT_CONNECT_TIMEOUT_BROWSER,
  DEFAULT_READ_TIMEOUT_BROWSER,
  DEFAULT_WRITE_TIMEOUT_BROWSER,
  createBrowserLocalStorageCache,
  createFallbackableCache,
  createMemoryCache,
} from '@algolia/client-common';
import type { ClientOptions } from '@algolia/client-common';
import type { PersonalizationClient, Region as PersonalizationRegion } from '@algolia/client-personalization';
import { personalizationClient } from '@algolia/client-personalization';
import { searchClient } from '@algolia/client-search';
import type { RecommendClient } from '@algolia/recommend';
import { recommendClient } from '@algolia/recommend';
import { createXhrRequester } from '@algolia/requester-browser-xhr';

import type { InitClientOptions, InitClientRegion } from './models';
import { apiClientVersion } from './models';

export * from './models';

/**
 * The client type.
 */
export type Algoliasearch = ReturnType<typeof algoliasearch>;

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export function algoliasearch(appId: string, apiKey: string, options?: ClientOptions) {
  if (!appId || typeof appId !== 'string') {
    throw new Error('`appId` is missing.');
  }

  if (!apiKey || typeof apiKey !== 'string') {
    throw new Error('`apiKey` is missing.');
  }
  function initRecommend(initOptions: InitClientOptions = {}): RecommendClient {
    return recommendClient(initOptions.appId || appId, initOptions.apiKey || apiKey, initOptions.options);
  }

  function initAnalytics(initOptions: InitClientOptions & InitClientRegion<AnalyticsRegion> = {}): AnalyticsClient {
    return analyticsClient(
      initOptions.appId || appId,
      initOptions.apiKey || apiKey,
      initOptions.region,
      initOptions.options,
    );
  }

  function initAbtesting(initOptions: InitClientOptions & InitClientRegion<AbtestingRegion> = {}): AbtestingClient {
    return abtestingClient(
      initOptions.appId || appId,
      initOptions.apiKey || apiKey,
      initOptions.region,
      initOptions.options,
    );
  }

  function initPersonalization(
    initOptions: InitClientOptions & Required<InitClientRegion<PersonalizationRegion>>,
  ): PersonalizationClient {
    return personalizationClient(
      initOptions.appId || appId,
      initOptions.apiKey || apiKey,
      initOptions.region,
      initOptions.options,
    );
  }

  return {
    ...searchClient(appId, apiKey, {
      timeouts: {
        connect: DEFAULT_CONNECT_TIMEOUT_BROWSER,
        read: DEFAULT_READ_TIMEOUT_BROWSER,
        write: DEFAULT_WRITE_TIMEOUT_BROWSER,
      },
      requester: createXhrRequester(),
      algoliaAgents: [{ segment: 'Browser' }],
      authMode: 'WithinQueryParameters',
      responsesCache: createMemoryCache(),
      requestsCache: createMemoryCache({ serializable: false }),
      hostsCache: createFallbackableCache({
        caches: [createBrowserLocalStorageCache({ key: `${apiClientVersion}-${appId}` }), createMemoryCache()],
      }),
      ...options,
    }),
    /**
     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.
     */
    get _ua(): string {
      return this.transporter.algoliaAgent.value;
    },
    initAbtesting,
    initAnalytics,
    initPersonalization,
    initRecommend,
  };
}
