// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import { createHmac } from 'crypto';

import type { AbtestingClient } from '@algolia/client-abtesting';
import type { Region as AbtestingRegion } from '@algolia/client-abtesting/src/abtestingClient';
import {
  createAbtestingClient,
  REGIONS as abtestingRegions,
} from '@algolia/client-abtesting/src/abtestingClient';
import type { AnalyticsClient } from '@algolia/client-analytics';
import {
  createAnalyticsClient,
  REGIONS as analyticsRegions,
} from '@algolia/client-analytics/src/analyticsClient';
import type { Region as AnalyticsRegion } from '@algolia/client-analytics/src/analyticsClient';
import {
  DEFAULT_CONNECT_TIMEOUT_NODE,
  DEFAULT_READ_TIMEOUT_NODE,
  DEFAULT_WRITE_TIMEOUT_NODE,
  createMemoryCache,
  createNullCache,
  serializeQueryParameters,
} from '@algolia/client-common';
import type {
  ClientOptions,
  CreateClientOptions,
} from '@algolia/client-common';
import type { PersonalizationClient } from '@algolia/client-personalization';
import type { Region as PersonalizationRegion } from '@algolia/client-personalization/src/personalizationClient';
import {
  createPersonalizationClient,
  REGIONS as personalizationRegions,
} from '@algolia/client-personalization/src/personalizationClient';
import {
  createSearchClient,
  apiClientVersion as searchClientVersion,
} from '@algolia/client-search/src/searchClient';
import type { RecommendClient } from '@algolia/recommend';
import { createRecommendClient } from '@algolia/recommend/src/recommendClient';
import { createHttpRequester } from '@algolia/requester-node-http';

import type {
  InitClientOptions,
  InitClientRegion,
  GenerateSecuredApiKeyOptions,
  GetSecuredApiKeyRemainingValidityOptions,
} from './models';

export * from './models';

export const apiClientVersion = searchClientVersion;

/**
 * The client type.
 */
export type Algoliasearch = ReturnType<typeof algoliasearch>;

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export function algoliasearch(
  appId: string,
  apiKey: string,
  options?: ClientOptions
) {
  if (!appId || typeof appId !== 'string') {
    throw new Error('`appId` is missing.');
  }

  if (!apiKey || typeof apiKey !== 'string') {
    throw new Error('`apiKey` is missing.');
  }
  const commonOptions: CreateClientOptions = {
    apiKey,
    appId,
    timeouts: {
      connect: DEFAULT_CONNECT_TIMEOUT_NODE,
      read: DEFAULT_READ_TIMEOUT_NODE,
      write: DEFAULT_WRITE_TIMEOUT_NODE,
    },
    requester: createHttpRequester(),
    algoliaAgents: [{ segment: 'Node.js', version: process.versions.node }],
    responsesCache: createNullCache(),
    requestsCache: createNullCache(),
    hostsCache: createMemoryCache(),
    ...options,
  };

  function initRecommend(initOptions: InitClientOptions = {}): RecommendClient {
    return createRecommendClient({
      ...commonOptions,
      ...initOptions.options,
      ...initOptions,
    });
  }

  function initAnalytics(
    initOptions: InitClientOptions & InitClientRegion<AnalyticsRegion> = {}
  ): AnalyticsClient {
    if (
      initOptions.region &&
      (typeof initOptions.region !== 'string' ||
        !analyticsRegions.includes(initOptions.region))
    ) {
      throw new Error(
        `\`region\` must be one of the following: ${analyticsRegions.join(', ')}`
      );
    }

    return createAnalyticsClient({
      ...commonOptions,
      ...initOptions.options,
      ...initOptions,
    });
  }

  function initAbtesting(
    initOptions: InitClientOptions & InitClientRegion<AbtestingRegion> = {}
  ): AbtestingClient {
    if (
      initOptions.region &&
      (typeof initOptions.region !== 'string' ||
        !abtestingRegions.includes(initOptions.region))
    ) {
      throw new Error(
        `\`region\` must be one of the following: ${abtestingRegions.join(', ')}`
      );
    }

    return createAbtestingClient({
      ...commonOptions,
      ...initOptions.options,
      ...initOptions,
    });
  }

  function initPersonalization(
    initOptions: InitClientOptions &
      Required<InitClientRegion<PersonalizationRegion>>
  ): PersonalizationClient {
    if (
      !initOptions.region ||
      (initOptions.region &&
        (typeof initOptions.region !== 'string' ||
          !personalizationRegions.includes(initOptions.region)))
    ) {
      throw new Error(
        `\`region\` is required and must be one of the following: ${personalizationRegions.join(', ')}`
      );
    }

    return createPersonalizationClient({
      ...commonOptions,
      ...initOptions.options,
      ...initOptions,
    });
  }

  return {
    ...createSearchClient(commonOptions),
    /**
     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.
     */
    get _ua(): string {
      return this.transporter.algoliaAgent.value;
    },
    initAbtesting,
    initAnalytics,
    initPersonalization,
    initRecommend,
    /**
     * Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.
     *
     * @summary Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.
     * @param generateSecuredApiKey - The `generateSecuredApiKey` object.
     * @param generateSecuredApiKey.parentApiKey - The base API key from which to generate the new secured one.
     * @param generateSecuredApiKey.restrictions - A set of properties defining the restrictions of the secured API key.
     */
    generateSecuredApiKey({
      parentApiKey,
      restrictions = {},
    }: GenerateSecuredApiKeyOptions): string {
      let mergedRestrictions = restrictions;
      if (restrictions.searchParams) {
        // merge searchParams with the root restrictions
        mergedRestrictions = {
          ...restrictions,
          ...restrictions.searchParams,
        };

        delete mergedRestrictions.searchParams;
      }

      mergedRestrictions = Object.keys(mergedRestrictions)
        .sort()
        .reduce(
          (acc, key) => {
            // eslint-disable-next-line no-param-reassign
            acc[key] = (mergedRestrictions as any)[key];
            return acc;
          },
          {} as Record<string, unknown>
        );

      const queryParameters = serializeQueryParameters(mergedRestrictions);
      return Buffer.from(
        createHmac('sha256', parentApiKey)
          .update(queryParameters)
          .digest('hex') + queryParameters
      ).toString('base64');
    },

    /**
     * Helper: Retrieves the remaining validity of the previous generated `securedApiKey`, the `ValidUntil` parameter must have been provided.
     *
     * @summary Helper: Retrieves the remaining validity of the previous generated `secured_api_key`, the `ValidUntil` parameter must have been provided.
     * @param getSecuredApiKeyRemainingValidity - The `getSecuredApiKeyRemainingValidity` object.
     * @param getSecuredApiKeyRemainingValidity.securedApiKey - The secured API key generated with the `generateSecuredApiKey` method.
     */
    getSecuredApiKeyRemainingValidity({
      securedApiKey,
    }: GetSecuredApiKeyRemainingValidityOptions): number {
      const decodedString = Buffer.from(securedApiKey, 'base64').toString(
        'ascii'
      );
      const regex = /validUntil=(\d+)/;
      const match = decodedString.match(regex);

      if (match === null) {
        throw new Error('validUntil not found in given secured api key.');
      }

      return parseInt(match[1], 10) - Math.round(new Date().getTime() / 1000);
    },
  };
}
