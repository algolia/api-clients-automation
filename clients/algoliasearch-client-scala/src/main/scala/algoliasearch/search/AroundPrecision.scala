/** Search API Use the Search REST API to manage your data (indices and records), implement search, and improve
  * relevance (with Rules, synonyms, and language dictionaries). Although Algolia provides a REST API, you should use
  * the official open source API [clients, libraries, and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no
  * [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.search

import org.json4s._

/** Precision of a geographical search (in meters), to [group results that are more or less the same distance from a
  * central
  * point](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/in-depth/geo-ranking-precision/).
  */
sealed trait AroundPrecision

object AroundPrecision {

  case class IntValue(value: Int) extends AroundPrecision
  case class SeqOfAroundPrecisionFromValueInner(value: Seq[AroundPrecisionFromValueInner]) extends AroundPrecision

  def apply(value: Int): AroundPrecision = {
    AroundPrecision.IntValue(value)
  }
  def apply(value: Seq[AroundPrecisionFromValueInner]): AroundPrecision = {
    AroundPrecision.SeqOfAroundPrecisionFromValueInner(value)
  }
}

object AroundPrecisionSerializer extends Serializer[AroundPrecision] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), AroundPrecision] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[AroundPrecision] =>
      json match {
        case JInt(value)                  => AroundPrecision.IntValue(value.toInt)
        case JArray(value: List[JObject]) => AroundPrecision.SeqOfAroundPrecisionFromValueInner(value.map(_.extract))
        case _                            => throw new MappingException("Can't convert " + json + " to AroundPrecision")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value =>
    Extraction.decompose(value)(format - this)
  }
}
