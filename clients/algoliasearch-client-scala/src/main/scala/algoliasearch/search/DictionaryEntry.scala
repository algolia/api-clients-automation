/** Search API Use the Search REST API to manage your data (indices and records), implement search, and improve
  * relevance (with Rules, synonyms, and language dictionaries). Although Algolia provides a REST API, you should use
  * the official open source API [clients, libraries, and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no
  * [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.search

import algoliasearch.search.DictionaryEntryState._

import org.json4s.MonadicJValue.jvalueToMonadic
import org.json4s.{Extraction, Formats, JField, JObject, JValue, Serializer, TypeInfo}

/** Dictionary entry.
  *
  * @param objectID
  *   Unique identifier for a dictionary object.
  * @param language
  *   [Supported language ISO
  *   code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/).
  * @param word
  *   Dictionary entry word. Usage depends on the type of dictionary entry. **`stopwordEntry`** The stop word you want
  *   to add or update. If the entry already exists in Algolia's standard dictionary, you can override its behavior by
  *   adding it to the custom dictionary and setting its `state` to `disabled`. **`compoundEntry`** When `decomposition`
  *   is empty: adds `word` as a compound atom. For example, atom “kino” decomposes the query “kopfkino” into \"kopf\"
  *   and \"kino\". When `decomposition` isn't empty: creates a decomposition exception. For example, when decomposition
  *   is set to the [\"hund\", \"hutte\"] exception, \"hundehutte\" decomposes into “hund” and “hutte”, discarding the
  *   linking \"e\".
  * @param words
  *   Compound dictionary [word
  *   declensions](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/).
  *   If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the
  *   custom dictionary and setting its `state` to `disabled`.
  * @param decomposition
  *   For compound entries, governs the behavior of the `word` parameter.
  */
case class DictionaryEntry(
    objectID: String,
    language: String,
    word: Option[String] = scala.None,
    words: Option[Seq[String]] = scala.None,
    decomposition: Option[Seq[String]] = scala.None,
    state: Option[DictionaryEntryState] = scala.None,
    additionalProperties: Option[List[JField]] = None
)

class DictionaryEntrySerializer extends Serializer[DictionaryEntry] {

  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), DictionaryEntry] = {
    case (TypeInfo(clazz, _), json) if clazz == classOf[DictionaryEntry] =>
      json match {
        case jobject: JObject =>
          val formats = format - this
          val mf = manifest[DictionaryEntry]
          val obj = Extraction.extract[DictionaryEntry](jobject)(formats, mf)

          val fields = Set("objectID", "language", "word", "words", "decomposition", "state")
          val additionalProperties = jobject removeField {
            case (name, _) if fields.contains(name) => true
            case _                                  => false
          }
          additionalProperties.values match {
            case JObject(fieldsList) => obj copy (additionalProperties = Some(fieldsList))
            case _                   => obj
          }
        case _ => throw new IllegalArgumentException(s"Can't deserialize $json as DictionaryEntry")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: DictionaryEntry =>
    val formats = format - this // remove current serializer from formats to avoid stackoverflow
    value.additionalProperties match {
      case Some(fields) => Extraction.decompose(value.copy(additionalProperties = None))(formats) merge JObject(fields)
      case None         => Extraction.decompose(value)(formats)
    }
  }
}
