/** Search API Use the Search REST API to manage your data (indices and records), implement search, and improve
  * relevance (with Rules, synonyms, and language dictionaries). Although Algolia provides a REST API, you should use
  * the official open source API [clients, libraries, and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no
  * [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.search

import algoliasearch.search.Anchoring._

/** Rules search parameters.
  *
  * @param query
  *   Rule object query.
  * @param context
  *   Restricts responses to the specified [contextual
  *   rule](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#creating-contextual-rules).
  * @param page
  *   Requested page (the first page is page 0).
  * @param hitsPerPage
  *   Maximum number of hits per page.
  * @param enabled
  *   Restricts responses to enabled rules. When not specified (default), _all_ rules are retrieved.
  * @param requestOptions
  *   Request options to send with the API call.
  */
case class SearchRulesParams(
    query: Option[String] = scala.None,
    anchoring: Option[Anchoring] = scala.None,
    context: Option[String] = scala.None,
    page: Option[Int] = scala.None,
    hitsPerPage: Option[Int] = scala.None,
    enabled: Option[Boolean] = scala.None,
    requestOptions: Option[Seq[Any]] = scala.None
)
