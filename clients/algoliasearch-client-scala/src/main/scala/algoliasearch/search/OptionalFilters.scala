/** Search API Use the Search REST API to manage your data (indices and records), implement search, and improve
  * relevance (with Rules, synonyms, and language dictionaries). Although Algolia provides a REST API, you should use
  * the official open source API [clients, libraries, and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no
  * [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.search

import org.json4s._

/** Create filters to boost or demote records. Records that match the filter are ranked higher for positive and lower
  * for negative optional filters. In contrast to regular filters, records that don't match the optional filter are
  * still included in the results, only their ranking is affected.
  */
sealed trait OptionalFilters

object OptionalFilters {

  case class SeqOfMixedSearchFilters(value: Seq[MixedSearchFilters]) extends OptionalFilters
  case class StringValue(value: String) extends OptionalFilters

  def apply(value: Seq[MixedSearchFilters]): OptionalFilters = {
    OptionalFilters.SeqOfMixedSearchFilters(value)
  }
  def apply(value: String): OptionalFilters = {
    OptionalFilters.StringValue(value)
  }
}

object OptionalFiltersSerializer extends Serializer[OptionalFilters] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), OptionalFilters] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[OptionalFilters] =>
      json match {
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) =>
          OptionalFilters.SeqOfMixedSearchFilters(value.map(_.extract))
        case JString(value) => OptionalFilters.StringValue(value)
        case _              => throw new MappingException("Can't convert " + json + " to OptionalFilters")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: OptionalFilters =>
    value match {
      case OptionalFilters.SeqOfMixedSearchFilters(value) => JArray(value.map(Extraction.decompose).toList)
      case OptionalFilters.StringValue(value)             => JString(value)
    }
  }
}
