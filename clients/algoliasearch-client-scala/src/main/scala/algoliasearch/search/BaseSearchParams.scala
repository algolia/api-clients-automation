/** Search API Use the Search REST API to manage your data (indices and records), implement search, and improve
  * relevance (with Rules, synonyms, and language dictionaries). Although Algolia provides a REST API, you should use
  * the official open source API [clients, libraries, and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no
  * [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.search

/** BaseSearchParams
  *
  * @param query
  *   Text to search for in an index.
  * @param similarQuery
  *   Overrides the query parameter and performs a more generic search.
  * @param filters
  *   [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) the query with numeric,
  *   facet, or tag filters.
  * @param sumOrFiltersScores
  *   Determines how to calculate [filter
  *   scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).
  *   If `false`, maximum score is kept. If `true`, score is summed.
  * @param restrictSearchableAttributes
  *   Restricts a query to only look at a subset of your [searchable
  *   attributes](https://www.algolia.com/doc/guides/managing-results/must-do/searchable-attributes/).
  * @param facets
  *   Returns
  *   [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts),
  *   their facet values, and the number of matching facet values.
  * @param facetingAfterDistinct
  *   Forces faceting to be applied after
  *   [de-duplication](https://www.algolia.com/doc/guides/managing-results/refine-results/grouping/) (with the distinct
  *   feature). Alternatively, the `afterDistinct`
  *   [modifier](https://www.algolia.com/doc/api-reference/api-parameters/attributesForFaceting/#modifiers) of
  *   `attributesForFaceting` allows for more granular control.
  * @param page
  *   Page to retrieve (the first page is `0`, not `1`).
  * @param offset
  *   Specifies the offset of the first hit to return. > **Note**: Using `page` and `hitsPerPage` is the recommended
  *   method for [paging
  *   results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/). However, you
  *   can use `offset` and `length` to implement [an alternative approach to
  *   paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
  * @param length
  *   Sets the number of hits to retrieve (for use with `offset`). > **Note**: Using `page` and `hitsPerPage` is the
  *   recommended method for [paging
  *   results](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/). However, you
  *   can use `offset` and `length` to implement [an alternative approach to
  *   paging](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/#retrieving-a-subset-of-records-with-offset-and-length).
  * @param aroundLatLng
  *   Search for entries [around a central
  *   location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point),
  *   enabling a geographical search within a circular area.
  * @param aroundLatLngViaIP
  *   Search for entries around a location. The location is automatically computed from the requester's IP address.
  * @param minimumAroundRadius
  *   Minimum radius (in meters) used for a geographical search when `aroundRadius` isn't set.
  * @param insideBoundingBox
  *   Search inside a [rectangular
  *   area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)
  *   (in geographical coordinates).
  * @param insidePolygon
  *   Search inside a
  *   [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)
  *   (in geographical coordinates).
  * @param naturalLanguages
  *   Changes the default values of parameters that work best for a natural language query, such as `ignorePlurals`,
  *   `removeStopWords`, `removeWordsIfNoResults`, `analyticsTags`, and `ruleContexts`. These parameters work well
  *   together when the query consists of fuller natural language strings instead of keywords, for example when
  *   processing voice search queries.
  * @param ruleContexts
  *   Assigns [rule
  *   contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context)
  *   to search queries.
  * @param personalizationImpact
  *   Defines how much [Personalization affects
  *   results](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
  * @param userToken
  *   Associates a [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/) with the current
  *   search.
  * @param getRankingInfo
  *   Incidates whether the search response includes [detailed ranking
  *   information](https://www.algolia.com/doc/guides/building-search-ui/going-further/backend-search/in-depth/understanding-the-api-response/#ranking-information).
  * @param explain
  *   Enriches the API's response with information about how the query was processed.
  * @param synonyms
  *   Whether to take into account an index's synonyms for a particular search.
  * @param clickAnalytics
  *   Indicates whether a query ID parameter is included in the search response. This is required for [tracking click
  *   and conversion
  *   events](https://www.algolia.com/doc/guides/sending-events/concepts/event-types/#events-related-to-algolia-requests).
  * @param analytics
  *   Indicates whether this query will be included in
  *   [analytics](https://www.algolia.com/doc/guides/search-analytics/guides/exclude-queries/).
  * @param analyticsTags
  *   Tags to apply to the query for [segmenting analytics
  *   data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
  * @param percentileComputation
  *   Whether to include or exclude a query from the processing-time percentile computation.
  * @param enableABTest
  *   Incidates whether this search will be considered in A/B testing.
  */
case class BaseSearchParams(
    query: Option[String] = scala.None,
    similarQuery: Option[String] = scala.None,
    filters: Option[String] = scala.None,
    facetFilters: Option[FacetFilters] = scala.None,
    optionalFilters: Option[OptionalFilters] = scala.None,
    numericFilters: Option[NumericFilters] = scala.None,
    tagFilters: Option[TagFilters] = scala.None,
    sumOrFiltersScores: Option[Boolean] = scala.None,
    restrictSearchableAttributes: Option[Seq[String]] = scala.None,
    facets: Option[Seq[String]] = scala.None,
    facetingAfterDistinct: Option[Boolean] = scala.None,
    page: Option[Int] = scala.None,
    offset: Option[Int] = scala.None,
    length: Option[Int] = scala.None,
    aroundLatLng: Option[String] = scala.None,
    aroundLatLngViaIP: Option[Boolean] = scala.None,
    aroundRadius: Option[AroundRadius] = scala.None,
    aroundPrecision: Option[AroundPrecision] = scala.None,
    minimumAroundRadius: Option[Int] = scala.None,
    insideBoundingBox: Option[Seq[Seq[Double]]] = scala.None,
    insidePolygon: Option[Seq[Seq[Double]]] = scala.None,
    naturalLanguages: Option[Seq[String]] = scala.None,
    ruleContexts: Option[Seq[String]] = scala.None,
    personalizationImpact: Option[Int] = scala.None,
    userToken: Option[String] = scala.None,
    getRankingInfo: Option[Boolean] = scala.None,
    explain: Option[Seq[String]] = scala.None,
    synonyms: Option[Boolean] = scala.None,
    clickAnalytics: Option[Boolean] = scala.None,
    analytics: Option[Boolean] = scala.None,
    analyticsTags: Option[Seq[String]] = scala.None,
    percentileComputation: Option[Boolean] = scala.None,
    enableABTest: Option[Boolean] = scala.None
)
