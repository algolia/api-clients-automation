/** Search API Use the Search REST API to manage your data (indices and records), implement search, and improve
  * relevance (with Rules, synonyms, and language dictionaries). Although Algolia provides a REST API, you should use
  * the official open source API [clients, libraries, and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no
  * [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.search

import org.json4s._

sealed trait Action

/** Type of batch operation.
  */
object Action {
  case object AddObject extends Action {
    override def toString = "addObject"
  }
  case object UpdateObject extends Action {
    override def toString = "updateObject"
  }
  case object PartialUpdateObject extends Action {
    override def toString = "partialUpdateObject"
  }
  case object PartialUpdateObjectNoCreate extends Action {
    override def toString = "partialUpdateObjectNoCreate"
  }
  case object DeleteObject extends Action {
    override def toString = "deleteObject"
  }
  case object Delete extends Action {
    override def toString = "delete"
  }
  case object Clear extends Action {
    override def toString = "clear"
  }
  val values: Seq[Action] =
    Seq(AddObject, UpdateObject, PartialUpdateObject, PartialUpdateObjectNoCreate, DeleteObject, Delete, Clear)

  def withName(name: String): Action = Action.values
    .find(_.toString == name)
    .getOrElse(throw new MappingException(s"Unknown Action value: $name"))
}

class ActionSerializer
    extends CustomSerializer[Action](_ =>
      (
        {
          case JString(value) => Action.withName(value)
          case JNull          => null
        },
        { case value: Action =>
          JString(value.toString)
        }
      )
    )
