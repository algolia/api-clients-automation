/** Search API Use the Search REST API to manage your data (indices and records), implement search, and improve
  * relevance (with Rules, synonyms, and language dictionaries). Although Algolia provides a REST API, you should use
  * the official open source API [clients, libraries, and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no
  * [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.search

import org.json4s._

/** Treats singular, plurals, and other forms of declensions as matching terms. `ignorePlurals` is used in conjunction
  * with the `queryLanguages` setting. _list_: language ISO codes for which ignoring plurals should be enabled. This
  * list will override any values that you may have set in `queryLanguages`. _true_: enables the ignore plurals feature,
  * where singulars and plurals are considered equivalent (\"foot\" = \"feet\"). The languages supported here are either
  * [every
  * language](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/)
  * (this is the default) or those set by `queryLanguages`. _false_: turns off the ignore plurals feature, so that
  * singulars and plurals aren't considered to be the same (\"foot\" will not find \"feet\").
  */
sealed trait IgnorePlurals

object IgnorePlurals {

  case class SeqOfString(value: Seq[String]) extends IgnorePlurals
  case class BooleanValue(value: Boolean) extends IgnorePlurals

  def apply(value: Seq[String]): IgnorePlurals = {
    IgnorePlurals.SeqOfString(value)
  }
  def apply(value: Boolean): IgnorePlurals = {
    IgnorePlurals.BooleanValue(value)
  }
}

object IgnorePluralsSerializer extends Serializer[IgnorePlurals] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), IgnorePlurals] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[IgnorePlurals] =>
      json match {
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) => IgnorePlurals.SeqOfString(value.map(_.extract))
        case JBool(value)                                          => IgnorePlurals.BooleanValue(value)
        case _ => throw new MappingException("Can't convert " + json + " to IgnorePlurals")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: IgnorePlurals =>
    value match {
      case IgnorePlurals.SeqOfString(value)  => JArray(value.map(Extraction.decompose).toList)
      case IgnorePlurals.BooleanValue(value) => JBool(value)
    }
  }
}
