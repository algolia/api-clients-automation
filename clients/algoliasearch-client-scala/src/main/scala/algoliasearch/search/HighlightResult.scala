/** Search API Use the Search REST API to manage your data (indices and records), implement search, and improve
  * relevance (with Rules, synonyms, and language dictionaries). Although Algolia provides a REST API, you should use
  * the official open source API [clients, libraries, and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) instead. There's no
  * [SLA](https://www.algolia.com/policies/sla/) if you use the REST API directly.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.search

import algoliasearch.search.MatchLevel._

import org.json4s._

/** HighlightResult
  */
sealed trait HighlightResult

trait HighlightResultTrait extends HighlightResult

object HighlightResult {

  case class MapOfStringHighlightResultOption(value: Map[String, HighlightResultOption]) extends HighlightResult

  def apply(value: Map[String, HighlightResultOption]): HighlightResult = {
    HighlightResult.MapOfStringHighlightResultOption(value)
  }
}

object HighlightResultSerializer extends Serializer[HighlightResult] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), HighlightResult] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[HighlightResult] =>
      json match {
        case value: JObject
            if value.obj.contains("matchLevel") && value.obj.contains("value") && value.obj.contains("matchedWords") =>
          Extraction.extract[HighlightResultOption](value)
        case value: JObject => HighlightResult.apply(Extraction.extract[Map[String, HighlightResultOption]](value))
        case _              => throw new MappingException("Can't convert " + json + " to HighlightResult")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value =>
    Extraction.decompose(value)(format - this)
  }
}

object HighlightResultEnums {}
