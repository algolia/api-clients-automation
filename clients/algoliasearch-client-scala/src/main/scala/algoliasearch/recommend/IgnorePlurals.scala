/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s._

/** Treat singular, plurals, and other forms of declensions as equivalent. You should only use this feature for the
  * languages used in your index.
  */
sealed trait IgnorePlurals

object IgnorePlurals {

  case class SeqOfString(value: Seq[String]) extends IgnorePlurals
  case class BooleanValue(value: Boolean) extends IgnorePlurals

  def apply(value: Seq[String]): IgnorePlurals = {
    IgnorePlurals.SeqOfString(value)
  }
  def apply(value: Boolean): IgnorePlurals = {
    IgnorePlurals.BooleanValue(value)
  }
}

object IgnorePluralsSerializer extends Serializer[IgnorePlurals] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), IgnorePlurals] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[IgnorePlurals] =>
      json match {
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) => IgnorePlurals.SeqOfString(value.map(_.extract))
        case JBool(value)                                          => IgnorePlurals.BooleanValue(value)
        case _ => throw new MappingException("Can't convert " + json + " to IgnorePlurals")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: IgnorePlurals =>
    value match {
      case IgnorePlurals.SeqOfString(value)  => JArray(value.map(Extraction.decompose).toList)
      case IgnorePlurals.BooleanValue(value) => JBool(value)
    }
  }
}
