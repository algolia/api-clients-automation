/** Recommend API The Recommend API lets you retrieve recommendations from one of Algolia's AI recommendation models
  * that you previously trained on your data. ## Client libraries Use Algolia's API clients and libraries to reliably
  * integrate Algolia's APIs with your apps. The official API clients are covered by Algolia's [Service Level
  * Agreement](https://www.algolia.com/policies/sla/). See: [Algolia's
  * ecosystem](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) ## Base URLs
  * The base URLs for requests to the Recommend API are: - `https://{APPLICATION_ID}.algolia.net` -
  * `https://{APPLICATION_ID}-dsn.algolia.net`. If your subscription includes a [Distributed Search
  * Network](https://dashboard.algolia.com/infra), this ensures that requests are sent to servers closest to users. Both
  * URLs provide high availability by distributing requests with load balancing. **All requests must use HTTPS.** ##
  * Retry strategy To guarantee a high availability, implement a retry strategy for all API requests using the URLs of
  * your servers as fallbacks: - `https://{APPLICATION_ID}-1.algolianet.com` -
  * `https://{APPLICATION_ID}-2.algolianet.com` - `https://{APPLICATION_ID}-3.algolianet.com` These URLs use a different
  * DNS provider than the primary URLs. You should randomize this list to ensure an even load across the three servers.
  * All Algolia API clients implement this retry strategy. ## Authentication To authenticate your API requests, add
  * these headers: - `x-algolia-application-id`. Your Algolia application ID. - `x-algolia-api-key`. An API key with the
  * necessary permissions to make the request. The required access control list (ACL) to make a request is listed in
  * each endpoint's reference. You can find your application ID and API key in the [Algolia
  * dashboard](https://dashboard.algolia.com/account). ## Request format Request bodies must be JSON objects. ##
  * Response status and errors The Recommend API returns JSON responses. Since JSON doesn't guarantee any specific
  * ordering, don't rely on the order of attributes in the API response. Successful responses return a `2xx` status.
  * Client errors return a `4xx` status. Server errors are indicated by a `5xx` status. Error responses have a `message`
  * property with more information. ## Version The current version of the Recommend API is version 1, as indicated by
  * the `/1/` in each endpoint's URL.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s._

/** Recommend rule.
  *
  * @param objectID
  *   Unique identifier of a rule object.
  * @param description
  *   Description of the rule's purpose. This can be helpful for display in the Algolia dashboard.
  * @param enabled
  *   Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time.
  * @param validity
  *   Time periods when the rule is active.
  */
case class RecommendRule(
    metadata /* _metadata */: Option[RuleMetadata] = scala.None,
    objectID: Option[String] = scala.None,
    condition: Option[Condition] = scala.None,
    consequence: Option[Consequence] = scala.None,
    description: Option[String] = scala.None,
    enabled: Option[Boolean] = scala.None,
    validity: Option[Seq[TimeRange]] = scala.None
)

class RecommendRuleSerializer extends Serializer[RecommendRule] {

  private val renamedFields = Map[String, String](
    "_metadata" -> "metadata"
  )
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), RecommendRule] = {
    case (TypeInfo(clazz, _), json) if clazz == classOf[RecommendRule] =>
      json match {
        case jobject: JObject =>
          // Rename fields from JSON to Scala
          val renamedObject = JObject(
            jobject.obj.map { field =>
              renamedFields.get(field._1).map(JField(_, field._2)).getOrElse(field)
            }
          )
          val formats = format - this
          val mf = manifest[RecommendRule]
          Extraction.extract[RecommendRule](renamedObject)(formats, mf)

        case _ => throw new IllegalArgumentException(s"Can't deserialize $json as RecommendRule")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: RecommendRule =>
    val formats = format - this // remove current serializer from formats to avoid stackoverflow
    val baseObj = Extraction.decompose(value)(formats)
    baseObj transformField {
      case JField(name, value) if renamedFields.exists(_._2 == name) => (renamedFields.find(_._2 == name).get._1, value)
    }
  }
}
