/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s._

/** Precision of a coordinate-based search in meters to group results with similar distances. The Geo ranking criterion
  * considers all matches within the same range of distances to be equal.
  */
sealed trait AroundPrecision

object AroundPrecision {

  case class IntValue(value: Int) extends AroundPrecision
  case class SeqOfAroundPrecisionFromValueInner(value: Seq[AroundPrecisionFromValueInner]) extends AroundPrecision

  def apply(value: Int): AroundPrecision = {
    AroundPrecision.IntValue(value)
  }
  def apply(value: Seq[AroundPrecisionFromValueInner]): AroundPrecision = {
    AroundPrecision.SeqOfAroundPrecisionFromValueInner(value)
  }
}

object AroundPrecisionSerializer extends Serializer[AroundPrecision] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), AroundPrecision] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[AroundPrecision] =>
      json match {
        case JInt(value) => AroundPrecision.IntValue(value.toInt)
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) =>
          AroundPrecision.SeqOfAroundPrecisionFromValueInner(value.map(_.extract))
        case _ => throw new MappingException("Can't convert " + json + " to AroundPrecision")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: AroundPrecision =>
    value match {
      case AroundPrecision.IntValue(value)                           => JInt(value)
      case AroundPrecision.SeqOfAroundPrecisionFromValueInner(value) => JArray(value.map(Extraction.decompose).toList)
    }
  }
}
