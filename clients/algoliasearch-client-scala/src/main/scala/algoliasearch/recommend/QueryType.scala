/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s._

sealed trait QueryType

/** Determines if and how query words are interpreted as prefixes. By default, only the last query word is treated as
  * prefix (`prefixLast`). To turn off prefix search, use `prefixNone`. Avoid `prefixAll`, which treats all query words
  * as prefixes. This might lead to counterintuitive results and makes your search slower. For more information, see
  * [Prefix
  * searching](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/prefix-searching/).
  */
object QueryType {
  case object PrefixLast extends QueryType {
    override def toString = "prefixLast"
  }
  case object PrefixAll extends QueryType {
    override def toString = "prefixAll"
  }
  case object PrefixNone extends QueryType {
    override def toString = "prefixNone"
  }
  val values: Seq[QueryType] = Seq(PrefixLast, PrefixAll, PrefixNone)

  def withName(name: String): QueryType = QueryType.values
    .find(_.toString == name)
    .getOrElse(throw new MappingException(s"Unknown QueryType value: $name"))
}

class QueryTypeSerializer
    extends CustomSerializer[QueryType](_ =>
      (
        {
          case JString(value) => QueryType.withName(value)
          case JNull          => null
        },
        { case value: QueryType =>
          JString(value.toString)
        }
      )
    )
