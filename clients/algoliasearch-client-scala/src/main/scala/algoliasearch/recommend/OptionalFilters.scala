/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s._

/** Filters to promote or demote records in the search results. Optional filters work like facet filters, but they don't
  * exclude records from the search results. Records that match the optional filter rank before records that don't
  * match. If you're using a negative filter `facet:-value`, matching records rank after records that don't match. -
  * Optional filters don't work on virtual replicas. - Optional filters are applied _after_ sort-by attributes. -
  * Optional filters don't work with numeric attributes.
  */
sealed trait OptionalFilters

object OptionalFilters {

  case class SeqOfMixedSearchFilters(value: Seq[MixedSearchFilters]) extends OptionalFilters
  case class StringValue(value: String) extends OptionalFilters

  def apply(value: Seq[MixedSearchFilters]): OptionalFilters = {
    OptionalFilters.SeqOfMixedSearchFilters(value)
  }
  def apply(value: String): OptionalFilters = {
    OptionalFilters.StringValue(value)
  }
}

object OptionalFiltersSerializer extends Serializer[OptionalFilters] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), OptionalFilters] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[OptionalFilters] =>
      json match {
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) =>
          OptionalFilters.SeqOfMixedSearchFilters(value.map(_.extract))
        case JString(value) => OptionalFilters.StringValue(value)
        case _              => throw new MappingException("Can't convert " + json + " to OptionalFilters")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: OptionalFilters =>
    value match {
      case OptionalFilters.SeqOfMixedSearchFilters(value) => JArray(value.map(Extraction.decompose).toList)
      case OptionalFilters.StringValue(value)             => JString(value)
    }
  }
}
