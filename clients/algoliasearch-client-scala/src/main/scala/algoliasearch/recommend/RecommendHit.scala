/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s.{Extraction, Formats, JObject, JValue, Serializer, TypeInfo}

/** Recommend hit.
  *
  * @param objectID
  *   Unique object identifier.
  * @param highlightResult
  *   Show highlighted section and words matched on a query.
  * @param snippetResult
  *   Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty.
  * @param score
  *   Recommendation score.
  */
case class RecommendHit(
    objectID: String,
    highlightResult: Option[Map[String, HighlightResult]] = scala.None,
    snippetResult: Option[Map[String, SnippetResult]] = scala.None,
    rankingInfo: Option[RankingInfo] = scala.None,
    distinctSeqID: Option[Int] = scala.None,
    score: Double,
    additionalProperties: Map[String, JValue] = Map.empty
)

class RecommendHitSerializer extends Serializer[RecommendHit] {

  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), RecommendHit] = {
    case (TypeInfo(clazz, _), json) if clazz == classOf[RecommendHit] =>
      json match {
        case jobject: JObject =>
          val formats = format - this
          val mf = manifest[RecommendHit]
          val obj = Extraction.extract[RecommendHit](jobject)(formats, mf)
          val properties =
            jobject.obj.toMap - "objectID" - "highlightResult" - "snippetResult" - "rankingInfo" - "distinctSeqID" - "score"
          obj.copy(additionalProperties = properties)
        case _ => throw new IllegalArgumentException(s"Can't deserialize $json as RecommendHit")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: RecommendHit =>
    val formats = format - this // remove current serializer from formats to avoid stackoverflow
    Extraction.decompose(value.copy(additionalProperties = Map.empty))(formats) merge Extraction.decompose(
      value.additionalProperties
    )(formats)
  }
}
