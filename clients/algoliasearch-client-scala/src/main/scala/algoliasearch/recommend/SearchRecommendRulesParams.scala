/** Recommend API The Recommend API lets you retrieve recommendations from one of Algolia's AI recommendation models
  * that you previously trained on your data. ## Client libraries Use Algolia's API clients and libraries to reliably
  * integrate Algolia's APIs with your apps. The official API clients are covered by Algolia's [Service Level
  * Agreement](https://www.algolia.com/policies/sla/). See: [Algolia's
  * ecosystem](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) ## Base URLs
  * The base URLs for requests to the Recommend API are: - `https://{APPLICATION_ID}.algolia.net` -
  * `https://{APPLICATION_ID}-dsn.algolia.net`. If your subscription includes a [Distributed Search
  * Network](https://dashboard.algolia.com/infra), this ensures that requests are sent to servers closest to users. Both
  * URLs provide high availability by distributing requests with load balancing. **All requests must use HTTPS.** ##
  * Retry strategy To guarantee a high availability, implement a retry strategy for all API requests using the URLs of
  * your servers as fallbacks: - `https://{APPLICATION_ID}-1.algolianet.com` -
  * `https://{APPLICATION_ID}-2.algolianet.com` - `https://{APPLICATION_ID}-3.algolianet.com` These URLs use a different
  * DNS provider than the primary URLs. You should randomize this list to ensure an even load across the three servers.
  * All Algolia API clients implement this retry strategy. ## Authentication To authenticate your API requests, add
  * these headers: - `x-algolia-application-id`. Your Algolia application ID. - `x-algolia-api-key`. An API key with the
  * necessary permissions to make the request. The required access control list (ACL) to make a request is listed in
  * each endpoint's reference. You can find your application ID and API key in the [Algolia
  * dashboard](https://dashboard.algolia.com/account). ## Request format Request bodies must be JSON objects. ##
  * Response status and errors The Recommend API returns JSON responses. Since JSON doesn't guarantee any specific
  * ordering, don't rely on the order of attributes in the API response. Successful responses return a `2xx` status.
  * Client errors return a `4xx` status. Server errors are indicated by a `5xx` status. Error responses have a `message`
  * property with more information. ## Version The current version of the Recommend API is version 1, as indicated by
  * the `/1/` in each endpoint's URL.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

/** Recommend rules parameters.
  *
  * @param query
  *   Search query.
  * @param context
  *   Only search for rules with matching context.
  * @param page
  *   Requested page of the API response. Algolia uses `page` and `hitsPerPage` to control how search results are
  *   displayed ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)).
  *   \- `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page
  *   number of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the
  *   second is `page=1`, and so on. For example, to display 10 results per page starting from the third page, set
  *   `hitsPerPage` to 10 and `page` to 2.
  * @param hitsPerPage
  *   Maximum number of hits per page. Algolia uses `page` and `hitsPerPage` to control how search results are displayed
  *   ([paginated](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/pagination/js/)). -
  *   `hitsPerPage`: sets the number of search results (_hits_) displayed per page. - `page`: specifies the page number
  *   of the search results you want to retrieve. Page numbering starts at 0, so the first page is `page=0`, the second
  *   is `page=1`, and so on. For example, to display 10 results per page starting from the third page, set
  *   `hitsPerPage` to 10 and `page` to 2.
  * @param enabled
  *   Whether to only show rules where the value of their `enabled` property matches this parameter. If absent, show all
  *   rules, regardless of their `enabled` property.
  * @param filters
  *   Filter expression. This only searches for rules matching the filter expression.
  * @param facets
  *   Include facets and facet values in the response. Use `['*']` to include all facets.
  * @param maxValuesPerFacet
  *   Maximum number of values to return for each facet.
  */
case class SearchRecommendRulesParams(
    query: Option[String] = scala.None,
    context: Option[String] = scala.None,
    page: Option[Int] = scala.None,
    hitsPerPage: Option[Int] = scala.None,
    enabled: Option[Boolean] = scala.None,
    filters: Option[String] = scala.None,
    facets: Option[Seq[String]] = scala.None,
    maxValuesPerFacet: Option[Int] = scala.None
)
