/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s._

/** Replace or edit the search query. If `consequenceQuery` is a string, the entire search query is replaced with that
  * string. If `consequenceQuery` is an object, it describes incremental edits made to the query.
  */
sealed trait ConsequenceQuery

trait ConsequenceQueryTrait extends ConsequenceQuery

object ConsequenceQuery {

  case class StringValue(value: String) extends ConsequenceQuery

  def apply(value: String): ConsequenceQuery = {
    ConsequenceQuery.StringValue(value)
  }
}

object ConsequenceQuerySerializer extends Serializer[ConsequenceQuery] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), ConsequenceQuery] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[ConsequenceQuery] =>
      json match {
        case value: JObject => Extraction.extract[ConsequenceQueryObject](value)
        case JString(value) => ConsequenceQuery.StringValue(value)
        case _              => throw new MappingException("Can't convert " + json + " to ConsequenceQuery")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: ConsequenceQuery =>
    value match {
      case value: ConsequenceQueryObject       => Extraction.decompose(value)(format - this)
      case ConsequenceQuery.StringValue(value) => JString(value)
    }
  }
}
