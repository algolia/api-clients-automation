/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s._

sealed trait SupportedLanguage

/** ISO code for a supported language.
  */
object SupportedLanguage {
  case object Af extends SupportedLanguage {
    override def toString = "af"
  }
  case object Ar extends SupportedLanguage {
    override def toString = "ar"
  }
  case object Az extends SupportedLanguage {
    override def toString = "az"
  }
  case object Bg extends SupportedLanguage {
    override def toString = "bg"
  }
  case object Bn extends SupportedLanguage {
    override def toString = "bn"
  }
  case object Ca extends SupportedLanguage {
    override def toString = "ca"
  }
  case object Cs extends SupportedLanguage {
    override def toString = "cs"
  }
  case object Cy extends SupportedLanguage {
    override def toString = "cy"
  }
  case object Da extends SupportedLanguage {
    override def toString = "da"
  }
  case object De extends SupportedLanguage {
    override def toString = "de"
  }
  case object El extends SupportedLanguage {
    override def toString = "el"
  }
  case object En extends SupportedLanguage {
    override def toString = "en"
  }
  case object Eo extends SupportedLanguage {
    override def toString = "eo"
  }
  case object Es extends SupportedLanguage {
    override def toString = "es"
  }
  case object Et extends SupportedLanguage {
    override def toString = "et"
  }
  case object Eu extends SupportedLanguage {
    override def toString = "eu"
  }
  case object Fa extends SupportedLanguage {
    override def toString = "fa"
  }
  case object Fi extends SupportedLanguage {
    override def toString = "fi"
  }
  case object Fo extends SupportedLanguage {
    override def toString = "fo"
  }
  case object Fr extends SupportedLanguage {
    override def toString = "fr"
  }
  case object Ga extends SupportedLanguage {
    override def toString = "ga"
  }
  case object Gl extends SupportedLanguage {
    override def toString = "gl"
  }
  case object He extends SupportedLanguage {
    override def toString = "he"
  }
  case object Hi extends SupportedLanguage {
    override def toString = "hi"
  }
  case object Hu extends SupportedLanguage {
    override def toString = "hu"
  }
  case object Hy extends SupportedLanguage {
    override def toString = "hy"
  }
  case object Id extends SupportedLanguage {
    override def toString = "id"
  }
  case object Is extends SupportedLanguage {
    override def toString = "is"
  }
  case object It extends SupportedLanguage {
    override def toString = "it"
  }
  case object Ja extends SupportedLanguage {
    override def toString = "ja"
  }
  case object Ka extends SupportedLanguage {
    override def toString = "ka"
  }
  case object Kk extends SupportedLanguage {
    override def toString = "kk"
  }
  case object Ko extends SupportedLanguage {
    override def toString = "ko"
  }
  case object Ku extends SupportedLanguage {
    override def toString = "ku"
  }
  case object Ky extends SupportedLanguage {
    override def toString = "ky"
  }
  case object Lt extends SupportedLanguage {
    override def toString = "lt"
  }
  case object Lv extends SupportedLanguage {
    override def toString = "lv"
  }
  case object Mi extends SupportedLanguage {
    override def toString = "mi"
  }
  case object Mn extends SupportedLanguage {
    override def toString = "mn"
  }
  case object Mr extends SupportedLanguage {
    override def toString = "mr"
  }
  case object Ms extends SupportedLanguage {
    override def toString = "ms"
  }
  case object Mt extends SupportedLanguage {
    override def toString = "mt"
  }
  case object Nb extends SupportedLanguage {
    override def toString = "nb"
  }
  case object Nl extends SupportedLanguage {
    override def toString = "nl"
  }
  case object No extends SupportedLanguage {
    override def toString = "no"
  }
  case object Ns extends SupportedLanguage {
    override def toString = "ns"
  }
  case object Pl extends SupportedLanguage {
    override def toString = "pl"
  }
  case object Ps extends SupportedLanguage {
    override def toString = "ps"
  }
  case object Pt extends SupportedLanguage {
    override def toString = "pt"
  }
  case object PtBr extends SupportedLanguage {
    override def toString = "pt-br"
  }
  case object Qu extends SupportedLanguage {
    override def toString = "qu"
  }
  case object Ro extends SupportedLanguage {
    override def toString = "ro"
  }
  case object Ru extends SupportedLanguage {
    override def toString = "ru"
  }
  case object Sk extends SupportedLanguage {
    override def toString = "sk"
  }
  case object Sq extends SupportedLanguage {
    override def toString = "sq"
  }
  case object Sv extends SupportedLanguage {
    override def toString = "sv"
  }
  case object Sw extends SupportedLanguage {
    override def toString = "sw"
  }
  case object Ta extends SupportedLanguage {
    override def toString = "ta"
  }
  case object Te extends SupportedLanguage {
    override def toString = "te"
  }
  case object Th extends SupportedLanguage {
    override def toString = "th"
  }
  case object Tl extends SupportedLanguage {
    override def toString = "tl"
  }
  case object Tn extends SupportedLanguage {
    override def toString = "tn"
  }
  case object Tr extends SupportedLanguage {
    override def toString = "tr"
  }
  case object Tt extends SupportedLanguage {
    override def toString = "tt"
  }
  case object Uk extends SupportedLanguage {
    override def toString = "uk"
  }
  case object Ur extends SupportedLanguage {
    override def toString = "ur"
  }
  case object Uz extends SupportedLanguage {
    override def toString = "uz"
  }
  case object Zh extends SupportedLanguage {
    override def toString = "zh"
  }
  val values: Seq[SupportedLanguage] = Seq(
    Af,
    Ar,
    Az,
    Bg,
    Bn,
    Ca,
    Cs,
    Cy,
    Da,
    De,
    El,
    En,
    Eo,
    Es,
    Et,
    Eu,
    Fa,
    Fi,
    Fo,
    Fr,
    Ga,
    Gl,
    He,
    Hi,
    Hu,
    Hy,
    Id,
    Is,
    It,
    Ja,
    Ka,
    Kk,
    Ko,
    Ku,
    Ky,
    Lt,
    Lv,
    Mi,
    Mn,
    Mr,
    Ms,
    Mt,
    Nb,
    Nl,
    No,
    Ns,
    Pl,
    Ps,
    Pt,
    PtBr,
    Qu,
    Ro,
    Ru,
    Sk,
    Sq,
    Sv,
    Sw,
    Ta,
    Te,
    Th,
    Tl,
    Tn,
    Tr,
    Tt,
    Uk,
    Ur,
    Uz,
    Zh
  )

  def withName(name: String): SupportedLanguage = SupportedLanguage.values
    .find(_.toString == name)
    .getOrElse(throw new MappingException(s"Unknown SupportedLanguage value: $name"))
}

class SupportedLanguageSerializer
    extends CustomSerializer[SupportedLanguage](_ =>
      (
        {
          case JString(value) => SupportedLanguage.withName(value)
          case JNull          => null
        },
        { case value: SupportedLanguage =>
          JString(value.toString)
        }
      )
    )
