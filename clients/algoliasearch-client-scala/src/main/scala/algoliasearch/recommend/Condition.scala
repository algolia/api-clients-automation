/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import algoliasearch.recommend.Anchoring._

/** Condition
  *
  * @param pattern
  *   Query pattern that triggers the rule. You can use either a literal string, or a special pattern
  *   `{facet:ATTRIBUTE}`, where `ATTRIBUTE` is a facet name. The rule is triggered if the query matches the literal
  *   string or a value of the specified facet. For example, with `pattern: {facet:genre}`, the rule is triggered when
  *   users search for a genre, such as \"comedy\".
  * @param alternatives
  *   Whether the pattern should match plurals, synonyms, and typos.
  * @param context
  *   An additional restriction that only triggers the rule, when the search has the same value as `ruleContexts`
  *   parameter. For example, if `context: mobile`, the rule is only triggered when the search request has a matching
  *   `ruleContexts: mobile`. A rule context must only contain alphanumeric characters.
  * @param filters
  *   Filters that trigger the rule. You can add add filters using the syntax `facet:value` so that the rule is
  *   triggered, when the specific filter is selected. You can use `filters` on its own or combine it with the `pattern`
  *   parameter.
  */
case class Condition(
    pattern: Option[String] = scala.None,
    anchoring: Option[Anchoring] = scala.None,
    alternatives: Option[Boolean] = scala.None,
    context: Option[String] = scala.None,
    filters: Option[String] = scala.None
)
