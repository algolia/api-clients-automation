/** Recommend API The Recommend API lets you generate recommendations with several AI models. > **Note**: You should use
  * Algolia's [libraries and
  * tools](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) to interact with
  * the Recommend API. Using the HTTP endpoints directly is not covered by the
  * [SLA](https://www.algolia.com/policies/sla/).
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.recommend

import org.json4s._

sealed trait TypoToleranceEnum extends TypoToleranceTrait

/**   - `min`. Return matches with the lowest number of typos. For example, if you have matches without typos, only
  *     include those. But if there are no matches without typos (with 1 typo), include matches with 1 typo (2 typos). -
  *     `strict`. Return matches with the two lowest numbers of typos. With `strict`, the Typo ranking criterion is
  *     applied first in the `ranking` setting.
  */
object TypoToleranceEnum {
  case object Min extends TypoToleranceEnum {
    override def toString = "min"
  }
  case object Strict extends TypoToleranceEnum {
    override def toString = "strict"
  }
  val values: Seq[TypoToleranceEnum] = Seq(Min, Strict)

  def withName(name: String): TypoToleranceEnum = TypoToleranceEnum.values
    .find(_.toString == name)
    .getOrElse(throw new MappingException(s"Unknown TypoToleranceEnum value: $name"))
}

class TypoToleranceEnumSerializer
    extends CustomSerializer[TypoToleranceEnum](_ =>
      (
        {
          case JString(value) => TypoToleranceEnum.withName(value)
          case JNull          => null
        },
        { case value: TypoToleranceEnum =>
          JString(value.toString)
        }
      )
    )
