/** Ingestion API API powering the Data Ingestion connectors of Algolia.
  *
  * The version of the OpenAPI document: 1.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.ingestion

import org.json4s._

sealed trait SourceType

/** SourceType enumeration
  */
object SourceType {
  case object Bigcommerce extends SourceType {
    override def toString = "bigcommerce"
  }
  case object Commercetools extends SourceType {
    override def toString = "commercetools"
  }
  case object Json extends SourceType {
    override def toString = "json"
  }
  case object Csv extends SourceType {
    override def toString = "csv"
  }
  case object Bigquery extends SourceType {
    override def toString = "bigquery"
  }
  case object Docker extends SourceType {
    override def toString = "docker"
  }
  case object Ga4BigqueryExport extends SourceType {
    override def toString = "ga4BigqueryExport"
  }
  val values: Seq[SourceType] = Seq(Bigcommerce, Commercetools, Json, Csv, Bigquery, Docker, Ga4BigqueryExport)

  def withName(name: String): SourceType = SourceType.values
    .find(_.toString == name)
    .getOrElse(throw new MappingException(s"Unknown SourceType value: $name"))
}

class SourceTypeSerializer
    extends CustomSerializer[SourceType](_ =>
      (
        {
          case JString(value) => SourceType.withName(value)
          case JNull          => null
        },
        { case value: SourceType =>
          JString(value.toString)
        }
      )
    )
