/** Ingestion API API powering the Data Ingestion connectors of Algolia.
  *
  * The version of the OpenAPI document: 1.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.ingestion

import org.json4s._
import org.json4s.ext.EnumNameSerializer

object JsonSupport {
  private def enumSerializers: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new EnumNameSerializer(ActionType) :+
    new EnumNameSerializer(AuthenticationSortKeys) :+
    new EnumNameSerializer(AuthenticationType) :+
    new EnumNameSerializer(BigQueryDataType) :+
    new EnumNameSerializer(DestinationSortKeys) :+
    new EnumNameSerializer(DestinationType) :+
    new EnumNameSerializer(DockerImageType) :+
    new EnumNameSerializer(DockerRegistry) :+
    new EnumNameSerializer(EventSortKeys) :+
    new EnumNameSerializer(EventStatus) :+
    new EnumNameSerializer(EventType) :+
    new EnumNameSerializer(MappingTypeCSV) :+
    new EnumNameSerializer(MethodType) :+
    new EnumNameSerializer(OnDemandTriggerType) :+
    new EnumNameSerializer(OrderKeys) :+
    new EnumNameSerializer(Platform) :+
    new EnumNameSerializer(PlatformNone) :+
    new EnumNameSerializer(RecordType) :+
    new EnumNameSerializer(RunOutcome) :+
    new EnumNameSerializer(RunReasonCode) :+
    new EnumNameSerializer(RunSortKeys) :+
    new EnumNameSerializer(RunStatus) :+
    new EnumNameSerializer(RunType) :+
    new EnumNameSerializer(ScheduleTriggerType) :+
    new EnumNameSerializer(SourceSortKeys) :+
    new EnumNameSerializer(SourceType) :+
    new EnumNameSerializer(SubscriptionTriggerType) :+
    new EnumNameSerializer(TaskSortKeys) :+
    new EnumNameSerializer(TriggerType)

  private def oneOfsSerializers: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    AuthInputSerializer :+
    AuthInputPartialSerializer :+
    DestinationInputSerializer :+
    PlatformWithNoneSerializer :+
    SourceInputSerializer :+
    SourceUpdateInputSerializer :+
    TaskCreateTriggerSerializer :+
    TaskInputSerializer :+
    TriggerSerializer

  private def classMapSerializers: Seq[Serializer[_]] = Seq[Serializer[_]]() :+
    new ErrorBaseSerializer()

  implicit val format: Formats = DefaultFormats ++ enumSerializers ++ oneOfsSerializers ++ classMapSerializers
  implicit val serialization: org.json4s.Serialization = org.json4s.native.Serialization
}
