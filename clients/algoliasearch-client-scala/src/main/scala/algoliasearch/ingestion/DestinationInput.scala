/** Ingestion API API powering the Data Ingestion connectors of Algolia.
  *
  * The version of the OpenAPI document: 1.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.ingestion

import algoliasearch.ingestion.RecordType._

import org.json4s._

/** DestinationInput
  */
sealed trait DestinationInput

trait DestinationInputTrait extends DestinationInput

object DestinationInput {}

object DestinationInputSerializer extends Serializer[DestinationInput] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), DestinationInput] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[DestinationInput] =>
      json match {
        case value: JObject => Extraction.extract[DestinationIndexPrefix](value)
        case value: JObject => Extraction.extract[DestinationIndexName](value)
        case _              => throw new MappingException("Can't convert " + json + " to DestinationInput")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: DestinationInput =>
    value match {
      case value: DestinationIndexPrefix => Extraction.decompose(value)(format - this)
      case value: DestinationIndexName   => Extraction.decompose(value)(format - this)
    }
  }
}
