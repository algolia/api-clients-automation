/** Algolia Monitoring API The Monitoring API lets you check the status of your Algolia infrastructure. # Base URLs The
  * base URL for making requests to the Monitoring API is: - `https://status.algolia.com` **All requests must use
  * HTTPS.** # Availability and authentication Access to the [Infrastructure](#tag/infrastructure) endpoints is
  * available as part of the [Premium or Elevate plans](https://www.algolia.com/pricing). To authenticate requests to
  * the Infrastructure endpoints, add these headers: <dl> <dt><code>x-algolia-application-id</code></dt> <dd>Your
  * Algolia application ID.</dd> <dt><code>x-algolia-api-key</code></dt> <dd>Your Monitoring API key.</dd> </dl> You can
  * find your application ID and API key in the [Algolia dashboard](https://dashboard.algolia.com/account). Other
  * endpoints don't require authentication. # Response status and errors The Monitoring API returns JSON responses.
  * Since JSON doesn't guarantee any specific ordering, don't rely on the order of attributes in the API response.
  * Successful responses return a `2xx` status. Client errors return a `4xx` status. Server errors are indicated by a
  * `5xx` status. Error responses have a `message` property with more information. # Version The current version of the
  * Monitoring API is version 1, as indicated by the `/1/` in each endpoint's URL.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.monitoring

import org.json4s.MonadicJValue.jvalueToMonadic
import org.json4s.{Extraction, Formats, JField, JObject, JValue, Serializer, TypeInfo}

/** Error.
  */
case class ErrorBase(
    message: Option[String] = scala.None,
    additionalProperties: Option[List[JField]] = None
)

class ErrorBaseSerializer extends Serializer[ErrorBase] {

  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), ErrorBase] = {
    case (TypeInfo(clazz, _), json) if clazz == classOf[ErrorBase] =>
      json match {
        case jobject: JObject =>
          val formats = format - this
          val mf = manifest[ErrorBase]
          val obj = Extraction.extract[ErrorBase](jobject)(formats, mf)

          val fields = Set("message")
          val additionalProperties = jobject removeField {
            case (name, _) if fields.contains(name) => true
            case _                                  => false
          }
          additionalProperties.values match {
            case JObject(fieldsList) => obj copy (additionalProperties = Some(fieldsList))
            case _                   => obj
          }
        case _ => throw new IllegalArgumentException(s"Can't deserialize $json as ErrorBase")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: ErrorBase =>
    val formats = format - this // remove current serializer from formats to avoid stackoverflow
    value.additionalProperties match {
      case Some(fields) => Extraction.decompose(value.copy(additionalProperties = None))(formats) merge JObject(fields)
      case None         => Extraction.decompose(value)(formats)
    }
  }
}
