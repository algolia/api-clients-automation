/** Composition API Composition API.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.composition

import org.json4s.MonadicJValue.jvalueToMonadic
import org.json4s.{Extraction, Formats, JField, JObject, JValue, Serializer, TypeInfo}

/** ResultsCompositionsResponse
  */
case class ResultsCompositionsResponse(
    compositions: Map[String, ResultsCompositionInfoResponse],
    additionalProperties: Option[List[JField]] = None
)

class ResultsCompositionsResponseSerializer extends Serializer[ResultsCompositionsResponse] {

  override def deserialize(implicit
      format: Formats
  ): PartialFunction[(TypeInfo, JValue), ResultsCompositionsResponse] = {
    case (TypeInfo(clazz, _), json) if clazz == classOf[ResultsCompositionsResponse] =>
      json match {
        case jobject: JObject =>
          val formats = format - this
          val mf = manifest[ResultsCompositionsResponse]
          val obj = Extraction.extract[ResultsCompositionsResponse](jobject)(formats, mf)

          val fields = Set("compositions")
          val additionalProperties = jobject removeField {
            case (name, _) if fields.contains(name) => true
            case _                                  => false
          }
          additionalProperties.values match {
            case JObject(fieldsList) => obj copy (additionalProperties = Some(fieldsList))
            case _                   => obj
          }
        case _ => throw new IllegalArgumentException(s"Can't deserialize $json as ResultsCompositionsResponse")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = {
    case value: ResultsCompositionsResponse =>
      val formats = format - this // remove current serializer from formats to avoid stackoverflow
      value.additionalProperties match {
        case Some(fields) =>
          Extraction.decompose(value.copy(additionalProperties = None))(formats) merge JObject(fields)
        case None => Extraction.decompose(value)(formats)
      }
  }
}
