/** Composition API The Algolia Composition API lets you run composed search requests on your Compositions. ## Client
  * libraries Use Algolia's API clients and libraries to reliably integrate Algolia's APIs with your apps. See:
  * [Algolia's ecosystem](https://www.algolia.com/doc/guides/getting-started/how-algolia-works/in-depth/ecosystem/) ##
  * Base URLs The base URLs for requests to the Composition API are: - `https://{APPLICATION_ID}.algolia.net` -
  * `https://{APPLICATION_ID}-dsn.algolia.net`. If your subscription includes a [Distributed Search
  * Network](https://dashboard.algolia.com/infra), this ensures that requests are sent to servers closest to users. Both
  * URLs provide high availability by distributing requests with load balancing. **All requests must use HTTPS.** ##
  * Retry strategy To guarantee high availability, implement a retry strategy for all API requests using the URLs of
  * your servers as fallbacks: - `https://{APPLICATION_ID}-1.algolianet.com` -
  * `https://{APPLICATION_ID}-2.algolianet.com` - `https://{APPLICATION_ID}-3.algolianet.com` These URLs use a different
  * DNS provider than the primary URLs. You should randomize this list to ensure an even load across the three servers.
  * All Algolia API clients implement this retry strategy. ## Authentication To authenticate your API requests, add
  * these headers: - `x-algolia-application-id`. Your Algolia application ID. - `x-algolia-api-key`. An API key with the
  * necessary permissions to make the request. The required access control list (ACL) to make a request is listed in
  * each endpoint's reference. You can find your application ID and API key in the [Algolia
  * dashboard](https://dashboard.algolia.com/account). ## Request format Depending on the endpoint, request bodies are
  * either JSON objects or arrays of JSON objects, ## Parameters Parameters are passed in the request body for POST and
  * PUT requests. Query parameters must be
  * [URL-encoded](https://developer.mozilla.org/en-US/docs/Glossary/Percent-encoding). Non-ASCII characters must be
  * UTF-8 encoded. Plus characters (`+`) are interpreted as spaces. ## Response status and errors The Composition API
  * returns JSON responses. Since JSON doesn't guarantee any specific ordering, don't rely on the order of attributes in
  * the API response. Successful responses return a `2xx` status. Client errors return a `4xx` status. Server errors are
  * indicated by a `5xx` status. Error responses have a `message` property with more information. ## Version The current
  * version of the Composition API is version 1, as indicated by the `/1/` in each endpoint's URL.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.composition

import algoliasearch.composition.AdvancedSyntaxFeatures._
import algoliasearch.composition.AlternativesAsExact._
import algoliasearch.composition.ExactOnSingleWordQuery._
import algoliasearch.composition.QueryType._
import algoliasearch.composition.RemoveWordsIfNoResults._
import algoliasearch.composition.SupportedLanguage._

/** BaseInjectionQueryParameters
  *
  * @param advancedSyntax
  *   Whether to support phrase matching and excluding words from search queries Use the `advancedSyntaxFeatures`
  *   parameter to control which feature is supported.
  * @param advancedSyntaxFeatures
  *   Advanced search syntax features you want to support - `exactPhrase`. Phrases in quotes must match exactly. For
  *   example, `sparkly blue \"iPhone case\"` only returns records with the exact string \"iPhone case\" -
  *   `excludeWords`. Query words prefixed with a `-` must not occur in a record. For example, `search -engine` matches
  *   records that contain \"search\" but not \"engine\" This setting only has an effect if `advancedSyntax` is true.
  * @param allowTyposOnNumericTokens
  *   Whether to allow typos on numbers in the search query Turn off this setting to reduce the number of irrelevant
  *   matches when searching in large sets of similar numbers.
  * @param alternativesAsExact
  *   Determine which plurals and synonyms should be considered an exact matches By default, Algolia treats singular and
  *   plural forms of a word, and single-word synonyms, as
  *   [exact](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#exact)
  *   matches when searching. For example - \"swimsuit\" and \"swimsuits\" are treated the same - \"swimsuit\" and
  *   \"swimwear\" are treated the same (if they are
  *   [synonyms](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/adding-synonyms/#regular-synonyms))
  *   \- `ignorePlurals`. Plurals and similar declensions added by the `ignorePlurals` setting are considered exact
  *   matches - `singleWordSynonym`. Single-word synonyms, such as \"NY\" = \"NYC\", are considered exact matches -
  *   `multiWordsSynonym`. Multi-word synonyms, such as \"NY\" = \"New York\", are considered exact matches.
  * @param analytics
  *   Whether this search will be included in Analytics.
  * @param attributeCriteriaComputedByMinProximity
  *   Whether the best matching attribute should be determined by minimum proximity This setting only affects ranking if
  *   the Attribute ranking criterion comes before Proximity in the `ranking` setting. If true, the best matching
  *   attribute is selected based on the minimum proximity of multiple matches. Otherwise, the best matching attribute
  *   is determined by the order in the `searchableAttributes` setting.
  * @param attributesToHighlight
  *   Attributes to highlight By default, all searchable attributes are highlighted. Use `*` to highlight all attributes
  *   or use an empty array `[]` to turn off highlighting. Attribute names are case-sensitive With highlighting, strings
  *   that match the search query are surrounded by HTML tags defined by `highlightPreTag` and `highlightPostTag`. You
  *   can use this to visually highlight matching parts of a search query in your UI For more information, see
  *   [Highlighting and
  *   snippeting](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/highlighting-snippeting/js/).
  * @param attributesToRetrieve
  *   Attributes to include in the API response To reduce the size of your response, you can retrieve only some of the
  *   attributes. Attribute names are case-sensitive - `*` retrieves all attributes, except attributes included in the
  *   `customRanking` and `unretrievableAttributes` settings. - To retrieve all attributes except a specific one, prefix
  *   the attribute with a dash and combine it with the `*`: `[\"*\", \"-ATTRIBUTE\"]`. - The `objectID` attribute is
  *   always included.
  * @param attributesToSnippet
  *   Attributes for which to enable snippets. Attribute names are case-sensitive Snippets provide additional context to
  *   matched words. If you enable snippets, they include 10 words, including the matched word. The matched word will
  *   also be wrapped by HTML tags for highlighting. You can adjust the number of words with the following notation:
  *   `ATTRIBUTE:NUMBER`, where `NUMBER` is the number of words to be extracted.
  * @param clickAnalytics
  *   Whether to include a `queryID` attribute in the response The query ID is a unique identifier for a search query
  *   and is required for tracking [click and conversion
  *   events](https://www.algolia.com/guides/sending-events/getting-started/).
  * @param decompoundQuery
  *   Whether to split compound words in the query into their building blocks For more information, see [Word
  *   segmentation](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/#splitting-compound-words).
  *   Word segmentation is supported for these languages: German, Dutch, Finnish, Swedish, and Norwegian. Decompounding
  *   doesn't work for words with [non-spacing mark Unicode
  *   characters](https://www.charactercodes.net/category/non-spacing_mark). For example, `Gartenstühle` won't be
  *   decompounded if the `ü` consists of `u` (U+0075) and `◌̈` (U+0308).
  * @param disableExactOnAttributes
  *   Searchable attributes for which you want to [turn off the Exact ranking
  *   criterion](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/override-search-engine-defaults/in-depth/adjust-exact-settings/#turn-off-exact-for-some-attributes).
  *   Attribute names are case-sensitive This can be useful for attributes with long values, where the likelihood of an
  *   exact match is high, such as product descriptions. Turning off the Exact ranking criterion for these attributes
  *   favors exact matching on other attributes. This reduces the impact of individual attributes with a lot of content
  *   on ranking.
  * @param disableTypoToleranceOnAttributes
  *   Attributes for which you want to turn off [typo
  *   tolerance](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/). Attribute
  *   names are case-sensitive Returning only exact matches can help when - [Searching in hyphenated
  *   attributes](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/how-to/how-to-search-in-hyphenated-attributes/).
  *   \- Reducing the number of matches when you have too many. This can happen with attributes that are long blocks of
  *   text, such as product descriptions Consider alternatives such as `disableTypoToleranceOnWords` or adding synonyms
  *   if your attributes have intentional unusual spellings that might look like typos.
  * @param enableABTest
  *   Whether to enable A/B testing for this search.
  * @param enablePersonalization
  *   Whether to enable Personalization.
  * @param enableReRanking
  *   Whether this search will use [Dynamic Re-Ranking](https://www.algolia.com/doc/guides/algolia-ai/re-ranking/) This
  *   setting only has an effect if you activated Dynamic Re-Ranking for this index in the Algolia dashboard.
  * @param enableRules
  *   Whether to enable rules.
  * @param filters
  *   Filter expression to only include items that match the filter criteria in the response. You can use these filter
  *   expressions: - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`,
  *   `>=`. - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of
  *   the range (inclusive). - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute
  *   (case-sensitive) and `<value>` a facet value. - **Tag filters.** `_tags:<value>` or just `<value>`
  *   (case-sensitive). - **Boolean filters.** `<facet>: true | false`. You can combine filters with `AND`, `OR`, and
  *   `NOT` operators with the following restrictions: - You can only combine filters of the same type with `OR`. **Not
  *   supported:** `facet:value OR num > 3`. - You can't use `NOT` with combinations of filters. **Not supported:**
  *   `NOT(facet:value OR facet:value)` - You can't combine conjunctions (`AND`) with `OR`. **Not supported:**
  *   `facet:value OR (facet:value AND facet:value)` Use quotes around your filters, if the facet attribute name or
  *   facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes. If a facet attribute is an array, the filter
  *   matches if it matches at least one element of the array. For more information, see
  *   [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).
  * @param getRankingInfo
  *   Whether the search response should include detailed ranking information.
  * @param highlightPostTag
  *   HTML tag to insert after the highlighted parts in all highlighted results and snippets.
  * @param highlightPreTag
  *   HTML tag to insert before the highlighted parts in all highlighted results and snippets.
  * @param maxFacetHits
  *   Maximum number of facet values to return when [searching for facet
  *   values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
  * @param minProximity
  *   Minimum proximity score for two matching words This adjusts the [Proximity ranking
  *   criterion](https://www.algolia.com/doc/guides/managing-results/relevance-overview/in-depth/ranking-criteria/#proximity)
  *   by equally scoring matches that are farther apart For example, if `minProximity` is 2, neighboring matches and
  *   matches with one word between them would have the same score.
  * @param minWordSizefor1Typo
  *   Minimum number of characters a word in the search query must contain to accept matches with [one
  *   typo](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
  * @param minWordSizefor2Typos
  *   Minimum number of characters a word in the search query must contain to accept matches with [two
  *   typos](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/typo-tolerance/in-depth/configuring-typo-tolerance/#configuring-word-length-for-typos).
  * @param naturalLanguages
  *   ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to
  *   keyword searches) - Sets `removeStopWords` and `ignorePlurals` to the list of provided languages. - Sets
  *   `removeWordsIfNoResults` to `allOptional`. - Adds a `natural_language` attribute to `ruleContexts` and
  *   `analyticsTags`.
  * @param percentileComputation
  *   Whether to include this search when calculating processing-time percentiles.
  * @param personalizationImpact
  *   Impact that Personalization should have on this search The higher this value is, the more Personalization
  *   determines the ranking compared to other factors. For more information, see [Understanding Personalization
  *   impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
  * @param queryLanguages
  *   Languages for language-specific query processing steps such as plurals, stop-word removal, and word-detection
  *   dictionaries This setting sets a default list of languages used by the `removeStopWords` and `ignorePlurals`
  *   settings. This setting also sets a dictionary for word detection in the logogram-based
  *   [CJK](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/normalization/#normalization-for-logogram-based-languages-cjk)
  *   languages. To support this, you must place the CJK language **first** **You should always specify a query
  *   language.** If you don't specify an indexing language, the search engine uses all [supported
  *   languages](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/),
  *   or the languages you specified with the `ignorePlurals` or `removeStopWords` parameters. This can lead to
  *   unexpected search results. For more information, see [Language-specific
  *   configuration](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/language-specific-configurations/).
  * @param replaceSynonymsInHighlight
  *   Whether to replace a highlighted word with the matched synonym By default, the original words are highlighted even
  *   if a synonym matches. For example, with `home` as a synonym for `house` and a search for `home`, records matching
  *   either \"home\" or \"house\" are included in the search results, and either \"home\" or \"house\" are highlighted
  *   With `replaceSynonymsInHighlight` set to `true`, a search for `home` still matches the same records, but all
  *   occurrences of \"house\" are replaced by \"home\" in the highlighted response.
  * @param responseFields
  *   Properties to include in the API response of search and browse requests By default, all response properties are
  *   included. To reduce the response size, you can select which properties should be included An empty list may lead
  *   to an empty API response (except properties you can't exclude) You can't exclude these properties: `message`,
  *   `warning`, `cursor`, `abTestVariantID`, or any property added by setting `getRankingInfo` to true Your search
  *   depends on the `hits` field. If you omit this field, searches won't return any results. Your UI might also depend
  *   on other properties, for example, for pagination. Before restricting the response size, check the impact on your
  *   search experience.
  * @param restrictHighlightAndSnippetArrays
  *   Whether to restrict highlighting and snippeting to items that at least partially matched the search query. By
  *   default, all items are highlighted and snippeted.
  * @param restrictSearchableAttributes
  *   Restricts a search to a subset of your searchable attributes. Attribute names are case-sensitive.
  * @param ruleContexts
  *   Assigns a rule context to the search query [Rule
  *   contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context)
  *   are strings that you can use to trigger matching rules.
  * @param snippetEllipsisText
  *   String used as an ellipsis indicator when a snippet is truncated.
  * @param synonyms
  *   Whether to take into account an index's synonyms for this search.
  */
case class BaseInjectionQueryParameters(
    advancedSyntax: Option[Boolean] = scala.None,
    advancedSyntaxFeatures: Option[Seq[AdvancedSyntaxFeatures]] = scala.None,
    allowTyposOnNumericTokens: Option[Boolean] = scala.None,
    alternativesAsExact: Option[Seq[AlternativesAsExact]] = scala.None,
    analytics: Option[Boolean] = scala.None,
    attributeCriteriaComputedByMinProximity: Option[Boolean] = scala.None,
    attributesToHighlight: Option[Seq[String]] = scala.None,
    attributesToRetrieve: Option[Seq[String]] = scala.None,
    attributesToSnippet: Option[Seq[String]] = scala.None,
    clickAnalytics: Option[Boolean] = scala.None,
    decompoundQuery: Option[Boolean] = scala.None,
    disableExactOnAttributes: Option[Seq[String]] = scala.None,
    disableTypoToleranceOnAttributes: Option[Seq[String]] = scala.None,
    distinct: Option[Distinct] = scala.None,
    enableABTest: Option[Boolean] = scala.None,
    enablePersonalization: Option[Boolean] = scala.None,
    enableReRanking: Option[Boolean] = scala.None,
    enableRules: Option[Boolean] = scala.None,
    exactOnSingleWordQuery: Option[ExactOnSingleWordQuery] = scala.None,
    facetFilters: Option[FacetFilters] = scala.None,
    filters: Option[String] = scala.None,
    getRankingInfo: Option[Boolean] = scala.None,
    highlightPostTag: Option[String] = scala.None,
    highlightPreTag: Option[String] = scala.None,
    ignorePlurals: Option[IgnorePlurals] = scala.None,
    maxFacetHits: Option[Int] = scala.None,
    minProximity: Option[Int] = scala.None,
    minWordSizefor1Typo: Option[Int] = scala.None,
    minWordSizefor2Typos: Option[Int] = scala.None,
    naturalLanguages: Option[Seq[SupportedLanguage]] = scala.None,
    numericFilters: Option[NumericFilters] = scala.None,
    optionalFilters: Option[OptionalFilters] = scala.None,
    optionalWords: Option[OptionalWords] = scala.None,
    percentileComputation: Option[Boolean] = scala.None,
    personalizationImpact: Option[Int] = scala.None,
    queryLanguages: Option[Seq[SupportedLanguage]] = scala.None,
    queryType: Option[QueryType] = scala.None,
    removeStopWords: Option[RemoveStopWords] = scala.None,
    removeWordsIfNoResults: Option[RemoveWordsIfNoResults] = scala.None,
    replaceSynonymsInHighlight: Option[Boolean] = scala.None,
    responseFields: Option[Seq[String]] = scala.None,
    restrictHighlightAndSnippetArrays: Option[Boolean] = scala.None,
    restrictSearchableAttributes: Option[Seq[String]] = scala.None,
    ruleContexts: Option[Seq[String]] = scala.None,
    snippetEllipsisText: Option[String] = scala.None,
    synonyms: Option[Boolean] = scala.None,
    typoTolerance: Option[TypoTolerance] = scala.None
)
