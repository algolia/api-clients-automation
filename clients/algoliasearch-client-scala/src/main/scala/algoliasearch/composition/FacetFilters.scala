/** Composition API Composition API.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.composition

import org.json4s._

/** Filter the search by facet values, so that only records with the same facet values are retrieved. **Prefer using the
  * `filters` parameter, which supports all filter types and combinations with boolean operators.** - `[filter1,
  * filter2]` is interpreted as `filter1 AND filter2`. - `[[filter1, filter2], filter3]` is interpreted as `filter1 OR
  * filter2 AND filter3`. - `facet:-value` is interpreted as `NOT facet:value`. While it's best to avoid attributes that
  * start with a `-`, you can still filter them by escaping with a backslash: `facet:\\-value`.
  */
sealed trait FacetFilters

object FacetFilters {

  case class SeqOfFacetFilters(value: Seq[FacetFilters]) extends FacetFilters
  case class StringValue(value: String) extends FacetFilters

  def apply(value: Seq[FacetFilters]): FacetFilters = {
    FacetFilters.SeqOfFacetFilters(value)
  }
  def apply(value: String): FacetFilters = {
    FacetFilters.StringValue(value)
  }

}

object FacetFiltersSerializer extends Serializer[FacetFilters] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), FacetFilters] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[FacetFilters] =>
      json match {
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) =>
          FacetFilters.SeqOfFacetFilters(value.map(_.extract))
        case JString(value) => FacetFilters.StringValue(value)
        case _              => throw new MappingException("Can't convert " + json + " to FacetFilters")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: FacetFilters =>
    value match {
      case FacetFilters.SeqOfFacetFilters(value) => JArray(value.map(Extraction.decompose).toList)
      case FacetFilters.StringValue(value)       => JString(value)
    }
  }
}
