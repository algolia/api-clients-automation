/** Composition API Composition API.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.composition

import org.json4s._

/** Filter by numeric facets. **Prefer using the `filters` parameter, which supports all filter types and combinations
  * with boolean operators.** You can use numeric comparison operators: `<`, `<=`, `=`, `!=`, `>`, `>=`. Comparisons are
  * precise up to 3 decimals. You can also provide ranges: `facet:<lower> TO <upper>`. The range includes the lower and
  * upper boundaries. The same combination rules apply as for `facetFilters`.
  */
sealed trait NumericFilters

object NumericFilters {

  case class SeqOfNumericFilters(value: Seq[NumericFilters]) extends NumericFilters
  case class StringValue(value: String) extends NumericFilters

  def apply(value: Seq[NumericFilters]): NumericFilters = {
    NumericFilters.SeqOfNumericFilters(value)
  }
  def apply(value: String): NumericFilters = {
    NumericFilters.StringValue(value)
  }

}

object NumericFiltersSerializer extends Serializer[NumericFilters] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), NumericFilters] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[NumericFilters] =>
      json match {
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) =>
          NumericFilters.SeqOfNumericFilters(value.map(_.extract))
        case JString(value) => NumericFilters.StringValue(value)
        case _              => throw new MappingException("Can't convert " + json + " to NumericFilters")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: NumericFilters =>
    value match {
      case NumericFilters.SeqOfNumericFilters(value) => JArray(value.map(Extraction.decompose).toList)
      case NumericFilters.StringValue(value)         => JString(value)
    }
  }
}
