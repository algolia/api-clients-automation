/** Composition API Composition API.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.composition

import algoliasearch.composition.MatchLevel._

import org.json4s._

/** SnippetResult
  */
sealed trait SnippetResult

trait SnippetResultTrait extends SnippetResult

object SnippetResult {

  case class MapOfStringSnippetResult(value: Map[String, SnippetResult]) extends SnippetResult
  case class SeqOfSnippetResult(value: Seq[SnippetResult]) extends SnippetResult

  def apply(value: Map[String, SnippetResult]): SnippetResult = {
    SnippetResult.MapOfStringSnippetResult(value)
  }
  def apply(value: Seq[SnippetResult]): SnippetResult = {
    SnippetResult.SeqOfSnippetResult(value)
  }

}

object SnippetResultSerializer extends Serializer[SnippetResult] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), SnippetResult] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[SnippetResult] =>
      json match {
        case value: JObject if value.obj.exists(_._1 == "matchLevel") => Extraction.extract[SnippetResultOption](value)
        case value: JObject => SnippetResult.apply(Extraction.extract[Map[String, SnippetResult]](value))
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) =>
          SnippetResult.SeqOfSnippetResult(value.map(_.extract))
        case _ => throw new MappingException("Can't convert " + json + " to SnippetResult")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: SnippetResult =>
    value match {
      case value: SnippetResultOption              => Extraction.decompose(value)(format - this)
      case SnippetResult.SeqOfSnippetResult(value) => JArray(value.map(Extraction.decompose).toList)
    }
  }
}
