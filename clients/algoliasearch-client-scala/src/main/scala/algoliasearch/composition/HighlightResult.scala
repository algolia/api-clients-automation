/** Composition API Composition API.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.composition

import algoliasearch.composition.MatchLevel._

import org.json4s._

/** HighlightResult
  */
sealed trait HighlightResult

trait HighlightResultTrait extends HighlightResult

object HighlightResult {

  case class MapOfStringHighlightResult(value: Map[String, HighlightResult]) extends HighlightResult
  case class SeqOfHighlightResult(value: Seq[HighlightResult]) extends HighlightResult

  def apply(value: Map[String, HighlightResult]): HighlightResult = {
    HighlightResult.MapOfStringHighlightResult(value)
  }
  def apply(value: Seq[HighlightResult]): HighlightResult = {
    HighlightResult.SeqOfHighlightResult(value)
  }

}

object HighlightResultSerializer extends Serializer[HighlightResult] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), HighlightResult] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[HighlightResult] =>
      json match {
        case value: JObject if value.obj.exists(_._1 == "matchLevel") && value.obj.exists(_._1 == "matchedWords") =>
          Extraction.extract[HighlightResultOption](value)
        case value: JObject => HighlightResult.apply(Extraction.extract[Map[String, HighlightResult]](value))
        case JArray(value) if value.forall(_.isInstanceOf[JArray]) =>
          HighlightResult.SeqOfHighlightResult(value.map(_.extract))
        case _ => throw new MappingException("Can't convert " + json + " to HighlightResult")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: HighlightResult =>
    value match {
      case value: HighlightResultOption                => Extraction.decompose(value)(format - this)
      case HighlightResult.SeqOfHighlightResult(value) => JArray(value.map(Extraction.decompose).toList)
    }
  }
}
