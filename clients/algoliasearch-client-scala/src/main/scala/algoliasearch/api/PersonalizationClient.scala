/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
  * https://github.com/algolia/api-clients-automation. DO NOT EDIT.
  */
package algoliasearch.api

import algoliasearch.personalization.DeleteUserProfileResponse
import algoliasearch.personalization.ErrorBase
import algoliasearch.personalization.GetUserTokenResponse
import algoliasearch.personalization.PersonalizationStrategyParams
import algoliasearch.personalization.SetPersonalizationStrategyResponse
import algoliasearch.personalization._
import algoliasearch.ApiClient
import algoliasearch.api.PersonalizationClient.hosts
import algoliasearch.config._
import algoliasearch.internal.util._

import scala.concurrent.{ExecutionContext, Future}
import scala.util.Random

object PersonalizationClient {

  /** Creates a new SearchApi instance using default hosts.
    *
    * @param appId
    *   application ID
    * @param apiKey
    *   api key
    * @param region
    *   region
    * @param clientOptions
    *   client options
    */
  def apply(
      appId: String,
      apiKey: String,
      region: String,
      clientOptions: ClientOptions = ClientOptions()
  ) = new PersonalizationClient(
    appId = appId,
    apiKey = apiKey,
    region = region,
    clientOptions = clientOptions
  )

  private def hosts(region: String): Seq[Host] = {
    val allowedRegions = Seq("eu", "us")
    if (!allowedRegions.contains(region)) {
      throw new IllegalArgumentException(
        s"`region` is required and must be one of the following: ${allowedRegions.mkString(", ")}"
      )
    }
    val url = "personalization.{region}.algolia.com".replace("{region}", region)
    Seq(Host(url = url, callTypes = Set(CallType.Read, CallType.Write)))
  }
}

class PersonalizationClient(
    appId: String,
    apiKey: String,
    region: String,
    clientOptions: ClientOptions = ClientOptions()
) extends ApiClient(
      appId = appId,
      apiKey = apiKey,
      clientName = "Personalization",
      defaultHosts = hosts(region),
      formats = JsonSupport.format,
      options = clientOptions
    ) {

  /** This method allow you to send requests to the Algolia REST API.
    *
    * @param path
    *   Path of the endpoint, anything after \"/1\" must be specified.
    * @param parameters
    *   Query parameters to apply to the current query.
    */
  def del[T: Manifest](
      path: String,
      parameters: Option[Map[String, Any]] = None,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[T] = Future {
    requireNotNull(path, "Parameter `path` is required when calling `del`.")

    val request = HttpRequest
      .builder()
      .withMethod("DELETE")
      .withPath(s"/1${path}")
      .withQueryParameters(parameters)
      .build()
    execute[T](request, requestOptions)
  }

  /** Delete the user profile and all its associated data. Returns, as part of the response, a date until which the data
    * can safely be considered as deleted for the given user. This means if you send events for the given user before
    * this date, they will be ignored. Any data received after the deletedUntil date will start building a new user
    * profile. It might take a couple hours for the deletion request to be fully processed.
    *
    * @param userToken
    *   userToken representing the user for which to fetch the Personalization profile.
    */
  def deleteUserProfile(userToken: String, requestOptions: Option[RequestOptions] = None)(implicit
      ec: ExecutionContext
  ): Future[DeleteUserProfileResponse] = Future {
    requireNotNull(userToken, "Parameter `userToken` is required when calling `deleteUserProfile`.")

    val request = HttpRequest
      .builder()
      .withMethod("DELETE")
      .withPath(s"/1/profiles/${escape(userToken)}")
      .build()
    execute[DeleteUserProfileResponse](request, requestOptions)
  }

  /** This method allow you to send requests to the Algolia REST API.
    *
    * @param path
    *   Path of the endpoint, anything after \"/1\" must be specified.
    * @param parameters
    *   Query parameters to apply to the current query.
    */
  def get[T: Manifest](
      path: String,
      parameters: Option[Map[String, Any]] = None,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[T] = Future {
    requireNotNull(path, "Parameter `path` is required when calling `get`.")

    val request = HttpRequest
      .builder()
      .withMethod("GET")
      .withPath(s"/1${path}")
      .withQueryParameters(parameters)
      .build()
    execute[T](request, requestOptions)
  }

  /** The strategy contains information on the events and facets that impact user profiles and personalized search
    * results.
    */
  def getPersonalizationStrategy(
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[PersonalizationStrategyParams] = Future {

    val request = HttpRequest
      .builder()
      .withMethod("GET")
      .withPath(s"/1/strategies/personalization")
      .build()
    execute[PersonalizationStrategyParams](request, requestOptions)
  }

  /** Get the user profile built from Personalization strategy. The profile is structured by facet name used in the
    * strategy. Each facet value is mapped to its score. Each score represents the user affinity for a specific facet
    * value given the userToken past events and the Personalization strategy defined. Scores are bounded to 20. The last
    * processed event timestamp is provided using the ISO 8601 format for debugging purposes.
    *
    * @param userToken
    *   userToken representing the user for which to fetch the Personalization profile.
    */
  def getUserTokenProfile(userToken: String, requestOptions: Option[RequestOptions] = None)(implicit
      ec: ExecutionContext
  ): Future[GetUserTokenResponse] = Future {
    requireNotNull(userToken, "Parameter `userToken` is required when calling `getUserTokenProfile`.")

    val request = HttpRequest
      .builder()
      .withMethod("GET")
      .withPath(s"/1/profiles/personalization/${escape(userToken)}")
      .build()
    execute[GetUserTokenResponse](request, requestOptions)
  }

  /** This method allow you to send requests to the Algolia REST API.
    *
    * @param path
    *   Path of the endpoint, anything after \"/1\" must be specified.
    * @param parameters
    *   Query parameters to apply to the current query.
    * @param body
    *   Parameters to send with the custom request.
    */
  def post[T: Manifest](
      path: String,
      parameters: Option[Map[String, Any]] = None,
      body: Option[Any] = None,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[T] = Future {
    requireNotNull(path, "Parameter `path` is required when calling `post`.")

    val request = HttpRequest
      .builder()
      .withMethod("POST")
      .withPath(s"/1${path}")
      .withBody(body)
      .withQueryParameters(parameters)
      .build()
    execute[T](request, requestOptions)
  }

  /** This method allow you to send requests to the Algolia REST API.
    *
    * @param path
    *   Path of the endpoint, anything after \"/1\" must be specified.
    * @param parameters
    *   Query parameters to apply to the current query.
    * @param body
    *   Parameters to send with the custom request.
    */
  def put[T: Manifest](
      path: String,
      parameters: Option[Map[String, Any]] = None,
      body: Option[Any] = None,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[T] = Future {
    requireNotNull(path, "Parameter `path` is required when calling `put`.")

    val request = HttpRequest
      .builder()
      .withMethod("PUT")
      .withPath(s"/1${path}")
      .withBody(body)
      .withQueryParameters(parameters)
      .build()
    execute[T](request, requestOptions)
  }

  /** A strategy defines the events and facets that impact user profiles and personalized search results.
    */
  def setPersonalizationStrategy(
      personalizationStrategyParams: PersonalizationStrategyParams,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[SetPersonalizationStrategyResponse] = Future {
    requireNotNull(
      personalizationStrategyParams,
      "Parameter `personalizationStrategyParams` is required when calling `setPersonalizationStrategy`."
    )

    val request = HttpRequest
      .builder()
      .withMethod("POST")
      .withPath(s"/1/strategies/personalization")
      .withBody(personalizationStrategyParams)
      .build()
    execute[SetPersonalizationStrategyResponse](request, requestOptions)
  }

}
