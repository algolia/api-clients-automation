/** Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
  * https://github.com/algolia/api-clients-automation. DO NOT EDIT.
  */
package algoliasearch.api

import algoliasearch.abtesting.ABTest
import algoliasearch.abtesting.ABTestResponse
import algoliasearch.abtesting.AddABTestsRequest
import algoliasearch.abtesting.ErrorBase
import algoliasearch.abtesting.ListABTestsResponse
import algoliasearch.abtesting._
import algoliasearch.ApiClient
import algoliasearch.api.AbtestingClient.hosts
import algoliasearch.config._
import algoliasearch.internal.util._

import scala.concurrent.{ExecutionContext, Future}
import scala.util.Random

object AbtestingClient {

  /** Creates a new SearchApi instance using default hosts.
    *
    * @param appId
    *   application ID
    * @param apiKey
    *   api key
    * @param region
    *   region
    * @param clientOptions
    *   client options
    */
  def apply(
      appId: String,
      apiKey: String,
      region: Option[String] = None,
      clientOptions: ClientOptions = ClientOptions()
  ) = new AbtestingClient(
    appId = appId,
    apiKey = apiKey,
    region = region,
    clientOptions = clientOptions
  )

  private def hosts(region: Option[String] = None): Seq[Host] = {
    val allowedRegions = Seq("de", "us")
    if (region.isEmpty || !allowedRegions.contains(region.get)) {
      throw new IllegalArgumentException(s"`region` must be one of the following: ${allowedRegions.mkString(", ")}")
    }
    val url =
      if (region.isEmpty) "analytics.algolia.com" else "analytics.{region}.algolia.com".replace("{region}", region.get)
    Seq(Host(url = url, callTypes = Set(CallType.Read, CallType.Write)))
  }
}

class AbtestingClient(
    appId: String,
    apiKey: String,
    region: Option[String] = None,
    clientOptions: ClientOptions = ClientOptions()
) extends ApiClient(
      appId = appId,
      apiKey = apiKey,
      clientName = "Abtesting",
      defaultHosts = hosts(region),
      formats = JsonSupport.format,
      options = clientOptions
    ) {

  /** Creates an A/B test.
    */
  def addABTests(addABTestsRequest: AddABTestsRequest, requestOptions: Option[RequestOptions] = None)(implicit
      ec: ExecutionContext
  ): Future[ABTestResponse] = Future {
    requireNotNull(addABTestsRequest, "Parameter `addABTestsRequest` is required when calling `addABTests`.")

    val request = HttpRequest
      .builder()
      .withMethod("POST")
      .withPath(s"/2/abtests")
      .withBody(addABTestsRequest)
      .build()
    execute[ABTestResponse](request, requestOptions)
  }

  /** This method allow you to send requests to the Algolia REST API.
    *
    * @param path
    *   Path of the endpoint, anything after \"/1\" must be specified.
    * @param parameters
    *   Query parameters to apply to the current query.
    */
  def del[T: Manifest](
      path: String,
      parameters: Map[String, Any] = Map.empty,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[T] = Future {
    requireNotNull(path, "Parameter `path` is required when calling `del`.")

    val request = HttpRequest
      .builder()
      .withMethod("DELETE")
      .withPath(s"/1${escape(path)}")
      .withQueryParameters(parameters)
      .build()
    execute[T](request, requestOptions)
  }

  /** Delete an A/B test. To determine the `id` for an A/B test, use the [`listABTests`
    * operation](#tag/abtest/operation/listABTests).
    *
    * @param id
    *   Unique A/B test ID.
    */
  def deleteABTest(id: Int, requestOptions: Option[RequestOptions] = None)(implicit
      ec: ExecutionContext
  ): Future[ABTestResponse] = Future {
    requireNotNull(id, "Parameter `id` is required when calling `deleteABTest`.")

    val request = HttpRequest
      .builder()
      .withMethod("DELETE")
      .withPath(s"/2/abtests/${escape(id)}")
      .build()
    execute[ABTestResponse](request, requestOptions)
  }

  /** This method allow you to send requests to the Algolia REST API.
    *
    * @param path
    *   Path of the endpoint, anything after \"/1\" must be specified.
    * @param parameters
    *   Query parameters to apply to the current query.
    */
  def get[T: Manifest](
      path: String,
      parameters: Map[String, Any] = Map.empty,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[T] = Future {
    requireNotNull(path, "Parameter `path` is required when calling `get`.")

    val request = HttpRequest
      .builder()
      .withMethod("GET")
      .withPath(s"/1${escape(path)}")
      .withQueryParameters(parameters)
      .build()
    execute[T](request, requestOptions)
  }

  /** Get specific details for an A/B test. To determine the `id` for an A/B test, use the [`listABTests`
    * operation](#tag/abtest/operation/listABTests).
    *
    * @param id
    *   Unique A/B test ID.
    */
  def getABTest(id: Int, requestOptions: Option[RequestOptions] = None)(implicit ec: ExecutionContext): Future[ABTest] =
    Future {
      requireNotNull(id, "Parameter `id` is required when calling `getABTest`.")

      val request = HttpRequest
        .builder()
        .withMethod("GET")
        .withPath(s"/2/abtests/${escape(id)}")
        .build()
      execute[ABTest](request, requestOptions)
    }

  /** List all A/B tests.
    *
    * @param offset
    *   Position of the starting record. Used for paging. 0 is the first record.
    * @param limit
    *   Number of records to return (page size).
    * @param indexPrefix
    *   Only return A/B tests for indices starting with this prefix.
    * @param indexSuffix
    *   Only return A/B tests for indices ending with this suffix.
    */
  def listABTests(
      offset: Option[Int] = None,
      limit: Option[Int] = None,
      indexPrefix: Option[String] = None,
      indexSuffix: Option[String] = None,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[ListABTestsResponse] = Future {

    val request = HttpRequest
      .builder()
      .withMethod("GET")
      .withPath(s"/2/abtests")
      .withQueryParameter("offset", offset)
      .withQueryParameter("limit", limit)
      .withQueryParameter("indexPrefix", indexPrefix)
      .withQueryParameter("indexSuffix", indexSuffix)
      .build()
    execute[ListABTestsResponse](request, requestOptions)
  }

  /** This method allow you to send requests to the Algolia REST API.
    *
    * @param path
    *   Path of the endpoint, anything after \"/1\" must be specified.
    * @param parameters
    *   Query parameters to apply to the current query.
    * @param body
    *   Parameters to send with the custom request.
    */
  def post[T: Manifest](
      path: String,
      parameters: Map[String, Any] = Map.empty,
      body: Option[Any] = None,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[T] = Future {
    requireNotNull(path, "Parameter `path` is required when calling `post`.")

    val request = HttpRequest
      .builder()
      .withMethod("POST")
      .withPath(s"/1${escape(path)}")
      .withBody(body)
      .withQueryParameters(parameters)
      .build()
    execute[T](request, requestOptions)
  }

  /** This method allow you to send requests to the Algolia REST API.
    *
    * @param path
    *   Path of the endpoint, anything after \"/1\" must be specified.
    * @param parameters
    *   Query parameters to apply to the current query.
    * @param body
    *   Parameters to send with the custom request.
    */
  def put[T: Manifest](
      path: String,
      parameters: Map[String, Any] = Map.empty,
      body: Option[Any] = None,
      requestOptions: Option[RequestOptions] = None
  )(implicit ec: ExecutionContext): Future[T] = Future {
    requireNotNull(path, "Parameter `path` is required when calling `put`.")

    val request = HttpRequest
      .builder()
      .withMethod("PUT")
      .withPath(s"/1${escape(path)}")
      .withBody(body)
      .withQueryParameters(parameters)
      .build()
    execute[T](request, requestOptions)
  }

  /** If stopped, the test is over and can't be restarted. There is now only one index, receiving 100% of all search
    * requests. The data gathered for stopped A/B tests is retained. To determine the `id` for an A/B test, use the
    * [`listABTests` operation](#tag/abtest/operation/listABTests).
    *
    * @param id
    *   Unique A/B test ID.
    */
  def stopABTest(id: Int, requestOptions: Option[RequestOptions] = None)(implicit
      ec: ExecutionContext
  ): Future[ABTestResponse] = Future {
    requireNotNull(id, "Parameter `id` is required when calling `stopABTest`.")

    val request = HttpRequest
      .builder()
      .withMethod("POST")
      .withPath(s"/2/abtests/${escape(id)}/stop")
      .build()
    execute[ABTestResponse](request, requestOptions)
  }

}
