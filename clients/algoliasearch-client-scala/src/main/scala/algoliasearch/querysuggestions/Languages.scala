/** Query Suggestions API The Query Suggestions API lets you manage Algolia's Query Suggestions configurations. Query
  * Suggestions add new indices with popular search queries, external suggestions, or facet values to your Algolia
  * application. In your user interface, you can query the Query Suggestions indices like regular indices and add
  * [suggested searches](https://www.algolia.com/doc/guides/building-search-ui/ui-and-ux-patterns/query-suggestions/js/)
  * to guide users and speed up their search.
  *
  * The version of the OpenAPI document: 1.0.0
  *
  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
  * https://openapi-generator.tech Do not edit the class manually.
  */
package algoliasearch.querysuggestions

import org.json4s._

/** Set the language for deduplicating singular and plural suggestions. If specified, only the more popular form is
  * included.
  */
sealed trait Languages

object Languages {

  case class SeqOfString(value: Seq[String]) extends Languages
  case class BooleanValue(value: Boolean) extends Languages

  def apply(value: Seq[String]): Languages = {
    Languages.SeqOfString(value)
  }
  def apply(value: Boolean): Languages = {
    Languages.BooleanValue(value)
  }
}

object LanguagesSerializer extends Serializer[Languages] {
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), Languages] = {

    case (TypeInfo(clazz, _), json) if clazz == classOf[Languages] =>
      json match {
        case JArray(value: List[JString]) => Languages.SeqOfString(value.map(_.extract))
        case JBool(value)                 => Languages.BooleanValue(value)
        case _                            => throw new MappingException("Can't convert " + json + " to Languages")
      }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value =>
    Extraction.decompose(value)(format - this)
  }
}
