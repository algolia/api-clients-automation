// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct CompositionRule: Codable, JSONEncodable {
    /// Composition rule unique identifier.
    public var objectID: String
    /// Conditions that trigger a composition rule.
    public var conditions: [CompositionCondition]
    public var consequence: CompositionRuleConsequence
    /// Description of the rule's purpose to help you distinguish between different rules.
    public var description: String?
    /// Whether the rule is active.
    public var enabled: Bool?
    /// Time periods when the rule is active.
    public var validity: [CompositionTimeRange]?
    /// A list of tags.
    public var tags: [String]?

    public init(
        objectID: String,
        conditions: [CompositionCondition],
        consequence: CompositionRuleConsequence,
        description: String? = nil,
        enabled: Bool? = nil,
        validity: [CompositionTimeRange]? = nil,
        tags: [String]? = nil
    ) {
        self.objectID = objectID
        self.conditions = conditions
        self.consequence = consequence
        self.description = description
        self.enabled = enabled
        self.validity = validity
        self.tags = tags
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case objectID
        case conditions
        case consequence
        case description
        case enabled
        case validity
        case tags
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.objectID, forKey: .objectID)
        try container.encode(self.conditions, forKey: .conditions)
        try container.encode(self.consequence, forKey: .consequence)
        try container.encodeIfPresent(self.description, forKey: .description)
        try container.encodeIfPresent(self.enabled, forKey: .enabled)
        try container.encodeIfPresent(self.validity, forKey: .validity)
        try container.encodeIfPresent(self.tags, forKey: .tags)
    }
}

extension CompositionRule: Equatable {
    public static func ==(lhs: CompositionRule, rhs: CompositionRule) -> Bool {
        lhs.objectID == rhs.objectID &&
            lhs.conditions == rhs.conditions &&
            lhs.consequence == rhs.consequence &&
            lhs.description == rhs.description &&
            lhs.enabled == rhs.enabled &&
            lhs.validity == rhs.validity &&
            lhs.tags == rhs.tags
    }
}

extension CompositionRule: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.objectID.hashValue)
        hasher.combine(self.conditions.hashValue)
        hasher.combine(self.consequence.hashValue)
        hasher.combine(self.description?.hashValue)
        hasher.combine(self.enabled?.hashValue)
        hasher.combine(self.validity?.hashValue)
        hasher.combine(self.tags?.hashValue)
    }
}
