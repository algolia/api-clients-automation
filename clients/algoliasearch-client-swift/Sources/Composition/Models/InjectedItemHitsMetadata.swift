// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

/// Adds the provided metadata to each injected hit via an `_extra` attribute.
public struct InjectedItemHitsMetadata: Codable, JSONEncodable {
    /// When true, the `_injectedItemKey` field is set in the `_extra` object of each affected hit.
    public var addItemKey: Bool?
    /// The user-defined key-value pairs that will be placed in the `_extra` field of each affected hit.
    public var extra: [String: AnyCodable]?

    public init(addItemKey: Bool? = nil, extra: [String: AnyCodable]? = nil) {
        self.addItemKey = addItemKey
        self.extra = extra
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case addItemKey
        case extra
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.addItemKey, forKey: .addItemKey)
        try container.encodeIfPresent(self.extra, forKey: .extra)
    }
}

extension InjectedItemHitsMetadata: Equatable {
    public static func ==(lhs: InjectedItemHitsMetadata, rhs: InjectedItemHitsMetadata) -> Bool {
        lhs.addItemKey == rhs.addItemKey &&
            lhs.extra == rhs.extra
    }
}

extension InjectedItemHitsMetadata: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.addItemKey?.hashValue)
        hasher.combine(self.extra?.hashValue)
    }
}
