// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct CompositionCompositionBaseSearchResponse: Codable, JSONEncodable {
    public var compositions: CompositionCompositionsSearchResponse?

    public init(compositions: CompositionCompositionsSearchResponse? = nil) {
        self.compositions = compositions
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case compositions
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            self.additionalProperties[key] = newValue
        }
    }

    public init(from dictionary: [String: AnyCodable]) throws {
        self.compositions = dictionary["compositions"]?.value as? CompositionCompositionsSearchResponse

        for (key, value) in dictionary {
            switch key {
            case "compositions":
                continue
            default:
                self.additionalProperties[key] = value
            }
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.compositions, forKey: .compositions)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(self.additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        self.compositions = try container.decodeIfPresent(
            CompositionCompositionsSearchResponse.self,
            forKey: .compositions
        )
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("compositions")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        self.additionalProperties = try additionalPropertiesContainer.decodeMap(
            AnyCodable.self,
            excludedKeys: nonAdditionalPropertyKeys
        )
    }
}

extension CompositionCompositionBaseSearchResponse: Equatable {
    public static func ==(
        lhs: CompositionCompositionBaseSearchResponse,
        rhs: CompositionCompositionBaseSearchResponse
    ) -> Bool {
        lhs.compositions == rhs.compositions
            && lhs.additionalProperties == rhs.additionalProperties
    }
}

extension CompositionCompositionBaseSearchResponse: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.compositions?.hashValue)
        hasher.combine(self.additionalProperties.hashValue)
    }
}
