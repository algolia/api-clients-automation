// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public enum BatchCompositionAction: Codable, JSONEncodable, AbstractEncodable {
    case composition(Composition)
    case deleteCompositionAction(DeleteCompositionAction)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .composition(value):
            try container.encode(value)
        case let .deleteCompositionAction(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(Composition.self) {
            self = .composition(value)
        } else if let value = try? container.decode(DeleteCompositionAction.self) {
            self = .deleteCompositionAction(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(
                    codingPath: decoder.codingPath,
                    debugDescription: "Unable to decode instance of BatchCompositionAction"
                )
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .composition(value):
            value as Composition
        case let .deleteCompositionAction(value):
            value as DeleteCompositionAction
        }
    }
}

extension BatchCompositionAction: Equatable {}
extension BatchCompositionAction: Hashable {}
