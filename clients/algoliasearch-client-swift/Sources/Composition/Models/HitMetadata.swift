// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

/// An object that contains the extra key-value pairs provided in the injectedItem definition.
public struct HitMetadata: Codable, JSONEncodable {
    /// The key of the injectedItem that inserted this metadata.
    public var injectedItemKey: String?

    public init(injectedItemKey: String? = nil) {
        self.injectedItemKey = injectedItemKey
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case injectedItemKey = "_injectedItemKey"
    }

    public var additionalProperties: [String: AnyCodable] = [:]

    public subscript(key: String) -> AnyCodable? {
        get {
            if let value = additionalProperties[key] {
                return value
            }
            return nil
        }

        set {
            self.additionalProperties[key] = newValue
        }
    }

    public init(from dictionary: [String: AnyCodable]) throws {
        self.injectedItemKey = dictionary["injectedItemKey"]?.value as? String

        for (key, value) in dictionary {
            switch key {
            case "injectedItemKey":
                continue
            default:
                self.additionalProperties[key] = value
            }
        }
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.injectedItemKey, forKey: .injectedItemKey)
        var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
        try additionalPropertiesContainer.encodeMap(self.additionalProperties)
    }

    // Decodable protocol methods

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)

        self.injectedItemKey = try container.decodeIfPresent(String.self, forKey: .injectedItemKey)
        var nonAdditionalPropertyKeys = Set<String>()
        nonAdditionalPropertyKeys.insert("_injectedItemKey")
        let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
        self.additionalProperties = try additionalPropertiesContainer.decodeMap(
            AnyCodable.self,
            excludedKeys: nonAdditionalPropertyKeys
        )
    }
}

extension HitMetadata: Equatable {
    public static func ==(lhs: HitMetadata, rhs: HitMetadata) -> Bool {
        lhs.injectedItemKey == rhs.injectedItemKey
            && lhs.additionalProperties == rhs.additionalProperties
    }
}

extension HitMetadata: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.injectedItemKey?.hashValue)
        hasher.combine(self.additionalProperties.hashValue)
    }
}
