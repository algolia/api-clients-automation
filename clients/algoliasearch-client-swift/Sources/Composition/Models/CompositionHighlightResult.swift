// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public enum CompositionHighlightResult: Codable, JSONEncodable, AbstractEncodable {
    case compositionHighlightResultOption(CompositionHighlightResultOption)
    case dictionaryOfStringToCompositionHighlightResult([String: CompositionHighlightResult])
    case arrayOfCompositionHighlightResult([CompositionHighlightResult])

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .compositionHighlightResultOption(value):
            try container.encode(value)
        case let .dictionaryOfStringToCompositionHighlightResult(value):
            try container.encode(value)
        case let .arrayOfCompositionHighlightResult(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(CompositionHighlightResultOption.self) {
            self = .compositionHighlightResultOption(value)
        } else if let value = try? container.decode([String: CompositionHighlightResult].self) {
            self = .dictionaryOfStringToCompositionHighlightResult(value)
        } else if let value = try? container.decode([CompositionHighlightResult].self) {
            self = .arrayOfCompositionHighlightResult(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(
                    codingPath: decoder.codingPath,
                    debugDescription: "Unable to decode instance of CompositionHighlightResult"
                )
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .compositionHighlightResultOption(value):
            value as CompositionHighlightResultOption
        case let .dictionaryOfStringToCompositionHighlightResult(value):
            value as [String: CompositionHighlightResult]
        case let .arrayOfCompositionHighlightResult(value):
            value as [CompositionHighlightResult]
        }
    }
}

extension CompositionHighlightResult: Equatable {}
extension CompositionHighlightResult: Hashable {}
