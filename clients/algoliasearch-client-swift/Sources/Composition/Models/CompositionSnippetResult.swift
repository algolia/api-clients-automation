// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public enum CompositionSnippetResult: Codable, JSONEncodable, AbstractEncodable {
    case compositionSnippetResultOption(CompositionSnippetResultOption)
    case dictionaryOfStringToCompositionSnippetResult([String: CompositionSnippetResult])
    case arrayOfCompositionSnippetResult([CompositionSnippetResult])

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .compositionSnippetResultOption(value):
            try container.encode(value)
        case let .dictionaryOfStringToCompositionSnippetResult(value):
            try container.encode(value)
        case let .arrayOfCompositionSnippetResult(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(CompositionSnippetResultOption.self) {
            self = .compositionSnippetResultOption(value)
        } else if let value = try? container.decode([String: CompositionSnippetResult].self) {
            self = .dictionaryOfStringToCompositionSnippetResult(value)
        } else if let value = try? container.decode([CompositionSnippetResult].self) {
            self = .arrayOfCompositionSnippetResult(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(
                    codingPath: decoder.codingPath,
                    debugDescription: "Unable to decode instance of CompositionSnippetResult"
                )
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .compositionSnippetResultOption(value):
            value as CompositionSnippetResultOption
        case let .dictionaryOfStringToCompositionSnippetResult(value):
            value as [String: CompositionSnippetResult]
        case let .arrayOfCompositionSnippetResult(value):
            value as [CompositionSnippetResult]
        }
    }
}

extension CompositionSnippetResult: Equatable {}
extension CompositionSnippetResult: Hashable {}
