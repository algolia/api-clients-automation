// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct SearchForFacetValuesParams: Codable, JSONEncodable {
    /// Search query.
    public var query: String?
    /// Maximum number of facet values to return when [searching for facet
    /// values](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#search-for-facet-values).
    public var maxFacetHits: Int?
    public var searchQuery: CompositionParams?

    public init(query: String? = nil, maxFacetHits: Int? = nil, searchQuery: CompositionParams? = nil) {
        self.query = query
        self.maxFacetHits = maxFacetHits
        self.searchQuery = searchQuery
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case query
        case maxFacetHits
        case searchQuery
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.query, forKey: .query)
        try container.encodeIfPresent(self.maxFacetHits, forKey: .maxFacetHits)
        try container.encodeIfPresent(self.searchQuery, forKey: .searchQuery)
    }
}

extension SearchForFacetValuesParams: Equatable {
    public static func ==(lhs: SearchForFacetValuesParams, rhs: SearchForFacetValuesParams) -> Bool {
        lhs.query == rhs.query &&
            lhs.maxFacetHits == rhs.maxFacetHits &&
            lhs.searchQuery == rhs.searchQuery
    }
}

extension SearchForFacetValuesParams: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.query?.hashValue)
        hasher.combine(self.maxFacetHits?.hashValue)
        hasher.combine(self.searchQuery?.hashValue)
    }
}
