// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct InjectedItem: Codable, JSONEncodable {
    /// injected Item unique identifier.
    public var key: String
    public var source: InjectedItemSource
    public var position: Int
    public var length: Int
    public var metadata: InjectedItemMetadata?

    public init(
        key: String,
        source: InjectedItemSource,
        position: Int,
        length: Int,
        metadata: InjectedItemMetadata? = nil
    ) {
        self.key = key
        self.source = source
        self.position = position
        self.length = length
        self.metadata = metadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case key
        case source
        case position
        case length
        case metadata
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.key, forKey: .key)
        try container.encode(self.source, forKey: .source)
        try container.encode(self.position, forKey: .position)
        try container.encode(self.length, forKey: .length)
        try container.encodeIfPresent(self.metadata, forKey: .metadata)
    }
}

extension InjectedItem: Equatable {
    public static func ==(lhs: InjectedItem, rhs: InjectedItem) -> Bool {
        lhs.key == rhs.key &&
            lhs.source == rhs.source &&
            lhs.position == rhs.position &&
            lhs.length == rhs.length &&
            lhs.metadata == rhs.metadata
    }
}

extension InjectedItem: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.key.hashValue)
        hasher.combine(self.source.hashValue)
        hasher.combine(self.position.hashValue)
        hasher.combine(self.length.hashValue)
        hasher.combine(self.metadata?.hashValue)
    }
}
