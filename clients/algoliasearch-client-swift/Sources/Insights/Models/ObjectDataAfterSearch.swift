// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import AnyCodable
import Core
import Foundation

public struct ObjectDataAfterSearch: Codable, JSONEncodable, Hashable {
    static let queryIDRule = StringRule(minLength: 32, maxLength: 32, pattern: "[0-9a-f]{32}")
    /// Unique identifier for a search query, used to track purchase events with multiple records that originate from
    /// different searches.
    public var queryID: String?
    public var price: Price?
    /// Quantity of a product that has been purchased or added to the cart. The total purchase value is the sum of
    /// `quantity` multiplied with the `price` for each purchased item.
    public var quantity: Int?
    public var discount: Discount?

    public init(queryID: String? = nil, price: Price? = nil, quantity: Int? = nil, discount: Discount? = nil) {
        self.queryID = queryID
        self.price = price
        self.quantity = quantity
        self.discount = discount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case queryID
        case price
        case quantity
        case discount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.queryID, forKey: .queryID)
        try container.encodeIfPresent(self.price, forKey: .price)
        try container.encodeIfPresent(self.quantity, forKey: .quantity)
        try container.encodeIfPresent(self.discount, forKey: .discount)
    }
}
