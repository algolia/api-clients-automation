// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

public struct DeleteByParams: Codable, JSONEncodable, Hashable {
    public var facetFilters: FacetFilters?
    /// [Filter](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) the query with numeric,
    /// facet, or tag filters.
    public var filters: String?
    public var numericFilters: NumericFilters?
    public var tagFilters: TagFilters?
    /// Search for entries [around a central location](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filter-around-a-central-point),
    /// enabling a geographical search within a circular area.
    public var aroundLatLng: String?
    public var aroundRadius: AroundRadius?
    /// Search inside a [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)
    /// (in geographical coordinates).
    public var insideBoundingBox: [[Double]]?
    /// Search inside a [polygon](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas)
    /// (in geographical coordinates).
    public var insidePolygon: [[Double]]?

    public init(
        facetFilters: FacetFilters? = nil,
        filters: String? = nil,
        numericFilters: NumericFilters? = nil,
        tagFilters: TagFilters? = nil,
        aroundLatLng: String? = nil,
        aroundRadius: AroundRadius? = nil,
        insideBoundingBox: [[Double]]? = nil,
        insidePolygon: [[Double]]? = nil
    ) {
        self.facetFilters = facetFilters
        self.filters = filters
        self.numericFilters = numericFilters
        self.tagFilters = tagFilters
        self.aroundLatLng = aroundLatLng
        self.aroundRadius = aroundRadius
        self.insideBoundingBox = insideBoundingBox
        self.insidePolygon = insidePolygon
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case facetFilters
        case filters
        case numericFilters
        case tagFilters
        case aroundLatLng
        case aroundRadius
        case insideBoundingBox
        case insidePolygon
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.facetFilters, forKey: .facetFilters)
        try container.encodeIfPresent(self.filters, forKey: .filters)
        try container.encodeIfPresent(self.numericFilters, forKey: .numericFilters)
        try container.encodeIfPresent(self.tagFilters, forKey: .tagFilters)
        try container.encodeIfPresent(self.aroundLatLng, forKey: .aroundLatLng)
        try container.encodeIfPresent(self.aroundRadius, forKey: .aroundRadius)
        try container.encodeIfPresent(self.insideBoundingBox, forKey: .insideBoundingBox)
        try container.encodeIfPresent(self.insidePolygon, forKey: .insidePolygon)
    }
}
