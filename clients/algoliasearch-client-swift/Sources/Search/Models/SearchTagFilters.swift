// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

/// Filter the search by values of the special &#x60;_tags&#x60; attribute.  **Prefer using the &#x60;filters&#x60;
/// parameter, which supports all filter types and combinations with boolean operators.**  Different from regular
/// facets, &#x60;_tags&#x60; can only be used for filtering (including or excluding records). You won&#39;t get a facet
/// count. The same combination and escaping rules apply as for &#x60;facetFilters&#x60;.
public enum SearchTagFilters: Codable, JSONEncodable, AbstractEncodable {
    case arrayOfSearchMixedSearchFilters([SearchMixedSearchFilters])
    case string(String)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .arrayOfSearchMixedSearchFilters(value):
            try container.encode(value)
        case let .string(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode([SearchMixedSearchFilters].self) {
            self = .arrayOfSearchMixedSearchFilters(value)
        } else if let value = try? container.decode(String.self) {
            self = .string(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of SearchTagFilters")
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .arrayOfSearchMixedSearchFilters(value):
            value as [SearchMixedSearchFilters]
        case let .string(value):
            value as String
        }
    }
}
