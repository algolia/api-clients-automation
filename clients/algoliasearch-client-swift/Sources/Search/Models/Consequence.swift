// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

#if canImport(AnyCodable)
    import AnyCodable
#endif
import Core
import Foundation

/// [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences) of a rule.
public struct Consequence: Codable, JSONEncodable, Hashable {
    public var params: ConsequenceParams?
    /// Records to promote.
    public var promote: [Promote]?
    /// Only use in combination with the `promote` consequence. When `true`, promoted results will be restricted to
    /// match the filters of the current search. When `false`, the promoted results will show up regardless of the
    /// filters.
    public var filterPromotes: Bool?
    /// Records to hide. By default, you can hide up to 50 records per rule.
    public var hide: [ConsequenceHide]?
    /// Custom JSON object that will be appended to the userData array in the response. This object isn't interpreted by
    /// the API. It's limited to 1kB of minified JSON.
    public var userData: AnyCodable?

    public init(
        params: ConsequenceParams? = nil,
        promote: [Promote]? = nil,
        filterPromotes: Bool? = nil,
        hide: [ConsequenceHide]? = nil,
        userData: AnyCodable? = nil
    ) {
        self.params = params
        self.promote = promote
        self.filterPromotes = filterPromotes
        self.hide = hide
        self.userData = userData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case params
        case promote
        case filterPromotes
        case hide
        case userData
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.params, forKey: .params)
        try container.encodeIfPresent(self.promote, forKey: .promote)
        try container.encodeIfPresent(self.filterPromotes, forKey: .filterPromotes)
        try container.encodeIfPresent(self.hide, forKey: .hide)
        try container.encodeIfPresent(self.userData, forKey: .userData)
    }
}
