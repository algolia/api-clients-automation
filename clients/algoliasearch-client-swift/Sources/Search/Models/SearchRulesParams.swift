// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

/// Rules search parameters.
public struct SearchRulesParams: Codable, JSONEncodable, Hashable {

  static let pageRule = NumericRule<Int>(
    minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
  static let hitsPerPageRule = NumericRule<Int>(
    minimum: 1, exclusiveMinimum: false, maximum: 1000, exclusiveMaximum: false, multipleOf: nil)
  /** Rule object query. */
  public var query: String?
  public var anchoring: Anchoring?
  /** Restricts responses to the specified [contextual rule](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#creating-contextual-rules). */
  public var context: String?
  /** Requested page (the first page is page 0). */
  public var page: Int?
  /** Maximum number of hits per page. */
  public var hitsPerPage: Int?
  /** Restricts responses to enabled rules. When not specified (default), _all_ rules are retrieved. */
  public var enabled: Bool?
  /** Request options to send with the API call. */
  public var requestOptions: [AnyCodable]?

  public init(
    query: String? = nil, anchoring: Anchoring? = nil, context: String? = nil, page: Int? = nil,
    hitsPerPage: Int? = nil, enabled: Bool? = nil, requestOptions: [AnyCodable]? = nil
  ) {
    self.query = query
    self.anchoring = anchoring
    self.context = context
    self.page = page
    self.hitsPerPage = hitsPerPage
    self.enabled = enabled
    self.requestOptions = requestOptions
  }

  public enum CodingKeys: String, CodingKey, CaseIterable {
    case query
    case anchoring
    case context
    case page
    case hitsPerPage
    case enabled
    case requestOptions
  }

  // Encodable protocol methods

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encodeIfPresent(query, forKey: .query)
    try container.encodeIfPresent(anchoring, forKey: .anchoring)
    try container.encodeIfPresent(context, forKey: .context)
    try container.encodeIfPresent(page, forKey: .page)
    try container.encodeIfPresent(hitsPerPage, forKey: .hitsPerPage)
    try container.encodeIfPresent(enabled, forKey: .enabled)
    try container.encodeIfPresent(requestOptions, forKey: .requestOptions)
  }
}
