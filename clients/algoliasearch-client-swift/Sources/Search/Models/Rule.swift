// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

/// Rule object.
@objcMembers public class Rule: NSObject, Codable, JSONEncodable {

  /** Unique identifier for a rule object. */
  public var objectID: String
  /** [Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions) required to activate a rule. You can use up to 25 conditions per rule.  */
  public var conditions: [Condition]?
  public var consequence: Consequence?
  /** Description of the rule's purpose. This can be helpful for display in the Algolia dashboard. */
  public var _description: String?
  /** Indicates whether to enable the rule. If it isn't enabled, it isn't applied at query time. */
  public var enabled: Bool? = true
  public var enabledNum: NSNumber? {
    return enabled as NSNumber?
  }
  /** If you specify a validity period, the rule _only_ applies only during that period. If specified, the array must not be empty. */
  public var validity: [TimeRange]?

  public init(
    objectID: String, conditions: [Condition]? = nil, consequence: Consequence? = nil,
    _description: String? = nil, enabled: Bool? = true, validity: [TimeRange]? = nil
  ) {
    self.objectID = objectID
    self.conditions = conditions
    self.consequence = consequence
    self._description = _description
    self.enabled = enabled
    self.validity = validity
  }

  public enum CodingKeys: String, CodingKey, CaseIterable {
    case objectID
    case conditions
    case consequence
    case _description = "description"
    case enabled
    case validity
  }

  // Encodable protocol methods

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(objectID, forKey: .objectID)
    try container.encodeIfPresent(conditions, forKey: .conditions)
    try container.encodeIfPresent(consequence, forKey: .consequence)
    try container.encodeIfPresent(_description, forKey: ._description)
    try container.encodeIfPresent(enabled, forKey: .enabled)
    try container.encodeIfPresent(validity, forKey: .validity)
  }
}
