// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

/// Recommend hit.
@objcMembers public class RecommendHit: NSObject, Codable, JSONEncodable {

  static let scoreRule = NumericRule<Double>(
    minimum: 0, exclusiveMinimum: false, maximum: 100, exclusiveMaximum: false, multipleOf: nil)
  /** Unique object identifier. */
  public var objectID: String
  /** Show highlighted section and words matched on a query. */
  public var highlightResult: [String: HighlightResult]?
  /** Snippeted attributes show parts of the matched attributes. Only returned when attributesToSnippet is non-empty. */
  public var snippetResult: [String: SnippetResult]?
  public var rankingInfo: RankingInfo?
  public var distinctSeqID: Int?
  public var distinctSeqIDNum: NSNumber? {
    return distinctSeqID as NSNumber?
  }
  /** Recommendation score. */
  public var score: Double

  public init(
    objectID: String, highlightResult: [String: HighlightResult]? = nil,
    snippetResult: [String: SnippetResult]? = nil, rankingInfo: RankingInfo? = nil,
    distinctSeqID: Int? = nil, score: Double
  ) {
    self.objectID = objectID
    self.highlightResult = highlightResult
    self.snippetResult = snippetResult
    self.rankingInfo = rankingInfo
    self.distinctSeqID = distinctSeqID
    self.score = score
  }

  public enum CodingKeys: String, CodingKey, CaseIterable {
    case objectID
    case highlightResult = "_highlightResult"
    case snippetResult = "_snippetResult"
    case rankingInfo = "_rankingInfo"
    case distinctSeqID = "_distinctSeqID"
    case score = "_score"
  }

  public var additionalProperties: [String: AnyCodable] = [:]

  public subscript(key: String) -> AnyCodable? {
    get {
      if let value = additionalProperties[key] {
        return value
      }
      return nil
    }

    set {
      additionalProperties[key] = newValue
    }
  }

  // Encodable protocol methods

  public func encode(to encoder: Encoder) throws {
    var container = encoder.container(keyedBy: CodingKeys.self)
    try container.encode(objectID, forKey: .objectID)
    try container.encodeIfPresent(highlightResult, forKey: .highlightResult)
    try container.encodeIfPresent(snippetResult, forKey: .snippetResult)
    try container.encodeIfPresent(rankingInfo, forKey: .rankingInfo)
    try container.encodeIfPresent(distinctSeqID, forKey: .distinctSeqID)
    try container.encode(score, forKey: .score)
    var additionalPropertiesContainer = encoder.container(keyedBy: String.self)
    try additionalPropertiesContainer.encodeMap(additionalProperties)
  }

  // Decodable protocol methods

  public required init(from decoder: Decoder) throws {
    let container = try decoder.container(keyedBy: CodingKeys.self)

    objectID = try container.decode(String.self, forKey: .objectID)
    highlightResult = try container.decodeIfPresent(
      [String: HighlightResult].self, forKey: .highlightResult)
    snippetResult = try container.decodeIfPresent(
      [String: SnippetResult].self, forKey: .snippetResult)
    rankingInfo = try container.decodeIfPresent(RankingInfo.self, forKey: .rankingInfo)
    distinctSeqID = try container.decodeIfPresent(Int.self, forKey: .distinctSeqID)
    score = try container.decode(Double.self, forKey: .score)
    var nonAdditionalPropertyKeys = Set<String>()
    nonAdditionalPropertyKeys.insert("objectID")
    nonAdditionalPropertyKeys.insert("_highlightResult")
    nonAdditionalPropertyKeys.insert("_snippetResult")
    nonAdditionalPropertyKeys.insert("_rankingInfo")
    nonAdditionalPropertyKeys.insert("_distinctSeqID")
    nonAdditionalPropertyKeys.insert("_score")
    let additionalPropertiesContainer = try decoder.container(keyedBy: String.self)
    additionalProperties = try additionalPropertiesContainer.decodeMap(
      AnyCodable.self, excludedKeys: nonAdditionalPropertyKeys)
  }
}
