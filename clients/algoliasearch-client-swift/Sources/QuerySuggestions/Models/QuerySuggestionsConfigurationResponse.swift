// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct QuerySuggestionsConfigurationResponse: Codable, JSONEncodable {
    /// API key used to read from your source index.
    public var sourceIndicesAPIKey: String?
    /// API key used to write and configure your Query Suggestions index.
    public var suggestionsIndicesAPIKey: String?
    /// API key used to read from external Algolia indices.
    public var externalIndicesAPIKey: String?
    /// Query Suggestions index name.
    public var indexName: String
    /// Algolia indices from which to get the popular searches for query suggestions.
    public var sourceIndices: [SourceIndex]
    public var languages: QuerySuggestionsLanguages?
    /// Patterns to exclude from query suggestions.
    public var exclude: [String]?
    /// Turn on personalized query suggestions.
    public var enablePersonalization: Bool?
    /// Allow suggestions with special characters.
    public var allowSpecialCharacters: Bool?

    public init(
        sourceIndicesAPIKey: String? = nil,
        suggestionsIndicesAPIKey: String? = nil,
        externalIndicesAPIKey: String? = nil,
        indexName: String,
        sourceIndices: [SourceIndex],
        languages: QuerySuggestionsLanguages? = nil,
        exclude: [String]? = nil,
        enablePersonalization: Bool? = nil,
        allowSpecialCharacters: Bool? = nil
    ) {
        self.sourceIndicesAPIKey = sourceIndicesAPIKey
        self.suggestionsIndicesAPIKey = suggestionsIndicesAPIKey
        self.externalIndicesAPIKey = externalIndicesAPIKey
        self.indexName = indexName
        self.sourceIndices = sourceIndices
        self.languages = languages
        self.exclude = exclude
        self.enablePersonalization = enablePersonalization
        self.allowSpecialCharacters = allowSpecialCharacters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case sourceIndicesAPIKey
        case suggestionsIndicesAPIKey
        case externalIndicesAPIKey
        case indexName
        case sourceIndices
        case languages
        case exclude
        case enablePersonalization
        case allowSpecialCharacters
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.sourceIndicesAPIKey, forKey: .sourceIndicesAPIKey)
        try container.encodeIfPresent(self.suggestionsIndicesAPIKey, forKey: .suggestionsIndicesAPIKey)
        try container.encodeIfPresent(self.externalIndicesAPIKey, forKey: .externalIndicesAPIKey)
        try container.encode(self.indexName, forKey: .indexName)
        try container.encode(self.sourceIndices, forKey: .sourceIndices)
        try container.encodeIfPresent(self.languages, forKey: .languages)
        try container.encodeIfPresent(self.exclude, forKey: .exclude)
        try container.encodeIfPresent(self.enablePersonalization, forKey: .enablePersonalization)
        try container.encodeIfPresent(self.allowSpecialCharacters, forKey: .allowSpecialCharacters)
    }
}
