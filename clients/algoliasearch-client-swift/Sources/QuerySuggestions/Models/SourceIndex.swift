// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation
#if canImport(AnyCodable)
    import AnyCodable
#endif

// MARK: - SourceIndex

/// Configuration of an Algolia index for Query Suggestions.
public struct SourceIndex: Codable, JSONEncodable, Hashable {
    // MARK: Lifecycle

    public init(
        indexName: String,
        replicas: Bool? = nil,
        analyticsTags: [String]? = nil,
        facets: [Facet]? = nil,
        minHits: Int? = nil,
        minLetters: Int? = nil,
        generate: [[String]]? = nil,
        external: [String]? = nil
    ) {
        self.indexName = indexName
        self.replicas = replicas
        self.analyticsTags = analyticsTags
        self.facets = facets
        self.minHits = minHits
        self.minLetters = minLetters
        self.generate = generate
        self.external = external
    }

    // MARK: Public

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case indexName
        case replicas
        case analyticsTags
        case facets
        case minHits
        case minLetters
        case generate
        case external
    }

    /// Name of the Algolia index to use as source for query suggestions.
    public var indexName: String
    /// If true, Query Suggestions uses all replicas of the primary index to find popular searches. If false, only the
    /// primary index is used.
    public var replicas: Bool?
    /// [Analytics tags](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) for filtering the
    /// popular searches.
    public var analyticsTags: [String]?
    /// Facets to use as top categories with your suggestions.  If provided, Query Suggestions adds the top facet values
    /// to each suggestion.
    public var facets: [Facet]?
    /// Minimum number of hits required to be included as a suggestion.  A search query must at least generate `minHits`
    /// hits to be included in the Query Suggestions index.
    public var minHits: Int?
    /// Minimum letters required to be included as a suggestion.  A search query must be at least `minLetters` long to
    /// be included in the Query Suggestions index.
    public var minLetters: Int?
    public var generate: [[String]]?
    /// Algolia indices with popular searches to use as query suggestions.  Records of these indices must have these
    /// attributes:    - `query`: search query which will be added as a suggestion   - `count`: measure of popularity of
    /// that search query  For example, you can export popular searches from an external analytics tool, such as Google
    /// Analytics or Adobe Analytics, and feed this data into an external Algolia index. You can use this external index
    /// to generate query suggestions until your Algolia analytics has collected enough data.
    public var external: [String]?

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.indexName, forKey: .indexName)
        try container.encodeIfPresent(self.replicas, forKey: .replicas)
        try container.encodeIfPresent(self.analyticsTags, forKey: .analyticsTags)
        try container.encodeIfPresent(self.facets, forKey: .facets)
        try container.encodeIfPresent(self.minHits, forKey: .minHits)
        try container.encodeIfPresent(self.minLetters, forKey: .minLetters)
        try container.encodeIfPresent(self.generate, forKey: .generate)
        try container.encodeIfPresent(self.external, forKey: .external)
    }

    // MARK: Internal

    static let minHitsRule = NumericRule<Int>(
        minimum: 0,
        exclusiveMinimum: false,
        maximum: nil,
        exclusiveMaximum: false,
        multipleOf: nil
    )
    static let minLettersRule = NumericRule<Int>(
        minimum: 0,
        exclusiveMinimum: false,
        maximum: nil,
        exclusiveMaximum: false,
        multipleOf: nil
    )
}
