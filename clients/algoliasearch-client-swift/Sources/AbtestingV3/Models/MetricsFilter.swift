// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

/// Boolean filter applied to the A/B test population. Each filter targets a boolean metric and decides whether to
/// include (true) or exclude (false) matching records.
public struct MetricsFilter: Codable, JSONEncodable {
    /// Metric domain (for example `abtesting`, `personalization`).
    public var domain: String
    /// Public metric name.
    public var name: String
    /// Whether the experiment should record the effects of this filter.
    public var trackEffects: Bool?
    /// If true, keep items that match the filter; if false, exclude them.
    public var includes: Bool?

    public init(domain: String, name: String, trackEffects: Bool? = nil, includes: Bool? = nil) {
        self.domain = domain
        self.name = name
        self.trackEffects = trackEffects
        self.includes = includes
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case domain
        case name
        case trackEffects
        case includes
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.domain, forKey: .domain)
        try container.encode(self.name, forKey: .name)
        try container.encodeIfPresent(self.trackEffects, forKey: .trackEffects)
        try container.encodeIfPresent(self.includes, forKey: .includes)
    }
}

extension MetricsFilter: Equatable {
    public static func ==(lhs: MetricsFilter, rhs: MetricsFilter) -> Bool {
        lhs.domain == rhs.domain &&
            lhs.name == rhs.name &&
            lhs.trackEffects == rhs.trackEffects &&
            lhs.includes == rhs.includes
    }
}

extension MetricsFilter: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.domain.hashValue)
        hasher.combine(self.name.hashValue)
        hasher.combine(self.trackEffects?.hashValue)
        hasher.combine(self.includes?.hashValue)
    }
}
