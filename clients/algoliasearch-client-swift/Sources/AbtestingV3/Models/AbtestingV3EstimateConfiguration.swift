// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

/// A/B test configuration for estimating the sample size and duration using minimum detectable effect.
public struct AbtestingV3EstimateConfiguration: Codable, JSONEncodable {
    /// List of metric filters applied to the test population.
    public var filters: [MetricsFilter]?
    public var minimumDetectableEffect: AbtestingV3MinimumDetectableEffect

    public init(filters: [MetricsFilter]? = nil, minimumDetectableEffect: AbtestingV3MinimumDetectableEffect) {
        self.filters = filters
        self.minimumDetectableEffect = minimumDetectableEffect
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case filters
        case minimumDetectableEffect
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.filters, forKey: .filters)
        try container.encode(self.minimumDetectableEffect, forKey: .minimumDetectableEffect)
    }
}

extension AbtestingV3EstimateConfiguration: Equatable {
    public static func ==(lhs: AbtestingV3EstimateConfiguration, rhs: AbtestingV3EstimateConfiguration) -> Bool {
        lhs.filters == rhs.filters &&
            lhs.minimumDetectableEffect == rhs.minimumDetectableEffect
    }
}

extension AbtestingV3EstimateConfiguration: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.filters?.hashValue)
        hasher.combine(self.minimumDetectableEffect.hashValue)
    }
}
