// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public enum AbtestingV3AddABTestsVariant: Codable, JSONEncodable, AbstractEncodable {
    case abtestingV3AbTestsVariantSearchParams(AbtestingV3AbTestsVariantSearchParams)
    case abtestingV3AbTestsVariant(AbtestingV3AbTestsVariant)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .abtestingV3AbTestsVariantSearchParams(value):
            try container.encode(value)
        case let .abtestingV3AbTestsVariant(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(AbtestingV3AbTestsVariantSearchParams.self) {
            self = .abtestingV3AbTestsVariantSearchParams(value)
        } else if let value = try? container.decode(AbtestingV3AbTestsVariant.self) {
            self = .abtestingV3AbTestsVariant(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(
                    codingPath: decoder.codingPath,
                    debugDescription: "Unable to decode instance of AbtestingV3AddABTestsVariant"
                )
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .abtestingV3AbTestsVariantSearchParams(value):
            value as AbtestingV3AbTestsVariantSearchParams
        case let .abtestingV3AbTestsVariant(value):
            value as AbtestingV3AbTestsVariant
        }
    }
}

extension AbtestingV3AddABTestsVariant: Equatable {}
extension AbtestingV3AddABTestsVariant: Hashable {}
