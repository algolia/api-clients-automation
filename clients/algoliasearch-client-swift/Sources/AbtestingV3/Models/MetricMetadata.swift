// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

/// Metric specific metadata.
public struct MetricMetadata: Codable, JSONEncodable {
    /// Only present in case the metric is 'revenue'. It is the amount exceeding the 95th percentile of global revenue
    /// transactions involved in the AB Test. This amount is not considered when calculating statistical significance.
    /// It is tied to a per revenue-currency pair contrary to other global filter effects (such as outliers and empty
    /// search count).
    public var winsorizedValue: Double?
    /// Mean value for this metric.
    public var mean: Double?

    public init(winsorizedValue: Double? = nil, mean: Double? = nil) {
        self.winsorizedValue = winsorizedValue
        self.mean = mean
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case winsorizedValue
        case mean
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.winsorizedValue, forKey: .winsorizedValue)
        try container.encodeIfPresent(self.mean, forKey: .mean)
    }
}

extension MetricMetadata: Equatable {
    public static func ==(lhs: MetricMetadata, rhs: MetricMetadata) -> Bool {
        lhs.winsorizedValue == rhs.winsorizedValue &&
            lhs.mean == rhs.mean
    }
}

extension MetricMetadata: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.winsorizedValue?.hashValue)
        hasher.combine(self.mean?.hashValue)
    }
}
