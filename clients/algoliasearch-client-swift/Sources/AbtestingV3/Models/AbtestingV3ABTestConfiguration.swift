// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

/// A/B test configuration.
public struct AbtestingV3ABTestConfiguration: Codable, JSONEncodable {
    public var minimumDetectableEffect: AbtestingV3MinimumDetectableEffect?
    /// List of metric filters applied to the test population.
    public var filters: [MetricsFilter]?
    public var errorCorrection: ErrorCorrectionType?

    public init(
        minimumDetectableEffect: AbtestingV3MinimumDetectableEffect? = nil,
        filters: [MetricsFilter]? = nil,
        errorCorrection: ErrorCorrectionType? = nil
    ) {
        self.minimumDetectableEffect = minimumDetectableEffect
        self.filters = filters
        self.errorCorrection = errorCorrection
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case minimumDetectableEffect
        case filters
        case errorCorrection
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.minimumDetectableEffect, forKey: .minimumDetectableEffect)
        try container.encodeIfPresent(self.filters, forKey: .filters)
        try container.encodeIfPresent(self.errorCorrection, forKey: .errorCorrection)
    }
}

extension AbtestingV3ABTestConfiguration: Equatable {
    public static func ==(lhs: AbtestingV3ABTestConfiguration, rhs: AbtestingV3ABTestConfiguration) -> Bool {
        lhs.minimumDetectableEffect == rhs.minimumDetectableEffect &&
            lhs.filters == rhs.filters &&
            lhs.errorCorrection == rhs.errorCorrection
    }
}

extension AbtestingV3ABTestConfiguration: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.minimumDetectableEffect?.hashValue)
        hasher.combine(self.filters?.hashValue)
        hasher.combine(self.errorCorrection?.hashValue)
    }
}
