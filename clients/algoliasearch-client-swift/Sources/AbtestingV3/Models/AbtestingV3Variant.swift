// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct AbtestingV3Variant: Codable, JSONEncodable {
    /// Description for this variant.
    public var description: String
    /// Estimated number of searches required to achieve the desired statistical significance.  The A/B test
    /// configuration must include a `minimumDetectableEffect` setting for this number to be included in the response.
    public var estimatedSampleSize: Int?
    /// Index name of the A/B test variant (case-sensitive).
    public var index: String
    /// Percentage of search requests each variant receives.
    public var trafficPercentage: Int
    /// All ABTest metrics that were defined during test creation.
    public var metrics: [MetricResult]
    public var metadata: VariantMetadata?
    /// Search parameters applied to this variant when the same index is used for multiple variants. Only present if
    /// custom search parameters were provided during test creation.
    public var customSearchParameters: AnyCodable?

    public init(
        description: String,
        estimatedSampleSize: Int? = nil,
        index: String,
        trafficPercentage: Int,
        metrics: [MetricResult],
        metadata: VariantMetadata? = nil,
        customSearchParameters: AnyCodable? = nil
    ) {
        self.description = description
        self.estimatedSampleSize = estimatedSampleSize
        self.index = index
        self.trafficPercentage = trafficPercentage
        self.metrics = metrics
        self.metadata = metadata
        self.customSearchParameters = customSearchParameters
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case description
        case estimatedSampleSize
        case index
        case trafficPercentage
        case metrics
        case metadata
        case customSearchParameters
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.description, forKey: .description)
        try container.encodeIfPresent(self.estimatedSampleSize, forKey: .estimatedSampleSize)
        try container.encode(self.index, forKey: .index)
        try container.encode(self.trafficPercentage, forKey: .trafficPercentage)
        try container.encode(self.metrics, forKey: .metrics)
        try container.encodeIfPresent(self.metadata, forKey: .metadata)
        try container.encodeIfPresent(self.customSearchParameters, forKey: .customSearchParameters)
    }
}

extension AbtestingV3Variant: Equatable {
    public static func ==(lhs: AbtestingV3Variant, rhs: AbtestingV3Variant) -> Bool {
        lhs.description == rhs.description &&
            lhs.estimatedSampleSize == rhs.estimatedSampleSize &&
            lhs.index == rhs.index &&
            lhs.trafficPercentage == rhs.trafficPercentage &&
            lhs.metrics == rhs.metrics &&
            lhs.metadata == rhs.metadata &&
            lhs.customSearchParameters == rhs.customSearchParameters
    }
}

extension AbtestingV3Variant: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.description.hashValue)
        hasher.combine(self.estimatedSampleSize?.hashValue)
        hasher.combine(self.index.hashValue)
        hasher.combine(self.trafficPercentage.hashValue)
        hasher.combine(self.metrics.hashValue)
        hasher.combine(self.metadata?.hashValue)
        hasher.combine(self.customSearchParameters?.hashValue)
    }
}
