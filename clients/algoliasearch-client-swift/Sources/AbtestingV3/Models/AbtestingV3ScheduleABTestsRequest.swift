// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct AbtestingV3ScheduleABTestsRequest: Codable, JSONEncodable {
    /// A/B test name.
    public var name: String
    /// A/B test variants.
    public var variants: [AbtestingV3AddABTestsVariant]
    /// A/B test metrics involved in the test. Only these metrics will be considered when calculating results.
    public var metrics: [CreateMetric]
    public var configuration: AbtestingV3ABTestConfiguration?
    /// Date and time when the A/B test is scheduled to start, in RFC 3339 format.
    public var scheduledAt: String
    /// End date and time of the A/B test, in RFC 3339 format.
    public var endAt: String

    public init(
        name: String,
        variants: [AbtestingV3AddABTestsVariant],
        metrics: [CreateMetric],
        configuration: AbtestingV3ABTestConfiguration? = nil,
        scheduledAt: String,
        endAt: String
    ) {
        self.name = name
        self.variants = variants
        self.metrics = metrics
        self.configuration = configuration
        self.scheduledAt = scheduledAt
        self.endAt = endAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case variants
        case metrics
        case configuration
        case scheduledAt
        case endAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.name, forKey: .name)
        try container.encode(self.variants, forKey: .variants)
        try container.encode(self.metrics, forKey: .metrics)
        try container.encodeIfPresent(self.configuration, forKey: .configuration)
        try container.encode(self.scheduledAt, forKey: .scheduledAt)
        try container.encode(self.endAt, forKey: .endAt)
    }
}

extension AbtestingV3ScheduleABTestsRequest: Equatable {
    public static func ==(lhs: AbtestingV3ScheduleABTestsRequest, rhs: AbtestingV3ScheduleABTestsRequest) -> Bool {
        lhs.name == rhs.name &&
            lhs.variants == rhs.variants &&
            lhs.metrics == rhs.metrics &&
            lhs.configuration == rhs.configuration &&
            lhs.scheduledAt == rhs.scheduledAt &&
            lhs.endAt == rhs.endAt
    }
}

extension AbtestingV3ScheduleABTestsRequest: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.name.hashValue)
        hasher.combine(self.variants.hashValue)
        hasher.combine(self.metrics.hashValue)
        hasher.combine(self.configuration?.hashValue)
        hasher.combine(self.scheduledAt.hashValue)
        hasher.combine(self.endAt.hashValue)
    }
}
