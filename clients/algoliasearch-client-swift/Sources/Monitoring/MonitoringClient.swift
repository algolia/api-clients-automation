// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

typealias Client = MonitoringClient

@objcMembers open class MonitoringClient: NSObject {

  private var configuration: Configuration
  private var transporter: Transporter

  var applicationID: String {
    self.configuration.applicationID
  }

  public init(configuration: Configuration, transporter: Transporter) {
    self.configuration = configuration
    self.transporter = transporter
  }

  public convenience init(configuration: Configuration) {
    self.init(configuration: configuration, transporter: Transporter(configuration: configuration))
  }

  public convenience init(applicationID: String, apiKey: String) {
    self.init(configuration: Configuration(applicationID: applicationID, apiKey: apiKey))
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customDelete(
    path: String, parameters: [String: AnyCodable]? = nil, requestOptions: RequestOptions? = nil
  ) async throws -> AnyCodable {
    return try await customDeleteWithRequestBuilder(
      path: path, parameters: parameters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customDeleteWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customGet(
    path: String, parameters: [String: AnyCodable]? = nil, requestOptions: RequestOptions? = nil
  ) async throws -> AnyCodable {
    return try await customGetWithRequestBuilder(
      path: path, parameters: parameters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customGetWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customPost(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> AnyCodable {
    return try await customPostWithRequestBuilder(
      path: path, parameters: parameters, body: body, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customPostWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customPut(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> AnyCodable {
    return try await customPutWithRequestBuilder(
      path: path, parameters: parameters, body: body, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customPutWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     List incidents for selected clusters.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: IncidentsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getClusterIncidents(clusters: String, requestOptions: RequestOptions? = nil)
    async throws -> IncidentsResponse
  {
    return try await getClusterIncidentsWithRequestBuilder(
      clusters: clusters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     List incidents for selected clusters.

     List known incidents for selected clusters.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<IncidentsResponse>
     */
  open func getClusterIncidentsWithRequestBuilder(
    clusters: String, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<IncidentsResponse> {
    var localVariablePath = "/1/incidents/{clusters}"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<IncidentsResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     List statuses of selected clusters.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: StatusResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getClusterStatus(clusters: String, requestOptions: RequestOptions? = nil) async throws
    -> StatusResponse
  {
    return try await getClusterStatusWithRequestBuilder(
      clusters: clusters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     List statuses of selected clusters.

     Report whether a cluster is operational.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<StatusResponse>
     */
  open func getClusterStatusWithRequestBuilder(
    clusters: String, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<StatusResponse> {
    var localVariablePath = "/1/status/{clusters}"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<StatusResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     List incidents.

     - returns: IncidentsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getIncidents(requestOptions: RequestOptions? = nil) async throws -> IncidentsResponse {
    return try await getIncidentsWithRequestBuilder(requestOptions: requestOptions).execute().body
  }

  /**
     List incidents.

     List known incidents for all clusters.
     - returns: RequestBuilder<IncidentsResponse>
     */
  open func getIncidentsWithRequestBuilder(requestOptions: RequestOptions? = nil) -> RequestBuilder<
    IncidentsResponse
  > {
    let localVariablePath = "/1/incidents"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<IncidentsResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get indexing times.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: IndexingTimeResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getIndexingTime(clusters: String, requestOptions: RequestOptions? = nil) async throws
    -> IndexingTimeResponse
  {
    return try await getIndexingTimeWithRequestBuilder(
      clusters: clusters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get indexing times.

     List the average times for indexing operations for selected clusters.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<IndexingTimeResponse>
     */
  open func getIndexingTimeWithRequestBuilder(
    clusters: String, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<IndexingTimeResponse> {
    var localVariablePath = "/1/indexing/{clusters}"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<IndexingTimeResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     List servers.

     - returns: InventoryResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getInventory(requestOptions: RequestOptions? = nil) async throws -> InventoryResponse {
    return try await getInventoryWithRequestBuilder(requestOptions: requestOptions).execute().body
  }

  /**
     List servers.

     List the servers belonging to clusters.  The response depends on whether you authenticate your API request:  - With authentication, the response lists the servers assigned to your Algolia application's cluster.  - Without authentication, the response lists the servers for all Algolia clusters.
     - returns: RequestBuilder<InventoryResponse>
     */
  open func getInventoryWithRequestBuilder(requestOptions: RequestOptions? = nil) -> RequestBuilder<
    InventoryResponse
  > {
    let localVariablePath = "/1/inventory/servers"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<InventoryResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get search latency times.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: LatencyResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getLatency(clusters: String, requestOptions: RequestOptions? = nil) async throws
    -> LatencyResponse
  {
    return try await getLatencyWithRequestBuilder(
      clusters: clusters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get search latency times.

     List the average latency for search requests for selected clusters.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<LatencyResponse>
     */
  open func getLatencyWithRequestBuilder(clusters: String, requestOptions: RequestOptions? = nil)
    -> RequestBuilder<LatencyResponse>
  {
    var localVariablePath = "/1/latency/{clusters}"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<LatencyResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get metrics for a given period.

     - parameter metric: (path) Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use &#x60;*&#x60; as the parameter.
     - parameter period: (path) Period over which to aggregate the metrics:  - &#x60;minute&#x60;. Aggregate the last minute. 1 data point per 10 seconds. - &#x60;hour&#x60;. Aggregate the last hour. 1 data point per minute. - &#x60;day&#x60;. Aggregate the last day. 1 data point per 10 minutes. - &#x60;week&#x60;. Aggregate the last week. 1 data point per hour. - &#x60;month&#x60;. Aggregate the last month. 1 data point per day.
     - returns: InfrastructureResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getMetrics(metric: Metric, period: Period, requestOptions: RequestOptions? = nil)
    async throws -> InfrastructureResponse
  {
    return try await getMetricsWithRequestBuilder(
      metric: metric, period: period, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get metrics for a given period.

     Report the aggregate value of a metric for a selected period of time.
     - parameter metric: (path) Metric to report.  For more information about the individual metrics, see the response. To include all metrics, use &#x60;*&#x60; as the parameter.
     - parameter period: (path) Period over which to aggregate the metrics:  - &#x60;minute&#x60;. Aggregate the last minute. 1 data point per 10 seconds. - &#x60;hour&#x60;. Aggregate the last hour. 1 data point per minute. - &#x60;day&#x60;. Aggregate the last day. 1 data point per 10 minutes. - &#x60;week&#x60;. Aggregate the last week. 1 data point per hour. - &#x60;month&#x60;. Aggregate the last month. 1 data point per day.
     - returns: RequestBuilder<InfrastructureResponse>
     */
  open func getMetricsWithRequestBuilder(
    metric: Metric, period: Period, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<InfrastructureResponse> {
    var localVariablePath = "/1/infrastructure/{metric}/period/{period}"
    let metricPreEscape = "\(APIHelper.mapValueToPathItem(metric))"
    let metricPostEscape =
      metricPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{metric}", with: metricPostEscape, options: .literal, range: nil)
    let periodPreEscape = "\(APIHelper.mapValueToPathItem(period))"
    let periodPostEscape =
      periodPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{period}", with: periodPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<InfrastructureResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Test the reachability of clusters.

     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: [String: [String: Bool]]
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getReachability(clusters: String, requestOptions: RequestOptions? = nil) async throws
    -> [String: [String: Bool]]
  {
    return try await getReachabilityWithRequestBuilder(
      clusters: clusters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Test the reachability of clusters.

     Test whether clusters are reachable or not.
     - parameter clusters: (path) Subset of clusters, separated by comma.
     - returns: RequestBuilder<[String: [String: Bool]]>
     */
  open func getReachabilityWithRequestBuilder(
    clusters: String, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<[String: [String: Bool]]> {
    var localVariablePath = "/1/reachability/{clusters}/probes"
    let clustersPreEscape = "\(APIHelper.mapValueToPathItem(clusters))"
    let clustersPostEscape =
      clustersPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{clusters}", with: clustersPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<[String: [String: Bool]]>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     List cluster statuses.

     - returns: StatusResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getStatus(requestOptions: RequestOptions? = nil) async throws -> StatusResponse {
    return try await getStatusWithRequestBuilder(requestOptions: requestOptions).execute().body
  }

  /**
     List cluster statuses.

     Report whether clusters are operational.  The response depends on whether you authenticate your API request.  - With authentication, the response includes the status of the cluster assigned to your Algolia application.  - Without authentication, the response lists the statuses of all public Algolia clusters.
     - returns: RequestBuilder<StatusResponse>
     */
  open func getStatusWithRequestBuilder(requestOptions: RequestOptions? = nil) -> RequestBuilder<
    StatusResponse
  > {
    let localVariablePath = "/1/status"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<StatusResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }
}
