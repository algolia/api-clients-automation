// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct IngestionWatchResponse: Codable, JSONEncodable {
    /// Universally unique identifier (UUID) of a task run.
    public var runID: String
    /// Universally unique identifier (UUID) of an event.
    public var eventID: String?
    /// This field is always null when used with the Push endpoint. When used for a source discover or source validate
    /// run, it will include the sampled data of the source.
    public var data: [AnyCodable]?
    /// in case of error, observability events will be added to the response.
    public var events: [IngestionEvent]?
    /// a message describing the outcome of the operation that has been ran (push, discover or validate) run.
    public var message: String?
    /// Date of creation in RFC 3339 format.
    public var createdAt: String?

    public init(
        runID: String,
        eventID: String? = nil,
        data: [AnyCodable]? = nil,
        events: [IngestionEvent]? = nil,
        message: String? = nil,
        createdAt: String? = nil
    ) {
        self.runID = runID
        self.eventID = eventID
        self.data = data
        self.events = events
        self.message = message
        self.createdAt = createdAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case runID
        case eventID
        case data
        case events
        case message
        case createdAt
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(self.runID, forKey: .runID)
        try container.encodeIfPresent(self.eventID, forKey: .eventID)
        try container.encodeIfPresent(self.data, forKey: .data)
        try container.encodeIfPresent(self.events, forKey: .events)
        try container.encodeIfPresent(self.message, forKey: .message)
        try container.encodeIfPresent(self.createdAt, forKey: .createdAt)
    }
}

extension IngestionWatchResponse: Equatable {
    public static func ==(lhs: IngestionWatchResponse, rhs: IngestionWatchResponse) -> Bool {
        lhs.runID == rhs.runID &&
            lhs.eventID == rhs.eventID &&
            lhs.data == rhs.data &&
            lhs.events == rhs.events &&
            lhs.message == rhs.message &&
            lhs.createdAt == rhs.createdAt
    }
}

extension IngestionWatchResponse: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.runID.hashValue)
        hasher.combine(self.eventID?.hashValue)
        hasher.combine(self.data?.hashValue)
        hasher.combine(self.events?.hashValue)
        hasher.combine(self.message?.hashValue)
        hasher.combine(self.createdAt?.hashValue)
    }
}
