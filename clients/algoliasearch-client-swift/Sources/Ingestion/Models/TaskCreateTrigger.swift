// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public enum TaskCreateTrigger: Codable, JSONEncodable, AbstractEncodable, Hashable {
    case onDemandTriggerInput(OnDemandTriggerInput)
    case scheduleTriggerInput(ScheduleTriggerInput)
    case streamingTrigger(StreamingTrigger)
    case subscriptionTrigger(SubscriptionTrigger)

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        case let .onDemandTriggerInput(value):
            try container.encode(value)
        case let .scheduleTriggerInput(value):
            try container.encode(value)
        case let .streamingTrigger(value):
            try container.encode(value)
        case let .subscriptionTrigger(value):
            try container.encode(value)
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        if let value = try? container.decode(OnDemandTriggerInput.self) {
            self = .onDemandTriggerInput(value)
        } else if let value = try? container.decode(ScheduleTriggerInput.self) {
            self = .scheduleTriggerInput(value)
        } else if let value = try? container.decode(StreamingTrigger.self) {
            self = .streamingTrigger(value)
        } else if let value = try? container.decode(SubscriptionTrigger.self) {
            self = .subscriptionTrigger(value)
        } else {
            throw DecodingError.typeMismatch(
                Self.Type.self,
                .init(
                    codingPath: decoder.codingPath,
                    debugDescription: "Unable to decode instance of TaskCreateTrigger"
                )
            )
        }
    }

    public func GetActualInstance() -> Encodable {
        switch self {
        case let .onDemandTriggerInput(value):
            value as OnDemandTriggerInput
        case let .scheduleTriggerInput(value):
            value as ScheduleTriggerInput
        case let .streamingTrigger(value):
            value as StreamingTrigger
        case let .subscriptionTrigger(value):
            value as SubscriptionTrigger
        }
    }
}
