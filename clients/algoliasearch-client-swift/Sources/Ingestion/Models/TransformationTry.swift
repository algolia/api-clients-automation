// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct TransformationTry: Codable, JSONEncodable {
    /// It is deprecated. Use the `input` field with proper `type` instead to specify the transformation code.
    @available(*, deprecated, message: "This property is deprecated.")
    public var code: String?
    public var type: TransformationType?
    public var input: TransformationInput?
    /// The record to apply the given code to.
    public var sampleRecord: AnyCodable
    public var authentications: [AuthenticationCreate]?

    public init(
        code: String? = nil,
        type: TransformationType? = nil,
        input: TransformationInput? = nil,
        sampleRecord: AnyCodable,
        authentications: [AuthenticationCreate]? = nil
    ) {
        self.code = code
        self.type = type
        self.input = input
        self.sampleRecord = sampleRecord
        self.authentications = authentications
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case type
        case input
        case sampleRecord
        case authentications
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.code, forKey: .code)
        try container.encodeIfPresent(self.type, forKey: .type)
        try container.encodeIfPresent(self.input, forKey: .input)
        try container.encode(self.sampleRecord, forKey: .sampleRecord)
        try container.encodeIfPresent(self.authentications, forKey: .authentications)
    }
}

extension TransformationTry: Equatable {
    public static func ==(lhs: TransformationTry, rhs: TransformationTry) -> Bool {
        lhs.code == rhs.code &&
            lhs.type == rhs.type &&
            lhs.input == rhs.input &&
            lhs.sampleRecord == rhs.sampleRecord &&
            lhs.authentications == rhs.authentications
    }
}

extension TransformationTry: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.code?.hashValue)
        hasher.combine(self.type?.hashValue)
        hasher.combine(self.input?.hashValue)
        hasher.combine(self.sampleRecord.hashValue)
        hasher.combine(self.authentications?.hashValue)
    }
}
