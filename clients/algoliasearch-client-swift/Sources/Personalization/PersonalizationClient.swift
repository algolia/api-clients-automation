// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

typealias Client = PersonalizationClient

@objcMembers open class PersonalizationClient: NSObject {

  private var configuration: Configuration
  private var transporter: Transporter

  var applicationID: String {
    self.configuration.applicationID
  }

  public init(configuration: Configuration, transporter: Transporter) {
    self.configuration = configuration
    self.transporter = transporter
  }

  public convenience init(configuration: Configuration) {
    self.init(configuration: configuration, transporter: Transporter(configuration: configuration))
  }

  public convenience init(applicationID: String, apiKey: String, region: Region) {
    self.init(
      configuration: Configuration(applicationID: applicationID, apiKey: apiKey, region: region))
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customDelete(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customDeleteWithRequestBuilder(path: path, parameters: parameters).execute()
      .body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customDeleteWithRequestBuilder(path: String, parameters: [String: AnyCodable]? = nil)
    -> RequestBuilder<AnyCodable>
  {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customGet(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customGetWithRequestBuilder(path: path, parameters: parameters).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customGetWithRequestBuilder(path: String, parameters: [String: AnyCodable]? = nil)
    -> RequestBuilder<AnyCodable>
  {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customPost(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil
  ) async throws -> AnyCodable {
    return try await customPostWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customPostWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customPut(path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil)
    async throws -> AnyCodable
  {
    return try await customPutWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customPutWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Delete a user profile.

     - parameter userToken: (path) userToken representing the user for which to fetch the Personalization profile.
     - returns: DeleteUserProfileResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func deleteUserProfile(userToken: String) async throws -> DeleteUserProfileResponse {
    return try await deleteUserProfileWithRequestBuilder(userToken: userToken).execute().body
  }

  /**
     Delete a user profile.

     Delete the user profile and all its associated data.  Returns, as part of the response, a date until which the data can safely be considered as deleted for the given user. This means if you send events for the given user before this date, they will be ignored. Any data received after the deletedUntil date will start building a new user profile.  It might take a couple hours for the deletion request to be fully processed.
     - parameter userToken: (path) userToken representing the user for which to fetch the Personalization profile.
     - returns: RequestBuilder<DeleteUserProfileResponse>
     */
  open func deleteUserProfileWithRequestBuilder(userToken: String) -> RequestBuilder<
    DeleteUserProfileResponse
  > {
    var localVariablePath = "/1/profiles/{userToken}"
    let userTokenPreEscape = "\(APIHelper.mapValueToPathItem(userToken))"
    let userTokenPostEscape =
      userTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{userToken}", with: userTokenPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<DeleteUserProfileResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Get the current strategy.

     - returns: PersonalizationStrategyParams
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getPersonalizationStrategy() async throws -> PersonalizationStrategyParams {
    return try await getPersonalizationStrategyWithRequestBuilder().execute().body
  }

  /**
     Get the current strategy.

     The strategy contains information on the events and facets that impact user profiles and personalized search results.
     - returns: RequestBuilder<PersonalizationStrategyParams>
     */
  open func getPersonalizationStrategyWithRequestBuilder() -> RequestBuilder<
    PersonalizationStrategyParams
  > {
    let localVariablePath = "/1/strategies/personalization"
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<PersonalizationStrategyParams>.Type =
      Transporter.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Get a user profile.

     - parameter userToken: (path) userToken representing the user for which to fetch the Personalization profile.
     - returns: GetUserTokenResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getUserTokenProfile(userToken: String) async throws -> GetUserTokenResponse {
    return try await getUserTokenProfileWithRequestBuilder(userToken: userToken).execute().body
  }

  /**
     Get a user profile.

     Get the user profile built from Personalization strategy.  The profile is structured by facet name used in the strategy. Each facet value is mapped to its score. Each score represents the user affinity for a specific facet value given the userToken past events and the Personalization strategy defined. Scores are bounded to 20. The last processed event timestamp is provided using the ISO 8601 format for debugging purposes.
     - parameter userToken: (path) userToken representing the user for which to fetch the Personalization profile.
     - returns: RequestBuilder<GetUserTokenResponse>
     */
  open func getUserTokenProfileWithRequestBuilder(userToken: String) -> RequestBuilder<
    GetUserTokenResponse
  > {
    var localVariablePath = "/1/profiles/personalization/{userToken}"
    let userTokenPreEscape = "\(APIHelper.mapValueToPathItem(userToken))"
    let userTokenPostEscape =
      userTokenPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{userToken}", with: userTokenPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetUserTokenResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Set a new strategy.

     - parameter personalizationStrategyParams: (body)
     - returns: SetPersonalizationStrategyResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func setPersonalizationStrategy(personalizationStrategyParams: PersonalizationStrategyParams)
    async throws -> SetPersonalizationStrategyResponse
  {
    return try await setPersonalizationStrategyWithRequestBuilder(
      personalizationStrategyParams: personalizationStrategyParams
    ).execute().body
  }

  /**
     Set a new strategy.

     A strategy defines the events and facets that impact user profiles and personalized search results.
     - parameter personalizationStrategyParams: (body)
     - returns: RequestBuilder<SetPersonalizationStrategyResponse>
     */
  open func setPersonalizationStrategyWithRequestBuilder(
    personalizationStrategyParams: PersonalizationStrategyParams
  ) -> RequestBuilder<SetPersonalizationStrategyResponse> {
    let localVariablePath = "/1/strategies/personalization"
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: personalizationStrategyParams)

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<SetPersonalizationStrategyResponse>.Type =
      Transporter.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }
}
