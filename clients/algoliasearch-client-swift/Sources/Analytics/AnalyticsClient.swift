// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

typealias Client = AnalyticsClient

open class AnalyticsClient {

  private var configuration: Configuration
  private var transporter: Transporter

  var applicationID: String {
    self.configuration.applicationID
  }

  public init(configuration: Configuration, transporter: Transporter) {
    self.configuration = configuration
    self.transporter = transporter
  }

  public convenience init(configuration: Configuration) {
    self.init(configuration: configuration, transporter: Transporter(configuration: configuration))
  }

  public convenience init(applicationID: String, apiKey: String, region: Region?) {
    self.init(
      configuration: Configuration(applicationID: applicationID, apiKey: apiKey, region: region))
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customDelete(
    path: String, parameters: [String: AnyCodable]? = nil, requestOptions: RequestOptions? = nil
  ) async throws -> AnyCodable {
    return try await customDeleteWithRequestBuilder(
      path: path, parameters: parameters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customDeleteWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customGet(
    path: String, parameters: [String: AnyCodable]? = nil, requestOptions: RequestOptions? = nil
  ) async throws -> AnyCodable {
    return try await customGetWithRequestBuilder(
      path: path, parameters: parameters, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customGetWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customPost(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> AnyCodable {
    return try await customPostWithRequestBuilder(
      path: path, parameters: parameters, body: body, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customPostWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customPut(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> AnyCodable {
    return try await customPutWithRequestBuilder(
      path: path, parameters: parameters, body: body, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customPutWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get average click position.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetAverageClickPositionResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getAverageClickPosition(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetAverageClickPositionResponse {
    return try await getAverageClickPositionWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get average click position.

     Return the average click position for the complete time range and for individual days. > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetAverageClickPositionResponse>
     */
  open func getAverageClickPositionWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetAverageClickPositionResponse> {
    let localVariablePath = "/2/clicks/averageClickPosition"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetAverageClickPositionResponse>.Type =
      Transporter.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get click positions.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetClickPositionsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getClickPositions(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetClickPositionsResponse {
    return try await getClickPositionsWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get click positions.

     Show the number of clicks events and their associated position in the search results.  > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetClickPositionsResponse>
     */
  open func getClickPositionsWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetClickPositionsResponse> {
    let localVariablePath = "/2/clicks/positions"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetClickPositionsResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get click-through rate (CTR).

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetClickThroughRateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getClickThroughRate(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetClickThroughRateResponse {
    return try await getClickThroughRateWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get click-through rate (CTR).

     Returns a [click-through rate (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetClickThroughRateResponse>
     */
  open func getClickThroughRateWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetClickThroughRateResponse> {
    let localVariablePath = "/2/clicks/clickThroughRate"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetClickThroughRateResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get conversion rate (CR).

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetConversationRateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getConversationRate(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetConversationRateResponse {
    return try await getConversationRateWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get conversion rate (CR).

     Return a [conversion rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetConversationRateResponse>
     */
  open func getConversationRateWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetConversationRateResponse> {
    let localVariablePath = "/2/conversions/conversionRate"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetConversationRateResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get no click rate.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetNoClickRateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getNoClickRate(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetNoClickRateResponse {
    return try await getNoClickRateWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get no click rate.

     Returns the rate at which searches don't lead to any clicks. The endpoint returns a value for the complete given time range, as well as a value per day. It also returns the count of searches and searches without clicks.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetNoClickRateResponse>
     */
  open func getNoClickRateWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetNoClickRateResponse> {
    let localVariablePath = "/2/searches/noClickRate"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetNoClickRateResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get no results rate.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetNoResultsRateResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getNoResultsRate(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetNoResultsRateResponse {
    return try await getNoResultsRateWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get no results rate.

     Returns the rate at which searches didn't return any results.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetNoResultsRateResponse>
     */
  open func getNoResultsRateWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetNoResultsRateResponse> {
    let localVariablePath = "/2/searches/noResultRate"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetNoResultsRateResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get number of searches.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetSearchesCountResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getSearchesCount(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetSearchesCountResponse {
    return try await getSearchesCountWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get number of searches.

     Returns the number of searches within a time range.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetSearchesCountResponse>
     */
  open func getSearchesCountWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetSearchesCountResponse> {
    let localVariablePath = "/2/searches/count"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetSearchesCountResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get top searches with no clicks.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetSearchesNoClicksResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getSearchesNoClicks(
    index: String, startDate: String? = nil, endDate: String? = nil, limit: Int? = nil,
    offset: Int? = nil, tags: String? = nil, requestOptions: RequestOptions? = nil
  ) async throws -> GetSearchesNoClicksResponse {
    return try await getSearchesNoClicksWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, limit: limit, offset: offset,
      tags: tags, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get top searches with no clicks.

     Return the most popular of the last 1,000 searches that didn't lead to any clicks.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetSearchesNoClicksResponse>
     */
  open func getSearchesNoClicksWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, limit: Int? = nil,
    offset: Int? = nil, tags: String? = nil, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetSearchesNoClicksResponse> {
    let localVariablePath = "/2/searches/noClicks"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetSearchesNoClicksResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get top searches with no results.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetSearchesNoResultsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getSearchesNoResults(
    index: String, startDate: String? = nil, endDate: String? = nil, limit: Int? = nil,
    offset: Int? = nil, tags: String? = nil, requestOptions: RequestOptions? = nil
  ) async throws -> GetSearchesNoResultsResponse {
    return try await getSearchesNoResultsWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, limit: limit, offset: offset,
      tags: tags, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get top searches with no results.

     Returns the most popular of the latest 1,000 searches that didn't return any results.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetSearchesNoResultsResponse>
     */
  open func getSearchesNoResultsWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, limit: Int? = nil,
    offset: Int? = nil, tags: String? = nil, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetSearchesNoResultsResponse> {
    let localVariablePath = "/2/searches/noResults"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetSearchesNoResultsResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get Analytics API status.

     - parameter index: (query) Index name to target.
     - returns: GetStatusResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getStatus(index: String, requestOptions: RequestOptions? = nil) async throws
    -> GetStatusResponse
  {
    return try await getStatusWithRequestBuilder(index: index, requestOptions: requestOptions)
      .execute().body
  }

  /**
     Get Analytics API status.

     Return the latest update time of the Analytics API for an index. If the index has been recently created or no search has been performed yet, `updatedAt` will be `null`. > **Note**: The Analytics API is updated every 5&nbsp;minutes.
     - parameter index: (query) Index name to target.
     - returns: RequestBuilder<GetStatusResponse>
     */
  open func getStatusWithRequestBuilder(index: String, requestOptions: RequestOptions? = nil)
    -> RequestBuilder<GetStatusResponse>
  {
    let localVariablePath = "/2/status"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetStatusResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get top countries.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetTopCountriesResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getTopCountries(
    index: String, startDate: String? = nil, endDate: String? = nil, limit: Int? = nil,
    offset: Int? = nil, tags: String? = nil, requestOptions: RequestOptions? = nil
  ) async throws -> GetTopCountriesResponse {
    return try await getTopCountriesWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, limit: limit, offset: offset,
      tags: tags, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get top countries.

     Returns top countries. Limited to the 1,000 most frequent ones.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetTopCountriesResponse>
     */
  open func getTopCountriesWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, limit: Int? = nil,
    offset: Int? = nil, tags: String? = nil, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetTopCountriesResponse> {
    let localVariablePath = "/2/countries"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetTopCountriesResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get top filterable attributes.

     - parameter index: (query) Index name to target.
     - parameter search: (query) User query. (optional)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetTopFilterAttributesResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getTopFilterAttributes(
    index: String, search: String? = nil, startDate: String? = nil, endDate: String? = nil,
    limit: Int? = nil, offset: Int? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetTopFilterAttributesResponse {
    return try await getTopFilterAttributesWithRequestBuilder(
      index: index, search: search, startDate: startDate, endDate: endDate, limit: limit,
      offset: offset, tags: tags, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get top filterable attributes.

     Return the most popular [filterable attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) in the 1,000 most recently used filters.
     - parameter index: (query) Index name to target.
     - parameter search: (query) User query. (optional)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetTopFilterAttributesResponse>
     */
  open func getTopFilterAttributesWithRequestBuilder(
    index: String, search: String? = nil, startDate: String? = nil, endDate: String? = nil,
    limit: Int? = nil, offset: Int? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetTopFilterAttributesResponse> {
    let localVariablePath = "/2/filters"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetTopFilterAttributesResponse>.Type =
      Transporter.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get top filter values for an attribute.

     - parameter attribute: (path) Attribute name.
     - parameter index: (query) Index name to target.
     - parameter search: (query) User query. (optional)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetTopFilterForAttributeResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getTopFilterForAttribute(
    attribute: String, index: String, search: String? = nil, startDate: String? = nil,
    endDate: String? = nil, limit: Int? = nil, offset: Int? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetTopFilterForAttributeResponse {
    return try await getTopFilterForAttributeWithRequestBuilder(
      attribute: attribute, index: index, search: search, startDate: startDate, endDate: endDate,
      limit: limit, offset: offset, tags: tags, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get top filter values for an attribute.

     Returns the most popular filter values for an attribute in the 1,000 most recently used filters.
     - parameter attribute: (path) Attribute name.
     - parameter index: (query) Index name to target.
     - parameter search: (query) User query. (optional)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetTopFilterForAttributeResponse>
     */
  open func getTopFilterForAttributeWithRequestBuilder(
    attribute: String, index: String, search: String? = nil, startDate: String? = nil,
    endDate: String? = nil, limit: Int? = nil, offset: Int? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetTopFilterForAttributeResponse> {
    var localVariablePath = "/2/filters/{attribute}"
    let attributePreEscape = "\(APIHelper.mapValueToPathItem(attribute))"
    let attributePostEscape =
      attributePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{attribute}", with: attributePostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetTopFilterForAttributeResponse>.Type =
      Transporter.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get top filters for a no result search.

     - parameter index: (query) Index name to target.
     - parameter search: (query) User query. (optional)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetTopFiltersNoResultsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getTopFiltersNoResults(
    index: String, search: String? = nil, startDate: String? = nil, endDate: String? = nil,
    limit: Int? = nil, offset: Int? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetTopFiltersNoResultsResponse {
    return try await getTopFiltersNoResultsWithRequestBuilder(
      index: index, search: search, startDate: startDate, endDate: endDate, limit: limit,
      offset: offset, tags: tags, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get top filters for a no result search.

     Returns top filters for filter-enabled searches that don't return results. Limited to the 1,000 most recently used filters.
     - parameter index: (query) Index name to target.
     - parameter search: (query) User query. (optional)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetTopFiltersNoResultsResponse>
     */
  open func getTopFiltersNoResultsWithRequestBuilder(
    index: String, search: String? = nil, startDate: String? = nil, endDate: String? = nil,
    limit: Int? = nil, offset: Int? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetTopFiltersNoResultsResponse> {
    let localVariablePath = "/2/filters/noResults"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetTopFiltersNoResultsResponse>.Type =
      Transporter.requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get top hits.

     - parameter index: (query) Index name to target.
     - parameter search: (query) User query. (optional)
     - parameter clickAnalytics: (query) Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional, default to false)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetTopHitsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getTopHits(
    index: String, search: String? = nil, clickAnalytics: Bool? = nil, startDate: String? = nil,
    endDate: String? = nil, limit: Int? = nil, offset: Int? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetTopHitsResponse {
    return try await getTopHitsWithRequestBuilder(
      index: index, search: search, clickAnalytics: clickAnalytics, startDate: startDate,
      endDate: endDate, limit: limit, offset: offset, tags: tags, requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get top hits.

     Return the most popular clicked results in the last 1,000 searches.
     - parameter index: (query) Index name to target.
     - parameter search: (query) User query. (optional)
     - parameter clickAnalytics: (query) Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional, default to false)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetTopHitsResponse>
     */
  open func getTopHitsWithRequestBuilder(
    index: String, search: String? = nil, clickAnalytics: Bool? = nil, startDate: String? = nil,
    endDate: String? = nil, limit: Int? = nil, offset: Int? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetTopHitsResponse> {
    let localVariablePath = "/2/hits"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "search": (wrappedValue: search?.encodeToJSON(), isExplode: true),
      "clickAnalytics": (wrappedValue: clickAnalytics?.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetTopHitsResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get top searches.

     - parameter index: (query) Index name to target.
     - parameter clickAnalytics: (query) Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional, default to false)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter orderBy: (query) Reorder the results. (optional)
     - parameter direction: (query) Sorting direction of the results: ascending or descending.  (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetTopSearchesResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getTopSearches(
    index: String, clickAnalytics: Bool? = nil, startDate: String? = nil, endDate: String? = nil,
    orderBy: OrderBy? = nil, direction: Direction? = nil, limit: Int? = nil, offset: Int? = nil,
    tags: String? = nil, requestOptions: RequestOptions? = nil
  ) async throws -> GetTopSearchesResponse {
    return try await getTopSearchesWithRequestBuilder(
      index: index, clickAnalytics: clickAnalytics, startDate: startDate, endDate: endDate,
      orderBy: orderBy, direction: direction, limit: limit, offset: offset, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get top searches.

     Returns the most popular of the latest 1,000 searches. For each search, also returns the number of hits.
     - parameter index: (query) Index name to target.
     - parameter clickAnalytics: (query) Whether to include [click and conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional, default to false)
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter orderBy: (query) Reorder the results. (optional)
     - parameter direction: (query) Sorting direction of the results: ascending or descending.  (optional)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetTopSearchesResponse>
     */
  open func getTopSearchesWithRequestBuilder(
    index: String, clickAnalytics: Bool? = nil, startDate: String? = nil, endDate: String? = nil,
    orderBy: OrderBy? = nil, direction: Direction? = nil, limit: Int? = nil, offset: Int? = nil,
    tags: String? = nil, requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetTopSearchesResponse> {
    let localVariablePath = "/2/searches"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "clickAnalytics": (wrappedValue: clickAnalytics?.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "orderBy": (wrappedValue: orderBy?.encodeToJSON(), isExplode: true),
      "direction": (wrappedValue: direction?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetTopSearchesResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }

  /**
     Get user count.

     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: GetUsersCountResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getUsersCount(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) async throws -> GetUsersCountResponse {
    return try await getUsersCountWithRequestBuilder(
      index: index, startDate: startDate, endDate: endDate, tags: tags,
      requestOptions: requestOptions
    ).execute().body
  }

  /**
     Get user count.

     Return the count of unique users.
     - parameter index: (query) Index name to target.
     - parameter startDate: (query) Start date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter endDate: (query) End date (a string in the format &#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
     - parameter tags: (query) Filter analytics on the [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or parentheses, it must be URL-encoded. (optional)
     - returns: RequestBuilder<GetUsersCountResponse>
     */
  open func getUsersCountWithRequestBuilder(
    index: String, startDate: String? = nil, endDate: String? = nil, tags: String? = nil,
    requestOptions: RequestOptions? = nil
  ) -> RequestBuilder<GetUsersCountResponse> {
    let localVariablePath = "/2/users/count"
    let localVariableParameters: [String: Any?]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "index": (wrappedValue: index.encodeToJSON(), isExplode: true),
      "startDate": (wrappedValue: startDate?.encodeToJSON(), isExplode: true),
      "endDate": (wrappedValue: endDate?.encodeToJSON(), isExplode: true),
      "tags": (wrappedValue: tags?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<GetUsersCountResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      transporter: self.transporter, requestOptions: requestOptions)
  }
}
