// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

open class AnalyticsClient {
    private var configuration: AnalyticsClientConfiguration
    private var transporter: Transporter

    var appID: String {
        self.configuration.appID
    }

    public init(configuration: AnalyticsClientConfiguration, transporter: Transporter) {
        self.configuration = configuration
        self.transporter = transporter
    }

    public convenience init(configuration: AnalyticsClientConfiguration) {
        self.init(configuration: configuration, transporter: Transporter(configuration: configuration))
    }

    public convenience init(appID: String, apiKey: String, region: Region?) throws {
        try self.init(configuration: AnalyticsClientConfiguration(appID: appID, apiKey: apiKey, region: region))
    }

    /// - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customDelete(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customDeleteWithHTTPInfo(
            path: path,
            parameters: parameters,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method allow you to send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customDeleteWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customDelete")
        }

        var resourcePath = "/1{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body: AnyCodable? = nil
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "DELETE",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customGet(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customGetWithHTTPInfo(
            path: path,
            parameters: parameters,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method allow you to send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customGetWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customGet")
        }

        var resourcePath = "/1{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body: AnyCodable? = nil
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - parameter body: (body) Parameters to send with the custom request. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customPost(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: [String: AnyCodable]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customPostWithHTTPInfo(
            path: path,
            parameters: parameters,
            body: body,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method allow you to send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    //
    // - parameter body: (body) Parameters to send with the custom request. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customPostWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: [String: AnyCodable]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customPost")
        }

        var resourcePath = "/1{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body = body
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "POST",
            path: resourcePath,
            data: body ?? AnyCodable(),
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    /// - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    /// - parameter body: (body) Parameters to send with the custom request. (optional)
    /// - returns: AnyCodable
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func customPut(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: [String: AnyCodable]? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> AnyCodable {
        let response: Response<AnyCodable> = try await customPutWithHTTPInfo(
            path: path,
            parameters: parameters,
            body: body,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // This method allow you to send requests to the Algolia REST API.
    //
    //
    // - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
    //
    // - parameter parameters: (query) Query parameters to apply to the current query. (optional)
    //
    // - parameter body: (body) Parameters to send with the custom request. (optional)
    // - returns: RequestBuilder<AnyCodable>

    open func customPutWithHTTPInfo(
        path: String,
        parameters: [String: AnyCodable]? = nil,
        body: [String: AnyCodable]? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<AnyCodable> {
        guard !path.isEmpty else {
            throw AlgoliaError.invalidArgument("path", "customPut")
        }

        var resourcePath = "/1{path}"
        let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
        resourcePath = resourcePath.replacingOccurrences(
            of: "{path}",
            with: pathPreEscape,
            options: .literal,
            range: nil
        )
        let body = body
        let queryParameters: [String: AnyCodable]? = parameters

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "PUT",
            path: resourcePath,
            data: body ?? AnyCodable(),
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetAverageClickPositionResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getAverageClickPosition(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetAverageClickPositionResponse {
        let response: Response<GetAverageClickPositionResponse> = try await getAverageClickPositionWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Return the average click position for the complete time range and for individual days. > **Note**: If all
    // `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked
    // searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetAverageClickPositionResponse>

    open func getAverageClickPositionWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetAverageClickPositionResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getAverageClickPosition")
        }

        let resourcePath = "/2/clicks/averageClickPosition"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetClickPositionsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getClickPositions(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetClickPositionsResponse {
        let response: Response<GetClickPositionsResponse> = try await getClickPositionsWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Show the number of clicks events and their associated position in the search results.  > **Note**: If all
    // `positions` have a `clickCount` of `0` or `null`, it means Algolia didn't receive any click events for tracked
    // searches. A _tracked_ search is a search request where the `clickAnalytics` parameter is `true`.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetClickPositionsResponse>

    open func getClickPositionsWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetClickPositionsResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getClickPositions")
        }

        let resourcePath = "/2/clicks/positions"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetClickThroughRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getClickThroughRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetClickThroughRateResponse {
        let response: Response<GetClickThroughRateResponse> = try await getClickThroughRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns a [click-through rate
    // (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetClickThroughRateResponse>

    open func getClickThroughRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetClickThroughRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getClickThroughRate")
        }

        let resourcePath = "/2/clicks/clickThroughRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetConversationRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getConversationRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetConversationRateResponse {
        let response: Response<GetConversationRateResponse> = try await getConversationRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Return a [conversion
    // rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetConversationRateResponse>

    open func getConversationRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetConversationRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getConversationRate")
        }

        let resourcePath = "/2/conversions/conversionRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetNoClickRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getNoClickRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetNoClickRateResponse {
        let response: Response<GetNoClickRateResponse> = try await getNoClickRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns the rate at which searches don't lead to any clicks. The endpoint returns a value for the complete given
    // time range, as well as a value per day. It also returns the count of searches and searches without clicks.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetNoClickRateResponse>

    open func getNoClickRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetNoClickRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getNoClickRate")
        }

        let resourcePath = "/2/searches/noClickRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetNoResultsRateResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getNoResultsRate(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetNoResultsRateResponse {
        let response: Response<GetNoResultsRateResponse> = try await getNoResultsRateWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns the rate at which searches didn't return any results.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetNoResultsRateResponse>

    open func getNoResultsRateWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetNoResultsRateResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getNoResultsRate")
        }

        let resourcePath = "/2/searches/noResultRate"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetSearchesCountResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getSearchesCount(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetSearchesCountResponse {
        let response: Response<GetSearchesCountResponse> = try await getSearchesCountWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns the number of searches within a time range.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetSearchesCountResponse>

    open func getSearchesCountWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetSearchesCountResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getSearchesCount")
        }

        let resourcePath = "/2/searches/count"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetSearchesNoClicksResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getSearchesNoClicks(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetSearchesNoClicksResponse {
        let response: Response<GetSearchesNoClicksResponse> = try await getSearchesNoClicksWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Return the most popular of the last 1,000 searches that didn't lead to any clicks.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetSearchesNoClicksResponse>

    open func getSearchesNoClicksWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetSearchesNoClicksResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getSearchesNoClicks")
        }

        let resourcePath = "/2/searches/noClicks"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetSearchesNoResultsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getSearchesNoResults(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetSearchesNoResultsResponse {
        let response: Response<GetSearchesNoResultsResponse> = try await getSearchesNoResultsWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns the most popular of the latest 1,000 searches that didn't return any results.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetSearchesNoResultsResponse>

    open func getSearchesNoResultsWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetSearchesNoResultsResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getSearchesNoResults")
        }

        let resourcePath = "/2/searches/noResults"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - returns: GetStatusResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getStatus(index: String, requestOptions: RequestOptions? = nil) async throws -> GetStatusResponse {
        let response: Response<GetStatusResponse> = try await getStatusWithHTTPInfo(
            index: index,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Return the latest update time of the Analytics API for an index. If the index has been recently created or no
    // search has been performed yet, `updatedAt` will be `null`. > **Note**: The Analytics API is updated every
    // 5&nbsp;minutes.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    // - returns: RequestBuilder<GetStatusResponse>

    open func getStatusWithHTTPInfo(
        index: String,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetStatusResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getStatus")
        }

        let resourcePath = "/2/status"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetTopCountriesResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopCountries(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopCountriesResponse {
        let response: Response<GetTopCountriesResponse> = try await getTopCountriesWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns top countries. Limited to the 1,000 most frequent ones.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetTopCountriesResponse>

    open func getTopCountriesWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopCountriesResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopCountries")
        }

        let resourcePath = "/2/countries"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter search: (query) User query. (optional)
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetTopFilterAttributesResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopFilterAttributes(
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopFilterAttributesResponse {
        let response: Response<GetTopFilterAttributesResponse> = try await getTopFilterAttributesWithHTTPInfo(
            index: index,
            search: search,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Return the most popular [filterable
    // attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/) in the 1,000 most
    // recently used filters.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter search: (query) User query. (optional)
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetTopFilterAttributesResponse>

    open func getTopFilterAttributesWithHTTPInfo(
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopFilterAttributesResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopFilterAttributes")
        }

        let resourcePath = "/2/filters"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter attribute: (path) Attribute name.
    /// - parameter index: (query) Index name.
    /// - parameter search: (query) User query. (optional)
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetTopFilterForAttributeResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopFilterForAttribute(
        attribute: String,
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopFilterForAttributeResponse {
        let response: Response<GetTopFilterForAttributeResponse> = try await getTopFilterForAttributeWithHTTPInfo(
            attribute: attribute,
            index: index,
            search: search,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns the most popular filter values for an attribute in the 1,000 most recently used filters.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter attribute: (path) Attribute name.
    //
    // - parameter index: (query) Index name.
    //
    // - parameter search: (query) User query. (optional)
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetTopFilterForAttributeResponse>

    open func getTopFilterForAttributeWithHTTPInfo(
        attribute: String,
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopFilterForAttributeResponse> {
        guard !attribute.isEmpty else {
            throw AlgoliaError.invalidArgument("attribute", "getTopFilterForAttribute")
        }

        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopFilterForAttribute")
        }

        var resourcePath = "/2/filters/{attribute}"
        let attributePreEscape = "\(APIHelper.mapValueToPathItem(attribute))"
        let attributePostEscape = attributePreEscape
            .addingPercentEncoding(withAllowedCharacters: .urlPathAlgoliaAllowed) ?? ""
        resourcePath = resourcePath.replacingOccurrences(
            of: "{attribute}",
            with: attributePostEscape,
            options: .literal,
            range: nil
        )
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter search: (query) User query. (optional)
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetTopFiltersNoResultsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopFiltersNoResults(
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopFiltersNoResultsResponse {
        let response: Response<GetTopFiltersNoResultsResponse> = try await getTopFiltersNoResultsWithHTTPInfo(
            index: index,
            search: search,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns top filters for filter-enabled searches that don't return results. Limited to the 1,000 most recently
    // used filters.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter search: (query) User query. (optional)
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetTopFiltersNoResultsResponse>

    open func getTopFiltersNoResultsWithHTTPInfo(
        index: String,
        search: String? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopFiltersNoResultsResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopFiltersNoResults")
        }

        let resourcePath = "/2/filters/noResults"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter search: (query) User query. (optional)
    /// - parameter clickAnalytics: (query) Whether to include [click and
    /// conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional,
    /// default to false)
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetTopHitsResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopHits(
        index: String,
        search: String? = nil,
        clickAnalytics: Bool? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopHitsResponse {
        let response: Response<GetTopHitsResponse> = try await getTopHitsWithHTTPInfo(
            index: index,
            search: search,
            clickAnalytics: clickAnalytics,
            startDate: startDate,
            endDate: endDate,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Return the most popular clicked results in the last 1,000 searches.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter search: (query) User query. (optional)
    //
    // - parameter clickAnalytics: (query) Whether to include [click and
    // conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional,
    // default to false)
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetTopHitsResponse>

    open func getTopHitsWithHTTPInfo(
        index: String,
        search: String? = nil,
        clickAnalytics: Bool? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopHitsResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopHits")
        }

        let resourcePath = "/2/hits"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "search": search?.encodeToJSON(),
            "clickAnalytics": clickAnalytics?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter clickAnalytics: (query) Whether to include [click and
    /// conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional,
    /// default to false)
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter orderBy: (query) Reorder the results. (optional)
    /// - parameter direction: (query) Sorting direction of the results: ascending or descending.  (optional)
    /// - parameter limit: (query) Number of items to return. (optional, default to 10)
    /// - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetTopSearchesResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getTopSearches(
        index: String,
        clickAnalytics: Bool? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        orderBy: OrderBy? = nil,
        direction: Direction? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetTopSearchesResponse {
        let response: Response<GetTopSearchesResponse> = try await getTopSearchesWithHTTPInfo(
            index: index,
            clickAnalytics: clickAnalytics,
            startDate: startDate,
            endDate: endDate,
            orderBy: orderBy,
            direction: direction,
            limit: limit,
            offset: offset,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Returns the most popular of the latest 1,000 searches. For each search, also returns the number of hits.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter clickAnalytics: (query) Whether to include [click and
    // conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/) rates for a search. (optional,
    // default to false)
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter orderBy: (query) Reorder the results. (optional)
    //
    // - parameter direction: (query) Sorting direction of the results: ascending or descending.  (optional)
    //
    // - parameter limit: (query) Number of items to return. (optional, default to 10)
    //
    // - parameter offset: (query) Position of the first item to return. (optional, default to 0)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetTopSearchesResponse>

    open func getTopSearchesWithHTTPInfo(
        index: String,
        clickAnalytics: Bool? = nil,
        startDate: String? = nil,
        endDate: String? = nil,
        orderBy: OrderBy? = nil,
        direction: Direction? = nil,
        limit: Int? = nil,
        offset: Int? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetTopSearchesResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getTopSearches")
        }

        let resourcePath = "/2/searches"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "clickAnalytics": clickAnalytics?.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "orderBy": orderBy?.encodeToJSON(),
            "direction": direction?.encodeToJSON(),
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }

    /// - parameter index: (query) Index name.
    /// - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    /// - parameter tags: (query) Filter analytics on the
    /// [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    /// search time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like
    /// spaces or parentheses, it must be URL-encoded. (optional)
    /// - returns: GetUsersCountResponse
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open func getUsersCount(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions: RequestOptions? = nil
    ) async throws -> GetUsersCountResponse {
        let response: Response<GetUsersCountResponse> = try await getUsersCountWithHTTPInfo(
            index: index,
            startDate: startDate,
            endDate: endDate,
            tags: tags,
            requestOptions: requestOptions
        )

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

        return body
    }

    // Return the count of unique users.
    // Required API Key ACLs:
    //  - analytics
    //
    // - parameter index: (query) Index name.
    //
    // - parameter startDate: (query) Start date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter endDate: (query) End date (&#x60;YYYY-MM-DD&#x60;) of the period to analyze. (optional)
    //
    // - parameter tags: (query) Filter analytics on the
    // [&#x60;analyticsTags&#x60;](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/) set at
    // search
    // time. Multiple tags can be combined with the operators OR and AND. If a tag contains characters like spaces or
    // parentheses, it must be URL-encoded. (optional)
    // - returns: RequestBuilder<GetUsersCountResponse>

    open func getUsersCountWithHTTPInfo(
        index: String,
        startDate: String? = nil,
        endDate: String? = nil,
        tags: String? = nil,
        requestOptions userRequestOptions: RequestOptions? = nil
    ) async throws -> Response<GetUsersCountResponse> {
        guard !index.isEmpty else {
            throw AlgoliaError.invalidArgument("index", "getUsersCount")
        }

        let resourcePath = "/2/users/count"
        let body: AnyCodable? = nil
        let queryParameters: [String: Any?] = [
            "index": index.encodeToJSON(),
            "startDate": startDate?.encodeToJSON(),
            "endDate": endDate?.encodeToJSON(),
            "tags": tags?.encodeToJSON(),
        ]

        let nillableHeaders: [String: Any?]? = nil

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
            method: "GET",
            path: resourcePath,
            data: body,
            requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions
        )
    }
}
