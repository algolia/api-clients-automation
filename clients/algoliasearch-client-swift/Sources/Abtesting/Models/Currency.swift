// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct Currency: Codable, JSONEncodable {
    /// Currency code.
    public var currency: String?
    /// Revenue for this currency.
    public var revenue: Double?
    /// Mean for this currency.
    public var mean: Double?
    /// Standard deviation for this currency.
    public var standardDeviation: Double?
    /// The amount of revenue for this currency that was removed after capping purchase amounts to the 95th percentile.
    public var winsorizedAmount: Double?

    public init(
        currency: String? = nil,
        revenue: Double? = nil,
        mean: Double? = nil,
        standardDeviation: Double? = nil,
        winsorizedAmount: Double? = nil
    ) {
        self.currency = currency
        self.revenue = revenue
        self.mean = mean
        self.standardDeviation = standardDeviation
        self.winsorizedAmount = winsorizedAmount
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case currency
        case revenue
        case mean
        case standardDeviation
        case winsorizedAmount
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.currency, forKey: .currency)
        try container.encodeIfPresent(self.revenue, forKey: .revenue)
        try container.encodeIfPresent(self.mean, forKey: .mean)
        try container.encodeIfPresent(self.standardDeviation, forKey: .standardDeviation)
        try container.encodeIfPresent(self.winsorizedAmount, forKey: .winsorizedAmount)
    }
}

extension Currency: Equatable {
    public static func ==(lhs: Currency, rhs: Currency) -> Bool {
        lhs.currency == rhs.currency &&
            lhs.revenue == rhs.revenue &&
            lhs.mean == rhs.mean &&
            lhs.standardDeviation == rhs.standardDeviation &&
            lhs.winsorizedAmount == rhs.winsorizedAmount
    }
}

extension Currency: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.currency?.hashValue)
        hasher.combine(self.revenue?.hashValue)
        hasher.combine(self.mean?.hashValue)
        hasher.combine(self.standardDeviation?.hashValue)
        hasher.combine(self.winsorizedAmount?.hashValue)
    }
}
