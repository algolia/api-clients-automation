// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Foundation
#if canImport(Core)
    import Core
#endif

public struct EstimateABTestResponse: Codable, JSONEncodable {
    /// Estimated number of days needed to reach the sample sizes required for detecting the configured effect. This
    /// value is based on historical traffic.
    public var durationDays: Int64?
    /// Number of tracked searches needed to be able to detect the configured effect for the control variant.
    public var controlSampleSize: Int64?
    /// Number of tracked searches needed to be able to detect the configured effect for the experiment variant.
    public var experimentSampleSize: Int64?

    public init(durationDays: Int64? = nil, controlSampleSize: Int64? = nil, experimentSampleSize: Int64? = nil) {
        self.durationDays = durationDays
        self.controlSampleSize = controlSampleSize
        self.experimentSampleSize = experimentSampleSize
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case durationDays
        case controlSampleSize
        case experimentSampleSize
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(self.durationDays, forKey: .durationDays)
        try container.encodeIfPresent(self.controlSampleSize, forKey: .controlSampleSize)
        try container.encodeIfPresent(self.experimentSampleSize, forKey: .experimentSampleSize)
    }
}

extension EstimateABTestResponse: Equatable {
    public static func ==(lhs: EstimateABTestResponse, rhs: EstimateABTestResponse) -> Bool {
        lhs.durationDays == rhs.durationDays &&
            lhs.controlSampleSize == rhs.controlSampleSize &&
            lhs.experimentSampleSize == rhs.experimentSampleSize
    }
}

extension EstimateABTestResponse: Hashable {
    public func hash(into hasher: inout Hasher) {
        hasher.combine(self.durationDays?.hashValue)
        hasher.combine(self.controlSampleSize?.hashValue)
        hasher.combine(self.experimentSampleSize?.hashValue)
    }
}
