// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import Core
import Foundation

#if canImport(AnyCodable)
  import AnyCodable
#endif

typealias Client = AbtestingClient

@objcMembers open class AbtestingClient: NSObject {

  private var configuration: Configuration
  private var transporter: Transporter

  var applicationID: String {
    self.configuration.applicationID
  }

  public init(configuration: Configuration, transporter: Transporter) {
    self.configuration = configuration
    self.transporter = transporter
  }

  public convenience init(configuration: Configuration) {
    self.init(configuration: configuration, transporter: Transporter(configuration: configuration))
  }

  public convenience init(applicationID: String, apiKey: String, region: Region?) {
    self.init(
      configuration: Configuration(applicationID: applicationID, apiKey: apiKey, region: region))
  }

  /**
     Create an A/B test.

     - parameter addABTestsRequest: (body)
     - returns: ABTestResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func addABTests(addABTestsRequest: AddABTestsRequest) async throws -> ABTestResponse {
    return try await addABTestsWithRequestBuilder(addABTestsRequest: addABTestsRequest).execute()
      .body
  }

  /**
     Create an A/B test.

     Creates an A/B test.
     - parameter addABTestsRequest: (body)
     - returns: RequestBuilder<ABTestResponse>
     */
  open func addABTestsWithRequestBuilder(addABTestsRequest: AddABTestsRequest) -> RequestBuilder<
    ABTestResponse
  > {
    let localVariablePath = "/2/abtests"
    let localVariableParameters = JSONEncodingHelper.encodingParameters(
      forEncodableObject: addABTestsRequest)

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ABTestResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customDelete(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customDeleteWithRequestBuilder(path: path, parameters: parameters).execute()
      .body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customDeleteWithRequestBuilder(path: String, parameters: [String: AnyCodable]? = nil)
    -> RequestBuilder<AnyCodable>
  {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customGet(path: String, parameters: [String: AnyCodable]? = nil) async throws
    -> AnyCodable
  {
    return try await customGetWithRequestBuilder(path: path, parameters: parameters).execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customGetWithRequestBuilder(path: String, parameters: [String: AnyCodable]? = nil)
    -> RequestBuilder<AnyCodable>
  {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customPost(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil
  ) async throws -> AnyCodable {
    return try await customPostWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customPostWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Send requests to the Algolia REST API.

     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: AnyCodable
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func customPut(path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil)
    async throws -> AnyCodable
  {
    return try await customPutWithRequestBuilder(path: path, parameters: parameters, body: body)
      .execute().body
  }

  /**
     Send requests to the Algolia REST API.

     This method allow you to send requests to the Algolia REST API.
     - parameter path: (path) Path of the endpoint, anything after \&quot;/1\&quot; must be specified.
     - parameter parameters: (query) Query parameters to apply to the current query. (optional)
     - parameter body: (body) Parameters to send with the custom request. (optional)
     - returns: RequestBuilder<AnyCodable>
     */
  open func customPutWithRequestBuilder(
    path: String, parameters: [String: AnyCodable]? = nil, body: Encodable? = nil
  ) -> RequestBuilder<AnyCodable> {
    var localVariablePath = "/1{path}"
    let pathPreEscape = "\(APIHelper.mapValueToPathItem(path))"
    let pathPostEscape =
      pathPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{path}", with: pathPostEscape, options: .literal, range: nil)
    let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "parameters": (wrappedValue: parameters?.encodeToJSON(), isExplode: true)
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<AnyCodable>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "PUT", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Delete an A/B test.

     - parameter _id: (path) Unique A/B test ID.
     - returns: ABTestResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func deleteABTest(_id: Int) async throws -> ABTestResponse {
    return try await deleteABTestWithRequestBuilder(_id: _id).execute().body
  }

  /**
     Delete an A/B test.

     Delete an A/B test. To determine the `id` for an A/B test, use the [`listABTests` operation](#tag/abtest/operation/listABTests).
     - parameter _id: (path) Unique A/B test ID.
     - returns: RequestBuilder<ABTestResponse>
     */
  open func deleteABTestWithRequestBuilder(_id: Int) -> RequestBuilder<ABTestResponse> {
    var localVariablePath = "/2/abtests/{id}"
    let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
    let _idPostEscape =
      _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{id}", with: _idPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ABTestResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "DELETE", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Get A/B test details.

     - parameter _id: (path) Unique A/B test ID.
     - returns: ABTest
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func getABTest(_id: Int) async throws -> ABTest {
    return try await getABTestWithRequestBuilder(_id: _id).execute().body
  }

  /**
     Get A/B test details.

     Get specific details for an A/B test. To determine the `id` for an A/B test, use the [`listABTests` operation](#tag/abtest/operation/listABTests).
     - parameter _id: (path) Unique A/B test ID.
     - returns: RequestBuilder<ABTest>
     */
  open func getABTestWithRequestBuilder(_id: Int) -> RequestBuilder<ABTest> {
    var localVariablePath = "/2/abtests/{id}"
    let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
    let _idPostEscape =
      _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{id}", with: _idPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ABTest>.Type = Transporter.requestBuilderFactory
      .getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     List all A/B tests.

     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter indexPrefix: (query) Only return A/B tests for indices starting with this prefix. (optional)
     - parameter indexSuffix: (query) Only return A/B tests for indices ending with this suffix. (optional)
     - returns: ListABTestsResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func listABTests(
    offset: Int? = nil, limit: Int? = nil, indexPrefix: String? = nil, indexSuffix: String? = nil
  ) async throws -> ListABTestsResponse {
    return try await listABTestsWithRequestBuilder(
      offset: offset, limit: limit, indexPrefix: indexPrefix, indexSuffix: indexSuffix
    ).execute().body
  }

  /**
     List all A/B tests.

     List all A/B tests.
     - parameter offset: (query) Position of the starting record. Used for paging. 0 is the first record. (optional, default to 0)
     - parameter limit: (query) Number of records to return (page size). (optional, default to 10)
     - parameter indexPrefix: (query) Only return A/B tests for indices starting with this prefix. (optional)
     - parameter indexSuffix: (query) Only return A/B tests for indices ending with this suffix. (optional)
     - returns: RequestBuilder<ListABTestsResponse>
     */
  open func listABTestsWithRequestBuilder(
    offset: Int? = nil, limit: Int? = nil, indexPrefix: String? = nil, indexSuffix: String? = nil
  ) -> RequestBuilder<ListABTestsResponse> {
    let localVariablePath = "/2/abtests"
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems = APIHelper.mapValuesToQueryItems([
      "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
      "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
      "indexPrefix": (wrappedValue: indexPrefix?.encodeToJSON(), isExplode: true),
      "indexSuffix": (wrappedValue: indexSuffix?.encodeToJSON(), isExplode: true),
    ])

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ListABTestsResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "GET", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }

  /**
     Stop an A/B test.

     - parameter _id: (path) Unique A/B test ID.
     - returns: ABTestResponse
     */
  @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
  open func stopABTest(_id: Int) async throws -> ABTestResponse {
    return try await stopABTestWithRequestBuilder(_id: _id).execute().body
  }

  /**
     Stop an A/B test.

     If stopped, the test is over and can't be restarted. There is now only one index, receiving 100% of all search requests. The data gathered for stopped A/B tests is retained. To determine the `id` for an A/B test, use the [`listABTests` operation](#tag/abtest/operation/listABTests).
     - parameter _id: (path) Unique A/B test ID.
     - returns: RequestBuilder<ABTestResponse>
     */
  open func stopABTestWithRequestBuilder(_id: Int) -> RequestBuilder<ABTestResponse> {
    var localVariablePath = "/2/abtests/{id}/stop"
    let _idPreEscape = "\(APIHelper.mapValueToPathItem(_id))"
    let _idPostEscape =
      _idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
    localVariablePath = localVariablePath.replacingOccurrences(
      of: "{id}", with: _idPostEscape, options: .literal, range: nil)
    let localVariableParameters: [String: Any]? = nil

    let localVariableQueryItems: [URLQueryItem]? = nil

    let localVariableNillableHeaders: [String: Any?] = [:]

    let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

    let localVariableRequestBuilder: RequestBuilder<ABTestResponse>.Type = Transporter
      .requestBuilderFactory.getBuilder()

    return localVariableRequestBuilder.init(
      method: "POST", path: localVariablePath, queryItems: localVariableQueryItems,
      parameters: localVariableParameters, headers: localVariableHeaderParameters,
      requiresAuthentication: true, transporter: self.transporter)
  }
}
