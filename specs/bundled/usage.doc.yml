openapi: 3.0.2
info:
  title: Usage API
  description: >
    The Usage API gives you access to statistics about all requests made to your
    Algolia applications.


    ## Base URL


    The base URL for requests to the Usage API is:


    - `https://usage.algolia.com`


    **All requests must use HTTPS.**


    ## Authentication


    To authenticate your API requests, add these headers:


    - `x-algolia-application-id`. Your Algolia application ID.

    - `x-algolia-api-key`. The Usage API key.


    You can find your application ID and Usage API key in the [Algolia
    dashboard](https://dashboard.algolia.com/account).


    ## Response status and errors


    The Usage API returns JSON responses.

    Since JSON doesn't guarantee any specific ordering, don't rely on the order
    of attributes in the API response.


    Successful responses return a `2xx` status. Client errors return a `4xx`
    status. Server errors are indicated by a `5xx` status.

    Error responses have a `message` property with more information.


    ## Version


    The current version of the Usage API is version 1, as indicated by the `/1/`
    in each endpoint's URL.
  version: 1.0.0
servers:
  - url: https://usage.algolia.com
    description: Base URL of the Usage API.
  - url: https://usage-dev.algolia.com
    description: >-
      Base URL for the development version of the Usage API (Algolia employees
      only).
security:
  - appId: []
    apiKey: []
tags:
  - name: usage
    x-displayName: Usage statistics
    description: Get various metrics related to the usage of your Algolia applications.
paths:
  /{path}:
    get:
      operationId: customGet
      summary: Send requests to the Algolia REST API
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >
            // Initialize the client

            var client = new UsageClient(new UsageConfig("YOUR_APP_ID",
            "YOUR_API_KEY"));


            // Call the API

            var response = await client.CustomGetAsync("test/minimal");
        - lang: go
          label: Go
          source: |
            // Initialize the client
            client, err := usage.NewClient("YOUR_APP_ID", "YOUR_API_KEY")
            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }

            // Call the API
            response, err := client.CustomGet(client.NewApiCustomGetRequest(
              "test/minimal",
            ))
            if err != nil {
              // handle the eventual error
              panic(err)
            }

            // use the model directly
            print(response)
        - lang: java
          label: Java
          source: |
            // Initialize the client
            UsageClient client = new UsageClient("YOUR_APP_ID", "YOUR_API_KEY");

            // Call the API
            client.customGet("test/minimal");
        - lang: javascript
          label: JavaScript
          source: |
            // Initialize the client
            const client = usageClient('YOUR_APP_ID', 'YOUR_API_KEY');

            // Call the API
            const response = await client.customGet({ path: 'test/minimal' });

            // use typed response
            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            var response = client.customGet(
              path = "test/minimal",
            )


            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: |
            // Initialize the client
            $client = UsageClient::create('<YOUR_APP_ID>', '<YOUR_API_KEY>');

            // Call the API
            $response = $client->customGet(
                'test/minimal',
            );

            // play with the response
            var_dump($response);
        - lang: python
          label: Python
          source: |
            # Initialize the client
            _client = UsageClient("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = await _client.custom_get(
                path="test/minimal",
            )

            # use the class directly
            print(response)

            # print the JSON response
            print(response.to_json())
        - lang: ruby
          label: Ruby
          source: |
            # Initialize the client
            client = Algolia::UsageClient.create("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = client.custom_get("test/minimal")

            # use the class directly
            puts(response)

            # print the JSON response
            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            val response = client.customGet[JObject](
              path = "test/minimal"
            )


            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try UsageClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY")


            // Call the API

            let response = try await client.customGet(path: "test/minimal")
    post:
      operationId: customPost
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >
            // Initialize the client

            var client = new UsageClient(new UsageConfig("YOUR_APP_ID",
            "YOUR_API_KEY"));


            // Call the API

            var response = await client.CustomPostAsync("test/minimal");
        - lang: go
          label: Go
          source: |
            // Initialize the client
            client, err := usage.NewClient("YOUR_APP_ID", "YOUR_API_KEY")
            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }

            // Call the API
            response, err := client.CustomPost(client.NewApiCustomPostRequest(
              "test/minimal",
            ))
            if err != nil {
              // handle the eventual error
              panic(err)
            }

            // use the model directly
            print(response)
        - lang: java
          label: Java
          source: |
            // Initialize the client
            UsageClient client = new UsageClient("YOUR_APP_ID", "YOUR_API_KEY");

            // Call the API
            client.customPost("test/minimal");
        - lang: javascript
          label: JavaScript
          source: |
            // Initialize the client
            const client = usageClient('YOUR_APP_ID', 'YOUR_API_KEY');

            // Call the API
            const response = await client.customPost({ path: 'test/minimal' });

            // use typed response
            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            var response = client.customPost(
              path = "test/minimal",
            )


            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: |
            // Initialize the client
            $client = UsageClient::create('<YOUR_APP_ID>', '<YOUR_API_KEY>');

            // Call the API
            $response = $client->customPost(
                'test/minimal',
            );

            // play with the response
            var_dump($response);
        - lang: python
          label: Python
          source: |
            # Initialize the client
            _client = UsageClient("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = await _client.custom_post(
                path="test/minimal",
            )

            # use the class directly
            print(response)

            # print the JSON response
            print(response.to_json())
        - lang: ruby
          label: Ruby
          source: |
            # Initialize the client
            client = Algolia::UsageClient.create("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = client.custom_post("test/minimal")

            # use the class directly
            puts(response)

            # print the JSON response
            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            val response = client.customPost[JObject](
              path = "test/minimal"
            )


            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try UsageClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY")


            // Call the API

            let response = try await client.customPost(path: "test/minimal")
    put:
      operationId: customPut
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >
            // Initialize the client

            var client = new UsageClient(new UsageConfig("YOUR_APP_ID",
            "YOUR_API_KEY"));


            // Call the API

            var response = await client.CustomPutAsync("test/minimal");
        - lang: go
          label: Go
          source: |
            // Initialize the client
            client, err := usage.NewClient("YOUR_APP_ID", "YOUR_API_KEY")
            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }

            // Call the API
            response, err := client.CustomPut(client.NewApiCustomPutRequest(
              "test/minimal",
            ))
            if err != nil {
              // handle the eventual error
              panic(err)
            }

            // use the model directly
            print(response)
        - lang: java
          label: Java
          source: |
            // Initialize the client
            UsageClient client = new UsageClient("YOUR_APP_ID", "YOUR_API_KEY");

            // Call the API
            client.customPut("test/minimal");
        - lang: javascript
          label: JavaScript
          source: |
            // Initialize the client
            const client = usageClient('YOUR_APP_ID', 'YOUR_API_KEY');

            // Call the API
            const response = await client.customPut({ path: 'test/minimal' });

            // use typed response
            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            var response = client.customPut(
              path = "test/minimal",
            )


            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: |
            // Initialize the client
            $client = UsageClient::create('<YOUR_APP_ID>', '<YOUR_API_KEY>');

            // Call the API
            $response = $client->customPut(
                'test/minimal',
            );

            // play with the response
            var_dump($response);
        - lang: python
          label: Python
          source: |
            # Initialize the client
            _client = UsageClient("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = await _client.custom_put(
                path="test/minimal",
            )

            # use the class directly
            print(response)

            # print the JSON response
            print(response.to_json())
        - lang: ruby
          label: Ruby
          source: |
            # Initialize the client
            client = Algolia::UsageClient.create("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = client.custom_put("test/minimal")

            # use the class directly
            puts(response)

            # print the JSON response
            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            val response = client.customPut[JObject](
              path = "test/minimal"
            )


            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try UsageClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY")


            // Call the API

            let response = try await client.customPut(path: "test/minimal")
    delete:
      operationId: customDelete
      summary: Send requests to the Algolia REST API
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >
            // Initialize the client

            var client = new UsageClient(new UsageConfig("YOUR_APP_ID",
            "YOUR_API_KEY"));


            // Call the API

            var response = await client.CustomDeleteAsync("test/minimal");
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := usage.NewClient("YOUR_APP_ID", "YOUR_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CustomDelete(client.NewApiCustomDeleteRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: |
            // Initialize the client
            UsageClient client = new UsageClient("YOUR_APP_ID", "YOUR_API_KEY");

            // Call the API
            client.customDelete("test/minimal");
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            const client = usageClient('YOUR_APP_ID', 'YOUR_API_KEY');


            // Call the API

            const response = await client.customDelete({ path: 'test/minimal'
            });


            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            var response = client.customDelete(
              path = "test/minimal",
            )


            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: |
            // Initialize the client
            $client = UsageClient::create('<YOUR_APP_ID>', '<YOUR_API_KEY>');

            // Call the API
            $response = $client->customDelete(
                'test/minimal',
            );

            // play with the response
            var_dump($response);
        - lang: python
          label: Python
          source: |
            # Initialize the client
            _client = UsageClient("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = await _client.custom_delete(
                path="test/minimal",
            )

            # use the class directly
            print(response)

            # print the JSON response
            print(response.to_json())
        - lang: ruby
          label: Ruby
          source: |
            # Initialize the client
            client = Algolia::UsageClient.create("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = client.custom_delete("test/minimal")

            # use the class directly
            puts(response)

            # print the JSON response
            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            val response = client.customDelete[JObject](
              path = "test/minimal"
            )


            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try UsageClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY")


            // Call the API

            let response = try await client.customDelete(path: "test/minimal")
  /1/usage/{statistic}:
    get:
      operationId: getUsage
      summary: Retrieve usage information
      description: |
        Retrieves usage statistics evaluated over a specified period.
      parameters:
        - $ref: '#/components/parameters/statisticParameter'
        - $ref: '#/components/parameters/StartDateRequired'
        - $ref: '#/components/parameters/EndDateRequired'
        - $ref: '#/components/parameters/granularityParameter'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >
            // Initialize the client

            var client = new UsageClient(new UsageConfig("YOUR_APP_ID",
            "YOUR_API_KEY"));


            // Call the API

            var response = await client.GetUsageAsync(
              Enum.Parse<Statistic>("QueriesOperations"),
              "2024-04-03T12:46:43Z",
              "2024-04-05T12:46:43Z"
            );
        - lang: go
          label: Go
          source: |
            // Initialize the client
            client, err := usage.NewClient("YOUR_APP_ID", "YOUR_API_KEY")
            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }

            // Call the API
            response, err := client.GetUsage(client.NewApiGetUsageRequest(
              usage.Statistic("queries_operations"), "2024-04-03T12:46:43Z", "2024-04-05T12:46:43Z",
            ))
            if err != nil {
              // handle the eventual error
              panic(err)
            }

            // use the model directly
            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            UsageClient client = new UsageClient("YOUR_APP_ID", "YOUR_API_KEY");


            // Call the API

            client.getUsage(Statistic.QUERIES_OPERATIONS,
            "2024-04-03T12:46:43Z", "2024-04-05T12:46:43Z");
        - lang: javascript
          label: JavaScript
          source: |
            // Initialize the client
            const client = usageClient('YOUR_APP_ID', 'YOUR_API_KEY');

            // Call the API
            const response = await client.getUsage({
              statistic: 'queries_operations',
              startDate: '2024-04-03T12:46:43Z',
              endDate: '2024-04-05T12:46:43Z',
            });

            // use typed response
            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            var response = client.getUsage(
              statistic = Statistic.entries.first { it.value == "queries_operations" },
              startDate = "2024-04-03T12:46:43Z",
              endDate = "2024-04-05T12:46:43Z",
            )


            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: |
            // Initialize the client
            $client = UsageClient::create('<YOUR_APP_ID>', '<YOUR_API_KEY>');

            // Call the API
            $response = $client->getUsage(
                'queries_operations',
                '2024-04-03T12:46:43Z',
                '2024-04-05T12:46:43Z',
            );

            // play with the response
            var_dump($response);
        - lang: python
          label: Python
          source: |
            # Initialize the client
            _client = UsageClient("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = await _client.get_usage(
                statistic="queries_operations",
                start_date="2024-04-03T12:46:43Z",
                end_date="2024-04-05T12:46:43Z",
            )

            # use the class directly
            print(response)

            # print the JSON response
            print(response.to_json())
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::UsageClient.create("YOUR_APP_ID", "YOUR_API_KEY")


            # Call the API

            response = client.get_usage("queries_operations",
            "2024-04-03T12:46:43Z", "2024-04-05T12:46:43Z")


            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            val response = client.getUsage(
              statistic = Statistic.withName("queries_operations"),
              startDate = "2024-04-03T12:46:43Z",
              endDate = "2024-04-05T12:46:43Z"
            )


            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try UsageClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY")


            // Call the API

            let response = try await client.getUsage(
                statistic: Statistic.queriesOperations,
                startDate: "2024-04-03T12:46:43Z",
                endDate: "2024-04-05T12:46:43Z"
            )
  /1/usage/{statistic}/{indexName}:
    get:
      operationId: getIndexUsage
      summary: Retrieve usage information for one index
      description: |
        Retrieves the selected usage statistics for one index.
      parameters:
        - $ref: '#/components/parameters/statisticParameter'
        - $ref: '#/components/parameters/IndexName'
        - $ref: '#/components/parameters/StartDateRequired'
        - $ref: '#/components/parameters/EndDateRequired'
        - $ref: '#/components/parameters/granularityParameter'
      responses:
        '200':
          $ref: '#/components/responses/Success'
        '400':
          $ref: '#/components/responses/InvalidRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/IndexNotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: >
            // Initialize the client

            var client = new UsageClient(new UsageConfig("YOUR_APP_ID",
            "YOUR_API_KEY"));


            // Call the API

            var response = await client.GetIndexUsageAsync(
              Enum.Parse<Statistic>("QueriesOperations"),
              "<YOUR_INDEX_NAME>",
              "2024-04-03T12:46:43Z",
              "2024-04-05T12:46:43Z"
            );
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := usage.NewClient("YOUR_APP_ID", "YOUR_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetIndexUsage(client.NewApiGetIndexUsageRequest(
              usage.Statistic("queries_operations"), "<YOUR_INDEX_NAME>", "2024-04-03T12:46:43Z", "2024-04-05T12:46:43Z",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            UsageClient client = new UsageClient("YOUR_APP_ID", "YOUR_API_KEY");


            // Call the API

            client.getIndexUsage(Statistic.QUERIES_OPERATIONS,
            "<YOUR_INDEX_NAME>", "2024-04-03T12:46:43Z",
            "2024-04-05T12:46:43Z");
        - lang: javascript
          label: JavaScript
          source: |
            // Initialize the client
            const client = usageClient('YOUR_APP_ID', 'YOUR_API_KEY');

            // Call the API
            const response = await client.getIndexUsage({
              statistic: 'queries_operations',
              indexName: 'myIndexName',
              startDate: '2024-04-03T12:46:43Z',
              endDate: '2024-04-05T12:46:43Z',
            });

            // use typed response
            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            var response = client.getIndexUsage(
              statistic = Statistic.entries.first { it.value == "queries_operations" },
              indexName = "<YOUR_INDEX_NAME>",
              startDate = "2024-04-03T12:46:43Z",
              endDate = "2024-04-05T12:46:43Z",
            )


            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: |
            // Initialize the client
            $client = UsageClient::create('<YOUR_APP_ID>', '<YOUR_API_KEY>');

            // Call the API
            $response = $client->getIndexUsage(
                'queries_operations',
                '<YOUR_INDEX_NAME>',
                '2024-04-03T12:46:43Z',
                '2024-04-05T12:46:43Z',
            );

            // play with the response
            var_dump($response);
        - lang: python
          label: Python
          source: |
            # Initialize the client
            _client = UsageClient("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = await _client.get_index_usage(
                statistic="queries_operations",
                index_name="<YOUR_INDEX_NAME>",
                start_date="2024-04-03T12:46:43Z",
                end_date="2024-04-05T12:46:43Z",
            )

            # use the class directly
            print(response)

            # print the JSON response
            print(response.to_json())
        - lang: ruby
          label: Ruby
          source: |
            # Initialize the client
            client = Algolia::UsageClient.create("YOUR_APP_ID", "YOUR_API_KEY")

            # Call the API
            response = client.get_index_usage(
              "queries_operations",
              "<YOUR_INDEX_NAME>",
              "2024-04-03T12:46:43Z",
              "2024-04-05T12:46:43Z"
            )

            # use the class directly
            puts(response)

            # print the JSON response
            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = UsageClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY")


            // Call the API

            val response = client.getIndexUsage(
              statistic = Statistic.withName("queries_operations"),
              indexName = "<YOUR_INDEX_NAME>",
              startDate = "2024-04-03T12:46:43Z",
              endDate = "2024-04-05T12:46:43Z"
            )


            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try UsageClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY")


            // Call the API

            let response = try await client.getIndexUsage(
                statistic: Statistic.queriesOperations,
                indexName: "<YOUR_INDEX_NAME>",
                startDate: "2024-04-03T12:46:43Z",
                endDate: "2024-04-05T12:46:43Z"
            )
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: x-algolia-application-id
      description: Your Algolia application ID.
    apiKey:
      type: apiKey
      in: header
      name: x-algolia-api-key
      description: >
        Your Algolia API key with the necessary permissions to make the request.

        Permissions are controlled through access control lists (ACL) and access
        restrictions.

        The required ACL to make a request is listed in each endpoint's
        reference.
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    statisticParameter:
      name: statistic
      in: path
      required: true
      schema:
        $ref: '#/components/schemas/Statistic'
      example: records,max_qps,region_max_qps
      description: >
        Usage statistics to retrieve.


        Use `*` to retrieve all usage metrics, otherwise add one or more of the
        following metrics, separated by a comma.


        **Search operations**


        - `search_operations`. All search operations.

        - `total_search_operations`: Sum of all search operations.

        - `total_search_requests`: Sum of all [search
        requests](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-).
           The number of billed search requests is equal to this value minus `querysuggestions_total_search_requests`.
        - `queries_operations`. Number of [single index
        search](/specs/search#tag/Search/operation/searchSingleIndex)
        operations.

        - `multi_queries_operations`. Number of [multi-index
        search](/specs/search#tag/Search/operation/search) operations.


        **ACL operations**


        - `acl_operations`. All ACL operations.

        - `total_acl_operations`. Sum of all ACL operations.

        - `get_api_keys_operations`. Number of [list API
        keys](/specs/search#tag/Api-Keys/operation/listApiKeys) operations.

        - `get_api_key_operations`. Number of [get API key
        permission](/specs/search#tag/Api-Keys/operation/getApiKey) operations.

        - `add_api_key_operations`. Number of [create API
        key](/specs/search#tag/Api-Keys/operation/addApiKey) operations.

        - `update_api_key_operations`. Number of [update API
        key](/specs/search#tag/Api-Keys/operation/updateApiKey) operations.

        - `delete_api_key_operations`. Number of [delete API
        key](/specs/search#tag/Api-Keys/operation/deleteApiKey) operations.

        - `list_api_key_operations`. Number of list index API keys operations.


        **Indexing operations**


        - `indexing_operations`. All indexing operations.

        - `total_indexing_operations`. Sum of all indexing operations.

        - `browse_operations`. Number of [browse
        index](/specs/search#tag/Search/operation/browse) operations.

        - `clear_index_operations`. Number of [clear
        records](/specs/search#tag/Records/operation/clearObjects) operations.

        - `copy_move_operations`. Number of [copy or move
        index](/specs/search#tag/Indices/operation/operationIndex) operations.

        - `delete_index_operations`. Number of [delete
        index](/specs/search#tag/Indices/operation/deleteIndex) operations.

        - `get_log_operations`. Number of [get
        logs](/specs/search#tag/Advanced/operation/getLogs) operations.

        - `get_settings_operations`. Number of [get
        settings](/specs/search#operation/getIndexUsage) operations.

        - `set_settings_operations`. Number of [set
        settings](/specs/search#tag/Indices/operation/setSettings) operations.

        - `list_indices_operations`. Number of [list
        indices](/specs/search#tag/Indices/operation/listIndices) operations.

        - `wait_task_operations`. Number of
        [wait](/specs/search#tag/Indices/operation/getTask) operations.


        **Record operations**


        - `record_operations`. All record operations.

        - `total_records_operations`. Sum of all record operations.

        - `add_record_operations`. Number of [add or replace
        record](/specs/search#tag/Records/operation/saveObject) operations.

        - `batch_operations`. Number of [batch
        indexing](/specs/search#tag/Records/operation/multipleBatch) operations.

        - `delete_by_query_operations`. Number of [delete by
        query](/specs/search#tag/Records/operation/deleteBy) operations.

        - `delete_record_operations`. Number of [delete
        record](/specs/search#tag/Records/operation/deleteObject) operations.

        - `get_record_operations`. Number of [get
        record](/specs/search#tag/Records/operation/getObject) operations.

        - `partial_update_record_operations`. Number of [partially update
        records](/specs/search#tag/Records/operation/partialUpdateObject)
        operations.

        - `update_record_operations`. Number of [add or replace record by
        objectID](/specs/search#tag/Records/operation/addOrUpdateObject)
        operations.


        **Synonym operations**


        - `synonym_operations`. All synonym operations.

        - `total_synonym_operations`. Sum of all synonym operations.

        - `batch_synonym_operations`. Number of [save all
        synonyms](/specs/search#tag/Synonyms/operation/saveSynonyms) operations.

        - `clear_synonym_operations`. Number of [clear
        synonyms](/specs/search#tag/Synonyms/operation/clearSynonyms)
        operations.

        - `delete_synonym_operations`. Number of [delete
        synonym](/specs/search#tag/Synonyms/operation/deleteSynonym) operations.

        - `get_synonym_operations`. Number of [get
        synonym](/specs/search#tag/Synonyms/operation/getSynonym) operations.

        - `query_synonym_operations`. Number of [search
        synonyms](/specs/search#tag/Synonyms/operation/searchSynonyms)
        operations.

        - `update_synonym_operations`. Number of [save a
        synonym](/specs/search#tag/Synonyms/operation/saveSynonym) operations.


        **Rule operations**


        - `rule_operations`. All rule operations.

        - `total_rules_operations`. Sum of all rule operations.

        - `batch_rules_operations`. Number of [batch
        rules](/specs/search#tag/Rules/operation/saveRules) operations.

        - `clear_rules_operations`. Number of [delete
        rule](/specs/search#tag/Rules/operation/deleteRule) operations.

        - `delete_rules_operations`. Number of [clear
        rules](/specs/search#tag/Rules/operation/clearRules) operations.

        - `get_rules_operations`. Number of [get
        rule](/specs/search#tag/Rules/operation/getRule) operations.

        - `save_rules_operations`. Number of [save
        rule](/specs/search#operation/getIndexUsage) operations.

        - `search_rules_operations`. Number of [search
        rules](/specs/search#tag/Rules/operation/searchRules) operations.


        **Total operations**


        - `total_recommend_requests`. Number of [Recommend
        requests](https://www.algolia.com/doc/guides/algolia-ai/recommend/)

        - `total_write_operations`. Number of Write operations

        - `total_read_operations`. Number of read operations

        - `total_operations`. Sum of all operations


        **Total Query Suggestions operations**


        Query Suggestions operations are a subset of `total_search_operations`.


        - `querysuggestions_total_search_operations`. Number of Query
        Suggestions search operations.

        - `querysuggestions_total_search_requests`. Number of Query Suggestions
        [search
        requests](https://support.algolia.com/hc/en-us/articles/4406981829777-How-does-Algolia-count-records-and-operations-).

        - `querysuggestions_total_acl_operations`. Sum of all Query Suggestions
        [ACL operations](#acl-operations).

        - `querysuggestions_total_indexing_operations`. Number of Query
        Suggestions [indexing operations](#indexing-operations).

        - `querysuggestions_total_records_operations`. Number of Query
        Suggestions [record operations](#record-operations).

        - `querysuggestions_total_synonym_operations`. Number of Query
        Suggestions [synonym operations](#synonym-operations).

        - `querysuggestions_total_rules_operations`. Number of Query Suggestions
        [Rule operations](#rule-operations).

        - `querysuggestions_total_write_operations`. Number of Query Suggestions
        Write operations.

        - `querysuggestions_total_read_operations`. Number of Query Suggestions
        Read operations.

        - `querysuggestions_total_operations`. Sum of all Query Suggestions
        operations.


        **Processing time**


        - `avg_processing_time`. Average processing time (in milliseconds).

        - `90p_processing_time`. 90th percentile of processing time (in
        milliseconds).

        - `99p_processing_time`. 99th percentile of processing time (in
        milliseconds).

        - `queries_above_last_ms_processing_time`. Number of queries that take
        one or more seconds to process.


        **Indices**


        - `records`. Number of records.

        - `data_size`. The size of the records (in bytes).

        - `file_size`. The size of the records _and_ index metadata (in bytes).


        **Maximum queries per second**


        - `max_qps`. [Maximum queries per
        second](https://support.algolia.com/hc/en-us/articles/4406975224721) per
        server.

        - `region_max_qps`. Maximum queries per second per region.

        - `total_max_qps`. Maximum queries per second across all servers.


        **Used search capacity**


        The following capacities are reported in percent:


        - `used_search_capacity`. Maximum search capacity used per server.

        - `avg_used_search_capacity`. Average search capacity used per server.

        - `region_used_search_capacity`. Maximum search capacity used per
        region.

        - `region_avg_used_search_capacity`. Average search capacity used per
        region.

        - `total_used_search_capacity`. Maximum search capacity used for all
        servers.

        - `total_avg_used_search_capacity`. Average used search capacity for all
        servers.


        **Degraded queries**


        Check the impact of [degraded
        queries](https://support.algolia.com/hc/en-us/articles/4406981934481).


        - `degraded_queries_ssd_used_queries_impacted`. Percentage of degraded
        queries due to the Algolia search engine having to read from the
        server's SSD.

        - `degraded_queries_ssd_used_seconds_impacted`. Percentage of seconds
        affected by `ssd_used` degraded queries.

        - `degraded_queries_max_capacity_queries_impacted`. Percentage of
        degraded queries due to all search threads being used.

        - `degraded_queries_max_capacity_seconds_impacted`. Percentage of
        seconds affected by `max_capacity` degraded queries.
    StartDateRequired:
      in: query
      name: startDate
      description: Start date of the period to analyze, in `YYYY-MM-DD` format.
      required: true
      schema:
        type: string
        example: '2022-09-19'
    EndDateRequired:
      in: query
      name: endDate
      description: End date of the period to analyze, in `YYYY-MM-DD` format.
      required: true
      schema:
        type: string
        example: '2023-01-21'
    granularityParameter:
      name: granularity
      in: query
      description: |
        Granularity of the aggregated metrics.

        - `hourly`: the maximum time range for hourly metrics is 7 days.
        - `daily`: the maximum time range for daily metrics is 365 days.
      schema:
        $ref: '#/components/schemas/granularity'
    IndexName:
      name: indexName
      in: path
      description: Name of the index on which to perform the operation.
      required: true
      schema:
        type: string
        example: YourIndexName
  schemas:
    ErrorBase:
      description: Error.
      type: object
      x-keep-model: true
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    Statistic:
      type: string
      enum:
        - '*'
        - search_operations
        - total_search_operations
        - total_search_requests
        - queries_operations
        - multi_queries_operations
        - acl_operations
        - total_acl_operations
        - get_api_keys_operations
        - get_api_key_operations
        - add_api_key_operations
        - update_api_key_operations
        - delete_api_key_operations
        - list_api_key_operations
        - indexing_operations
        - total_indexing_operations
        - browse_operations
        - clear_index_operations
        - copy_move_operations
        - delete_index_operations
        - get_log_operations
        - get_settings_operations
        - set_settings_operations
        - list_indices_operations
        - wait_task_operations
        - record_operations
        - total_records_operations
        - add_record_operations
        - batch_operations
        - delete_by_query_operations
        - delete_record_operations
        - get_record_operations
        - partial_update_record_operations
        - update_record_operations
        - synonym_operations
        - total_synonym_operations
        - batch_synonym_operations
        - clear_synonym_operations
        - delete_synonym_operations
        - get_synonym_operations
        - query_synonym_operations
        - update_synonym_operations
        - rule_operations
        - total_rules_operations
        - batch_rules_operations
        - clear_rules_operations
        - delete_rules_operations
        - get_rules_operations
        - save_rules_operations
        - search_rules_operations
        - total_recommend_requests
        - total_write_operations
        - total_read_operations
        - total_operations
        - querysuggestions_total_search_operations
        - querysuggestions_total_search_requests
        - querysuggestions_total_acl_operations
        - querysuggestions_total_indexing_operations
        - querysuggestions_total_records_operations
        - querysuggestions_total_synonym_operations
        - querysuggestions_total_rules_operations
        - querysuggestions_total_write_operations
        - querysuggestions_total_read_operations
        - querysuggestions_total_operations
        - avg_processing_time
        - 90p_processing_time
        - 99p_processing_time
        - queries_above_last_ms_processing_time
        - records
        - data_size
        - file_size
        - max_qps
        - region_max_qps
        - total_max_qps
        - used_search_capacity
        - avg_used_search_capacity
        - region_used_search_capacity
        - region_avg_used_search_capacity
        - total_used_search_capacity
        - total_avg_used_search_capacity
        - degraded_queries_ssd_used_queries_impacted
        - degraded_queries_ssd_used_seconds_impacted
        - degraded_queries_max_capacity_queries_impacted
        - degraded_queries_max_capacity_seconds_impacted
    granularity:
      type: string
      enum:
        - hourly
        - daily
      default: daily
    statisticValue:
      oneOf:
        - type: integer
          description: Value of the metric.
        - type: object
          additionalProperties:
            type: integer
            description: Value per server or region of the metric.
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    Success:
      description: OK
      content:
        application/json:
          schema:
            title: indexUsage
            type: object
            properties:
              statistics:
                type: array
                items:
                  title: statisticEntry
                  type: object
                  properties:
                    t:
                      type: integer
                      description: >-
                        Timestamp, measured in milliseconds since the Unix
                        epoch.
                      example: 1455451200000
                    v:
                      description: Value of the statistics.
                      $ref: '#/components/schemas/statisticValue'
    InvalidRequest:
      description: Invalid request.
      content:
        application/json:
          schema:
            title: invalidRequest
            type: object
            properties:
              error:
                title: invalidRequestError
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      title: errorItem
                      type: object
                      properties:
                        code:
                          type: string
                        message:
                          type: string
                        line:
                          type: integer
                        position:
                          type: integer
                      required:
                        - message
                      example:
                        message: url is not defined
                        line: 5
                example:
                  code: malformed_id
            required:
              - error
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    Forbidden:
      description: Invalid credentials.
      content:
        application/json:
          schema:
            title: forbidden
            type: object
            properties:
              error:
                title: forbiddenError
                type: object
                properties:
                  code:
                    type: string
                  message:
                    type: string
                  errors:
                    type: array
                    items:
                      title: errorItem
                      type: object
                      properties:
                        code:
                          type: string
                        message:
                          type: string
                        line:
                          type: integer
                        position:
                          type: integer
                      required:
                        - message
                      example:
                        message: url is not defined
                        line: 5
                example:
                  code: malformed_id
            required:
              - error
    UnprocessableEntity:
      description: Unprocessable Entity.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
