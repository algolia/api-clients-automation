openapi: 3.0.2
info:
  title: Ingestion API
  description: API powering the Data Ingestion connectors of Algolia.
  version: '1.0'
servers:
  - url: https://data.{region}.algolia.com
    variables:
      region:
        enum:
          - eu
          - us
        default: us
security:
  - appId: []
    apiKey: []
tags:
  - name: authentications
    x-displayName: Authentications
    description: >-
      An authentication describe the way we connect to Algolia, or any supported
      connector.
  - name: destinations
    x-displayName: Destinations
    description: >-
      A destination refers to an Algolia product (Search, Insight, Recommend,
      ...).
  - name: observability
    x-displayName: Observability
    description: The observability API associates a run to a task execution.
  - name: sources
    x-displayName: Sources
    description: A source describe the platform informations.
  - name: tasks
    x-displayName: Tasks
    description: >-
      A Task describe how we fetch the data (onDemand, schedule, subscription)
      from a source and how we index it on the Algolia side.
paths:
  /{path}:
    get:
      operationId: customGet
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomGetAsync("test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomGet(client.NewApiCustomGetRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customGet("test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customGet({ path: 'test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customGet(
              path = "test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customGet(
                'test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_get(
                path="test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_get("test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.customGet[JObject](
              path = "test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customGet(path: "test/minimal")
    post:
      operationId: customPost
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomPostAsync("test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomPost(client.NewApiCustomPostRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customPost("test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customPost({ path: 'test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customPost(
              path = "test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customPost(
                'test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_post(
                path="test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_post("test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.customPost[JObject](
              path = "test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customPost(path: "test/minimal")
    put:
      operationId: customPut
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomPutAsync("test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomPut(client.NewApiCustomPutRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customPut("test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customPut({ path: 'test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customPut(
              path = "test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customPut(
                'test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_put(
                path="test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_put("test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.customPut[JObject](
              path = "test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customPut(path: "test/minimal")
    delete:
      operationId: customDelete
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomDeleteAsync("test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customDelete("test/minimal");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.customDelete({ path: 'test/minimal'
            });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customDelete(
              path = "test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customDelete(
                'test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_delete(
                path="test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_delete("test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.customDelete[JObject](
              path = "test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customDelete(path: "test/minimal")
  /1/authentications:
    get:
      tags:
        - authentications
      summary: Get a list of authentications.
      description: >-
        Get a list of authentications for the given query parameters, with
        pagination details.
      operationId: getAuthentications
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/platform'
        - $ref: '#/components/parameters/sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listAuthenticationsResponse
                type: object
                additionalProperties: false
                properties:
                  authentications:
                    type: array
                    items:
                      $ref: '#/components/schemas/Authentication'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - authentications
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetAuthenticationsAsync();
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetAuthentications(client.NewApiGetAuthenticationsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getAuthentications();
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getAuthentications();

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getAuthentications()


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getAuthentications();


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_authentications()


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_authentications


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getAuthentications(

            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getAuthentications()
    post:
      tags:
        - authentications
      summary: Create a authentication.
      description: Create a authentication.
      operationId: createAuthentication
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CreateAuthenticationAsync(
              new AuthenticationCreate
              {
                Type = Enum.Parse<AuthenticationType>("Oauth"),
                Name = "authName",
                Input = new AuthInput(
                  new AuthOAuth
                  {
                    Url = "http://test.oauth",
                    ClientId = "myID",
                    ClientSecret = "mySecret",
                  }
                ),
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.CreateAuthentication(client.NewApiCreateAuthenticationRequest(

              ingestion.NewEmptyAuthenticationCreate().SetType(ingestion.AuthenticationType("oauth")).SetName("authName").SetInput(ingestion.AuthOAuthAsAuthInput(
                ingestion.NewEmptyAuthOAuth().SetUrl("http://test.oauth").SetClientId("myID").SetClientSecret("mySecret"))),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.createAuthentication(
              new AuthenticationCreate()
                .setType(AuthenticationType.fromValue("oauth"))
                .setName("authName")
                .setInput(new AuthOAuth().setUrl("http://test.oauth").setClientId("myID").setClientSecret("mySecret"))
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.createAuthentication({
              type: 'oauth',
              name: 'authName',
              input: {
                url: 'http://test.oauth',
                client_id: 'myID',
                client_secret: 'mySecret',
              },
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.createAuthentication(
              authenticationCreate = AuthenticationCreate(
                type = AuthenticationType.entries.first { it.value == "oauth" },
                name = "authName",
                input = AuthOAuth(
                  url = "http://test.oauth",
                  clientId = "myID",
                  clientSecret = "mySecret",
                ),
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->createAuthentication(
                ['type' => 'oauth',
                    'name' => 'authName',
                    'input' => ['url' => 'http://test.oauth',
                        'client_id' => 'myID',
                        'client_secret' => 'mySecret',
                    ],
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.create_authentication(
                authentication_create={
                    "type": "oauth",
                    "name": "authName",
                    "input": {
                        "url": "http://test.oauth",
                        "client_id": "myID",
                        "client_secret": "mySecret",
                    },
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.create_authentication(
              AuthenticationCreate.new(
                type: 'oauth',
                name: "authName",
                input: AuthOAuth.new(url: "http://test.oauth", client_id: "myID", client_secret: "mySecret")
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.createAuthentication(
              authenticationCreate = AuthenticationCreate(
                `type` = AuthenticationType.withName("oauth"),
                name = "authName",
                input = AuthOAuth(
                  url = "http://test.oauth",
                  client_id = "myID",
                  client_secret = "mySecret"
                )
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.createAuthentication(authenticationCreate:
            AuthenticationCreate(
                type: AuthenticationType.oauth,
                name: "authName",
                input: AuthInput.authOAuth(AuthOAuth(url: "http://test.oauth", clientId: "myID", clientSecret: "mySecret"))
            ))
  /1/authentications/search:
    post:
      tags:
        - authentications
      summary: Search among authentications.
      description: Search among authentications with a defined set of parameters.
      operationId: searchAuthentications
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchAuthenticationsResponse
                type: array
                items:
                  $ref: '#/components/schemas/Authentication'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.SearchAuthenticationsAsync(
              new AuthenticationSearch
              {
                AuthenticationIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a"
                },
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.SearchAuthentications(client.NewApiSearchAuthenticationsRequest(

              ingestion.NewEmptyAuthenticationSearch().SetAuthenticationIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"}),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.searchAuthentications(
              new AuthenticationSearch()
                .setAuthenticationIDs(List.of("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"))
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.searchAuthentications({
              authenticationIDs: [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
              ],
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.searchAuthentications(
              authenticationSearch = AuthenticationSearch(
                authenticationIDs = listOf("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"),
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->searchAuthentications(
                ['authenticationIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                ],
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.search_authentications(
                authentication_search={
                    "authenticationIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    ],
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.search_authentications(
              AuthenticationSearch.new(
                authentication_ids: [
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"
                ]
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.searchAuthentications(
              authenticationSearch = AuthenticationSearch(
                authenticationIDs = Seq("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.searchAuthentications(authenticationSearch:
            AuthenticationSearch(authenticationIDs: [
                "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
            ]))
  /1/authentications/{authenticationID}:
    get:
      tags:
        - authentications
      summary: Get a authentication.
      description: Get the authentication of the given authenticationID.
      operationId: getAuthentication
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Authentication'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.GetAuthenticationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetAuthentication(client.NewApiGetAuthenticationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getAuthentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getAuthentication({
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getAuthentication(
              authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getAuthentication(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_authentication(
                authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp =
            client.get_authentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getAuthentication(
              authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getAuthentication(authenticationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
    patch:
      tags:
        - authentications
      summary: Update a authentication.
      description: Update the authentication of the given authenticationID.
      operationId: updateAuthentication
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticationUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.UpdateAuthenticationAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new AuthenticationUpdate { Name = "newName", }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.UpdateAuthentication(client.NewApiUpdateAuthenticationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyAuthenticationUpdate().SetName("newName"),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.updateAuthentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            new AuthenticationUpdate().setName("newName"));
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.updateAuthentication({
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              authenticationUpdate: { name: 'newName' },
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.updateAuthentication(
              authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              authenticationUpdate = AuthenticationUpdate(
                name = "newName",
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->updateAuthentication(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['name' => 'newName',
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.update_authentication(
                authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                authentication_update={
                    "name": "newName",
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.update_authentication(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              AuthenticationUpdate.new(name: "newName")
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.updateAuthentication(
              authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              authenticationUpdate = AuthenticationUpdate(
                name = Some("newName")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.updateAuthentication(
                authenticationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                authenticationUpdate: AuthenticationUpdate(name: "newName")
            )
    delete:
      tags:
        - authentications
      summary: Delete a authentication.
      description: Soft delete the authentication of the given authenticationID.
      operationId: deleteAuthentication
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathAuthenticationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.DeleteAuthenticationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.DeleteAuthentication(client.NewApiDeleteAuthenticationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.deleteAuthentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.deleteAuthentication({
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.deleteAuthentication(
              authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->deleteAuthentication(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.delete_authentication(
                authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp =
            client.delete_authentication("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.deleteAuthentication(
              authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.deleteAuthentication(authenticationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/destinations:
    get:
      tags:
        - destinations
      summary: Get a list of destinations.
      description: >-
        Get a list of destinations for the given query parameters, with
        pagination details.
      operationId: getDestinations
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/destinationParameters_type'
        - $ref: '#/components/parameters/authenticationID'
        - $ref: '#/components/parameters/destinationParameters_sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listDestinationsResponse
                type: object
                additionalProperties: false
                properties:
                  destinations:
                    type: array
                    items:
                      $ref: '#/components/schemas/Destination'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - destinations
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetDestinationsAsync();
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetDestinations(client.NewApiGetDestinationsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getDestinations();
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getDestinations();

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getDestinations()


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getDestinations();


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_destinations()


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_destinations


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getDestinations(

            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getDestinations()
    post:
      tags:
        - destinations
      summary: Create a destination.
      description: Create a destination.
      operationId: createDestination
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestinationCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CreateDestinationAsync(
              new DestinationCreate
              {
                Type = Enum.Parse<DestinationType>("Search"),
                Name = "destinationName",
                Input = new DestinationInput(new DestinationIndexPrefix { IndexPrefix = "prefix_", }),
                AuthenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.CreateDestination(client.NewApiCreateDestinationRequest(

              ingestion.NewEmptyDestinationCreate().SetType(ingestion.DestinationType("search")).SetName("destinationName").SetInput(ingestion.DestinationIndexPrefixAsDestinationInput(
                ingestion.NewEmptyDestinationIndexPrefix().SetIndexPrefix("prefix_"))).SetAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.createDestination(
              new DestinationCreate()
                .setType(DestinationType.fromValue("search"))
                .setName("destinationName")
                .setInput(new DestinationIndexPrefix().setIndexPrefix("prefix_"))
                .setAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.createDestination({
              type: 'search',
              name: 'destinationName',
              input: { indexPrefix: 'prefix_' },
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.createDestination(
              destinationCreate = DestinationCreate(
                type = DestinationType.entries.first { it.value == "search" },
                name = "destinationName",
                input = DestinationIndexPrefix(
                  indexPrefix = "prefix_",
                ),
                authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->createDestination(
                ['type' => 'search',
                    'name' => 'destinationName',
                    'input' => ['indexPrefix' => 'prefix_',
                    ],
                    'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.create_destination(
                destination_create={
                    "type": "search",
                    "name": "destinationName",
                    "input": {
                        "indexPrefix": "prefix_",
                    },
                    "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.create_destination(
              DestinationCreate.new(
                type: 'search',
                name: "destinationName",
                input: DestinationIndexPrefix.new(index_prefix: "prefix_"),
                authentication_id: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.createDestination(
              destinationCreate = DestinationCreate(
                `type` = DestinationType.withName("search"),
                name = "destinationName",
                input = DestinationIndexPrefix(
                  indexPrefix = "prefix_"
                ),
                authenticationID = Some("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.createDestination(destinationCreate:
            DestinationCreate(
                type: DestinationType.search,
                name: "destinationName",
                input: DestinationInput.destinationIndexPrefix(DestinationIndexPrefix(indexPrefix: "prefix_")),
                authenticationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            ))
  /1/destinations/search:
    post:
      tags:
        - destinations
      summary: Search among destinations.
      description: Search among destinations with a defined set of parameters.
      operationId: searchDestinations
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchDestinationsResponse
                type: array
                items:
                  $ref: '#/components/schemas/Destination'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.SearchDestinationsAsync(
              new DestinationSearch
              {
                DestinationIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a"
                },
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.SearchDestinations(client.NewApiSearchDestinationsRequest(

              ingestion.NewEmptyDestinationSearch().SetDestinationIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"}),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.searchDestinations(
              new DestinationSearch().setDestinationIDs(List.of("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"))
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.searchDestinations({
              destinationIDs: [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
              ],
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.searchDestinations(
              destinationSearch = DestinationSearch(
                destinationIDs = listOf("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"),
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->searchDestinations(
                ['destinationIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                ],
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.search_destinations(
                destination_search={
                    "destinationIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    ],
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.search_destinations(
              DestinationSearch.new(
                destination_ids: [
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"
                ]
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.searchDestinations(
              destinationSearch = DestinationSearch(
                destinationIDs = Seq("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.searchDestinations(destinationSearch:
            DestinationSearch(destinationIDs: [
                "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
            ]))
  /1/destinations/{destinationID}:
    get:
      tags:
        - destinations
      summary: Get a destination.
      description: Get the destination of the given destinationID.
      operationId: getDestination
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Destination'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.GetDestinationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetDestination(client.NewApiGetDestinationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getDestination("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getDestination({
              destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getDestination(
              destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getDestination(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_destination(
                destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp =
            client.get_destination("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getDestination(
              destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getDestination(destinationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
    patch:
      tags:
        - destinations
      summary: Update a destination.
      description: Update the destination of the given destinationID.
      operationId: updateDestination
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DestinationUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DestinationUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.UpdateDestinationAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new DestinationUpdate { Name = "newName", }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.UpdateDestination(client.NewApiUpdateDestinationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyDestinationUpdate().SetName("newName"),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.updateDestination("6c02aeb1-775e-418e-870b-1faccd4b2c0f", new
            DestinationUpdate().setName("newName"));
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.updateDestination({
              destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              destinationUpdate: { name: 'newName' },
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.updateDestination(
              destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              destinationUpdate = DestinationUpdate(
                name = "newName",
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->updateDestination(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['name' => 'newName',
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.update_destination(
                destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                destination_update={
                    "name": "newName",
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.update_destination(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              DestinationUpdate.new(name: "newName")
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.updateDestination(
              destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              destinationUpdate = DestinationUpdate(
                name = Some("newName")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.updateDestination(
                destinationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                destinationUpdate: DestinationUpdate(name: "newName")
            )
    delete:
      tags:
        - destinations
      summary: Delete a destination.
      description: Soft delete the destination of the given destinationID.
      operationId: deleteDestination
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathDestinationID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.DeleteDestinationAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.DeleteDestination(client.NewApiDeleteDestinationRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.deleteDestination("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.deleteDestination({
              destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.deleteDestination(
              destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->deleteDestination(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.delete_destination(
                destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp =
            client.delete_destination("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.deleteDestination(
              destinationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.deleteDestination(destinationID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/sources:
    get:
      tags:
        - sources
      summary: Get a list of sources.
      description: >-
        Get a list of sources for the given query parameters, with pagination
        details.
      operationId: getSources
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/sourceParameters_type'
        - $ref: '#/components/parameters/sourceParameters_authenticationID'
        - $ref: '#/components/parameters/sourceParameters_sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listSourcesResponse
                type: object
                additionalProperties: false
                properties:
                  sources:
                    type: array
                    items:
                      $ref: '#/components/schemas/Source'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - sources
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetSourcesAsync();
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetSources(client.NewApiGetSourcesRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getSources();
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getSources();

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getSources()


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getSources();


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_sources()


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_sources


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getSources(

            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getSources()
    post:
      tags:
        - sources
      summary: Create a source.
      description: Create a source.
      operationId: createSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CreateSourceAsync(
              new SourceCreate
              {
                Type = Enum.Parse<SourceType>("Commercetools"),
                Name = "sourceName",
                Input = new SourceInput(
                  new SourceCommercetools
                  {
                    StoreKeys = new List<string> { "myStore" },
                    Locales = new List<string> { "de" },
                    Url = "http://commercetools.com",
                    ProjectKey = "keyID",
                  }
                ),
                AuthenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CreateSource(client.NewApiCreateSourceRequest(

              ingestion.NewEmptySourceCreate().SetType(ingestion.SourceType("commercetools")).SetName("sourceName").SetInput(ingestion.SourceCommercetoolsAsSourceInput(
                ingestion.NewEmptySourceCommercetools().SetStoreKeys(
                  []string{"myStore"}).SetLocales(
                  []string{"de"}).SetUrl("http://commercetools.com").SetProjectKey("keyID"))).SetAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f"),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.createSource(
              new SourceCreate()
                .setType(SourceType.fromValue("commercetools"))
                .setName("sourceName")
                .setInput(
                  new SourceCommercetools()
                    .setStoreKeys(List.of("myStore"))
                    .setLocales(List.of("de"))
                    .setUrl("http://commercetools.com")
                    .setProjectKey("keyID")
                )
                .setAuthenticationID("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.createSource({
              type: 'commercetools',
              name: 'sourceName',
              input: {
                storeKeys: ['myStore'],
                locales: ['de'],
                url: 'http://commercetools.com',
                projectKey: 'keyID',
              },
              authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.createSource(
              sourceCreate = SourceCreate(
                type = SourceType.entries.first { it.value == "commercetools" },
                name = "sourceName",
                input = SourceCommercetools(
                  storeKeys = listOf("myStore"),
                  locales = listOf("de"),
                  url = "http://commercetools.com",
                  projectKey = "keyID",
                ),
                authenticationID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->createSource(
                ['type' => 'commercetools',
                    'name' => 'sourceName',
                    'input' => ['storeKeys' => [
                        'myStore',
                    ],
                        'locales' => [
                            'de',
                        ],
                        'url' => 'http://commercetools.com',
                        'projectKey' => 'keyID',
                    ],
                    'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.create_source(
                source_create={
                    "type": "commercetools",
                    "name": "sourceName",
                    "input": {
                        "storeKeys": [
                            "myStore",
                        ],
                        "locales": [
                            "de",
                        ],
                        "url": "http://commercetools.com",
                        "projectKey": "keyID",
                    },
                    "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.create_source(
              SourceCreate.new(
                type: 'commercetools',
                name: "sourceName",
                input: SourceCommercetools.new(
                  store_keys: ["myStore"],
                  locales: ["de"],
                  url: "http://commercetools.com",
                  project_key: "keyID"
                ),
                authentication_id: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.createSource(
              sourceCreate = SourceCreate(
                `type` = SourceType.withName("commercetools"),
                name = "sourceName",
                input = SourceCommercetools(
                  storeKeys = Some(Seq("myStore")),
                  locales = Some(Seq("de")),
                  url = "http://commercetools.com",
                  projectKey = "keyID"
                ),
                authenticationID = Some("6c02aeb1-775e-418e-870b-1faccd4b2c0f")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.createSource(sourceCreate: SourceCreate(
                type: SourceType.commercetools,
                name: "sourceName",
                input: SourceInput.sourceCommercetools(SourceCommercetools(
                    storeKeys: ["myStore"],
                    locales: ["de"],
                    url: "http://commercetools.com",
                    projectKey: "keyID"
                )),
                authenticationID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            ))
  /1/sources/search:
    post:
      tags:
        - sources
      summary: Search among sources.
      description: Search among sources with a defined set of parameters.
      operationId: searchSources
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchSourcesResponse
                type: array
                items:
                  $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.SearchSourcesAsync(
              new SourceSearch
              {
                SourceIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a"
                },
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.SearchSources(client.NewApiSearchSourcesRequest(

              ingestion.NewEmptySourceSearch().SetSourceIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"}),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.searchSources(
              new SourceSearch().setSourceIDs(List.of("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"))
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.searchSources({
              sourceIDs: [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
              ],
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.searchSources(
              sourceSearch = SourceSearch(
                sourceIDs = listOf("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"),
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->searchSources(
                ['sourceIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                ],
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.search_sources(
                source_search={
                    "sourceIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    ],
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.search_sources(
              SourceSearch.new(
                source_ids: [
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"
                ]
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.searchSources(
              sourceSearch = SourceSearch(
                sourceIDs = Seq("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.searchSources(sourceSearch:
            SourceSearch(sourceIDs: [
                "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
            ]))
  /1/sources/{sourceID}:
    get:
      tags:
        - sources
      summary: Get a source.
      description: Get the source of the given sourceID.
      operationId: getSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.GetSourceAsync("75eeb306-51d3-4e5e-a279-3c92bd8893ac");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetSource(client.NewApiGetSourceRequest(
              "75eeb306-51d3-4e5e-a279-3c92bd8893ac",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getSource("75eeb306-51d3-4e5e-a279-3c92bd8893ac");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getSource({
              sourceID: '75eeb306-51d3-4e5e-a279-3c92bd8893ac',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getSource(
              sourceID = "75eeb306-51d3-4e5e-a279-3c92bd8893ac",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getSource(
                '75eeb306-51d3-4e5e-a279-3c92bd8893ac',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_source(
                source_id="75eeb306-51d3-4e5e-a279-3c92bd8893ac",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_source("75eeb306-51d3-4e5e-a279-3c92bd8893ac")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getSource(
              sourceID = "75eeb306-51d3-4e5e-a279-3c92bd8893ac"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getSource(sourceID:
            "75eeb306-51d3-4e5e-a279-3c92bd8893ac")
    patch:
      tags:
        - sources
      summary: Update a source.
      description: Update the source of the given sourceID.
      operationId: updateSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SourceUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SourceUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.UpdateSourceAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new SourceUpdate { Name = "newName", }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.UpdateSource(client.NewApiUpdateSourceRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptySourceUpdate().SetName("newName"),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.updateSource("6c02aeb1-775e-418e-870b-1faccd4b2c0f", new
            SourceUpdate().setName("newName"));
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.updateSource({
              sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              sourceUpdate: { name: 'newName' },
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.updateSource(
              sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              sourceUpdate = SourceUpdate(
                name = "newName",
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->updateSource(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['name' => 'newName',
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.update_source(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                source_update={
                    "name": "newName",
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.update_source(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              SourceUpdate.new(name: "newName")
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.updateSource(
              sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              sourceUpdate = SourceUpdate(
                name = Some("newName")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.updateSource(
                sourceID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                sourceUpdate: SourceUpdate(name: "newName")
            )
    delete:
      tags:
        - sources
      summary: Delete a source.
      description: Soft delete the source of the given sourceID.
      operationId: deleteSource
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.DeleteSourceAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.DeleteSource(client.NewApiDeleteSourceRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.deleteSource("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.deleteSource({
              sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.deleteSource(
              sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->deleteSource(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.delete_source(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.delete_source("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.deleteSource(
              sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.deleteSource(sourceID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/sources/{sourceID}/discover:
    get:
      tags:
        - sources
      summary: Retrieve a stream listing.
      description: >-
        Retrieve a stream listing for a given Singer specification compatible
        docker type source ID.
      operationId: getDockerSourceStreams
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: dockerSourceStreams
                type: object
                additionalProperties: false
                properties:
                  streams:
                    type: array
                    items:
                      $ref: '#/components/schemas/DockerSourceStream'
                required:
                  - streams
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.GetDockerSourceStreamsAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetDockerSourceStreams(client.NewApiGetDockerSourceStreamsRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getDockerSourceStreams("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getDockerSourceStreams({
              sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getDockerSourceStreams(
              sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getDockerSourceStreams(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_docker_source_streams(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp =
            client.get_docker_source_streams("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getDockerSourceStreams(
              sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getDockerSourceStreams(sourceID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
    post:
      tags:
        - sources
      summary: Trigger a stream listing request.
      description: >-
        Trigger a stream listing request for a Singer specification compatible
        docker type source.
      operationId: triggerDockerSourceDiscover
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathSourceID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: dockerSourceDiscover
                type: object
                additionalProperties: false
                properties:
                  runID:
                    $ref: '#/components/schemas/runID'
                  createdAt:
                    $ref: '#/components/schemas/createdAt'
                required:
                  - runID
                  - createdAt
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.TriggerDockerSourceDiscoverAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.TriggerDockerSourceDiscover(client.NewApiTriggerDockerSourceDiscoverRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.triggerDockerSourceDiscover("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.triggerDockerSourceDiscover({
              sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.triggerDockerSourceDiscover(
              sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->triggerDockerSourceDiscover(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.trigger_docker_source_discover(
                source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp =
            client.trigger_docker_source_discover("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.triggerDockerSourceDiscover(
              sourceID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.triggerDockerSourceDiscover(sourceID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/tasks:
    get:
      tags:
        - tasks
      summary: Get a list of tasks.
      description: >-
        Get a list of tasks for the given query parameters, with pagination
        details.
      operationId: getTasks
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/action'
        - $ref: '#/components/parameters/enabled'
        - $ref: '#/components/parameters/sourceID'
        - $ref: '#/components/parameters/destinationID'
        - $ref: '#/components/parameters/triggerType'
        - $ref: '#/components/parameters/taskParameters_sort'
        - $ref: '#/components/parameters/order'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listTasksResponse
                type: object
                description: A list of tasks with pagination details.
                additionalProperties: false
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                required:
                  - tasks
                  - pagination
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetTasksAsync();
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetTasks(client.NewApiGetTasksRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getTasks();
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getTasks();

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getTasks()


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getTasks();


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_tasks()


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_tasks


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getTasks(

            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getTasks()
    post:
      tags:
        - tasks
      summary: Create a task.
      description: Create a task.
      operationId: createTask
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskCreate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskCreateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CreateTaskAsync(
              new TaskCreate
              {
                SourceID = "search",
                DestinationID = "destinationName",
                Trigger = new TaskCreateTrigger(
                  new OnDemandTriggerInput { Type = Enum.Parse<OnDemandTriggerType>("OnDemand"), }
                ),
                Action = Enum.Parse<ActionType>("Replace"),
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CreateTask(client.NewApiCreateTaskRequest(

              ingestion.NewEmptyTaskCreate().SetSourceID("search").SetDestinationID("destinationName").SetTrigger(ingestion.OnDemandTriggerInputAsTaskCreateTrigger(
                ingestion.NewEmptyOnDemandTriggerInput().SetType(ingestion.OnDemandTriggerType("onDemand")))).SetAction(ingestion.ActionType("replace")),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.createTask(
              new TaskCreate()
                .setSourceID("search")
                .setDestinationID("destinationName")
                .setTrigger(new OnDemandTriggerInput().setType(OnDemandTriggerType.fromValue("onDemand")))
                .setAction(ActionType.fromValue("replace"))
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.createTask({
              sourceID: 'search',
              destinationID: 'destinationName',
              trigger: { type: 'onDemand' },
              action: 'replace',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.createTask(
              taskCreate = TaskCreate(
                sourceID = "search",
                destinationID = "destinationName",
                trigger = OnDemandTriggerInput(
                  type = OnDemandTriggerType.entries.first { it.value == "onDemand" },
                ),
                action = ActionType.entries.first { it.value == "replace" },
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->createTask(
                ['sourceID' => 'search',
                    'destinationID' => 'destinationName',
                    'trigger' => ['type' => 'onDemand',
                    ],
                    'action' => 'replace',
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.create_task(
                task_create={
                    "sourceID": "search",
                    "destinationID": "destinationName",
                    "trigger": {
                        "type": "onDemand",
                    },
                    "action": "replace",
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.create_task(
              TaskCreate.new(
                source_id: "search",
                destination_id: "destinationName",
                trigger: OnDemandTriggerInput.new(type: 'onDemand'),
                action: 'replace'
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.createTask(
              taskCreate = TaskCreate(
                sourceID = "search",
                destinationID = "destinationName",
                trigger = OnDemandTriggerInput(
                  `type` = OnDemandTriggerType.withName("onDemand")
                ),
                action = ActionType.withName("replace")
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.createTask(taskCreate: TaskCreate(
                sourceID: "search",
                destinationID: "destinationName",
                trigger: TaskCreateTrigger.onDemandTriggerInput(OnDemandTriggerInput(type: OnDemandTriggerType.onDemand)),
                action: ActionType.replace
            ))
  /1/tasks/search:
    post:
      tags:
        - tasks
      summary: Search among tasks.
      description: Search among tasks with a defined set of parameters.
      operationId: searchTasks
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskSearch'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: searchTasksResponse
                type: array
                items:
                  $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.SearchTasksAsync(
              new TaskSearch
              {
                TaskIDs = new List<string>
                {
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                },
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.SearchTasks(client.NewApiSearchTasksRequest(

              ingestion.NewEmptyTaskSearch().SetTaskIDs(
                []string{"6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"}),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.searchTasks(
              new TaskSearch()
                .setTaskIDs(
                  List.of("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498")
                )
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.searchTasks({
              taskIDs: [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
              ],
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.searchTasks(
              taskSearch = TaskSearch(
                taskIDs = listOf("6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"),
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->searchTasks(
                ['taskIDs' => [
                    '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                    '947ac9c4-7e58-4c87-b1e7-14a68e99699a',

                    '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
                ],
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.search_tasks(
                task_search={
                    "taskIDs": [
                        "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                        "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                        "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                    ],
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.search_tasks(
              TaskSearch.new(
                task_ids: [
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a", "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                ]
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.searchTasks(
              taskSearch = TaskSearch(
                taskIDs = Seq(
                  "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                  "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                  "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
                )
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.searchTasks(taskSearch: TaskSearch(taskIDs: [
                "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
            ]))
  /1/tasks/{taskID}:
    get:
      tags:
        - tasks
      summary: Get a task.
      description: Get the task of the given taskID.
      operationId: getTask
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.GetTaskAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetTask(client.NewApiGetTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getTask({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_task("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getTask(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
    patch:
      tags:
        - tasks
      summary: Update a task.
      description: Update the task of the given taskID.
      operationId: updateTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskUpdate'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.UpdateTaskAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              new TaskUpdate { Enabled = false, }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.UpdateTask(client.NewApiUpdateTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              ingestion.NewEmptyTaskUpdate().SetEnabled(false),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.updateTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f", new
            TaskUpdate().setEnabled(false));
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.updateTask({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              taskUpdate: { enabled: false },
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.updateTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              taskUpdate = TaskUpdate(
                enabled = false,
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->updateTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                ['enabled' => false,
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.update_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                task_update={
                    "enabled": False,
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.update_task(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              TaskUpdate.new(enabled: false)
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.updateTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              taskUpdate = TaskUpdate(
                enabled = Some(false)
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.updateTask(
                taskID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                taskUpdate: TaskUpdate(enabled: false)
            )
    delete:
      tags:
        - tasks
      summary: Delete a task.
      description: Soft delete the task of the given taskID.
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.DeleteTaskAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.DeleteTask(client.NewApiDeleteTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.deleteTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.deleteTask({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.deleteTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->deleteTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.delete_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.delete_task("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.deleteTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.deleteTask(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/tasks/{taskID}/run:
    post:
      tags:
        - tasks
      summary: Run a task.
      description: Run the task of the given taskID.
      operationId: runTask
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.RunTaskAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.RunTask(client.NewApiRunTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.runTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.runTask({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.runTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->runTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.run_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.run_task("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.runTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.runTask(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/tasks/{taskID}/enable:
    put:
      tags:
        - tasks
      summary: Enable a task.
      description: Enable the task of the given taskID.
      operationId: enableTask
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.EnableTaskAsync("76ab4c2a-ce17-496f-b7a6-506dc59ee498");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.EnableTask(client.NewApiEnableTaskRequest(
              "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.enableTask("76ab4c2a-ce17-496f-b7a6-506dc59ee498");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.enableTask({
              taskID: '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.enableTask(
              taskID = "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->enableTask(
                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.enable_task(
                task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.enable_task("76ab4c2a-ce17-496f-b7a6-506dc59ee498")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.enableTask(
              taskID = "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.enableTask(taskID:
            "76ab4c2a-ce17-496f-b7a6-506dc59ee498")
  /1/tasks/{taskID}/disable:
    put:
      tags:
        - tasks
      summary: Disable a task.
      description: Disable the task of the given taskID.
      operationId: disableTask
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathTaskID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskUpdateResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.DisableTaskAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.DisableTask(client.NewApiDisableTaskRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.disableTask("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.disableTask({
              taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.disableTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->disableTask(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.disable_task(
                task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.disable_task("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.disableTask(
              taskID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.disableTask(taskID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/runs:
    get:
      tags:
        - observability
      summary: Get a list of runs.
      description: >-
        Get a list of runs for the given query parameters, with pagination
        details.
      operationId: getRuns
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/runStatus'
        - $ref: '#/components/parameters/taskID'
        - $ref: '#/components/parameters/runSort'
        - $ref: '#/components/parameters/order'
        - name: startDate
          in: query
          description: >-
            The start date (in RFC3339 format) of the runs fetching window.
            Defaults to 'now'-7 days if omitted.
          schema:
            type: string
        - name: endDate
          in: query
          description: >-
            The end date (in RFC3339 format) of the runs fetching window.
            Defaults to 'now' days if omitted.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetRunsAsync();
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetRuns(client.NewApiGetRunsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getRuns();
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getRuns();

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getRuns()


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getRuns();


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_runs()


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_runs


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getRuns(

            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getRuns()
  /1/runs/{runID}:
    get:
      tags:
        - observability
      summary: Get a run.
      description: Get a single run for the given ID.
      operationId: getRun
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathRunID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Run'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.GetRunAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetRun(client.NewApiGetRunRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getRun("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getRun({
              runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getRun(
              runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getRun(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_run(
                run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_run("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getRun(
              runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getRun(runID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/runs/{runID}/events:
    get:
      tags:
        - observability
      summary: Get a list of events.
      description: >-
        Get a list of events associated to the given runID, for the given query
        parameters.
      operationId: getEvents
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathRunID'
        - $ref: '#/components/parameters/itemsPerPage'
        - $ref: '#/components/parameters/page'
        - $ref: '#/components/parameters/eventStatus'
        - $ref: '#/components/parameters/eventType'
        - $ref: '#/components/parameters/eventSort'
        - $ref: '#/components/parameters/order'
        - name: startDate
          in: query
          description: >-
            The start date (in RFC3339 format) of the events fetching window.
            Defaults to 'now'-3 hours if omitted.
          schema:
            type: string
        - name: endDate
          in: query
          description: >-
            The end date (in RFC3339 format) of the events fetching window.
            Defaults to 'now' days if omitted.
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listEventsResponse
                type: object
                additionalProperties: false
                properties:
                  events:
                    type: array
                    items:
                      $ref: '#/components/schemas/Event'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
                  window:
                    $ref: '#/components/schemas/Window'
                required:
                  - events
                  - pagination
                  - window
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.GetEventsAsync("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetEvents(client.NewApiGetEventsRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getEvents("6c02aeb1-775e-418e-870b-1faccd4b2c0f");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getEvents({
              runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getEvents(
              runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getEvents(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_events(
                run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_events("6c02aeb1-775e-418e-870b-1faccd4b2c0f")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getEvents(
              runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getEvents(runID:
            "6c02aeb1-775e-418e-870b-1faccd4b2c0f")
  /1/runs/{runID}/events/{eventID}:
    get:
      tags:
        - observability
      summary: Get an event.
      description: Get a single event for a specific runID.
      operationId: getEvent
      x-acl:
        - addObject
        - deleteIndex
        - editSettings
      parameters:
        - $ref: '#/components/parameters/pathRunID'
        - $ref: '#/components/parameters/pathEventID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '400':
          $ref: '#/components/responses/BadRequest'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new IngestionClient(
              new IngestionConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetEventAsync(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              "6c02aeb1-775e-418e-870b-1faccd4b2c0c"
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            ingestion.YOUR_APP_ID_REGION

            client, err := ingestion.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            ingestion.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetEvent(client.NewApiGetEventRequest(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f", "6c02aeb1-775e-418e-870b-1faccd4b2c0c",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            IngestionClient client = new IngestionClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getEvent("6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            "6c02aeb1-775e-418e-870b-1faccd4b2c0c");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = ingestionClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getEvent({
              runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
              eventID: '6c02aeb1-775e-418e-870b-1faccd4b2c0c',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getEvent(
              runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              eventID = "6c02aeb1-775e-418e-870b-1faccd4b2c0c",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\IngestionClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getEvent(
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                '6c02aeb1-775e-418e-870b-1faccd4b2c0c',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = IngestionClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_event(
                run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                event_id="6c02aeb1-775e-418e-870b-1faccd4b2c0c",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::IngestionClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_event(
              "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              "6c02aeb1-775e-418e-870b-1faccd4b2c0c"
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = IngestionClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getEvent(
              runID = "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
              eventID = "6c02aeb1-775e-418e-870b-1faccd4b2c0c"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try IngestionClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getEvent(
                runID: "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                eventID: "6c02aeb1-775e-418e-870b-1faccd4b2c0c"
            )
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    itemsPerPage:
      name: itemsPerPage
      in: query
      description: The number of items per page to return.
      required: false
      schema:
        type: integer
    page:
      name: page
      in: query
      description: The page number to fetch, starting at 1.
      required: false
      schema:
        type: integer
    type:
      name: type
      in: query
      description: The type of the authentications to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/AuthenticationType'
        example: basic,oauth
    platform:
      name: platform
      in: query
      description: The platform of the authentications to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/platformWithNone'
        example: commercetools,none
    sort:
      name: sort
      in: query
      description: The key by which the list should be sorted.
      required: false
      schema:
        $ref: '#/components/schemas/authenticationSortKeys'
    order:
      name: order
      in: query
      description: The order of the returned list.
      required: false
      schema:
        $ref: '#/components/schemas/orderKeys'
    pathAuthenticationID:
      name: authenticationID
      in: path
      required: true
      description: The authentication UUID.
      schema:
        $ref: '#/components/schemas/authenticationID'
    destinationParameters_type:
      name: type
      in: query
      description: The type of the destinations to retrive.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/DestinationType'
        example: search
    authenticationID:
      name: authenticationID
      in: query
      description: The authenticationIDs of the destinations to retrive.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/authenticationID'
    destinationParameters_sort:
      name: sort
      in: query
      description: The key by which the list should be sorted.
      required: false
      schema:
        $ref: '#/components/schemas/destinationSortKeys'
    pathDestinationID:
      name: destinationID
      in: path
      required: true
      description: The destination UUID.
      schema:
        $ref: '#/components/schemas/destinationID'
    sourceParameters_type:
      name: type
      in: query
      description: The type of the sources to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/SourceType'
        example: commercetools,bigcommerce
    sourceParameters_authenticationID:
      name: authenticationID
      in: query
      description: >
        The authenticationIDs of the sources to retrieve. 'none' returns sources
        that doesn't have an authentication.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/authenticationID'
        example:
          - 10000000-0a75-4000-a000-000000000001
          - none
    sourceParameters_sort:
      name: sort
      in: query
      description: The key by which the list should be sorted.
      required: false
      schema:
        $ref: '#/components/schemas/sourceSortKeys'
    pathSourceID:
      name: sourceID
      in: path
      required: true
      description: The source UUID.
      schema:
        $ref: '#/components/schemas/sourceID'
    action:
      name: action
      in: query
      required: false
      description: The action of the tasks to retrieve.
      style: form
      explode: false
      schema:
        type: array
        description: An array of actions to perform on the Algolia index.
        items:
          $ref: '#/components/schemas/ActionType'
        example: save,replace,partial,append
    enabled:
      name: enabled
      in: query
      description: Whether the task is enabled or not.
      required: false
      schema:
        type: boolean
    sourceID:
      name: sourceID
      in: query
      description: The sourceIDs of the tasks to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/sourceID'
    destinationID:
      name: destinationID
      in: query
      description: The destinationIDs of the tasks to retrieve.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/destinationID'
    triggerType:
      name: triggerType
      in: query
      description: The trigger type of the task.
      required: false
      style: form
      explode: false
      schema:
        type: array
        items:
          $ref: '#/components/schemas/TriggerType'
        example: onDemand,schedule,subscription,streaming
    taskParameters_sort:
      name: sort
      in: query
      description: The key by which the list should be sorted.
      required: false
      schema:
        $ref: '#/components/schemas/taskSortKeys'
    pathTaskID:
      name: taskID
      in: path
      required: true
      description: The task UUID.
      schema:
        $ref: '#/components/schemas/taskID'
    runStatus:
      name: status
      in: query
      description: Filter the status of the runs.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/RunStatus'
    taskID:
      name: taskID
      in: query
      description: Filter by taskID.
      schema:
        $ref: '#/components/schemas/taskID'
    runSort:
      name: sort
      in: query
      description: The key by which the list should be sorted.
      required: false
      schema:
        $ref: '#/components/schemas/runSortKeys'
    pathRunID:
      name: runID
      in: path
      required: true
      description: The run UUID.
      schema:
        $ref: '#/components/schemas/runID'
    eventStatus:
      name: status
      in: query
      description: Filter the status of the events.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/EventStatus'
    eventType:
      name: type
      in: query
      description: Filter the type of the events.
      schema:
        type: array
        items:
          $ref: '#/components/schemas/EventType'
    eventSort:
      name: sort
      in: query
      description: The key by which the list should be sorted.
      required: false
      schema:
        $ref: '#/components/schemas/eventSortKeys'
    pathEventID:
      name: eventID
      in: path
      required: true
      description: The event UUID.
      schema:
        $ref: '#/components/schemas/eventID'
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    AuthenticationType:
      type: string
      description: >-
        Type of the Authentication, defines what kind of object is stored in the
        input.
      enum:
        - googleServiceAccount
        - basic
        - apiKey
        - oauth
        - algolia
    Platform:
      oneOf:
        - type: string
          description: Describe which platform the Authentication is used for.
          enum:
            - bigcommerce
            - commercetools
        - type: 'null'
    platformNone:
      type: string
      description: Used to filter Authentication without platform property.
      enum:
        - none
    platformWithNone:
      oneOf:
        - $ref: '#/components/schemas/Platform'
        - $ref: '#/components/schemas/platformNone'
    authenticationSortKeys:
      type: string
      description: Used to sort the Authentication list endpoint.
      enum:
        - name
        - auth_type
        - platform
        - updatedAt
        - createdAt
    orderKeys:
      type: string
      description: Used to order a sorted request.
      enum:
        - asc
        - desc
    authenticationID:
      type: string
      description: The authentication UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    name:
      type: string
      description: An human readable name describing the object.
    AuthGoogleServiceAccountPartial:
      type: object
      description: Authentication input to connect to a Google service (e.g. BigQuery).
      additionalProperties: false
      properties:
        clientEmail:
          type: string
          description: Email address of the Service Account.
          example: service-account-name@project-id.iam.gserviceaccount.com
        privateKey:
          type: string
          description: Private key of the Service Account.
    AuthBasicPartial:
      type: object
      description: Authentication input for Basic login with username and password.
      additionalProperties: false
      properties:
        username:
          type: string
        password:
          type: string
    AuthAPIKeyPartial:
      type: object
      description: Authentication input used for token credentials.
      additionalProperties: false
      properties:
        key:
          type: string
    AuthOAuthPartial:
      type: object
      description: Authentication input for OAuth login.
      additionalProperties: false
      properties:
        url:
          type: string
          description: The OAuth endpoint URL.
        client_id:
          type: string
          description: The clientID.
        client_secret:
          type: string
          description: The secret.
    AuthAlgoliaPartial:
      type: object
      additionalProperties: false
      properties:
        appID:
          type: string
          description: Algolia Application ID.
        apiKey:
          type: string
          description: >-
            Algolia API Key, with the correct rights to push to an index and
            change settings.
    AuthInputPartial:
      oneOf:
        - $ref: '#/components/schemas/AuthGoogleServiceAccountPartial'
        - $ref: '#/components/schemas/AuthBasicPartial'
        - $ref: '#/components/schemas/AuthAPIKeyPartial'
        - $ref: '#/components/schemas/AuthOAuthPartial'
        - $ref: '#/components/schemas/AuthAlgoliaPartial'
    createdAt:
      type: string
      description: Date of creation (RFC3339 format).
    updatedAt:
      type: string
      description: Date of last update (RFC3339 format).
    Authentication:
      type: object
      description: >-
        An authentication is used to login into a Source or a Destination, with
        obfuscated input.
      additionalProperties: false
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        platform:
          $ref: '#/components/schemas/Platform'
        input:
          $ref: '#/components/schemas/AuthInputPartial'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - authenticationID
        - type
        - name
        - input
        - createdAt
    Pagination:
      type: object
      additionalProperties: false
      properties:
        nbPages:
          type: integer
        page:
          type: integer
        nbItems:
          type: integer
        itemsPerPage:
          type: integer
      required:
        - nbPages
        - page
        - nbItems
        - itemsPerPage
    AuthGoogleServiceAccount:
      type: object
      description: Authentication input to connect to a Google service (e.g. BigQuery).
      additionalProperties: false
      properties:
        clientEmail:
          type: string
          description: Email address of the Service Account.
          example: service-account-name@project-id.iam.gserviceaccount.com
        privateKey:
          type: string
          description: Private key of the Service Account.
      required:
        - clientEmail
        - privateKey
    AuthBasic:
      type: object
      description: Authentication input for Basic login with username and password.
      additionalProperties: false
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password
    AuthAPIKey:
      type: object
      description: Authentication input used for token credentials.
      additionalProperties: false
      properties:
        key:
          type: string
      required:
        - key
    AuthOAuth:
      type: object
      description: Authentication input for OAuth login.
      additionalProperties: false
      properties:
        url:
          type: string
          description: The OAuth endpoint URL.
        client_id:
          type: string
          description: The clientID.
        client_secret:
          type: string
          description: The secret.
      required:
        - url
        - client_id
        - client_secret
    AuthAlgolia:
      type: object
      additionalProperties: false
      properties:
        appID:
          type: string
          description: Algolia Application ID.
        apiKey:
          type: string
          description: >-
            Algolia API Key, with the correct rights to push to an index and
            change settings.
      required:
        - appID
        - apiKey
    AuthInput:
      oneOf:
        - $ref: '#/components/schemas/AuthGoogleServiceAccount'
        - $ref: '#/components/schemas/AuthBasic'
        - $ref: '#/components/schemas/AuthAPIKey'
        - $ref: '#/components/schemas/AuthOAuth'
        - $ref: '#/components/schemas/AuthAlgolia'
    AuthenticationCreate:
      type: object
      description: The payload when creating an authentication.
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        platform:
          $ref: '#/components/schemas/Platform'
        input:
          $ref: '#/components/schemas/AuthInput'
      required:
        - type
        - name
        - input
    AuthenticationCreateResponse:
      type: object
      description: Response from the API when the Authentication is successfully created.
      additionalProperties: false
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        name:
          $ref: '#/components/schemas/name'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - authenticationID
        - name
        - createdAt
    AuthenticationSearch:
      type: object
      additionalProperties: false
      description: >-
        Payload to search for multiple authentications, based on the given
        `authenticationIDs`.
      properties:
        authenticationIDs:
          type: array
          items:
            $ref: '#/components/schemas/authenticationID'
      required:
        - authenticationIDs
    DeleteResponse:
      type: object
      properties:
        deletedAt:
          type: string
          description: Date of deletion (RFC3339 format).
      required:
        - deletedAt
    AuthenticationUpdate:
      type: object
      description: Payload to partially update an Authentication.
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/AuthenticationType'
        name:
          $ref: '#/components/schemas/name'
        platform:
          $ref: '#/components/schemas/Platform'
        input:
          $ref: '#/components/schemas/AuthInputPartial'
    AuthenticationUpdateResponse:
      type: object
      additionalProperties: false
      description: Response from the API when the Authentication is successfully updated.
      properties:
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        name:
          $ref: '#/components/schemas/name'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - authenticationID
        - name
        - updatedAt
    DestinationType:
      type: string
      description: >-
        Type of the Destination, defines in which Algolia product the data will
        be stored.
      enum:
        - search
        - insights
        - flow
    destinationSortKeys:
      type: string
      description: Used to sort the Destination list endpoint.
      enum:
        - name
        - type
        - updatedAt
        - createdAt
    destinationID:
      type: string
      description: The destination UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    DestinationIndexPrefix:
      type: object
      additionalProperties: false
      properties:
        indexPrefix:
          type: string
          description: The prefix of the final index name.
      required:
        - indexPrefix
    RecordType:
      type: string
      description: Determines the indexing strategy to use for a given e-commerce source.
      enum:
        - product
        - variant
    AttributesToExclude:
      type: array
      description: >
        Determines the attributes to exclude from an Algolia record.

        To remove nested element, you can separate the path to the element with
        dots (`.`):
          - "foo.bar": will remove `bar` from `foo`.
        To remove elements from an array, you can use the following:
          - "foo.[0].bar": will only remove `bar` from the first element of `foo`.
          - "foo.[*].bar": will remove `bar` from every elements of `foo`.
      items:
        type: string
    DestinationIndexName:
      type: object
      additionalProperties: false
      properties:
        indexName:
          type: string
          description: The index name to store data in.
        recordType:
          $ref: '#/components/schemas/RecordType'
        attributesToExclude:
          $ref: '#/components/schemas/AttributesToExclude'
      required:
        - indexName
    DestinationInput:
      oneOf:
        - $ref: '#/components/schemas/DestinationIndexPrefix'
        - $ref: '#/components/schemas/DestinationIndexName'
    Destination:
      type: object
      description: A destination describe how the data is indexed on the Algolia side.
      additionalProperties: false
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/DestinationInput'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
      required:
        - destinationID
        - type
        - name
        - input
        - createdAt
    DestinationCreate:
      type: object
      additionalProperties: false
      description: The payload when creating a destination.
      properties:
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/DestinationInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
      required:
        - type
        - name
        - input
    DestinationCreateResponse:
      type: object
      additionalProperties: false
      description: Response from the API when the Destination is successfully created.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        name:
          $ref: '#/components/schemas/name'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - destinationID
        - name
        - createdAt
    DestinationSearch:
      type: object
      additionalProperties: false
      description: >-
        Payload to search for multiple destinations, based on the given
        `destinationIDs`.
      properties:
        destinationIDs:
          type: array
          items:
            $ref: '#/components/schemas/destinationID'
      required:
        - destinationIDs
    DestinationUpdate:
      type: object
      additionalProperties: false
      description: Payload to partially update a Destination.
      properties:
        type:
          $ref: '#/components/schemas/DestinationType'
        name:
          $ref: '#/components/schemas/name'
        input:
          $ref: '#/components/schemas/DestinationInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
    DestinationUpdateResponse:
      type: object
      additionalProperties: false
      description: Response from the API when the Destination is successfully updated.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        name:
          $ref: '#/components/schemas/name'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - destinationID
        - name
        - updatedAt
    SourceType:
      type: string
      enum:
        - bigcommerce
        - commercetools
        - json
        - csv
        - bigquery
        - docker
        - ga4BigqueryExport
    sourceSortKeys:
      type: string
      description: Used to sort the Source list endpoint.
      enum:
        - name
        - type
        - updatedAt
        - createdAt
    sourceID:
      type: string
      description: The source UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    CommercetoolsCustomFields:
      type: object
      additionalProperties: false
      description: >-
        Custom fields from Commercetools to index in the records (see
        https://docs.commercetools.com/tutorials/custom-types).
      properties:
        inventory:
          oneOf:
            - type: array
              items:
                type: string
              description: Inventory custom fields.
            - type: 'null'
        price:
          oneOf:
            - type: array
              items:
                type: string
              description: Price custom fields.
            - type: 'null'
        category:
          oneOf:
            - type: array
              items:
                type: string
              description: Category custom fields.
            - type: 'null'
    SourceCommercetools:
      type: object
      additionalProperties: false
      properties:
        storeKeys:
          type: array
          items:
            description: Unique and immutable key of the referenced Store.
            type: string
        locales:
          type: array
          description: >
            Array of locales that must match the following pattern:
            ^[a-z]{2}(-[A-Z]{2})?$. For example ["fr-FR", "en"].
          items:
            type: string
        url:
          type: string
        projectKey:
          type: string
        fallbackIsInStockValue:
          type: boolean
          default: true
          description: >
            Determines the value that will be stored in the Algolia record if
            there's no inventory information on the product.
        customFields:
          $ref: '#/components/schemas/CommercetoolsCustomFields'
      required:
        - url
        - projectKey
      x-discriminator-fields:
        - projectKey
    BigCommerceChannel:
      type: object
      additionalProperties: false
      properties:
        id:
          type: integer
          description: The ID of the bigcommerce channel.
        currencies:
          type: array
          description: >-
            An array of currencies for the given channel `ID`, a currency is a
            trigram string that represents the currency code.
          example:
            - usd
            - eur
          items:
            type: string
            example: usd
      required:
        - id
    BigCommerceMetafield:
      type: object
      additionalProperties: false
      properties:
        namespace:
          type: string
          description: The namespace of the metafield.
        key:
          type: string
          description: The key identifier of the metafield.
      required:
        - namespace
        - key
    SourceBigCommerce:
      type: object
      additionalProperties: false
      properties:
        storeHash:
          type: string
          description: The store hash identifying the store the shopper is signing in to.
        channel:
          $ref: '#/components/schemas/BigCommerceChannel'
        customFields:
          type: array
          items:
            type: string
        productMetafields:
          type: array
          items:
            $ref: '#/components/schemas/BigCommerceMetafield'
        variantMetafields:
          type: array
          items:
            $ref: '#/components/schemas/BigCommerceMetafield'
      required:
        - storeHash
      x-discriminator-fields:
        - storeHash
    UniqueIDColumn:
      type: string
      description: >-
        The name of the column that contains the unique ID, used as `objectID`
        in Algolia.
    MethodType:
      type: string
      enum:
        - GET
        - POST
    SourceJSON:
      type: object
      additionalProperties: false
      properties:
        url:
          type: string
          description: The URL of the file.
        uniqueIDColumn:
          $ref: '#/components/schemas/UniqueIDColumn'
        method:
          $ref: '#/components/schemas/MethodType'
      required:
        - url
    MappingTypeCSV:
      type: string
      enum:
        - string
        - integer
        - float
        - boolean
        - json
    SourceCSV:
      type: object
      additionalProperties: false
      properties:
        url:
          type: string
          description: The URL of the file.
        uniqueIDColumn:
          $ref: '#/components/schemas/UniqueIDColumn'
        mapping:
          type: object
          description: >
            Mapping of type for every column. For example {"myColumn":
            "boolean", "myOtherColumn": "json"}.
          additionalProperties:
            $ref: '#/components/schemas/MappingTypeCSV'
        method:
          $ref: '#/components/schemas/MethodType'
        delimiter:
          type: string
          minLength: 1
          maxLength: 1
          default: ','
          description: >-
            The character used to split the value on each line, default to a
            comma (\r, \n, 0xFFFD, and space are forbidden).
      required:
        - url
    BigQueryDataType:
      type: string
      enum:
        - ga4
        - ga360
    SourceBigQuery:
      type: object
      additionalProperties: false
      properties:
        projectID:
          type: string
          description: Project ID of the BigQuery Source.
        datasetID:
          type: string
          description: Dataset ID of the BigQuery Source.
        dataType:
          $ref: '#/components/schemas/BigQueryDataType'
        table:
          type: string
          description: Table name (for default BQ).
        tablePrefix:
          type: string
          description: Table prefix (for Google Analytics).
        customSQLRequest:
          type: string
          description: Custom SQL request to extract data from the BigQuery table.
        uniqueIDColumn:
          $ref: '#/components/schemas/UniqueIDColumn'
      required:
        - projectID
        - datasetID
      x-discriminator-fields:
        - projectID
    SourceGA4BigQueryExport:
      type: object
      additionalProperties: false
      properties:
        projectID:
          type: string
          description: GCP project ID that the BigQuery Export writes to.
        datasetID:
          type: string
          description: BigQuery dataset ID that the BigQuery Export writes to.
        tablePrefix:
          type: string
          description: >-
            Prefix of the tables that the BigQuery Export writes to (i.e.
            events_intraday_ for streaming, events_ for daily).
      required:
        - projectID
        - datasetID
        - tablePrefix
      x-discriminator-fields:
        - projectID
        - datasetID
        - tablePrefix
    DockerImageType:
      type: string
      enum:
        - singer
        - custom
        - airbyte
      description: The type of the image.
    DockerRegistry:
      type: string
      enum:
        - dockerhub
        - ghcr
      description: The registry where the image is stored.
    SourceDocker:
      type: object
      additionalProperties: false
      properties:
        imageType:
          $ref: '#/components/schemas/DockerImageType'
        registry:
          $ref: '#/components/schemas/DockerRegistry'
        image:
          type: string
          description: The name of the image to pull.
          example: algolia/zendesk
        version:
          type: string
          description: The version of the image, defaults to `latest`.
          example: v2.1.0
        configuration:
          type: object
          description: The configuration of the spec.
      required:
        - registry
        - image
        - imageType
        - configuration
    SourceInput:
      oneOf:
        - $ref: '#/components/schemas/SourceCommercetools'
        - $ref: '#/components/schemas/SourceBigCommerce'
        - $ref: '#/components/schemas/SourceJSON'
        - $ref: '#/components/schemas/SourceCSV'
        - $ref: '#/components/schemas/SourceBigQuery'
        - $ref: '#/components/schemas/SourceGA4BigQueryExport'
        - $ref: '#/components/schemas/SourceDocker'
    Source:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        type:
          $ref: '#/components/schemas/SourceType'
        name:
          type: string
        input:
          $ref: '#/components/schemas/SourceInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - sourceID
        - type
        - name
        - input
        - createdAt
    SourceCreate:
      type: object
      additionalProperties: false
      properties:
        type:
          $ref: '#/components/schemas/SourceType'
        name:
          type: string
        input:
          $ref: '#/components/schemas/SourceInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
      required:
        - type
        - name
        - input
    SourceCreateResponse:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        name:
          type: string
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - sourceID
        - name
        - createdAt
    SourceSearch:
      type: object
      additionalProperties: false
      properties:
        sourceIDs:
          type: array
          items:
            type: string
      required:
        - sourceIDs
    SourceUpdateCommercetools:
      type: object
      additionalProperties: false
      properties:
        storeKeys:
          type: array
          description: Unique and immutable key of the referenced Store.
          items:
            type: string
        locales:
          type: array
          description: >
            Array of locales that must match the following pattern:
            ^[a-z]{2}(-[A-Z]{2})?$. For example ["fr-FR", "en"].
          items:
            type: string
        url:
          type: string
        fallbackIsInStockValue:
          type: boolean
          description: >
            Determines the value that will be stored in the Algolia record if
            there's no inventory information on the product.
        customFields:
          $ref: '#/components/schemas/CommercetoolsCustomFields'
    SourceUpdateDocker:
      type: object
      additionalProperties: false
      properties:
        registry:
          $ref: '#/components/schemas/DockerRegistry'
        image:
          type: string
          description: The name of the image to pull.
          example: algolia/zendesk
        version:
          type: string
          description: The version of the image, defaults to `latest`.
          example: v2.1.0
        configuration:
          type: object
          description: The configuration of the spec.
      required:
        - configuration
    SourceUpdateInput:
      oneOf:
        - $ref: '#/components/schemas/SourceUpdateCommercetools'
        - $ref: '#/components/schemas/SourceJSON'
        - $ref: '#/components/schemas/SourceCSV'
        - $ref: '#/components/schemas/SourceBigQuery'
        - $ref: '#/components/schemas/SourceGA4BigQueryExport'
        - $ref: '#/components/schemas/SourceUpdateDocker'
    SourceUpdate:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        input:
          $ref: '#/components/schemas/SourceUpdateInput'
        authenticationID:
          $ref: '#/components/schemas/authenticationID'
    SourceUpdateResponse:
      type: object
      additionalProperties: false
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        name:
          type: string
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - sourceID
        - name
        - updatedAt
    DockerSourceStream:
      type: object
      description: A stream definition (see the Singer specification for details).
    runID:
      type: string
      description: The run UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    ActionType:
      type: string
      description: The action to perform on the Algolia index.
      enum:
        - replace
        - save
        - partial
        - append
    TriggerType:
      type: string
      description: |
        The type of the task reflect how it can be used:
          - onDemand: a task that runs manually
          - schedule: a task that runs regularly, following a given cron expression
          - subscription: a task that runs after a subscription event is received from an integration (e.g. Webhook).
          - streaming: a task that runs continuously.
      enum:
        - onDemand
        - schedule
        - subscription
        - streaming
    taskSortKeys:
      type: string
      description: Used to sort the Task list endpoint.
      enum:
        - enabled
        - triggerType
        - action
        - updatedAt
        - createdAt
    taskID:
      type: string
      description: The task UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    OnDemandTriggerType:
      type: string
      description: A task which is manually executed via the run task endpoint.
      enum:
        - onDemand
    LastRun:
      description: The last time the scheduled task ran (RFC3339 format).
      type: string
    OnDemandTrigger:
      type: object
      additionalProperties: false
      description: The trigger information of a task of type `onDemand`.
      properties:
        type:
          $ref: '#/components/schemas/OnDemandTriggerType'
        lastRun:
          $ref: '#/components/schemas/LastRun'
      required:
        - type
    ScheduleTriggerType:
      type: string
      description: A task which is triggered by a schedule (cron expression).
      enum:
        - schedule
    Cron:
      type: string
      description: >-
        A cron expression that represent at which regularity the task should
        run.
      example: '* * 1 * *'
    ScheduleTrigger:
      type: object
      additionalProperties: false
      description: The trigger information for a task of type 'schedule'.
      properties:
        type:
          $ref: '#/components/schemas/ScheduleTriggerType'
        cron:
          $ref: '#/components/schemas/Cron'
        lastRun:
          $ref: '#/components/schemas/LastRun'
        nextRun:
          description: The next scheduled run of the task (RFC3339 format).
          type: string
      required:
        - type
        - cron
        - nextRun
    SubscriptionTriggerType:
      type: string
      description: A task which is triggered by an external subscription (e.g. Webhook).
      enum:
        - subscription
    SubscriptionTrigger:
      type: object
      additionalProperties: false
      description: The trigger input for a task of type 'subscription'.
      properties:
        type:
          $ref: '#/components/schemas/SubscriptionTriggerType'
      required:
        - type
    StreamingTriggerType:
      type: string
      description: A task that runs continuously.
      enum:
        - streaming
    StreamingTrigger:
      type: object
      additionalProperties: false
      description: The trigger input for a task of type 'streaming'.
      properties:
        type:
          $ref: '#/components/schemas/StreamingTriggerType'
      required:
        - type
    Trigger:
      oneOf:
        - $ref: '#/components/schemas/OnDemandTrigger'
        - $ref: '#/components/schemas/ScheduleTrigger'
        - $ref: '#/components/schemas/SubscriptionTrigger'
        - $ref: '#/components/schemas/StreamingTrigger'
    MappingFieldDirective:
      type: object
      additionalProperties: false
      description: >-
        Describes how a field should be resolved by applying a set of
        directives.
      properties:
        fieldKey:
          description: Destination field key.
          type: string
        value:
          type: object
          additionalProperties: true
          description: How the destination field should be resolved from the source.
      required:
        - fieldKey
        - value
    MappingKitAction:
      type: object
      additionalProperties: false
      description: >-
        Describes how a destination object should be resolved by means of
        applying a set of directives.
      properties:
        id:
          description: ID to uniquely identify this action.
          type: string
        enabled:
          description: Whether this action has any effect.
          type: boolean
        trigger:
          description: >-
            Condition which must be satisfied to apply the action. If this
            evaluates to false, the action is not applied, and the process
            attempts to apply the next action, if any.
          type: string
        fieldDirectives:
          type: array
          items:
            $ref: '#/components/schemas/MappingFieldDirective'
      required:
        - enabled
        - trigger
        - fieldDirectives
    MappingInput:
      type: object
      additionalProperties: false
      description: Transformations to apply to source, serialized as a JSON string.
      properties:
        format:
          description: >-
            Name of the mapping format schema, `mappingkit/v1` is currently the
            only supported format.
          type: string
        actions:
          type: array
          items:
            $ref: '#/components/schemas/MappingKitAction'
      required:
        - format
        - actions
    OnDemandDateUtilsInput:
      type: object
      additionalProperties: false
      description: >-
        The input for an `onDemand` task whose source is of type `bigquery` and
        for which extracted data spans a given time range.
      properties:
        startDate:
          description: The start date of the extraction (RFC3339 format).
          type: string
        endDate:
          description: The end date of the extraction (RFC3339 format).
          type: string
        mapping:
          $ref: '#/components/schemas/MappingInput'
      required:
        - startDate
        - endDate
    ScheduleDateUtilsInput:
      type: object
      additionalProperties: false
      description: >-
        The input for a `schedule` task whose source is of type `bigquery` and
        for which extracted data spans a fixed number of days.
      properties:
        timeframe:
          description: The timeframe of the extraction, in number of days from today.
          type: integer
          minimum: 1
          maximum: 30
        mapping:
          $ref: '#/components/schemas/MappingInput'
      required:
        - timeframe
    StreamingUtilsInput:
      type: object
      additionalProperties: false
      description: >-
        The input for a `streaming` task whose source is of type
        `ga4BigqueryExport` and for which extracted data is continuously
        streamed.
      properties:
        mapping:
          $ref: '#/components/schemas/MappingInput'
      required:
        - mapping
    TaskInput:
      oneOf:
        - $ref: '#/components/schemas/OnDemandDateUtilsInput'
        - $ref: '#/components/schemas/ScheduleDateUtilsInput'
        - $ref: '#/components/schemas/StreamingUtilsInput'
    failureThreshold:
      type: integer
      minimum: 0
      maximum: 100
      description: >-
        A percentage representing the accepted failure threshold to determine if
        a `run` succeeded or not.
    Task:
      type: object
      additionalProperties: false
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        sourceID:
          $ref: '#/components/schemas/sourceID'
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/Trigger'
        input:
          $ref: '#/components/schemas/TaskInput'
        enabled:
          type: boolean
          default: true
          description: Whether the task is enabled or not.
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        action:
          $ref: '#/components/schemas/ActionType'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - taskID
        - sourceID
        - destinationID
        - trigger
        - enabled
        - action
        - createdAt
    OnDemandTriggerInput:
      type: object
      additionalProperties: false
      description: The trigger information of a task of type `onDemand`.
      properties:
        type:
          $ref: '#/components/schemas/OnDemandTriggerType'
      required:
        - type
    ScheduleTriggerInput:
      type: object
      additionalProperties: false
      description: The trigger input for a task of type 'schedule'.
      properties:
        type:
          $ref: '#/components/schemas/ScheduleTriggerType'
        cron:
          $ref: '#/components/schemas/Cron'
      required:
        - type
        - cron
    TaskCreateTrigger:
      oneOf:
        - $ref: '#/components/schemas/OnDemandTriggerInput'
        - $ref: '#/components/schemas/ScheduleTriggerInput'
        - $ref: '#/components/schemas/SubscriptionTrigger'
        - $ref: '#/components/schemas/StreamingTrigger'
    TaskCreate:
      type: object
      additionalProperties: false
      description: The payload for a task creation.
      properties:
        sourceID:
          $ref: '#/components/schemas/sourceID'
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/TaskCreateTrigger'
        action:
          $ref: '#/components/schemas/ActionType'
        enabled:
          type: boolean
          description: Whether the task is enabled or not.
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        input:
          $ref: '#/components/schemas/TaskInput'
      required:
        - sourceID
        - destinationID
        - trigger
        - action
    TaskCreateResponse:
      type: object
      additionalProperties: false
      description: The response from the API after a task creation.
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - taskID
        - createdAt
    TaskSearch:
      type: object
      additionalProperties: false
      properties:
        taskIDs:
          type: array
          items:
            type: string
      required:
        - taskIDs
    TriggerUpdateInput:
      type: object
      additionalProperties: false
      description: The trigger input for a task update.
      properties:
        cron:
          $ref: '#/components/schemas/Cron'
      required:
        - cron
    TaskUpdate:
      type: object
      additionalProperties: false
      description: The payload for a task update.
      properties:
        destinationID:
          $ref: '#/components/schemas/destinationID'
        trigger:
          $ref: '#/components/schemas/TriggerUpdateInput'
        input:
          $ref: '#/components/schemas/TaskInput'
        enabled:
          type: boolean
          description: Whether the task is enabled or not.
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
    TaskUpdateResponse:
      type: object
      description: The response from the API after a task update.
      additionalProperties: false
      properties:
        taskID:
          $ref: '#/components/schemas/taskID'
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
      required:
        - taskID
        - updatedAt
    RunResponse:
      type: object
      additionalProperties: false
      description: >-
        The response from the run task API, containing an Observability Run ID
        and the time it was created at.
      properties:
        runID:
          $ref: '#/components/schemas/runID'
        createdAt:
          $ref: '#/components/schemas/createdAt'
      required:
        - runID
        - createdAt
    RunStatus:
      type: string
      enum:
        - created
        - started
        - idled
        - finished
        - skipped
    runSortKeys:
      type: string
      description: Used to sort the Run list endpoint.
      enum:
        - status
        - updatedAt
        - createdAt
    RunOutcome:
      type: string
      enum:
        - success
        - failure
        - processing
    RunReasonCode:
      type: string
      description: An identifier that pairs with the outcome reason.
      enum:
        - internal
        - critical
        - no_events
        - too_many_errors
        - ok
        - discarded
        - blocking
    RunType:
      type: string
      enum:
        - reindex
        - update
        - discover
    startedAt:
      type: string
      description: Date of start (RFC3339 format).
    finishedAt:
      type: string
      description: Date of finish (RFC3339 format).
    Run:
      type: object
      additionalProperties: false
      properties:
        runID:
          $ref: '#/components/schemas/runID'
        appID:
          type: string
        taskID:
          $ref: '#/components/schemas/taskID'
        status:
          $ref: '#/components/schemas/RunStatus'
        progress:
          type: object
          additionalProperties: false
          properties:
            expectedNbOfEvents:
              type: integer
            receivedNbOfEvents:
              type: integer
        outcome:
          $ref: '#/components/schemas/RunOutcome'
        failureThreshold:
          $ref: '#/components/schemas/failureThreshold'
        reason:
          type: string
          description: Explains the result of outcome.
        reasonCode:
          $ref: '#/components/schemas/RunReasonCode'
        type:
          $ref: '#/components/schemas/RunType'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        startedAt:
          $ref: '#/components/schemas/startedAt'
        finishedAt:
          $ref: '#/components/schemas/finishedAt'
      required:
        - runID
        - appID
        - taskID
        - status
        - type
        - createdAt
    Window:
      type: object
      additionalProperties: false
      description: >-
        The window parameter represents the holds the dates used to query the
        Observability data from the database in a given window.
      properties:
        startDate:
          type: string
          description: >-
            A date in format RFC3339 representing the oldest possible data in
            query window.
        endDate:
          type: string
          description: >-
            A date in format RFC3339 representing the newest possible data in
            query window.
      required:
        - startDate
        - endDate
    RunListResponse:
      type: object
      additionalProperties: false
      properties:
        runs:
          type: array
          items:
            $ref: '#/components/schemas/Run'
        pagination:
          $ref: '#/components/schemas/Pagination'
        window:
          $ref: '#/components/schemas/Window'
      required:
        - runs
        - pagination
        - window
    EventStatus:
      type: string
      enum:
        - created
        - started
        - retried
        - failed
        - succeeded
        - critical
    EventType:
      type: string
      enum:
        - fetch
        - record
        - log
        - transform
    eventSortKeys:
      type: string
      description: Used to sort the Event list endpoint.
      enum:
        - status
        - type
        - publishedAt
    eventID:
      type: string
      description: The event UUID.
      example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
    publishedAt:
      type: string
      description: Date of publish (RFC3339 format).
    Event:
      type: object
      description: An event describe a step of the task execution flow..
      additionalProperties: false
      properties:
        eventID:
          $ref: '#/components/schemas/eventID'
        runID:
          $ref: '#/components/schemas/runID'
        parentID:
          type: string
          description: The parent event, the cause of this event.
          example: 6c02aeb1-775e-418e-870b-1faccd4b2c0f
        status:
          $ref: '#/components/schemas/EventStatus'
        type:
          $ref: '#/components/schemas/EventType'
        batchSize:
          type: integer
          description: The extracted record batch size.
          example: 10
          minimum: 0
          multipleOf: 1
        data:
          type: object
          additionalProperties: true
        publishedAt:
          $ref: '#/components/schemas/publishedAt'
      required:
        - eventID
        - runID
        - status
        - type
        - batchSize
        - publishedAt
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
