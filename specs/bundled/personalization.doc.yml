openapi: 3.0.2
info:
  title: Personalization API
  description: API powering the Personalization feature of Algolia.
  version: 1.0.0
servers:
  - url: https://personalization.{region}.algolia.com
    variables:
      region:
        enum:
          - us
          - eu
        default: us
security:
  - appId: []
    apiKey: []
tags:
  - name: profiles
    x-displayName: Profiles
    description: Manage users' profiles.
  - name: strategies
    x-displayName: Strategies
    description: Manage personalization strategies.
paths:
  /1{path}:
    get:
      operationId: customGet
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new PersonalizationClient(
              new PersonalizationConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomGetAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            personalization.YOUR_APP_ID_REGION

            client, err := personalization.NewClient("YOUR_APP_ID",
            "YOUR_API_KEY", personalization.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomGet(client.NewApiCustomGetRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            PersonalizationClient client = new
            PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION");


            // Call the API

            client.customGet("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = personalizationClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customGet({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customGet(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\PersonalizationClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customGet(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_get(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: |
            # Initialize the client
            client = Algolia::PersonalizationClient.create(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            )

            # Call the API
            resp = client.custom_get("/test/minimal")

            # use the class directly
            puts resp

            # print the JSON response
            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.customGet[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try PersonalizationClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customGet(path: "/test/minimal")
    post:
      operationId: customPost
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new PersonalizationClient(
              new PersonalizationConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomPostAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            personalization.YOUR_APP_ID_REGION

            client, err := personalization.NewClient("YOUR_APP_ID",
            "YOUR_API_KEY", personalization.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomPost(client.NewApiCustomPostRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            PersonalizationClient client = new
            PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION");


            // Call the API

            client.customPost("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = personalizationClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customPost({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customPost(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\PersonalizationClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customPost(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_post(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: |
            # Initialize the client
            client = Algolia::PersonalizationClient.create(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            )

            # Call the API
            resp = client.custom_post("/test/minimal")

            # use the class directly
            puts resp

            # print the JSON response
            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.customPost[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try PersonalizationClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customPost(path: "/test/minimal")
    put:
      operationId: customPut
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new PersonalizationClient(
              new PersonalizationConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomPutAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            personalization.YOUR_APP_ID_REGION

            client, err := personalization.NewClient("YOUR_APP_ID",
            "YOUR_API_KEY", personalization.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomPut(client.NewApiCustomPutRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            PersonalizationClient client = new
            PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION");


            // Call the API

            client.customPut("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = personalizationClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customPut({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customPut(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\PersonalizationClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customPut(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_put(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: |
            # Initialize the client
            client = Algolia::PersonalizationClient.create(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            )

            # Call the API
            resp = client.custom_put("/test/minimal")

            # use the class directly
            puts resp

            # print the JSON response
            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.customPut[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try PersonalizationClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customPut(path: "/test/minimal")
    delete:
      operationId: customDelete
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new PersonalizationClient(
              new PersonalizationConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomDeleteAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            personalization.YOUR_APP_ID_REGION

            client, err := personalization.NewClient("YOUR_APP_ID",
            "YOUR_API_KEY", personalization.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            PersonalizationClient client = new
            PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION");


            // Call the API

            client.customDelete("/test/minimal");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = personalizationClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.customDelete({ path: '/test/minimal'
            });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customDelete(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\PersonalizationClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customDelete(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_delete(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: |
            # Initialize the client
            client = Algolia::PersonalizationClient.create(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            )

            # Call the API
            resp = client.custom_delete("/test/minimal")

            # use the class directly
            puts resp

            # print the JSON response
            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.customDelete[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try PersonalizationClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customDelete(path: "/test/minimal")
  /1/profiles/personalization/{userToken}:
    get:
      tags:
        - profiles
      operationId: getUserTokenProfile
      x-acl:
        - recommendation
      summary: Get a user profile.
      description: >
        Get the user profile built from Personalization strategy.


        The profile is structured by facet name used in the strategy. Each facet
        value is mapped to its score. Each score represents the user affinity
        for a specific facet value given the userToken past events and the
        Personalization strategy defined. Scores are bounded to 20. The last
        processed event timestamp is provided using the ISO 8601 format for
        debugging purposes.
      parameters:
        - $ref: '#/components/parameters/UserToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getUserTokenResponse
                type: object
                additionalProperties: false
                required:
                  - userToken
                  - scores
                  - lastEventAt
                properties:
                  userToken:
                    $ref: '#/components/schemas/userToken'
                  lastEventAt:
                    type: string
                    description: Date of last event update. (ISO-8601 format).
                  scores:
                    type: object
                    description: The userToken scores.
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new PersonalizationClient(
              new PersonalizationConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetUserTokenProfileAsync("UserToken");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            personalization.YOUR_APP_ID_REGION

            client, err := personalization.NewClient("YOUR_APP_ID",
            "YOUR_API_KEY", personalization.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetUserTokenProfile(client.NewApiGetUserTokenProfileRequest(
              "UserToken",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            PersonalizationClient client = new
            PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION");


            // Call the API

            client.getUserTokenProfile("UserToken");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = personalizationClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.getUserTokenProfile({ userToken:
            'UserToken' });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getUserTokenProfile(
              userToken = "UserToken",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\PersonalizationClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getUserTokenProfile(
                'UserToken',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_user_token_profile(
                user_token="UserToken",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: |
            # Initialize the client
            client = Algolia::PersonalizationClient.create(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            )

            # Call the API
            resp = client.get_user_token_profile("UserToken")

            # use the class directly
            puts resp

            # print the JSON response
            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getUserTokenProfile(
              userToken = "UserToken"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try PersonalizationClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getUserTokenProfile(userToken: "UserToken")
  /1/profiles/{userToken}:
    delete:
      tags:
        - profiles
      operationId: deleteUserProfile
      x-acl:
        - recommendation
      summary: Delete a user profile.
      description: >
        Delete the user profile and all its associated data.


        Returns, as part of the response, a date until which the data can safely
        be considered as deleted for the given user. This means if you send
        events for the given user before this date, they will be ignored. Any
        data received after the deletedUntil date will start building a new user
        profile.


        It might take a couple hours for the deletion request to be fully
        processed.
      parameters:
        - $ref: '#/components/parameters/UserToken'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: deleteUserProfileResponse
                type: object
                additionalProperties: false
                required:
                  - userToken
                  - deletedUntil
                properties:
                  userToken:
                    $ref: '#/components/schemas/userToken'
                  deletedUntil:
                    type: string
                    description: >-
                      A date until which the data can safely be considered as
                      deleted for the given user. Any data received after the
                      `deletedUntil` date will start building a new user
                      profile.
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new PersonalizationClient(
              new PersonalizationConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.DeleteUserProfileAsync("UserToken");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            personalization.YOUR_APP_ID_REGION

            client, err := personalization.NewClient("YOUR_APP_ID",
            "YOUR_API_KEY", personalization.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.DeleteUserProfile(client.NewApiDeleteUserProfileRequest(
              "UserToken",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            PersonalizationClient client = new
            PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION");


            // Call the API

            client.deleteUserProfile("UserToken");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = personalizationClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.deleteUserProfile({ userToken:
            'UserToken' });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.deleteUserProfile(
              userToken = "UserToken",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\PersonalizationClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->deleteUserProfile(
                'UserToken',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.delete_user_profile(
                user_token="UserToken",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: |
            # Initialize the client
            client = Algolia::PersonalizationClient.create(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            )

            # Call the API
            resp = client.delete_user_profile("UserToken")

            # use the class directly
            puts resp

            # print the JSON response
            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.deleteUserProfile(
              userToken = "UserToken"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try PersonalizationClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.deleteUserProfile(userToken: "UserToken")
  /1/strategies/personalization:
    get:
      tags:
        - strategies
      operationId: getPersonalizationStrategy
      x-acl:
        - recommendation
      summary: Get the current strategy.
      description: >-
        The strategy contains information on the events and facets that impact
        user profiles and personalized search results.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/personalizationStrategyParams'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new PersonalizationClient(
              new PersonalizationConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetPersonalizationStrategyAsync();
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            personalization.YOUR_APP_ID_REGION

            client, err := personalization.NewClient("YOUR_APP_ID",
            "YOUR_API_KEY", personalization.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetPersonalizationStrategy()

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            PersonalizationClient client = new
            PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION");


            // Call the API

            client.getPersonalizationStrategy();
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = personalizationClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getPersonalizationStrategy();

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getPersonalizationStrategy()


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\PersonalizationClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getPersonalizationStrategy();


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_personalization_strategy()


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: |
            # Initialize the client
            client = Algolia::PersonalizationClient.create(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            )

            # Call the API
            resp = client.get_personalization_strategy

            # use the class directly
            puts resp

            # print the JSON response
            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.getPersonalizationStrategy(

            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try PersonalizationClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getPersonalizationStrategy()
    post:
      tags:
        - strategies
      operationId: setPersonalizationStrategy
      x-acl:
        - recommendation
      summary: Set a new strategy.
      description: >-
        A strategy defines the events and facets that impact user profiles and
        personalized search results.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/personalizationStrategyParams'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: setPersonalizationStrategyResponse
                type: object
                additionalProperties: false
                required:
                  - message
                properties:
                  message:
                    type: string
                    description: A message confirming the strategy update.
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new PersonalizationClient(
              new PersonalizationConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.SetPersonalizationStrategyAsync(
              new PersonalizationStrategyParams
              {
                EventScoring = new List<EventScoring>
                {
                  new EventScoring
                  {
                    Score = 42,
                    EventName = "Algolia",
                    EventType = "Event",
                  }
                },
                FacetScoring = new List<FacetScoring>
                {
                  new FacetScoring { Score = 42, FacetName = "Event", }
                },
                PersonalizationImpact = 42,
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            personalization.YOUR_APP_ID_REGION

            client, err := personalization.NewClient("YOUR_APP_ID",
            "YOUR_API_KEY", personalization.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.SetPersonalizationStrategy(client.NewApiSetPersonalizationStrategyRequest(

              personalization.NewEmptyPersonalizationStrategyParams().SetEventScoring(
                []personalization.EventScoring{*personalization.NewEmptyEventScoring().SetScore(42).SetEventName("Algolia").SetEventType("Event")}).SetFacetScoring(
                []personalization.FacetScoring{*personalization.NewEmptyFacetScoring().SetScore(42).SetFacetName("Event")}).SetPersonalizationImpact(42),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            PersonalizationClient client = new
            PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION");


            // Call the API

            client.setPersonalizationStrategy(
              new PersonalizationStrategyParams()
                .setEventScoring(List.of(new EventScoring().setScore(42).setEventName("Algolia").setEventType("Event")))
                .setFacetScoring(List.of(new FacetScoring().setScore(42).setFacetName("Event")))
                .setPersonalizationImpact(42)
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = personalizationClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.setPersonalizationStrategy({
              eventScoring: [{ score: 42, eventName: 'Algolia', eventType: 'Event' }],
              facetScoring: [{ score: 42, facetName: 'Event' }],
              personalizationImpact: 42,
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.setPersonalizationStrategy(
              personalizationStrategyParams = PersonalizationStrategyParams(
                eventScoring = listOf(
                  EventScoring(
                    score = 42,
                    eventName = "Algolia",
                    eventType = "Event",
                  ),
                ),
                facetScoring = listOf(
                  FacetScoring(
                    score = 42,
                    facetName = "Event",
                  ),
                ),
                personalizationImpact = 42,
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\PersonalizationClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->setPersonalizationStrategy(
                ['eventScoring' => [
                    ['score' => 42,
                        'eventName' => 'Algolia',
                        'eventType' => 'Event',
                    ],
                ],
                    'facetScoring' => [
                        ['score' => 42,
                            'facetName' => 'Event',
                        ],
                    ],
                    'personalizationImpact' => 42,
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = PersonalizationClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.set_personalization_strategy(
                personalization_strategy_params={
                    "eventScoring": [
                        {
                            "score": 42,
                            "eventName": "Algolia",
                            "eventType": "Event",
                        },
                    ],
                    "facetScoring": [
                        {
                            "score": 42,
                            "facetName": "Event",
                        },
                    ],
                    "personalizationImpact": 42,
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: |
            # Initialize the client
            client = Algolia::PersonalizationClient.create(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            )

            # Call the API
            resp = client.set_personalization_strategy(
              PersonalizationStrategyParams.new(
                event_scoring: [EventScoring.new(
                  score: 42,
                  event_name: "Algolia",
                  event_type: "Event"
                )],
                facet_scoring: [FacetScoring.new(score: 42, facet_name: "Event")],
                personalization_impact: 42
              )
            )

            # use the class directly
            puts resp

            # print the JSON response
            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = PersonalizationClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            val res = client.setPersonalizationStrategy(
              personalizationStrategyParams = PersonalizationStrategyParams(
                eventScoring = Seq(
                  EventScoring(
                    score = 42,
                    eventName = "Algolia",
                    eventType = "Event"
                  )
                ),
                facetScoring = Seq(
                  FacetScoring(
                    score = 42,
                    facetName = "Event"
                  )
                ),
                personalizationImpact = 42
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try PersonalizationClient(appID: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await
            client.setPersonalizationStrategy(personalizationStrategyParams:
            PersonalizationStrategyParams(
                eventScoring: [EventScoring(score: 42, eventName: "Algolia", eventType: "Event")],
                facetScoring: [FacetScoring(score: 42, facetName: "Event")],
                personalizationImpact: 42
            ))
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    UserToken:
      name: userToken
      in: path
      required: true
      description: >-
        userToken representing the user for which to fetch the Personalization
        profile.
      schema:
        type: string
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    userToken:
      type: string
      description: >-
        userToken representing the user for which to fetch the Personalization
        profile.
    score:
      type: integer
      description: The score for the event.
    eventScoring:
      type: object
      additionalProperties: false
      required:
        - score
        - eventName
        - eventType
      properties:
        score:
          $ref: '#/components/schemas/score'
        eventName:
          type: string
          description: The name of the event.
        eventType:
          type: string
          description: The type of the event.
    facetScoring:
      type: object
      additionalProperties: false
      required:
        - score
        - facetName
      properties:
        score:
          $ref: '#/components/schemas/score'
        facetName:
          type: string
          description: The name of the facet.
    personalizationStrategyParams:
      type: object
      additionalProperties: false
      required:
        - eventScoring
        - facetScoring
        - personalizationImpact
      properties:
        eventScoring:
          type: array
          description: Scores associated with the events.
          items:
            $ref: '#/components/schemas/eventScoring'
        facetScoring:
          type: array
          description: Scores associated with the facets.
          items:
            $ref: '#/components/schemas/facetScoring'
        personalizationImpact:
          type: integer
          description: >-
            The impact that personalization has on search results: a number
            between 0 (personalization disabled) and 100 (personalization fully
            enabled).
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
x-tagGroups:
  - name: General
    tags:
      - profiles
      - strategies
