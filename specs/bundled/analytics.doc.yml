openapi: 3.0.2
info:
  title: Analytics API
  description: >
    The Analytics API lets you review your search, and click and conversion
    analytics.

    > **Note**: The API key in the `X-Algolia-API-Key` header requires the
    [`analytics`
    ACL](https://www.algolia.com/doc/guides/security/api-keys/#access-control-list-acl).
  version: 1.0.0
servers:
  - url: https://analytics.{region}.algolia.com
    variables:
      region:
        enum:
          - us
          - de
        default: us
  - url: https://analytics.algolia.com
security:
  - appId: []
    apiKey: []
tags:
  - name: advanced
    x-displayName: Advanced
    description: Advanced operations.
  - name: click
    x-displayName: Click Analytics
    description: Get all click analytics.
  - name: search
    x-displayName: Search Analytics
    description: Get all search analytics.
paths:
  /1{path}:
    get:
      operationId: customGet
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomGetAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomGet(client.NewApiCustomGetRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customGet("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customGet({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customGet(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customGet(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_get(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_get("/test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.customGet[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customGet(path: "/test/minimal")
    post:
      operationId: customPost
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomPostAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomPost(client.NewApiCustomPostRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customPost("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customPost({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customPost(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customPost(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_post(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_post("/test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.customPost[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customPost(path: "/test/minimal")
    put:
      operationId: customPut
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomPutAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomPut(client.NewApiCustomPutRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customPut("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customPut({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customPut(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customPut(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_put(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_put("/test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.customPut[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customPut(path: "/test/minimal")
    delete:
      operationId: customDelete
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomDeleteAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customDelete("/test/minimal");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.customDelete({ path: '/test/minimal'
            });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customDelete(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customDelete(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_delete(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_delete("/test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.customDelete[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customDelete(path: "/test/minimal")
  /2/searches:
    get:
      tags:
        - search
      operationId: getTopSearches
      x-acl:
        - analytics
      summary: Get top searches.
      description: >-
        Returns the most popular of the latest 1,000 searches. For each search,
        also returns the number of hits.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/ClickAnalytics'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/OrderBy'
        - $ref: '#/components/parameters/Direction'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTopSearchesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetTopSearchesAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetTopSearches(client.NewApiGetTopSearchesRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getTopSearches("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getTopSearches({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getTopSearches(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getTopSearches(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_top_searches(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_top_searches("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getTopSearches(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getTopSearches(index: "index")
  /2/searches/count:
    get:
      tags:
        - search
      operationId: getSearchesCount
      x-acl:
        - analytics
      summary: Get number of searches.
      description: Returns the number of searches within a time range.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getSearchesCountResponse
                type: object
                additionalProperties: false
                required:
                  - dates
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/parameters_count'
                  dates:
                    type: array
                    description: Search events with their associated dates and hit counts.
                    items:
                      type: object
                      title: searchEvent
                      additionalProperties: false
                      required:
                        - date
                        - count
                      properties:
                        date:
                          $ref: '#/components/schemas/date'
                        count:
                          $ref: '#/components/schemas/parameters_count'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetSearchesCountAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetSearchesCount(client.NewApiGetSearchesCountRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getSearchesCount("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getSearchesCount({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getSearchesCount(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getSearchesCount(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_searches_count(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_searches_count("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getSearchesCount(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getSearchesCount(index: "index")
  /2/searches/noResults:
    get:
      tags:
        - search
      operationId: getSearchesNoResults
      x-acl:
        - analytics
      summary: Get top searches with no results.
      description: >-
        Returns the most popular of the latest 1,000 searches that didn't return
        any results.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getSearchesNoResultsResponse
                type: object
                additionalProperties: false
                required:
                  - searches
                properties:
                  searches:
                    type: array
                    description: Searches with no results.
                    items:
                      type: object
                      title: searchNoResultEvent
                      additionalProperties: false
                      required:
                        - search
                        - count
                        - nbHits
                      properties:
                        search:
                          $ref: '#/components/schemas/search'
                        count:
                          $ref: '#/components/schemas/parameters_count'
                        nbHits:
                          $ref: '#/components/schemas/nbHits'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetSearchesNoResultsAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetSearchesNoResults(client.NewApiGetSearchesNoResultsRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getSearchesNoResults("index");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.getSearchesNoResults({ index: 'index'
            });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getSearchesNoResults(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getSearchesNoResults(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_searches_no_results(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_searches_no_results("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getSearchesNoResults(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getSearchesNoResults(index: "index")
  /2/searches/noClicks:
    get:
      tags:
        - search
      operationId: getSearchesNoClicks
      x-acl:
        - analytics
      summary: Get top searches with no clicks.
      description: >-
        Return the most popular of the last 1,000 searches that didn't lead to
        any clicks.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getSearchesNoClicksResponse
                type: object
                additionalProperties: false
                required:
                  - searches
                properties:
                  searches:
                    type: array
                    description: Searches with no clicks.
                    items:
                      type: object
                      title: searchNoClickEvent
                      additionalProperties: false
                      required:
                        - search
                        - count
                        - withFilterCount
                      properties:
                        search:
                          $ref: '#/components/schemas/search'
                        count:
                          $ref: '#/components/schemas/parameters_count'
                        withFilterCount:
                          $ref: '#/components/schemas/parameters_count'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetSearchesNoClicksAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetSearchesNoClicks(client.NewApiGetSearchesNoClicksRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getSearchesNoClicks("index");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.getSearchesNoClicks({ index: 'index'
            });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getSearchesNoClicks(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getSearchesNoClicks(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_searches_no_clicks(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_searches_no_clicks("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getSearchesNoClicks(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getSearchesNoClicks(index: "index")
  /2/searches/noResultRate:
    get:
      tags:
        - search
      operationId: getNoResultsRate
      x-acl:
        - analytics
      summary: Get no results rate.
      description: Returns the rate at which searches didn't return any results.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getNoResultsRateResponse
                type: object
                additionalProperties: false
                required:
                  - rate
                  - count
                  - noResultCount
                  - dates
                properties:
                  rate:
                    $ref: '#/components/schemas/rate'
                  count:
                    $ref: '#/components/schemas/parameters_count'
                  noResultCount:
                    $ref: '#/components/schemas/parameters_count'
                  dates:
                    type: array
                    description: >-
                      Overall count of searches without results plus a daily
                      breakdown.
                    items:
                      type: object
                      title: noResultsRateEvent
                      additionalProperties: false
                      required:
                        - date
                        - noResultCount
                        - count
                        - rate
                      properties:
                        date:
                          $ref: '#/components/schemas/date'
                        noResultCount:
                          $ref: '#/components/schemas/noResultCount'
                        count:
                          $ref: '#/components/schemas/count'
                        rate:
                          $ref: '#/components/schemas/rate'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetNoResultsRateAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetNoResultsRate(client.NewApiGetNoResultsRateRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getNoResultsRate("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getNoResultsRate({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getNoResultsRate(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getNoResultsRate(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_no_results_rate(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_no_results_rate("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getNoResultsRate(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getNoResultsRate(index: "index")
  /2/searches/noClickRate:
    get:
      tags:
        - search
      operationId: getNoClickRate
      x-acl:
        - analytics
      summary: Get no click rate.
      description: >-
        Returns the rate at which searches don't lead to any clicks. The
        endpoint returns a value for the complete given time range, as well as a
        value per day. It also returns the count of searches and searches
        without clicks.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getNoClickRateResponse
                type: object
                additionalProperties: false
                required:
                  - dates
                  - count
                  - noClickCount
                  - rate
                properties:
                  rate:
                    $ref: '#/components/schemas/rate'
                  count:
                    $ref: '#/components/schemas/clickCount'
                  noClickCount:
                    $ref: '#/components/schemas/clickCount'
                  dates:
                    type: array
                    description: >-
                      Overall count of searches without clicks plus a daily
                      breakdown.
                    items:
                      type: object
                      title: noClickRateEvent
                      additionalProperties: false
                      required:
                        - rate
                        - count
                        - noClickCount
                        - date
                      properties:
                        rate:
                          $ref: '#/components/schemas/rate'
                        count:
                          $ref: '#/components/schemas/count'
                        noClickCount:
                          $ref: '#/components/schemas/clickCount'
                        date:
                          $ref: '#/components/schemas/date'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetNoClickRateAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetNoClickRate(client.NewApiGetNoClickRateRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getNoClickRate("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getNoClickRate({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getNoClickRate(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getNoClickRate(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_no_click_rate(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_no_click_rate("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getNoClickRate(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getNoClickRate(index: "index")
  /2/hits:
    get:
      tags:
        - search
      operationId: getTopHits
      x-acl:
        - analytics
      summary: Get top hits.
      description: Return the most popular clicked results in the last 1,000 searches.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/ClickAnalytics'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTopHitsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetTopHitsAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetTopHits(client.NewApiGetTopHitsRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getTopHits("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getTopHits({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getTopHits(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getTopHits(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_top_hits(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_top_hits("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getTopHits(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getTopHits(index: "index")
  /2/users/count:
    get:
      tags:
        - search
      operationId: getUsersCount
      x-acl:
        - analytics
      summary: Get user count.
      description: Return the count of unique users.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getUsersCountResponse
                type: object
                additionalProperties: false
                required:
                  - dates
                  - count
                properties:
                  count:
                    $ref: '#/components/schemas/parameters_count'
                  dates:
                    type: array
                    description: User count.
                    items:
                      type: object
                      title: userWithDate
                      additionalProperties: false
                      required:
                        - date
                        - count
                      properties:
                        date:
                          $ref: '#/components/schemas/date'
                        count:
                          $ref: '#/components/schemas/parameters_count'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetUsersCountAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetUsersCount(client.NewApiGetUsersCountRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getUsersCount("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getUsersCount({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getUsersCount(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getUsersCount(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_users_count(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_users_count("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getUsersCount(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getUsersCount(index: "index")
  /2/filters:
    get:
      tags:
        - search
      operationId: getTopFilterAttributes
      x-acl:
        - analytics
      summary: Get top filterable attributes.
      description: >-
        Return the most popular [filterable
        attributes](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/)
        in the 1,000 most recently used filters.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTopFilterAttributesResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetTopFilterAttributesAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetTopFilterAttributes(client.NewApiGetTopFilterAttributesRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getTopFilterAttributes("index");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.getTopFilterAttributes({ index:
            'index' });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getTopFilterAttributes(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getTopFilterAttributes(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_top_filter_attributes(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_top_filter_attributes("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getTopFilterAttributes(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getTopFilterAttributes(index: "index")
  /2/filters/{attribute}:
    get:
      tags:
        - search
      operationId: getTopFilterForAttribute
      x-acl:
        - analytics
      summary: Get top filter values for an attribute.
      description: >-
        Returns the most popular filter values for an attribute in the 1,000
        most recently used filters.
      parameters:
        - $ref: '#/components/parameters/Attribute'
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTopFilterForAttributeResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: >
            // Initialize the client

            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );


            // Call the API

            var response = await
            client.GetTopFilterForAttributeAsync("myAttribute", "index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetTopFilterForAttribute(client.NewApiGetTopFilterForAttributeRequest(
              "myAttribute", "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getTopFilterForAttribute("myAttribute", "index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getTopFilterForAttribute({
              attribute: 'myAttribute',
              index: 'index',
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getTopFilterForAttribute(
              attribute = "myAttribute",
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getTopFilterForAttribute(
                'myAttribute',
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_top_filter_for_attribute(
                attribute="myAttribute",
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_top_filter_for_attribute("myAttribute", "index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getTopFilterForAttribute(
              attribute = "myAttribute",
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getTopFilterForAttribute(attribute:
            "myAttribute", index: "index")
  /2/filters/noResults:
    get:
      tags:
        - search
      operationId: getTopFiltersNoResults
      x-acl:
        - analytics
      summary: Get top filters for a no result search.
      description: >-
        Returns top filters for filter-enabled searches that don't return
        results. Limited to the 1,000 most recently used filters.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/Search'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTopFiltersNoResultsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetTopFiltersNoResultsAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetTopFiltersNoResults(client.NewApiGetTopFiltersNoResultsRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getTopFiltersNoResults("index");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.getTopFiltersNoResults({ index:
            'index' });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getTopFiltersNoResults(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getTopFiltersNoResults(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_top_filters_no_results(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_top_filters_no_results("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getTopFiltersNoResults(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getTopFiltersNoResults(index: "index")
  /2/countries:
    get:
      tags:
        - search
      operationId: getTopCountries
      x-acl:
        - analytics
      summary: Get top countries.
      description: Returns top countries. Limited to the 1,000 most frequent ones.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getTopCountriesResponse
                type: object
                additionalProperties: false
                required:
                  - countries
                properties:
                  countries:
                    type: array
                    description: Countries
                    items:
                      type: object
                      title: topCountry
                      additionalProperties: false
                      required:
                        - country
                        - count
                      properties:
                        country:
                          description: Country.
                          type: string
                          example: UK
                        count:
                          $ref: '#/components/schemas/parameters_count'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetTopCountriesAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetTopCountries(client.NewApiGetTopCountriesRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getTopCountries("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getTopCountries({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getTopCountries(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getTopCountries(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_top_countries(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_top_countries("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getTopCountries(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getTopCountries(index: "index")
  /2/clicks/averageClickPosition:
    get:
      tags:
        - click
      operationId: getAverageClickPosition
      x-acl:
        - analytics
      summary: Get average click position.
      description: >
        Return the average click position for the complete time range and for
        individual days.

        > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it
        means Algolia didn't receive any click events for tracked searches. A
        _tracked_ search is a search request where the `clickAnalytics`
        parameter is `true`.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getAverageClickPositionResponse
                type: object
                additionalProperties: false
                required:
                  - average
                  - clickCount
                  - dates
                properties:
                  average:
                    $ref: '#/components/schemas/average'
                  clickCount:
                    $ref: '#/components/schemas/clickCount'
                  dates:
                    type: array
                    description: Average click positions.
                    items:
                      type: object
                      title: averageClickEvent
                      additionalProperties: false
                      required:
                        - average
                        - clickCount
                        - date
                      properties:
                        average:
                          $ref: '#/components/schemas/average'
                        clickCount:
                          $ref: '#/components/schemas/clickCount'
                        date:
                          $ref: '#/components/schemas/date'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetAverageClickPositionAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetAverageClickPosition(client.NewApiGetAverageClickPositionRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getAverageClickPosition("index");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.getAverageClickPosition({ index:
            'index' });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getAverageClickPosition(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getAverageClickPosition(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_average_click_position(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_average_click_position("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getAverageClickPosition(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getAverageClickPosition(index: "index")
  /2/clicks/positions:
    get:
      tags:
        - click
      operationId: getClickPositions
      x-acl:
        - analytics
      summary: Get click positions.
      description: >
        Show the number of clicks events and their associated position in the
        search results.


        > **Note**: If all `positions` have a `clickCount` of `0` or `null`, it
        means Algolia didn't receive any click events for tracked searches. A
        _tracked_ search is a search request where the `clickAnalytics`
        parameter is `true`.
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getClickPositionsResponse
                type: object
                additionalProperties: false
                required:
                  - positions
                properties:
                  positions:
                    type: array
                    description: Click positions.
                    minItems: 2
                    maxItems: 2
                    items:
                      type: object
                      title: clickPosition
                      additionalProperties: false
                      required:
                        - position
                        - clickCount
                      properties:
                        position:
                          description: >
                            Range of positions with the following pattern:

                            - For positions 1 to 10, the number of click events
                            are shown for each position - For positions 11 to
                            20, all click events are grouped - For positions 21
                            and up, all click events are grouped.
                          type: array
                          example:
                            - 10
                            - 10
                          items:
                            type: integer
                        clickCount:
                          $ref: '#/components/schemas/clickCount'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetClickPositionsAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetClickPositions(client.NewApiGetClickPositionsRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getClickPositions("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getClickPositions({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getClickPositions(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getClickPositions(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_click_positions(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_click_positions("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getClickPositions(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getClickPositions(index: "index")
  /2/clicks/clickThroughRate:
    get:
      tags:
        - click
      operationId: getClickThroughRate
      x-acl:
        - analytics
      summary: Get click-through rate (CTR).
      description: >-
        Returns a [click-through rate
        (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getClickThroughRateResponse
                type: object
                additionalProperties: false
                required:
                  - dates
                  - clickCount
                  - trackedSearchCount
                  - rate
                properties:
                  rate:
                    $ref: '#/components/schemas/rate'
                  clickCount:
                    $ref: '#/components/schemas/clickCount'
                  trackedSearchCount:
                    $ref: '#/components/schemas/trackedSearchCount'
                  dates:
                    type: array
                    description: Click-through rate events.
                    items:
                      type: object
                      title: clickThroughRateEvent
                      additionalProperties: false
                      required:
                        - rate
                        - clickCount
                        - trackedSearchCount
                        - date
                      properties:
                        rate:
                          $ref: '#/components/schemas/rate'
                        clickCount:
                          $ref: '#/components/schemas/clickCount'
                        trackedSearchCount:
                          $ref: '#/components/schemas/trackedSearchCount'
                        date:
                          $ref: '#/components/schemas/date'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetClickThroughRateAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetClickThroughRate(client.NewApiGetClickThroughRateRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getClickThroughRate("index");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.getClickThroughRate({ index: 'index'
            });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getClickThroughRate(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getClickThroughRate(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_click_through_rate(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_click_through_rate("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getClickThroughRate(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getClickThroughRate(index: "index")
  /2/conversions/conversionRate:
    get:
      tags:
        - click
      operationId: getConversationRate
      x-acl:
        - analytics
      summary: Get conversion rate (CR).
      description: >-
        Return a [conversion
        rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
      parameters:
        - $ref: '#/components/parameters/Index'
        - $ref: '#/components/parameters/StartDate'
        - $ref: '#/components/parameters/EndDate'
        - $ref: '#/components/parameters/Tags'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getConversationRateResponse
                type: object
                additionalProperties: false
                required:
                  - dates
                  - trackedSearchCount
                  - conversionCount
                  - rate
                properties:
                  rate:
                    $ref: '#/components/schemas/rate'
                  trackedSearchCount:
                    $ref: '#/components/schemas/trackedSearchCount'
                  conversionCount:
                    $ref: '#/components/schemas/conversionCount'
                  dates:
                    type: array
                    description: Conversion events.
                    items:
                      type: object
                      title: conversionRateEvent
                      additionalProperties: false
                      required:
                        - rate
                        - trackedSearchCount
                        - conversionCount
                        - date
                      properties:
                        rate:
                          $ref: '#/components/schemas/rate'
                        trackedSearchCount:
                          $ref: '#/components/schemas/trackedSearchCount'
                        conversionCount:
                          $ref: '#/components/schemas/conversionCount'
                        date:
                          $ref: '#/components/schemas/date'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetConversationRateAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err :=
            client.GetConversationRate(client.NewApiGetConversationRateRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getConversationRate("index");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.getConversationRate({ index: 'index'
            });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getConversationRate(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getConversationRate(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_conversation_rate(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_conversation_rate("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getConversationRate(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getConversationRate(index: "index")
  /2/status:
    get:
      tags:
        - advanced
      operationId: getStatus
      x-acl:
        - analytics
      summary: Get Analytics API status.
      description: >
        Return the latest update time of the Analytics API for an index. If the
        index has been recently created or no search has been performed yet,
        `updatedAt` will be `null`.

        > **Note**: The Analytics API is updated every 5&nbsp;minutes.
      parameters:
        - $ref: '#/components/parameters/Index'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: getStatusResponse
                type: object
                additionalProperties: false
                required:
                  - updatedAt
                properties:
                  updatedAt:
                    $ref: '#/components/schemas/updatedAt'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AnalyticsClient(
              new AnalyticsConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetStatusAsync("index");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            analytics.YOUR_APP_ID_REGION

            client, err := analytics.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            analytics.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetStatus(client.NewApiGetStatusRequest(
              "index",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AnalyticsClient client = new AnalyticsClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getStatus("index");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = analyticsClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getStatus({ index: 'index' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getStatus(
              index = "index",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AnalyticsClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getStatus(
                'index',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AnalyticsClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_status(
                index="index",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AnalyticsClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_status("index")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AnalyticsClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getStatus(
              index = "index"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AnalyticsClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getStatus(index: "index")
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    Index:
      in: query
      name: index
      description: Index name.
      required: true
      schema:
        type: string
        example: YourIndexName
    ClickAnalytics:
      in: query
      name: clickAnalytics
      description: >-
        Whether to include [click and
        conversion](https://www.algolia.com/doc/guides/sending-events/getting-started/)
        rates for a search.
      schema:
        type: boolean
        default: false
    StartDate:
      in: query
      name: startDate
      description: Start date (`YYYY-MM-DD`) of the period to analyze.
      schema:
        type: string
        format: date
        example: '2022-09-19'
    EndDate:
      in: query
      name: endDate
      description: End date (`YYYY-MM-DD`) of the period to analyze.
      schema:
        type: string
        format: date
        example: '2023-01-21'
    OrderBy:
      in: query
      name: orderBy
      description: Reorder the results.
      schema:
        $ref: '#/components/schemas/orderBy'
    Direction:
      in: query
      name: direction
      description: |
        Sorting direction of the results: ascending or descending.
      schema:
        $ref: '#/components/schemas/direction'
    Limit:
      in: query
      name: limit
      description: Number of items to return.
      schema:
        type: integer
        default: 10
    Offset:
      in: query
      name: offset
      description: Position of the first item to return.
      schema:
        type: integer
        default: 0
        minimum: 0
    Tags:
      name: tags
      in: query
      description: >-
        Filter analytics on the
        [`analyticsTags`](https://www.algolia.com/doc/api-reference/api-parameters/analyticsTags/)
        set at search time. Multiple tags can be combined with the operators OR
        and AND. If a tag contains characters like spaces or parentheses, it
        must be URL-encoded.
      example: device:mobile%20phone
      schema:
        type: string
    Search:
      in: query
      name: search
      description: User query.
      example: enable ab test
      schema:
        type: string
    Attribute:
      in: path
      name: attribute
      description: Attribute name.
      required: true
      schema:
        type: string
        example: brand
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    orderBy:
      type: string
      description: >
        Method for ordering results.

        `clickThroughRate`, `conversionRate` and `averageClickPosition` are only
        available if the `clickAnalytics` parameter is `true`.
      enum:
        - searchCount
        - clickThroughRate
        - conversionRate
        - averageClickPosition
      default: searchCount
    direction:
      type: string
      enum:
        - asc
        - desc
      default: asc
    search:
      description: User query.
      example: separator
      type: string
    count:
      description: >-
        Number of tracked _and_ untracked searches (where the `clickAnalytics`
        parameter isn't `true`).
      type: integer
      example: 504
    nbHits:
      type: integer
      description: Number of results (hits).
      example: 20
    topSearchesResponse:
      type: object
      additionalProperties: false
      required:
        - searches
      properties:
        searches:
          type: array
          description: Top searches with their hits count.
          items:
            type: object
            title: topSearch
            additionalProperties: false
            required:
              - search
              - count
              - nbHits
            properties:
              search:
                $ref: '#/components/schemas/search'
              count:
                $ref: '#/components/schemas/count'
              nbHits:
                $ref: '#/components/schemas/nbHits'
    rate:
      type: number
      format: double
      description: >
        [Click-through rate
        (CTR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
      minimum: 0
      maximum: 1
      example: 0.14634193523426317
    averageClickPosition:
      type: integer
      description: >-
        Average
        [position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position)
        of clicked search result.
      example: 1
    conversionRate:
      type: number
      format: double
      description: >
        [Conversion rate
        (CR)](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
      example: 0
    trackedSearchCount:
      oneOf:
        - type: integer
          example: 2
          description: >-
            Number of tracked searches. This is the number of search requests
            where the `clickAnalytics` parameter is `true`.
        - type: 'null'
    clickCount:
      type: integer
      description: Number of click events.
      example: 162
    conversionCount:
      type: integer
      description: Number of converted clicks.
      example: 0
    topSearchesResponseWithAnalytics:
      type: object
      additionalProperties: false
      required:
        - searches
      properties:
        searches:
          type: array
          description: Top searches with their hits count and analytics.
          items:
            type: object
            title: topSearchWithAnalytics
            additionalProperties: false
            required:
              - search
              - count
              - nbHits
              - clickThroughRate
              - averageClickPosition
              - conversionRate
              - trackedSearchCount
              - clickCount
              - conversionCount
            properties:
              search:
                $ref: '#/components/schemas/search'
              count:
                $ref: '#/components/schemas/count'
              clickThroughRate:
                $ref: '#/components/schemas/rate'
              averageClickPosition:
                $ref: '#/components/schemas/averageClickPosition'
              conversionRate:
                $ref: '#/components/schemas/conversionRate'
              trackedSearchCount:
                $ref: '#/components/schemas/trackedSearchCount'
              clickCount:
                $ref: '#/components/schemas/clickCount'
              conversionCount:
                $ref: '#/components/schemas/conversionCount'
              nbHits:
                $ref: '#/components/schemas/nbHits'
    getTopSearchesResponse:
      oneOf:
        - $ref: '#/components/schemas/topSearchesResponse'
        - $ref: '#/components/schemas/topSearchesResponseWithAnalytics'
    parameters_count:
      description: Number of occurrences.
      example: 2
      type: integer
    date:
      type: string
      description: Date of the event in the format YYYY-MM-DD.
      example: '2023-06-14'
    noResultCount:
      description: Number of occurences.
      type: integer
      example: 54
    hit:
      description: Hit.
      type: string
      example: method-export-rules-php
    topHitsResponse:
      type: object
      additionalProperties: false
      required:
        - hits
      properties:
        hits:
          type: array
          description: Top hits.
          items:
            type: object
            title: topHit
            additionalProperties: false
            required:
              - hit
              - count
            properties:
              hit:
                $ref: '#/components/schemas/hit'
              count:
                $ref: '#/components/schemas/parameters_count'
    topHitsResponseWithAnalytics:
      type: object
      additionalProperties: false
      required:
        - hits
      properties:
        hits:
          type: array
          description: Top hits.
          items:
            type: object
            title: topHitWithAnalytics
            additionalProperties: false
            required:
              - hit
              - count
              - clickThroughRate
              - conversionRate
              - trackedSearchCount
              - clickCount
              - conversionCount
            properties:
              hit:
                $ref: '#/components/schemas/hit'
              count:
                $ref: '#/components/schemas/parameters_count'
              clickThroughRate:
                $ref: '#/components/schemas/rate'
              conversionRate:
                $ref: '#/components/schemas/conversionRate'
              trackedSearchCount:
                $ref: '#/components/schemas/trackedSearchCount'
              clickCount:
                $ref: '#/components/schemas/clickCount'
              conversionCount:
                $ref: '#/components/schemas/conversionCount'
    getTopHitsResponse:
      oneOf:
        - $ref: '#/components/schemas/topHitsResponse'
        - $ref: '#/components/schemas/topHitsResponseWithAnalytics'
    attribute:
      description: Attribute name.
      type: string
      example: url
    getTopFilterAttribute:
      type: object
      additionalProperties: false
      required:
        - attribute
        - count
      properties:
        attribute:
          $ref: '#/components/schemas/attribute'
        count:
          $ref: '#/components/schemas/parameters_count'
    getTopFilterAttributesResponse:
      type: object
      additionalProperties: false
      required:
        - attributes
      properties:
        attributes:
          type: array
          description: Filterable attributes.
          items:
            $ref: '#/components/schemas/getTopFilterAttribute'
    operator:
      description: Operator.
      type: string
      example: ':'
    value:
      description: Attribute value.
      type: string
      example: integration
    getTopFilterForAttribute:
      type: object
      additionalProperties: false
      required:
        - operator
        - attribute
        - value
        - count
      properties:
        attribute:
          $ref: '#/components/schemas/attribute'
        operator:
          $ref: '#/components/schemas/operator'
        value:
          $ref: '#/components/schemas/value'
        count:
          $ref: '#/components/schemas/parameters_count'
    getTopFilterForAttributeResponse:
      type: object
      additionalProperties: false
      required:
        - values
      properties:
        values:
          type: array
          description: Filter values for an attribute.
          items:
            $ref: '#/components/schemas/getTopFilterForAttribute'
    getTopFiltersNoResultsValue:
      type: object
      additionalProperties: false
      required:
        - attribute
        - operator
        - value
      properties:
        attribute:
          $ref: '#/components/schemas/attribute'
        operator:
          $ref: '#/components/schemas/operator'
        value:
          $ref: '#/components/schemas/value'
    getTopFiltersNoResultsValues:
      type: object
      additionalProperties: false
      required:
        - values
        - count
      properties:
        count:
          $ref: '#/components/schemas/parameters_count'
        values:
          type: array
          description: Filters with no results.
          items:
            $ref: '#/components/schemas/getTopFiltersNoResultsValue'
    getTopFiltersNoResultsResponse:
      type: object
      additionalProperties: false
      required:
        - values
      properties:
        values:
          type: array
          description: Filters with no results.
          items:
            $ref: '#/components/schemas/getTopFiltersNoResultsValues'
    average:
      type: number
      format: double
      description: Average count of all click events.
      example: 2.3344634550185286
    updatedAt:
      type: string
      example: '2023-07-04T12:49:15Z'
      description: >-
        Timestamp of the last update in [ISO
        8601](https://wikipedia.org/wiki/ISO_8601) format.
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
x-tagGroups:
  - name: General
    tags:
      - search
      - click
  - name: Others
    tags:
      - advanced
