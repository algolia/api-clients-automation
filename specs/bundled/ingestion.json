{
  "openapi": "3.0.2",
  "info": {
    "title": "Ingestion API",
    "description": "API powering the Data Ingestion connectors of Algolia.",
    "version": "1.0"
  },
  "components": {
    "securitySchemes": {
      "appId": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Algolia-Application-Id"
      },
      "apiKey": {
        "type": "apiKey",
        "in": "header",
        "name": "X-Algolia-API-Key"
      }
    },
    "parameters": {
      "PathInPath": {
        "name": "path",
        "in": "path",
        "description": "Path of the endpoint, anything after \"/1\" must be specified.",
        "required": true,
        "schema": {
          "type": "string",
          "example": "/keys"
        }
      },
      "Parameters": {
        "name": "parameters",
        "in": "query",
        "description": "Query parameters to apply to the current query.",
        "schema": {
          "type": "object",
          "additionalProperties": true
        }
      },
      "itemsPerPage": {
        "name": "itemsPerPage",
        "in": "query",
        "description": "The number of items per page to return.",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "page": {
        "name": "page",
        "in": "query",
        "description": "The page number to fetch, starting at 1.",
        "required": false,
        "schema": {
          "type": "integer"
        }
      },
      "type": {
        "name": "type",
        "in": "query",
        "description": "The type of the authentications to retrieve.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Type of the Authentication, defines what kind of object is stored in the input.",
            "enum": [
              "googleServiceAccount",
              "basic",
              "apiKey",
              "oauth",
              "algolia"
            ]
          },
          "example": "basic,oauth"
        }
      },
      "platform": {
        "name": "platform",
        "in": "query",
        "description": "The platform of the authentications to retrieve.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "oneOf": [
              {
                "type": "string",
                "nullable": true,
                "description": "Describe which platform the Authentication is used for.",
                "enum": [
                  "bigcommerce",
                  "commercetools"
                ]
              },
              {
                "type": "string",
                "description": "Used to filter Authentication without platform property.",
                "enum": [
                  "none"
                ]
              }
            ]
          },
          "example": "commercetools,none"
        }
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "description": "The key by which the list should be sorted.",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Used to sort the Authentication list endpoint.",
          "enum": [
            "name",
            "auth_type",
            "platform",
            "updatedAt",
            "createdAt"
          ]
        }
      },
      "order": {
        "name": "order",
        "in": "query",
        "description": "The order of the returned list.",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Used to order a sorted request.",
          "enum": [
            "asc",
            "desc"
          ]
        }
      },
      "pathAuthenticationID": {
        "name": "authenticationID",
        "in": "path",
        "required": true,
        "description": "The authentication UUID.",
        "schema": {
          "type": "string",
          "description": "The authentication UUID.",
          "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        }
      },
      "destinationParameters_type": {
        "name": "type",
        "in": "query",
        "description": "The type of the destinations to retrive.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
            "enum": [
              "search",
              "insights",
              "flow"
            ]
          },
          "example": "search"
        }
      },
      "authenticationID": {
        "name": "authenticationID",
        "in": "query",
        "description": "The authenticationIDs of the destinations to retrive.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          }
        }
      },
      "destinationParameters_sort": {
        "name": "sort",
        "in": "query",
        "description": "The key by which the list should be sorted.",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Used to sort the Destination list endpoint.",
          "enum": [
            "name",
            "type",
            "updatedAt",
            "createdAt"
          ]
        }
      },
      "pathDestinationID": {
        "name": "destinationID",
        "in": "path",
        "required": true,
        "description": "The destination UUID.",
        "schema": {
          "type": "string",
          "description": "The destination UUID.",
          "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        }
      },
      "sourceParameters_type": {
        "name": "type",
        "in": "query",
        "description": "The type of the sources to retrieve.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "bigcommerce",
              "commercetools",
              "json",
              "csv",
              "bigquery",
              "docker"
            ]
          },
          "example": "commercetools,bigcommerce"
        }
      },
      "sourceParameters_authenticationID": {
        "name": "authenticationID",
        "in": "query",
        "description": "The authenticationIDs of the sources to retrieve. 'none' returns sources that doesn't have an authentication.\n",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "example": [
            "10000000-0a75-4000-a000-000000000001",
            "none"
          ]
        }
      },
      "sourceParameters_sort": {
        "name": "sort",
        "in": "query",
        "description": "The key by which the list should be sorted.",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Used to sort the Source list endpoint.",
          "enum": [
            "name",
            "type",
            "updatedAt",
            "createdAt"
          ]
        }
      },
      "pathSourceID": {
        "name": "sourceID",
        "in": "path",
        "required": true,
        "description": "The source UUID.",
        "schema": {
          "type": "string",
          "description": "The source UUID.",
          "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        }
      },
      "action": {
        "name": "action",
        "in": "query",
        "required": false,
        "description": "The action of the tasks to retrieve.",
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "description": "An array of actions to perform on the Algolia index.",
          "items": {
            "type": "string",
            "description": "The action to perform on the Algolia index.",
            "enum": [
              "replace",
              "save",
              "partial"
            ]
          },
          "example": "save,replace"
        }
      },
      "enabled": {
        "name": "enabled",
        "in": "query",
        "description": "Whether the task is enabled or not.",
        "required": false,
        "schema": {
          "type": "boolean"
        }
      },
      "sourceID": {
        "name": "sourceID",
        "in": "query",
        "description": "The sourceIDs of the tasks to retrive.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The source UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          }
        }
      },
      "destinationID": {
        "name": "destinationID",
        "in": "query",
        "description": "The destinationIDs of the tasks to retrive.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The destination UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          }
        }
      },
      "triggerType": {
        "name": "triggerType",
        "in": "query",
        "description": "The trigger type of the task.",
        "required": false,
        "style": "form",
        "explode": false,
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "description": "The type of the task reflect how it can be used:\n  - onDemand: a task that runs manually\n  - schedule: a task that runs regularly, following a given cron expression\n  - subscription: a task that runs after a subscription event is received from an integration (e.g. Webhook).\n",
            "enum": [
              "onDemand",
              "schedule",
              "subscription"
            ]
          },
          "example": "onDemand,schedule"
        }
      },
      "taskParameters_sort": {
        "name": "sort",
        "in": "query",
        "description": "The key by which the list should be sorted.",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Used to sort the Task list endpoint.",
          "enum": [
            "enabled",
            "triggerType",
            "action",
            "updatedAt",
            "createdAt"
          ]
        }
      },
      "pathTaskID": {
        "name": "taskID",
        "in": "path",
        "required": true,
        "description": "The task UUID.",
        "schema": {
          "type": "string",
          "description": "The task UUID.",
          "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        }
      },
      "runStatus": {
        "name": "status",
        "in": "query",
        "description": "Filter the status of the runs.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "created",
              "started",
              "idled",
              "finished",
              "skipped"
            ]
          }
        }
      },
      "taskID": {
        "name": "taskID",
        "in": "query",
        "description": "Filter by taskID.",
        "schema": {
          "type": "string",
          "description": "The task UUID.",
          "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        }
      },
      "runSort": {
        "name": "sort",
        "in": "query",
        "description": "The key by which the list should be sorted.",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Used to sort the Run list endpoint.",
          "enum": [
            "status",
            "updatedAt",
            "createdAt"
          ]
        }
      },
      "pathRunID": {
        "name": "runID",
        "in": "path",
        "required": true,
        "description": "The run UUID.",
        "schema": {
          "type": "string",
          "description": "The run UUID.",
          "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        }
      },
      "eventStatus": {
        "name": "status",
        "in": "query",
        "description": "Filter the status of the events.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "created",
              "started",
              "retried",
              "failed",
              "succeeded",
              "critical"
            ]
          }
        }
      },
      "eventType": {
        "name": "type",
        "in": "query",
        "description": "Filter the type of the events.",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "fetch",
              "record",
              "log",
              "transform"
            ]
          }
        }
      },
      "eventSort": {
        "name": "sort",
        "in": "query",
        "description": "The key by which the list should be sorted.",
        "required": false,
        "schema": {
          "type": "string",
          "description": "Used to sort the Event list endpoint.",
          "enum": [
            "status",
            "type",
            "publishedAt"
          ]
        }
      },
      "pathEventID": {
        "name": "eventID",
        "in": "path",
        "required": true,
        "description": "The event UUID.",
        "schema": {
          "type": "string",
          "description": "The event UUID.",
          "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        }
      }
    },
    "schemas": {
      "ErrorBase": {
        "description": "Error.",
        "type": "object",
        "additionalProperties": true,
        "properties": {
          "message": {
            "type": "string",
            "example": "Invalid Application-Id or API-Key"
          }
        }
      },
      "AuthenticationType": {
        "type": "string",
        "description": "Type of the Authentication, defines what kind of object is stored in the input.",
        "enum": [
          "googleServiceAccount",
          "basic",
          "apiKey",
          "oauth",
          "algolia"
        ]
      },
      "Platform": {
        "type": "string",
        "nullable": true,
        "description": "Describe which platform the Authentication is used for.",
        "enum": [
          "bigcommerce",
          "commercetools"
        ]
      },
      "platformNone": {
        "type": "string",
        "description": "Used to filter Authentication without platform property.",
        "enum": [
          "none"
        ]
      },
      "platformWithNone": {
        "oneOf": [
          {
            "type": "string",
            "nullable": true,
            "description": "Describe which platform the Authentication is used for.",
            "enum": [
              "bigcommerce",
              "commercetools"
            ]
          },
          {
            "type": "string",
            "description": "Used to filter Authentication without platform property.",
            "enum": [
              "none"
            ]
          }
        ]
      },
      "authenticationSortKeys": {
        "type": "string",
        "description": "Used to sort the Authentication list endpoint.",
        "enum": [
          "name",
          "auth_type",
          "platform",
          "updatedAt",
          "createdAt"
        ]
      },
      "orderKeys": {
        "type": "string",
        "description": "Used to order a sorted request.",
        "enum": [
          "asc",
          "desc"
        ]
      },
      "authenticationID": {
        "type": "string",
        "description": "The authentication UUID.",
        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      },
      "name": {
        "type": "string",
        "description": "An human readable name describing the object."
      },
      "AuthGoogleServiceAccountPartial": {
        "type": "object",
        "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
        "additionalProperties": false,
        "properties": {
          "clientEmail": {
            "type": "string",
            "description": "Email address of the Service Account.",
            "example": "service-account-name@project-id.iam.gserviceaccount.com"
          },
          "privateKey": {
            "type": "string",
            "description": "Private key of the Service Account."
          }
        }
      },
      "AuthBasicPartial": {
        "type": "object",
        "description": "Authentication input for Basic login with username and password.",
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        }
      },
      "AuthAPIKeyPartial": {
        "type": "object",
        "description": "Authentication input used for token credentials.",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string"
          }
        }
      },
      "AuthOAuthPartial": {
        "type": "object",
        "description": "Authentication input for OAuth login.",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "The OAuth endpoint URL."
          },
          "client_id": {
            "type": "string",
            "description": "The clientID."
          },
          "client_secret": {
            "type": "string",
            "description": "The secret."
          }
        }
      },
      "AuthAlgoliaPartial": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "appID": {
            "type": "string",
            "description": "Algolia Application ID."
          },
          "apiKey": {
            "type": "string",
            "description": "Algolia API Key, with the correct rights to push to an index and change settings."
          }
        }
      },
      "AuthInputPartial": {
        "oneOf": [
          {
            "type": "object",
            "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
            "additionalProperties": false,
            "properties": {
              "clientEmail": {
                "type": "string",
                "description": "Email address of the Service Account.",
                "example": "service-account-name@project-id.iam.gserviceaccount.com"
              },
              "privateKey": {
                "type": "string",
                "description": "Private key of the Service Account."
              }
            }
          },
          {
            "type": "object",
            "description": "Authentication input for Basic login with username and password.",
            "additionalProperties": false,
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "description": "Authentication input used for token credentials.",
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string"
              }
            }
          },
          {
            "type": "object",
            "description": "Authentication input for OAuth login.",
            "additionalProperties": false,
            "properties": {
              "url": {
                "type": "string",
                "description": "The OAuth endpoint URL."
              },
              "client_id": {
                "type": "string",
                "description": "The clientID."
              },
              "client_secret": {
                "type": "string",
                "description": "The secret."
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "appID": {
                "type": "string",
                "description": "Algolia Application ID."
              },
              "apiKey": {
                "type": "string",
                "description": "Algolia API Key, with the correct rights to push to an index and change settings."
              }
            }
          }
        ]
      },
      "createdAt": {
        "type": "string",
        "description": "Date of creation (RFC3339 format)."
      },
      "updatedAt": {
        "type": "string",
        "description": "Date of last update (RFC3339 format)."
      },
      "Authentication": {
        "type": "object",
        "description": "An authentication is used to login into a Source or a Destination, with obfuscated input.",
        "additionalProperties": false,
        "properties": {
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "type": {
            "type": "string",
            "description": "Type of the Authentication, defines what kind of object is stored in the input.",
            "enum": [
              "googleServiceAccount",
              "basic",
              "apiKey",
              "oauth",
              "algolia"
            ]
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "platform": {
            "type": "string",
            "nullable": true,
            "description": "Describe which platform the Authentication is used for.",
            "enum": [
              "bigcommerce",
              "commercetools"
            ]
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
                "additionalProperties": false,
                "properties": {
                  "clientEmail": {
                    "type": "string",
                    "description": "Email address of the Service Account.",
                    "example": "service-account-name@project-id.iam.gserviceaccount.com"
                  },
                  "privateKey": {
                    "type": "string",
                    "description": "Private key of the Service Account."
                  }
                }
              },
              {
                "type": "object",
                "description": "Authentication input for Basic login with username and password.",
                "additionalProperties": false,
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "description": "Authentication input used for token credentials.",
                "additionalProperties": false,
                "properties": {
                  "key": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "description": "Authentication input for OAuth login.",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The OAuth endpoint URL."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The clientID."
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The secret."
                  }
                }
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "appID": {
                    "type": "string",
                    "description": "Algolia Application ID."
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "Algolia API Key, with the correct rights to push to an index and change settings."
                  }
                }
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last update (RFC3339 format)."
          }
        },
        "required": [
          "authenticationID",
          "type",
          "name",
          "input",
          "createdAt"
        ]
      },
      "Pagination": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "nbPages": {
            "type": "integer"
          },
          "page": {
            "type": "integer"
          },
          "nbItems": {
            "type": "integer"
          },
          "itemsPerPage": {
            "type": "integer"
          }
        },
        "required": [
          "nbPages",
          "page",
          "nbItems",
          "itemsPerPage"
        ]
      },
      "AuthGoogleServiceAccount": {
        "type": "object",
        "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
        "additionalProperties": false,
        "properties": {
          "clientEmail": {
            "type": "string",
            "description": "Email address of the Service Account.",
            "example": "service-account-name@project-id.iam.gserviceaccount.com"
          },
          "privateKey": {
            "type": "string",
            "description": "Private key of the Service Account."
          }
        },
        "required": [
          "clientEmail",
          "privateKey"
        ]
      },
      "AuthBasic": {
        "type": "object",
        "description": "Authentication input for Basic login with username and password.",
        "additionalProperties": false,
        "properties": {
          "username": {
            "type": "string"
          },
          "password": {
            "type": "string"
          }
        },
        "required": [
          "username",
          "password"
        ]
      },
      "AuthAPIKey": {
        "type": "object",
        "description": "Authentication input used for token credentials.",
        "additionalProperties": false,
        "properties": {
          "key": {
            "type": "string"
          }
        },
        "required": [
          "key"
        ]
      },
      "AuthOAuth": {
        "type": "object",
        "description": "Authentication input for OAuth login.",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "The OAuth endpoint URL."
          },
          "client_id": {
            "type": "string",
            "description": "The clientID."
          },
          "client_secret": {
            "type": "string",
            "description": "The secret."
          }
        },
        "required": [
          "url",
          "client_id",
          "client_secret"
        ]
      },
      "AuthAlgolia": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "appID": {
            "type": "string",
            "description": "Algolia Application ID."
          },
          "apiKey": {
            "type": "string",
            "description": "Algolia API Key, with the correct rights to push to an index and change settings."
          }
        },
        "required": [
          "appID",
          "apiKey"
        ]
      },
      "AuthInput": {
        "oneOf": [
          {
            "type": "object",
            "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
            "additionalProperties": false,
            "properties": {
              "clientEmail": {
                "type": "string",
                "description": "Email address of the Service Account.",
                "example": "service-account-name@project-id.iam.gserviceaccount.com"
              },
              "privateKey": {
                "type": "string",
                "description": "Private key of the Service Account."
              }
            },
            "required": [
              "clientEmail",
              "privateKey"
            ]
          },
          {
            "type": "object",
            "description": "Authentication input for Basic login with username and password.",
            "additionalProperties": false,
            "properties": {
              "username": {
                "type": "string"
              },
              "password": {
                "type": "string"
              }
            },
            "required": [
              "username",
              "password"
            ]
          },
          {
            "type": "object",
            "description": "Authentication input used for token credentials.",
            "additionalProperties": false,
            "properties": {
              "key": {
                "type": "string"
              }
            },
            "required": [
              "key"
            ]
          },
          {
            "type": "object",
            "description": "Authentication input for OAuth login.",
            "additionalProperties": false,
            "properties": {
              "url": {
                "type": "string",
                "description": "The OAuth endpoint URL."
              },
              "client_id": {
                "type": "string",
                "description": "The clientID."
              },
              "client_secret": {
                "type": "string",
                "description": "The secret."
              }
            },
            "required": [
              "url",
              "client_id",
              "client_secret"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "appID": {
                "type": "string",
                "description": "Algolia Application ID."
              },
              "apiKey": {
                "type": "string",
                "description": "Algolia API Key, with the correct rights to push to an index and change settings."
              }
            },
            "required": [
              "appID",
              "apiKey"
            ]
          }
        ]
      },
      "AuthenticationCreate": {
        "type": "object",
        "description": "The payload when creating an authentication.",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Authentication, defines what kind of object is stored in the input.",
            "enum": [
              "googleServiceAccount",
              "basic",
              "apiKey",
              "oauth",
              "algolia"
            ]
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "platform": {
            "type": "string",
            "nullable": true,
            "description": "Describe which platform the Authentication is used for.",
            "enum": [
              "bigcommerce",
              "commercetools"
            ]
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
                "additionalProperties": false,
                "properties": {
                  "clientEmail": {
                    "type": "string",
                    "description": "Email address of the Service Account.",
                    "example": "service-account-name@project-id.iam.gserviceaccount.com"
                  },
                  "privateKey": {
                    "type": "string",
                    "description": "Private key of the Service Account."
                  }
                },
                "required": [
                  "clientEmail",
                  "privateKey"
                ]
              },
              {
                "type": "object",
                "description": "Authentication input for Basic login with username and password.",
                "additionalProperties": false,
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                },
                "required": [
                  "username",
                  "password"
                ]
              },
              {
                "type": "object",
                "description": "Authentication input used for token credentials.",
                "additionalProperties": false,
                "properties": {
                  "key": {
                    "type": "string"
                  }
                },
                "required": [
                  "key"
                ]
              },
              {
                "type": "object",
                "description": "Authentication input for OAuth login.",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The OAuth endpoint URL."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The clientID."
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The secret."
                  }
                },
                "required": [
                  "url",
                  "client_id",
                  "client_secret"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "appID": {
                    "type": "string",
                    "description": "Algolia Application ID."
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "Algolia API Key, with the correct rights to push to an index and change settings."
                  }
                },
                "required": [
                  "appID",
                  "apiKey"
                ]
              }
            ]
          }
        },
        "required": [
          "type",
          "name",
          "input"
        ]
      },
      "AuthenticationCreateResponse": {
        "type": "object",
        "description": "Response from the API when the Authentication is successfully created.",
        "additionalProperties": false,
        "properties": {
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          }
        },
        "required": [
          "authenticationID",
          "name",
          "createdAt"
        ]
      },
      "AuthenticationSearch": {
        "type": "object",
        "additionalProperties": false,
        "description": "Payload to search for multiple authentications, based on the given `authenticationIDs`.",
        "properties": {
          "authenticationIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The authentication UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        },
        "required": [
          "authenticationIDs"
        ]
      },
      "DeleteResponse": {
        "type": "object",
        "properties": {
          "deletedAt": {
            "type": "string",
            "description": "Date of deletion (RFC3339 format)."
          }
        },
        "required": [
          "deletedAt"
        ]
      },
      "AuthenticationUpdate": {
        "type": "object",
        "description": "Payload to partially update an Authentication.",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Authentication, defines what kind of object is stored in the input.",
            "enum": [
              "googleServiceAccount",
              "basic",
              "apiKey",
              "oauth",
              "algolia"
            ]
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "platform": {
            "type": "string",
            "nullable": true,
            "description": "Describe which platform the Authentication is used for.",
            "enum": [
              "bigcommerce",
              "commercetools"
            ]
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
                "additionalProperties": false,
                "properties": {
                  "clientEmail": {
                    "type": "string",
                    "description": "Email address of the Service Account.",
                    "example": "service-account-name@project-id.iam.gserviceaccount.com"
                  },
                  "privateKey": {
                    "type": "string",
                    "description": "Private key of the Service Account."
                  }
                }
              },
              {
                "type": "object",
                "description": "Authentication input for Basic login with username and password.",
                "additionalProperties": false,
                "properties": {
                  "username": {
                    "type": "string"
                  },
                  "password": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "description": "Authentication input used for token credentials.",
                "additionalProperties": false,
                "properties": {
                  "key": {
                    "type": "string"
                  }
                }
              },
              {
                "type": "object",
                "description": "Authentication input for OAuth login.",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The OAuth endpoint URL."
                  },
                  "client_id": {
                    "type": "string",
                    "description": "The clientID."
                  },
                  "client_secret": {
                    "type": "string",
                    "description": "The secret."
                  }
                }
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "appID": {
                    "type": "string",
                    "description": "Algolia Application ID."
                  },
                  "apiKey": {
                    "type": "string",
                    "description": "Algolia API Key, with the correct rights to push to an index and change settings."
                  }
                }
              }
            ]
          }
        }
      },
      "AuthenticationUpdateResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "Response from the API when the Authentication is successfully updated.",
        "properties": {
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last update (RFC3339 format)."
          }
        },
        "required": [
          "authenticationID",
          "name",
          "updatedAt"
        ]
      },
      "DestinationType": {
        "type": "string",
        "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
        "enum": [
          "search",
          "insights",
          "flow"
        ]
      },
      "destinationSortKeys": {
        "type": "string",
        "description": "Used to sort the Destination list endpoint.",
        "enum": [
          "name",
          "type",
          "updatedAt",
          "createdAt"
        ]
      },
      "destinationID": {
        "type": "string",
        "description": "The destination UUID.",
        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      },
      "DestinationIndexPrefix": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "indexPrefix": {
            "type": "string",
            "description": "The prefix of the final index name."
          }
        },
        "required": [
          "indexPrefix"
        ]
      },
      "RecordType": {
        "type": "string",
        "description": "Determines the indexing strategy to use for a given e-commerce source.",
        "enum": [
          "product",
          "variant"
        ]
      },
      "AttributesToExclude": {
        "type": "array",
        "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
        "items": {
          "type": "string"
        }
      },
      "DestinationIndexName": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "indexName": {
            "type": "string",
            "description": "The index name to store data in."
          },
          "recordType": {
            "type": "string",
            "description": "Determines the indexing strategy to use for a given e-commerce source.",
            "enum": [
              "product",
              "variant"
            ]
          },
          "attributesToExclude": {
            "type": "array",
            "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "indexName"
        ]
      },
      "DestinationInput": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "indexPrefix": {
                "type": "string",
                "description": "The prefix of the final index name."
              }
            },
            "required": [
              "indexPrefix"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "indexName": {
                "type": "string",
                "description": "The index name to store data in."
              },
              "recordType": {
                "type": "string",
                "description": "Determines the indexing strategy to use for a given e-commerce source.",
                "enum": [
                  "product",
                  "variant"
                ]
              },
              "attributesToExclude": {
                "type": "array",
                "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                "items": {
                  "type": "string"
                }
              }
            },
            "required": [
              "indexName"
            ]
          }
        ]
      },
      "Destination": {
        "type": "object",
        "description": "A destination describe how the data is indexed on the Algolia side.",
        "additionalProperties": false,
        "properties": {
          "destinationID": {
            "type": "string",
            "description": "The destination UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "type": {
            "type": "string",
            "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
            "enum": [
              "search",
              "insights",
              "flow"
            ]
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "indexPrefix": {
                    "type": "string",
                    "description": "The prefix of the final index name."
                  }
                },
                "required": [
                  "indexPrefix"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "indexName": {
                    "type": "string",
                    "description": "The index name to store data in."
                  },
                  "recordType": {
                    "type": "string",
                    "description": "Determines the indexing strategy to use for a given e-commerce source.",
                    "enum": [
                      "product",
                      "variant"
                    ]
                  },
                  "attributesToExclude": {
                    "type": "array",
                    "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "indexName"
                ]
              }
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last update (RFC3339 format)."
          },
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          }
        },
        "required": [
          "destinationID",
          "type",
          "name",
          "input",
          "createdAt"
        ]
      },
      "DestinationCreate": {
        "type": "object",
        "additionalProperties": false,
        "description": "The payload when creating a destination.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
            "enum": [
              "search",
              "insights",
              "flow"
            ]
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "indexPrefix": {
                    "type": "string",
                    "description": "The prefix of the final index name."
                  }
                },
                "required": [
                  "indexPrefix"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "indexName": {
                    "type": "string",
                    "description": "The index name to store data in."
                  },
                  "recordType": {
                    "type": "string",
                    "description": "Determines the indexing strategy to use for a given e-commerce source.",
                    "enum": [
                      "product",
                      "variant"
                    ]
                  },
                  "attributesToExclude": {
                    "type": "array",
                    "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "indexName"
                ]
              }
            ]
          },
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          }
        },
        "required": [
          "type",
          "name",
          "input"
        ]
      },
      "DestinationCreateResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "Response from the API when the Destination is successfully created.",
        "properties": {
          "destinationID": {
            "type": "string",
            "description": "The destination UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          }
        },
        "required": [
          "destinationID",
          "name",
          "createdAt"
        ]
      },
      "DestinationSearch": {
        "type": "object",
        "additionalProperties": false,
        "description": "Payload to search for multiple destinations, based on the given `destinationIDs`.",
        "properties": {
          "destinationIDs": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The destination UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        },
        "required": [
          "destinationIDs"
        ]
      },
      "DestinationUpdate": {
        "type": "object",
        "additionalProperties": false,
        "description": "Payload to partially update a Destination.",
        "properties": {
          "type": {
            "type": "string",
            "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
            "enum": [
              "search",
              "insights",
              "flow"
            ]
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "indexPrefix": {
                    "type": "string",
                    "description": "The prefix of the final index name."
                  }
                },
                "required": [
                  "indexPrefix"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "indexName": {
                    "type": "string",
                    "description": "The index name to store data in."
                  },
                  "recordType": {
                    "type": "string",
                    "description": "Determines the indexing strategy to use for a given e-commerce source.",
                    "enum": [
                      "product",
                      "variant"
                    ]
                  },
                  "attributesToExclude": {
                    "type": "array",
                    "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "indexName"
                ]
              }
            ]
          },
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          }
        }
      },
      "DestinationUpdateResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "Response from the API when the Destination is successfully updated.",
        "properties": {
          "destinationID": {
            "type": "string",
            "description": "The destination UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "name": {
            "type": "string",
            "description": "An human readable name describing the object."
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last update (RFC3339 format)."
          }
        },
        "required": [
          "destinationID",
          "name",
          "updatedAt"
        ]
      },
      "SourceType": {
        "type": "string",
        "enum": [
          "bigcommerce",
          "commercetools",
          "json",
          "csv",
          "bigquery",
          "docker"
        ]
      },
      "sourceSortKeys": {
        "type": "string",
        "description": "Used to sort the Source list endpoint.",
        "enum": [
          "name",
          "type",
          "updatedAt",
          "createdAt"
        ]
      },
      "sourceID": {
        "type": "string",
        "description": "The source UUID.",
        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      },
      "CommercetoolsCustomFields": {
        "type": "object",
        "additionalProperties": false,
        "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
        "properties": {
          "inventory": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Inventory custom fields.",
            "nullable": true
          },
          "price": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Price custom fields.",
            "nullable": true
          },
          "category": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Category custom fields.",
            "nullable": true
          }
        }
      },
      "SourceCommercetools": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "storeKeys": {
            "type": "array",
            "items": {
              "description": "Unique and immutable key of the referenced Store.",
              "type": "string"
            }
          },
          "locales": {
            "type": "array",
            "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
            "items": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          },
          "projectKey": {
            "type": "string"
          },
          "fallbackIsInStockValue": {
            "type": "boolean",
            "default": true,
            "description": "Determines the value that will be stored in the Algolia record if there's no inventory information on the product.\n"
          },
          "customFields": {
            "type": "object",
            "additionalProperties": false,
            "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
            "properties": {
              "inventory": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Inventory custom fields.",
                "nullable": true
              },
              "price": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Price custom fields.",
                "nullable": true
              },
              "category": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Category custom fields.",
                "nullable": true
              }
            }
          }
        },
        "required": [
          "url",
          "projectKey"
        ],
        "x-discriminator-fields": [
          "projectKey"
        ]
      },
      "BigCommerceChannel": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID of the bigcommerce channel."
          },
          "currencies": {
            "type": "array",
            "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
            "example": [
              "usd",
              "eur"
            ],
            "items": {
              "type": "string",
              "example": "usd"
            }
          }
        },
        "required": [
          "id"
        ]
      },
      "BigCommerceMetafield": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "namespace": {
            "type": "string",
            "description": "The namespace of the metafield."
          },
          "key": {
            "type": "string",
            "description": "The key identifier of the metafield."
          }
        },
        "required": [
          "namespace",
          "key"
        ]
      },
      "SourceBigCommerce": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "storeHash": {
            "type": "string",
            "description": "The store hash identifying the store the shopper is signing in to."
          },
          "channel": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "id": {
                "type": "integer",
                "description": "The ID of the bigcommerce channel."
              },
              "currencies": {
                "type": "array",
                "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
                "example": [
                  "usd",
                  "eur"
                ],
                "items": {
                  "type": "string",
                  "example": "usd"
                }
              }
            },
            "required": [
              "id"
            ]
          },
          "customFields": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "productMetafields": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "namespace": {
                  "type": "string",
                  "description": "The namespace of the metafield."
                },
                "key": {
                  "type": "string",
                  "description": "The key identifier of the metafield."
                }
              },
              "required": [
                "namespace",
                "key"
              ]
            }
          },
          "variantMetafields": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "namespace": {
                  "type": "string",
                  "description": "The namespace of the metafield."
                },
                "key": {
                  "type": "string",
                  "description": "The key identifier of the metafield."
                }
              },
              "required": [
                "namespace",
                "key"
              ]
            }
          }
        },
        "required": [
          "storeHash"
        ],
        "x-discriminator-fields": [
          "storeHash"
        ]
      },
      "UniqueIDColumn": {
        "type": "string",
        "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
      },
      "MethodType": {
        "type": "string",
        "enum": [
          "GET",
          "POST"
        ]
      },
      "SourceJSON": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL of the file."
          },
          "uniqueIDColumn": {
            "type": "string",
            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST"
            ]
          }
        },
        "required": [
          "url"
        ]
      },
      "MappingTypeCSV": {
        "type": "string",
        "enum": [
          "string",
          "integer",
          "float",
          "boolean",
          "json"
        ]
      },
      "SourceCSV": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "url": {
            "type": "string",
            "description": "The URL of the file."
          },
          "uniqueIDColumn": {
            "type": "string",
            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
          },
          "mapping": {
            "type": "object",
            "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
            "additionalProperties": {
              "type": "string",
              "enum": [
                "string",
                "integer",
                "float",
                "boolean",
                "json"
              ]
            }
          },
          "method": {
            "type": "string",
            "enum": [
              "GET",
              "POST"
            ]
          },
          "delimiter": {
            "type": "string",
            "minLength": 1,
            "maxLength": 1,
            "default": ",",
            "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
          }
        },
        "required": [
          "url"
        ]
      },
      "BigQueryDataType": {
        "type": "string",
        "enum": [
          "ga4",
          "ga360"
        ]
      },
      "SourceBigQuery": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "projectID": {
            "type": "string",
            "description": "Project ID of the BigQuery Source."
          },
          "datasetID": {
            "type": "string",
            "description": "Dataset ID of the BigQuery Source."
          },
          "dataType": {
            "type": "string",
            "enum": [
              "ga4",
              "ga360"
            ]
          },
          "table": {
            "type": "string",
            "description": "Table name (for default BQ)."
          },
          "tablePrefix": {
            "type": "string",
            "description": "Table prefix (for Google Analytics)."
          },
          "customSQLRequest": {
            "type": "string",
            "description": "Custom SQL request to extract data from the BigQuery table."
          },
          "uniqueIDColumn": {
            "type": "string",
            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
          }
        },
        "required": [
          "projectID",
          "datasetID"
        ],
        "x-discriminator-fields": [
          "projectID"
        ]
      },
      "DockerImageType": {
        "type": "string",
        "enum": [
          "singer",
          "custom",
          "airbyte"
        ],
        "description": "The type of the image."
      },
      "DockerRegistry": {
        "type": "string",
        "enum": [
          "dockerhub",
          "ghcr"
        ],
        "description": "The registry where the image is stored."
      },
      "SourceDocker": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "imageType": {
            "type": "string",
            "enum": [
              "singer",
              "custom",
              "airbyte"
            ],
            "description": "The type of the image."
          },
          "registry": {
            "type": "string",
            "enum": [
              "dockerhub",
              "ghcr"
            ],
            "description": "The registry where the image is stored."
          },
          "image": {
            "type": "string",
            "description": "The name of the image to pull.",
            "example": "algolia/zendesk"
          },
          "version": {
            "type": "string",
            "description": "The version of the image, defaults to `latest`.",
            "example": "v2.1.0"
          },
          "configuration": {
            "type": "object",
            "description": "The configuration of the spec."
          }
        },
        "required": [
          "registry",
          "image",
          "imageType",
          "configuration"
        ]
      },
      "SourceInput": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "storeKeys": {
                "type": "array",
                "items": {
                  "description": "Unique and immutable key of the referenced Store.",
                  "type": "string"
                }
              },
              "locales": {
                "type": "array",
                "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                "items": {
                  "type": "string"
                }
              },
              "url": {
                "type": "string"
              },
              "projectKey": {
                "type": "string"
              },
              "fallbackIsInStockValue": {
                "type": "boolean",
                "default": true,
                "description": "Determines the value that will be stored in the Algolia record if there's no inventory information on the product.\n"
              },
              "customFields": {
                "type": "object",
                "additionalProperties": false,
                "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                "properties": {
                  "inventory": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Inventory custom fields.",
                    "nullable": true
                  },
                  "price": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Price custom fields.",
                    "nullable": true
                  },
                  "category": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Category custom fields.",
                    "nullable": true
                  }
                }
              }
            },
            "required": [
              "url",
              "projectKey"
            ],
            "x-discriminator-fields": [
              "projectKey"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "storeHash": {
                "type": "string",
                "description": "The store hash identifying the store the shopper is signing in to."
              },
              "channel": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "id": {
                    "type": "integer",
                    "description": "The ID of the bigcommerce channel."
                  },
                  "currencies": {
                    "type": "array",
                    "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
                    "example": [
                      "usd",
                      "eur"
                    ],
                    "items": {
                      "type": "string",
                      "example": "usd"
                    }
                  }
                },
                "required": [
                  "id"
                ]
              },
              "customFields": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "productMetafields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "namespace": {
                      "type": "string",
                      "description": "The namespace of the metafield."
                    },
                    "key": {
                      "type": "string",
                      "description": "The key identifier of the metafield."
                    }
                  },
                  "required": [
                    "namespace",
                    "key"
                  ]
                }
              },
              "variantMetafields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "namespace": {
                      "type": "string",
                      "description": "The namespace of the metafield."
                    },
                    "key": {
                      "type": "string",
                      "description": "The key identifier of the metafield."
                    }
                  },
                  "required": [
                    "namespace",
                    "key"
                  ]
                }
              }
            },
            "required": [
              "storeHash"
            ],
            "x-discriminator-fields": [
              "storeHash"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "url": {
                "type": "string",
                "description": "The URL of the file."
              },
              "uniqueIDColumn": {
                "type": "string",
                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ]
              }
            },
            "required": [
              "url"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "url": {
                "type": "string",
                "description": "The URL of the file."
              },
              "uniqueIDColumn": {
                "type": "string",
                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
              },
              "mapping": {
                "type": "object",
                "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                "additionalProperties": {
                  "type": "string",
                  "enum": [
                    "string",
                    "integer",
                    "float",
                    "boolean",
                    "json"
                  ]
                }
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ]
              },
              "delimiter": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "default": ",",
                "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
              }
            },
            "required": [
              "url"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "projectID": {
                "type": "string",
                "description": "Project ID of the BigQuery Source."
              },
              "datasetID": {
                "type": "string",
                "description": "Dataset ID of the BigQuery Source."
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "ga4",
                  "ga360"
                ]
              },
              "table": {
                "type": "string",
                "description": "Table name (for default BQ)."
              },
              "tablePrefix": {
                "type": "string",
                "description": "Table prefix (for Google Analytics)."
              },
              "customSQLRequest": {
                "type": "string",
                "description": "Custom SQL request to extract data from the BigQuery table."
              },
              "uniqueIDColumn": {
                "type": "string",
                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
              }
            },
            "required": [
              "projectID",
              "datasetID"
            ],
            "x-discriminator-fields": [
              "projectID"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "imageType": {
                "type": "string",
                "enum": [
                  "singer",
                  "custom",
                  "airbyte"
                ],
                "description": "The type of the image."
              },
              "registry": {
                "type": "string",
                "enum": [
                  "dockerhub",
                  "ghcr"
                ],
                "description": "The registry where the image is stored."
              },
              "image": {
                "type": "string",
                "description": "The name of the image to pull.",
                "example": "algolia/zendesk"
              },
              "version": {
                "type": "string",
                "description": "The version of the image, defaults to `latest`.",
                "example": "v2.1.0"
              },
              "configuration": {
                "type": "object",
                "description": "The configuration of the spec."
              }
            },
            "required": [
              "registry",
              "image",
              "imageType",
              "configuration"
            ]
          }
        ]
      },
      "Source": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourceID": {
            "type": "string",
            "description": "The source UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "type": {
            "type": "string",
            "enum": [
              "bigcommerce",
              "commercetools",
              "json",
              "csv",
              "bigquery",
              "docker"
            ]
          },
          "name": {
            "type": "string"
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "storeKeys": {
                    "type": "array",
                    "items": {
                      "description": "Unique and immutable key of the referenced Store.",
                      "type": "string"
                    }
                  },
                  "locales": {
                    "type": "array",
                    "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "type": "string"
                  },
                  "projectKey": {
                    "type": "string"
                  },
                  "fallbackIsInStockValue": {
                    "type": "boolean",
                    "default": true,
                    "description": "Determines the value that will be stored in the Algolia record if there's no inventory information on the product.\n"
                  },
                  "customFields": {
                    "type": "object",
                    "additionalProperties": false,
                    "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                    "properties": {
                      "inventory": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Inventory custom fields.",
                        "nullable": true
                      },
                      "price": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Price custom fields.",
                        "nullable": true
                      },
                      "category": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Category custom fields.",
                        "nullable": true
                      }
                    }
                  }
                },
                "required": [
                  "url",
                  "projectKey"
                ],
                "x-discriminator-fields": [
                  "projectKey"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "storeHash": {
                    "type": "string",
                    "description": "The store hash identifying the store the shopper is signing in to."
                  },
                  "channel": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The ID of the bigcommerce channel."
                      },
                      "currencies": {
                        "type": "array",
                        "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
                        "example": [
                          "usd",
                          "eur"
                        ],
                        "items": {
                          "type": "string",
                          "example": "usd"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "customFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "productMetafields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "namespace": {
                          "type": "string",
                          "description": "The namespace of the metafield."
                        },
                        "key": {
                          "type": "string",
                          "description": "The key identifier of the metafield."
                        }
                      },
                      "required": [
                        "namespace",
                        "key"
                      ]
                    }
                  },
                  "variantMetafields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "namespace": {
                          "type": "string",
                          "description": "The namespace of the metafield."
                        },
                        "key": {
                          "type": "string",
                          "description": "The key identifier of the metafield."
                        }
                      },
                      "required": [
                        "namespace",
                        "key"
                      ]
                    }
                  }
                },
                "required": [
                  "storeHash"
                ],
                "x-discriminator-fields": [
                  "storeHash"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of the file."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST"
                    ]
                  }
                },
                "required": [
                  "url"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of the file."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  },
                  "mapping": {
                    "type": "object",
                    "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                    "additionalProperties": {
                      "type": "string",
                      "enum": [
                        "string",
                        "integer",
                        "float",
                        "boolean",
                        "json"
                      ]
                    }
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST"
                    ]
                  },
                  "delimiter": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1,
                    "default": ",",
                    "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
                  }
                },
                "required": [
                  "url"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "projectID": {
                    "type": "string",
                    "description": "Project ID of the BigQuery Source."
                  },
                  "datasetID": {
                    "type": "string",
                    "description": "Dataset ID of the BigQuery Source."
                  },
                  "dataType": {
                    "type": "string",
                    "enum": [
                      "ga4",
                      "ga360"
                    ]
                  },
                  "table": {
                    "type": "string",
                    "description": "Table name (for default BQ)."
                  },
                  "tablePrefix": {
                    "type": "string",
                    "description": "Table prefix (for Google Analytics)."
                  },
                  "customSQLRequest": {
                    "type": "string",
                    "description": "Custom SQL request to extract data from the BigQuery table."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  }
                },
                "required": [
                  "projectID",
                  "datasetID"
                ],
                "x-discriminator-fields": [
                  "projectID"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "imageType": {
                    "type": "string",
                    "enum": [
                      "singer",
                      "custom",
                      "airbyte"
                    ],
                    "description": "The type of the image."
                  },
                  "registry": {
                    "type": "string",
                    "enum": [
                      "dockerhub",
                      "ghcr"
                    ],
                    "description": "The registry where the image is stored."
                  },
                  "image": {
                    "type": "string",
                    "description": "The name of the image to pull.",
                    "example": "algolia/zendesk"
                  },
                  "version": {
                    "type": "string",
                    "description": "The version of the image, defaults to `latest`.",
                    "example": "v2.1.0"
                  },
                  "configuration": {
                    "type": "object",
                    "description": "The configuration of the spec."
                  }
                },
                "required": [
                  "registry",
                  "image",
                  "imageType",
                  "configuration"
                ]
              }
            ]
          },
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last update (RFC3339 format)."
          }
        },
        "required": [
          "sourceID",
          "type",
          "name",
          "input",
          "createdAt"
        ]
      },
      "SourceCreate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "bigcommerce",
              "commercetools",
              "json",
              "csv",
              "bigquery",
              "docker"
            ]
          },
          "name": {
            "type": "string"
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "storeKeys": {
                    "type": "array",
                    "items": {
                      "description": "Unique and immutable key of the referenced Store.",
                      "type": "string"
                    }
                  },
                  "locales": {
                    "type": "array",
                    "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "url": {
                    "type": "string"
                  },
                  "projectKey": {
                    "type": "string"
                  },
                  "fallbackIsInStockValue": {
                    "type": "boolean",
                    "default": true,
                    "description": "Determines the value that will be stored in the Algolia record if there's no inventory information on the product.\n"
                  },
                  "customFields": {
                    "type": "object",
                    "additionalProperties": false,
                    "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                    "properties": {
                      "inventory": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Inventory custom fields.",
                        "nullable": true
                      },
                      "price": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Price custom fields.",
                        "nullable": true
                      },
                      "category": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Category custom fields.",
                        "nullable": true
                      }
                    }
                  }
                },
                "required": [
                  "url",
                  "projectKey"
                ],
                "x-discriminator-fields": [
                  "projectKey"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "storeHash": {
                    "type": "string",
                    "description": "The store hash identifying the store the shopper is signing in to."
                  },
                  "channel": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "id": {
                        "type": "integer",
                        "description": "The ID of the bigcommerce channel."
                      },
                      "currencies": {
                        "type": "array",
                        "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
                        "example": [
                          "usd",
                          "eur"
                        ],
                        "items": {
                          "type": "string",
                          "example": "usd"
                        }
                      }
                    },
                    "required": [
                      "id"
                    ]
                  },
                  "customFields": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "productMetafields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "namespace": {
                          "type": "string",
                          "description": "The namespace of the metafield."
                        },
                        "key": {
                          "type": "string",
                          "description": "The key identifier of the metafield."
                        }
                      },
                      "required": [
                        "namespace",
                        "key"
                      ]
                    }
                  },
                  "variantMetafields": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "namespace": {
                          "type": "string",
                          "description": "The namespace of the metafield."
                        },
                        "key": {
                          "type": "string",
                          "description": "The key identifier of the metafield."
                        }
                      },
                      "required": [
                        "namespace",
                        "key"
                      ]
                    }
                  }
                },
                "required": [
                  "storeHash"
                ],
                "x-discriminator-fields": [
                  "storeHash"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of the file."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST"
                    ]
                  }
                },
                "required": [
                  "url"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of the file."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  },
                  "mapping": {
                    "type": "object",
                    "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                    "additionalProperties": {
                      "type": "string",
                      "enum": [
                        "string",
                        "integer",
                        "float",
                        "boolean",
                        "json"
                      ]
                    }
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST"
                    ]
                  },
                  "delimiter": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1,
                    "default": ",",
                    "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
                  }
                },
                "required": [
                  "url"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "projectID": {
                    "type": "string",
                    "description": "Project ID of the BigQuery Source."
                  },
                  "datasetID": {
                    "type": "string",
                    "description": "Dataset ID of the BigQuery Source."
                  },
                  "dataType": {
                    "type": "string",
                    "enum": [
                      "ga4",
                      "ga360"
                    ]
                  },
                  "table": {
                    "type": "string",
                    "description": "Table name (for default BQ)."
                  },
                  "tablePrefix": {
                    "type": "string",
                    "description": "Table prefix (for Google Analytics)."
                  },
                  "customSQLRequest": {
                    "type": "string",
                    "description": "Custom SQL request to extract data from the BigQuery table."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  }
                },
                "required": [
                  "projectID",
                  "datasetID"
                ],
                "x-discriminator-fields": [
                  "projectID"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "imageType": {
                    "type": "string",
                    "enum": [
                      "singer",
                      "custom",
                      "airbyte"
                    ],
                    "description": "The type of the image."
                  },
                  "registry": {
                    "type": "string",
                    "enum": [
                      "dockerhub",
                      "ghcr"
                    ],
                    "description": "The registry where the image is stored."
                  },
                  "image": {
                    "type": "string",
                    "description": "The name of the image to pull.",
                    "example": "algolia/zendesk"
                  },
                  "version": {
                    "type": "string",
                    "description": "The version of the image, defaults to `latest`.",
                    "example": "v2.1.0"
                  },
                  "configuration": {
                    "type": "object",
                    "description": "The configuration of the spec."
                  }
                },
                "required": [
                  "registry",
                  "image",
                  "imageType",
                  "configuration"
                ]
              }
            ]
          },
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          }
        },
        "required": [
          "type",
          "name",
          "input"
        ]
      },
      "SourceCreateResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourceID": {
            "type": "string",
            "description": "The source UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "name": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          }
        },
        "required": [
          "sourceID",
          "name",
          "createdAt"
        ]
      },
      "SourceSearch": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourceIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "sourceIDs"
        ]
      },
      "SourceUpdateCommercetools": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "storeKeys": {
            "type": "array",
            "description": "Unique and immutable key of the referenced Store.",
            "items": {
              "type": "string"
            }
          },
          "locales": {
            "type": "array",
            "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
            "items": {
              "type": "string"
            }
          },
          "customFields": {
            "type": "object",
            "additionalProperties": false,
            "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
            "properties": {
              "inventory": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Inventory custom fields.",
                "nullable": true
              },
              "price": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Price custom fields.",
                "nullable": true
              },
              "category": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Category custom fields.",
                "nullable": true
              }
            }
          }
        }
      },
      "SourceUpdateDocker": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "registry": {
            "type": "string",
            "enum": [
              "dockerhub",
              "ghcr"
            ],
            "description": "The registry where the image is stored."
          },
          "image": {
            "type": "string",
            "description": "The name of the image to pull.",
            "example": "algolia/zendesk"
          },
          "version": {
            "type": "string",
            "description": "The version of the image, defaults to `latest`.",
            "example": "v2.1.0"
          },
          "configuration": {
            "type": "object",
            "description": "The configuration of the spec."
          }
        },
        "required": [
          "configuration"
        ]
      },
      "SourceUpdateInput": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "storeKeys": {
                "type": "array",
                "description": "Unique and immutable key of the referenced Store.",
                "items": {
                  "type": "string"
                }
              },
              "locales": {
                "type": "array",
                "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                "items": {
                  "type": "string"
                }
              },
              "customFields": {
                "type": "object",
                "additionalProperties": false,
                "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                "properties": {
                  "inventory": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Inventory custom fields.",
                    "nullable": true
                  },
                  "price": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Price custom fields.",
                    "nullable": true
                  },
                  "category": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    },
                    "description": "Category custom fields.",
                    "nullable": true
                  }
                }
              }
            }
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "url": {
                "type": "string",
                "description": "The URL of the file."
              },
              "uniqueIDColumn": {
                "type": "string",
                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ]
              }
            },
            "required": [
              "url"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "url": {
                "type": "string",
                "description": "The URL of the file."
              },
              "uniqueIDColumn": {
                "type": "string",
                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
              },
              "mapping": {
                "type": "object",
                "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                "additionalProperties": {
                  "type": "string",
                  "enum": [
                    "string",
                    "integer",
                    "float",
                    "boolean",
                    "json"
                  ]
                }
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST"
                ]
              },
              "delimiter": {
                "type": "string",
                "minLength": 1,
                "maxLength": 1,
                "default": ",",
                "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
              }
            },
            "required": [
              "url"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "projectID": {
                "type": "string",
                "description": "Project ID of the BigQuery Source."
              },
              "datasetID": {
                "type": "string",
                "description": "Dataset ID of the BigQuery Source."
              },
              "dataType": {
                "type": "string",
                "enum": [
                  "ga4",
                  "ga360"
                ]
              },
              "table": {
                "type": "string",
                "description": "Table name (for default BQ)."
              },
              "tablePrefix": {
                "type": "string",
                "description": "Table prefix (for Google Analytics)."
              },
              "customSQLRequest": {
                "type": "string",
                "description": "Custom SQL request to extract data from the BigQuery table."
              },
              "uniqueIDColumn": {
                "type": "string",
                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
              }
            },
            "required": [
              "projectID",
              "datasetID"
            ],
            "x-discriminator-fields": [
              "projectID"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "registry": {
                "type": "string",
                "enum": [
                  "dockerhub",
                  "ghcr"
                ],
                "description": "The registry where the image is stored."
              },
              "image": {
                "type": "string",
                "description": "The name of the image to pull.",
                "example": "algolia/zendesk"
              },
              "version": {
                "type": "string",
                "description": "The version of the image, defaults to `latest`.",
                "example": "v2.1.0"
              },
              "configuration": {
                "type": "object",
                "description": "The configuration of the spec."
              }
            },
            "required": [
              "configuration"
            ]
          }
        ]
      },
      "SourceUpdate": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "name": {
            "type": "string"
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "storeKeys": {
                    "type": "array",
                    "description": "Unique and immutable key of the referenced Store.",
                    "items": {
                      "type": "string"
                    }
                  },
                  "locales": {
                    "type": "array",
                    "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                    "items": {
                      "type": "string"
                    }
                  },
                  "customFields": {
                    "type": "object",
                    "additionalProperties": false,
                    "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                    "properties": {
                      "inventory": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Inventory custom fields.",
                        "nullable": true
                      },
                      "price": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Price custom fields.",
                        "nullable": true
                      },
                      "category": {
                        "type": "array",
                        "items": {
                          "type": "string"
                        },
                        "description": "Category custom fields.",
                        "nullable": true
                      }
                    }
                  }
                }
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of the file."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST"
                    ]
                  }
                },
                "required": [
                  "url"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "url": {
                    "type": "string",
                    "description": "The URL of the file."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  },
                  "mapping": {
                    "type": "object",
                    "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                    "additionalProperties": {
                      "type": "string",
                      "enum": [
                        "string",
                        "integer",
                        "float",
                        "boolean",
                        "json"
                      ]
                    }
                  },
                  "method": {
                    "type": "string",
                    "enum": [
                      "GET",
                      "POST"
                    ]
                  },
                  "delimiter": {
                    "type": "string",
                    "minLength": 1,
                    "maxLength": 1,
                    "default": ",",
                    "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
                  }
                },
                "required": [
                  "url"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "projectID": {
                    "type": "string",
                    "description": "Project ID of the BigQuery Source."
                  },
                  "datasetID": {
                    "type": "string",
                    "description": "Dataset ID of the BigQuery Source."
                  },
                  "dataType": {
                    "type": "string",
                    "enum": [
                      "ga4",
                      "ga360"
                    ]
                  },
                  "table": {
                    "type": "string",
                    "description": "Table name (for default BQ)."
                  },
                  "tablePrefix": {
                    "type": "string",
                    "description": "Table prefix (for Google Analytics)."
                  },
                  "customSQLRequest": {
                    "type": "string",
                    "description": "Custom SQL request to extract data from the BigQuery table."
                  },
                  "uniqueIDColumn": {
                    "type": "string",
                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                  }
                },
                "required": [
                  "projectID",
                  "datasetID"
                ],
                "x-discriminator-fields": [
                  "projectID"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "registry": {
                    "type": "string",
                    "enum": [
                      "dockerhub",
                      "ghcr"
                    ],
                    "description": "The registry where the image is stored."
                  },
                  "image": {
                    "type": "string",
                    "description": "The name of the image to pull.",
                    "example": "algolia/zendesk"
                  },
                  "version": {
                    "type": "string",
                    "description": "The version of the image, defaults to `latest`.",
                    "example": "v2.1.0"
                  },
                  "configuration": {
                    "type": "object",
                    "description": "The configuration of the spec."
                  }
                },
                "required": [
                  "configuration"
                ]
              }
            ]
          },
          "authenticationID": {
            "type": "string",
            "description": "The authentication UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          }
        }
      },
      "SourceUpdateResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "sourceID": {
            "type": "string",
            "description": "The source UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "name": {
            "type": "string"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last update (RFC3339 format)."
          }
        },
        "required": [
          "sourceID",
          "name",
          "updatedAt"
        ]
      },
      "DockerSourceStream": {
        "type": "object",
        "description": "A stream definition (see the Singer specification for details)."
      },
      "runID": {
        "type": "string",
        "description": "The run UUID.",
        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      },
      "ActionType": {
        "type": "string",
        "description": "The action to perform on the Algolia index.",
        "enum": [
          "replace",
          "save",
          "partial"
        ]
      },
      "TriggerType": {
        "type": "string",
        "description": "The type of the task reflect how it can be used:\n  - onDemand: a task that runs manually\n  - schedule: a task that runs regularly, following a given cron expression\n  - subscription: a task that runs after a subscription event is received from an integration (e.g. Webhook).\n",
        "enum": [
          "onDemand",
          "schedule",
          "subscription"
        ]
      },
      "taskSortKeys": {
        "type": "string",
        "description": "Used to sort the Task list endpoint.",
        "enum": [
          "enabled",
          "triggerType",
          "action",
          "updatedAt",
          "createdAt"
        ]
      },
      "taskID": {
        "type": "string",
        "description": "The task UUID.",
        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      },
      "OnDemandTriggerType": {
        "type": "string",
        "description": "A task which is manually executed via the run task endpoint.",
        "enum": [
          "onDemand"
        ]
      },
      "LastRun": {
        "description": "The last time the scheduled task ran (RFC3339 format).",
        "type": "string"
      },
      "OnDemandTrigger": {
        "type": "object",
        "additionalProperties": false,
        "description": "The trigger information of a task of type `onDemand`.",
        "properties": {
          "type": {
            "type": "string",
            "description": "A task which is manually executed via the run task endpoint.",
            "enum": [
              "onDemand"
            ]
          },
          "lastRun": {
            "description": "The last time the scheduled task ran (RFC3339 format).",
            "type": "string"
          }
        },
        "required": [
          "type"
        ]
      },
      "ScheduleTriggerType": {
        "type": "string",
        "description": "A task which is triggered by a schedule (cron expression).",
        "enum": [
          "schedule"
        ]
      },
      "Cron": {
        "type": "string",
        "description": "A cron expression that represent at which regularity the task should run.",
        "example": "* * 1 * *"
      },
      "ScheduleTrigger": {
        "type": "object",
        "additionalProperties": false,
        "description": "The trigger information for a task of type 'schedule'.",
        "properties": {
          "type": {
            "type": "string",
            "description": "A task which is triggered by a schedule (cron expression).",
            "enum": [
              "schedule"
            ]
          },
          "cron": {
            "type": "string",
            "description": "A cron expression that represent at which regularity the task should run.",
            "example": "* * 1 * *"
          },
          "lastRun": {
            "description": "The last time the scheduled task ran (RFC3339 format).",
            "type": "string"
          },
          "nextRun": {
            "description": "The next scheduled run of the task (RFC3339 format).",
            "type": "string"
          }
        },
        "required": [
          "type",
          "cron",
          "nextRun"
        ]
      },
      "SubscriptionTriggerType": {
        "type": "string",
        "description": "A task which is triggered by an external subscription (e.g. Webhook).",
        "enum": [
          "subscription"
        ]
      },
      "SubscriptionTrigger": {
        "type": "object",
        "additionalProperties": false,
        "description": "The trigger input for a task of type 'subscription'.",
        "properties": {
          "type": {
            "type": "string",
            "description": "A task which is triggered by an external subscription (e.g. Webhook).",
            "enum": [
              "subscription"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "Trigger": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "description": "The trigger information of a task of type `onDemand`.",
            "properties": {
              "type": {
                "type": "string",
                "description": "A task which is manually executed via the run task endpoint.",
                "enum": [
                  "onDemand"
                ]
              },
              "lastRun": {
                "description": "The last time the scheduled task ran (RFC3339 format).",
                "type": "string"
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "description": "The trigger information for a task of type 'schedule'.",
            "properties": {
              "type": {
                "type": "string",
                "description": "A task which is triggered by a schedule (cron expression).",
                "enum": [
                  "schedule"
                ]
              },
              "cron": {
                "type": "string",
                "description": "A cron expression that represent at which regularity the task should run.",
                "example": "* * 1 * *"
              },
              "lastRun": {
                "description": "The last time the scheduled task ran (RFC3339 format).",
                "type": "string"
              },
              "nextRun": {
                "description": "The next scheduled run of the task (RFC3339 format).",
                "type": "string"
              }
            },
            "required": [
              "type",
              "cron",
              "nextRun"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "description": "The trigger input for a task of type 'subscription'.",
            "properties": {
              "type": {
                "type": "string",
                "description": "A task which is triggered by an external subscription (e.g. Webhook).",
                "enum": [
                  "subscription"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "OnDemandDateUtilsInput": {
        "type": "object",
        "additionalProperties": false,
        "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
        "properties": {
          "startDate": {
            "description": "The start date of the extraction (RFC3339 format).",
            "type": "string"
          },
          "endDate": {
            "description": "The end date of the extraction (RFC3339 format).",
            "type": "string"
          }
        },
        "required": [
          "startDate",
          "endDate"
        ]
      },
      "ScheduleDateUtilsInput": {
        "type": "object",
        "additionalProperties": false,
        "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
        "properties": {
          "timeframe": {
            "description": "The timeframe of the extraction, in number of days from today.",
            "type": "integer",
            "minimum": 1,
            "maximum": 30
          }
        },
        "required": [
          "timeframe"
        ]
      },
      "TaskInput": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
            "properties": {
              "startDate": {
                "description": "The start date of the extraction (RFC3339 format).",
                "type": "string"
              },
              "endDate": {
                "description": "The end date of the extraction (RFC3339 format).",
                "type": "string"
              }
            },
            "required": [
              "startDate",
              "endDate"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
            "properties": {
              "timeframe": {
                "description": "The timeframe of the extraction, in number of days from today.",
                "type": "integer",
                "minimum": 1,
                "maximum": 30
              }
            },
            "required": [
              "timeframe"
            ]
          }
        ]
      },
      "failureThreshold": {
        "type": "integer",
        "minimum": 0,
        "maximum": 100,
        "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
      },
      "Task": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "taskID": {
            "type": "string",
            "description": "The task UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "sourceID": {
            "type": "string",
            "description": "The source UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "destinationID": {
            "type": "string",
            "description": "The destination UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "trigger": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The trigger information of a task of type `onDemand`.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "A task which is manually executed via the run task endpoint.",
                    "enum": [
                      "onDemand"
                    ]
                  },
                  "lastRun": {
                    "description": "The last time the scheduled task ran (RFC3339 format).",
                    "type": "string"
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The trigger information for a task of type 'schedule'.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "A task which is triggered by a schedule (cron expression).",
                    "enum": [
                      "schedule"
                    ]
                  },
                  "cron": {
                    "type": "string",
                    "description": "A cron expression that represent at which regularity the task should run.",
                    "example": "* * 1 * *"
                  },
                  "lastRun": {
                    "description": "The last time the scheduled task ran (RFC3339 format).",
                    "type": "string"
                  },
                  "nextRun": {
                    "description": "The next scheduled run of the task (RFC3339 format).",
                    "type": "string"
                  }
                },
                "required": [
                  "type",
                  "cron",
                  "nextRun"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The trigger input for a task of type 'subscription'.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "A task which is triggered by an external subscription (e.g. Webhook).",
                    "enum": [
                      "subscription"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
                "properties": {
                  "startDate": {
                    "description": "The start date of the extraction (RFC3339 format).",
                    "type": "string"
                  },
                  "endDate": {
                    "description": "The end date of the extraction (RFC3339 format).",
                    "type": "string"
                  }
                },
                "required": [
                  "startDate",
                  "endDate"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
                "properties": {
                  "timeframe": {
                    "description": "The timeframe of the extraction, in number of days from today.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 30
                  }
                },
                "required": [
                  "timeframe"
                ]
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "default": true,
            "description": "Whether the task is enabled or not."
          },
          "failureThreshold": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
          },
          "action": {
            "type": "string",
            "description": "The action to perform on the Algolia index.",
            "enum": [
              "replace",
              "save",
              "partial"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last update (RFC3339 format)."
          }
        },
        "required": [
          "taskID",
          "sourceID",
          "destinationID",
          "trigger",
          "enabled",
          "action",
          "createdAt"
        ]
      },
      "OnDemandTriggerInput": {
        "type": "object",
        "additionalProperties": false,
        "description": "The trigger information of a task of type `onDemand`.",
        "properties": {
          "type": {
            "type": "string",
            "description": "A task which is manually executed via the run task endpoint.",
            "enum": [
              "onDemand"
            ]
          }
        },
        "required": [
          "type"
        ]
      },
      "ScheduleTriggerInput": {
        "type": "object",
        "additionalProperties": false,
        "description": "The trigger input for a task of type 'schedule'.",
        "properties": {
          "type": {
            "type": "string",
            "description": "A task which is triggered by a schedule (cron expression).",
            "enum": [
              "schedule"
            ]
          },
          "cron": {
            "type": "string",
            "description": "A cron expression that represent at which regularity the task should run.",
            "example": "* * 1 * *"
          }
        },
        "required": [
          "type",
          "cron"
        ]
      },
      "TaskCreateTrigger": {
        "oneOf": [
          {
            "type": "object",
            "additionalProperties": false,
            "description": "The trigger information of a task of type `onDemand`.",
            "properties": {
              "type": {
                "type": "string",
                "description": "A task which is manually executed via the run task endpoint.",
                "enum": [
                  "onDemand"
                ]
              }
            },
            "required": [
              "type"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "description": "The trigger input for a task of type 'schedule'.",
            "properties": {
              "type": {
                "type": "string",
                "description": "A task which is triggered by a schedule (cron expression).",
                "enum": [
                  "schedule"
                ]
              },
              "cron": {
                "type": "string",
                "description": "A cron expression that represent at which regularity the task should run.",
                "example": "* * 1 * *"
              }
            },
            "required": [
              "type",
              "cron"
            ]
          },
          {
            "type": "object",
            "additionalProperties": false,
            "description": "The trigger input for a task of type 'subscription'.",
            "properties": {
              "type": {
                "type": "string",
                "description": "A task which is triggered by an external subscription (e.g. Webhook).",
                "enum": [
                  "subscription"
                ]
              }
            },
            "required": [
              "type"
            ]
          }
        ]
      },
      "TaskCreate": {
        "type": "object",
        "additionalProperties": false,
        "description": "The payload for a task creation.",
        "properties": {
          "sourceID": {
            "type": "string",
            "description": "The source UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "destinationID": {
            "type": "string",
            "description": "The destination UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "trigger": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The trigger information of a task of type `onDemand`.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "A task which is manually executed via the run task endpoint.",
                    "enum": [
                      "onDemand"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The trigger input for a task of type 'schedule'.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "A task which is triggered by a schedule (cron expression).",
                    "enum": [
                      "schedule"
                    ]
                  },
                  "cron": {
                    "type": "string",
                    "description": "A cron expression that represent at which regularity the task should run.",
                    "example": "* * 1 * *"
                  }
                },
                "required": [
                  "type",
                  "cron"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The trigger input for a task of type 'subscription'.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "A task which is triggered by an external subscription (e.g. Webhook).",
                    "enum": [
                      "subscription"
                    ]
                  }
                },
                "required": [
                  "type"
                ]
              }
            ]
          },
          "action": {
            "type": "string",
            "description": "The action to perform on the Algolia index.",
            "enum": [
              "replace",
              "save",
              "partial"
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the task is enabled or not."
          },
          "failureThreshold": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
                "properties": {
                  "startDate": {
                    "description": "The start date of the extraction (RFC3339 format).",
                    "type": "string"
                  },
                  "endDate": {
                    "description": "The end date of the extraction (RFC3339 format).",
                    "type": "string"
                  }
                },
                "required": [
                  "startDate",
                  "endDate"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
                "properties": {
                  "timeframe": {
                    "description": "The timeframe of the extraction, in number of days from today.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 30
                  }
                },
                "required": [
                  "timeframe"
                ]
              }
            ]
          }
        },
        "required": [
          "sourceID",
          "destinationID",
          "trigger",
          "action"
        ]
      },
      "TaskCreateResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response from the API after a task creation.",
        "properties": {
          "taskID": {
            "type": "string",
            "description": "The task UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          }
        },
        "required": [
          "taskID",
          "createdAt"
        ]
      },
      "TaskSearch": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "taskIDs": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "taskIDs"
        ]
      },
      "TriggerUpdateInput": {
        "type": "object",
        "additionalProperties": false,
        "description": "The trigger input for a task update.",
        "properties": {
          "cron": {
            "type": "string",
            "description": "A cron expression that represent at which regularity the task should run.",
            "example": "* * 1 * *"
          }
        },
        "required": [
          "cron"
        ]
      },
      "TaskUpdate": {
        "type": "object",
        "additionalProperties": false,
        "description": "The payload for a task update.",
        "properties": {
          "destinationID": {
            "type": "string",
            "description": "The destination UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "trigger": {
            "type": "object",
            "additionalProperties": false,
            "description": "The trigger input for a task update.",
            "properties": {
              "cron": {
                "type": "string",
                "description": "A cron expression that represent at which regularity the task should run.",
                "example": "* * 1 * *"
              }
            },
            "required": [
              "cron"
            ]
          },
          "input": {
            "oneOf": [
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
                "properties": {
                  "startDate": {
                    "description": "The start date of the extraction (RFC3339 format).",
                    "type": "string"
                  },
                  "endDate": {
                    "description": "The end date of the extraction (RFC3339 format).",
                    "type": "string"
                  }
                },
                "required": [
                  "startDate",
                  "endDate"
                ]
              },
              {
                "type": "object",
                "additionalProperties": false,
                "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
                "properties": {
                  "timeframe": {
                    "description": "The timeframe of the extraction, in number of days from today.",
                    "type": "integer",
                    "minimum": 1,
                    "maximum": 30
                  }
                },
                "required": [
                  "timeframe"
                ]
              }
            ]
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the task is enabled or not."
          },
          "failureThreshold": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
          }
        }
      },
      "TaskUpdateResponse": {
        "type": "object",
        "description": "The response from the API after a task update.",
        "additionalProperties": false,
        "properties": {
          "taskID": {
            "type": "string",
            "description": "The task UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of last update (RFC3339 format)."
          }
        },
        "required": [
          "taskID",
          "updatedAt"
        ]
      },
      "RunResponse": {
        "type": "object",
        "additionalProperties": false,
        "description": "The response from the run task API, containing an Observability Run ID and the time it was created at.",
        "properties": {
          "runID": {
            "type": "string",
            "description": "The run UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          }
        },
        "required": [
          "runID",
          "createdAt"
        ]
      },
      "RunStatus": {
        "type": "string",
        "enum": [
          "created",
          "started",
          "idled",
          "finished",
          "skipped"
        ]
      },
      "runSortKeys": {
        "type": "string",
        "description": "Used to sort the Run list endpoint.",
        "enum": [
          "status",
          "updatedAt",
          "createdAt"
        ]
      },
      "RunOutcome": {
        "type": "string",
        "enum": [
          "success",
          "failure",
          "processing"
        ]
      },
      "RunReasonCode": {
        "type": "string",
        "description": "An identifier that pairs with the outcome reason.",
        "enum": [
          "internal",
          "critical",
          "no_events",
          "too_many_errors",
          "ok",
          "discarded",
          "blocking"
        ]
      },
      "RunType": {
        "type": "string",
        "enum": [
          "reindex",
          "update",
          "discover"
        ]
      },
      "startedAt": {
        "type": "string",
        "description": "Date of start (RFC3339 format)."
      },
      "finishedAt": {
        "type": "string",
        "description": "Date of finish (RFC3339 format)."
      },
      "Run": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "runID": {
            "type": "string",
            "description": "The run UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "appID": {
            "type": "string"
          },
          "taskID": {
            "type": "string",
            "description": "The task UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "started",
              "idled",
              "finished",
              "skipped"
            ]
          },
          "progress": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "expectedNbOfEvents": {
                "type": "integer"
              },
              "receivedNbOfEvents": {
                "type": "integer"
              }
            }
          },
          "outcome": {
            "type": "string",
            "enum": [
              "success",
              "failure",
              "processing"
            ]
          },
          "failureThreshold": {
            "type": "integer",
            "minimum": 0,
            "maximum": 100,
            "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
          },
          "reason": {
            "type": "string",
            "description": "Explains the result of outcome."
          },
          "reasonCode": {
            "type": "string",
            "description": "An identifier that pairs with the outcome reason.",
            "enum": [
              "internal",
              "critical",
              "no_events",
              "too_many_errors",
              "ok",
              "discarded",
              "blocking"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "reindex",
              "update",
              "discover"
            ]
          },
          "createdAt": {
            "type": "string",
            "description": "Date of creation (RFC3339 format)."
          },
          "startedAt": {
            "type": "string",
            "description": "Date of start (RFC3339 format)."
          },
          "finishedAt": {
            "type": "string",
            "description": "Date of finish (RFC3339 format)."
          }
        },
        "required": [
          "runID",
          "appID",
          "taskID",
          "status",
          "type",
          "createdAt"
        ]
      },
      "Window": {
        "type": "object",
        "additionalProperties": false,
        "description": "The window parameter represents the holds the dates used to query the Observability data from the database in a given window.",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "A date in format RFC3339 representing the oldest possible data in query window."
          },
          "endDate": {
            "type": "string",
            "description": "A date in format RFC3339 representing the newest possible data in query window."
          }
        },
        "required": [
          "startDate",
          "endDate"
        ]
      },
      "RunListResponse": {
        "type": "object",
        "additionalProperties": false,
        "properties": {
          "runs": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": false,
              "properties": {
                "runID": {
                  "type": "string",
                  "description": "The run UUID.",
                  "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                },
                "appID": {
                  "type": "string"
                },
                "taskID": {
                  "type": "string",
                  "description": "The task UUID.",
                  "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                },
                "status": {
                  "type": "string",
                  "enum": [
                    "created",
                    "started",
                    "idled",
                    "finished",
                    "skipped"
                  ]
                },
                "progress": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "expectedNbOfEvents": {
                      "type": "integer"
                    },
                    "receivedNbOfEvents": {
                      "type": "integer"
                    }
                  }
                },
                "outcome": {
                  "type": "string",
                  "enum": [
                    "success",
                    "failure",
                    "processing"
                  ]
                },
                "failureThreshold": {
                  "type": "integer",
                  "minimum": 0,
                  "maximum": 100,
                  "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
                },
                "reason": {
                  "type": "string",
                  "description": "Explains the result of outcome."
                },
                "reasonCode": {
                  "type": "string",
                  "description": "An identifier that pairs with the outcome reason.",
                  "enum": [
                    "internal",
                    "critical",
                    "no_events",
                    "too_many_errors",
                    "ok",
                    "discarded",
                    "blocking"
                  ]
                },
                "type": {
                  "type": "string",
                  "enum": [
                    "reindex",
                    "update",
                    "discover"
                  ]
                },
                "createdAt": {
                  "type": "string",
                  "description": "Date of creation (RFC3339 format)."
                },
                "startedAt": {
                  "type": "string",
                  "description": "Date of start (RFC3339 format)."
                },
                "finishedAt": {
                  "type": "string",
                  "description": "Date of finish (RFC3339 format)."
                }
              },
              "required": [
                "runID",
                "appID",
                "taskID",
                "status",
                "type",
                "createdAt"
              ]
            }
          },
          "pagination": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
              "nbPages": {
                "type": "integer"
              },
              "page": {
                "type": "integer"
              },
              "nbItems": {
                "type": "integer"
              },
              "itemsPerPage": {
                "type": "integer"
              }
            },
            "required": [
              "nbPages",
              "page",
              "nbItems",
              "itemsPerPage"
            ]
          },
          "window": {
            "type": "object",
            "additionalProperties": false,
            "description": "The window parameter represents the holds the dates used to query the Observability data from the database in a given window.",
            "properties": {
              "startDate": {
                "type": "string",
                "description": "A date in format RFC3339 representing the oldest possible data in query window."
              },
              "endDate": {
                "type": "string",
                "description": "A date in format RFC3339 representing the newest possible data in query window."
              }
            },
            "required": [
              "startDate",
              "endDate"
            ]
          }
        },
        "required": [
          "runs",
          "pagination",
          "window"
        ]
      },
      "EventStatus": {
        "type": "string",
        "enum": [
          "created",
          "started",
          "retried",
          "failed",
          "succeeded",
          "critical"
        ]
      },
      "EventType": {
        "type": "string",
        "enum": [
          "fetch",
          "record",
          "log",
          "transform"
        ]
      },
      "eventSortKeys": {
        "type": "string",
        "description": "Used to sort the Event list endpoint.",
        "enum": [
          "status",
          "type",
          "publishedAt"
        ]
      },
      "eventID": {
        "type": "string",
        "description": "The event UUID.",
        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      },
      "publishedAt": {
        "type": "string",
        "description": "Date of publish (RFC3339 format)."
      },
      "Event": {
        "type": "object",
        "description": "An event describe a step of the task execution flow..",
        "additionalProperties": false,
        "properties": {
          "eventID": {
            "type": "string",
            "description": "The event UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "runID": {
            "type": "string",
            "description": "The run UUID.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "parentID": {
            "type": "string",
            "description": "The parent event, the cause of this event.",
            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
          },
          "status": {
            "type": "string",
            "enum": [
              "created",
              "started",
              "retried",
              "failed",
              "succeeded",
              "critical"
            ]
          },
          "type": {
            "type": "string",
            "enum": [
              "fetch",
              "record",
              "log",
              "transform"
            ]
          },
          "batchSize": {
            "type": "integer",
            "description": "The extracted record batch size.",
            "example": 10,
            "minimum": 0,
            "multipleOf": 1
          },
          "data": {
            "type": "object",
            "additionalProperties": true
          },
          "publishedAt": {
            "type": "string",
            "description": "Date of publish (RFC3339 format)."
          }
        },
        "required": [
          "eventID",
          "runID",
          "status",
          "type",
          "batchSize",
          "publishedAt"
        ]
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request or request arguments.",
        "content": {
          "application/json": {
            "schema": {
              "description": "Error.",
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid Application-Id or API-Key"
                }
              }
            }
          }
        }
      },
      "FeatureNotEnabled": {
        "description": "This feature is not enabled on your Algolia account.",
        "content": {
          "application/json": {
            "schema": {
              "description": "Error.",
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid Application-Id or API-Key"
                }
              }
            }
          }
        }
      },
      "MethodNotAllowed": {
        "description": "Method not allowed with this API key.",
        "content": {
          "application/json": {
            "schema": {
              "description": "Error.",
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid Application-Id or API-Key"
                }
              }
            }
          }
        }
      },
      "IndexNotFound": {
        "description": "Index not found.",
        "content": {
          "application/json": {
            "schema": {
              "description": "Error.",
              "type": "object",
              "additionalProperties": true,
              "properties": {
                "message": {
                  "type": "string",
                  "example": "Invalid Application-Id or API-Key"
                }
              }
            }
          }
        }
      }
    }
  },
  "servers": [
    {
      "url": "https://data.{region}.algolia.com",
      "variables": {
        "region": {
          "enum": [
            "eu",
            "us"
          ],
          "default": "us"
        }
      }
    }
  ],
  "security": [
    {
      "appId": [],
      "apiKey": []
    }
  ],
  "tags": [
    {
      "name": "authentications",
      "x-displayName": "Authentications",
      "description": "An authentication describe the way we connect to Algolia, or any supported connector."
    },
    {
      "name": "destinations",
      "x-displayName": "Destinations",
      "description": "A destination refers to an Algolia product (Search, Insight, Recommend, ...)."
    },
    {
      "name": "observability",
      "x-displayName": "Observability",
      "description": "The observability API associates a run to a task execution."
    },
    {
      "name": "sources",
      "x-displayName": "Sources",
      "description": "A source describe the platform informations."
    },
    {
      "name": "tasks",
      "x-displayName": "Tasks",
      "description": "A Task describe how we fetch the data (onDemand, schedule, subscription) from a source and how we index it on the Algolia side."
    }
  ],
  "paths": {
    "/1{path}": {
      "get": {
        "operationId": "customGet",
        "summary": "Send requests to the Algolia REST API.",
        "description": "This method allow you to send requests to the Algolia REST API.",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Path of the endpoint, anything after \"/1\" must be specified.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/keys"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "description": "Query parameters to apply to the current query.",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "402": {
            "description": "This feature is not enabled on your Algolia account.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Method not allowed with this API key.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Index not found.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "customPost",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API.",
        "description": "This method allow you to send requests to the Algolia REST API.",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Path of the endpoint, anything after \"/1\" must be specified.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/keys"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "description": "Query parameters to apply to the current query.",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "402": {
            "description": "This feature is not enabled on your Algolia account.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Method not allowed with this API key.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Index not found.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "customPut",
        "requestBody": {
          "description": "Parameters to send with the custom request.",
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "summary": "Send requests to the Algolia REST API.",
        "description": "This method allow you to send requests to the Algolia REST API.",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Path of the endpoint, anything after \"/1\" must be specified.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/keys"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "description": "Query parameters to apply to the current query.",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "402": {
            "description": "This feature is not enabled on your Algolia account.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Method not allowed with this API key.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Index not found.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "customDelete",
        "summary": "Send requests to the Algolia REST API.",
        "description": "This method allow you to send requests to the Algolia REST API.",
        "parameters": [
          {
            "name": "path",
            "in": "path",
            "description": "Path of the endpoint, anything after \"/1\" must be specified.",
            "required": true,
            "schema": {
              "type": "string",
              "example": "/keys"
            }
          },
          {
            "name": "parameters",
            "in": "query",
            "description": "Query parameters to apply to the current query.",
            "schema": {
              "type": "object",
              "additionalProperties": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "402": {
            "description": "This feature is not enabled on your Algolia account.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Method not allowed with this API key.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Index not found.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/authentications": {
      "get": {
        "tags": [
          "authentications"
        ],
        "summary": "Get a list of authentications.",
        "description": "Get a list of authentications for the given query parameters, with pagination details.",
        "operationId": "getAuthentications",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to fetch, starting at 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the authentications to retrieve.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Type of the Authentication, defines what kind of object is stored in the input.",
                "enum": [
                  "googleServiceAccount",
                  "basic",
                  "apiKey",
                  "oauth",
                  "algolia"
                ]
              },
              "example": "basic,oauth"
            }
          },
          {
            "name": "platform",
            "in": "query",
            "description": "The platform of the authentications to retrieve.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "oneOf": [
                  {
                    "type": "string",
                    "nullable": true,
                    "description": "Describe which platform the Authentication is used for.",
                    "enum": [
                      "bigcommerce",
                      "commercetools"
                    ]
                  },
                  {
                    "type": "string",
                    "description": "Used to filter Authentication without platform property.",
                    "enum": [
                      "none"
                    ]
                  }
                ]
              },
              "example": "commercetools,none"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key by which the list should be sorted.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to sort the Authentication list endpoint.",
              "enum": [
                "name",
                "auth_type",
                "platform",
                "updatedAt",
                "createdAt"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned list.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to order a sorted request.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "listAuthenticationsResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "authentications": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "An authentication is used to login into a Source or a Destination, with obfuscated input.",
                        "additionalProperties": false,
                        "properties": {
                          "authenticationID": {
                            "type": "string",
                            "description": "The authentication UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of the Authentication, defines what kind of object is stored in the input.",
                            "enum": [
                              "googleServiceAccount",
                              "basic",
                              "apiKey",
                              "oauth",
                              "algolia"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "description": "An human readable name describing the object."
                          },
                          "platform": {
                            "type": "string",
                            "nullable": true,
                            "description": "Describe which platform the Authentication is used for.",
                            "enum": [
                              "bigcommerce",
                              "commercetools"
                            ]
                          },
                          "input": {
                            "oneOf": [
                              {
                                "type": "object",
                                "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
                                "additionalProperties": false,
                                "properties": {
                                  "clientEmail": {
                                    "type": "string",
                                    "description": "Email address of the Service Account.",
                                    "example": "service-account-name@project-id.iam.gserviceaccount.com"
                                  },
                                  "privateKey": {
                                    "type": "string",
                                    "description": "Private key of the Service Account."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Authentication input for Basic login with username and password.",
                                "additionalProperties": false,
                                "properties": {
                                  "username": {
                                    "type": "string"
                                  },
                                  "password": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Authentication input used for token credentials.",
                                "additionalProperties": false,
                                "properties": {
                                  "key": {
                                    "type": "string"
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "description": "Authentication input for OAuth login.",
                                "additionalProperties": false,
                                "properties": {
                                  "url": {
                                    "type": "string",
                                    "description": "The OAuth endpoint URL."
                                  },
                                  "client_id": {
                                    "type": "string",
                                    "description": "The clientID."
                                  },
                                  "client_secret": {
                                    "type": "string",
                                    "description": "The secret."
                                  }
                                }
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "appID": {
                                    "type": "string",
                                    "description": "Algolia Application ID."
                                  },
                                  "apiKey": {
                                    "type": "string",
                                    "description": "Algolia API Key, with the correct rights to push to an index and change settings."
                                  }
                                }
                              }
                            ]
                          },
                          "createdAt": {
                            "type": "string",
                            "description": "Date of creation (RFC3339 format)."
                          },
                          "updatedAt": {
                            "type": "string",
                            "description": "Date of last update (RFC3339 format)."
                          }
                        },
                        "required": [
                          "authenticationID",
                          "type",
                          "name",
                          "input",
                          "createdAt"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "nbPages": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "nbItems": {
                          "type": "integer"
                        },
                        "itemsPerPage": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "nbPages",
                        "page",
                        "nbItems",
                        "itemsPerPage"
                      ]
                    }
                  },
                  "required": [
                    "authentications",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "authentications"
        ],
        "summary": "Create a authentication.",
        "description": "Create a authentication.",
        "operationId": "createAuthentication",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "The payload when creating an authentication.",
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the Authentication, defines what kind of object is stored in the input.",
                    "enum": [
                      "googleServiceAccount",
                      "basic",
                      "apiKey",
                      "oauth",
                      "algolia"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "An human readable name describing the object."
                  },
                  "platform": {
                    "type": "string",
                    "nullable": true,
                    "description": "Describe which platform the Authentication is used for.",
                    "enum": [
                      "bigcommerce",
                      "commercetools"
                    ]
                  },
                  "input": {
                    "oneOf": [
                      {
                        "type": "object",
                        "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
                        "additionalProperties": false,
                        "properties": {
                          "clientEmail": {
                            "type": "string",
                            "description": "Email address of the Service Account.",
                            "example": "service-account-name@project-id.iam.gserviceaccount.com"
                          },
                          "privateKey": {
                            "type": "string",
                            "description": "Private key of the Service Account."
                          }
                        },
                        "required": [
                          "clientEmail",
                          "privateKey"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Authentication input for Basic login with username and password.",
                        "additionalProperties": false,
                        "properties": {
                          "username": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "username",
                          "password"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Authentication input used for token credentials.",
                        "additionalProperties": false,
                        "properties": {
                          "key": {
                            "type": "string"
                          }
                        },
                        "required": [
                          "key"
                        ]
                      },
                      {
                        "type": "object",
                        "description": "Authentication input for OAuth login.",
                        "additionalProperties": false,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "The OAuth endpoint URL."
                          },
                          "client_id": {
                            "type": "string",
                            "description": "The clientID."
                          },
                          "client_secret": {
                            "type": "string",
                            "description": "The secret."
                          }
                        },
                        "required": [
                          "url",
                          "client_id",
                          "client_secret"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "appID": {
                            "type": "string",
                            "description": "Algolia Application ID."
                          },
                          "apiKey": {
                            "type": "string",
                            "description": "Algolia API Key, with the correct rights to push to an index and change settings."
                          }
                        },
                        "required": [
                          "appID",
                          "apiKey"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "type",
                  "name",
                  "input"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "Response from the API when the Authentication is successfully created.",
                  "additionalProperties": false,
                  "properties": {
                    "authenticationID": {
                      "type": "string",
                      "description": "The authentication UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "name": {
                      "type": "string",
                      "description": "An human readable name describing the object."
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    }
                  },
                  "required": [
                    "authenticationID",
                    "name",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/authentications/search": {
      "post": {
        "tags": [
          "authentications"
        ],
        "summary": "Search among authentications.",
        "description": "Search among authentications with a defined set of parameters.",
        "operationId": "searchAuthentications",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "Payload to search for multiple authentications, based on the given `authenticationIDs`.",
                "properties": {
                  "authenticationIDs": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The authentication UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    }
                  }
                },
                "required": [
                  "authenticationIDs"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "searchAuthenticationsResponse",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "An authentication is used to login into a Source or a Destination, with obfuscated input.",
                    "additionalProperties": false,
                    "properties": {
                      "authenticationID": {
                        "type": "string",
                        "description": "The authentication UUID.",
                        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the Authentication, defines what kind of object is stored in the input.",
                        "enum": [
                          "googleServiceAccount",
                          "basic",
                          "apiKey",
                          "oauth",
                          "algolia"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "description": "An human readable name describing the object."
                      },
                      "platform": {
                        "type": "string",
                        "nullable": true,
                        "description": "Describe which platform the Authentication is used for.",
                        "enum": [
                          "bigcommerce",
                          "commercetools"
                        ]
                      },
                      "input": {
                        "oneOf": [
                          {
                            "type": "object",
                            "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
                            "additionalProperties": false,
                            "properties": {
                              "clientEmail": {
                                "type": "string",
                                "description": "Email address of the Service Account.",
                                "example": "service-account-name@project-id.iam.gserviceaccount.com"
                              },
                              "privateKey": {
                                "type": "string",
                                "description": "Private key of the Service Account."
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Authentication input for Basic login with username and password.",
                            "additionalProperties": false,
                            "properties": {
                              "username": {
                                "type": "string"
                              },
                              "password": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Authentication input used for token credentials.",
                            "additionalProperties": false,
                            "properties": {
                              "key": {
                                "type": "string"
                              }
                            }
                          },
                          {
                            "type": "object",
                            "description": "Authentication input for OAuth login.",
                            "additionalProperties": false,
                            "properties": {
                              "url": {
                                "type": "string",
                                "description": "The OAuth endpoint URL."
                              },
                              "client_id": {
                                "type": "string",
                                "description": "The clientID."
                              },
                              "client_secret": {
                                "type": "string",
                                "description": "The secret."
                              }
                            }
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "appID": {
                                "type": "string",
                                "description": "Algolia Application ID."
                              },
                              "apiKey": {
                                "type": "string",
                                "description": "Algolia API Key, with the correct rights to push to an index and change settings."
                              }
                            }
                          }
                        ]
                      },
                      "createdAt": {
                        "type": "string",
                        "description": "Date of creation (RFC3339 format)."
                      },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date of last update (RFC3339 format)."
                      }
                    },
                    "required": [
                      "authenticationID",
                      "type",
                      "name",
                      "input",
                      "createdAt"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/authentications/{authenticationID}": {
      "get": {
        "tags": [
          "authentications"
        ],
        "summary": "Get a authentication.",
        "description": "Get the authentication of the given authenticationID.",
        "operationId": "getAuthentication",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "authenticationID",
            "in": "path",
            "required": true,
            "description": "The authentication UUID.",
            "schema": {
              "type": "string",
              "description": "The authentication UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An authentication is used to login into a Source or a Destination, with obfuscated input.",
                  "additionalProperties": false,
                  "properties": {
                    "authenticationID": {
                      "type": "string",
                      "description": "The authentication UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the Authentication, defines what kind of object is stored in the input.",
                      "enum": [
                        "googleServiceAccount",
                        "basic",
                        "apiKey",
                        "oauth",
                        "algolia"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "An human readable name describing the object."
                    },
                    "platform": {
                      "type": "string",
                      "nullable": true,
                      "description": "Describe which platform the Authentication is used for.",
                      "enum": [
                        "bigcommerce",
                        "commercetools"
                      ]
                    },
                    "input": {
                      "oneOf": [
                        {
                          "type": "object",
                          "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
                          "additionalProperties": false,
                          "properties": {
                            "clientEmail": {
                              "type": "string",
                              "description": "Email address of the Service Account.",
                              "example": "service-account-name@project-id.iam.gserviceaccount.com"
                            },
                            "privateKey": {
                              "type": "string",
                              "description": "Private key of the Service Account."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "description": "Authentication input for Basic login with username and password.",
                          "additionalProperties": false,
                          "properties": {
                            "username": {
                              "type": "string"
                            },
                            "password": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "description": "Authentication input used for token credentials.",
                          "additionalProperties": false,
                          "properties": {
                            "key": {
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "description": "Authentication input for OAuth login.",
                          "additionalProperties": false,
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "The OAuth endpoint URL."
                            },
                            "client_id": {
                              "type": "string",
                              "description": "The clientID."
                            },
                            "client_secret": {
                              "type": "string",
                              "description": "The secret."
                            }
                          }
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "appID": {
                              "type": "string",
                              "description": "Algolia Application ID."
                            },
                            "apiKey": {
                              "type": "string",
                              "description": "Algolia API Key, with the correct rights to push to an index and change settings."
                            }
                          }
                        }
                      ]
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "authenticationID",
                    "type",
                    "name",
                    "input",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "authentications"
        ],
        "summary": "Update a authentication.",
        "description": "Update the authentication of the given authenticationID.",
        "operationId": "updateAuthentication",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "authenticationID",
            "in": "path",
            "required": true,
            "description": "The authentication UUID.",
            "schema": {
              "type": "string",
              "description": "The authentication UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "description": "Payload to partially update an Authentication.",
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the Authentication, defines what kind of object is stored in the input.",
                    "enum": [
                      "googleServiceAccount",
                      "basic",
                      "apiKey",
                      "oauth",
                      "algolia"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "An human readable name describing the object."
                  },
                  "platform": {
                    "type": "string",
                    "nullable": true,
                    "description": "Describe which platform the Authentication is used for.",
                    "enum": [
                      "bigcommerce",
                      "commercetools"
                    ]
                  },
                  "input": {
                    "oneOf": [
                      {
                        "type": "object",
                        "description": "Authentication input to connect to a Google service (e.g. BigQuery).",
                        "additionalProperties": false,
                        "properties": {
                          "clientEmail": {
                            "type": "string",
                            "description": "Email address of the Service Account.",
                            "example": "service-account-name@project-id.iam.gserviceaccount.com"
                          },
                          "privateKey": {
                            "type": "string",
                            "description": "Private key of the Service Account."
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Authentication input for Basic login with username and password.",
                        "additionalProperties": false,
                        "properties": {
                          "username": {
                            "type": "string"
                          },
                          "password": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Authentication input used for token credentials.",
                        "additionalProperties": false,
                        "properties": {
                          "key": {
                            "type": "string"
                          }
                        }
                      },
                      {
                        "type": "object",
                        "description": "Authentication input for OAuth login.",
                        "additionalProperties": false,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "The OAuth endpoint URL."
                          },
                          "client_id": {
                            "type": "string",
                            "description": "The clientID."
                          },
                          "client_secret": {
                            "type": "string",
                            "description": "The secret."
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "appID": {
                            "type": "string",
                            "description": "Algolia Application ID."
                          },
                          "apiKey": {
                            "type": "string",
                            "description": "Algolia API Key, with the correct rights to push to an index and change settings."
                          }
                        }
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Response from the API when the Authentication is successfully updated.",
                  "properties": {
                    "authenticationID": {
                      "type": "string",
                      "description": "The authentication UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "name": {
                      "type": "string",
                      "description": "An human readable name describing the object."
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "authenticationID",
                    "name",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "authentications"
        ],
        "summary": "Delete a authentication.",
        "description": "Soft delete the authentication of the given authenticationID.",
        "operationId": "deleteAuthentication",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "authenticationID",
            "in": "path",
            "required": true,
            "description": "The authentication UUID.",
            "schema": {
              "type": "string",
              "description": "The authentication UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedAt": {
                      "type": "string",
                      "description": "Date of deletion (RFC3339 format)."
                    }
                  },
                  "required": [
                    "deletedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/destinations": {
      "get": {
        "tags": [
          "destinations"
        ],
        "summary": "Get a list of destinations.",
        "description": "Get a list of destinations for the given query parameters, with pagination details.",
        "operationId": "getDestinations",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to fetch, starting at 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the destinations to retrive.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
                "enum": [
                  "search",
                  "insights",
                  "flow"
                ]
              },
              "example": "search"
            }
          },
          {
            "name": "authenticationID",
            "in": "query",
            "description": "The authenticationIDs of the destinations to retrive.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The authentication UUID.",
                "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key by which the list should be sorted.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to sort the Destination list endpoint.",
              "enum": [
                "name",
                "type",
                "updatedAt",
                "createdAt"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned list.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to order a sorted request.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "listDestinationsResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "destinations": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A destination describe how the data is indexed on the Algolia side.",
                        "additionalProperties": false,
                        "properties": {
                          "destinationID": {
                            "type": "string",
                            "description": "The destination UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "type": {
                            "type": "string",
                            "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
                            "enum": [
                              "search",
                              "insights",
                              "flow"
                            ]
                          },
                          "name": {
                            "type": "string",
                            "description": "An human readable name describing the object."
                          },
                          "input": {
                            "oneOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "indexPrefix": {
                                    "type": "string",
                                    "description": "The prefix of the final index name."
                                  }
                                },
                                "required": [
                                  "indexPrefix"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "indexName": {
                                    "type": "string",
                                    "description": "The index name to store data in."
                                  },
                                  "recordType": {
                                    "type": "string",
                                    "description": "Determines the indexing strategy to use for a given e-commerce source.",
                                    "enum": [
                                      "product",
                                      "variant"
                                    ]
                                  },
                                  "attributesToExclude": {
                                    "type": "array",
                                    "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "required": [
                                  "indexName"
                                ]
                              }
                            ]
                          },
                          "createdAt": {
                            "type": "string",
                            "description": "Date of creation (RFC3339 format)."
                          },
                          "updatedAt": {
                            "type": "string",
                            "description": "Date of last update (RFC3339 format)."
                          },
                          "authenticationID": {
                            "type": "string",
                            "description": "The authentication UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          }
                        },
                        "required": [
                          "destinationID",
                          "type",
                          "name",
                          "input",
                          "createdAt"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "nbPages": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "nbItems": {
                          "type": "integer"
                        },
                        "itemsPerPage": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "nbPages",
                        "page",
                        "nbItems",
                        "itemsPerPage"
                      ]
                    }
                  },
                  "required": [
                    "destinations",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "destinations"
        ],
        "summary": "Create a destination.",
        "description": "Create a destination.",
        "operationId": "createDestination",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The payload when creating a destination.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
                    "enum": [
                      "search",
                      "insights",
                      "flow"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "An human readable name describing the object."
                  },
                  "input": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "indexPrefix": {
                            "type": "string",
                            "description": "The prefix of the final index name."
                          }
                        },
                        "required": [
                          "indexPrefix"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "indexName": {
                            "type": "string",
                            "description": "The index name to store data in."
                          },
                          "recordType": {
                            "type": "string",
                            "description": "Determines the indexing strategy to use for a given e-commerce source.",
                            "enum": [
                              "product",
                              "variant"
                            ]
                          },
                          "attributesToExclude": {
                            "type": "array",
                            "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "indexName"
                        ]
                      }
                    ]
                  },
                  "authenticationID": {
                    "type": "string",
                    "description": "The authentication UUID.",
                    "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                  }
                },
                "required": [
                  "type",
                  "name",
                  "input"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Response from the API when the Destination is successfully created.",
                  "properties": {
                    "destinationID": {
                      "type": "string",
                      "description": "The destination UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "name": {
                      "type": "string",
                      "description": "An human readable name describing the object."
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    }
                  },
                  "required": [
                    "destinationID",
                    "name",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/destinations/search": {
      "post": {
        "tags": [
          "destinations"
        ],
        "summary": "Search among destinations.",
        "description": "Search among destinations with a defined set of parameters.",
        "operationId": "searchDestinations",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "Payload to search for multiple destinations, based on the given `destinationIDs`.",
                "properties": {
                  "destinationIDs": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The destination UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    }
                  }
                },
                "required": [
                  "destinationIDs"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "searchDestinationsResponse",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "description": "A destination describe how the data is indexed on the Algolia side.",
                    "additionalProperties": false,
                    "properties": {
                      "destinationID": {
                        "type": "string",
                        "description": "The destination UUID.",
                        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                      },
                      "type": {
                        "type": "string",
                        "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
                        "enum": [
                          "search",
                          "insights",
                          "flow"
                        ]
                      },
                      "name": {
                        "type": "string",
                        "description": "An human readable name describing the object."
                      },
                      "input": {
                        "oneOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "indexPrefix": {
                                "type": "string",
                                "description": "The prefix of the final index name."
                              }
                            },
                            "required": [
                              "indexPrefix"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "indexName": {
                                "type": "string",
                                "description": "The index name to store data in."
                              },
                              "recordType": {
                                "type": "string",
                                "description": "Determines the indexing strategy to use for a given e-commerce source.",
                                "enum": [
                                  "product",
                                  "variant"
                                ]
                              },
                              "attributesToExclude": {
                                "type": "array",
                                "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "indexName"
                            ]
                          }
                        ]
                      },
                      "createdAt": {
                        "type": "string",
                        "description": "Date of creation (RFC3339 format)."
                      },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date of last update (RFC3339 format)."
                      },
                      "authenticationID": {
                        "type": "string",
                        "description": "The authentication UUID.",
                        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                      }
                    },
                    "required": [
                      "destinationID",
                      "type",
                      "name",
                      "input",
                      "createdAt"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/destinations/{destinationID}": {
      "get": {
        "tags": [
          "destinations"
        ],
        "summary": "Get a destination.",
        "description": "Get the destination of the given destinationID.",
        "operationId": "getDestination",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "destinationID",
            "in": "path",
            "required": true,
            "description": "The destination UUID.",
            "schema": {
              "type": "string",
              "description": "The destination UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "A destination describe how the data is indexed on the Algolia side.",
                  "additionalProperties": false,
                  "properties": {
                    "destinationID": {
                      "type": "string",
                      "description": "The destination UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "type": {
                      "type": "string",
                      "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
                      "enum": [
                        "search",
                        "insights",
                        "flow"
                      ]
                    },
                    "name": {
                      "type": "string",
                      "description": "An human readable name describing the object."
                    },
                    "input": {
                      "oneOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "indexPrefix": {
                              "type": "string",
                              "description": "The prefix of the final index name."
                            }
                          },
                          "required": [
                            "indexPrefix"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "indexName": {
                              "type": "string",
                              "description": "The index name to store data in."
                            },
                            "recordType": {
                              "type": "string",
                              "description": "Determines the indexing strategy to use for a given e-commerce source.",
                              "enum": [
                                "product",
                                "variant"
                              ]
                            },
                            "attributesToExclude": {
                              "type": "array",
                              "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "indexName"
                          ]
                        }
                      ]
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    },
                    "authenticationID": {
                      "type": "string",
                      "description": "The authentication UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    }
                  },
                  "required": [
                    "destinationID",
                    "type",
                    "name",
                    "input",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "destinations"
        ],
        "summary": "Update a destination.",
        "description": "Update the destination of the given destinationID.",
        "operationId": "updateDestination",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "destinationID",
            "in": "path",
            "required": true,
            "description": "The destination UUID.",
            "schema": {
              "type": "string",
              "description": "The destination UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "Payload to partially update a Destination.",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Type of the Destination, defines in which Algolia product the data will be stored.",
                    "enum": [
                      "search",
                      "insights",
                      "flow"
                    ]
                  },
                  "name": {
                    "type": "string",
                    "description": "An human readable name describing the object."
                  },
                  "input": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "indexPrefix": {
                            "type": "string",
                            "description": "The prefix of the final index name."
                          }
                        },
                        "required": [
                          "indexPrefix"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "indexName": {
                            "type": "string",
                            "description": "The index name to store data in."
                          },
                          "recordType": {
                            "type": "string",
                            "description": "Determines the indexing strategy to use for a given e-commerce source.",
                            "enum": [
                              "product",
                              "variant"
                            ]
                          },
                          "attributesToExclude": {
                            "type": "array",
                            "description": "Determines the attributes to exclude from an Algolia record.\nTo remove nested element, you can separate the path to the element with dots (`.`):\n  - \"foo.bar\": will remove `bar` from `foo`.\nTo remove elements from an array, you can use the following:\n  - \"foo.[0].bar\": will only remove `bar` from the first element of `foo`.\n  - \"foo.[*].bar\": will remove `bar` from every elements of `foo`.\n",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "indexName"
                        ]
                      }
                    ]
                  },
                  "authenticationID": {
                    "type": "string",
                    "description": "The authentication UUID.",
                    "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "Response from the API when the Destination is successfully updated.",
                  "properties": {
                    "destinationID": {
                      "type": "string",
                      "description": "The destination UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "name": {
                      "type": "string",
                      "description": "An human readable name describing the object."
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "destinationID",
                    "name",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "destinations"
        ],
        "summary": "Delete a destination.",
        "description": "Soft delete the destination of the given destinationID.",
        "operationId": "deleteDestination",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "destinationID",
            "in": "path",
            "required": true,
            "description": "The destination UUID.",
            "schema": {
              "type": "string",
              "description": "The destination UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedAt": {
                      "type": "string",
                      "description": "Date of deletion (RFC3339 format)."
                    }
                  },
                  "required": [
                    "deletedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/sources": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get a list of sources.",
        "description": "Get a list of sources for the given query parameters, with pagination details.",
        "operationId": "getSources",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to fetch, starting at 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "The type of the sources to retrieve.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "bigcommerce",
                  "commercetools",
                  "json",
                  "csv",
                  "bigquery",
                  "docker"
                ]
              },
              "example": "commercetools,bigcommerce"
            }
          },
          {
            "name": "authenticationID",
            "in": "query",
            "description": "The authenticationIDs of the sources to retrieve. 'none' returns sources that doesn't have an authentication.\n",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The authentication UUID.",
                "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              },
              "example": [
                "10000000-0a75-4000-a000-000000000001",
                "none"
              ]
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key by which the list should be sorted.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to sort the Source list endpoint.",
              "enum": [
                "name",
                "type",
                "updatedAt",
                "createdAt"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned list.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to order a sorted request.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "listSourcesResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "sources": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "sourceID": {
                            "type": "string",
                            "description": "The source UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "bigcommerce",
                              "commercetools",
                              "json",
                              "csv",
                              "bigquery",
                              "docker"
                            ]
                          },
                          "name": {
                            "type": "string"
                          },
                          "input": {
                            "oneOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "storeKeys": {
                                    "type": "array",
                                    "items": {
                                      "description": "Unique and immutable key of the referenced Store.",
                                      "type": "string"
                                    }
                                  },
                                  "locales": {
                                    "type": "array",
                                    "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "url": {
                                    "type": "string"
                                  },
                                  "projectKey": {
                                    "type": "string"
                                  },
                                  "fallbackIsInStockValue": {
                                    "type": "boolean",
                                    "default": true,
                                    "description": "Determines the value that will be stored in the Algolia record if there's no inventory information on the product.\n"
                                  },
                                  "customFields": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                                    "properties": {
                                      "inventory": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "Inventory custom fields.",
                                        "nullable": true
                                      },
                                      "price": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "Price custom fields.",
                                        "nullable": true
                                      },
                                      "category": {
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        },
                                        "description": "Category custom fields.",
                                        "nullable": true
                                      }
                                    }
                                  }
                                },
                                "required": [
                                  "url",
                                  "projectKey"
                                ],
                                "x-discriminator-fields": [
                                  "projectKey"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "storeHash": {
                                    "type": "string",
                                    "description": "The store hash identifying the store the shopper is signing in to."
                                  },
                                  "channel": {
                                    "type": "object",
                                    "additionalProperties": false,
                                    "properties": {
                                      "id": {
                                        "type": "integer",
                                        "description": "The ID of the bigcommerce channel."
                                      },
                                      "currencies": {
                                        "type": "array",
                                        "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
                                        "example": [
                                          "usd",
                                          "eur"
                                        ],
                                        "items": {
                                          "type": "string",
                                          "example": "usd"
                                        }
                                      }
                                    },
                                    "required": [
                                      "id"
                                    ]
                                  },
                                  "customFields": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  },
                                  "productMetafields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "namespace": {
                                          "type": "string",
                                          "description": "The namespace of the metafield."
                                        },
                                        "key": {
                                          "type": "string",
                                          "description": "The key identifier of the metafield."
                                        }
                                      },
                                      "required": [
                                        "namespace",
                                        "key"
                                      ]
                                    }
                                  },
                                  "variantMetafields": {
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "additionalProperties": false,
                                      "properties": {
                                        "namespace": {
                                          "type": "string",
                                          "description": "The namespace of the metafield."
                                        },
                                        "key": {
                                          "type": "string",
                                          "description": "The key identifier of the metafield."
                                        }
                                      },
                                      "required": [
                                        "namespace",
                                        "key"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "storeHash"
                                ],
                                "x-discriminator-fields": [
                                  "storeHash"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the file."
                                  },
                                  "uniqueIDColumn": {
                                    "type": "string",
                                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                                  },
                                  "method": {
                                    "type": "string",
                                    "enum": [
                                      "GET",
                                      "POST"
                                    ]
                                  }
                                },
                                "required": [
                                  "url"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "url": {
                                    "type": "string",
                                    "description": "The URL of the file."
                                  },
                                  "uniqueIDColumn": {
                                    "type": "string",
                                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                                  },
                                  "mapping": {
                                    "type": "object",
                                    "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                                    "additionalProperties": {
                                      "type": "string",
                                      "enum": [
                                        "string",
                                        "integer",
                                        "float",
                                        "boolean",
                                        "json"
                                      ]
                                    }
                                  },
                                  "method": {
                                    "type": "string",
                                    "enum": [
                                      "GET",
                                      "POST"
                                    ]
                                  },
                                  "delimiter": {
                                    "type": "string",
                                    "minLength": 1,
                                    "maxLength": 1,
                                    "default": ",",
                                    "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
                                  }
                                },
                                "required": [
                                  "url"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "projectID": {
                                    "type": "string",
                                    "description": "Project ID of the BigQuery Source."
                                  },
                                  "datasetID": {
                                    "type": "string",
                                    "description": "Dataset ID of the BigQuery Source."
                                  },
                                  "dataType": {
                                    "type": "string",
                                    "enum": [
                                      "ga4",
                                      "ga360"
                                    ]
                                  },
                                  "table": {
                                    "type": "string",
                                    "description": "Table name (for default BQ)."
                                  },
                                  "tablePrefix": {
                                    "type": "string",
                                    "description": "Table prefix (for Google Analytics)."
                                  },
                                  "customSQLRequest": {
                                    "type": "string",
                                    "description": "Custom SQL request to extract data from the BigQuery table."
                                  },
                                  "uniqueIDColumn": {
                                    "type": "string",
                                    "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                                  }
                                },
                                "required": [
                                  "projectID",
                                  "datasetID"
                                ],
                                "x-discriminator-fields": [
                                  "projectID"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "imageType": {
                                    "type": "string",
                                    "enum": [
                                      "singer",
                                      "custom",
                                      "airbyte"
                                    ],
                                    "description": "The type of the image."
                                  },
                                  "registry": {
                                    "type": "string",
                                    "enum": [
                                      "dockerhub",
                                      "ghcr"
                                    ],
                                    "description": "The registry where the image is stored."
                                  },
                                  "image": {
                                    "type": "string",
                                    "description": "The name of the image to pull.",
                                    "example": "algolia/zendesk"
                                  },
                                  "version": {
                                    "type": "string",
                                    "description": "The version of the image, defaults to `latest`.",
                                    "example": "v2.1.0"
                                  },
                                  "configuration": {
                                    "type": "object",
                                    "description": "The configuration of the spec."
                                  }
                                },
                                "required": [
                                  "registry",
                                  "image",
                                  "imageType",
                                  "configuration"
                                ]
                              }
                            ]
                          },
                          "authenticationID": {
                            "type": "string",
                            "description": "The authentication UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "createdAt": {
                            "type": "string",
                            "description": "Date of creation (RFC3339 format)."
                          },
                          "updatedAt": {
                            "type": "string",
                            "description": "Date of last update (RFC3339 format)."
                          }
                        },
                        "required": [
                          "sourceID",
                          "type",
                          "name",
                          "input",
                          "createdAt"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "nbPages": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "nbItems": {
                          "type": "integer"
                        },
                        "itemsPerPage": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "nbPages",
                        "page",
                        "nbItems",
                        "itemsPerPage"
                      ]
                    }
                  },
                  "required": [
                    "sources",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Create a source.",
        "description": "Create a source.",
        "operationId": "createSource",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "bigcommerce",
                      "commercetools",
                      "json",
                      "csv",
                      "bigquery",
                      "docker"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "input": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "storeKeys": {
                            "type": "array",
                            "items": {
                              "description": "Unique and immutable key of the referenced Store.",
                              "type": "string"
                            }
                          },
                          "locales": {
                            "type": "array",
                            "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                            "items": {
                              "type": "string"
                            }
                          },
                          "url": {
                            "type": "string"
                          },
                          "projectKey": {
                            "type": "string"
                          },
                          "fallbackIsInStockValue": {
                            "type": "boolean",
                            "default": true,
                            "description": "Determines the value that will be stored in the Algolia record if there's no inventory information on the product.\n"
                          },
                          "customFields": {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                            "properties": {
                              "inventory": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Inventory custom fields.",
                                "nullable": true
                              },
                              "price": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Price custom fields.",
                                "nullable": true
                              },
                              "category": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Category custom fields.",
                                "nullable": true
                              }
                            }
                          }
                        },
                        "required": [
                          "url",
                          "projectKey"
                        ],
                        "x-discriminator-fields": [
                          "projectKey"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "storeHash": {
                            "type": "string",
                            "description": "The store hash identifying the store the shopper is signing in to."
                          },
                          "channel": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "id": {
                                "type": "integer",
                                "description": "The ID of the bigcommerce channel."
                              },
                              "currencies": {
                                "type": "array",
                                "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
                                "example": [
                                  "usd",
                                  "eur"
                                ],
                                "items": {
                                  "type": "string",
                                  "example": "usd"
                                }
                              }
                            },
                            "required": [
                              "id"
                            ]
                          },
                          "customFields": {
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          },
                          "productMetafields": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "namespace": {
                                  "type": "string",
                                  "description": "The namespace of the metafield."
                                },
                                "key": {
                                  "type": "string",
                                  "description": "The key identifier of the metafield."
                                }
                              },
                              "required": [
                                "namespace",
                                "key"
                              ]
                            }
                          },
                          "variantMetafields": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "namespace": {
                                  "type": "string",
                                  "description": "The namespace of the metafield."
                                },
                                "key": {
                                  "type": "string",
                                  "description": "The key identifier of the metafield."
                                }
                              },
                              "required": [
                                "namespace",
                                "key"
                              ]
                            }
                          }
                        },
                        "required": [
                          "storeHash"
                        ],
                        "x-discriminator-fields": [
                          "storeHash"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "The URL of the file."
                          },
                          "uniqueIDColumn": {
                            "type": "string",
                            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                          },
                          "method": {
                            "type": "string",
                            "enum": [
                              "GET",
                              "POST"
                            ]
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "The URL of the file."
                          },
                          "uniqueIDColumn": {
                            "type": "string",
                            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                          },
                          "mapping": {
                            "type": "object",
                            "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                            "additionalProperties": {
                              "type": "string",
                              "enum": [
                                "string",
                                "integer",
                                "float",
                                "boolean",
                                "json"
                              ]
                            }
                          },
                          "method": {
                            "type": "string",
                            "enum": [
                              "GET",
                              "POST"
                            ]
                          },
                          "delimiter": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1,
                            "default": ",",
                            "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "projectID": {
                            "type": "string",
                            "description": "Project ID of the BigQuery Source."
                          },
                          "datasetID": {
                            "type": "string",
                            "description": "Dataset ID of the BigQuery Source."
                          },
                          "dataType": {
                            "type": "string",
                            "enum": [
                              "ga4",
                              "ga360"
                            ]
                          },
                          "table": {
                            "type": "string",
                            "description": "Table name (for default BQ)."
                          },
                          "tablePrefix": {
                            "type": "string",
                            "description": "Table prefix (for Google Analytics)."
                          },
                          "customSQLRequest": {
                            "type": "string",
                            "description": "Custom SQL request to extract data from the BigQuery table."
                          },
                          "uniqueIDColumn": {
                            "type": "string",
                            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                          }
                        },
                        "required": [
                          "projectID",
                          "datasetID"
                        ],
                        "x-discriminator-fields": [
                          "projectID"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "imageType": {
                            "type": "string",
                            "enum": [
                              "singer",
                              "custom",
                              "airbyte"
                            ],
                            "description": "The type of the image."
                          },
                          "registry": {
                            "type": "string",
                            "enum": [
                              "dockerhub",
                              "ghcr"
                            ],
                            "description": "The registry where the image is stored."
                          },
                          "image": {
                            "type": "string",
                            "description": "The name of the image to pull.",
                            "example": "algolia/zendesk"
                          },
                          "version": {
                            "type": "string",
                            "description": "The version of the image, defaults to `latest`.",
                            "example": "v2.1.0"
                          },
                          "configuration": {
                            "type": "object",
                            "description": "The configuration of the spec."
                          }
                        },
                        "required": [
                          "registry",
                          "image",
                          "imageType",
                          "configuration"
                        ]
                      }
                    ]
                  },
                  "authenticationID": {
                    "type": "string",
                    "description": "The authentication UUID.",
                    "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                  }
                },
                "required": [
                  "type",
                  "name",
                  "input"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "sourceID": {
                      "type": "string",
                      "description": "The source UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "name": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    }
                  },
                  "required": [
                    "sourceID",
                    "name",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/sources/search": {
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Search among sources.",
        "description": "Search among sources with a defined set of parameters.",
        "operationId": "searchSources",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "sourceIDs": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "sourceIDs"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "searchSourcesResponse",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "sourceID": {
                        "type": "string",
                        "description": "The source UUID.",
                        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "bigcommerce",
                          "commercetools",
                          "json",
                          "csv",
                          "bigquery",
                          "docker"
                        ]
                      },
                      "name": {
                        "type": "string"
                      },
                      "input": {
                        "oneOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "storeKeys": {
                                "type": "array",
                                "items": {
                                  "description": "Unique and immutable key of the referenced Store.",
                                  "type": "string"
                                }
                              },
                              "locales": {
                                "type": "array",
                                "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "url": {
                                "type": "string"
                              },
                              "projectKey": {
                                "type": "string"
                              },
                              "fallbackIsInStockValue": {
                                "type": "boolean",
                                "default": true,
                                "description": "Determines the value that will be stored in the Algolia record if there's no inventory information on the product.\n"
                              },
                              "customFields": {
                                "type": "object",
                                "additionalProperties": false,
                                "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                                "properties": {
                                  "inventory": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "Inventory custom fields.",
                                    "nullable": true
                                  },
                                  "price": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "Price custom fields.",
                                    "nullable": true
                                  },
                                  "category": {
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    },
                                    "description": "Category custom fields.",
                                    "nullable": true
                                  }
                                }
                              }
                            },
                            "required": [
                              "url",
                              "projectKey"
                            ],
                            "x-discriminator-fields": [
                              "projectKey"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "storeHash": {
                                "type": "string",
                                "description": "The store hash identifying the store the shopper is signing in to."
                              },
                              "channel": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "id": {
                                    "type": "integer",
                                    "description": "The ID of the bigcommerce channel."
                                  },
                                  "currencies": {
                                    "type": "array",
                                    "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
                                    "example": [
                                      "usd",
                                      "eur"
                                    ],
                                    "items": {
                                      "type": "string",
                                      "example": "usd"
                                    }
                                  }
                                },
                                "required": [
                                  "id"
                                ]
                              },
                              "customFields": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              },
                              "productMetafields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "namespace": {
                                      "type": "string",
                                      "description": "The namespace of the metafield."
                                    },
                                    "key": {
                                      "type": "string",
                                      "description": "The key identifier of the metafield."
                                    }
                                  },
                                  "required": [
                                    "namespace",
                                    "key"
                                  ]
                                }
                              },
                              "variantMetafields": {
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "additionalProperties": false,
                                  "properties": {
                                    "namespace": {
                                      "type": "string",
                                      "description": "The namespace of the metafield."
                                    },
                                    "key": {
                                      "type": "string",
                                      "description": "The key identifier of the metafield."
                                    }
                                  },
                                  "required": [
                                    "namespace",
                                    "key"
                                  ]
                                }
                              }
                            },
                            "required": [
                              "storeHash"
                            ],
                            "x-discriminator-fields": [
                              "storeHash"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "url": {
                                "type": "string",
                                "description": "The URL of the file."
                              },
                              "uniqueIDColumn": {
                                "type": "string",
                                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                              },
                              "method": {
                                "type": "string",
                                "enum": [
                                  "GET",
                                  "POST"
                                ]
                              }
                            },
                            "required": [
                              "url"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "url": {
                                "type": "string",
                                "description": "The URL of the file."
                              },
                              "uniqueIDColumn": {
                                "type": "string",
                                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                              },
                              "mapping": {
                                "type": "object",
                                "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                                "additionalProperties": {
                                  "type": "string",
                                  "enum": [
                                    "string",
                                    "integer",
                                    "float",
                                    "boolean",
                                    "json"
                                  ]
                                }
                              },
                              "method": {
                                "type": "string",
                                "enum": [
                                  "GET",
                                  "POST"
                                ]
                              },
                              "delimiter": {
                                "type": "string",
                                "minLength": 1,
                                "maxLength": 1,
                                "default": ",",
                                "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
                              }
                            },
                            "required": [
                              "url"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "projectID": {
                                "type": "string",
                                "description": "Project ID of the BigQuery Source."
                              },
                              "datasetID": {
                                "type": "string",
                                "description": "Dataset ID of the BigQuery Source."
                              },
                              "dataType": {
                                "type": "string",
                                "enum": [
                                  "ga4",
                                  "ga360"
                                ]
                              },
                              "table": {
                                "type": "string",
                                "description": "Table name (for default BQ)."
                              },
                              "tablePrefix": {
                                "type": "string",
                                "description": "Table prefix (for Google Analytics)."
                              },
                              "customSQLRequest": {
                                "type": "string",
                                "description": "Custom SQL request to extract data from the BigQuery table."
                              },
                              "uniqueIDColumn": {
                                "type": "string",
                                "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                              }
                            },
                            "required": [
                              "projectID",
                              "datasetID"
                            ],
                            "x-discriminator-fields": [
                              "projectID"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "imageType": {
                                "type": "string",
                                "enum": [
                                  "singer",
                                  "custom",
                                  "airbyte"
                                ],
                                "description": "The type of the image."
                              },
                              "registry": {
                                "type": "string",
                                "enum": [
                                  "dockerhub",
                                  "ghcr"
                                ],
                                "description": "The registry where the image is stored."
                              },
                              "image": {
                                "type": "string",
                                "description": "The name of the image to pull.",
                                "example": "algolia/zendesk"
                              },
                              "version": {
                                "type": "string",
                                "description": "The version of the image, defaults to `latest`.",
                                "example": "v2.1.0"
                              },
                              "configuration": {
                                "type": "object",
                                "description": "The configuration of the spec."
                              }
                            },
                            "required": [
                              "registry",
                              "image",
                              "imageType",
                              "configuration"
                            ]
                          }
                        ]
                      },
                      "authenticationID": {
                        "type": "string",
                        "description": "The authentication UUID.",
                        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                      },
                      "createdAt": {
                        "type": "string",
                        "description": "Date of creation (RFC3339 format)."
                      },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date of last update (RFC3339 format)."
                      }
                    },
                    "required": [
                      "sourceID",
                      "type",
                      "name",
                      "input",
                      "createdAt"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/sources/{sourceID}": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Get a source.",
        "description": "Get the source of the given sourceID.",
        "operationId": "getSource",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "path",
            "required": true,
            "description": "The source UUID.",
            "schema": {
              "type": "string",
              "description": "The source UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "sourceID": {
                      "type": "string",
                      "description": "The source UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "bigcommerce",
                        "commercetools",
                        "json",
                        "csv",
                        "bigquery",
                        "docker"
                      ]
                    },
                    "name": {
                      "type": "string"
                    },
                    "input": {
                      "oneOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "storeKeys": {
                              "type": "array",
                              "items": {
                                "description": "Unique and immutable key of the referenced Store.",
                                "type": "string"
                              }
                            },
                            "locales": {
                              "type": "array",
                              "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                              "items": {
                                "type": "string"
                              }
                            },
                            "url": {
                              "type": "string"
                            },
                            "projectKey": {
                              "type": "string"
                            },
                            "fallbackIsInStockValue": {
                              "type": "boolean",
                              "default": true,
                              "description": "Determines the value that will be stored in the Algolia record if there's no inventory information on the product.\n"
                            },
                            "customFields": {
                              "type": "object",
                              "additionalProperties": false,
                              "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                              "properties": {
                                "inventory": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Inventory custom fields.",
                                  "nullable": true
                                },
                                "price": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Price custom fields.",
                                  "nullable": true
                                },
                                "category": {
                                  "type": "array",
                                  "items": {
                                    "type": "string"
                                  },
                                  "description": "Category custom fields.",
                                  "nullable": true
                                }
                              }
                            }
                          },
                          "required": [
                            "url",
                            "projectKey"
                          ],
                          "x-discriminator-fields": [
                            "projectKey"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "storeHash": {
                              "type": "string",
                              "description": "The store hash identifying the store the shopper is signing in to."
                            },
                            "channel": {
                              "type": "object",
                              "additionalProperties": false,
                              "properties": {
                                "id": {
                                  "type": "integer",
                                  "description": "The ID of the bigcommerce channel."
                                },
                                "currencies": {
                                  "type": "array",
                                  "description": "An array of currencies for the given channel `ID`, a currency is a trigram string that represents the currency code.",
                                  "example": [
                                    "usd",
                                    "eur"
                                  ],
                                  "items": {
                                    "type": "string",
                                    "example": "usd"
                                  }
                                }
                              },
                              "required": [
                                "id"
                              ]
                            },
                            "customFields": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "productMetafields": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "namespace": {
                                    "type": "string",
                                    "description": "The namespace of the metafield."
                                  },
                                  "key": {
                                    "type": "string",
                                    "description": "The key identifier of the metafield."
                                  }
                                },
                                "required": [
                                  "namespace",
                                  "key"
                                ]
                              }
                            },
                            "variantMetafields": {
                              "type": "array",
                              "items": {
                                "type": "object",
                                "additionalProperties": false,
                                "properties": {
                                  "namespace": {
                                    "type": "string",
                                    "description": "The namespace of the metafield."
                                  },
                                  "key": {
                                    "type": "string",
                                    "description": "The key identifier of the metafield."
                                  }
                                },
                                "required": [
                                  "namespace",
                                  "key"
                                ]
                              }
                            }
                          },
                          "required": [
                            "storeHash"
                          ],
                          "x-discriminator-fields": [
                            "storeHash"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "The URL of the file."
                            },
                            "uniqueIDColumn": {
                              "type": "string",
                              "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                            },
                            "method": {
                              "type": "string",
                              "enum": [
                                "GET",
                                "POST"
                              ]
                            }
                          },
                          "required": [
                            "url"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "url": {
                              "type": "string",
                              "description": "The URL of the file."
                            },
                            "uniqueIDColumn": {
                              "type": "string",
                              "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                            },
                            "mapping": {
                              "type": "object",
                              "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                              "additionalProperties": {
                                "type": "string",
                                "enum": [
                                  "string",
                                  "integer",
                                  "float",
                                  "boolean",
                                  "json"
                                ]
                              }
                            },
                            "method": {
                              "type": "string",
                              "enum": [
                                "GET",
                                "POST"
                              ]
                            },
                            "delimiter": {
                              "type": "string",
                              "minLength": 1,
                              "maxLength": 1,
                              "default": ",",
                              "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
                            }
                          },
                          "required": [
                            "url"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "projectID": {
                              "type": "string",
                              "description": "Project ID of the BigQuery Source."
                            },
                            "datasetID": {
                              "type": "string",
                              "description": "Dataset ID of the BigQuery Source."
                            },
                            "dataType": {
                              "type": "string",
                              "enum": [
                                "ga4",
                                "ga360"
                              ]
                            },
                            "table": {
                              "type": "string",
                              "description": "Table name (for default BQ)."
                            },
                            "tablePrefix": {
                              "type": "string",
                              "description": "Table prefix (for Google Analytics)."
                            },
                            "customSQLRequest": {
                              "type": "string",
                              "description": "Custom SQL request to extract data from the BigQuery table."
                            },
                            "uniqueIDColumn": {
                              "type": "string",
                              "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                            }
                          },
                          "required": [
                            "projectID",
                            "datasetID"
                          ],
                          "x-discriminator-fields": [
                            "projectID"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "properties": {
                            "imageType": {
                              "type": "string",
                              "enum": [
                                "singer",
                                "custom",
                                "airbyte"
                              ],
                              "description": "The type of the image."
                            },
                            "registry": {
                              "type": "string",
                              "enum": [
                                "dockerhub",
                                "ghcr"
                              ],
                              "description": "The registry where the image is stored."
                            },
                            "image": {
                              "type": "string",
                              "description": "The name of the image to pull.",
                              "example": "algolia/zendesk"
                            },
                            "version": {
                              "type": "string",
                              "description": "The version of the image, defaults to `latest`.",
                              "example": "v2.1.0"
                            },
                            "configuration": {
                              "type": "object",
                              "description": "The configuration of the spec."
                            }
                          },
                          "required": [
                            "registry",
                            "image",
                            "imageType",
                            "configuration"
                          ]
                        }
                      ]
                    },
                    "authenticationID": {
                      "type": "string",
                      "description": "The authentication UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "sourceID",
                    "type",
                    "name",
                    "input",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "sources"
        ],
        "summary": "Update a source.",
        "description": "Update the source of the given sourceID.",
        "operationId": "updateSource",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "path",
            "required": true,
            "description": "The source UUID.",
            "schema": {
              "type": "string",
              "description": "The source UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "input": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "storeKeys": {
                            "type": "array",
                            "description": "Unique and immutable key of the referenced Store.",
                            "items": {
                              "type": "string"
                            }
                          },
                          "locales": {
                            "type": "array",
                            "description": "Array of locales that must match the following pattern: ^[a-z]{2}(-[A-Z]{2})?$. For example [\"fr-FR\", \"en\"].\n",
                            "items": {
                              "type": "string"
                            }
                          },
                          "customFields": {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "Custom fields from Commercetools to index in the records (see https://docs.commercetools.com/tutorials/custom-types).",
                            "properties": {
                              "inventory": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Inventory custom fields.",
                                "nullable": true
                              },
                              "price": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Price custom fields.",
                                "nullable": true
                              },
                              "category": {
                                "type": "array",
                                "items": {
                                  "type": "string"
                                },
                                "description": "Category custom fields.",
                                "nullable": true
                              }
                            }
                          }
                        }
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "The URL of the file."
                          },
                          "uniqueIDColumn": {
                            "type": "string",
                            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                          },
                          "method": {
                            "type": "string",
                            "enum": [
                              "GET",
                              "POST"
                            ]
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "url": {
                            "type": "string",
                            "description": "The URL of the file."
                          },
                          "uniqueIDColumn": {
                            "type": "string",
                            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                          },
                          "mapping": {
                            "type": "object",
                            "description": "Mapping of type for every column. For example {\"myColumn\": \"boolean\", \"myOtherColumn\": \"json\"}.\n",
                            "additionalProperties": {
                              "type": "string",
                              "enum": [
                                "string",
                                "integer",
                                "float",
                                "boolean",
                                "json"
                              ]
                            }
                          },
                          "method": {
                            "type": "string",
                            "enum": [
                              "GET",
                              "POST"
                            ]
                          },
                          "delimiter": {
                            "type": "string",
                            "minLength": 1,
                            "maxLength": 1,
                            "default": ",",
                            "description": "The character used to split the value on each line, default to a comma (\\r, \\n, 0xFFFD, and space are forbidden)."
                          }
                        },
                        "required": [
                          "url"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "projectID": {
                            "type": "string",
                            "description": "Project ID of the BigQuery Source."
                          },
                          "datasetID": {
                            "type": "string",
                            "description": "Dataset ID of the BigQuery Source."
                          },
                          "dataType": {
                            "type": "string",
                            "enum": [
                              "ga4",
                              "ga360"
                            ]
                          },
                          "table": {
                            "type": "string",
                            "description": "Table name (for default BQ)."
                          },
                          "tablePrefix": {
                            "type": "string",
                            "description": "Table prefix (for Google Analytics)."
                          },
                          "customSQLRequest": {
                            "type": "string",
                            "description": "Custom SQL request to extract data from the BigQuery table."
                          },
                          "uniqueIDColumn": {
                            "type": "string",
                            "description": "The name of the column that contains the unique ID, used as `objectID` in Algolia."
                          }
                        },
                        "required": [
                          "projectID",
                          "datasetID"
                        ],
                        "x-discriminator-fields": [
                          "projectID"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "registry": {
                            "type": "string",
                            "enum": [
                              "dockerhub",
                              "ghcr"
                            ],
                            "description": "The registry where the image is stored."
                          },
                          "image": {
                            "type": "string",
                            "description": "The name of the image to pull.",
                            "example": "algolia/zendesk"
                          },
                          "version": {
                            "type": "string",
                            "description": "The version of the image, defaults to `latest`.",
                            "example": "v2.1.0"
                          },
                          "configuration": {
                            "type": "object",
                            "description": "The configuration of the spec."
                          }
                        },
                        "required": [
                          "configuration"
                        ]
                      }
                    ]
                  },
                  "authenticationID": {
                    "type": "string",
                    "description": "The authentication UUID.",
                    "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "sourceID": {
                      "type": "string",
                      "description": "The source UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "name": {
                      "type": "string"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "sourceID",
                    "name",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sources"
        ],
        "summary": "Delete a source.",
        "description": "Soft delete the source of the given sourceID.",
        "operationId": "deleteSource",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "path",
            "required": true,
            "description": "The source UUID.",
            "schema": {
              "type": "string",
              "description": "The source UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedAt": {
                      "type": "string",
                      "description": "Date of deletion (RFC3339 format)."
                    }
                  },
                  "required": [
                    "deletedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/sources/{sourceID}/discover": {
      "get": {
        "tags": [
          "sources"
        ],
        "summary": "Retrieve a stream listing.",
        "description": "Retrieve a stream listing for a given Singer specification compatible docker type source ID.",
        "operationId": "getDockerSourceStreams",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "path",
            "required": true,
            "description": "The source UUID.",
            "schema": {
              "type": "string",
              "description": "The source UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dockerSourceStreams",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "streams": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "A stream definition (see the Singer specification for details)."
                      }
                    }
                  },
                  "required": [
                    "streams"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sources"
        ],
        "summary": "Trigger a stream listing request.",
        "description": "Trigger a stream listing request for a Singer specification compatible docker type source.",
        "operationId": "triggerDockerSourceDiscover",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "sourceID",
            "in": "path",
            "required": true,
            "description": "The source UUID.",
            "schema": {
              "type": "string",
              "description": "The source UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "dockerSourceDiscover",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "runID": {
                      "type": "string",
                      "description": "The run UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    }
                  },
                  "required": [
                    "runID",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/tasks": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get a list of tasks.",
        "description": "Get a list of tasks for the given query parameters, with pagination details.",
        "operationId": "getTasks",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to fetch, starting at 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "action",
            "in": "query",
            "required": false,
            "description": "The action of the tasks to retrieve.",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "description": "An array of actions to perform on the Algolia index.",
              "items": {
                "type": "string",
                "description": "The action to perform on the Algolia index.",
                "enum": [
                  "replace",
                  "save",
                  "partial"
                ]
              },
              "example": "save,replace"
            }
          },
          {
            "name": "enabled",
            "in": "query",
            "description": "Whether the task is enabled or not.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "sourceID",
            "in": "query",
            "description": "The sourceIDs of the tasks to retrive.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The source UUID.",
                "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              }
            }
          },
          {
            "name": "destinationID",
            "in": "query",
            "description": "The destinationIDs of the tasks to retrive.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The destination UUID.",
                "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
              }
            }
          },
          {
            "name": "triggerType",
            "in": "query",
            "description": "The trigger type of the task.",
            "required": false,
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "description": "The type of the task reflect how it can be used:\n  - onDemand: a task that runs manually\n  - schedule: a task that runs regularly, following a given cron expression\n  - subscription: a task that runs after a subscription event is received from an integration (e.g. Webhook).\n",
                "enum": [
                  "onDemand",
                  "schedule",
                  "subscription"
                ]
              },
              "example": "onDemand,schedule"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key by which the list should be sorted.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to sort the Task list endpoint.",
              "enum": [
                "enabled",
                "triggerType",
                "action",
                "updatedAt",
                "createdAt"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned list.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to order a sorted request.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "listTasksResponse",
                  "type": "object",
                  "description": "A list of tasks with pagination details.",
                  "additionalProperties": false,
                  "properties": {
                    "tasks": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "taskID": {
                            "type": "string",
                            "description": "The task UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "sourceID": {
                            "type": "string",
                            "description": "The source UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "destinationID": {
                            "type": "string",
                            "description": "The destination UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "trigger": {
                            "oneOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "description": "The trigger information of a task of type `onDemand`.",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "A task which is manually executed via the run task endpoint.",
                                    "enum": [
                                      "onDemand"
                                    ]
                                  },
                                  "lastRun": {
                                    "description": "The last time the scheduled task ran (RFC3339 format).",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "description": "The trigger information for a task of type 'schedule'.",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "A task which is triggered by a schedule (cron expression).",
                                    "enum": [
                                      "schedule"
                                    ]
                                  },
                                  "cron": {
                                    "type": "string",
                                    "description": "A cron expression that represent at which regularity the task should run.",
                                    "example": "* * 1 * *"
                                  },
                                  "lastRun": {
                                    "description": "The last time the scheduled task ran (RFC3339 format).",
                                    "type": "string"
                                  },
                                  "nextRun": {
                                    "description": "The next scheduled run of the task (RFC3339 format).",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "type",
                                  "cron",
                                  "nextRun"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "description": "The trigger input for a task of type 'subscription'.",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "A task which is triggered by an external subscription (e.g. Webhook).",
                                    "enum": [
                                      "subscription"
                                    ]
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              }
                            ]
                          },
                          "input": {
                            "oneOf": [
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
                                "properties": {
                                  "startDate": {
                                    "description": "The start date of the extraction (RFC3339 format).",
                                    "type": "string"
                                  },
                                  "endDate": {
                                    "description": "The end date of the extraction (RFC3339 format).",
                                    "type": "string"
                                  }
                                },
                                "required": [
                                  "startDate",
                                  "endDate"
                                ]
                              },
                              {
                                "type": "object",
                                "additionalProperties": false,
                                "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
                                "properties": {
                                  "timeframe": {
                                    "description": "The timeframe of the extraction, in number of days from today.",
                                    "type": "integer",
                                    "minimum": 1,
                                    "maximum": 30
                                  }
                                },
                                "required": [
                                  "timeframe"
                                ]
                              }
                            ]
                          },
                          "enabled": {
                            "type": "boolean",
                            "default": true,
                            "description": "Whether the task is enabled or not."
                          },
                          "failureThreshold": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
                          },
                          "action": {
                            "type": "string",
                            "description": "The action to perform on the Algolia index.",
                            "enum": [
                              "replace",
                              "save",
                              "partial"
                            ]
                          },
                          "createdAt": {
                            "type": "string",
                            "description": "Date of creation (RFC3339 format)."
                          },
                          "updatedAt": {
                            "type": "string",
                            "description": "Date of last update (RFC3339 format)."
                          }
                        },
                        "required": [
                          "taskID",
                          "sourceID",
                          "destinationID",
                          "trigger",
                          "enabled",
                          "action",
                          "createdAt"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "nbPages": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "nbItems": {
                          "type": "integer"
                        },
                        "itemsPerPage": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "nbPages",
                        "page",
                        "nbItems",
                        "itemsPerPage"
                      ]
                    }
                  },
                  "required": [
                    "tasks",
                    "pagination"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Create a task.",
        "description": "Create a task.",
        "operationId": "createTask",
        "requestBody": {
          "description": "",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The payload for a task creation.",
                "properties": {
                  "sourceID": {
                    "type": "string",
                    "description": "The source UUID.",
                    "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                  },
                  "destinationID": {
                    "type": "string",
                    "description": "The destination UUID.",
                    "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                  },
                  "trigger": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "The trigger information of a task of type `onDemand`.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "A task which is manually executed via the run task endpoint.",
                            "enum": [
                              "onDemand"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "The trigger input for a task of type 'schedule'.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "A task which is triggered by a schedule (cron expression).",
                            "enum": [
                              "schedule"
                            ]
                          },
                          "cron": {
                            "type": "string",
                            "description": "A cron expression that represent at which regularity the task should run.",
                            "example": "* * 1 * *"
                          }
                        },
                        "required": [
                          "type",
                          "cron"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "The trigger input for a task of type 'subscription'.",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "A task which is triggered by an external subscription (e.g. Webhook).",
                            "enum": [
                              "subscription"
                            ]
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    ]
                  },
                  "action": {
                    "type": "string",
                    "description": "The action to perform on the Algolia index.",
                    "enum": [
                      "replace",
                      "save",
                      "partial"
                    ]
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether the task is enabled or not."
                  },
                  "failureThreshold": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
                  },
                  "input": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
                        "properties": {
                          "startDate": {
                            "description": "The start date of the extraction (RFC3339 format).",
                            "type": "string"
                          },
                          "endDate": {
                            "description": "The end date of the extraction (RFC3339 format).",
                            "type": "string"
                          }
                        },
                        "required": [
                          "startDate",
                          "endDate"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
                        "properties": {
                          "timeframe": {
                            "description": "The timeframe of the extraction, in number of days from today.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 30
                          }
                        },
                        "required": [
                          "timeframe"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "sourceID",
                  "destinationID",
                  "trigger",
                  "action"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "The response from the API after a task creation.",
                  "properties": {
                    "taskID": {
                      "type": "string",
                      "description": "The task UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    }
                  },
                  "required": [
                    "taskID",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/tasks/search": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Search among tasks.",
        "description": "Search among tasks with a defined set of parameters.",
        "operationId": "searchTasks",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "properties": {
                  "taskIDs": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "taskIDs"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "searchTasksResponse",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "additionalProperties": false,
                    "properties": {
                      "taskID": {
                        "type": "string",
                        "description": "The task UUID.",
                        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                      },
                      "sourceID": {
                        "type": "string",
                        "description": "The source UUID.",
                        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                      },
                      "destinationID": {
                        "type": "string",
                        "description": "The destination UUID.",
                        "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                      },
                      "trigger": {
                        "oneOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "The trigger information of a task of type `onDemand`.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "A task which is manually executed via the run task endpoint.",
                                "enum": [
                                  "onDemand"
                                ]
                              },
                              "lastRun": {
                                "description": "The last time the scheduled task ran (RFC3339 format).",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "The trigger information for a task of type 'schedule'.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "A task which is triggered by a schedule (cron expression).",
                                "enum": [
                                  "schedule"
                                ]
                              },
                              "cron": {
                                "type": "string",
                                "description": "A cron expression that represent at which regularity the task should run.",
                                "example": "* * 1 * *"
                              },
                              "lastRun": {
                                "description": "The last time the scheduled task ran (RFC3339 format).",
                                "type": "string"
                              },
                              "nextRun": {
                                "description": "The next scheduled run of the task (RFC3339 format).",
                                "type": "string"
                              }
                            },
                            "required": [
                              "type",
                              "cron",
                              "nextRun"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "The trigger input for a task of type 'subscription'.",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "A task which is triggered by an external subscription (e.g. Webhook).",
                                "enum": [
                                  "subscription"
                                ]
                              }
                            },
                            "required": [
                              "type"
                            ]
                          }
                        ]
                      },
                      "input": {
                        "oneOf": [
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
                            "properties": {
                              "startDate": {
                                "description": "The start date of the extraction (RFC3339 format).",
                                "type": "string"
                              },
                              "endDate": {
                                "description": "The end date of the extraction (RFC3339 format).",
                                "type": "string"
                              }
                            },
                            "required": [
                              "startDate",
                              "endDate"
                            ]
                          },
                          {
                            "type": "object",
                            "additionalProperties": false,
                            "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
                            "properties": {
                              "timeframe": {
                                "description": "The timeframe of the extraction, in number of days from today.",
                                "type": "integer",
                                "minimum": 1,
                                "maximum": 30
                              }
                            },
                            "required": [
                              "timeframe"
                            ]
                          }
                        ]
                      },
                      "enabled": {
                        "type": "boolean",
                        "default": true,
                        "description": "Whether the task is enabled or not."
                      },
                      "failureThreshold": {
                        "type": "integer",
                        "minimum": 0,
                        "maximum": 100,
                        "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
                      },
                      "action": {
                        "type": "string",
                        "description": "The action to perform on the Algolia index.",
                        "enum": [
                          "replace",
                          "save",
                          "partial"
                        ]
                      },
                      "createdAt": {
                        "type": "string",
                        "description": "Date of creation (RFC3339 format)."
                      },
                      "updatedAt": {
                        "type": "string",
                        "description": "Date of last update (RFC3339 format)."
                      }
                    },
                    "required": [
                      "taskID",
                      "sourceID",
                      "destinationID",
                      "trigger",
                      "enabled",
                      "action",
                      "createdAt"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/tasks/{taskID}": {
      "get": {
        "tags": [
          "tasks"
        ],
        "summary": "Get a task.",
        "description": "Get the task of the given taskID.",
        "operationId": "getTask",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "description": "The task UUID.",
            "schema": {
              "type": "string",
              "description": "The task UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "taskID": {
                      "type": "string",
                      "description": "The task UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "sourceID": {
                      "type": "string",
                      "description": "The source UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "destinationID": {
                      "type": "string",
                      "description": "The destination UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "trigger": {
                      "oneOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "description": "The trigger information of a task of type `onDemand`.",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A task which is manually executed via the run task endpoint.",
                              "enum": [
                                "onDemand"
                              ]
                            },
                            "lastRun": {
                              "description": "The last time the scheduled task ran (RFC3339 format).",
                              "type": "string"
                            }
                          },
                          "required": [
                            "type"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "description": "The trigger information for a task of type 'schedule'.",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A task which is triggered by a schedule (cron expression).",
                              "enum": [
                                "schedule"
                              ]
                            },
                            "cron": {
                              "type": "string",
                              "description": "A cron expression that represent at which regularity the task should run.",
                              "example": "* * 1 * *"
                            },
                            "lastRun": {
                              "description": "The last time the scheduled task ran (RFC3339 format).",
                              "type": "string"
                            },
                            "nextRun": {
                              "description": "The next scheduled run of the task (RFC3339 format).",
                              "type": "string"
                            }
                          },
                          "required": [
                            "type",
                            "cron",
                            "nextRun"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "description": "The trigger input for a task of type 'subscription'.",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "A task which is triggered by an external subscription (e.g. Webhook).",
                              "enum": [
                                "subscription"
                              ]
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      ]
                    },
                    "input": {
                      "oneOf": [
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
                          "properties": {
                            "startDate": {
                              "description": "The start date of the extraction (RFC3339 format).",
                              "type": "string"
                            },
                            "endDate": {
                              "description": "The end date of the extraction (RFC3339 format).",
                              "type": "string"
                            }
                          },
                          "required": [
                            "startDate",
                            "endDate"
                          ]
                        },
                        {
                          "type": "object",
                          "additionalProperties": false,
                          "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
                          "properties": {
                            "timeframe": {
                              "description": "The timeframe of the extraction, in number of days from today.",
                              "type": "integer",
                              "minimum": 1,
                              "maximum": 30
                            }
                          },
                          "required": [
                            "timeframe"
                          ]
                        }
                      ]
                    },
                    "enabled": {
                      "type": "boolean",
                      "default": true,
                      "description": "Whether the task is enabled or not."
                    },
                    "failureThreshold": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100,
                      "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
                    },
                    "action": {
                      "type": "string",
                      "description": "The action to perform on the Algolia index.",
                      "enum": [
                        "replace",
                        "save",
                        "partial"
                      ]
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "taskID",
                    "sourceID",
                    "destinationID",
                    "trigger",
                    "enabled",
                    "action",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "tasks"
        ],
        "summary": "Update a task.",
        "description": "Update the task of the given taskID.",
        "operationId": "updateTask",
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "description": "The task UUID.",
            "schema": {
              "type": "string",
              "description": "The task UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "additionalProperties": false,
                "description": "The payload for a task update.",
                "properties": {
                  "destinationID": {
                    "type": "string",
                    "description": "The destination UUID.",
                    "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                  },
                  "trigger": {
                    "type": "object",
                    "additionalProperties": false,
                    "description": "The trigger input for a task update.",
                    "properties": {
                      "cron": {
                        "type": "string",
                        "description": "A cron expression that represent at which regularity the task should run.",
                        "example": "* * 1 * *"
                      }
                    },
                    "required": [
                      "cron"
                    ]
                  },
                  "input": {
                    "oneOf": [
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "The input for an `onDemand` task whose source is of type `bigquery` and for which extracted data spans a given time range.",
                        "properties": {
                          "startDate": {
                            "description": "The start date of the extraction (RFC3339 format).",
                            "type": "string"
                          },
                          "endDate": {
                            "description": "The end date of the extraction (RFC3339 format).",
                            "type": "string"
                          }
                        },
                        "required": [
                          "startDate",
                          "endDate"
                        ]
                      },
                      {
                        "type": "object",
                        "additionalProperties": false,
                        "description": "The input for a `schedule` task whose source is of type `bigquery` and for which extracted data spans a fixed number of days.",
                        "properties": {
                          "timeframe": {
                            "description": "The timeframe of the extraction, in number of days from today.",
                            "type": "integer",
                            "minimum": 1,
                            "maximum": 30
                          }
                        },
                        "required": [
                          "timeframe"
                        ]
                      }
                    ]
                  },
                  "enabled": {
                    "type": "boolean",
                    "description": "Whether the task is enabled or not."
                  },
                  "failureThreshold": {
                    "type": "integer",
                    "minimum": 0,
                    "maximum": 100,
                    "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The response from the API after a task update.",
                  "additionalProperties": false,
                  "properties": {
                    "taskID": {
                      "type": "string",
                      "description": "The task UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "taskID",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "tasks"
        ],
        "summary": "Delete a task.",
        "description": "Soft delete the task of the given taskID.",
        "operationId": "deleteTask",
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "description": "The task UUID.",
            "schema": {
              "type": "string",
              "description": "The task UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "deletedAt": {
                      "type": "string",
                      "description": "Date of deletion (RFC3339 format)."
                    }
                  },
                  "required": [
                    "deletedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/tasks/{taskID}/run": {
      "post": {
        "tags": [
          "tasks"
        ],
        "summary": "Run a task.",
        "description": "Run the task of the given taskID.",
        "operationId": "runTask",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "description": "The task UUID.",
            "schema": {
              "type": "string",
              "description": "The task UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "description": "The response from the run task API, containing an Observability Run ID and the time it was created at.",
                  "properties": {
                    "runID": {
                      "type": "string",
                      "description": "The run UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    }
                  },
                  "required": [
                    "runID",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/tasks/{taskID}/enable": {
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Enable a task.",
        "description": "Enable the task of the given taskID.",
        "operationId": "enableTask",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "description": "The task UUID.",
            "schema": {
              "type": "string",
              "description": "The task UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The response from the API after a task update.",
                  "additionalProperties": false,
                  "properties": {
                    "taskID": {
                      "type": "string",
                      "description": "The task UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "taskID",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/tasks/{taskID}/disable": {
      "put": {
        "tags": [
          "tasks"
        ],
        "summary": "Disable a task.",
        "description": "Disable the task of the given taskID.",
        "operationId": "disableTask",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "taskID",
            "in": "path",
            "required": true,
            "description": "The task UUID.",
            "schema": {
              "type": "string",
              "description": "The task UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "The response from the API after a task update.",
                  "additionalProperties": false,
                  "properties": {
                    "taskID": {
                      "type": "string",
                      "description": "The task UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "updatedAt": {
                      "type": "string",
                      "description": "Date of last update (RFC3339 format)."
                    }
                  },
                  "required": [
                    "taskID",
                    "updatedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/runs": {
      "get": {
        "tags": [
          "observability"
        ],
        "summary": "Get a list of runs.",
        "description": "Get a list of runs for the given query parameters, with pagination details.",
        "operationId": "getRuns",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to fetch, starting at 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter the status of the runs.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "created",
                  "started",
                  "idled",
                  "finished",
                  "skipped"
                ]
              }
            }
          },
          {
            "name": "taskID",
            "in": "query",
            "description": "Filter by taskID.",
            "schema": {
              "type": "string",
              "description": "The task UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key by which the list should be sorted.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to sort the Run list endpoint.",
              "enum": [
                "status",
                "updatedAt",
                "createdAt"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned list.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to order a sorted request.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date (in RFC3339 format) of the runs fetching window. Defaults to 'now'-7 days if omitted.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date (in RFC3339 format) of the runs fetching window. Defaults to 'now' days if omitted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "runs": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "properties": {
                          "runID": {
                            "type": "string",
                            "description": "The run UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "appID": {
                            "type": "string"
                          },
                          "taskID": {
                            "type": "string",
                            "description": "The task UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "created",
                              "started",
                              "idled",
                              "finished",
                              "skipped"
                            ]
                          },
                          "progress": {
                            "type": "object",
                            "additionalProperties": false,
                            "properties": {
                              "expectedNbOfEvents": {
                                "type": "integer"
                              },
                              "receivedNbOfEvents": {
                                "type": "integer"
                              }
                            }
                          },
                          "outcome": {
                            "type": "string",
                            "enum": [
                              "success",
                              "failure",
                              "processing"
                            ]
                          },
                          "failureThreshold": {
                            "type": "integer",
                            "minimum": 0,
                            "maximum": 100,
                            "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
                          },
                          "reason": {
                            "type": "string",
                            "description": "Explains the result of outcome."
                          },
                          "reasonCode": {
                            "type": "string",
                            "description": "An identifier that pairs with the outcome reason.",
                            "enum": [
                              "internal",
                              "critical",
                              "no_events",
                              "too_many_errors",
                              "ok",
                              "discarded",
                              "blocking"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "reindex",
                              "update",
                              "discover"
                            ]
                          },
                          "createdAt": {
                            "type": "string",
                            "description": "Date of creation (RFC3339 format)."
                          },
                          "startedAt": {
                            "type": "string",
                            "description": "Date of start (RFC3339 format)."
                          },
                          "finishedAt": {
                            "type": "string",
                            "description": "Date of finish (RFC3339 format)."
                          }
                        },
                        "required": [
                          "runID",
                          "appID",
                          "taskID",
                          "status",
                          "type",
                          "createdAt"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "nbPages": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "nbItems": {
                          "type": "integer"
                        },
                        "itemsPerPage": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "nbPages",
                        "page",
                        "nbItems",
                        "itemsPerPage"
                      ]
                    },
                    "window": {
                      "type": "object",
                      "additionalProperties": false,
                      "description": "The window parameter represents the holds the dates used to query the Observability data from the database in a given window.",
                      "properties": {
                        "startDate": {
                          "type": "string",
                          "description": "A date in format RFC3339 representing the oldest possible data in query window."
                        },
                        "endDate": {
                          "type": "string",
                          "description": "A date in format RFC3339 representing the newest possible data in query window."
                        }
                      },
                      "required": [
                        "startDate",
                        "endDate"
                      ]
                    }
                  },
                  "required": [
                    "runs",
                    "pagination",
                    "window"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/runs/{runID}": {
      "get": {
        "tags": [
          "observability"
        ],
        "summary": "Get a run.",
        "description": "Get a single run for the given ID.",
        "operationId": "getRun",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "runID",
            "in": "path",
            "required": true,
            "description": "The run UUID.",
            "schema": {
              "type": "string",
              "description": "The run UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "runID": {
                      "type": "string",
                      "description": "The run UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "appID": {
                      "type": "string"
                    },
                    "taskID": {
                      "type": "string",
                      "description": "The task UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "created",
                        "started",
                        "idled",
                        "finished",
                        "skipped"
                      ]
                    },
                    "progress": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "expectedNbOfEvents": {
                          "type": "integer"
                        },
                        "receivedNbOfEvents": {
                          "type": "integer"
                        }
                      }
                    },
                    "outcome": {
                      "type": "string",
                      "enum": [
                        "success",
                        "failure",
                        "processing"
                      ]
                    },
                    "failureThreshold": {
                      "type": "integer",
                      "minimum": 0,
                      "maximum": 100,
                      "description": "A percentage representing the accepted failure threshold to determine if a `run` succeeded or not."
                    },
                    "reason": {
                      "type": "string",
                      "description": "Explains the result of outcome."
                    },
                    "reasonCode": {
                      "type": "string",
                      "description": "An identifier that pairs with the outcome reason.",
                      "enum": [
                        "internal",
                        "critical",
                        "no_events",
                        "too_many_errors",
                        "ok",
                        "discarded",
                        "blocking"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "reindex",
                        "update",
                        "discover"
                      ]
                    },
                    "createdAt": {
                      "type": "string",
                      "description": "Date of creation (RFC3339 format)."
                    },
                    "startedAt": {
                      "type": "string",
                      "description": "Date of start (RFC3339 format)."
                    },
                    "finishedAt": {
                      "type": "string",
                      "description": "Date of finish (RFC3339 format)."
                    }
                  },
                  "required": [
                    "runID",
                    "appID",
                    "taskID",
                    "status",
                    "type",
                    "createdAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/runs/{runID}/events": {
      "get": {
        "tags": [
          "observability"
        ],
        "summary": "Get a list of events.",
        "description": "Get a list of events associated to the given runID, for the given query parameters.",
        "operationId": "getEvents",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "runID",
            "in": "path",
            "required": true,
            "description": "The run UUID.",
            "schema": {
              "type": "string",
              "description": "The run UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "The number of items per page to return.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to fetch, starting at 1.",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter the status of the events.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "created",
                  "started",
                  "retried",
                  "failed",
                  "succeeded",
                  "critical"
                ]
              }
            }
          },
          {
            "name": "type",
            "in": "query",
            "description": "Filter the type of the events.",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "fetch",
                  "record",
                  "log",
                  "transform"
                ]
              }
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "The key by which the list should be sorted.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to sort the Event list endpoint.",
              "enum": [
                "status",
                "type",
                "publishedAt"
              ]
            }
          },
          {
            "name": "order",
            "in": "query",
            "description": "The order of the returned list.",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Used to order a sorted request.",
              "enum": [
                "asc",
                "desc"
              ]
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "The start date (in RFC3339 format) of the events fetching window. Defaults to 'now'-3 hours if omitted.",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "The end date (in RFC3339 format) of the events fetching window. Defaults to 'now' days if omitted.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "title": "listEventsResponse",
                  "type": "object",
                  "additionalProperties": false,
                  "properties": {
                    "events": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "description": "An event describe a step of the task execution flow..",
                        "additionalProperties": false,
                        "properties": {
                          "eventID": {
                            "type": "string",
                            "description": "The event UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "runID": {
                            "type": "string",
                            "description": "The run UUID.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "parentID": {
                            "type": "string",
                            "description": "The parent event, the cause of this event.",
                            "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                          },
                          "status": {
                            "type": "string",
                            "enum": [
                              "created",
                              "started",
                              "retried",
                              "failed",
                              "succeeded",
                              "critical"
                            ]
                          },
                          "type": {
                            "type": "string",
                            "enum": [
                              "fetch",
                              "record",
                              "log",
                              "transform"
                            ]
                          },
                          "batchSize": {
                            "type": "integer",
                            "description": "The extracted record batch size.",
                            "example": 10,
                            "minimum": 0,
                            "multipleOf": 1
                          },
                          "data": {
                            "type": "object",
                            "additionalProperties": true
                          },
                          "publishedAt": {
                            "type": "string",
                            "description": "Date of publish (RFC3339 format)."
                          }
                        },
                        "required": [
                          "eventID",
                          "runID",
                          "status",
                          "type",
                          "batchSize",
                          "publishedAt"
                        ]
                      }
                    },
                    "pagination": {
                      "type": "object",
                      "additionalProperties": false,
                      "properties": {
                        "nbPages": {
                          "type": "integer"
                        },
                        "page": {
                          "type": "integer"
                        },
                        "nbItems": {
                          "type": "integer"
                        },
                        "itemsPerPage": {
                          "type": "integer"
                        }
                      },
                      "required": [
                        "nbPages",
                        "page",
                        "nbItems",
                        "itemsPerPage"
                      ]
                    },
                    "window": {
                      "type": "object",
                      "additionalProperties": false,
                      "description": "The window parameter represents the holds the dates used to query the Observability data from the database in a given window.",
                      "properties": {
                        "startDate": {
                          "type": "string",
                          "description": "A date in format RFC3339 representing the oldest possible data in query window."
                        },
                        "endDate": {
                          "type": "string",
                          "description": "A date in format RFC3339 representing the newest possible data in query window."
                        }
                      },
                      "required": [
                        "startDate",
                        "endDate"
                      ]
                    }
                  },
                  "required": [
                    "events",
                    "pagination",
                    "window"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/1/runs/{runID}/events/{eventID}": {
      "get": {
        "tags": [
          "observability"
        ],
        "summary": "Get an event.",
        "description": "Get a single event for a specific runID.",
        "operationId": "getEvent",
        "x-acl": [
          "addObject",
          "deleteIndex",
          "editSettings"
        ],
        "parameters": [
          {
            "name": "runID",
            "in": "path",
            "required": true,
            "description": "The run UUID.",
            "schema": {
              "type": "string",
              "description": "The run UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          },
          {
            "name": "eventID",
            "in": "path",
            "required": true,
            "description": "The event UUID.",
            "schema": {
              "type": "string",
              "description": "The event UUID.",
              "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "description": "An event describe a step of the task execution flow..",
                  "additionalProperties": false,
                  "properties": {
                    "eventID": {
                      "type": "string",
                      "description": "The event UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "runID": {
                      "type": "string",
                      "description": "The run UUID.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "parentID": {
                      "type": "string",
                      "description": "The parent event, the cause of this event.",
                      "example": "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
                    },
                    "status": {
                      "type": "string",
                      "enum": [
                        "created",
                        "started",
                        "retried",
                        "failed",
                        "succeeded",
                        "critical"
                      ]
                    },
                    "type": {
                      "type": "string",
                      "enum": [
                        "fetch",
                        "record",
                        "log",
                        "transform"
                      ]
                    },
                    "batchSize": {
                      "type": "integer",
                      "description": "The extracted record batch size.",
                      "example": 10,
                      "minimum": 0,
                      "multipleOf": 1
                    },
                    "data": {
                      "type": "object",
                      "additionalProperties": true
                    },
                    "publishedAt": {
                      "type": "string",
                      "description": "Date of publish (RFC3339 format)."
                    }
                  },
                  "required": [
                    "eventID",
                    "runID",
                    "status",
                    "type",
                    "batchSize",
                    "publishedAt"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request or request arguments.",
            "content": {
              "application/json": {
                "schema": {
                  "description": "Error.",
                  "type": "object",
                  "additionalProperties": true,
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid Application-Id or API-Key"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}