openapi: 3.0.2
info:
  title: Algolia Monitoring API
  description: >
    The Monitoring API lets you check the status of your Algolia infrastructure.


    ## Base URLs


    The base URL for requests to the Monitoring API is:


    - `https://status.algolia.com`


    **All requests must use HTTPS.**


    ## Availability and authentication


    Access to the [Infrastructure](#tag/infrastructure) endpoints

    is available as part of the [Premium or Elevate
    plans](https://www.algolia.com/pricing).


    To authenticate requests to the Infrastructure endpoints, add these headers:


    - `x-algolia-application-id`. Your Algolia application ID.

    - `x-algolia-api-key`. Your Monitoring API key.


    You can find your application ID and API key in the [Algolia
    dashboard](https://dashboard.algolia.com/account).


    Other endpoints don't require authentication.


    ## Response status and errors


    The Monitoring API returns JSON responses.

    Since JSON doesn't guarantee any specific ordering, don't rely on the order
    of attributes in the API response.


    Successful responses return a `2xx` status. Client errors return a `4xx`
    status. Server errors are indicated by a `5xx` status.

    Error responses have a `message` property with more information.


    ## Version


    The current version of the Monitoring API is version 1, as indicated by the
    `/1/` in each endpoint's URL.
  version: 1.0.0
servers:
  - url: https://status.algolia.com
tags:
  - name: incidents
    description: List the known incidents.
    x-displayName: Incidents
  - name: infrastructure
    description: >-
      Return information about the Algolia infrastructure used by your
      application.
    x-displayName: Infrastructure
  - name: monitoring-tag
    description: >-
      Report search and indexing times for your clusters, and get a list of
      servers.
    x-displayName: Monitoring
  - name: status
    description: Report the status of Algolia clusters.
    x-displayName: Status
paths:
  /{path}:
    get:
      operationId: customGet
      summary: Send requests to the Algolia REST API
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.CustomGetAsync("test/minimal");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomGet(client.NewApiCustomGetRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.customGet("test/minimal");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.customGet({ path: 'test/minimal' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.customGet(
              path = "test/minimal",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->customGet(
                'test/minimal',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.custom_get(
                path="test/minimal",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.custom_get("test/minimal")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.customGet[JObject](
              path = "test/minimal"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.customGet(path: "test/minimal")

            // >LOG
    post:
      operationId: customPost
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.CustomPostAsync("test/minimal");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomPost(client.NewApiCustomPostRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.customPost("test/minimal");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.customPost({ path: 'test/minimal' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.customPost(
              path = "test/minimal",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->customPost(
                'test/minimal',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.custom_post(
                path="test/minimal",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.custom_post("test/minimal")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.customPost[JObject](
              path = "test/minimal"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.customPost(path: "test/minimal")

            // >LOG
    put:
      operationId: customPut
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.CustomPutAsync("test/minimal");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.CustomPut(client.NewApiCustomPutRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.customPut("test/minimal");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.customPut({ path: 'test/minimal' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.customPut(
              path = "test/minimal",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->customPut(
                'test/minimal',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.custom_put(
                path="test/minimal",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.custom_put("test/minimal")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.customPut[JObject](
              path = "test/minimal"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.customPut(path: "test/minimal")

            // >LOG
    delete:
      operationId: customDelete
      summary: Send requests to the Algolia REST API
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.CustomDeleteAsync("test/minimal");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.CustomDelete(client.NewApiCustomDeleteRequest(
              "test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.customDelete("test/minimal");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.customDelete({ path: 'test/minimal'
            });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.customDelete(
              path = "test/minimal",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->customDelete(
                'test/minimal',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.custom_delete(
                path="test/minimal",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.custom_delete("test/minimal")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.customDelete[JObject](
              path = "test/minimal"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.customDelete(path: "test/minimal")

            // >LOG
  /1/status:
    get:
      operationId: getStatus
      summary: Retrieve status of all clusters
      security: []
      tags:
        - status
      description: Retrieves the status of all Algolia clusters and instances.
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetStatusAsync();
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetStatus()

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getStatus();

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getStatus();


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getStatus()


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getStatus();


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_status()


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_status


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getStatus(

            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getStatus()

            // >LOG
  /1/status/{clusters}:
    get:
      summary: Retrieve cluster status
      description: Retrieves the status of selected clusters.
      operationId: getClusterStatus
      tags:
        - status
      security: []
      parameters:
        - $ref: '#/components/parameters/Clusters'
      responses:
        '200':
          $ref: '#/components/responses/StatusResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetClusterStatusAsync("c1-de");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetClusterStatus(client.NewApiGetClusterStatusRequest(
              "c1-de",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getClusterStatus("c1-de");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getClusterStatus({ clusters: 'c1-de'
            });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getClusterStatus(
              clusters = "c1-de",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getClusterStatus(
                'c1-de',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_cluster_status(
                clusters="c1-de",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_cluster_status("c1-de")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getClusterStatus(
              clusters = "c1-de"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getClusterStatus(clusters: "c1-de")

            // >LOG
  /1/incidents:
    get:
      summary: Retrieve all incidents
      description: Retrieves known incidents for all clusters.
      operationId: getIncidents
      security: []
      tags:
        - incidents
      responses:
        '200':
          $ref: '#/components/responses/IncidentsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetIncidentsAsync();
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetIncidents()

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getIncidents();

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getIncidents();


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getIncidents()


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getIncidents();


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_incidents()


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_incidents


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getIncidents(

            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getIncidents()

            // >LOG
  /1/incidents/{clusters}:
    get:
      summary: Retrieve cluster incidents
      description: Retrieves known incidents for the selected clusters.
      operationId: getClusterIncidents
      tags:
        - incidents
      security: []
      parameters:
        - $ref: '#/components/parameters/Clusters'
      responses:
        '200':
          $ref: '#/components/responses/IncidentsResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '404':
          $ref: '#/components/responses/NotFoundResponse'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetClusterIncidentsAsync("c1-de");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetClusterIncidents(client.NewApiGetClusterIncidentsRequest(
              "c1-de",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getClusterIncidents("c1-de");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getClusterIncidents({ clusters:
            'c1-de' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getClusterIncidents(
              clusters = "c1-de",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getClusterIncidents(
                'c1-de',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_cluster_incidents(
                clusters="c1-de",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_cluster_incidents("c1-de")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getClusterIncidents(
              clusters = "c1-de"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getClusterIncidents(clusters:
            "c1-de")

            // >LOG
  /1/inventory/servers:
    get:
      summary: Retrieve servers
      operationId: getServers
      security:
        - appId: []
        - apiKey: []
      description: |
        Retrieves the servers that belong to clusters.

        The response depends on whether you authenticate your API request:

        - With authentication, the response lists the servers assigned to your
        Algolia application's cluster.

        - Without authentication, the response lists the servers for all Algolia
        clusters.
      tags:
        - monitoring-tag
      responses:
        '200':
          $ref: '#/components/responses/InventoryResponse'
        '403':
          $ref: '#/components/responses/ForbiddenResponse'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetServersAsync();
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetServers()

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getServers();

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getServers();


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getServers()


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getServers();


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_servers()


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_servers


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getServers(

            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getServers()

            // >LOG
  /1/latency/{clusters}:
    get:
      summary: Retrieve search latency times
      description: Retrieves the average latency for search requests for selected clusters.
      operationId: getLatency
      security: []
      tags:
        - monitoring-tag
      parameters:
        - $ref: '#/components/parameters/Clusters'
      responses:
        '200':
          $ref: '#/components/responses/LatencyResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetLatencyAsync("c1-de");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetLatency(client.NewApiGetLatencyRequest(
              "c1-de",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getLatency("c1-de");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getLatency({ clusters: 'c1-de' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getLatency(
              clusters = "c1-de",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getLatency(
                'c1-de',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_latency(
                clusters="c1-de",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_latency("c1-de")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getLatency(
              clusters = "c1-de"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getLatency(clusters: "c1-de")

            // >LOG
  /1/indexing/{clusters}:
    get:
      summary: Retrieve indexing times
      description: Retrieves average times for indexing operations for selected clusters.
      operationId: getIndexingTime
      security: []
      tags:
        - monitoring-tag
      parameters:
        - $ref: '#/components/parameters/Clusters'
      responses:
        '200':
          $ref: '#/components/responses/IndexingResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetIndexingTimeAsync("c1-de");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetIndexingTime(client.NewApiGetIndexingTimeRequest(
              "c1-de",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getIndexingTime("c1-de");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getIndexingTime({ clusters: 'c1-de'
            });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getIndexingTime(
              clusters = "c1-de",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getIndexingTime(
                'c1-de',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_indexing_time(
                clusters="c1-de",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_indexing_time("c1-de")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getIndexingTime(
              clusters = "c1-de"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getIndexingTime(clusters: "c1-de")

            // >LOG
  /1/reachability/{clusters}/probes:
    get:
      summary: Test the reachability of clusters
      description: Test whether clusters are reachable or not.
      operationId: getReachability
      security: []
      tags:
        - monitoring-tag
      parameters:
        - $ref: '#/components/parameters/Clusters'
      responses:
        '200':
          $ref: '#/components/responses/ReachabilityResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetReachabilityAsync("c1-de");
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err :=
            client.GetReachability(client.NewApiGetReachabilityRequest(
              "c1-de",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getReachability("c1-de");

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getReachability({ clusters: 'c1-de'
            });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getReachability(
              clusters = "c1-de",
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getReachability(
                'c1-de',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_reachability(
                clusters="c1-de",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_reachability("c1-de")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getReachability(
              clusters = "c1-de"
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getReachability(clusters: "c1-de")

            // >LOG
  /1/infrastructure/{metric}/period/{period}:
    get:
      summary: Retrieve metrics
      description: >
        Retrieves metrics related to your Algolia infrastructure, aggregated
        over a selected time window.


        Access to this API is available as part of the [Premium or Elevate
        plans](https://www.algolia.com/pricing).

        You must authenticate requests with the `x-algolia-application-id` and
        `x-algolia-api-key` headers (using the Monitoring API key).
      operationId: getMetrics
      tags:
        - infrastructure
      parameters:
        - $ref: '#/components/parameters/MetricInPath'
        - $ref: '#/components/parameters/PeriodInPath'
      responses:
        '200':
          $ref: '#/components/responses/InfrastructureResponse'
        '401':
          $ref: '#/components/responses/InfrastructureAPIUnauthorized'
      x-codeSamples:
        - lang: csharp
          label: C#
          source: |
            // Initialize the client
            var client = new MonitoringClient(
              new MonitoringConfig("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY")
            );

            // Call the API
            var response = await client.GetMetricsAsync(
              Enum.Parse<Metric>("AvgBuildTime"),
              Enum.Parse<Period>("Minute")
            );
            // >LOG
        - lang: go
          label: Go
          source: >
            // Initialize the client

            client, err := monitoring.NewClient("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            response, err := client.GetMetrics(client.NewApiGetMetricsRequest(
              monitoring.Metric("avg_build_time"), monitoring.Period("minute"),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // >LOG

            // use the model directly

            print(response)
        - lang: java
          label: Java
          source: >
            // Initialize the client

            MonitoringClient client = new
            MonitoringClient("ALGOLIA_APPLICATION_ID", "ALGOLIA_API_KEY");


            // Call the API

            client.getMetrics(Metric.AVG_BUILD_TIME, Period.MINUTE);

            // >LOG
        - lang: javascript
          label: JavaScript
          source: >
            // Initialize the client

            //

            const client = monitoringClient('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            const response = await client.getMetrics({ metric: 'avg_build_time',
            period: 'minute' });


            // >LOG

            // use typed response

            console.log(response);
        - lang: kotlin
          label: Kotlin
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            var response = client.getMetrics(
              metric = Metric.entries.first { it.value == "avg_build_time" },
              period = Period.entries.first { it.value == "minute" },
            )


            // >LOG

            // Use the response

            println(response)
        - lang: php
          label: PHP
          source: >
            // Initialize the client

            $client = MonitoringClient::create('ALGOLIA_APPLICATION_ID',
            'ALGOLIA_API_KEY');


            // Call the API

            $response = $client->getMetrics(
                'avg_build_time',
                'minute',
            );


            // >LOG

            // play with the response

            var_dump($response);
        - lang: python
          label: Python
          source: >
            # Initialize the client

            # In an asynchronous context, you can use MonitoringClient instead,
            which exposes the exact same methods.

            client = MonitoringClientSync("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_metrics(
                metric="avg_build_time",
                period="minute",
            )


            # >LOG

            # use the class directly

            print(response)
        - lang: ruby
          label: Ruby
          source: >
            # Initialize the client

            client = Algolia::MonitoringClient.create("ALGOLIA_APPLICATION_ID",
            "ALGOLIA_API_KEY")


            # Call the API

            response = client.get_metrics("avg_build_time", "minute")


            # >LOG

            # use the class directly

            puts(response)


            # print the JSON response

            puts(response.to_json)
        - lang: scala
          label: Scala
          source: >
            // Initialize the client

            val client = MonitoringClient(appId = "ALGOLIA_APPLICATION_ID",
            apiKey = "ALGOLIA_API_KEY")


            // Call the API

            val response = client.getMetrics(
              metric = Metric.withName("avg_build_time"),
              period = Period.withName("minute")
            )


            // >LOG

            // Use the response

            val value = Await.result(response, Duration(100, "sec"))
        - lang: swift
          label: Swift
          source: >
            // Initialize the client

            let client = try MonitoringClient(appID: "ALGOLIA_APPLICATION_ID",
            apiKey: "ALGOLIA_API_KEY")


            // Call the API

            let response = try await client.getMetrics(metric:
            Metric.avgBuildTime, period: Period.minute)

            // >LOG
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
      description: Your Algolia application ID.
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
      description: Your Algolia Monitoring API key.
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    Clusters:
      name: clusters
      in: path
      required: true
      description: Subset of clusters, separated by comma.
      schema:
        type: string
        example: c1-de,c2-de,c3-de
    MetricInPath:
      name: metric
      in: path
      required: true
      description: >
        Metric to report.


        For more information about the individual metrics, see the description
        of the API response.

        To include all metrics, use `*`.
      schema:
        $ref: '#/components/schemas/Metric'
    PeriodInPath:
      name: period
      in: path
      required: true
      description: |
        Period over which to aggregate the metrics:

        - `minute`. Aggregate the last minute. 1 data point per 10 seconds.
        - `hour`. Aggregate the last hour. 1 data point per minute.
        - `day`. Aggregate the last day. 1 data point per 10 minutes.
        - `week`. Aggregate the last week. 1 data point per hour.
        - `month`. Aggregate the last month. 1 data point per day.
      schema:
        $ref: '#/components/schemas/Period'
  schemas:
    ErrorBase:
      description: Error.
      type: object
      x-keep-model: true
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    Status:
      title: status
      type: string
      description: Status of the cluster.
      enum:
        - operational
        - degraded_performance
        - partial_outage
        - major_outage
    Timestamp:
      type: integer
      format: int64
      description: Timestamp, measured in milliseconds since the Unix epoch.
    Incident:
      title: incident
      description: Incident details.
      type: object
      properties:
        title:
          type: string
          description: Description of the incident.
        status:
          $ref: '#/components/schemas/Status'
    Incidents:
      title: incidents
      description: >-
        Key-value pairs with the cluster names as keys and the list of incidents
        reported for this cluster as values.
      type: array
      items:
        title: incidentEntry
        type: object
        properties:
          t:
            $ref: '#/components/schemas/Timestamp'
          v:
            $ref: '#/components/schemas/Incident'
    Region:
      title: region
      type: string
      description: Region where the cluster is located.
      enum:
        - au
        - br
        - ca
        - de
        - eu
        - hk
        - in
        - jp
        - sg
        - uae
        - uk
        - usc
        - use
        - usw
        - za
      example: de
    ServerStatus:
      title: status
      type: string
      enum:
        - PRODUCTION
    Type:
      title: type
      type: string
      enum:
        - cluster
    Server:
      title: server
      additionalProperties: false
      properties:
        name:
          type: string
          description: Server name.
          example: c16-de-1
        region:
          $ref: '#/components/schemas/Region'
        is_slave:
          type: boolean
          default: false
          deprecated: true
          description: |
            Included to support legacy applications.
            Use `is_replica` instead.
          example: false
        is_replica:
          type: boolean
          default: false
          description: Whether this server is a replica of another server.
          example: false
        cluster:
          type: string
          description: Name of the cluster to which this server belongs.
          example: c16-de
        status:
          $ref: '#/components/schemas/ServerStatus'
        type:
          $ref: '#/components/schemas/Type'
    Time:
      title: times
      description: Time measured by a probe.
      type: array
      items:
        title: timeEntry
        type: object
        additionalProperties: false
        properties:
          t:
            $ref: '#/components/schemas/Timestamp'
          v:
            type: integer
            description: Time in ms.
    Probes:
      title: probes
      description: Probes and their response.
      type: object
      additionalProperties:
        x-additionalPropertiesName: probe
        type: boolean
        description: >-
          Key-value pair with the probe name as the key and the reachability
          status as the value.
    Metric:
      type: string
      enum:
        - avg_build_time
        - ssd_usage
        - ram_search_usage
        - ram_indexing_usage
        - cpu_usage
        - '*'
      example: '*'
    Period:
      type: string
      enum:
        - minute
        - hour
        - day
        - week
        - month
      example: week
    ProbesMetric:
      title: metric
      type: object
      additionalProperties: false
      properties:
        t:
          $ref: '#/components/schemas/Timestamp'
        v:
          type: integer
          description: Value of the metric.
    InfraProbes:
      title: probes
      type: array
      items:
        $ref: '#/components/schemas/ProbesMetric'
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    StatusResponse:
      description: OK
      content:
        application/json:
          schema:
            title: statusResponse
            type: object
            properties:
              status:
                type: object
                additionalProperties:
                  x-additionalPropertiesName: cluster
                  $ref: '#/components/schemas/Status'
          examples:
            Success:
              value:
                status:
                  c16-de: operational
    UnauthorizedResponse:
      description: Unauthorized
      content:
        text/plain:
          schema:
            type: string
          examples:
            Unauthorized:
              summary: Invalid credentials
              description: Use the Monitoring API key.
              value: Invalid credentials
    NotFoundResponse:
      description: Not Found.
      content:
        text/plain:
          schema:
            type: string
          examples:
            NotFound:
              value: Unknown cluster "test"
    IncidentsResponse:
      description: OK
      content:
        application/json:
          schema:
            title: incidentsResponse
            type: object
            properties:
              incidents:
                type: object
                additionalProperties:
                  x-additionalPropertiesName: cluster
                  $ref: '#/components/schemas/Incidents'
          examples:
            success:
              value:
                incidents:
                  m134-de:
                    - t: 1687441685000
                      v:
                        title: >
                          Incident on cluster m134-de: Everything operating
                          normally.
                        status: operational
                    - t: 1687441579000
                      v:
                        title: >
                          Incident on cluster m134-de: We are encountering a
                          major

                          issue that impact all API calls.
                        status: major_outage
    InventoryResponse:
      description: OK
      content:
        application/json:
          schema:
            title: inventoryResponse
            type: object
            properties:
              inventory:
                type: array
                items:
                  $ref: '#/components/schemas/Server'
          examples:
            Success:
              value:
                inventory:
                  - name: c16-de-3
                    region: de
                    is_slave: false
                    is_replica: false
                    cluster: c16-de
                    status: PRODUCTION
                    type: cluster
                  - name: c16-de-2
                    region: de
                    is_slave: false
                    is_replica: false
                    cluster: c16-de
                    status: PRODUCTION
                    type: cluster
                  - name: c16-de-1
                    region: de
                    is_slave: false
                    is_replica: false
                    cluster: c16-de
                    status: PRODUCTION
                    type: cluster
    ForbiddenResponse:
      description: Forbidden
      content:
        application/json:
          schema:
            title: forbidden
            type: object
            additionalProperties: false
            properties:
              reason:
                type: string
          examples:
            Forbidden:
              value:
                reason: invalid credentials
    LatencyResponse:
      description: OK
      content:
        application/json:
          schema:
            title: latencyResponse
            type: object
            properties:
              metrics:
                title: latencyMetric
                type: object
                additionalProperties: false
                properties:
                  latency:
                    additionalProperties:
                      x-additionalPropertiesName: latencies
                      $ref: '#/components/schemas/Time'
          examples:
            Success:
              value:
                metrics:
                  latency:
                    c16-de:
                      - t: 1688056200000
                        v: 64
                      - t: 1688056800000
                        v: 59
                      - t: 1688057400000
                        v: 55
    BadRequestResponse:
      description: Bad Request.
      content:
        application/json:
          schema:
            title: badRequest
            type: object
            additionalProperties: false
            properties:
              reason:
                type: string
          examples:
            BadRequest:
              value:
                reason: Unknown servers
    IndexingResponse:
      description: OK
      content:
        application/json:
          schema:
            title: indexingTimeResponse
            type: object
            properties:
              metrics:
                title: indexingMetric
                type: object
                additionalProperties: false
                properties:
                  indexing:
                    additionalProperties:
                      x-additionalPropertiesName: cluster
                      $ref: '#/components/schemas/Time'
          examples:
            Success:
              value:
                metrics:
                  indexing:
                    c16-de:
                      - t: 1688056200000
                        v: 1562
                      - t: 1688056800000
                        v: 1637
                      - t: 1688057400000
                        v: 1754
    ReachabilityResponse:
      description: OK
      content:
        application/json:
          schema:
            title: reachabilityResponse
            type: object
            additionalProperties:
              x-additionalPropertiesName: cluster
              $ref: '#/components/schemas/Probes'
          examples:
            Success:
              value:
                c16-de:
                  sdn-probe-frankfurt: false
                  monitoring-2: false
                  sdn-probe-awswest1: false
    InfrastructureResponse:
      description: OK
      content:
        application/json:
          schema:
            title: infrastructureResponse
            type: object
            additionalProperties: false
            properties:
              metrics:
                title: metrics
                type: object
                additionalProperties: false
                properties:
                  cpu_usage:
                    type: object
                    description: CPU idleness in %.
                    additionalProperties:
                      x-additionalPropertiesName: probes
                      $ref: '#/components/schemas/InfraProbes'
                  ram_indexing_usage:
                    type: object
                    description: RAM used for indexing in MB.
                    additionalProperties:
                      x-additionalPropertiesName: probes
                      $ref: '#/components/schemas/InfraProbes'
                  ram_search_usage:
                    type: object
                    description: RAM used for search in MB.
                    additionalProperties:
                      x-additionalPropertiesName: probes
                      $ref: '#/components/schemas/InfraProbes'
                  ssd_usage:
                    type: object
                    description: >
                      Solid-state disk (SSD) usage expressed as % of RAM. 

                      0% means no SSD usage. A value of 50% indicates 32&nbsp;GB
                      SSD usage for a machine with 64&nbsp;RAM.
                    additionalProperties:
                      x-additionalPropertiesName: probes
                      $ref: '#/components/schemas/InfraProbes'
                  avg_build_time:
                    type: object
                    description: Average build time of the indices in seconds.
                    additionalProperties:
                      x-additionalPropertiesName: probes
                      $ref: '#/components/schemas/InfraProbes'
          examples:
            success:
              value:
                metrics:
                  cpu_usage:
                    s4-fr:
                      - t: 1455101280
                        v: 46
                      - t: 1455101290
                        v: 46
                      - t: 1455101300
                        v: 46
                    c3-use-1:
                      - t: 1455101280
                        v: 42
                      - t: 1455101290
                        v: 42
                      - t: 1455101300
                        v: 42
                      - t: 1455101310
                        v: 37
                    c3-use-2:
                      - t: 1455101280
                        v: 56
                      - t: 1455101290
                        v: 56
                      - t: 1455101300
                        v: 56
                      - t: 1455101310
                        v: 56
                      - t: 1455101320
                        v: 51
    InfrastructureAPIUnauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            title: unauthorized
            type: object
            additionalProperties: false
            properties:
              reason:
                type: string
          examples:
            Unauthorized:
              value:
                reason: >-
                  The infrastructure usage API is only available on Enterprise
                  plans. Please contact enterprise@algolia.com for more detail.
x-tagGroups:
  - name: General
    tags:
      - status
      - incidents
      - infrastructure
      - monitoring-tag
