openapi: 3.0.2
info:
  title: A/B Testing API
  description: API powering the A/B Testing feature of Algolia.
  version: 1.0.0
components:
  securitySchemes:
    appId:
      type: apiKey
      in: header
      name: X-Algolia-Application-Id
    apiKey:
      type: apiKey
      in: header
      name: X-Algolia-API-Key
  parameters:
    PathInPath:
      name: path
      in: path
      description: Path of the endpoint, anything after "/1" must be specified.
      required: true
      schema:
        type: string
        example: /keys
    Parameters:
      name: parameters
      in: query
      description: Query parameters to apply to the current query.
      schema:
        type: object
        additionalProperties: true
    Offset:
      in: query
      name: offset
      description: Position of the starting record. Used for paging. 0 is the first record.
      schema:
        type: integer
        default: 0
    Limit:
      in: query
      name: limit
      description: Number of records to return (page size).
      schema:
        type: integer
        default: 10
    ID:
      in: path
      name: id
      description: Unique A/B test ID.
      required: true
      schema:
        type: integer
        example: 390
  schemas:
    ErrorBase:
      description: Error.
      type: object
      additionalProperties: true
      properties:
        message:
          type: string
          example: Invalid Application-Id or API-Key
    abTestID:
      type: integer
      description: Unique A/B test ID.
      example: 224
    updatedAt:
      type: string
      description: >-
        Update date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601)
        format.
      example: '2023-06-15T15:06:44.400601Z'
    createdAt:
      type: string
      description: >-
        Creation date timestamp in
        [ISO-8601](https://wikipedia.org/wiki/ISO_8601) format.
      example: '2023-06-15T15:06:04.249906Z'
    endAt:
      type: string
      description: >-
        End date timestamp in [ISO-8601](https://wikipedia.org/wiki/ISO_8601)
        format.
      example: '2023-06-17T00:00:00Z'
    name:
      type: string
      description: A/B test name.
      example: Custom ranking sales rank test
    currencies:
      type: object
      description: A/B test currencies.
      example:
        USD:
          currency: USD
          revenue: 120
          mean: 53.7
          standardDeviation: 12.3
        EUR:
          currency: EUR
          revenue: 100
          mean: 43.7
          standardDeviation: 10.3
      additionalProperties:
        type: object
        properties:
          currency:
            type: string
            description: Currency code.
            example: USD
          revenue:
            type: number
            format: double
            description: Revenue for this currency.
            example: 120
          mean:
            type: number
            format: double
            description: Mean for this currency.
            example: 53.7
          standardDeviation:
            type: number
            format: double
            description: Standard deviation for this currency.
            example: 12.3
    description:
      type: string
      description: A/B test description.
      example: Current production index
    filterEffects:
      type: object
      description: A/B test filter effects resulting from configuration settings.
      properties:
        outliers:
          type: object
          description: >-
            Outliers removed from the A/B test as a result of configuration
            settings.
          example:
            usersCount: 1
            trackedSearchesCount: 237
          properties:
            usersCount:
              type: integer
              description: Number of users removed from the A/B test.
              example: 1
            trackedSearchesCount:
              type: integer
              description: Number of tracked searches removed from the A/B test.
              example: 237
        emptySearch:
          type: object
          description: >-
            Empty searches removed from the A/B test as a result of
            configuration settings.
          example:
            usersCount: 1
            trackedSearchesCount: 237
          properties:
            usersCount:
              type: integer
              description: Number of users removed from the A/B test.
              example: 1
            trackedSearchesCount:
              type: integer
              description: Number of tracked searches removed from the A/B test.
              example: 237
    index:
      type: string
      description: A/B test index.
      example: delcourt_production
    trackedSearchCount:
      type: integer
      example: 2
      nullable: true
      description: >-
        Number of tracked searches. This is the number of search requests where
        the `clickAnalytics` parameter is `true`.
    trafficPercentage:
      type: integer
      description: A/B test traffic percentage.
      example: 60
    variant:
      type: object
      additionalProperties: false
      properties:
        addToCartCount:
          type: integer
          description: Number of add-to-cart events for this variant.
          example: 0
        addToCartRate:
          type: number
          format: double
          nullable: true
          description: >-
            Variant's [add-to-cart
            rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#add-to-cart-rate).
          example: 0
        averageClickPosition:
          type: integer
          nullable: true
          description: >-
            Variant's [average click
            position](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-position).
          example: 0
        clickCount:
          type: integer
          description: Number of click events for this variant.
          example: 65131
        clickThroughRate:
          type: number
          format: double
          nullable: true
          description: >-
            Variant's [click-through
            rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#click-through-rate).
          example: 0.22219857724813036
        conversionCount:
          type: integer
          description: Number of click events for this variant.
          example: 4785
        conversionRate:
          type: number
          format: double
          nullable: true
          description: >-
            Variant's [conversion
            rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#conversion-rate).
          example: 0.14546725846658964
        currencies:
          $ref: '#/components/schemas/currencies'
        description:
          $ref: '#/components/schemas/description'
        estimatedSampleSize:
          type: integer
          description: >-
            The estimated number of searches that will need to be run to achieve
            the desired confidence level and statistical power. A
            `minimumDetectableEffect` must be set in the `configuration` object
            for this to be used.
          example: 0
        filterEffects:
          $ref: '#/components/schemas/filterEffects'
        index:
          $ref: '#/components/schemas/index'
        noResultCount:
          type: integer
          nullable: true
          description: >-
            Number of [searches without
            results](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#searches-without-results)
            for that variant.
          example: 0
        purchaseCount:
          type: integer
          description: Number of purchase events for this variant.
          example: 0
        purchaseRate:
          type: number
          format: double
          nullable: true
          description: >-
            Variant's [purchase
            rate](https://www.algolia.com/doc/guides/search-analytics/concepts/metrics/#purchase-rate).
          example: 0
        searchCount:
          type: integer
          nullable: true
          description: Number of searches carried out during the A/B test.
          example: 86269
        trackedSearchCount:
          $ref: '#/components/schemas/trackedSearchCount'
        trafficPercentage:
          $ref: '#/components/schemas/trafficPercentage'
        userCount:
          type: integer
          nullable: true
          description: Number of users during the A/B test.
          example: 55501
        trackedUserCount:
          type: integer
          nullable: true
          description: Number of users that performed a tracked search during the A/B test.
          example: 55501
      required:
        - userCount
        - trackedUserCount
        - trafficPercentage
        - trackedSearchCount
        - searchCount
        - noResultCount
        - index
        - description
        - conversionRate
        - conversionCount
        - clickThroughRate
        - clickCount
        - averageClickPosition
        - addToCartRate
        - addToCartCount
        - purchaseRate
        - purchaseCount
    variants:
      type: array
      description: A/B test variants.
      items:
        $ref: '#/components/schemas/variant'
    ABTest:
      type: object
      additionalProperties: false
      properties:
        abTestID:
          $ref: '#/components/schemas/abTestID'
        clickSignificance:
          type: number
          format: double
          nullable: true
          description: >
            [A/B test
            significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance)
            based on click data. A value of 0.95 or over is considered to be
            _significant_.
          example: 1
        conversionSignificance:
          type: number
          format: double
          nullable: true
          description: >
            [A/B test
            significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance)
            based on conversion. A value of 0.95 or over is considered to be
            _significant_.
          example: 1
        addToCartSignificance:
          type: number
          format: double
          nullable: true
          description: >
            [A/B test
            significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance)
            based on add-to-cart data. A value of 0.95 or over is considered to
            be _significant_.
          example: 1
        purchaseSignificance:
          type: number
          format: double
          nullable: true
          description: >
            [A/B test
            significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance)
            based on purchase data. A value of 0.95 or over is considered to be
            _significant_.
          example: 1
        revenueSignificance:
          type: object
          additionalProperties:
            type: number
            format: double
          nullable: true
          description: >
            [A/B test
            significance](https://www.algolia.com/doc/guides/ab-testing/what-is-ab-testing/in-depth/how-ab-test-scores-are-calculated/#statistical-significance-or-chance)
            based on revenue data. A value of 0.95 or over is considered to be
            _significant_.
          example:
            USD: 1
            EUR: 0.87
        updatedAt:
          $ref: '#/components/schemas/updatedAt'
        createdAt:
          $ref: '#/components/schemas/createdAt'
        endAt:
          $ref: '#/components/schemas/endAt'
        name:
          $ref: '#/components/schemas/name'
        status:
          type: string
          description: A/B test status.
          example: running
        variants:
          $ref: '#/components/schemas/variants'
      required:
        - status
        - name
        - createdAt
        - endAt
        - updatedAt
        - conversionSignificance
        - clickSignificance
        - purchaseSignificance
        - addToCartSignificance
        - revenueSignificance
        - abTestID
        - variants
    ABTests:
      nullable: true
      type: array
      description: A/B tests.
      items:
        $ref: '#/components/schemas/ABTest'
    abTestsVariant:
      type: object
      additionalProperties: false
      properties:
        index:
          $ref: '#/components/schemas/index'
        trafficPercentage:
          $ref: '#/components/schemas/trafficPercentage'
        description:
          $ref: '#/components/schemas/description'
      required:
        - index
        - trafficPercentage
    customSearchParams:
      type: object
      description: >-
        Applies search parameters from [a restricted set of
        options](https://www.algolia.com/doc/api-reference/api-methods/add-ab-test/#method-param-customsearchparameters).
        Only use this parameter if the two variants use the same index.
      example:
        typoTolerance: false
        synonyms: false
      additionalProperties: false
      properties:
        customSearchParameters:
          type: object
      required:
        - customSearchParameters
    abTestsVariantSearchParams:
      allOf:
        - $ref: '#/components/schemas/abTestsVariant'
        - $ref: '#/components/schemas/customSearchParams'
    AddABTestsVariant:
      oneOf:
        - $ref: '#/components/schemas/abTestsVariant'
        - $ref: '#/components/schemas/abTestsVariantSearchParams'
    taskID:
      type: integer
      format: int64
      example: 1514562690001
      description: >
        Unique identifier of a task.

        A successful API response means that a task was added to a queue. It
        might not run immediately. You can check the task's progress with the
        `task` operation and this `taskID`.
    ABTestResponse:
      type: object
      additionalProperties: false
      properties:
        index:
          $ref: '#/components/schemas/index'
        abTestID:
          $ref: '#/components/schemas/abTestID'
        taskID:
          $ref: '#/components/schemas/taskID'
      required:
        - abTestID
        - index
        - taskID
  responses:
    BadRequest:
      description: Bad request or request arguments.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    FeatureNotEnabled:
      description: This feature is not enabled on your Algolia account.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    MethodNotAllowed:
      description: Method not allowed with this API key.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
    IndexNotFound:
      description: Index not found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorBase'
servers:
  - url: https://analytics.{region}.algolia.com
    variables:
      region:
        enum:
          - us
          - de
        default: us
  - url: https://analytics.algolia.com
security:
  - appId: []
    apiKey: []
tags:
  - name: abtest
    x-displayName: A/B testing
    description: Manage A/B tests.
x-tagGroups:
  - name: General
    tags:
      - abtest
paths:
  /1{path}:
    get:
      operationId: customGet
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomGetAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomGet(client.NewApiCustomGetRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customGet("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customGet({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customGet(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customGet(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_get(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_get("/test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.customGet[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customGet(
                path: "/test/minimal"
            )
    post:
      operationId: customPost
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomPostAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomPost(client.NewApiCustomPostRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customPost("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customPost({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customPost(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customPost(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_post(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_post("/test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.customPost[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customPost(
                path: "/test/minimal"
            )
    put:
      operationId: customPut
      requestBody:
        description: Parameters to send with the custom request.
        content:
          application/json:
            schema:
              type: object
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomPutAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomPut(client.NewApiCustomPutRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customPut("/test/minimal");
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.customPut({ path: '/test/minimal' });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customPut(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customPut(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_put(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_put("/test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.customPut[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customPut(
                path: "/test/minimal"
            )
    delete:
      operationId: customDelete
      summary: Send requests to the Algolia REST API.
      description: This method allow you to send requests to the Algolia REST API.
      parameters:
        - $ref: '#/components/parameters/PathInPath'
        - $ref: '#/components/parameters/Parameters'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.CustomDeleteAsync("/test/minimal");
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
              "/test/minimal",
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.customDelete("/test/minimal");
        - lang: JavaScript
          source: >
            // Initialize the client

            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );


            // Call the API

            const response = await client.customDelete({ path: '/test/minimal'
            });


            // use typed response

            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.customDelete(
              path = "/test/minimal",
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->customDelete(
                '/test/minimal',
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.custom_delete(
                path="/test/minimal",
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.custom_delete("/test/minimal")


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.customDelete[JObject](
              path = "/test/minimal"
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.customDelete(
                path: "/test/minimal"
            )
  /2/abtests:
    post:
      tags:
        - abtest
      operationId: addABTests
      x-acl:
        - editSettings
      summary: Create an A/B test.
      description: Creates an A/B test.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              title: addABTestsRequest
              type: object
              additionalProperties: false
              properties:
                name:
                  $ref: '#/components/schemas/name'
                variants:
                  type: array
                  description: A/B test variants.
                  minItems: 2
                  maxItems: 2
                  items:
                    $ref: '#/components/schemas/AddABTestsVariant'
                endAt:
                  $ref: '#/components/schemas/endAt'
              required:
                - name
                - variants
                - endAt
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.AddABTestsAsync(
              new AddABTestsRequest
              {
                EndAt = "2022-12-31T00:00:00.000Z",
                Name = "myABTest",
                Variants = new List<AddABTestsVariant>
                {
                  new AddABTestsVariant(
                    new AbTestsVariant { Index = "AB_TEST_1", TrafficPercentage = 30, }
                  ),
                  new AddABTestsVariant(new AbTestsVariant { Index = "AB_TEST_2", TrafficPercentage = 50, })
                },
              }
            );
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.AddABTests(client.NewApiAddABTestsRequest(

              abtesting.NewEmptyAddABTestsRequest().SetEndAt("2022-12-31T00:00:00.000Z").SetName("myABTest").SetVariants(
                []abtesting.AddABTestsVariant{*abtesting.AbTestsVariantAsAddABTestsVariant(
                  abtesting.NewEmptyAbTestsVariant().SetIndex("AB_TEST_1").SetTrafficPercentage(30)), *abtesting.AbTestsVariantAsAddABTestsVariant(
                  abtesting.NewEmptyAbTestsVariant().SetIndex("AB_TEST_2").SetTrafficPercentage(50))}),
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.addABTests(
              new AddABTestsRequest()
                .setEndAt("2022-12-31T00:00:00.000Z")
                .setName("myABTest")
                .setVariants(
                  List.of(
                    new AbTestsVariant().setIndex("AB_TEST_1").setTrafficPercentage(30),
                    new AbTestsVariant().setIndex("AB_TEST_2").setTrafficPercentage(50)
                  )
                )
            );
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.addABTests({
              endAt: '2022-12-31T00:00:00.000Z',
              name: 'myABTest',
              variants: [
                { index: 'AB_TEST_1', trafficPercentage: 30 },
                { index: 'AB_TEST_2', trafficPercentage: 50 },
              ],
            });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.addABTests(
              addABTestsRequest = AddABTestsRequest(
                endAt = "2022-12-31T00:00:00.000Z",
                name = "myABTest",
                variants = listOf(
                  AbTestsVariant(
                    index = "AB_TEST_1",
                    trafficPercentage = 30,
                  ),
                  AbTestsVariant(
                    index = "AB_TEST_2",
                    trafficPercentage = 50,
                  ),
                ),
              ),
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->addABTests(
                ['endAt' => '2022-12-31T00:00:00.000Z',
                    'name' => 'myABTest',
                    'variants' => [
                        ['index' => 'AB_TEST_1',
                            'trafficPercentage' => 30,
                        ],

                        ['index' => 'AB_TEST_2',
                            'trafficPercentage' => 50,
                        ],
                    ],
                ],
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.add_ab_tests(
                add_ab_tests_request={
                    "endAt": "2022-12-31T00:00:00.000Z",
                    "name": "myABTest",
                    "variants": [
                        {
                            "index": "AB_TEST_1",
                            "trafficPercentage": 30,
                        },
                        {
                            "index": "AB_TEST_2",
                            "trafficPercentage": 50,
                        },
                    ],
                },
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.add_ab_tests(
              AddABTestsRequest.new(
                end_at: "2022-12-31T00:00:00.000Z",
                name: "myABTest",
                variants: [AbTestsVariant.new(index: "AB_TEST_1", traffic_percentage: 30),
                  AbTestsVariant.new(index: "AB_TEST_2", traffic_percentage: 50)]
              )
            )


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.addABTests(
              addABTestsRequest = AddABTestsRequest(
                endAt = "2022-12-31T00:00:00.000Z",
                name = "myABTest",
                variants = Seq(
                  AbTestsVariant(
                    index = "AB_TEST_1",
                    trafficPercentage = 30
                  ),
                  AbTestsVariant(
                    index = "AB_TEST_2",
                    trafficPercentage = 50
                  )
                )
              )
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.addABTests(
                addABTestsRequest: AddABTestsRequest(
                    name: "myABTest",
                    variants: [AddABTestsVariant.abTestsVariant(
                        AbTestsVariant(
                            index: "AB_TEST_1",
                            trafficPercentage: 30
                        )
                    ), AddABTestsVariant.abTestsVariant(
                        AbTestsVariant(
                            index: "AB_TEST_2",
                            trafficPercentage: 50
                        )
                    )],
                    endAt: "2022-12-31T00:00:00.000Z"
                )
            )
    get:
      tags:
        - abtest
      operationId: listABTests
      x-acl:
        - analytics
      summary: List all A/B tests.
      description: List all A/B tests.
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - name: indexPrefix
          in: query
          description: Only return A/B tests for indices starting with this prefix.
          example: dev_
          schema:
            type: string
        - name: indexSuffix
          in: query
          description: Only return A/B tests for indices ending with this suffix.
          example: _development
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                title: listABTestsResponse
                type: object
                additionalProperties: false
                properties:
                  abtests:
                    $ref: '#/components/schemas/ABTests'
                  count:
                    type: integer
                    description: Number of A/B tests implemented.
                    example: 10
                  total:
                    type: integer
                    description: Number of retrievable A/B tests.
                    example: 12
                required:
                  - abtests
                  - count
                  - total
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.ListABTestsAsync();
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.ListABTests(client.NewApiListABTestsRequest())

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.listABTests();
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.listABTests();

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.listABTests()


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->listABTests();


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.list_ab_tests()


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.list_ab_tests


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.listABTests(

            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.listABTests()
  /2/abtests/{id}:
    get:
      tags:
        - abtest
      operationId: getABTest
      x-acl:
        - analytics
      summary: Get A/B test details.
      description: >
        Get specific details for an A/B test.

        To determine the `id` for an A/B test, use the [`listABTests`
        operation](#tag/abtest/operation/listABTests).
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABTest'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.GetABTestAsync(42);
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.GetABTest(client.NewApiGetABTestRequest(
              42,
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.getABTest(42);
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.getABTest({ id: 42 });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.getABTest(
              id = 42,
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->getABTest(
                42,
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.get_ab_test(
                id=42,
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.get_ab_test(42)


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.getABTest(
              id = 42
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.getABTest(
                id: 42
            )
    delete:
      tags:
        - abtest
      operationId: deleteABTest
      x-acl:
        - editSettings
      summary: Delete an A/B test.
      description: >
        Delete an A/B test.

        To determine the `id` for an A/B test, use the [`listABTests`
        operation](#tag/abtest/operation/listABTests).
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.DeleteABTestAsync(42);
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.DeleteABTest(client.NewApiDeleteABTestRequest(
              42,
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.deleteABTest(42);
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.deleteABTest({ id: 42 });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.deleteABTest(
              id = 42,
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->deleteABTest(
                42,
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.delete_ab_test(
                id=42,
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.delete_ab_test(42)


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.deleteABTest(
              id = 42
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.deleteABTest(
                id: 42
            )
  /2/abtests/{id}/stop:
    post:
      tags:
        - abtest
      operationId: stopABTest
      x-acl:
        - editSettings
      summary: Stop an A/B test.
      description: >
        If stopped, the test is over and can't be restarted. There is now only
        one index, receiving 100% of all search requests.

        The data gathered for stopped A/B tests is retained.

        To determine the `id` for an A/B test, use the [`listABTests`
        operation](#tag/abtest/operation/listABTests).
      parameters:
        - $ref: '#/components/parameters/ID'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ABTestResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/FeatureNotEnabled'
        '403':
          $ref: '#/components/responses/MethodNotAllowed'
        '404':
          $ref: '#/components/responses/IndexNotFound'
      x-codeSamples:
        - lang: CSharp
          source: |
            // Initialize the client
            var client = new AbtestingClient(
              new AbtestingConfig("YOUR_APP_ID", "YOUR_API_KEY", "YOUR_APP_ID_REGION")
            );

            // Call the API
            var response = await client.StopABTestAsync(42);
        - lang: Go
          source: >
            // Initialize the client with your application region, eg.
            abtesting.YOUR_APP_ID_REGION

            client, err := abtesting.NewClient("YOUR_APP_ID", "YOUR_API_KEY",
            abtesting.US)

            if err != nil {
              // The client can fail to initialize if you pass an invalid parameter.
              panic(err)
            }


            // Call the API

            resp, err := client.StopABTest(client.NewApiStopABTestRequest(
              42,
            ))

            if err != nil {
              // handle the eventual error
              panic(err)
            }


            // use the model directly

            print(resp)
        - lang: Java
          source: >
            // Initialize the client

            AbtestingClient client = new AbtestingClient("YOUR_APP_ID",
            "YOUR_API_KEY", "YOUR_APP_ID_REGION");


            // Call the API

            client.stopABTest(42);
        - lang: JavaScript
          source: |
            // Initialize the client
            const client = abtestingClient(
              'YOUR_APP_ID',
              'YOUR_API_KEY',
              'YOUR_APP_ID_REGION'
            );

            // Call the API
            const response = await client.stopABTest({ id: 42 });

            // use typed response
            console.log(response);
        - lang: Kotlin
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = "YOUR_APP_ID_REGION")


            // Call the API

            var response = client.stopABTest(
              id = 42,
            )


            // Use the response

            println(response)
        - lang: PHP
          source: >
            // Initialize the client

            $client =
            Algolia\AlgoliaSearch\Api\AbtestingClient::create('<YOUR_APP_ID>',
            '<YOUR_API_KEY>', 'YOUR_APP_ID_REGION');


            // Call the API

            $response = $client->stopABTest(
                42,
            );


            // play with the response

            var_dump($response);
        - lang: Python
          source: >
            # Initialize the client

            _client = AbtestingClient("YOUR_APP_ID", "YOUR_API_KEY",
            "YOUR_APP_ID_REGION")


            # Call the API

            resp = await _client.stop_ab_test(
                id=42,
            )


            # use the class directly

            print(resp)


            # print the JSON response

            print(resp.to_json())
        - lang: Ruby
          source: >
            # Initialize the client

            client = Algolia::AbtestingClient.create('YOUR_APP_ID',
            'YOUR_API_KEY', 'YOUR_APP_ID_REGION')


            # Call the API

            resp = client.stop_ab_test(42)


            # use the class directly

            puts resp


            # print the JSON response

            puts resp.to_json
        - lang: Scala
          source: >
            // Initialize the client

            val client = AbtestingClient(appId = "YOUR_APP_ID", apiKey =
            "YOUR_API_KEY", region = Option("YOUR_APP_ID_REGION"))


            // Call the API

            val res = client.stopABTest(
              id = 42
            )


            // Use the response

            val value = Await.result(res, Duration(100, "sec"))
        - lang: Swift
          source: >
            // Initialize the client

            let client = try AbtestingClient(appId: "YOUR_APP_ID", apiKey:
            "YOUR_API_KEY", region: .us)


            // Call the API

            _ = try await client.stopABTest(
                id: 42
            )
