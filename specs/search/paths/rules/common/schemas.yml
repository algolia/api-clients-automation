rule:
  type: object
  description: Rule object.
  additionalProperties: false
  properties:
    objectID:
      $ref: '../../../../common/parameters.yml#/ruleID'
    conditions:
      type: array
      minItems: 0
      maxItems: 25
      description: |
        Conditions that trigger a rule.

        Some consequences require specific conditions or don't require any condition.
        For more information, see [Conditions](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#conditions).
      items:
        $ref: '#/condition'
    consequence:
      $ref: '#/consequence'
    description:
      type: string
      description: Description of the rule's purpose to help you distinguish between different rules.
      example: Display a promotional banner
    enabled:
      type: boolean
      default: true
      description: Whether the rule is active.
    validity:
      type: array
      description: Time periods when the rule is active.
      items:
        $ref: '../../../../common/schemas/Rule.yml#/timeRange'
  required:
    - objectID
    - consequence

condition:
  type: object
  additionalProperties: false
  properties:
    pattern:
      type: string
      description: |
        Query pattern that triggers the rule.

        You can use either a literal string, or a special pattern `{facet:ATTRIBUTE}`, where `ATTRIBUTE` is a facet name.
        The rule is triggered if the query matches the literal string or a value of the specified facet.
        For example, with `pattern: {facet:genre}`, the rule is triggered when users search for a genre, such as "comedy".
      example: '{facet:genre}'
    anchoring:
      $ref: '#/anchoring'
    alternatives:
      type: boolean
      description: Whether the pattern should match plurals, synonyms, and typos.
      default: false
    context:
      $ref: '../../../../common/schemas/Rule.yml#/context'
    filters:
      type: string
      description: |
        Filters that trigger the rule.

        You can add add filters using the syntax `facet:value` so that the rule is triggered, when the specific filter is selected.
        You can use `filters` on its own or combine it with the `pattern` parameter.
      example: 'genre:comedy'

anchoring:
  type: string
  description: |
    Which part of the search query the pattern should match:

    - `startsWith`. The pattern must match the beginning of the query.
    - `endsWith`. The pattern must match the end of the query.
    - `is`. The pattern must match the query exactly.
    - `contains`. The pattern must match anywhere in the query.

    Empty queries are only allowed as patterns with `anchoring: is`.
  enum: [is, startsWith, endsWith, contains]

consequence:
  type: object
  description: |
    Effect of the rule.

    For more information, see [Consequences](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/#consequences).
  additionalProperties: false
  properties:
    params:
      $ref: '#/consequenceParams'
    promote:
      type: array
      maxItems: 300
      description: |
        Records you want to pin to a specific position in the search results.

        You can promote up to 300 records, either individually, or as groups of up to 100 records each.
      items:
        $ref: '#/promote'
    filterPromotes:
      type: boolean
      default: false
      description: |
        Whether promoted records must match an active filter for the consequence to be applied.

        This ensures that user actions (filtering the search) are given a higher precendence.
        For example, if you promote a record with the `color: red` attribute, and the user filters the search for `color: blue`,
        the "red" record won't be shown.
    hide:
      type: array
      maxItems: 50
      description: Records you want to hide from the search results.
      items:
        title: consequenceHide
        type: object
        description: Object ID of the record to hide.
        additionalProperties: false
        properties:
          objectID:
            $ref: '../../../../common/parameters.yml#/objectID'
        required:
          - objectID
    userData:
      description: |
        A JSON object with custom data that will be appended to the `userData` array in the response.
        This object isn't interpreted by the API and is limited to 1&nbsp;kB of minified JSON.
      example:
        settingID: f2a7b51e3503acc6a39b3784ffb84300
        pluginVersion: '1.6.0'

consequenceParams:
  allOf:
    - $ref: '../../../../common/schemas/SearchParams.yml#/baseSearchParamsWithoutQuery'
    - $ref: '../../../../common/schemas/IndexSettings.yml#/indexSettingsAsSearchParams'
    - $ref: '#/params'

promote:
  oneOf:
    - $ref: '#/promoteObjectIDs'
    - $ref: '#/promoteObjectID'

promoteObjectID:
  title: objectID
  description: Record to promote.
  type: object
  additionalProperties: false
  properties:
    objectID:
      $ref: '../../../../common/parameters.yml#/objectID'
    position:
      $ref: '#/promotePosition'
  required:
    - position
    - objectID
  x-discriminator-fields:
    - objectID

promoteObjectIDs:
  title: objectIDs
  description: Records to promote.
  type: object
  additionalProperties: false
  properties:
    objectIDs:
      type: array
      maxItems: 100
      description: |
        Object IDs of the records you want to promote.

        The records are placed as a group at the `position`.
        For example, if you want to promote four records to position `0`,
        they will be the first four search results.
      items:
        $ref: '../../../../common/parameters.yml#/objectID'
    position:
      $ref: '#/promotePosition'
  required:
    - position
    - objectIDs
  x-discriminator-fields:
    - objectIDs

promotePosition:
  type: integer
  description: Position in the search results where you want to show the promoted records.
  example: 0

params:
  type: object
  description: |
    Parameters to apply to this search.

    You can use all search parameters, plus special `automaticFacetFilters`, `automaticOptionalFacetFilters`, and `query`.
  additionalProperties: false
  properties:
    query:
      $ref: '#/consequenceQuery'
    automaticFacetFilters:
      $ref: '#/automaticFacetFilters'
    automaticOptionalFacetFilters:
      $ref: '#/automaticOptionalFacetFilters'
    renderingContent:
      $ref: '../../../../common/schemas/IndexSettings.yml#/renderingContent'

consequenceQuery:
  description: |
    Replace or edit the search query.

    If `consequenceQuery` is a string, the entire search query is replaced with that string.
    If `consequenceQuery` is an object, it describes incremental edits made to the query.
  oneOf:
    - $ref: '#/consequenceQueryObject'
    - type: string

consequenceQueryObject:
  type: object
  additionalProperties: false
  properties:
    remove:
      description: Words to remove from the search query.
      type: array
      items:
        type: string
    edits:
      description: Changes to make to the search query.
      type: array
      items:
        $ref: '#/edit'

edit:
  type: object
  additionalProperties: false
  properties:
    type:
      $ref: '#/editType'
    delete:
      description: Text or patterns to remove from the query string.
      type: string
    insert:
      description: Text to be added in place of the deleted text inside the query string.
      type: string

editType:
  description: Type of edit.
  type: string
  enum: [remove, replace]

automaticFacetFilters:
  description: |
    Filter to be applied to the search.

    You can use this to respond to search queries that match a facet value.
    For example, if users search for "comedy", which matches a facet value of the "genre" facet,
    you can filter the results to show the top-ranked comedy movies.
  oneOf:
    - type: array
      items:
        $ref: '#/automaticFacetFilter'
    - type: array
      items:
        type: string

automaticOptionalFacetFilters:
  description: Optional filters to be applied to the search.
  $ref: '#/automaticFacetFilters'

automaticFacetFilter:
  type: object
  description: Filter or optional filter to be applied to the search.
  additionalProperties: false
  properties:
    facet:
      type: string
      description: |
        Facet name to be applied as filter.
        The name must match placeholders in the `pattern` parameter.
        For example, with `pattern: {facet:genre}`, `automaticFacetFilters` must be `genre`.
    score:
      type: integer
      default: 1
      description: Filter scores to give different weights to individual filters.
    disjunctive:
      type: boolean
      default: false
      description: |
        Whether the filter is disjunctive or conjunctive.

        If true the filter has multiple matches, multiple occurences are combined with the logical `OR` operation.
        If false, multiple occurences are combined with the logical `AND` operation.
  required:
    - facet

updatedRuleResponse:
  type: object
  additionalProperties: false
  properties:
    objectID:
      $ref: '../../../../common/parameters.yml#/ruleID'
    updatedAt:
      $ref: '../../../../common/responses/common.yml#/updatedAt'
    taskID:
      $ref: '../../../../common/responses/common.yml#/taskID'
  required:
    - objectID
    - updatedAt
    - taskID
