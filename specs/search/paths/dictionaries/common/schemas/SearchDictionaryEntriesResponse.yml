searchDictionaryEntriesResponse:
  type: object
  additionalProperties: false
  properties:
    hits:
      type: array
      description: The dictionary entries returned by the search.
      items:
        $ref: '#/dictionaryEntry'
    page:
      $ref: '../../../../../common/parameters.yml#/page'
    nbHits:
      $ref: '../../../../common/schemas/SearchResponse.yml#/nbHits'
    nbPages:
      $ref: '../../../../common/schemas/SearchResponse.yml#/nbPages'

dictionaryEntry:
  type: object
  description: >
    Dictionary entry.

    To get an entry's `objectID`, use the `dictionaries` method's `settings` operation.
  additionalProperties: true
  required:
    - objectID
    - language
  properties:
    objectID:
      $ref: '../../../../../common/parameters.yml#/objectID'
    language:
      type: string
      description: >
        [Supported language ISO code](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/in-depth/supported-languages/) (for example, "en" for English).
    word:
      type: string
      description: >
        Dictionary entry word. Usage depends on the type of dictionary entry.

        **`stopwordEntry`**

        The stop word you want to add or update. If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`.

        **`compoundEntry`**

        When `decomposition` is empty: adds `word` as a compound atom.
        For example, atom “kino” decomposes the query “kopfkino” into "kopf" and "kino".
        
        When `decomposition` isn't empty: creates a decomposition exception.
        For example, when decomposition is set to the ["hund", "hutte"] exception, "hundehutte" decomposes into “hund” and “hutte”, discarding the linking "e".
    words:
      type: array
      description: >
        Compound dictionary [word declensions](https://www.algolia.com/doc/guides/managing-results/optimize-search-results/handling-natural-languages-nlp/how-to/customize-plurals-and-other-declensions/).
        
        If the entry already exists in Algolia's standard dictionary, you can override its behavior by adding it to the custom dictionary and setting its `state` to `disabled`.
      items:
        type: string
    decomposition:
      type: array
      description: For compound entries, governs the behavior of the `word` parameter.
      items:
        type: string
    state:
      $ref: '../../../../common/enums.yml#/dictionaryEntryState'
