method:
  get:
    x-helper: true
    tags:
      - Api Keys
    operationId: generateSecuredApiKey
    summary: Generate a secured API key without any calls to Algolia's servers.
    description:
      Generate a secured API key without any calls to Algolia's servers.

      When you need to restrict the scope of an API key, generate a secured API key on your server, without any calls to Algolia.
      You can't generate secured API keys from your Admin API key or from other secured API keys.
      When you generate a secured API key, you can define several restrictions, such as how long the key is valid for and which indexes it can access. The more restrictions you set, the longer the key will be. If the key is longer than 500 characters, you may have problems using it on some networks.
      If you want to limit the number of requests that can be made with a secured API key, you must also rate-limit the key that you use to generate it. You can create a rate-limited key in the Algolia dashboard or use the Add API key or Update API key methods of an API client.
    parameters:
      - in: query
        name: apiKey
        description: The search-only API key that the secured API key will inherit its restrictions from.
        required: true
        schema:
          type: string
      - in: query
        name: restrictions
        description: The options to add to the secured API key.
        required: true
        schema:
          $ref: '#/securedAPIKeyRestrictions'
    responses:
      '200':
        description: OK
        content:
          application/json:
            schema:
              type: string
      '400':
        $ref: '../../common/responses/IndexNotFound.yml'

securedAPIKeyRestrictions:
  type: object
  additionalProperties: false
  properties:
    searchParams:
      $ref: '../../common/schemas/SearchParams.yml#/searchParamsObject'
    filters:
      type: string
      description: >
        Filters that apply to every search made with the secured API key. You can add extra filters at search time with the filters query parameter.

        For example, if you set the filter group:admin on your generated API key, and you add groups:press OR groups:visitors with the filters query parameter, your final search filter is equivalent to groups:admin AND (groups:press OR groups:visitors).
    validUntil:
      type: number
      format: duration
      description: Unix timestamp used to set the expiration date of the API key.
    restrictIndices:
      type: array
      items:
        type: string
      description: Index names that can be queried.
    restrictSources:
      type: string
      description: >
        IPv4 network allowed to use the generated key. Use this to protect against API key leaking and reuse.

        You can only provide a single source, but you can specify a range of IPs (for example, 192.168.1.0/24).
    userToken:
      type: string
      description: >
        Unique user IP address.

        This can be useful when you want to impose a rate limit on specific users. By default, rate limits are set based on the IP address. This can become an issue when several users search from the same IP address. To avoid this, you can set a unique userToken for each user when generating their API key. This lets you restrict each user to a maximum number of API calls per hour, even if they share their IP with another user.
        Specifying the userToken in a secured API key is also a good security practice as it ensures users don't change it. Many features like Analytics, Personalization, and Dynamic Re-ranking rely on the authenticity of user identifiers. Setting the userToken at the API key level ensures that downstream services work as expected and prevents abuse.
