searchParams:
  oneOf:
    - $ref: '#/searchParamsString'
    - $ref: '#/searchParamsObject'

searchParamsObject:
  title: Search parameters as object
  description: Each parameter value, including the `query` must not be larger than 512 bytes.
  allOf:
    - $ref: '#/baseSearchParams'
    - $ref: '../../common/schemas/IndexSettings.yml#/indexSettingsAsSearchParams'

baseSearchParams:
  allOf:
    - $ref: '#/searchParamsQuery'
    - $ref: '#/baseSearchParamsWithoutQuery'

searchParamsQuery:
  type: object
  additionalProperties: false
  properties:
    query:
      $ref: '#/query'

baseSearchParamsWithoutQuery:
  type: object
  additionalProperties: false
  properties:
    similarQuery:
      type: string
      description: |
        Keywords to be used instead of the search query to conduct a more broader search.

        Using the `similarQuery` parameter changes other settings:

        - `queryType` is set to `prefixNone`.
        - `removeStopWords` is set to true.
        - `words` is set as the first ranking criterion.
        - All remaining words are treated as `optionalWords`.

        Since the `similarQuery` is supposed to do a broad search, they usually return many results.
        Combine it with `filters` to narrow down the list of results.
      default: ''
      example: 'comedy drama crime Macy Buscemi'
      x-categories:
        - Search
    filters:
      $ref: '#/filters'
    facetFilters:
      $ref: '#/facetFilters'
    optionalFilters:
      $ref: '#/optionalFilters'
    numericFilters:
      $ref: '#/numericFilters'
    tagFilters:
      $ref: '#/tagFilters'
    sumOrFiltersScores:
      type: boolean
      description: |
        Whether to sum all filter scores.

        If true, all filter scores are summed.
        Otherwise, the maximum filter score is kept.
        For more information, see [filter scores](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/in-depth/filter-scoring/#accumulating-scores-with-sumorfiltersscores).
      default: false
      x-categories:
        - Filtering
    restrictSearchableAttributes:
      type: array
      items:
        type: string
      example: [title, author]
      description: |
        Restricts a search to a subset of your searchable attributes.
        Attribute names are case-sensitive.
      default: []
      x-categories:
        - Filtering
    facets:
      type: array
      items:
        type: string
      description: |
        Facets for which to retrieve facet values that match the search criteria and the number of matching facet values.

        To retrieve all facets, use the wildcard character `*`.
        For more information, see [facets](https://www.algolia.com/doc/guides/managing-results/refine-results/faceting/#contextual-facet-values-and-counts).
      default: []
      example: ['*']
      x-categories:
        - Faceting
    facetingAfterDistinct:
      type: boolean
      description: |
        Whether faceting should be applied after deduplication with `distinct`.

        This leads to accurate facet counts when using faceting in combination with `distinct`.
        It's usually better to use `afterDistinct` modifiers in the `attributesForFaceting` setting,
        as `facetingAfterDistinct` only computes correct facet counts if all records have the same facet values for the `attributeForDistinct`.
      default: false
      x-categories:
        - Faceting
    page:
      $ref: '#/page'
    offset:
      type: integer
      description: Position of the first hit to retrieve.
      x-categories:
        - Pagination
    length:
      type: integer
      description: Number of hits to retrieve (used in combination with `offset`).
      minimum: 1
      maximum: 1000
      x-categories:
        - Pagination
    aroundLatLng:
      $ref: '#/aroundLatLng'
    aroundLatLngViaIP:
      $ref: '#/aroundLatLngViaIP'
    aroundRadius:
      $ref: '#/aroundRadius'
    aroundPrecision:
      $ref: '#/aroundPrecision'
    minimumAroundRadius:
      type: integer
      description: Minimum radius (in meters) for a search around a location when `aroundRadius` isn't set.
      minimum: 1
      x-categories:
        - Geo-Search
    insideBoundingBox:
      $ref: '#/insideBoundingBox'
    insidePolygon:
      $ref: '#/insidePolygon'
    naturalLanguages:
      type: array
      items:
        $ref: './IndexSettings.yml#/supportedLanguage'
      description: |
        ISO language codes that adjust settings that are useful for processing natural language queries (as opposed to keyword searches):

        - Sets `removeStopWords` and `ignorePlurals` to the list of provided languages.
        - Sets `removeWordsIfNoResults` to `allOptional`.
        - Adds a `natural_language` attribute to `ruleContexts` and `analyticsTags`.
      default: []
      x-categories:
        - Languages
    ruleContexts:
      type: array
      items:
        type: string
      description: |
        Assigns a rule context to the search query.

        [Rule contexts](https://www.algolia.com/doc/guides/managing-results/rules/rules-overview/how-to/customize-search-results-by-platform/#whats-a-context) are strings that you can use to trigger matching rules.
      default: []
      example: [mobile]
      x-categories:
        - Rules
    personalizationImpact:
      type: integer
      description: |
        Impact that Personalization should have on this search.

        The higher this value is, the more Personalization determines the ranking compared to other factors.
        For more information, see [Understanding Personalization impact](https://www.algolia.com/doc/guides/personalization/personalizing-results/in-depth/configuring-personalization/#understanding-personalization-impact).
      default: 100
      minimum: 0
      maximum: 100
      x-categories:
        - Personalization
    userToken:
      $ref: '#/userToken'
    getRankingInfo:
      type: boolean
      description: Whether the search response should include detailed ranking information.
      default: false
      x-categories:
        - Advanced
    synonyms:
      type: boolean
      description: Whether to take into account an index's synonyms for this search.
      default: true
      x-categories:
        - Advanced
    clickAnalytics:
      type: boolean
      description: |
        Whether to include a `queryID` attribute in the response.

        The query ID is a unique identifier for a search query and is required for tracking [click and conversion events](https://www.algolia.com/guides/sending-events/getting-started/).
      default: false
      x-categories:
        - Analytics
    analytics:
      type: boolean
      description: Whether this search will be included in Analytics.
      default: true
      x-categories:
        - Analytics
    analyticsTags:
      type: array
      items:
        type: string
      description: Tags to apply to the query for [segmenting analytics data](https://www.algolia.com/doc/guides/search-analytics/guides/segments/).
      default: []
      x-categories:
        - Analytics
    percentileComputation:
      type: boolean
      description: Whether to include this search when calculating processing-time percentiles.
      default: true
      x-categories:
        - Advanced
    enableABTest:
      type: boolean
      description: Whether to enable A/B testing for this search.
      default: true
      x-categories:
        - Advanced

searchParamsString:
  type: object
  title: Search parameters as query string.
  description: Search parameters as query string.
  additionalProperties: false
  x-discriminator-fields:
    - params
  properties:
    params:
      $ref: '#/paramsAsString'

paramsAsString:
  description: Search parameters as a URL-encoded query string.
  example: 'hitsPerPage=2&getRankingInfo=1'
  type: string
  default: ''

userToken:
  type: string
  description: |
    Unique pseudonymous or anonymous user identifier.

    This helps with analytics and click and conversion events.
    For more information, see [user token](https://www.algolia.com/doc/guides/sending-events/concepts/usertoken/).
  example: test-user-123
  x-categories:
    - Personalization

query:
  type: string
  description: Search query.
  default: ''
  x-categories:
    - Search

page:
  type: integer
  description: Page of search results to retrieve.
  default: 0
  minimum: 0
  x-categories:
    - Pagination

aroundRadius:
  description: |
    Maximum radius for a search around a central location.

    This parameter works in combination with the `aroundLatLng` and `aroundLatLngViaIP` parameters.
    By default, the search radius is determined automatically from the density of hits around the central location.
    The search radius is small if there are many hits close to the central coordinates.
  oneOf:
    - type: integer
      minimum: 1
      description: Maximum search radius around a central location in meters.
    - $ref: '#/aroundRadiusAll'
  x-categories:
    - Geo-Search

aroundPrecision:
  description: |
    Precision of a coordinate-based search in meters to group results with similar distances.

    The Geo ranking criterion considers all matches within the same range of distances to be equal.
  oneOf:
    - type: integer
      default: 10
      description: |
        Distance in meters to group results by similar distances.

        For example, if you set `aroundPrecision` to 100, records wihin 100 meters to the central coordinate are considered to have the same distance,
        as are records between 100 and 199 meters.
    - $ref: '#/aroundPrecisionFromValue'
  x-categories:
    - Geo-Search

aroundPrecisionFromValue:
  title: range objects
  type: array
  items:
    title: range
    type: object
    description: Range object with lower and upper values in meters to define custom ranges.
    properties:
      from:
        type: integer
        description: Lower boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal.
        example: 20
      value:
        type: integer
        description: Upper boundary of a range in meters. The Geo ranking criterion considers all records within the range to be equal.

aroundRadiusAll:
  title: all
  type: string
  description: Return all records with a valid `_geoloc` attribute. Don't filter by distance.
  enum: [all]

aroundLatLng:
  type: string
  description: |
    Coordinates for the center of a circle, expressed as a comma-separated string of latitude and longitude.

    Only records included within circle around this central location are included in the results.
    The radius of the circle is determined by the `aroundRadius` and `minimumAroundRadius` settings.
    This parameter is ignored if you also specify `insidePolygon` or `insideBoundingBox`.
  example: '40.71,-74.01'
  default: ''
  x-categories:
    - Geo-Search

aroundLatLngViaIP:
  type: boolean
  description: Whether to obtain the coordinates from the request's IP address.
  default: false
  x-categories:
    - Geo-Search

insideBoundingBox:
  type: array
  items:
    type: array
    minItems: 4
    maxItems: 4
    items:
      type: number
      format: double
  description: |
    Coordinates for a rectangular area in which to search.

    Each bounding box is defined by the two opposite points of its diagonal, and expressed as latitude and longitude pair:
    `[p1 lat, p1 long, p2 lat, p2 long]`.
    Provide multiple bounding boxes as nested arrays.
    For more information, see [rectangular area](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).
  example:
    - [47.3165, 4.9665, 47.3424, 5.0201]
    - [40.9234, 2.1185, 38.6430, 1.9916]
  x-categories:
    - Geo-Search

insidePolygon:
  type: array
  items:
    type: array
    minItems: 6
    maxItems: 20000
    items:
      type: number
      format: double
  description: |
    Coordinates of a polygon in which to search.

    Polygons are defined by 3 to 10,000 points. Each point is represented by its latitude and longitude.
    Provide multiple polygons as nested arrays.
    For more information, see [filtering inside polygons](https://www.algolia.com/doc/guides/managing-results/refine-results/geolocation/#filtering-inside-rectangular-or-polygonal-areas).
    This parameter is ignored if you also specify `insideBoundingBox`.
  example:
    - [47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9]
    - [40.9234, 2.1185, 38.6430, 1.9916, 39.2587, 2.0104]
  x-categories:
    - Geo-Search

filters:
  type: string
  description: |
    Filter expression to only include items that match the filter criteria in the response.

    You can use these filter expressions:

    - **Numeric filters.** `<facet> <op> <number>`, where `<op>` is one of `<`, `<=`, `=`, `!=`, `>`, `>=`.
    - **Ranges.** `<facet>:<lower> TO <upper>` where `<lower>` and `<upper>` are the lower and upper limits of the range (inclusive).
    - **Facet filters.** `<facet>:<value>` where `<facet>` is a facet attribute (case-sensitive) and `<value>` a facet value.
    - **Tag filters.** `_tags:<value>` or just `<value>` (case-sensitive).
    - **Boolean filters.** `<facet>: true | false`.

    You can combine filters with `AND`, `OR`, and `NOT` operators with the following restrictions:

    - You can only combine filters of the same type with `OR`.
      **Not supported:** `facet:value OR num > 3`.
    - You can't use `NOT` with combinations of filters.
      **Not supported:** `NOT(facet:value OR facet:value)`
    - You can't combine conjunctions (`AND`) with `OR`.
      **Not supported:** `facet:value OR (facet:value AND facet:value)`

    Use quotes around your filters, if the facet attribute name or facet value has spaces, keywords (`OR`, `AND`, `NOT`), or quotes.
    If a facet attribute is an array, the filter matches if it matches at least one element of the array.

    For more information, see [Filters](https://www.algolia.com/doc/guides/managing-results/refine-results/filtering/).
  example: '(category:Book OR category:Ebook) AND _tags:published'
  x-categories:
    - Filtering

facetFilters:
  description: |
    Filter the search by facet values, so that only records with the same facet values are retrieved.

    **Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**

    - `[filter1, filter2]` is interpreted as `filter1 AND filter2`.
    - `[[filter1, filter2], filter3]` is interpreted as `filter1 OR filter2 AND filter3`.
    - `facet:-value` is interpreted as `NOT facet:value`.

    While it's best to avoid attributes that start with a `-`, you can still filter them by escaping with a backslash:
    `facet:\-value`.
  example: [['category:Book', 'category:-Movie'], 'author:John Doe']
  oneOf:
    - type: array
      items:
        $ref: '#/facetFilters'
    - type: string
  x-categories:
    - Filtering

tagFilters:
  description: |
    Filter the search by values of the special `_tags` attribute.

    **Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**

    Different from regular facets, `_tags` can only be used for filtering (including or excluding records).
    You won't get a facet count.
    The same combination and escaping rules apply as for `facetFilters`.
  example: [['Book', 'Movie'], 'SciFi']
  oneOf:
    - type: array
      items:
        $ref: '#/tagFilters'
    - type: string
  x-categories:
    - Filtering

numericFilters:
  description: |
    Filter by numeric facets.

    **Prefer using the `filters` parameter, which supports all filter types and combinations with boolean operators.**

    You can use numeric comparison operators: `<`, `<=`, `=`, `!=`, `>`, `>=`. Comparsions are precise up to 3 decimals.
    You can also provide ranges: `facet:<lower> TO <upper>`. The range includes the lower and upper boundaries.
    The same combination rules apply as for `facetFilters`.
  example: [['inStock = 1', 'deliveryDate < 1441755506'], 'price < 1000']
  oneOf:
    - type: array
      items:
        $ref: '#/numericFilters'
    - type: string
  x-categories:
    - Filtering

optionalFilters:
  description: |
    Filters to promote or demote records in the search results.

    Optional filters work like facet filters, but they don't exclude records from the search results.
    Records that match the optional filter rank before records that don't match.
    If you're using a negative filter `facet:-value`, matching records rank after records that don't match.

    - Optional filters don't work on virtual replicas.
    - Optional filters are applied _after_ sort-by attributes.
    - Optional filters don't work with numeric attributes.

  example: ['category:Book', 'author:John Doe']
  oneOf:
    - type: array
      items:
        $ref: '#/optionalFilters'
    - type: string
  x-categories:
    - Filtering
