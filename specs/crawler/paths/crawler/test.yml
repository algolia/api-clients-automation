post:
  summary: Test an URL against the crawler's config
  description: |-
    Test an URL against the given Crawler's config and see what will be processed.
    You can also override parts of the configuration to try your changes before updating the configuration.
  parameters:
    - $ref: '#/components/parameters/CrawlerIdParameter'
  requestBody:
    content:
      application/json:
        schema:
          type: object
          additionalProperties: false
          properties:
            url:
              type: string
              description: The URL to test
              example: https://www.algolia.com/blog
            config:
              type: object
              description: |-
                A partial configuration object, that will be merged with the configuration saved.
                This allows to tests changes in a configuration before saving it.
                Note that it's not a deep merge, we will simply override all top level fields with the ones that
                you will pass.
          required:
            - url
  responses:
    '200':
      description: Several information to know how the Crawler processed the given URL
      content:
        application/json:
          schema:
            type: object
            additionalProperties: false
            properties:
              startDate:
                type: string
                #format: date-time
                description: The datetime when the test started
                example: '2019-05-21T09:04:33.742Z'
              endDate:
                type: string
                #format: date-time
                description: The datetime when the test ended
                example: '2019-05-21T09:04:33.923Z'
              logs:
                type: array
                description: The list of logs generated by `console.log()` in the recordExtractors
                items:
                  type: array
                  description: Each console.log() accepts many parameter. They will be returned in an array
                  items:
                    type: string
                    example: Processing url 'https://www.algolia.com/blog'
              records:
                type: array
                description: The list of records generated for the given URL
                items:
                  type: object
                  additionalProperties: false
                  properties:
                    indexName:
                      type: string
                      description: The name of the targeted index
                      example: testIndex
                    records:
                      type: array
                      description: The list of records generated by each action
                      items:
                        type: object
                        description: An actual Algolia record
                        example:
                          objectID: 'https://www.algolia.com/blog'
                          numberOfLinks: 2
                    recordsPerExtractor:
                      type: array
                      description: The record's parts generated by each extractor
                      items:
                        type: object
                        additionalProperties: false
                        properties:
                          index:
                            type: number
                            description: Index of the extractor
                          type:
                            type: string
                            description: Type of the extractor
                          records:
                            type: array
                            items:
                              type: object
                              description: The partial record generated by the extractor
                      example:
                        [
                          {
                            index: 0,
                            type: 'custom',
                            records:
                              [
                                {
                                  objectID: 'https://www.algolia.com/blog',
                                },
                              ],
                          },
                        ]
              links:
                type: array
                description: The list of links found on the page, that match the configuration (and would be processed)
                items:
                  type: string
                example:
                  - https://blog.algolia.com/challenging-migration-heroku-google-kubernetes-engine/
                  - https://blog.algolia.com/tale-two-engines-algolia-unity/
              externalData:
                type: object
                description: The External Data associated to the tested URL. External data are refreshed at each full reindex
                example:
                  dataSourceId1: { data1: 'val1', data2: 'val2' }
                  dataSourceId2: { data1: 'val1', data2: 'val2' }
              error:
                type: object
                additionalProperties: false
                properties:
                  code:
                    type: string
                    example: http_internal_server_error
                  message:
                    type: string
                    example: HTTP Internal Server Error (500)
                example: {}
            required:
              - startDate
              - endDate
              - logs
              - records
              - links
    '400':
      $ref: 'shared.yaml#/responses/400InvalidRequest'
    '401':
      $ref: 'shared.yaml#/responses/401MissingAuthorization'
    '403':
      $ref: '#/components/responses/403NoRightsOnCrawler'
