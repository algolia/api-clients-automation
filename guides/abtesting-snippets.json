{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Models.Abtesting;"
    },
    "addABTests": {
      "default": "var response = await client.AddABTestsAsync(\n  new AddABTestsRequest\n  {\n    EndAt = \"2022-12-31T00:00:00.000Z\",\n    Name = \"myABTest\",\n    Variants = new List<AddABTestsVariant>\n    {\n      new AddABTestsVariant(new AbTestsVariant { Index = \"AB_TEST_1\", TrafficPercentage = 30 }),\n      new AddABTestsVariant(new AbTestsVariant { Index = \"AB_TEST_2\", TrafficPercentage = 50 }),\n    },\n  }\n);"
    },
    "customDelete": {
      "default": "var response = await client.CustomDeleteAsync(\"test/minimal\");"
    },
    "customGet": {
      "default": "var response = await client.CustomGetAsync(\"test/minimal\");"
    },
    "customPost": {
      "default": "var response = await client.CustomPostAsync(\"test/minimal\");"
    },
    "customPut": {
      "default": "var response = await client.CustomPutAsync(\"test/minimal\");"
    },
    "deleteABTest": {
      "default": "var response = await client.DeleteABTestAsync(42);"
    },
    "getABTest": {
      "default": "var response = await client.GetABTestAsync(42);"
    },
    "listABTests": {
      "default": "var response = await client.ListABTestsAsync();"
    },
    "scheduleABTest": {
      "default": "var response = await client.ScheduleABTestAsync(\n  new ScheduleABTestsRequest\n  {\n    EndAt = \"2022-12-31T00:00:00.000Z\",\n    ScheduledAt = \"2022-11-31T00:00:00.000Z\",\n    Name = \"myABTest\",\n    Variants = new List<AddABTestsVariant>\n    {\n      new AddABTestsVariant(new AbTestsVariant { Index = \"AB_TEST_1\", TrafficPercentage = 30 }),\n      new AddABTestsVariant(new AbTestsVariant { Index = \"AB_TEST_2\", TrafficPercentage = 50 }),\n    },\n  }\n);"
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");"
    },
    "stopABTest": {
      "default": "var response = await client.StopABTestAsync(42);"
    },
    "init": {
      "default": "var client = new AbtestingClient(\n  new AbtestingConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")\n);"
    }
  },
  "dart": {},
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/abtesting\""
    },
    "addABTests": {
      "default": "response, err := client.AddABTests(client.NewApiAddABTestsRequest(\n\n  abtesting.NewEmptyAddABTestsRequest().SetEndAt(\"2022-12-31T00:00:00.000Z\").SetName(\"myABTest\").SetVariants(\n    []abtesting.AddABTestsVariant{*abtesting.AbTestsVariantAsAddABTestsVariant(\n      abtesting.NewEmptyAbTestsVariant().SetIndex(\"AB_TEST_1\").SetTrafficPercentage(30)), *abtesting.AbTestsVariantAsAddABTestsVariant(\n      abtesting.NewEmptyAbTestsVariant().SetIndex(\"AB_TEST_2\").SetTrafficPercentage(50))}),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customDelete": {
      "default": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customGet": {
      "default": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPost": {
      "default": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPut": {
      "default": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "deleteABTest": {
      "default": "response, err := client.DeleteABTest(client.NewApiDeleteABTestRequest(\n  42,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getABTest": {
      "default": "response, err := client.GetABTest(client.NewApiGetABTestRequest(\n  42,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "listABTests": {
      "default": "response, err := client.ListABTests(client.NewApiListABTestsRequest())\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "scheduleABTest": {
      "default": "response, err := client.ScheduleABTest(client.NewApiScheduleABTestRequest(\n\n  abtesting.NewEmptyScheduleABTestsRequest().SetEndAt(\"2022-12-31T00:00:00.000Z\").SetScheduledAt(\"2022-11-31T00:00:00.000Z\").SetName(\"myABTest\").SetVariants(\n    []abtesting.AddABTestsVariant{*abtesting.AbTestsVariantAsAddABTestsVariant(\n      abtesting.NewEmptyAbTestsVariant().SetIndex(\"AB_TEST_1\").SetTrafficPercentage(30)), *abtesting.AbTestsVariantAsAddABTestsVariant(\n      abtesting.NewEmptyAbTestsVariant().SetIndex(\"AB_TEST_2\").SetTrafficPercentage(50))}),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\",\n)\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "stopABTest": {
      "default": "response, err := client.StopABTest(client.NewApiStopABTestRequest(\n  42,\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "init": {
      "default": "client, err := abtesting.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", abtesting.US)\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.AbtestingClient;\nimport com.algolia.model.abtesting.*;"
    },
    "addABTests": {
      "default": "client.addABTests(\n  new AddABTestsRequest()\n    .setEndAt(\"2022-12-31T00:00:00.000Z\")\n    .setName(\"myABTest\")\n    .setVariants(\n      Arrays.asList(\n        new AbTestsVariant().setIndex(\"AB_TEST_1\").setTrafficPercentage(30),\n        new AbTestsVariant().setIndex(\"AB_TEST_2\").setTrafficPercentage(50)\n      )\n    )\n);"
    },
    "customDelete": {
      "default": "client.customDelete(\"test/minimal\");"
    },
    "customGet": {
      "default": "client.customGet(\"test/minimal\");"
    },
    "customPost": {
      "default": "client.customPost(\"test/minimal\");"
    },
    "customPut": {
      "default": "client.customPut(\"test/minimal\");"
    },
    "deleteABTest": {
      "default": "client.deleteABTest(42);"
    },
    "getABTest": {
      "default": "client.getABTest(42);"
    },
    "listABTests": {
      "default": "client.listABTests();"
    },
    "scheduleABTest": {
      "default": "client.scheduleABTest(\n  new ScheduleABTestsRequest()\n    .setEndAt(\"2022-12-31T00:00:00.000Z\")\n    .setScheduledAt(\"2022-11-31T00:00:00.000Z\")\n    .setName(\"myABTest\")\n    .setVariants(\n      Arrays.asList(\n        new AbTestsVariant().setIndex(\"AB_TEST_1\").setTrafficPercentage(30),\n        new AbTestsVariant().setIndex(\"AB_TEST_2\").setTrafficPercentage(50)\n      )\n    )\n);"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");"
    },
    "stopABTest": {
      "default": "client.stopABTest(42);"
    },
    "init": {
      "default": "AbtestingClient client = new AbtestingClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { abtestingClient } from '@algolia/client-abtesting';"
    },
    "addABTests": {
      "default": "const response = await client.addABTests({\n  endAt: '2022-12-31T00:00:00.000Z',\n  name: 'myABTest',\n  variants: [\n    { index: 'AB_TEST_1', trafficPercentage: 30 },\n    { index: 'AB_TEST_2', trafficPercentage: 50 },\n  ],\n});"
    },
    "customDelete": {
      "default": "const response = await client.customDelete({ path: 'test/minimal' });"
    },
    "customGet": {
      "default": "const response = await client.customGet({ path: 'test/minimal' });"
    },
    "customPost": {
      "default": "const response = await client.customPost({ path: 'test/minimal' });"
    },
    "customPut": {
      "default": "const response = await client.customPut({ path: 'test/minimal' });"
    },
    "deleteABTest": {
      "default": "const response = await client.deleteABTest({ id: 42 });"
    },
    "getABTest": {
      "default": "const response = await client.getABTest({ id: 42 });"
    },
    "listABTests": {
      "default": "const response = await client.listABTests();"
    },
    "scheduleABTest": {
      "default": "const response = await client.scheduleABTest({\n  endAt: '2022-12-31T00:00:00.000Z',\n  scheduledAt: '2022-11-31T00:00:00.000Z',\n  name: 'myABTest',\n  variants: [\n    { index: 'AB_TEST_1', trafficPercentage: 30 },\n    { index: 'AB_TEST_2', trafficPercentage: 50 },\n  ],\n});"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });"
    },
    "stopABTest": {
      "default": "const response = await client.stopABTest({ id: 42 });"
    },
    "init": {
      "default": "// Replace 'us' with your Algolia Application Region\nconst client = abtestingClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'us');"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.AbtestingClient"
    },
    "addABTests": {
      "default": "var response = client.addABTests(\n  addABTestsRequest = AddABTestsRequest(\n    endAt = \"2022-12-31T00:00:00.000Z\",\n    name = \"myABTest\",\n    variants = listOf(\n      AbTestsVariant(\n        index = \"AB_TEST_1\",\n        trafficPercentage = 30,\n      ),\n      AbTestsVariant(\n        index = \"AB_TEST_2\",\n        trafficPercentage = 50,\n      ),\n    ),\n  ),\n)"
    },
    "customDelete": {
      "default": "var response = client.customDelete(\n  path = \"test/minimal\",\n)"
    },
    "customGet": {
      "default": "var response = client.customGet(\n  path = \"test/minimal\",\n)"
    },
    "customPost": {
      "default": "var response = client.customPost(\n  path = \"test/minimal\",\n)"
    },
    "customPut": {
      "default": "var response = client.customPut(\n  path = \"test/minimal\",\n)"
    },
    "deleteABTest": {
      "default": "var response = client.deleteABTest(\n  id = 42,\n)"
    },
    "getABTest": {
      "default": "var response = client.getABTest(\n  id = 42,\n)"
    },
    "listABTests": {
      "default": "var response = client.listABTests()"
    },
    "scheduleABTest": {
      "default": "var response = client.scheduleABTest(\n  scheduleABTestsRequest = ScheduleABTestsRequest(\n    endAt = \"2022-12-31T00:00:00.000Z\",\n    scheduledAt = \"2022-11-31T00:00:00.000Z\",\n    name = \"myABTest\",\n    variants = listOf(\n      AbTestsVariant(\n        index = \"AB_TEST_1\",\n        trafficPercentage = 30,\n      ),\n      AbTestsVariant(\n        index = \"AB_TEST_2\",\n        trafficPercentage = 50,\n      ),\n    ),\n  ),\n)"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)"
    },
    "stopABTest": {
      "default": "var response = client.stopABTest(\n  id = 42,\n)"
    },
    "init": {
      "default": "val client = AbtestingClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\", region = \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\AbtestingClient;"
    },
    "addABTests": {
      "default": "$response = $client->addABTests(\n    ['endAt' => '2022-12-31T00:00:00.000Z',\n        'name' => 'myABTest',\n        'variants' => [\n            ['index' => 'AB_TEST_1',\n                'trafficPercentage' => 30,\n            ],\n\n            ['index' => 'AB_TEST_2',\n                'trafficPercentage' => 50,\n            ],\n        ],\n    ],\n);"
    },
    "customDelete": {
      "default": "$response = $client->customDelete(\n    'test/minimal',\n);"
    },
    "customGet": {
      "default": "$response = $client->customGet(\n    'test/minimal',\n);"
    },
    "customPost": {
      "default": "$response = $client->customPost(\n    'test/minimal',\n);"
    },
    "customPut": {
      "default": "$response = $client->customPut(\n    'test/minimal',\n);"
    },
    "deleteABTest": {
      "default": "$response = $client->deleteABTest(\n    42,\n);"
    },
    "getABTest": {
      "default": "$response = $client->getABTest(\n    42,\n);"
    },
    "listABTests": {
      "default": "$response = $client->listABTests();"
    },
    "scheduleABTest": {
      "default": "$response = $client->scheduleABTest(\n    ['endAt' => '2022-12-31T00:00:00.000Z',\n        'scheduledAt' => '2022-11-31T00:00:00.000Z',\n        'name' => 'myABTest',\n        'variants' => [\n            ['index' => 'AB_TEST_1',\n                'trafficPercentage' => 30,\n            ],\n\n            ['index' => 'AB_TEST_2',\n                'trafficPercentage' => 50,\n            ],\n        ],\n    ],\n);"
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);"
    },
    "stopABTest": {
      "default": "$response = $client->stopABTest(\n    42,\n);"
    },
    "init": {
      "default": "$client = AbtestingClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY', 'ALGOLIA_APPLICATION_REGION');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.abtesting.client import AbtestingClientSync"
    },
    "addABTests": {
      "default": "response = client.add_ab_tests(\n    add_ab_tests_request={\n        \"endAt\": \"2022-12-31T00:00:00.000Z\",\n        \"name\": \"myABTest\",\n        \"variants\": [\n            {\n                \"index\": \"AB_TEST_1\",\n                \"trafficPercentage\": 30,\n            },\n            {\n                \"index\": \"AB_TEST_2\",\n                \"trafficPercentage\": 50,\n            },\n        ],\n    },\n)"
    },
    "customDelete": {
      "default": "response = client.custom_delete(\n    path=\"test/minimal\",\n)"
    },
    "customGet": {
      "default": "response = client.custom_get(\n    path=\"test/minimal\",\n)"
    },
    "customPost": {
      "default": "response = client.custom_post(\n    path=\"test/minimal\",\n)"
    },
    "customPut": {
      "default": "response = client.custom_put(\n    path=\"test/minimal\",\n)"
    },
    "deleteABTest": {
      "default": "response = client.delete_ab_test(\n    id=42,\n)"
    },
    "getABTest": {
      "default": "response = client.get_ab_test(\n    id=42,\n)"
    },
    "listABTests": {
      "default": "response = client.list_ab_tests()"
    },
    "scheduleABTest": {
      "default": "response = client.schedule_ab_test(\n    schedule_ab_tests_request={\n        \"endAt\": \"2022-12-31T00:00:00.000Z\",\n        \"scheduledAt\": \"2022-11-31T00:00:00.000Z\",\n        \"name\": \"myABTest\",\n        \"variants\": [\n            {\n                \"index\": \"AB_TEST_1\",\n                \"trafficPercentage\": 30,\n            },\n            {\n                \"index\": \"AB_TEST_2\",\n                \"trafficPercentage\": 50,\n            },\n        ],\n    },\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)"
    },
    "stopABTest": {
      "default": "response = client.stop_ab_test(\n    id=42,\n)"
    },
    "init": {
      "default": "# In an asynchronous context, you can use AbtestingClient instead, which exposes the exact same methods.\nclient = AbtestingClientSync(\n    \"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\"\n)"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "addABTests": {
      "default": "response = client.add_ab_tests(\n  AddABTestsRequest.new(\n    end_at: \"2022-12-31T00:00:00.000Z\",\n    name: \"myABTest\",\n    variants: [\n      AbTestsVariant.new(index: \"AB_TEST_1\", traffic_percentage: 30),\n      AbTestsVariant.new(index: \"AB_TEST_2\", traffic_percentage: 50)\n    ]\n  )\n)"
    },
    "customDelete": {
      "default": "response = client.custom_delete(\"test/minimal\")"
    },
    "customGet": {
      "default": "response = client.custom_get(\"test/minimal\")"
    },
    "customPost": {
      "default": "response = client.custom_post(\"test/minimal\")"
    },
    "customPut": {
      "default": "response = client.custom_put(\"test/minimal\")"
    },
    "deleteABTest": {
      "default": "response = client.delete_ab_test(42)"
    },
    "getABTest": {
      "default": "response = client.get_ab_test(42)"
    },
    "listABTests": {
      "default": "response = client.list_ab_tests"
    },
    "scheduleABTest": {
      "default": "response = client.schedule_ab_test(\n  ScheduleABTestsRequest.new(\n    end_at: \"2022-12-31T00:00:00.000Z\",\n    scheduled_at: \"2022-11-31T00:00:00.000Z\",\n    name: \"myABTest\",\n    variants: [\n      AbTestsVariant.new(index: \"AB_TEST_1\", traffic_percentage: 30),\n      AbTestsVariant.new(index: \"AB_TEST_2\", traffic_percentage: 50)\n    ]\n  )\n)"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")"
    },
    "stopABTest": {
      "default": "response = client.stop_ab_test(42)"
    },
    "init": {
      "default": "client = Algolia::AbtestingClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\", \"ALGOLIA_APPLICATION_REGION\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.AbtestingClient"
    },
    "addABTests": {
      "default": "val response = client.addABTests(\n  addABTestsRequest = AddABTestsRequest(\n    endAt = \"2022-12-31T00:00:00.000Z\",\n    name = \"myABTest\",\n    variants = Seq(\n      AbTestsVariant(\n        index = \"AB_TEST_1\",\n        trafficPercentage = 30\n      ),\n      AbTestsVariant(\n        index = \"AB_TEST_2\",\n        trafficPercentage = 50\n      )\n    )\n  )\n)"
    },
    "customDelete": {
      "default": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customGet": {
      "default": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customPost": {
      "default": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customPut": {
      "default": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)"
    },
    "deleteABTest": {
      "default": "val response = client.deleteABTest(\n  id = 42\n)"
    },
    "getABTest": {
      "default": "val response = client.getABTest(\n  id = 42\n)"
    },
    "listABTests": {
      "default": "val response = client.listABTests(\n)"
    },
    "scheduleABTest": {
      "default": "val response = client.scheduleABTest(\n  scheduleABTestsRequest = ScheduleABTestsRequest(\n    endAt = \"2022-12-31T00:00:00.000Z\",\n    scheduledAt = \"2022-11-31T00:00:00.000Z\",\n    name = \"myABTest\",\n    variants = Seq(\n      AbTestsVariant(\n        index = \"AB_TEST_1\",\n        trafficPercentage = 30\n      ),\n      AbTestsVariant(\n        index = \"AB_TEST_2\",\n        trafficPercentage = 50\n      )\n    )\n  )\n)"
    },
    "stopABTest": {
      "default": "val response = client.stopABTest(\n  id = 42\n)"
    },
    "init": {
      "default": "val client = AbtestingClient(\n  appId = \"ALGOLIA_APPLICATION_ID\",\n  apiKey = \"ALGOLIA_API_KEY\",\n  region = Option(\"ALGOLIA_APPLICATION_REGION\")\n)"
    }
  },
  "swift": {
    "import": {
      "default": "import Abtesting"
    },
    "addABTests": {
      "default": "let response = try await client.addABTests(addABTestsRequest: AddABTestsRequest(\n    name: \"myABTest\",\n    variants: [\n        AddABTestsVariant.abTestsVariant(AbTestsVariant(index: \"AB_TEST_1\", trafficPercentage: 30)),\n        AddABTestsVariant.abTestsVariant(AbTestsVariant(index: \"AB_TEST_2\", trafficPercentage: 50)),\n    ],\n    endAt: \"2022-12-31T00:00:00.000Z\"\n))"
    },
    "customDelete": {
      "default": "let response = try await client.customDelete(path: \"test/minimal\")"
    },
    "customGet": {
      "default": "let response = try await client.customGet(path: \"test/minimal\")"
    },
    "customPost": {
      "default": "let response = try await client.customPost(path: \"test/minimal\")"
    },
    "customPut": {
      "default": "let response = try await client.customPut(path: \"test/minimal\")"
    },
    "deleteABTest": {
      "default": "let response = try await client.deleteABTest(id: 42)"
    },
    "getABTest": {
      "default": "let response = try await client.getABTest(id: 42)"
    },
    "listABTests": {
      "default": "let response = try await client.listABTests()"
    },
    "scheduleABTest": {
      "default": "let response = try await client.scheduleABTest(scheduleABTestsRequest: ScheduleABTestsRequest(\n    name: \"myABTest\",\n    variants: [\n        AddABTestsVariant.abTestsVariant(AbTestsVariant(index: \"AB_TEST_1\", trafficPercentage: 30)),\n        AddABTestsVariant.abTestsVariant(AbTestsVariant(index: \"AB_TEST_2\", trafficPercentage: 50)),\n    ],\n    scheduledAt: \"2022-11-31T00:00:00.000Z\",\n    endAt: \"2022-12-31T00:00:00.000Z\"\n))"
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")"
    },
    "stopABTest": {
      "default": "let response = try await client.stopABTest(id: 42)"
    },
    "init": {
      "default": "let client = try AbtestingClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\", region: .us)"
    }
  }
}