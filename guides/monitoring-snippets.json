{
  "csharp": {
    "import": {
      "default": "using Algolia.Search.Clients;\nusing Algolia.Search.Models.Monitoring;"
    },
    "customDelete": {
      "default": "var response = await client.CustomDeleteAsync(\"test/minimal\");"
    },
    "customGet": {
      "default": "var response = await client.CustomGetAsync(\"test/minimal\");"
    },
    "customPost": {
      "default": "var response = await client.CustomPostAsync(\"test/minimal\");"
    },
    "customPut": {
      "default": "var response = await client.CustomPutAsync(\"test/minimal\");"
    },
    "getClusterIncidents": {
      "default": "var response = await client.GetClusterIncidentsAsync(\"c1-de\");"
    },
    "getClusterStatus": {
      "default": "var response = await client.GetClusterStatusAsync(\"c1-de\");"
    },
    "getIncidents": {
      "default": "var response = await client.GetIncidentsAsync();"
    },
    "getIndexingTime": {
      "default": "var response = await client.GetIndexingTimeAsync(\"c1-de\");"
    },
    "getLatency": {
      "default": "var response = await client.GetLatencyAsync(\"c1-de\");"
    },
    "getMetrics": {
      "default": "var response = await client.GetMetricsAsync(\n  Enum.Parse<Metric>(\"AvgBuildTime\"),\n  Enum.Parse<Period>(\"Minute\")\n);"
    },
    "getReachability": {
      "default": "var response = await client.GetReachabilityAsync(\"c1-de\");"
    },
    "getServers": {
      "default": "var response = await client.GetServersAsync();"
    },
    "getStatus": {
      "default": "var response = await client.GetStatusAsync();"
    },
    "setClientApiKey": {
      "default": "client.SetClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "var client = new MonitoringClient(\n  new MonitoringConfig(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\n);"
    }
  },
  "dart": {},
  "go": {
    "import": {
      "default": "import \"github.com/algolia/algoliasearch-client-go/v4/algolia/monitoring\""
    },
    "customDelete": {
      "default": "response, err := client.CustomDelete(client.NewApiCustomDeleteRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customGet": {
      "default": "response, err := client.CustomGet(client.NewApiCustomGetRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPost": {
      "default": "response, err := client.CustomPost(client.NewApiCustomPostRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "customPut": {
      "default": "response, err := client.CustomPut(client.NewApiCustomPutRequest(\n  \"test/minimal\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getClusterIncidents": {
      "default": "response, err := client.GetClusterIncidents(client.NewApiGetClusterIncidentsRequest(\n  \"c1-de\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getClusterStatus": {
      "default": "response, err := client.GetClusterStatus(client.NewApiGetClusterStatusRequest(\n  \"c1-de\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getIncidents": {
      "default": "response, err := client.GetIncidents()\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getIndexingTime": {
      "default": "response, err := client.GetIndexingTime(client.NewApiGetIndexingTimeRequest(\n  \"c1-de\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getLatency": {
      "default": "response, err := client.GetLatency(client.NewApiGetLatencyRequest(\n  \"c1-de\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getMetrics": {
      "default": "response, err := client.GetMetrics(client.NewApiGetMetricsRequest(\n  monitoring.Metric(\"avg_build_time\"), monitoring.Period(\"minute\"),\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getReachability": {
      "default": "response, err := client.GetReachability(client.NewApiGetReachabilityRequest(\n  \"c1-de\",\n))\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getServers": {
      "default": "response, err := client.GetServers()\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "getStatus": {
      "default": "response, err := client.GetStatus()\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "setClientApiKey": {
      "default": "err = client.SetClientApiKey(\n  \"updated-api-key\",\n)\nif err != nil {\n  // handle the eventual error\n  panic(err)\n}"
    },
    "init": {
      "default": "client, err := monitoring.NewClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")\nif err != nil {\n  // The client can fail to initialize if you pass an invalid parameter.\n  panic(err)\n}"
    }
  },
  "java": {
    "import": {
      "default": "import com.algolia.api.MonitoringClient;\nimport com.algolia.model.monitoring.*;"
    },
    "customDelete": {
      "default": "client.customDelete(\"test/minimal\");"
    },
    "customGet": {
      "default": "client.customGet(\"test/minimal\");"
    },
    "customPost": {
      "default": "client.customPost(\"test/minimal\");"
    },
    "customPut": {
      "default": "client.customPut(\"test/minimal\");"
    },
    "getClusterIncidents": {
      "default": "client.getClusterIncidents(\"c1-de\");"
    },
    "getClusterStatus": {
      "default": "client.getClusterStatus(\"c1-de\");"
    },
    "getIncidents": {
      "default": "client.getIncidents();"
    },
    "getIndexingTime": {
      "default": "client.getIndexingTime(\"c1-de\");"
    },
    "getLatency": {
      "default": "client.getLatency(\"c1-de\");"
    },
    "getMetrics": {
      "default": "client.getMetrics(Metric.AVG_BUILD_TIME, Period.MINUTE);"
    },
    "getReachability": {
      "default": "client.getReachability(\"c1-de\");"
    },
    "getServers": {
      "default": "client.getServers();"
    },
    "getStatus": {
      "default": "client.getStatus();"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\"updated-api-key\");"
    },
    "init": {
      "default": "MonitoringClient client = new MonitoringClient(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\");"
    }
  },
  "javascript": {
    "import": {
      "default": "import { monitoringClient } from '@algolia/monitoring';"
    },
    "customDelete": {
      "default": "const response = await client.customDelete({ path: 'test/minimal' });"
    },
    "customGet": {
      "default": "const response = await client.customGet({ path: 'test/minimal' });"
    },
    "customPost": {
      "default": "const response = await client.customPost({ path: 'test/minimal' });"
    },
    "customPut": {
      "default": "const response = await client.customPut({ path: 'test/minimal' });"
    },
    "getClusterIncidents": {
      "default": "const response = await client.getClusterIncidents({ clusters: 'c1-de' });"
    },
    "getClusterStatus": {
      "default": "const response = await client.getClusterStatus({ clusters: 'c1-de' });"
    },
    "getIncidents": {
      "default": "const response = await client.getIncidents();"
    },
    "getIndexingTime": {
      "default": "const response = await client.getIndexingTime({ clusters: 'c1-de' });"
    },
    "getLatency": {
      "default": "const response = await client.getLatency({ clusters: 'c1-de' });"
    },
    "getMetrics": {
      "default": "const response = await client.getMetrics({ metric: 'avg_build_time', period: 'minute' });"
    },
    "getReachability": {
      "default": "const response = await client.getReachability({ clusters: 'c1-de' });"
    },
    "getServers": {
      "default": "const response = await client.getServers();"
    },
    "getStatus": {
      "default": "const response = await client.getStatus();"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey({ apiKey: 'updated-api-key' });"
    },
    "init": {
      "default": "//\nconst client = monitoringClient('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');"
    }
  },
  "kotlin": {
    "import": {
      "default": "import com.algolia.client.api.MonitoringClient"
    },
    "customDelete": {
      "default": "var response = client.customDelete(\n  path = \"test/minimal\",\n)"
    },
    "customGet": {
      "default": "var response = client.customGet(\n  path = \"test/minimal\",\n)"
    },
    "customPost": {
      "default": "var response = client.customPost(\n  path = \"test/minimal\",\n)"
    },
    "customPut": {
      "default": "var response = client.customPut(\n  path = \"test/minimal\",\n)"
    },
    "getClusterIncidents": {
      "default": "var response = client.getClusterIncidents(\n  clusters = \"c1-de\",\n)"
    },
    "getClusterStatus": {
      "default": "var response = client.getClusterStatus(\n  clusters = \"c1-de\",\n)"
    },
    "getIncidents": {
      "default": "var response = client.getIncidents()"
    },
    "getIndexingTime": {
      "default": "var response = client.getIndexingTime(\n  clusters = \"c1-de\",\n)"
    },
    "getLatency": {
      "default": "var response = client.getLatency(\n  clusters = \"c1-de\",\n)"
    },
    "getMetrics": {
      "default": "var response = client.getMetrics(\n  metric = Metric.entries.first { it.value == \"avg_build_time\" },\n  period = Period.entries.first { it.value == \"minute\" },\n)"
    },
    "getReachability": {
      "default": "var response = client.getReachability(\n  clusters = \"c1-de\",\n)"
    },
    "getServers": {
      "default": "var response = client.getServers()"
    },
    "getStatus": {
      "default": "var response = client.getStatus()"
    },
    "setClientApiKey": {
      "default": "client.setClientApiKey(\n  apiKey = \"updated-api-key\",\n)"
    },
    "init": {
      "default": "val client = MonitoringClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "php": {
    "import": {
      "default": "use Algolia\\AlgoliaSearch\\Api\\MonitoringClient;"
    },
    "customDelete": {
      "default": "$response = $client->customDelete(\n    'test/minimal',\n);"
    },
    "customGet": {
      "default": "$response = $client->customGet(\n    'test/minimal',\n);"
    },
    "customPost": {
      "default": "$response = $client->customPost(\n    'test/minimal',\n);"
    },
    "customPut": {
      "default": "$response = $client->customPut(\n    'test/minimal',\n);"
    },
    "getClusterIncidents": {
      "default": "$response = $client->getClusterIncidents(\n    'c1-de',\n);"
    },
    "getClusterStatus": {
      "default": "$response = $client->getClusterStatus(\n    'c1-de',\n);"
    },
    "getIncidents": {
      "default": "$response = $client->getIncidents();"
    },
    "getIndexingTime": {
      "default": "$response = $client->getIndexingTime(\n    'c1-de',\n);"
    },
    "getLatency": {
      "default": "$response = $client->getLatency(\n    'c1-de',\n);"
    },
    "getMetrics": {
      "default": "$response = $client->getMetrics(\n    'avg_build_time',\n    'minute',\n);"
    },
    "getReachability": {
      "default": "$response = $client->getReachability(\n    'c1-de',\n);"
    },
    "getServers": {
      "default": "$response = $client->getServers();"
    },
    "getStatus": {
      "default": "$response = $client->getStatus();"
    },
    "setClientApiKey": {
      "default": "$client->setClientApiKey(\n    'updated-api-key',\n);"
    },
    "init": {
      "default": "$client = MonitoringClient::create('ALGOLIA_APPLICATION_ID', 'ALGOLIA_API_KEY');"
    }
  },
  "python": {
    "import": {
      "default": "from algoliasearch.monitoring.client import MonitoringClientSync"
    },
    "customDelete": {
      "default": "response = client.custom_delete(\n    path=\"test/minimal\",\n)"
    },
    "customGet": {
      "default": "response = client.custom_get(\n    path=\"test/minimal\",\n)"
    },
    "customPost": {
      "default": "response = client.custom_post(\n    path=\"test/minimal\",\n)"
    },
    "customPut": {
      "default": "response = client.custom_put(\n    path=\"test/minimal\",\n)"
    },
    "getClusterIncidents": {
      "default": "response = client.get_cluster_incidents(\n    clusters=\"c1-de\",\n)"
    },
    "getClusterStatus": {
      "default": "response = client.get_cluster_status(\n    clusters=\"c1-de\",\n)"
    },
    "getIncidents": {
      "default": "response = client.get_incidents()"
    },
    "getIndexingTime": {
      "default": "response = client.get_indexing_time(\n    clusters=\"c1-de\",\n)"
    },
    "getLatency": {
      "default": "response = client.get_latency(\n    clusters=\"c1-de\",\n)"
    },
    "getMetrics": {
      "default": "response = client.get_metrics(\n    metric=\"avg_build_time\",\n    period=\"minute\",\n)"
    },
    "getReachability": {
      "default": "response = client.get_reachability(\n    clusters=\"c1-de\",\n)"
    },
    "getServers": {
      "default": "response = client.get_servers()"
    },
    "getStatus": {
      "default": "response = client.get_status()"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\n    api_key=\"updated-api-key\",\n)"
    },
    "init": {
      "default": "# In an asynchronous context, you can use MonitoringClient instead, which exposes the exact same methods.\nclient = MonitoringClientSync(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "ruby": {
    "import": {
      "default": "require \"algolia\""
    },
    "customDelete": {
      "default": "response = client.custom_delete(\"test/minimal\")"
    },
    "customGet": {
      "default": "response = client.custom_get(\"test/minimal\")"
    },
    "customPost": {
      "default": "response = client.custom_post(\"test/minimal\")"
    },
    "customPut": {
      "default": "response = client.custom_put(\"test/minimal\")"
    },
    "getClusterIncidents": {
      "default": "response = client.get_cluster_incidents(\"c1-de\")"
    },
    "getClusterStatus": {
      "default": "response = client.get_cluster_status(\"c1-de\")"
    },
    "getIncidents": {
      "default": "response = client.get_incidents"
    },
    "getIndexingTime": {
      "default": "response = client.get_indexing_time(\"c1-de\")"
    },
    "getLatency": {
      "default": "response = client.get_latency(\"c1-de\")"
    },
    "getMetrics": {
      "default": "response = client.get_metrics(\"avg_build_time\", \"minute\")"
    },
    "getReachability": {
      "default": "response = client.get_reachability(\"c1-de\")"
    },
    "getServers": {
      "default": "response = client.get_servers"
    },
    "getStatus": {
      "default": "response = client.get_status"
    },
    "setClientApiKey": {
      "default": "client.set_client_api_key(\"updated-api-key\")"
    },
    "init": {
      "default": "client = Algolia::MonitoringClient.create(\"ALGOLIA_APPLICATION_ID\", \"ALGOLIA_API_KEY\")"
    }
  },
  "scala": {
    "import": {
      "default": "import algoliasearch.api.MonitoringClient"
    },
    "customDelete": {
      "default": "val response = client.customDelete[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customGet": {
      "default": "val response = client.customGet[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customPost": {
      "default": "val response = client.customPost[JObject](\n  path = \"test/minimal\"\n)"
    },
    "customPut": {
      "default": "val response = client.customPut[JObject](\n  path = \"test/minimal\"\n)"
    },
    "getClusterIncidents": {
      "default": "val response = client.getClusterIncidents(\n  clusters = \"c1-de\"\n)"
    },
    "getClusterStatus": {
      "default": "val response = client.getClusterStatus(\n  clusters = \"c1-de\"\n)"
    },
    "getIncidents": {
      "default": "val response = client.getIncidents(\n)"
    },
    "getIndexingTime": {
      "default": "val response = client.getIndexingTime(\n  clusters = \"c1-de\"\n)"
    },
    "getLatency": {
      "default": "val response = client.getLatency(\n  clusters = \"c1-de\"\n)"
    },
    "getMetrics": {
      "default": "val response = client.getMetrics(\n  metric = Metric.withName(\"avg_build_time\"),\n  period = Period.withName(\"minute\")\n)"
    },
    "getReachability": {
      "default": "val response = client.getReachability(\n  clusters = \"c1-de\"\n)"
    },
    "getServers": {
      "default": "val response = client.getServers(\n)"
    },
    "getStatus": {
      "default": "val response = client.getStatus(\n)"
    },
    "init": {
      "default": "val client = MonitoringClient(appId = \"ALGOLIA_APPLICATION_ID\", apiKey = \"ALGOLIA_API_KEY\")"
    }
  },
  "swift": {
    "import": {
      "default": "import Monitoring"
    },
    "customDelete": {
      "default": "let response = try await client.customDelete(path: \"test/minimal\")"
    },
    "customGet": {
      "default": "let response = try await client.customGet(path: \"test/minimal\")"
    },
    "customPost": {
      "default": "let response = try await client.customPost(path: \"test/minimal\")"
    },
    "customPut": {
      "default": "let response = try await client.customPut(path: \"test/minimal\")"
    },
    "getClusterIncidents": {
      "default": "let response = try await client.getClusterIncidents(clusters: \"c1-de\")"
    },
    "getClusterStatus": {
      "default": "let response = try await client.getClusterStatus(clusters: \"c1-de\")"
    },
    "getIncidents": {
      "default": "let response = try await client.getIncidents()"
    },
    "getIndexingTime": {
      "default": "let response = try await client.getIndexingTime(clusters: \"c1-de\")"
    },
    "getLatency": {
      "default": "let response = try await client.getLatency(clusters: \"c1-de\")"
    },
    "getMetrics": {
      "default": "let response = try await client.getMetrics(metric: Metric.avgBuildTime, period: Period.minute)"
    },
    "getReachability": {
      "default": "let response = try await client.getReachability(clusters: \"c1-de\")"
    },
    "getServers": {
      "default": "let response = try await client.getServers()"
    },
    "getStatus": {
      "default": "let response = try await client.getStatus()"
    },
    "setClientApiKey": {
      "default": "try client.setClientApiKey(apiKey: \"updated-api-key\")"
    },
    "init": {
      "default": "let client = try MonitoringClient(appID: \"ALGOLIA_APPLICATION_ID\", apiKey: \"ALGOLIA_API_KEY\")"
    }
  }
}