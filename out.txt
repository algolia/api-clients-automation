linting common spec
job skipped, cache found for 'common' spec
starting 'search' spec
checking cache for 'search'
job skipped, cache found for 'search'
building custom generators
job skipped, cache found for custom generators
generating CTS for ruby-search
[main] INFO  o.o.codegen.DefaultGenerator - Generating with dryRun=false
[main] INFO  o.o.c.ignore.CodegenIgnoreProcessor - No .openapi-generator-ignore file found.
[main] INFO  o.o.codegen.DefaultGenerator - OpenAPI Generator: algolia-cts (other)
[main] INFO  o.o.codegen.DefaultGenerator - Generator 'algolia-cts' is considered stable.
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as aroundPrecisionFromValue_inner. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings aroundPrecisionFromValue_inner=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings aroundPrecisionFromValue_inner=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as RedirectRuleIndexMetadata_data. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings RedirectRuleIndexMetadata_data=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings RedirectRuleIndexMetadata_data=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as facetsStats. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings facetsStats=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings facetsStats=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.DefaultGenerator - Model searchFiltersArrayString not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model listOfSearchFilters not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model aroundPrecisionFromValue not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model insideBoundingBox not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model insidePolygon not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model order not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model values not generated since it's an alias to map (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model highlightResultOptionMap not generated since it's an alias to map (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model highlightResultMap not generated since it's an alias to map (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model snippetResultOptionMap not generated since it's an alias to map (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model snippetResultMap not generated since it's an alias to map (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model objectIDs not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model synonymHits not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model standardEntry not generated since it's an alias to map (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model sources not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Choosing the first oneOf by default: oneUnderscoreofUnderscore0 (this won't stay correct forever)
Templates not found for client
[main] INFO  o.o.codegen.TemplateManager - writing file tests/output/ruby/test/methods/requests/search_test.rb
[main] INFO  o.o.codegen.TemplateManager - Skipped tests/output/ruby/.openapi-generator-ignore (Skipped by supportingFiles options supplied by user.)
[main] INFO  o.o.codegen.TemplateManager - writing file tests/output/ruby/.openapi-generator/VERSION
[main] INFO  o.o.codegen.TemplateManager - writing file tests/output/ruby/.openapi-generator/FILES
################################################################################
# Thanks for using OpenAPI Generator.                                          #
# Please consider donation to help us maintain this project ?                 #
# https://opencollective.com/openapi_generator/donate                          #
################################################################################
running formatter for 'ruby' in '/app/tests/output/ruby'
[33mDon't run Bundler as root. Installing your bundle as root will break this
application for all non-root users on this machine.[0m
[32mBundle complete! 4 Gemfile dependencies, 25 gems now installed.[0m
[32mUse `bundle info [gemname]` to see where a bundled gem is installed.[0m
.rubocop.yml: Styles/HashSyntax has the wrong namespace - should be Style
Inspecting 3 files
[32m.[0m[32m.[0m[35mW[0m

Offenses:

[36mtest/methods/requests/search_test.rb[0m:1:1: [33mC[0m: [32m[Corrected] [0mStyle/FrozenStringLiteralComment: Missing frozen string literal comment.
require 'algolia'
^
[36mtest/methods/requests/search_test.rb[0m:2:1: [33mC[0m: [32m[Corrected] [0mLayout/EmptyLineAfterMagicComment: Add an empty line after magic comments.
require 'algolia'
^
[36mtest/methods/requests/search_test.rb[0m:8:7: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than [33mAlgolia::Configuration.new([0m.
      'APP_ID', 
      ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:8:16: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
      'APP_ID', 
               ^
[36mtest/methods/requests/search_test.rb[0m:9:17: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
      'API_KEY', 
                ^
[36mtest/methods/requests/search_test.rb[0m:10:7: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      'API_KEY',
      ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:10:59: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
      [Algolia::Transport::StatefulHost.new('localhost')], 
                                                          ^
[36mtest/methods/requests/search_test.rb[0m:11:7: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      [Algolia::Transport::StatefulHost.new('localhost')],
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:11:16: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
      'search', 
               ^
[36mtest/methods/requests/search_test.rb[0m:12:7: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      'search',
      ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:12:59: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
      { requester: Algolia::Transport::EchoRequester.new })
                                                          ^
[36mtest/methods/requests/search_test.rb[0m:13:7: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
      { requester: Algolia::Transport::EchoRequester.new }
      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:14:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 6 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:18:49: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                ^
[36mtest/methods/requests/search_test.rb[0m:18:49: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                ^^
[36mtest/methods/requests/search_test.rb[0m:18:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:18:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:18:63: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:18:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:18:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:18:66: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                 ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:18:75: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:18:77: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                            ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:18:88: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:18:89: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:18:110: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                             ^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:18:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [210/120]
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:18:127: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:18:146: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:18:179: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:18:203: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:18:204: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:18:208: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:18:209: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.add_api_key_with_http_info(  { :acl =>   [  "search",  "addObject",  ], :description => "my new api key",  :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:20:59: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.add_api_key_with_http_info({ :acl => ['search', 'addObject'], 
                                                          ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:20:83: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.add_api_key_with_http_info({ :acl => ['search', 'addObject'], 
                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:21:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:description => 'my new api key', :validity => 300, :maxQueriesPerIPPerHour => 100, :maxHitsPerQuery => 20 })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:22:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:22:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [158/120]
    assert_equal(%q({"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:22:121: [33mC[0m: Layout/LineLength: Line is too long. [159/120]
                                                  :description => 'my new api key', :validity => 300, :maxQueriesPerIPPerHour => 100, :maxHitsPerQuery => 20 })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:26:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:26:139: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}', res.body)
                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:27:58: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                         ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:27:70: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:27:72: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                       ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:27:83: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                                  ^^^^^
[36mtest/methods/requests/search_test.rb[0m:27:99: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                                                  ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:27:106: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:27:107: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:27:111: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:27:112: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:27:112: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.add_or_update_object_with_http_info("indexName",  "uniqueID",      { :key => "value",   },  )
                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:27:121: [33mC[0m: Layout/LineLength: Line is too long. [144/120]
      '{"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:28:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:31:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"key":"value"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:36:51: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                  ^
[36mtest/methods/requests/search_test.rb[0m:36:51: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:36:66: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                                 ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:36:78: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:36:96: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                                                               ^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:36:112: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:36:113: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:36:117: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:36:118: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.append_source_with_http_info(  { :source => "theSource",  :description => "theDescription",   }, )
                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:40:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"source":"theSource","description":"theDescription"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:45:52: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.assign_user_id_with_http_info("userID",    { :cluster => "theCluster",   }, )
                                                   ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:45:61: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.assign_user_id_with_http_info("userID",    { :cluster => "theCluster",   }, )
                                                            ^^^
[36mtest/methods/requests/search_test.rb[0m:45:79: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.assign_user_id_with_http_info("userID",    { :cluster => "theCluster",   }, )
                                                                              ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:45:91: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.assign_user_id_with_http_info("userID",    { :cluster => "theCluster",   }, )
                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:45:92: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.assign_user_id_with_http_info("userID",    { :cluster => "theCluster",   }, )
                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:45:96: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.assign_user_id_with_http_info("userID",    { :cluster => "theCluster",   }, )
                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:45:97: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.assign_user_id_with_http_info("userID",    { :cluster => "theCluster",   }, )
                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:49:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"cluster":"theCluster"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:54:43: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:54:58: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                         ^^^
[36mtest/methods/requests/search_test.rb[0m:54:74: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:54:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:54:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:54:80: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:54:93: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:54:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:54:97: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:54:116: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:54:118: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                     ^^^^
[36mtest/methods/requests/search_test.rb[0m:54:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [160/120]
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:54:133: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                    ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:54:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:54:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:54:145: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:54:146: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:54:150: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:54:151: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:54:154: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:54:155: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:54:158: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:54:159: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:58:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"addObject","body":{"key":"value"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:58:58: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_with_http_info('theIndexName', 
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:59:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'addObject', :body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:63:43: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:63:58: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                         ^^^
[36mtest/methods/requests/search_test.rb[0m:63:74: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:63:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:63:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:63:80: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:63:93: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:63:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:63:97: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:63:112: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:63:114: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:63:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [156/120]
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:63:129: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:63:136: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:63:137: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:63:141: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:63:142: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:63:146: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:63:147: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:63:150: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:63:151: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:63:154: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:63:155: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "clear", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:67:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"clear","body":{"key":"value"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:68:58: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_with_http_info('theIndexName', 
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:69:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'clear', :body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:72:43: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:72:58: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                         ^^^
[36mtest/methods/requests/search_test.rb[0m:72:74: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:72:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:72:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:72:80: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:72:93: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:72:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:72:97: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:72:113: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:72:115: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                  ^^^^
[36mtest/methods/requests/search_test.rb[0m:72:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [157/120]
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:72:130: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                 ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:72:137: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:72:138: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:72:142: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:72:143: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:72:147: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:72:148: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:72:151: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:72:152: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:72:155: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:72:156: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "delete", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:76:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"delete","body":{"key":"value"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:78:58: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_with_http_info('theIndexName', 
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:79:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'delete', :body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:81:43: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:81:58: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                         ^^^
[36mtest/methods/requests/search_test.rb[0m:81:74: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:81:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:81:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:81:80: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:81:93: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:81:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:81:97: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:81:119: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:81:121: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^
[36mtest/methods/requests/search_test.rb[0m:81:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [163/120]
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:81:136: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                       ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:81:143: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:81:144: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:81:148: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:81:149: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:81:153: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:81:154: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:81:157: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:81:158: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:81:161: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:81:162: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "deleteObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:85:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"deleteObject","body":{"key":"value"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:88:58: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_with_http_info('theIndexName', 
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:89:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'deleteObject', :body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:90:43: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:90:58: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                         ^^^
[36mtest/methods/requests/search_test.rb[0m:90:74: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:90:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:90:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:90:80: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:90:93: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:90:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:90:97: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:90:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [170/120]
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:90:126: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:90:128: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                               ^^^^
[36mtest/methods/requests/search_test.rb[0m:90:143: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                              ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:90:150: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:90:151: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:90:155: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:90:156: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:90:160: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:90:161: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:90:164: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:90:165: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:90:168: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:90:169: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:91:87: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                          { :requests => [{ :action => 'deleteObject', 
                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:91:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [121/120]
                                          { :requests => [{ :action => 'deleteObject', :body => { :key => 'value' } }] })
                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:92:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:94:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"partialUpdateObject","body":{"key":"value"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:98:58: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_with_http_info('theIndexName', 
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:99:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'partialUpdateObject', :body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:99:43: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:99:58: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                         ^^^
[36mtest/methods/requests/search_test.rb[0m:99:74: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:99:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:99:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:99:80: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:99:93: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:99:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:99:97: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:99:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [178/120]
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:99:134: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:99:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                       ^^^^
[36mtest/methods/requests/search_test.rb[0m:99:151: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                      ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:99:158: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:99:159: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:99:163: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:99:164: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:99:168: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:99:169: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:99:172: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:99:173: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:99:176: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:99:177: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "partialUpdateObjectNoCreate", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:101:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [128/120]
                                          { :requests => [{ :action => 'partialUpdateObject', :body => { :key => 'value' } }] })
                                                                                                                        ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:102:94: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                          { :requests => [{ :action => 'partialUpdateObject', 
                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:103:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:103:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"partialUpdateObjectNoCreate","body":{"key":"value"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:108:43: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:108:58: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                         ^^^
[36mtest/methods/requests/search_test.rb[0m:108:58: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_with_http_info('theIndexName', 
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:108:74: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:108:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:108:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:108:80: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:108:93: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:108:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:108:97: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:108:119: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:108:121: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^
[36mtest/methods/requests/search_test.rb[0m:108:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [163/120]
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:108:136: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                       ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:108:143: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:108:144: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:108:148: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:108:149: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:108:153: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:108:154: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:108:157: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:108:158: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:108:161: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:108:162: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_with_http_info("theIndexName",    { :requests =>   [   { :action =>  "updateObject", :body =>     { :key => "value",   },   },  ],  }, )
                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:109:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'partialUpdateObjectNoCreate', :body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:111:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [136/120]
                                          { :requests => [{ :action => 'partialUpdateObjectNoCreate', :body => { :key => 'value' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:112:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"updateObject","body":{"key":"value"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:113:102: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                          { :requests => [{ :action => 'partialUpdateObjectNoCreate', 
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:114:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:117:59: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                          ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:117:68: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                   ^^^
[36mtest/methods/requests/search_test.rb[0m:117:86: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                     ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:117:99: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:117:108: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:117:110: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:117:113: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                ^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:117:114: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:117:115: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                  ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:117:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:117:123: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:117:125: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                            ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:117:132: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:117:133: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:117:137: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:117:138: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:117:141: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:117:142: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_assign_user_ids_with_http_info("userID",    { :cluster => "theCluster",  :users =>   [ "user1",  "user2",   ],  }, )
                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:118:58: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_with_http_info('theIndexName', 
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:119:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'updateObject', :body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:121:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"cluster":"theCluster","users":["user1","user2"]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:121:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [121/120]
                                          { :requests => [{ :action => 'updateObject', :body => { :key => 'value' } }] })
                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:124:87: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                          { :requests => [{ :action => 'updateObject', 
                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:125:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:body => { :key => 'value' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:126:62: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                             ^
[36mtest/methods/requests/search_test.rb[0m:126:63: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                              ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:126:75: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:126:90: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:126:92: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:126:96: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:126:96: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:126:109: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:126:111: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:126:113: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:126:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [284/120]
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:126:131: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:126:133: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:126:151: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                      ^^^
[36mtest/methods/requests/search_test.rb[0m:126:155: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:126:170: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                         ^^^^
[36mtest/methods/requests/search_test.rb[0m:126:174: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:126:175: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:126:179: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:126:180: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:126:184: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:126:197: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:126:199: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:126:201: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                        ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:126:222: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:126:224: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:126:242: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                 ^^^
[36mtest/methods/requests/search_test.rb[0m:126:246: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:126:261: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                    ^^^^
[36mtest/methods/requests/search_test.rb[0m:126:265: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:126:266: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:126:270: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:126:271: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:126:274: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:126:275: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:126:278: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:126:279: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:126:282: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:126:283: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",   },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",   },  },  ],  }, )
                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:128:68: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_assign_user_ids_with_http_info('userID', 
                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:129:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :cluster => 'theCluster', :users => ['user1', 'user2'] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:129:39: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :cluster => 'theCluster', :users => ['user1', 'user2'] })
                                      ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:130:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:130:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [173/120]
    assert_equal(%q({"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr"}}]}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:62: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                             ^
[36mtest/methods/requests/search_test.rb[0m:135:63: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                              ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:75: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:135:121: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:135:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [590/120]
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:133: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:135:135: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:135:139: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:135:139: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                          ^^^
[36mtest/methods/requests/search_test.rb[0m:135:152: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:135:154: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:135:156: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                           ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:174: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:135:176: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:135:194: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                 ^^^
[36mtest/methods/requests/search_test.rb[0m:135:198: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:135:213: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                    ^^^^
[36mtest/methods/requests/search_test.rb[0m:135:218: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:135:229: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                    ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:237: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:135:246: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:135:248: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:135:251: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:252: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:135:253: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                            ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:263: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:135:265: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                        ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:274: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:135:275: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:135:296: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:135:298: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:135:301: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:302: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:135:303: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                              ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:311: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:135:313: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                        ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:322: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:135:323: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:135:336: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:135:338: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:135:340: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                   ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:349: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:135:350: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:135:353: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:135:354: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:135:358: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:135:371: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:135:373: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:135:375: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                      ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:396: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:135:398: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:135:416: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:135:420: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:135:435: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^^^^
[36mtest/methods/requests/search_test.rb[0m:135:440: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:135:451: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:462: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:135:471: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:135:473: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:135:476: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:477: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:135:478: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:487: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:135:489: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:135:498: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:135:499: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:520: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:135:522: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:525: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:526: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:527: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:534: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:536: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:545: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:135:546: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:559: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:561: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:563: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:572: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:573: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:576: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:577: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:580: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:581: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:584: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:135:585: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:588: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:135:589: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :clearExistingDictionaryEntries => false,  :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :word => "fancy",  :words =>   [ "believe",  "algolia",   ], :decomposition =>   [ "trust",  "algolia",   ], :state =>  "enabled",  },  },   { :action =>  "deleteEntry", :body =>   { :objectID => "2",  :language => "fr",  :word => "humility",  :words =>   [ "candor",  "algolia",   ], :decomposition =>   [ "grit",  "algolia",   ], :state =>  "enabled",  },  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:138:74: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_dictionary_entries_with_http_info('compounds', 
                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:139:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:139:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"clearExistingDictionaryEntries":false,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr","word":"humility","words":["candor","algolia"],"decomposition":["grit","algolia"],"state":"enabled"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:139:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [175/120]
{ :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:139:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [411/120]
    assert_equal(%q({"clearExistingDictionaryEntries":false,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr","word":"humility","words":["candor","algolia"],"decomposition":["grit","algolia"],"state":"enabled"}}]}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:141:154: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                             { :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en' } }, 
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:142:1: [33mC[0m: [32m[Corrected] [0mLayout/ArrayAlignment: Align the elements of an array literal if they span more than one line.
{ :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:144:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr"}}]}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:144:62: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                             ^
[36mtest/methods/requests/search_test.rb[0m:144:63: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                              ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:144:75: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:144:90: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:144:92: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:144:96: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:144:96: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:144:109: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:144:111: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:144:113: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:144:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [219/120]
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:144:131: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:144:133: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:144:151: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                      ^^^
[36mtest/methods/requests/search_test.rb[0m:144:154: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr"}}]}', res.body)
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:144:155: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:144:170: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                         ^^^^
[36mtest/methods/requests/search_test.rb[0m:144:175: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:144:192: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                               ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:144:200: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:144:201: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:144:205: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:144:206: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:144:209: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:144:213: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:144:214: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:144:217: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:144:218: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.batch_dictionary_entries_with_http_info( "compounds",   { :requests =>   [   { :action =>  "addEntry", :body =>   { :objectID => "1",  :language => "en",  :additional => "try me",   },  },  ],  }, )
                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:145:121: [33mC[0m: Layout/LineLength: Line is too long. [153/120]
                                                             { :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en' } },
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:146:105: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                                             { :action => 'deleteEntry', 
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:146:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [159/120]
                                                                             { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:147:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:body => { :objectID => '2', :language => 'fr' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:147:108: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                                               :body => { :objectID => '2', 
                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:147:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [133/120]
                                                                               :body => { :objectID => '2', :language => 'fr' } }] })
                                                                                                                        ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:148:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:148:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:language => 'fr' } }] })
^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:148:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:148:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [130/120]
    assert_equal(%q({"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}), res.body)
                                                                                                                        ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:149:74: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_dictionary_entries_with_http_info('compounds', 
                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:150:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :clearExistingDictionaryEntries => false, :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => ['believe', 'algolia'], :decomposition => ['trust', 'algolia'], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => ['candor', 'algolia'], :decomposition => ['grit', 'algolia'], :state => 'enabled' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:150:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [444/120]
{ :clearExistingDictionaryEntries => false, :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => ['believe', 'algolia'], :decomposition => ['trust', 'algolia'], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => ['candor', 'algolia'], :decomposition => ['grit', 'algolia'], :state => 'enabled' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:150:160: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :clearExistingDictionaryEntries => false, :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => ['believe', 'algolia'], :decomposition => ['trust', 'algolia'], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => ['candor', 'algolia'], :decomposition => ['grit', 'algolia'], :state => 'enabled' } }] })
                                                                                                                                                               ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:150:202: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :clearExistingDictionaryEntries => false, :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => ['believe', 'algolia'], :decomposition => ['trust', 'algolia'], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => ['candor', 'algolia'], :decomposition => ['grit', 'algolia'], :state => 'enabled' } }] })
                                                                                                                                                                                                         ^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:150:356: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :clearExistingDictionaryEntries => false, :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => ['believe', 'algolia'], :decomposition => ['trust', 'algolia'], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => ['candor', 'algolia'], :decomposition => ['grit', 'algolia'], :state => 'enabled' } }] })
                                                                                                                                                                                                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:150:397: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :clearExistingDictionaryEntries => false, :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => ['believe', 'algolia'], :decomposition => ['trust', 'algolia'], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => ['candor', 'algolia'], :decomposition => ['grit', 'algolia'], :state => 'enabled' } }] })
                                                                                                                                                                                                                                                                                                                                                                                                            ^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:153:44: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.browse_with_http_info("indexName",  )
                                           ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:153:55: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.browse_with_http_info("indexName",  )
                                                      ^
[36mtest/methods/requests/search_test.rb[0m:153:56: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.browse_with_http_info("indexName",  )
                                                       ^
[36mtest/methods/requests/search_test.rb[0m:153:56: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.browse_with_http_info("indexName",  )
                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:153:121: [33mC[0m: Layout/LineLength: Line is too long. [159/120]
      '{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr"}}]}', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:154:105: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                             { :clearExistingDictionaryEntries => false, 
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:155:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"clearExistingDictionaryEntries":false,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr","word":"humility","words":["candor","algolia"],"decomposition":["grit","algolia"],"state":"enabled"}}]}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:155:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia], :decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:155:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [388/120]
:requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia], :decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:155:392: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"clearExistingDictionaryEntries":false,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr","word":"humility","words":["candor","algolia"],"decomposition":["grit","algolia"],"state":"enabled"}}]}', res.body)
                                                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:157:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({}), res.body)
                 ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:158:3: [33mC[0m: Metrics/MethodLength: Method has too many lines. [12/10]
  def test_batch_dictionary_entries1 [33m...[0m
  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:160:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArrayElementIndentation: Use 2 spaces for indentation in an array, relative to the start of the line where the left square bracket is.
{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia], :decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:160:74: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.batch_dictionary_entries_with_http_info('compounds', 
                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:160:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [374/120]
{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia], :decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:160:371: [33mC[0m: [32m[Corrected] [0mLayout/MultilineArrayBraceLayout: The closing array brace must be on the line after the last array element when the opening brace is on a separate line from the first array element.
{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia], :decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }] })
                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:161:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :additional => 'try me' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:161:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:161:90: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                                 { :action => 'addEntry', 
                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:162:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia], :decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:162:44: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                           ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:162:56: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                       ^^^
[36mtest/methods/requests/search_test.rb[0m:162:72: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                       ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:162:82: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:162:98: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:162:100: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:162:104: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:162:105: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                        ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:162:119: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:162:120: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:162:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [130/120]
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                        ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:162:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [345/120]
:body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia], :decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:162:124: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:162:125: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:162:128: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:162:129: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.browse_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:162:164: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                                   :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia], 
                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:163:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArrayElementIndentation: Indent the right bracket the same as the start of the line where the left bracket is.
] })
^
[36mtest/methods/requests/search_test.rb[0m:163:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:163:121: [33mC[0m: Layout/LineLength: Line is too long. [163/120]
                                                                   :body => { :objectID => '1', :language => 'en', :word => 'fancy', :words => %w[believe algolia],
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:164:121: [33mC[0m: Layout/LineLength: Line is too long. [326/120]
                                                                              :decomposition => %w[trust algolia], :state => 'enabled' } }, { :action => 'deleteEntry', :body => { :objectID => '2', :language => 'fr', :word => 'humility', :words => %w[candor algolia], :decomposition => %w[grit algolia], :state => 'enabled' } }
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:166:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:166:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"query":"myQuery","facetFilters":["tags:algolia"]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:166:111: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}', res.body)
                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:167:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [181/120]
                                                             { :requests => [{ :action => 'addEntry', :body => { :objectID => '1', :language => 'en', :additional => 'try me' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:170:121: [33mC[0m: Layout/LineLength: Line is too long. [397/120]
      '{"clearExistingDictionaryEntries":false,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}},{"action":"deleteEntry","body":{"objectID":"2","language":"fr","word":"humility","words":["candor","algolia"],"decomposition":["grit","algolia"],"state":"enabled"}}]}', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:171:44: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.browse_with_http_info("indexName",    { :cursor => "test",   }, )
                                           ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:171:56: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.browse_with_http_info("indexName",    { :cursor => "test",   }, )
                                                       ^^^
[36mtest/methods/requests/search_test.rb[0m:171:73: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.browse_with_http_info("indexName",    { :cursor => "test",   }, )
                                                                        ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:171:79: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.browse_with_http_info("indexName",    { :cursor => "test",   }, )
                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:171:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.browse_with_http_info("indexName",    { :cursor => "test",   }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:171:84: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.browse_with_http_info("indexName",    { :cursor => "test",   }, )
                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:171:85: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.browse_with_http_info("indexName",    { :cursor => "test",   }, )
                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:172:102: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                             { :requests => [{ :action => 'addEntry', 
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:173:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:173:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:body => { :objectID => '1', :language => 'en', :additional => 'try me' } }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:175:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"cursor":"test"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:176:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [158/120]
                                                                               :body => { :objectID => '1', :language => 'en', :additional => 'try me' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:177:108: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                                               :body => { :objectID => '1', 
                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:178:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:language => 'en', :additional => 'try me' } }] })
^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:179:121: [33mC[0m: Layout/LineLength: Line is too long. [140/120]
                                                                                          :language => 'en', :additional => 'try me' } }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:180:56: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.browse_with_http_info('indexName', 
                                                       ^
[36mtest/methods/requests/search_test.rb[0m:180:56: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.clear_all_synonyms_with_http_info("indexName",  )
                                                       ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:180:67: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.clear_all_synonyms_with_http_info("indexName",  )
                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:180:68: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.clear_all_synonyms_with_http_info("indexName",  )
                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:180:68: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.clear_all_synonyms_with_http_info("indexName",  )
                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:181:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :query => 'myQuery', :facetFilters => ['tags:algolia'] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:184:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:189:51: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.clear_objects_with_http_info("theIndexName",  )
                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:189:65: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.clear_objects_with_http_info("theIndexName",  )
                                                                ^
[36mtest/methods/requests/search_test.rb[0m:189:66: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.clear_objects_with_http_info("theIndexName",  )
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:189:66: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.clear_objects_with_http_info("theIndexName",  )
                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:193:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:198:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.clear_rules_with_http_info("indexName",  )
                                                ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:198:60: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.clear_rules_with_http_info("indexName",  )
                                                           ^
[36mtest/methods/requests/search_test.rb[0m:198:61: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.clear_rules_with_http_info("indexName",  )
                                                            ^
[36mtest/methods/requests/search_test.rb[0m:198:61: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.clear_rules_with_http_info("indexName",  )
                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:202:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:207:51: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_delete_with_http_info("/test/minimal",  )
                                                  ^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:207:66: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_delete_with_http_info("/test/minimal",  )
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:207:67: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_delete_with_http_info("/test/minimal",  )
                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:207:67: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_delete_with_http_info("/test/minimal",  )
                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:211:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:216:51: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_delete_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                  ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:216:63: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_delete_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                              ^^^^^
[36mtest/methods/requests/search_test.rb[0m:216:81: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_delete_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:216:93: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_delete_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:216:94: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_delete_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:216:98: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_delete_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:216:99: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_delete_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:216:99: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_delete_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:220:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:225:48: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_get_with_http_info("/test/minimal",  )
                                               ^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:225:63: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_get_with_http_info("/test/minimal",  )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:225:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_get_with_http_info("/test/minimal",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:225:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_get_with_http_info("/test/minimal",  )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:229:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:234:48: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_get_with_http_info("/test/all",      { :query => "parameters",   },  )
                                               ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:234:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_get_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:234:78: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_get_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                             ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:234:90: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_get_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:234:91: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_get_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:234:95: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_get_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:234:96: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_get_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:234:96: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_get_with_http_info("/test/all",      { :query => "parameters",   },  )
                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:238:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:243:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/minimal",  )
                                                ^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:243:64: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/minimal",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:243:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/minimal",  )
                                                                ^
[36mtest/methods/requests/search_test.rb[0m:243:65: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/minimal",  )
                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:247:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({}), res.body)
                 ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:252:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:252:61: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                            ^^^^^
[36mtest/methods/requests/search_test.rb[0m:252:79: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                              ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:252:91: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:252:92: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:252:97: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                ^^^^^
[36mtest/methods/requests/search_test.rb[0m:252:114: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                 ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:252:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [134/120]
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:252:126: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:252:127: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:252:131: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:252:132: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:252:132: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:256:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"body":"parameters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:261:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:261:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:261:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:261:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:261:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:261:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:261:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:261:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:261:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:261:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:261:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:261:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:261:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:265:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:270:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:270:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:270:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:270:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:270:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:270:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:270:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:270:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:270:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:270:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:270:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:270:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:270:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:271:89: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/all', { :query => 'parameters' }, 
                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:272:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :body => 'parameters' })
^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:274:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:279:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:279:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:279:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:279:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:279:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:279:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:279:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:279:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:279:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:279:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:279:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:279:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:279:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:281:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:282:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:283:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:288:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:288:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:288:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:288:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:288:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:288:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:288:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:288:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:288:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:288:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:288:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:288:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:288:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:291:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:292:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:292:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:297:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:297:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:297:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:297:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:297:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:297:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:297:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:297:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:297:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:297:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:297:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:297:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:297:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:301:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:301:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:302:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:306:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:306:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:306:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:306:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:306:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:306:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:306:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:306:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:306:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:306:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:306:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:306:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:306:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:310:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:311:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:312:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:315:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:315:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:315:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:315:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:315:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:315:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:315:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:315:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:315:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:315:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:315:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:315:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:315:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:319:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:321:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:322:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:324:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:324:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:324:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:324:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:324:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:324:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:324:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:324:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:324:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:324:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:324:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:324:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:324:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:328:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:331:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:332:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:333:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:333:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:333:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                         ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:333:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:333:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:333:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:333:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:333:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:333:135: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:333:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:333:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:333:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:333:141: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_post_with_http_info("/test/requestOptions",      { :query => "parameters",   },      { :facet => "filters",   },  )
                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:337:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"facet":"filters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:341:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:342:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:342:48: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_put_with_http_info("/test/minimal",  )
                                               ^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:342:63: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_put_with_http_info("/test/minimal",  )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:342:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_put_with_http_info("/test/minimal",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:342:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_put_with_http_info("/test/minimal",  )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:346:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({}), res.body)
                 ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:351:48: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                               ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:351:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:351:78: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                             ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:351:90: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:351:91: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:351:96: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                               ^^^^^
[36mtest/methods/requests/search_test.rb[0m:351:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:351:113: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:351:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [133/120]
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                        ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:351:125: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:351:126: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:351:130: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:351:131: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:351:131: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.custom_put_with_http_info("/test/all",      { :query => "parameters",   },      { :body => "parameters",   },  )
                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:352:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:355:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"body":"parameters"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:360:52: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_api_key_with_http_info("myTestApiKey",  )
                                                   ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:360:66: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.delete_api_key_with_http_info("myTestApiKey",  )
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:360:67: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_api_key_with_http_info("myTestApiKey",  )
                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:360:67: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.delete_api_key_with_http_info("myTestApiKey",  )
                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:361:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_post_with_http_info('/test/requestOptions', { :query => 'parameters' }, 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:362:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :facet => 'filters' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:364:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:369:47: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_by_with_http_info("theIndexName",    { :filters => "brand:brandName",   }, )
                                              ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:369:62: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_by_with_http_info("theIndexName",    { :filters => "brand:brandName",   }, )
                                                             ^^^
[36mtest/methods/requests/search_test.rb[0m:369:80: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_by_with_http_info("theIndexName",    { :filters => "brand:brandName",   }, )
                                                                               ^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:369:97: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.delete_by_with_http_info("theIndexName",    { :filters => "brand:brandName",   }, )
                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:369:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_by_with_http_info("theIndexName",    { :filters => "brand:brandName",   }, )
                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:369:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.delete_by_with_http_info("theIndexName",    { :filters => "brand:brandName",   }, )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:369:103: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.delete_by_with_http_info("theIndexName",    { :filters => "brand:brandName",   }, )
                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:373:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"filters":"brand:brandName"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:378:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_index_with_http_info("theIndexName",  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:378:64: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.delete_index_with_http_info("theIndexName",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:378:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_index_with_http_info("theIndexName",  )
                                                                ^
[36mtest/methods/requests/search_test.rb[0m:378:65: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.delete_index_with_http_info("theIndexName",  )
                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:380:88: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.custom_put_with_http_info('/test/all', { :query => 'parameters' }, 
                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:381:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :body => 'parameters' })
^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:382:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:387:51: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_object_with_http_info("theIndexName",  "uniqueID",  )
                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:387:66: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_object_with_http_info("theIndexName",  "uniqueID",  )
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:387:68: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_object_with_http_info("theIndexName",  "uniqueID",  )
                                                                   ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:387:78: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.delete_object_with_http_info("theIndexName",  "uniqueID",  )
                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:387:79: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_object_with_http_info("theIndexName",  "uniqueID",  )
                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:387:79: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.delete_object_with_http_info("theIndexName",  "uniqueID",  )
                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:391:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:396:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_rule_with_http_info("indexName",  "id1",  )
                                                ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:396:61: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_rule_with_http_info("indexName",  "id1",  )
                                                            ^
[36mtest/methods/requests/search_test.rb[0m:396:63: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_rule_with_http_info("indexName",  "id1",  )
                                                              ^^^^^
[36mtest/methods/requests/search_test.rb[0m:396:68: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.delete_rule_with_http_info("indexName",  "id1",  )
                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:396:69: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_rule_with_http_info("indexName",  "id1",  )
                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:396:69: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.delete_rule_with_http_info("indexName",  "id1",  )
                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:400:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:405:51: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_source_with_http_info("theSource",  )
                                                  ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:405:62: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.delete_source_with_http_info("theSource",  )
                                                             ^
[36mtest/methods/requests/search_test.rb[0m:405:63: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_source_with_http_info("theSource",  )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:405:63: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.delete_source_with_http_info("theSource",  )
                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:409:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:414:52: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_synonym_with_http_info("indexName",  "id1",  )
                                                   ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:414:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_synonym_with_http_info("indexName",  "id1",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:414:66: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.delete_synonym_with_http_info("indexName",  "id1",  )
                                                                 ^^^^^
[36mtest/methods/requests/search_test.rb[0m:414:71: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.delete_synonym_with_http_info("indexName",  "id1",  )
                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:414:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.delete_synonym_with_http_info("indexName",  "id1",  )
                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:414:72: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.delete_synonym_with_http_info("indexName",  "id1",  )
                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:418:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:423:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_api_key_with_http_info("myTestApiKey",  )
                                                ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:423:63: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_api_key_with_http_info("myTestApiKey",  )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:423:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_api_key_with_http_info("myTestApiKey",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:423:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_api_key_with_http_info("myTestApiKey",  )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:427:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:432:61: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.get_dictionary_languages_with_http_info()
                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:436:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:441:60: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.get_dictionary_settings_with_http_info()
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:445:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:450:45: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.get_logs_with_http_info()
                                            ^^
[36mtest/methods/requests/search_test.rb[0m:454:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:459:48: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_logs_with_http_info(5,  10,  "theIndexName",   "all", )
                                               ^
[36mtest/methods/requests/search_test.rb[0m:459:53: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_logs_with_http_info(5,  10,  "theIndexName",   "all", )
                                                    ^
[36mtest/methods/requests/search_test.rb[0m:459:55: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_logs_with_http_info(5,  10,  "theIndexName",   "all", )
                                                      ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:459:70: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_logs_with_http_info(5,  10,  "theIndexName",   "all", )
                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:459:73: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_logs_with_http_info(5,  10,  "theIndexName",   "all", )
                                                                        ^^^^^
[36mtest/methods/requests/search_test.rb[0m:459:78: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_logs_with_http_info(5,  10,  "theIndexName",   "all", )
                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:459:79: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_logs_with_http_info(5,  10,  "theIndexName",   "all", )
                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:463:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:468:48: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                               ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:468:63: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:468:65: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:468:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                           ^^^
[36mtest/methods/requests/search_test.rb[0m:468:80: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                               ^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:468:81: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:468:82: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                                 ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:468:90: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:468:92: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                                           ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:468:99: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:468:100: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:468:104: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:468:105: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_object_with_http_info("theIndexName",  "uniqueID",    [ "attr1",  "attr2",   ], )
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:472:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:477:49: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                ^
[36mtest/methods/requests/search_test.rb[0m:477:49: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                ^^
[36mtest/methods/requests/search_test.rb[0m:477:63: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:477:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:477:69: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:477:69: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                    ^^^
[36mtest/methods/requests/search_test.rb[0m:477:96: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:477:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:477:101: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:477:102: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:477:103: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                      ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:477:111: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:477:113: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:477:120: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:477:121: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:477:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [196/120]
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:477:140: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                           ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:477:151: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:477:167: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                      ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:477:181: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:477:182: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:477:186: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:477:187: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:477:190: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:477:191: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:477:194: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:477:195: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_objects_with_http_info(  { :requests =>   [   { :attributesToRetrieve =>   [ "attr1",  "attr2",   ], :objectID => "uniqueID",  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:481:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:481:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [138/120]
    assert_equal(%q({"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:486:46: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_rule_with_http_info("indexName",  "id1",  )
                                             ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:486:58: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_rule_with_http_info("indexName",  "id1",  )
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:486:60: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_rule_with_http_info("indexName",  "id1",  )
                                                           ^^^^^
[36mtest/methods/requests/search_test.rb[0m:486:65: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_rule_with_http_info("indexName",  "id1",  )
                                                                ^
[36mtest/methods/requests/search_test.rb[0m:486:66: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_rule_with_http_info("indexName",  "id1",  )
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:486:66: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_rule_with_http_info("indexName",  "id1",  )
                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:490:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:495:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_settings_with_http_info("theIndexName",  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:495:64: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_settings_with_http_info("theIndexName",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:495:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_settings_with_http_info("theIndexName",  )
                                                                ^
[36mtest/methods/requests/search_test.rb[0m:495:65: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_settings_with_http_info("theIndexName",  )
                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:498:76: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.get_object_with_http_info('theIndexName', 'uniqueID', ['attr1', 'attr2'])
                                                                           ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:499:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:504:48: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.get_sources_with_http_info()
                                               ^^
[36mtest/methods/requests/search_test.rb[0m:507:66: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.get_objects_with_http_info({ :requests => [{ 
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:508:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
:attributesToRetrieve => ['attr1', 'attr2'], :objectID => 'uniqueID', :indexName => 'theIndexName' }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:508:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:508:26: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
:attributesToRetrieve => ['attr1', 'attr2'], :objectID => 'uniqueID', :indexName => 'theIndexName' }] })
                         ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:508:100: [33mC[0m: [32m[Corrected] [0mLayout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element when opening brace is on a separate line from the first hash element.
:attributesToRetrieve => ['attr1', 'attr2'], :objectID => 'uniqueID', :indexName => 'theIndexName' }] })
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:513:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:513:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_synonym_with_http_info("indexName",  "id1",  )
                                                ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:513:61: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_synonym_with_http_info("indexName",  "id1",  )
                                                            ^
[36mtest/methods/requests/search_test.rb[0m:513:63: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_synonym_with_http_info("indexName",  "id1",  )
                                                              ^^^^^
[36mtest/methods/requests/search_test.rb[0m:513:68: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_synonym_with_http_info("indexName",  "id1",  )
                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:513:69: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_synonym_with_http_info("indexName",  "id1",  )
                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:513:69: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_synonym_with_http_info("indexName",  "id1",  )
                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:513:119: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}', res.body)
                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:515:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [146/120]
                                                  :attributesToRetrieve => %w[attr1 attr2], :objectID => 'uniqueID', :indexName => 'theIndexName' 
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:515:146: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                  :attributesToRetrieve => %w[attr1 attr2], :objectID => 'uniqueID', :indexName => 'theIndexName' 
                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:516:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Indent the right brace the same as the first position after the preceding left parenthesis.
}] })
^
[36mtest/methods/requests/search_test.rb[0m:517:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:521:84: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                  :attributesToRetrieve => %w[attr1 
                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:522:1: [33mC[0m: [32m[Corrected] [0mLayout/ArrayAlignment: Align the elements of an array literal if they span more than one line.
attr2], :objectID => 'uniqueID', :indexName => 'theIndexName'
^^^^^
[36mtest/methods/requests/search_test.rb[0m:522:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:522:46: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_task_with_http_info("theIndexName",  123,  )
                                             ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:522:61: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_task_with_http_info("theIndexName",  123,  )
                                                            ^
[36mtest/methods/requests/search_test.rb[0m:522:66: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_task_with_http_info("theIndexName",  123,  )
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:522:67: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_task_with_http_info("theIndexName",  123,  )
                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:522:67: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_task_with_http_info("theIndexName",  123,  )
                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:526:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:528:121: [33mC[0m: Layout/LineLength: Line is too long. [139/120]
                                                                              attr2], :objectID => 'uniqueID', :indexName => 'theIndexName'
                                                                                                                        ^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:531:53: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.get_top_user_ids_with_http_info()
                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:534:121: [33mC[0m: Layout/LineLength: Line is too long. [124/120]
      '{"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}', res.body
                                                                                                                        ^^^^
[36mtest/methods/requests/search_test.rb[0m:535:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:540:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.get_user_id_with_http_info("uniqueID",  )
                                                ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:540:59: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.get_user_id_with_http_info("uniqueID",  )
                                                          ^
[36mtest/methods/requests/search_test.rb[0m:540:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.get_user_id_with_http_info("uniqueID",  )
                                                           ^
[36mtest/methods/requests/search_test.rb[0m:540:60: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.get_user_id_with_http_info("uniqueID",  )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:544:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:549:57: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.has_pending_mappings_with_http_info()
                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:553:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:558:62: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.has_pending_mappings_with_http_info(true,  )
                                                             ^
[36mtest/methods/requests/search_test.rb[0m:558:63: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.has_pending_mappings_with_http_info(true,  )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:558:63: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.has_pending_mappings_with_http_info(true,  )
                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:562:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:567:50: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.list_api_keys_with_http_info()
                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:571:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:576:50: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.list_clusters_with_http_info()
                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:580:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:585:49: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.list_indices_with_http_info()
                                                ^^
[36mtest/methods/requests/search_test.rb[0m:589:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:594:52: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.list_indices_with_http_info(8,  3,  )
                                                   ^
[36mtest/methods/requests/search_test.rb[0m:594:55: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.list_indices_with_http_info(8,  3,  )
                                                      ^
[36mtest/methods/requests/search_test.rb[0m:594:56: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.list_indices_with_http_info(8,  3,  )
                                                       ^
[36mtest/methods/requests/search_test.rb[0m:594:56: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.list_indices_with_http_info(8,  3,  )
                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:598:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:603:50: [33mC[0m: [32m[Corrected] [0mStyle/MethodCallWithoutArgsParentheses: Do not use parentheses for method calls with no arguments.
    _, res = @client.list_user_ids_with_http_info()
                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:607:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:612:53: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.list_user_ids_with_http_info(8,  100,  )
                                                    ^
[36mtest/methods/requests/search_test.rb[0m:612:58: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.list_user_ids_with_http_info(8,  100,  )
                                                         ^
[36mtest/methods/requests/search_test.rb[0m:612:59: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.list_user_ids_with_http_info(8,  100,  )
                                                          ^
[36mtest/methods/requests/search_test.rb[0m:612:59: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.list_user_ids_with_http_info(8,  100,  )
                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:616:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:621:52: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                   ^
[36mtest/methods/requests/search_test.rb[0m:621:52: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:621:66: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:621:68: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:621:72: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:621:72: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                       ^^^
[36mtest/methods/requests/search_test.rb[0m:621:85: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:621:87: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:621:89: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                        ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:621:108: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:621:110: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                             ^^^^
[36mtest/methods/requests/search_test.rb[0m:621:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [183/120]
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:621:125: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                            ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:621:132: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:621:133: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:621:138: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:621:154: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                         ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:621:168: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:621:169: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:621:173: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:621:174: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:621:177: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:621:178: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:621:181: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:621:182: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.multiple_batch_with_http_info(  { :requests =>   [   { :action =>  "addObject", :body =>     { :key => "value",   },  :indexName => "theIndexName",   },  ],  }, )
                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:625:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"action":"addObject","body":{"key":"value"},"indexName":"theIndexName"}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:630:53: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                    ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:630:68: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                   ^^^
[36mtest/methods/requests/search_test.rb[0m:630:85: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:630:87: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:630:89: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                        ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:630:113: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:630:120: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:630:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [167/120]
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:630:129: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:630:131: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:630:134: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:630:135: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:630:135: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:630:137: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                        ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:630:145: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:630:147: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                                  ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:630:157: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:630:158: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:630:161: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:630:162: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:630:165: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:630:166: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.operation_index_with_http_info("theIndexName",    { :operation =>  "copy", :destination => "dest",  :scope =>   [  "rules",  "settings",  ],  }, )
                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:634:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"operation":"copy","destination":"dest","scope":["rules","settings"]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:639:59: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:639:74: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:639:76: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                           ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:639:87: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                      ^^^^^
[36mtest/methods/requests/search_test.rb[0m:639:103: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                      ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:639:110: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:639:117: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:639:119: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:639:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [189/120]
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:639:136: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:639:138: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:639:140: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                           ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:639:163: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                  ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:639:170: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:639:171: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:639:175: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:639:176: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:639:180: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:639:186: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:639:187: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:639:187: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.partial_update_object_with_http_info("theIndexName",  "uniqueID",      { :id1 => "test",  :id2 =>   { :_operation =>  "AddUnique", :value => "test2",   },  },  true,  )
                                                                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:643:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"id1":"test","id2":{"_operation":"AddUnique","value":"test2"}}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:648:52: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.remove_user_id_with_http_info("uniqueID",  )
                                                   ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:648:62: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.remove_user_id_with_http_info("uniqueID",  )
                                                             ^
[36mtest/methods/requests/search_test.rb[0m:648:63: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.remove_user_id_with_http_info("uniqueID",  )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:648:63: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.remove_user_id_with_http_info("uniqueID",  )
                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:652:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:653:93: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.multiple_batch_with_http_info({ :requests => [{ :action => 'addObject', 
                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:654:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:body => { :key => 'value' }, :indexName => 'theIndexName' }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:657:53: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                    ^
[36mtest/methods/requests/search_test.rb[0m:657:53: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:657:56: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:657:56: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                       ^^^
[36mtest/methods/requests/search_test.rb[0m:657:72: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                       ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:657:84: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:657:102: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                                     ^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:657:118: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:657:119: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:657:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [129/120]
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                                                        ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:657:123: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:657:124: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:657:127: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:657:128: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.replace_sources_with_http_info(  [   { :source => "theSource",  :description => "theDescription",   },  ], )
                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:661:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q([{"source":"theSource","description":"theDescription"}]), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:663:68: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.operation_index_with_http_info('theIndexName', 
                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:664:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :operation => 'copy', :destination => 'dest', :scope => ['rules', 'settings'] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:664:59: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :operation => 'copy', :destination => 'dest', :scope => ['rules', 'settings'] })
                                                          ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:666:53: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.restore_api_key_with_http_info("myApiKey",  )
                                                    ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:666:63: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.restore_api_key_with_http_info("myApiKey",  )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:666:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.restore_api_key_with_http_info("myApiKey",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:666:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.restore_api_key_with_http_info("myApiKey",  )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:670:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q(), res.body)
                 ^^^^
[36mtest/methods/requests/search_test.rb[0m:673:86: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.partial_update_object_with_http_info('theIndexName', 'uniqueID', 
                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:673:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [131/120]
                                                    { :operation => 'copy', :destination => 'dest', :scope => %w[rules settings] })
                                                                                                                        ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:674:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :id1 => 'test', :id2 => { :_operation => 'AddUnique', :value => 'test2' } }, true)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:675:49: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:675:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                               ^^^^^
[36mtest/methods/requests/search_test.rb[0m:675:85: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                                                    ^^^^
[36mtest/methods/requests/search_test.rb[0m:675:90: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:675:101: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                                                                    ^^^^^
[36mtest/methods/requests/search_test.rb[0m:675:106: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:675:107: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:675:111: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:675:112: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:675:112: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.save_object_with_http_info("theIndexName",      { :objectID => "id",  :test => "val",   },  )
                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:676:121: [33mC[0m: Layout/LineLength: Line is too long. [133/120]
                                                                     :body => { :key => 'value' }, :indexName => 'theIndexName' }] })
                                                                                                                        ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:679:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"objectID":"id","test":"val"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:680:100: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                    { :operation => 'copy', :destination => 'dest', 
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:681:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:scope => %w[rules settings] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:684:47: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                              ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:684:59: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                          ^
[36mtest/methods/requests/search_test.rb[0m:684:61: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                            ^^^^^
[36mtest/methods/requests/search_test.rb[0m:684:67: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                  ^^^
[36mtest/methods/requests/search_test.rb[0m:684:86: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                     ^^^^^
[36mtest/methods/requests/search_test.rb[0m:684:92: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:684:106: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:684:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:684:112: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:684:112: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:684:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [178/120]
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:684:129: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:684:137: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:684:150: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:684:152: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:684:154: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                         ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:684:164: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:684:165: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:684:168: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:684:169: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:684:172: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:684:173: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:684:176: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:684:177: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  }, )
                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:688:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains"}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:692:79: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.replace_sources_with_http_info([{ :source => 'theSource', 
                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:693:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:description => 'theDescription' }])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:47: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                              ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:59: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                          ^
[36mtest/methods/requests/search_test.rb[0m:693:61: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                            ^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:67: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                  ^^^
[36mtest/methods/requests/search_test.rb[0m:693:86: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                     ^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:92: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:693:106: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:693:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:693:112: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:693:112: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:693:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [867/120]
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:129: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:137: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:693:150: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:693:152: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:693:154: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                         ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:189: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:693:203: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                          ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:211: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:693:212: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:693:216: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:693:217: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:693:235: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:693:237: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:693:250: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:693:252: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:693:269: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                            ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:283: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:693:292: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:693:294: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:693:307: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:693:309: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:693:313: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:693:314: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                         ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:323: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:693:324: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:693:337: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:693:339: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:693:343: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:693:343: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                      ^^^
[36mtest/methods/requests/search_test.rb[0m:693:354: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:693:356: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:693:358: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                     ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:379: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                          ^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:385: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:693:398: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                             ^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:403: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:693:404: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:693:409: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:693:420: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:693:422: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:693:424: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                       ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:446: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:452: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:693:465: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^^^^^
[36mtest/methods/requests/search_test.rb[0m:693:470: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:693:471: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:693:475: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:693:476: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:693:479: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:693:480: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:693:483: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:693:484: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:693:495: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:693:497: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:693:501: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:693:501: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:519: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:524: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:525: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:529: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:530: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:560: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:572: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:574: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^^^
[36mtest/methods/requests/search_test.rb[0m:693:580: [35mW[0m: [32m[Corrected] [0mLint/SymbolConversion: Unnecessary symbol conversion; use [33malgolia:[0m instead.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:580: [33mC[0m: [32m[Corrected] [0mStyle/QuotedSymbols: Prefer single-quoted symbols when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:589: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAfterColon: Space missing after colon.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:590: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:602: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:614: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:693:616: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:620: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:620: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:638: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:644: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:660: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:661: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:666: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:682: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:684: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:687: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:688: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:689: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:695: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:697: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:702: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:703: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:723: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:724: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:728: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:693:729: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:732: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:733: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:754: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:761: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:780: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:792: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:794: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:798: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:798: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:812: [33mC[0m: [32m[Corrected] [0mStyle/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:823: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:835: [33mC[0m: [32m[Corrected] [0mStyle/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:845: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:846: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:850: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:851: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:854: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:855: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:864: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:865: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:693:865: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.save_rule_with_http_info("indexName",  "id1",    { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  }, true,  )

[36mtest/methods/requests/search_test.rb[0m:697:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}), res.body)

[36mtest/methods/requests/search_test.rb[0m:697:121: [33mC[0m: Layout/LineLength: Line is too long. [142/120]
                                                          { :id1 => 'test', :id2 => { :_operation => 'AddUnique', :value => 'test2' } }, true)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:697:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [594/120]
    assert_equal(%q({"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}), res.body)

[36mtest/methods/requests/search_test.rb[0m:702:48: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                               ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:702:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                           ^^^
[36mtest/methods/requests/search_test.rb[0m:702:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:702:65: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:702:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                  ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:702:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:702:109: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:702:111: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:702:115: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:702:115: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                  ^^^
[36mtest/methods/requests/search_test.rb[0m:702:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [312/120]
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:702:132: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                   ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:702:145: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:702:158: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:702:160: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:702:162: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                 ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:702:172: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:702:173: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:702:176: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:702:177: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:702:180: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:702:181: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:702:185: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:702:203: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                          ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:702:222: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:702:236: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:702:238: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:702:242: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:702:242: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                 ^^^
[36mtest/methods/requests/search_test.rb[0m:702:259: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                  ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:702:267: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:702:280: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:702:282: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:702:284: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                           ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:702:294: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:702:295: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:702:298: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:702:299: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:702:302: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:702:303: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:702:306: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:702:307: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:702:310: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:702:311: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "a-rule-id",  :conditions =>   [   { :pattern => "smartphone",  :anchoring =>  "contains",  },  ],  },   { :objectID => "a-second-rule-id",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains",  },  ],  },  ], )
                                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:706:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q([{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}]},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}]}]), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:706:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [211/120]
    assert_equal(%q([{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}]},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}]}]), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:48: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                               ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                           ^^^
[36mtest/methods/requests/search_test.rb[0m:711:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:711:65: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:711:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                  ^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:89: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:711:103: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:711:105: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:711:109: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:711:109: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                            ^^^
[36mtest/methods/requests/search_test.rb[0m:711:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [875/120]
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:126: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                             ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:134: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:711:147: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:711:149: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:711:151: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                      ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:186: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:711:200: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                       ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:208: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:711:209: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:711:213: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:711:214: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:711:232: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:711:234: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:711:247: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:711:249: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:711:266: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                         ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:280: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:711:289: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:711:291: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:711:304: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:711:306: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:711:310: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:711:311: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                      ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:320: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:711:321: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:711:334: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:711:336: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:711:340: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:711:340: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                   ^^^
[36mtest/methods/requests/search_test.rb[0m:711:351: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:711:353: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:711:355: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                  ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:376: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                       ^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:382: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:711:395: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                          ^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:400: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:711:401: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:711:406: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:711:417: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:711:419: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:711:421: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                    ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:443: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:449: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:711:462: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^^^^^
[36mtest/methods/requests/search_test.rb[0m:711:467: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:711:468: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:711:472: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:711:473: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:711:476: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:711:477: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:711:480: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:711:481: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:711:492: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:711:494: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:711:498: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:711:498: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:516: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:521: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:522: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:526: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:527: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:711:557: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:569: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:571: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:577: [35mW[0m: [32m[Corrected] [0mLint/SymbolConversion: Unnecessary symbol conversion; use [33malgolia:[0m instead.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:577: [33mC[0m: [32m[Corrected] [0mStyle/QuotedSymbols: Prefer single-quoted symbols when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:586: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAfterColon: Space missing after colon.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:587: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:599: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:611: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:613: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:617: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:617: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:635: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:641: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:657: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:658: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:663: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:711:679: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:681: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:684: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:685: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:686: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:692: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:694: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:699: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:700: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:720: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:721: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:725: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:726: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:729: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:730: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:751: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:758: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:777: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:789: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:791: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:795: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:795: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:809: [33mC[0m: [32m[Corrected] [0mStyle/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:820: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:832: [33mC[0m: [32m[Corrected] [0mStyle/NumericLiterals: Use underscores(_) as thousands separator and separate every 3 digits with them.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:842: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:843: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:711:847: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:848: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:851: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:852: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:711:855: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:856: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:866: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:872: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:711:873: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )

[36mtest/methods/requests/search_test.rb[0m:711:873: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.save_rules_with_http_info("indexName",    [   { :objectID => "id1",  :conditions =>   [   { :pattern => "apple",  :anchoring =>  "contains", :alternatives => false,  :context => "search",   },  ], :consequence =>   { :params =>   { :filters => "brand:apple",  :query =>   { :remove =>   [ "algolia",   ], :edits =>   [   { :type =>  "remove", :delete => "abc",  :insert => "cde",   },   { :type =>  "replace", :delete => "abc",  :insert => "cde",   },  ],  },  }, :hide =>   [   { :objectID => "321",   },  ], :filterPromotes => false,  :userData =>    { "algolia":"aloglia" },   :promote =>   [   { :objectID => "abc",  :position => 3,   },   { :objectIDs =>   [ "abc",  "def",   ], :position => 1,   },  ],  }, :description => "test",  :enabled => true,  :validity =>   [   { :from => 1656670273,  :until => 1656670277,   },  ],  },  ], true,  true,  )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:715:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q([{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]), res.body)

[36mtest/methods/requests/search_test.rb[0m:715:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [596/120]
    assert_equal(%q([{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]), res.body)

[36mtest/methods/requests/search_test.rb[0m:720:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                 ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:62: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                             ^
[36mtest/methods/requests/search_test.rb[0m:720:64: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                               ^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:66: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.save_rule_with_http_info('indexName', 'id1', 
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:720:70: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                     ^^^
[36mtest/methods/requests/search_test.rb[0m:720:89: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                        ^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:720:103: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:720:105: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:720:107: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                          ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [180/120]
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:128: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:720:130: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:720:133: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:134: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:720:135: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                      ^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:720:143: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                              ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:154: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:720:156: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                           ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:720:162: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:720:163: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:720:167: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:720:168: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:720:177: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:720:178: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:720:178: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.save_synonym_with_http_info("indexName",  "id1",    { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  }, true,  )
                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:721:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :objectID => 'id1', :conditions => [{ :pattern => 'apple', :anchoring => 'contains' }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:724:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:51: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                  ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:68: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:729:68: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                   ^^^
[36mtest/methods/requests/search_test.rb[0m:729:86: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                     ^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:92: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:729:100: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:729:102: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:729:104: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                       ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [320/120]
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:125: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:729:127: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:729:130: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:131: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:729:132: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                   ^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:138: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:729:140: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                           ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:151: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:729:153: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                        ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:159: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:729:160: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:729:164: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:729:165: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:729:169: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:729:187: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                          ^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:193: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:729:201: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:729:203: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:729:205: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                            ^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:232: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                       ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:241: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:729:253: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:729:255: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:729:258: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:259: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:729:260: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                   ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:269: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:729:271: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                              ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:280: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:729:282: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                         ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:729:290: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:729:291: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:729:295: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:729:296: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:729:299: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:729:300: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:729:310: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:729:317: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:729:318: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:729:318: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.save_synonyms_with_http_info("indexName",    [   { :objectID => "id1",  :type =>  "synonym", :synonyms =>   [ "car",  "vehicule",  "auto",   ],  },   { :objectID => "id2",  :type =>  "onewaysynonym", :input => "iphone",  :synonyms =>   [ "ephone",  "aphone",  "yphone",   ],  },  ], true,  false,  )
                                                                                                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:730:66: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.save_rule_with_http_info('indexName', 'id1', 
                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:731:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :objectID => 'id1', :conditions => [{ :pattern => 'apple', :anchoring => 'contains', :alternatives => false, :context => 'search' }], :consequence => { :params => { :filters => 'brand:apple', :query => { :remove => ['algolia'], :edits => [{ :type => 'remove', :delete => 'abc', :insert => 'cde' }, { :type => 'replace', :delete => 'abc', :insert => 'cde' }] } }, :hide => [{ :objectID => '321' }], :filterPromotes => false, :userData => { algolia: 'aloglia' }, :promote => [{ :objectID => 'abc', :position => 3 }, { :objectIDs => ['abc', 'def'], :position => 1 }] }, :description => 'test', :enabled => true, :validity => [{ :from => 1_656_670_273, :until => 1_656_670_277 }] }, true)

[36mtest/methods/requests/search_test.rb[0m:731:533: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :objectID => 'id1', :conditions => [{ :pattern => 'apple', :anchoring => 'contains', :alternatives => false, :context => 'search' }], :consequence => { :params => { :filters => 'brand:apple', :query => { :remove => ['algolia'], :edits => [{ :type => 'remove', :delete => 'abc', :insert => 'cde' }, { :type => 'replace', :delete => 'abc', :insert => 'cde' }] } }, :hide => [{ :objectID => '321' }], :filterPromotes => false, :userData => { algolia: 'aloglia' }, :promote => [{ :objectID => 'abc', :position => 3 }, { :objectIDs => ['abc', 'def'], :position => 1 }] }, :description => 'test', :enabled => true, :validity => [{ :from => 1_656_670_273, :until => 1_656_670_277 }] }, true)

[36mtest/methods/requests/search_test.rb[0m:733:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q([{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:733:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [205/120]
    assert_equal(%q([{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:736:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}', res.body)

[36mtest/methods/requests/search_test.rb[0m:736:575: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}', res.body)

[36mtest/methods/requests/search_test.rb[0m:738:44: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                           ^
[36mtest/methods/requests/search_test.rb[0m:738:44: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                           ^^
[36mtest/methods/requests/search_test.rb[0m:738:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:738:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:738:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:738:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:738:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:738:97: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:738:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:738:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:738:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:738:106: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:738:107: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:738:110: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:738:111: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },  ],  }, )
                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:741:60: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.save_rules_with_http_info('indexName', 
                                                           ^
[36mtest/methods/requests/search_test.rb[0m:742:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
[{ :objectID => 'a-rule-id', :conditions => [{ :pattern => 'smartphone', :anchoring => 'contains' }] }, { :objectID => 'a-second-rule-id', :conditions => [{ :pattern => 'apple', :anchoring => 'contains' }] }])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:742:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"indexName":"theIndexName"}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:742:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [209/120]
[{ :objectID => 'a-rule-id', :conditions => [{ :pattern => 'smartphone', :anchoring => 'contains' }] }, { :objectID => 'a-second-rule-id', :conditions => [{ :pattern => 'apple', :anchoring => 'contains' }] }])
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:744:121: [33mC[0m: Layout/LineLength: Line is too long. [137/120]
                                              { :objectID => 'id1', :conditions => [{ :pattern => 'apple', :anchoring => 'contains' }] })
                                                                                                                        ^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:746:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:747:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'[{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}]},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}]}]', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:747:44: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                           ^
[36mtest/methods/requests/search_test.rb[0m:747:44: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                           ^^
[36mtest/methods/requests/search_test.rb[0m:747:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:747:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:747:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:747:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:747:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:747:106: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:747:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:747:110: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                             ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:747:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [191/120]
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:747:129: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:747:139: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:747:140: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:747:144: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:747:145: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:747:160: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:747:162: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:747:164: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:747:185: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:747:186: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:747:189: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:747:190: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:747:192: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'[{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}]},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}]}]', res.body)
                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:751:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet"}],"strategy":"stopIfEnoughMatches"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:751:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [142/120]
    assert_equal(%q({"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet"}],"strategy":"stopIfEnoughMatches"}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:752:60: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.save_rules_with_http_info('indexName', 
                                                           ^
[36mtest/methods/requests/search_test.rb[0m:752:151: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                               [{ :objectID => 'a-rule-id', :conditions => [{ :pattern => 'smartphone', :anchoring => 'contains' }] }, 
                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:753:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
[{ :objectID => 'id1', :conditions => [{ :pattern => 'apple', :anchoring => 'contains', :alternatives => false, :context => 'search' }], :consequence => { :params => { :filters => 'brand:apple', :query => { :remove => ['algolia'], :edits => [{ :type => 'remove', :delete => 'abc', :insert => 'cde' }, { :type => 'replace', :delete => 'abc', :insert => 'cde' }] } }, :hide => [{ :objectID => '321' }], :filterPromotes => false, :userData => { algolia: 'aloglia' }, :promote => [{ :objectID => 'abc', :position => 3 }, { :objectIDs => ['abc', 'def'], :position => 1 }] }, :description => 'test', :enabled => true, :validity => [{ :from => 1_656_670_273, :until => 1_656_670_277 }] }], true, true)

[36mtest/methods/requests/search_test.rb[0m:753:1: [33mC[0m: [32m[Corrected] [0mLayout/ArrayAlignment: Align the elements of an array literal if they span more than one line.
{ :objectID => 'a-second-rule-id', :conditions => [{ :pattern => 'apple', :anchoring => 'contains' }] }])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:753:534: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
[{ :objectID => 'id1', :conditions => [{ :pattern => 'apple', :anchoring => 'contains', :alternatives => false, :context => 'search' }], :consequence => { :params => { :filters => 'brand:apple', :query => { :remove => ['algolia'], :edits => [{ :type => 'remove', :delete => 'abc', :insert => 'cde' }, { :type => 'replace', :delete => 'abc', :insert => 'cde' }] } }, :hide => [{ :objectID => '321' }], :filterPromotes => false, :userData => { algolia: 'aloglia' }, :promote => [{ :objectID => 'abc', :position => 3 }, { :objectIDs => ['abc', 'def'], :position => 1 }] }, :description => 'test', :enabled => true, :validity => [{ :from => 1_656_670_273, :until => 1_656_670_277 }] }], true, true)

[36mtest/methods/requests/search_test.rb[0m:754:121: [33mC[0m: Layout/LineLength: Line is too long. [729/120]
                                              { :objectID => 'id1', :conditions => [{ :pattern => 'apple', :anchoring => 'contains', :alternatives => false, :context => 'search' }], :consequence => { :params => { :filters => 'brand:apple', :query => { :remove => ['algolia'], :edits => [{ :type => 'remove', :delete => 'abc', :insert => 'cde' }, { :type => 'replace', :delete => 'abc', :insert => 'cde' }] } }, :hide => [{ :objectID => '321' }], :filterPromotes => false, :userData => { algolia: 'aloglia' }, :promote => [{ :objectID => 'abc', :position => 3 }, { :objectIDs => %w[abc def], :position => 1 }] }, :description => 'test', :enabled => true, :validity => [{ :from => 1_656_670_273, :until => 1_656_670_277 }] }, true)

[36mtest/methods/requests/search_test.rb[0m:756:44: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                           ^
[36mtest/methods/requests/search_test.rb[0m:756:44: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                           ^^
[36mtest/methods/requests/search_test.rb[0m:756:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:756:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:756:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:756:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:756:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:756:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:756:110: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:756:120: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:756:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [176/120]
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:756:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:756:149: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:756:151: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:756:153: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                        ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:756:162: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:756:163: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:756:166: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:756:167: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:756:170: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:756:171: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:756:174: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:756:175: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ],  }, )
                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:758:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'[{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]', res.body)

[36mtest/methods/requests/search_test.rb[0m:758:577: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'[{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]', res.body)

[36mtest/methods/requests/search_test.rb[0m:759:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:759:121: [33mC[0m: Layout/LineLength: Line is too long. [580/120]
      '{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}', res.body

[36mtest/methods/requests/search_test.rb[0m:760:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:760:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [127/120]
    assert_equal(%q({"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}), res.body)
                                                                                                                        ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:761:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [153/120]
                                                { :objectID => 'a-second-rule-id', :conditions => [{ :pattern => 'apple', :anchoring => 'contains' }] }])
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:763:69: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.save_synonym_with_http_info('indexName', 'id1', 
                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:764:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :objectID => 'id1', :type => 'synonym', :synonyms => ['car', 'vehicule', 'auto'] }, true)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:764:56: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :objectID => 'id1', :type => 'synonym', :synonyms => ['car', 'vehicule', 'auto'] }, true)
                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:764:83: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                { :objectID => 'a-second-rule-id', 
                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:765:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:conditions => [{ :pattern => 'apple', :anchoring => 'contains' }] }])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:765:44: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                           ^
[36mtest/methods/requests/search_test.rb[0m:765:44: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                           ^^
[36mtest/methods/requests/search_test.rb[0m:765:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:765:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:765:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:765:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:765:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:765:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:765:106: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:765:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:765:110: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                             ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:765:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [269/120]
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:765:129: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:765:140: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:765:157: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                            ^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:765:173: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:765:185: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                        ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:765:196: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:765:217: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:765:218: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:765:222: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:765:223: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:765:238: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:765:240: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:765:242: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:765:263: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:765:264: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:765:267: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:765:268: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:766:121: [33mC[0m: Layout/LineLength: Line is too long. [150/120]
                                               [{ :objectID => 'a-rule-id', :conditions => [{ :pattern => 'smartphone', :anchoring => 'contains' }] },
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:769:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:769:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [208/120]
    assert_equal(%q({"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:771:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:773:63: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.save_synonyms_with_http_info('indexName',    
                                                              ^^^^
[36mtest/methods/requests/search_test.rb[0m:773:121: [33mC[0m: Layout/LineLength: Line is too long. [197/120]
      '[{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}]},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}]}]', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
[{ :objectID => 'id1', :type => 'synonym', :synonyms => ['car', 'vehicule', 'auto'] }, { :objectID => 'id2', :type => 'onewaysynonym', :input => 'iphone', :synonyms => ['ephone', 'aphone', 'yphone'] }], true, false)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:44: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                           ^
[36mtest/methods/requests/search_test.rb[0m:774:44: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                           ^^
[36mtest/methods/requests/search_test.rb[0m:774:57: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
[{ :objectID => 'id1', :type => 'synonym', :synonyms => ['car', 'vehicule', 'auto'] }, { :objectID => 'id2', :type => 'onewaysynonym', :input => 'iphone', :synonyms => ['ephone', 'aphone', 'yphone'] }], true, false)
                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:774:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:774:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:774:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:774:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:97: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:774:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:774:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:774:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [291/120]
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:122: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                         ^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:138: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:774:146: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:774:148: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:774:150: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                     ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:169: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                        ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:169: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
[{ :objectID => 'id1', :type => 'synonym', :synonyms => ['car', 'vehicule', 'auto'] }, { :objectID => 'id2', :type => 'onewaysynonym', :input => 'iphone', :synonyms => ['ephone', 'aphone', 'yphone'] }], true, false)
                                                                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:179: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:774:180: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:774:185: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:774:204: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                           ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:219: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:774:227: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:774:229: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:774:231: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                      ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:240: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:774:241: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:774:244: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:774:245: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:774:260: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:774:262: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:774:264: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                       ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:774:285: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:774:286: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:774:289: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:774:290: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",   },   { :indexName => "theIndexName2",  :type =>  "facet", :facet => "theFacet",   },   { :indexName => "theIndexName",  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:778:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:778:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [218/120]
    assert_equal(%q({"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:779:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'[{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:779:186: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'[{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]', res.body)
                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:780:121: [33mC[0m: Layout/LineLength: Line is too long. [738/120]
                                               [{ :objectID => 'id1', :conditions => [{ :pattern => 'apple', :anchoring => 'contains', :alternatives => false, :context => 'search' }], :consequence => { :params => { :filters => 'brand:apple', :query => { :remove => ['algolia'], :edits => [{ :type => 'remove', :delete => 'abc', :insert => 'cde' }, { :type => 'replace', :delete => 'abc', :insert => 'cde' }] } }, :hide => [{ :objectID => '321' }], :filterPromotes => false, :userData => { algolia: 'aloglia' }, :promote => [{ :objectID => 'abc', :position => 3 }, { :objectIDs => %w[abc def], :position => 1 }] }, :description => 'test', :enabled => true, :validity => [{ :from => 1_656_670_273, :until => 1_656_670_277 }] }], true, true)

[36mtest/methods/requests/search_test.rb[0m:783:44: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                           ^
[36mtest/methods/requests/search_test.rb[0m:783:44: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                           ^^
[36mtest/methods/requests/search_test.rb[0m:783:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:783:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:783:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:783:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:783:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:783:106: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:783:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:783:110: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                             ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [372/120]
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:129: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:140: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:783:157: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                            ^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:173: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:783:185: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                        ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:196: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:783:217: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:783:218: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:783:223: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:783:242: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:257: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:783:269: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                            ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:279: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:783:300: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:783:308: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:783:310: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:783:312: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                       ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:321: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:783:322: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:783:325: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:783:326: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:783:341: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:783:343: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:783:345: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:783:366: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:783:367: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:783:370: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:783:371: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :type =>  "facet", :facet => "theFacet",  :facetQuery => "theFacetQuery",  :query => "theQuery",  :maxFacetHits => 50,   },   { :indexName => "theIndexName",  :query => "myQuery",  :hitsPerPage => 50,  :type =>  "default",  },  ], :strategy =>  "stopIfEnoughMatches",  }, )
                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:785:121: [33mC[0m: Layout/LineLength: Line is too long. [582/120]
      '[{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]', res.body

[36mtest/methods/requests/search_test.rb[0m:787:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:787:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [289/120]
    assert_equal(%q({"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:44: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                           ^
[36mtest/methods/requests/search_test.rb[0m:792:44: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                           ^^
[36mtest/methods/requests/search_test.rb[0m:792:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:792:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:792:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:792:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:792:83: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:792:117: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                    ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:121: [33mC[0m: Layout/LineLength: Line is too long. [134/120]
                                                 { :objectID => 'id1', :type => 'synonym', :synonyms => %w[car vehicule auto] }, true)
                                                                                                                        ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [738/120]
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:136: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:792:163: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                  ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:182: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:792:199: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                      ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:218: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:792:239: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                              ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:258: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:792:280: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                       ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:298: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:792:299: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:792:304: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:792:323: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                  ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:338: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:792:354: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:792:356: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:792:360: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:792:361: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                        ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:380: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                           ^^^
[36mtest/methods/requests/search_test.rb[0m:792:385: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:792:386: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                 ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:404: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:792:405: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:792:409: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:792:410: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:792:437: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:792:439: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:792:443: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:792:444: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:463: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^^^
[36mtest/methods/requests/search_test.rb[0m:792:468: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:792:469: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:792:487: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:792:488: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:792:492: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:792:493: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:792:510: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:512: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:516: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:517: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:536: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:541: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:542: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:560: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:561: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:565: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:566: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:587: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:589: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:593: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:594: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:613: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:618: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:619: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:637: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:638: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:642: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:643: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:792:665: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:667: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:671: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:672: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:691: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:696: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:697: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:715: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:716: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:720: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:721: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:724: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:792:725: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:792:728: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:729: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:732: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:733: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:736: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:792:737: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :indexName => "theIndexName",  :facetFilters => "mySearch:filters",  :reRankingApplyFilter => "mySearch:filters",  :tagFilters => "mySearch:filters",  :numericFilters => "mySearch:filters",  :optionalFilters => "mySearch:filters",   },   { :indexName => "theIndexName",  :facetFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :reRankingApplyFilter =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :tagFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :numericFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ], :optionalFilters =>   [ "mySearch:filters",    [ "mySearch:filters",   ],  ],  },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:793:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:793:45: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_with_http_info({ 
                                            ^
[36mtest/methods/requests/search_test.rb[0m:794:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet' }], :strategy => 'stopIfEnoughMatches' })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:794:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [126/120]
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet' }], :strategy => 'stopIfEnoughMatches' })
                                                                                                                        ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:794:125: [33mC[0m: [32m[Corrected] [0mLayout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element when opening brace is on a separate line from the first hash element.
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet' }], :strategy => 'stopIfEnoughMatches' })
                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:796:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters"]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:796:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [581/120]
    assert_equal(%q({"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters"]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}), res.body)

[36mtest/methods/requests/search_test.rb[0m:799:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet"}],"strategy":"stopIfEnoughMatches"}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:799:123: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet"}],"strategy":"stopIfEnoughMatches"}', res.body)
                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:801:44: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                           ^
[36mtest/methods/requests/search_test.rb[0m:801:44: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                           ^^
[36mtest/methods/requests/search_test.rb[0m:801:58: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:801:60: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:801:64: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:801:64: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                               ^^^
[36mtest/methods/requests/search_test.rb[0m:801:93: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:801:119: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:801:121: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:801:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [2758/120]
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:125: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:801:125: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:801:127: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                              ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:801:140: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:801:141: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:801:181: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:801:204: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:801:206: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:801:210: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:801:210: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:801:212: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:801:231: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:801:232: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:801:256: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:801:273: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:801:275: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:801:279: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:801:280: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:801:282: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:801:283: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:801:306: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:801:309: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:801:338: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:801:362: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:801:378: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:801:380: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:801:382: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                             ^^^^^
[36mtest/methods/requests/search_test.rb[0m:801:438: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:801:463: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:801:465: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:801:469: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:801:470: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:801:472: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:801:473: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:801:502: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:504: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:508: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:509: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:511: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:512: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:801:540: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:542: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:801:546: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:547: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:549: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:550: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:577: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:579: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:583: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:584: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:586: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:801:587: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:617: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:634: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:636: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:640: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:641: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:643: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:644: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:675: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:703: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:705: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:709: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:710: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:712: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:713: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:753: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:755: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:759: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:760: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:762: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:801:763: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:784: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:808: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:841: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:868: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:801:891: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:917: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:919: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:921: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:943: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:945: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:948: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:801:949: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:950: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:956: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:958: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:963: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:964: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:984: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:986: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:990: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:801:991: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:993: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:994: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1031: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1041: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:801:1043: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1047: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1048: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1050: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1051: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:801:1069: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1072: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1098: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1121: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1124: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1146: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1149: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1169: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1195: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1211: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:801:1226: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1247: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1249: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:801:1253: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:801:1253: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1257: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1266: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1275: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1285: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1293: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:801:1294: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1299: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1303: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1312: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1321: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1330: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1338: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1339: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1343: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1344: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1364: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1366: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1370: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1370: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^^^
[36mtest/methods/requests/search_test.rb[0m:801:1374: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1383: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1392: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1402: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1411: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:801:1419: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1424: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1425: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1430: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1434: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:801:1443: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1452: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1461: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1470: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1480: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1488: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1489: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1493: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1494: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:801:1530: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1533: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1548: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1574: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1595: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1623: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:801:1652: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1680: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1700: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1702: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:801:1706: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1707: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1709: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1710: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1732: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:801:1734: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1738: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1739: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1741: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1742: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1761: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1780: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1782: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1786: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1787: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1789: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1790: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1811: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:801:1813: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1817: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1818: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1820: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1821: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1838: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1871: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1901: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1913: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1916: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1934: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1936: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1940: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1941: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1943: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1944: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1961: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1963: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:801:1965: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1987: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1989: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1993: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1994: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1996: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:1997: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:801:2025: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2027: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2031: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2032: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2034: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2035: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2067: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2094: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2120: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2122: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2124: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2157: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2159: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2179: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2181: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2194: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2196: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2208: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2210: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2213: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2214: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2215: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2219: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:801:2221: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2224: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2225: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2229: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2230: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2243: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2245: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2255: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:801:2257: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2269: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2271: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2275: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2276: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2279: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2280: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2303: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2305: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2307: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2314: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2315: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2318: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2319: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2322: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2323: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2327: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2328: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2369: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2387: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:801:2389: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2393: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:801:2394: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:801:2396: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2397: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2446: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2478: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2480: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2484: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2485: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2487: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2488: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2508: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2510: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2514: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2515: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:801:2517: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:801:2518: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2541: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2544: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2570: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2573: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2597: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2600: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2630: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2650: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2664: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2666: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:801:2670: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2671: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:801:2673: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2674: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2686: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:801:2688: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2690: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2716: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2718: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2720: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2741: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2743: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2744: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2748: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2749: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2752: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2753: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2756: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:801:2757: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_with_http_info(  { :requests =>   [   { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "multiWordsSynonym",  ], :analytics => true,  :analyticsTags =>   [ "",   ], :aroundLatLng => "",  :aroundLatLngViaIP => true,  :aroundPrecision => 0,  :aroundRadius =>  "all", :attributeCriteriaComputedByMinProximity => true,  :attributesForFaceting =>   [ "",   ], :attributesToHighlight =>   [ "",   ], :attributesToRetrieve =>   [ "",   ], :attributesToSnippet =>   [ "",   ], :clickAnalytics => true,  :customRanking =>   [ "",   ], :decompoundQuery => true,  :disableExactOnAttributes =>   [ "",   ], :disableTypoToleranceOnAttributes =>   [ "",   ], :distinct => 0,  :enableABTest => true,  :enablePersonalization => true,  :enableReRanking => true,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :explain =>   [ "foo",  "bar",   ], :facetFilters =>   [ "",   ], :facetingAfterDistinct => true,  :facets =>   [ "",   ], :filters => "",  :getRankingInfo => true,  :highlightPostTag => "",  :highlightPreTag => "",  :hitsPerPage => 0,  :ignorePlurals => false,  :indexName => "theIndexName",  :insideBoundingBox =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,   ],  ], :insidePolygon =>   [   [ 47.3165,  4.9665,  47.3424,  5.0201,  47.32,  4.9,   ],   [ 40.9234,  2.1185,  38.643,  1.9916,  39.2587,  2.0104,   ],  ], :keepDiacriticsOnCharacters => "",  :length => 0,  :maxValuesPerFacet => 0,  :minProximity => 0,  :minWordSizefor1Typo => 0,  :minWordSizefor2Typos => 0,  :minimumAroundRadius => 0,  :naturalLanguages =>   [ "",   ], :numericFilters =>   [ "",   ], :offset => 0,  :optionalFilters =>   [ "",   ], :optionalWords =>   [ "",   ], :page => 0,  :percentileComputation => true,  :personalizationImpact => 0,  :query => "",  :queryLanguages =>   [ "",   ], :queryType =>  "prefixAll", :ranking =>   [ "",   ], :reRankingApplyFilter =>   [ "",   ], :relevancyStrictness => 0,  :removeStopWords => true,  :removeWordsIfNoResults =>  "allOptional", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :responseFields =>   [ "",   ], :restrictHighlightAndSnippetArrays => true,  :restrictSearchableAttributes =>   [ "",   ], :ruleContexts =>   [ "",   ], :similarQuery => "",  :snippetEllipsisText => "",  :sortFacetValuesBy => "",  :sumOrFiltersScores => true,  :synonyms => true,  :tagFilters =>   [ "",   ], :type =>  "default", :typoTolerance =>  "min", :userToken => "",   },  ],  }, )

[36mtest/methods/requests/search_test.rb[0m:802:121: [33mC[0m: Layout/LineLength: Line is too long. [253/120]
                                                  [{ :objectID => 'id1', :type => 'synonym', :synonyms => %w[car vehicule auto] }, { :objectID => 'id2', :type => 'onewaysynonym', :input => 'iphone', :synonyms => %w[ephone aphone yphone] }], true, false)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:804:91: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_with_http_info({ :requests => [{ :indexName => 'theIndexName', 
                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:805:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:query => 'myQuery', :hitsPerPage => 50, :type => 'default' }] })
^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:805:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesForFaceting":[""],"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"customRanking":[""],"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","explain":["foo","bar"],"facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":0,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"keepDiacriticsOnCharacters":"","length":0,"maxValuesPerFacet":0,"minProximity":0,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":0,"naturalLanguages":[""],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":[""],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}), res.body)

[36mtest/methods/requests/search_test.rb[0m:805:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [2134/120]
    assert_equal(%q({"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesForFaceting":[""],"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"customRanking":[""],"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","explain":["foo","bar"],"facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":0,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"keepDiacriticsOnCharacters":"","length":0,"maxValuesPerFacet":0,"minProximity":0,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":0,"naturalLanguages":[""],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":[""],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}), res.body)

[36mtest/methods/requests/search_test.rb[0m:807:121: [33mC[0m: Layout/LineLength: Line is too long. [191/120]
      '[{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:808:109: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                             :requests => [{ :indexName => 'theIndexName', :type => 'facet', 
                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:809:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:facet => 'theFacet' }], :strategy => 'stopIfEnoughMatches' 
^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:809:60: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
:facet => 'theFacet' }], :strategy => 'stopIfEnoughMatches' 
                                                           ^
[36mtest/methods/requests/search_test.rb[0m:809:116: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    assert_equal('{"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}', 
                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:810:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
res.body)
^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:810:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Indent the right brace the same as the first position after the preceding left parenthesis.
})
^
[36mtest/methods/requests/search_test.rb[0m:810:63: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",   }, )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:810:64: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",   }, )
                                                               ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:810:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",   }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:810:91: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",   }, )
                                                                                          ^^^^^
[36mtest/methods/requests/search_test.rb[0m:810:96: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",   }, )
                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:810:97: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",   }, )
                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:810:101: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",   }, )
                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:810:102: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",   }, )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:814:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"query":"foo"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:815:45: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_with_http_info({ 
                                            ^
[36mtest/methods/requests/search_test.rb[0m:816:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:816:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }], :strategy => 'stopIfEnoughMatches' })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:816:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [201/120]
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }], :strategy => 'stopIfEnoughMatches' })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:816:200: [33mC[0m: [32m[Corrected] [0mLayout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element when opening brace is on a separate line from the first hash element.
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }], :strategy => 'stopIfEnoughMatches' })
                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:819:63: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:819:64: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                               ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:819:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:819:91: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                          ^^^^^
[36mtest/methods/requests/search_test.rb[0m:819:97: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:819:110: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:819:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [156/120]
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:819:130: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                                                 ^
[36mtest/methods/requests/search_test.rb[0m:819:145: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                                                                ^^^^
[36mtest/methods/requests/search_test.rb[0m:819:149: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:819:150: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:819:154: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:819:155: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_dictionary_entries_with_http_info( "compounds",   { :query => "foo",  :page => 4,  :hitsPerPage => 2,  :language => "fr",   }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:821:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:821:189: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}', res.body)
                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:823:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"query":"foo","page":4,"hitsPerPage":2,"language":"fr"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:826:45: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_with_http_info({ 
                                            ^
[36mtest/methods/requests/search_test.rb[0m:827:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
:requests => [{ :indexName => 'theIndexName' }, { :indexName => 'theIndexName2', :type => 'facet', :facet => 'theFacet' }, { :indexName => 'theIndexName', :type => 'default' }], :strategy => 'stopIfEnoughMatches' })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:827:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [215/120]
:requests => [{ :indexName => 'theIndexName' }, { :indexName => 'theIndexName2', :type => 'facet', :facet => 'theFacet' }, { :indexName => 'theIndexName', :type => 'default' }], :strategy => 'stopIfEnoughMatches' })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:827:214: [33mC[0m: [32m[Corrected] [0mLayout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element when opening brace is on a separate line from the first hash element.
:requests => [{ :indexName => 'theIndexName' }, { :indexName => 'theIndexName2', :type => 'facet', :facet => 'theFacet' }, { :indexName => 'theIndexName', :type => 'default' }], :strategy => 'stopIfEnoughMatches' })
                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:828:61: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",  )
                                                            ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:828:73: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",  )
                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:828:75: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",  )
                                                                          ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:828:86: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",  )
                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:828:87: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",  )
                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:828:87: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",  )
                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:830:121: [33mC[0m: Layout/LineLength: Line is too long. [128/120]
      '{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet"}],"strategy":"stopIfEnoughMatches"}', res.body
                                                                                                                        ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:832:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:832:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({}), res.body)
                 ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:832:199: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}', res.body)
                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:833:163: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                             :requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', 
                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:834:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:query => 'theQuery', :maxFacetHits => 50 }], :strategy => 'stopIfEnoughMatches' 
^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:834:81: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
:query => 'theQuery', :maxFacetHits => 50 }], :strategy => 'stopIfEnoughMatches' 
                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:835:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Indent the right brace the same as the first position after the preceding left parenthesis.
})
^
[36mtest/methods/requests/search_test.rb[0m:837:45: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_with_http_info({ 
                                            ^
[36mtest/methods/requests/search_test.rb[0m:837:61: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                            ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:837:73: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:837:75: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                          ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:837:87: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                      ^^^
[36mtest/methods/requests/search_test.rb[0m:837:121: [33mC[0m: Layout/LineLength: Line is too long. [126/120]
                                                             :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }] })
                                                                                                                        ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:837:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [188/120]
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:837:137: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:837:154: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                                                                                         ^^^^^
[36mtest/methods/requests/search_test.rb[0m:837:160: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:837:181: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:837:182: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:837:186: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:837:187: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_for_facet_values_with_http_info("indexName",  "facetName",    { :params => "query=foo&facetFilters=['bar']",  :facetQuery => "foo",  :maxFacetHits => 42,   }, )
                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:838:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }], :strategy => 'stopIfEnoughMatches' })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:838:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [296/120]
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }], :strategy => 'stopIfEnoughMatches' })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:838:295: [33mC[0m: [32m[Corrected] [0mLayout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element when opening brace is on a separate line from the first hash element.
:requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }], :strategy => 'stopIfEnoughMatches' })
                                                                                                                                                                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:841:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:843:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:843:270: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}', res.body)
                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:846:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_rules_with_http_info("indexName",    { :query => "something",   }, )
                                                 ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:846:62: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_rules_with_http_info("indexName",    { :query => "something",   }, )
                                                             ^^^
[36mtest/methods/requests/search_test.rb[0m:846:78: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_rules_with_http_info("indexName",    { :query => "something",   }, )
                                                                             ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:846:89: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_rules_with_http_info("indexName",    { :query => "something",   }, )
                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:846:90: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_rules_with_http_info("indexName",    { :query => "something",   }, )
                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:846:94: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_rules_with_http_info("indexName",    { :query => "something",   }, )
                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:846:95: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_rules_with_http_info("indexName",    { :query => "something",   }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:847:93: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                             :requests => [{ :indexName => 'theIndexName' }, 
                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:848:1: [33mC[0m: [32m[Corrected] [0mLayout/ArrayAlignment: Align the elements of an array literal if they span more than one line.
{ :indexName => 'theIndexName2', :type => 'facet', :facet => 'theFacet' }, { :indexName => 'theIndexName', :type => 'default' }], :strategy => 'stopIfEnoughMatches' 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:848:121: [33mC[0m: Layout/LineLength: Line is too long. [162/120]
                                             :requests => [{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery',
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:848:165: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
{ :indexName => 'theIndexName2', :type => 'facet', :facet => 'theFacet' }, { :indexName => 'theIndexName', :type => 'default' }], :strategy => 'stopIfEnoughMatches' 
                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:849:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArrayElementIndentation: Use 2 spaces for indentation in an array, relative to the first position after the preceding left parenthesis.
{ :indexName => 'theIndexName', :facetFilters => 'mySearch:filters', :reRankingApplyFilter => 'mySearch:filters', :tagFilters => 'mySearch:filters', :numericFilters => 'mySearch:filters', :optionalFilters => 'mySearch:filters' }, { :indexName => 'theIndexName', :facetFilters => ['mySearch:filters', ['mySearch:filters']], :reRankingApplyFilter => ['mySearch:filters', ['mySearch:filters']], :tagFilters => ['mySearch:filters', ['mySearch:filters']], :numericFilters => ['mySearch:filters', ['mySearch:filters']], :optionalFilters => ['mySearch:filters', ['mySearch:filters']] }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:849:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Indent the right brace the same as the first position after the preceding left parenthesis.
})
^
[36mtest/methods/requests/search_test.rb[0m:849:121: [33mC[0m: Layout/LineLength: Line is too long. [141/120]
                                                             :query => 'theQuery', :maxFacetHits => 50 }], :strategy => 'stopIfEnoughMatches'
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:849:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [582/120]
{ :indexName => 'theIndexName', :facetFilters => 'mySearch:filters', :reRankingApplyFilter => 'mySearch:filters', :tagFilters => 'mySearch:filters', :numericFilters => 'mySearch:filters', :optionalFilters => 'mySearch:filters' }, { :indexName => 'theIndexName', :facetFilters => ['mySearch:filters', ['mySearch:filters']], :reRankingApplyFilter => ['mySearch:filters', ['mySearch:filters']], :tagFilters => ['mySearch:filters', ['mySearch:filters']], :numericFilters => ['mySearch:filters', ['mySearch:filters']], :optionalFilters => ['mySearch:filters', ['mySearch:filters']] }] })

[36mtest/methods/requests/search_test.rb[0m:849:579: [33mC[0m: [32m[Corrected] [0mLayout/MultilineArrayBraceLayout: The closing array brace must be on the line after the last array element when the opening brace is on a separate line from the first array element.
{ :indexName => 'theIndexName', :facetFilters => 'mySearch:filters', :reRankingApplyFilter => 'mySearch:filters', :tagFilters => 'mySearch:filters', :numericFilters => 'mySearch:filters', :optionalFilters => 'mySearch:filters' }, { :indexName => 'theIndexName', :facetFilters => ['mySearch:filters', ['mySearch:filters']], :reRankingApplyFilter => ['mySearch:filters', ['mySearch:filters']], :tagFilters => ['mySearch:filters', ['mySearch:filters']], :numericFilters => ['mySearch:filters', ['mySearch:filters']], :optionalFilters => ['mySearch:filters', ['mySearch:filters']] }] })

[36mtest/methods/requests/search_test.rb[0m:850:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"query":"something"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:854:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters"]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}', res.body)

[36mtest/methods/requests/search_test.rb[0m:854:562: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters"]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}', res.body)

[36mtest/methods/requests/search_test.rb[0m:855:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:855:57: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_single_index_with_http_info("indexName",  )
                                                        ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:855:68: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_single_index_with_http_info("indexName",  )
                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:855:69: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_single_index_with_http_info("indexName",  )
                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:855:69: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_single_index_with_http_info("indexName",  )
                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:855:121: [33mC[0m: Layout/LineLength: Line is too long. [194/120]
      '{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:859:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({}), res.body)
                 ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:859:86: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_with_http_info({ :requests => [{ :advancedSyntax => true, 
                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:860:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:advancedSyntaxFeatures => ['exactPhrase'], :allowTyposOnNumericTokens => true, :alternativesAsExact => ['multiWordsSynonym'], :analytics => true, :analyticsTags => [''], :aroundLatLng => '', :aroundLatLngViaIP => true, :aroundPrecision => 0, :aroundRadius => 'all', :attributeCriteriaComputedByMinProximity => true, :attributesForFaceting => [''], :attributesToHighlight => [''], :attributesToRetrieve => [''], :attributesToSnippet => [''], :clickAnalytics => true, :customRanking => [''], :decompoundQuery => true, :disableExactOnAttributes => [''], :disableTypoToleranceOnAttributes => [''], :distinct => 0, :enableABTest => true, :enablePersonalization => true, :enableReRanking => true, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :explain => ['foo', 'bar'], :facetFilters => [''], :facetingAfterDistinct => true, :facets => [''], :filters => '', :getRankingInfo => true, :highlightPostTag => '', :highlightPreTag => '', :hitsPerPage => 0, :ignorePlurals => false, :indexName => 'theIndexName', :insideBoundingBox => [[47.3165, 4.9665, 47.3424, 5.0201], [40.9234, 2.1185, 38.643, 1.9916]], :insidePolygon => [[47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9], [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104]], :keepDiacriticsOnCharacters => '', :length => 0, :maxValuesPerFacet => 0, :minProximity => 0, :minWordSizefor1Typo => 0, :minWordSizefor2Typos => 0, :minimumAroundRadius => 0, :naturalLanguages => [''], :numericFilters => [''], :offset => 0, :optionalFilters => [''], :optionalWords => [''], :page => 0, :percentileComputation => true, :personalizationImpact => 0, :query => '', :queryLanguages => [''], :queryType => 'prefixAll', :ranking => [''], :reRankingApplyFilter => [''], :relevancyStrictness => 0, :removeStopWords => true, :removeWordsIfNoResults => 'allOptional', :renderingContent => { :facetOrdering => { :facets => { :order => ['a', 'b'] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :responseFields => [''], :restrictHighlightAndSnippetArrays => true, :restrictSearchableAttributes => [''], :ruleContexts => [''], :similarQuery => '', :snippetEllipsisText => '', :sortFacetValuesBy => '', :sumOrFiltersScores => true, :synonyms => true, :tagFilters => [''], :type => 'default', :typoTolerance => 'min', :userToken => '' }] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:860:767: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
:advancedSyntaxFeatures => ['exactPhrase'], :allowTyposOnNumericTokens => true, :alternativesAsExact => ['multiWordsSynonym'], :analytics => true, :analyticsTags => [''], :aroundLatLng => '', :aroundLatLngViaIP => true, :aroundPrecision => 0, :aroundRadius => 'all', :attributeCriteriaComputedByMinProximity => true, :attributesForFaceting => [''], :attributesToHighlight => [''], :attributesToRetrieve => [''], :attributesToSnippet => [''], :clickAnalytics => true, :customRanking => [''], :decompoundQuery => true, :disableExactOnAttributes => [''], :disableTypoToleranceOnAttributes => [''], :distinct => 0, :enableABTest => true, :enablePersonalization => true, :enableReRanking => true, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :explain => ['foo', 'bar'], :facetFilters => [''], :facetingAfterDistinct => true, :facets => [''], :filters => '', :getRankingInfo => true, :highlightPostTag => '', :highlightPreTag => '', :hitsPerPage => 0, :ignorePlurals => false, :indexName => 'theIndexName', :insideBoundingBox => [[47.3165, 4.9665, 47.3424, 5.0201], [40.9234, 2.1185, 38.643, 1.9916]], :insidePolygon => [[47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9], [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104]], :keepDiacriticsOnCharacters => '', :length => 0, :maxValuesPerFacet => 0, :minProximity => 0, :minWordSizefor1Typo => 0, :minWordSizefor2Typos => 0, :minimumAroundRadius => 0, :naturalLanguages => [''], :numericFilters => [''], :offset => 0, :optionalFilters => [''], :optionalWords => [''], :page => 0, :percentileComputation => true, :personalizationImpact => 0, :query => '', :queryLanguages => [''], :queryType => 'prefixAll', :ranking => [''], :reRankingApplyFilter => [''], :relevancyStrictness => 0, :removeStopWords => true, :removeWordsIfNoResults => 'allOptional', :renderingContent => { :facetOrdering => { :facets => { :order => ['a', 'b'] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :responseFields => [''], :restrictHighlightAndSnippetArrays => true, :restrictSearchableAttributes => [''], :ruleContexts => [''], :similarQuery => '', :snippetEllipsisText => '', :sortFacetValuesBy => '', :sumOrFiltersScores => true, :synonyms => true, :tagFilters => [''], :type => 'default', :typoTolerance => 'min', :userToken => '' }] })

[36mtest/methods/requests/search_test.rb[0m:860:1875: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
:advancedSyntaxFeatures => ['exactPhrase'], :allowTyposOnNumericTokens => true, :alternativesAsExact => ['multiWordsSynonym'], :analytics => true, :analyticsTags => [''], :aroundLatLng => '', :aroundLatLngViaIP => true, :aroundPrecision => 0, :aroundRadius => 'all', :attributeCriteriaComputedByMinProximity => true, :attributesForFaceting => [''], :attributesToHighlight => [''], :attributesToRetrieve => [''], :attributesToSnippet => [''], :clickAnalytics => true, :customRanking => [''], :decompoundQuery => true, :disableExactOnAttributes => [''], :disableTypoToleranceOnAttributes => [''], :distinct => 0, :enableABTest => true, :enablePersonalization => true, :enableReRanking => true, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :explain => ['foo', 'bar'], :facetFilters => [''], :facetingAfterDistinct => true, :facets => [''], :filters => '', :getRankingInfo => true, :highlightPostTag => '', :highlightPreTag => '', :hitsPerPage => 0, :ignorePlurals => false, :indexName => 'theIndexName', :insideBoundingBox => [[47.3165, 4.9665, 47.3424, 5.0201], [40.9234, 2.1185, 38.643, 1.9916]], :insidePolygon => [[47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9], [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104]], :keepDiacriticsOnCharacters => '', :length => 0, :maxValuesPerFacet => 0, :minProximity => 0, :minWordSizefor1Typo => 0, :minWordSizefor2Typos => 0, :minimumAroundRadius => 0, :naturalLanguages => [''], :numericFilters => [''], :offset => 0, :optionalFilters => [''], :optionalWords => [''], :page => 0, :percentileComputation => true, :personalizationImpact => 0, :query => '', :queryLanguages => [''], :queryType => 'prefixAll', :ranking => [''], :reRankingApplyFilter => [''], :relevancyStrictness => 0, :removeStopWords => true, :removeWordsIfNoResults => 'allOptional', :renderingContent => { :facetOrdering => { :facets => { :order => ['a', 'b'] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :responseFields => [''], :restrictHighlightAndSnippetArrays => true, :restrictSearchableAttributes => [''], :ruleContexts => [''], :similarQuery => '', :snippetEllipsisText => '', :sortFacetValuesBy => '', :sumOrFiltersScores => true, :synonyms => true, :tagFilters => [''], :type => 'default', :typoTolerance => 'min', :userToken => '' }] })

[36mtest/methods/requests/search_test.rb[0m:862:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArrayElementIndentation: Use 2 spaces for indentation in an array, relative to the start of the line where the left square bracket is.
{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }], :strategy => 'stopIfEnoughMatches' 
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:862:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [280/120]
{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }], :strategy => 'stopIfEnoughMatches' 
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:862:243: [33mC[0m: [32m[Corrected] [0mLayout/MultilineArrayBraceLayout: The closing array brace must be on the line after the last array element when the opening brace is on a separate line from the first array element.
{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }], :strategy => 'stopIfEnoughMatches' 
                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:862:280: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
{ :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', :query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }], :strategy => 'stopIfEnoughMatches' 
                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:863:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Indent the right brace the same as the first position after the preceding left parenthesis.
})
^
[36mtest/methods/requests/search_test.rb[0m:863:121: [33mC[0m: Layout/LineLength: Line is too long. [223/120]
                                                           { :indexName => 'theIndexName2', :type => 'facet', :facet => 'theFacet' }, { :indexName => 'theIndexName', :type => 'default' }], :strategy => 'stopIfEnoughMatches'
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:864:57: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                        ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:864:69: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                    ^^^
[36mtest/methods/requests/search_test.rb[0m:864:85: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                    ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:864:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:864:111: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:864:113: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:864:117: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:864:118: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                     ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:864:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [143/120]
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:864:132: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:864:133: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:864:137: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:864:138: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:864:141: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:864:142: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_single_index_with_http_info("indexName",    { :query => "myQuery",  :facetFilters =>   [ "tags:algolia",   ],  }, )
                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:865:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesForFaceting":[""],"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"customRanking":[""],"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","explain":["foo","bar"],"facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":0,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"keepDiacriticsOnCharacters":"","length":0,"maxValuesPerFacet":0,"minProximity":0,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":0,"naturalLanguages":[""],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":[""],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:865:2115: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesForFaceting":[""],"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"customRanking":[""],"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","explain":["foo","bar"],"facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":0,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"keepDiacriticsOnCharacters":"","length":0,"maxValuesPerFacet":0,"minProximity":0,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":0,"naturalLanguages":[""],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":[""],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}', res.body)

[36mtest/methods/requests/search_test.rb[0m:868:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"query":"myQuery","facetFilters":["tags:algolia"]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:869:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:869:121: [33mC[0m: Layout/LineLength: Line is too long. [204/120]
      '{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:870:151: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                               { :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery', 
                                                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:871:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }
^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:872:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArrayElementIndentation: Indent the right bracket the same as the start of the line where the left bracket is.
], :strategy => 'stopIfEnoughMatches'
^
[36mtest/methods/requests/search_test.rb[0m:873:53: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_synonyms_with_http_info("indexName",  )
                                                    ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:873:64: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_synonyms_with_http_info("indexName",  )
                                                               ^
[36mtest/methods/requests/search_test.rb[0m:873:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_synonyms_with_http_info("indexName",  )
                                                                ^
[36mtest/methods/requests/search_test.rb[0m:873:65: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_synonyms_with_http_info("indexName",  )
                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:874:3: [33mC[0m: Metrics/MethodLength: Method has too many lines. [11/10]
  def test_search5 [33m...[0m
  ^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:875:159: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                             { :indexName => 'theIndexName', :facetFilters => 'mySearch:filters', :reRankingApplyFilter => 'mySearch:filters', 
                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:876:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:tagFilters => 'mySearch:filters', :numericFilters => 'mySearch:filters', :optionalFilters => 'mySearch:filters' }, { :indexName => 'theIndexName', :facetFilters => ['mySearch:filters', ['mySearch:filters']], :reRankingApplyFilter => ['mySearch:filters', ['mySearch:filters']], :tagFilters => ['mySearch:filters', ['mySearch:filters']], :numericFilters => ['mySearch:filters', ['mySearch:filters']], :optionalFilters => ['mySearch:filters', ['mySearch:filters']] }
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:877:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArrayElementIndentation: Indent the right bracket the same as the first position after the preceding left parenthesis.
] })
^
[36mtest/methods/requests/search_test.rb[0m:877:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({}), res.body)
                 ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:877:121: [33mC[0m: Layout/LineLength: Line is too long. [150/120]
                                               { :indexName => 'theIndexName', :type => 'facet', :facet => 'theFacet', :facetQuery => 'theFacetQuery',
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:878:121: [33mC[0m: Layout/LineLength: Line is too long. [187/120]
                                                 :query => 'theQuery', :maxFacetHits => 50 }, { :indexName => 'theIndexName', :query => 'myQuery', :hitsPerPage => 50, :type => 'default' }
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:879:75: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_dictionary_entries_with_http_info('compounds', 
                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:880:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :query => 'foo', :page => 4, :hitsPerPage => 2, :language => 'fr' })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:882:53: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                    ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:882:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:882:68: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                   ^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:882:89: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:882:94: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                                             ^^^
[36mtest/methods/requests/search_test.rb[0m:882:110: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                                                             ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:882:119: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:882:120: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:882:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [126/120]
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                                                                        ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:882:124: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:882:125: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_synonyms_with_http_info("indexName",   "altcorrection1", 10,  10,    { :query => "myQuery",   }, )
                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:883:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:885:121: [33mC[0m: Layout/LineLength: Line is too long. [275/120]
      '{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:886:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"query":"myQuery"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:891:53: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                    ^
[36mtest/methods/requests/search_test.rb[0m:891:53: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:891:67: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                  ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:891:74: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:891:92: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                                           ^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:891:109: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:891:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [149/120]
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:891:122: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:891:142: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:891:143: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:891:147: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:891:148: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.search_user_ids_with_http_info(  { :query => "test",  :clusterName => "theClusterName",  :page => 5,  :hitsPerPage => 10,   }, )
                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:892:121: [33mC[0m: Layout/LineLength: Line is too long. [158/120]
                                             { :indexName => 'theIndexName', :facetFilters => 'mySearch:filters', :reRankingApplyFilter => 'mySearch:filters',
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:893:121: [33mC[0m: Layout/LineLength: Line is too long. [511/120]
                                               :tagFilters => 'mySearch:filters', :numericFilters => 'mySearch:filters', :optionalFilters => 'mySearch:filters' }, { :indexName => 'theIndexName', :facetFilters => ['mySearch:filters', ['mySearch:filters']], :reRankingApplyFilter => ['mySearch:filters', ['mySearch:filters']], :tagFilters => ['mySearch:filters', ['mySearch:filters']], :numericFilters => ['mySearch:filters', ['mySearch:filters']], :optionalFilters => ['mySearch:filters', ['mySearch:filters']] }

[36mtest/methods/requests/search_test.rb[0m:895:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:895:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"query":"test","clusterName":"theClusterName","page":5,"hitsPerPage":10}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:898:86: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_for_facet_values_with_http_info('indexName', 'facetName', 
                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:899:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :params => "query=foo&facetFilters=['bar']", :facetQuery => 'foo', :maxFacetHits => 42 })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:899:121: [33mC[0m: Layout/LineLength: Line is too long. [567/120]
      '{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters"]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}', res.body

[36mtest/methods/requests/search_test.rb[0m:900:61: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                            ^
[36mtest/methods/requests/search_test.rb[0m:900:61: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:900:89: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:900:91: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:900:105: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:900:107: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                          ^^^^
[36mtest/methods/requests/search_test.rb[0m:900:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [171/120]
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:900:127: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:900:142: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:900:155: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:900:156: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:900:160: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:900:161: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:900:165: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:900:166: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:900:169: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:900:170: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },   },  }, )
                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:904:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true}}}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:906:121: [33mC[0m: Layout/LineLength: Line is too long. [2397/120]
                                                             :advancedSyntaxFeatures => ['exactPhrase'], :allowTyposOnNumericTokens => true, :alternativesAsExact => ['multiWordsSynonym'], :analytics => true, :analyticsTags => [''], :aroundLatLng => '', :aroundLatLngViaIP => true, :aroundPrecision => 0, :aroundRadius => 'all', :attributeCriteriaComputedByMinProximity => true, :attributesForFaceting => [''], :attributesToHighlight => [''], :attributesToRetrieve => [''], :attributesToSnippet => [''], :clickAnalytics => true, :customRanking => [''], :decompoundQuery => true, :disableExactOnAttributes => [''], :disableTypoToleranceOnAttributes => [''], :distinct => 0, :enableABTest => true, :enablePersonalization => true, :enableReRanking => true, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :explain => %w[foo bar], :facetFilters => [''], :facetingAfterDistinct => true, :facets => [''], :filters => '', :getRankingInfo => true, :highlightPostTag => '', :highlightPreTag => '', :hitsPerPage => 0, :ignorePlurals => false, :indexName => 'theIndexName', :insideBoundingBox => [[47.3165, 4.9665, 47.3424, 5.0201], [40.9234, 2.1185, 38.643, 1.9916]], :insidePolygon => [[47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9], [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104]], :keepDiacriticsOnCharacters => '', :length => 0, :maxValuesPerFacet => 0, :minProximity => 0, :minWordSizefor1Typo => 0, :minWordSizefor2Typos => 0, :minimumAroundRadius => 0, :naturalLanguages => [''], :numericFilters => [''], :offset => 0, :optionalFilters => [''], :optionalWords => [''], :page => 0, :percentileComputation => true, :personalizationImpact => 0, :query => '', :queryLanguages => [''], :queryType => 'prefixAll', :ranking => [''], :reRankingApplyFilter => [''], :relevancyStrictness => 0, :removeStopWords => true, :removeWordsIfNoResults => 'allOptional', :renderingContent => { :facetOrdering => { :facets => { :order => %w[a b] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :responseFields => [''], :restrictHighlightAndSnippetArrays => true, :restrictSearchableAttributes => [''], :ruleContexts => [''], :similarQuery => '', :snippetEllipsisText => '', :sortFacetValuesBy => '', :sumOrFiltersScores => true, :synonyms => true, :tagFilters => [''], :type => 'default', :typoTolerance => 'min', :userToken => '' }] })

[36mtest/methods/requests/search_test.rb[0m:909:61: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                            ^
[36mtest/methods/requests/search_test.rb[0m:909:61: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:909:89: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:909:91: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:909:107: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                          ^^^^
[36mtest/methods/requests/search_test.rb[0m:909:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [250/120]
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:909:127: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:909:142: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:909:155: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:909:156: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:909:161: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:909:174: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:909:176: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                               ^^^^
[36mtest/methods/requests/search_test.rb[0m:909:195: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:909:196: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:909:201: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:909:214: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:909:216: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                       ^^^^
[36mtest/methods/requests/search_test.rb[0m:909:234: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:909:235: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:909:239: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:909:240: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:909:244: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:909:245: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:909:248: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:909:249: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_dictionary_settings_with_http_info(  { :disableStandardEntries =>   { :plurals =>     { :fr => false,  :en => false,  :ru => true,   },  :stopwords =>     { :fr => false,   },  :compounds =>     { :ru => true,   },   },  }, )
                                                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:910:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [132/120]
                                                              { :query => 'foo', :page => 4, :hitsPerPage => 2, :language => 'fr' })
                                                                                                                        ^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:911:121: [33mC[0m: Layout/LineLength: Line is too long. [2120/120]
      '{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesForFaceting":[""],"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"customRanking":[""],"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","explain":["foo","bar"],"facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":0,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"keepDiacriticsOnCharacters":"","length":0,"maxValuesPerFacet":0,"minProximity":0,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":0,"naturalLanguages":[""],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":[""],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}', res.body

[36mtest/methods/requests/search_test.rb[0m:913:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:913:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [153/120]
    assert_equal(%q({"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}), res.body)
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:918:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :paginationLimitedTo => 10,   }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:918:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :paginationLimitedTo => 10,   }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:918:97: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :paginationLimitedTo => 10,   }, true,  )
                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:918:98: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :paginationLimitedTo => 10,   }, true,  )
                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:918:108: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :paginationLimitedTo => 10,   }, true,  )
                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:918:109: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :paginationLimitedTo => 10,   }, true,  )
                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:918:109: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :paginationLimitedTo => 10,   }, true,  )
                                                                                                            ^^
[36mtest/methods/requests/search_test.rb[0m:920:112: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                              { :query => 'foo', :page => 4, :hitsPerPage => 2, 
                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:921:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:language => 'fr' })
^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:922:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"paginationLimitedTo":10}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:926:69: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_single_index_with_http_info('indexName', 
                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:927:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :query => 'myQuery', :facetFilters => ['tags:algolia'] })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:927:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance => true,   }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:927:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance => true,   }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:927:93: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance => true,   }, true,  )
                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:927:94: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance => true,   }, true,  )
                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:927:104: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance => true,   }, true,  )
                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:927:105: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance => true,   }, true,  )
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:927:105: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance => true,   }, true,  )
                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:931:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"typoTolerance":true}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:936:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:936:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:936:86: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:936:88: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:936:90: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                                         ^^^^^
[36mtest/methods/requests/search_test.rb[0m:936:95: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:936:96: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:936:105: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:936:106: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:936:106: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :typoTolerance =>  "min",  }, true,  )
                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:940:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"typoTolerance":"min"}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:945:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals => true,   }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:945:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals => true,   }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:945:91: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_synonyms_with_http_info('indexName', 'altcorrection1', 10, 10, 
                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:945:93: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals => true,   }, true,  )
                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:945:94: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals => true,   }, true,  )
                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:945:104: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals => true,   }, true,  )
                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:945:105: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals => true,   }, true,  )
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:945:105: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals => true,   }, true,  )
                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:946:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :query => 'myQuery' })
^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:947:121: [33mC[0m: Layout/LineLength: Line is too long. [151/120]
                                                            { :params => "query=foo&facetFilters=['bar']", :facetQuery => 'foo', :maxFacetHits => 42 })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:949:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"ignorePlurals":true}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:954:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:954:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:954:86: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:954:88: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:954:92: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:954:93: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                            ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:954:102: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:954:103: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:954:107: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:954:108: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:954:117: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:954:118: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:954:118: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :ignorePlurals =>   [ "algolia",   ],  }, true,  )
                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:955:106: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.search_user_ids_with_http_info({ :query => 'test', :clusterName => 'theClusterName', 
                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:956:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:page => 5, :hitsPerPage => 10 })
^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:958:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"ignorePlurals":["algolia"]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:963:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords => true,   }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:963:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords => true,   }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:963:95: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords => true,   }, true,  )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:963:96: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords => true,   }, true,  )
                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:963:106: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords => true,   }, true,  )
                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:963:107: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords => true,   }, true,  )
                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:963:107: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords => true,   }, true,  )
                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:965:105: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.set_dictionary_settings_with_http_info({ :disableStandardEntries => { :plurals => { 
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:966:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
:fr => false, :en => false, :ru => true } } })
^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:966:41: [33mC[0m: [32m[Corrected] [0mLayout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element when opening brace is on a separate line from the first hash element.
:fr => false, :en => false, :ru => true } } })
                                        ^
[36mtest/methods/requests/search_test.rb[0m:967:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"removeStopWords":true}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:972:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:972:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:972:88: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:972:90: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:972:94: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:972:95: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                              ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:972:104: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:972:105: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:972:109: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:972:110: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:972:119: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                                                      ^
[36mtest/methods/requests/search_test.rb[0m:972:120: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:972:120: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:972:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [122/120]
    _, res = @client.set_settings_with_http_info("theIndexName",    { :removeStopWords =>   [ "algolia",   ],  }, true,  )
                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:975:91: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.set_dictionary_settings_with_http_info({ :disableStandardEntries => { 
                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:976:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Use 2 spaces for indentation in a hash, relative to the first position after the preceding left parenthesis.
:plurals => { :fr => false, :en => false, :ru => true }, :stopwords => { :fr => false }, :compounds => { :ru => true } } })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:976:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"removeStopWords":["algolia"]}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:976:120: [33mC[0m: [32m[Corrected] [0mLayout/MultilineHashBraceLayout: Closing hash brace must be on the line after the last hash element when opening brace is on a separate line from the first hash element.
:plurals => { :fr => false, :en => false, :ru => true }, :stopwords => { :fr => false }, :compounds => { :ru => true } } })
                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:976:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [123/120]
:plurals => { :fr => false, :en => false, :ru => true }, :stopwords => { :fr => false }, :compounds => { :ru => true } } })
                                                                                                                        ^^^
[36mtest/methods/requests/search_test.rb[0m:981:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}', res.body)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:981:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => true,   }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:981:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => true,   }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:981:88: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => true,   }, true,  )
                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:981:89: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => true,   }, true,  )
                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:981:99: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => true,   }, true,  )
                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:981:100: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => true,   }, true,  )
                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:981:100: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => true,   }, true,  )
                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:981:134: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}', res.body)
                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:985:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"distinct":true}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:990:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => 1,   }, true,  )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:990:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => 1,   }, true,  )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:990:85: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => 1,   }, true,  )
                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:990:86: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => 1,   }, true,  )
                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:990:96: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => 1,   }, true,  )
                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:990:97: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => 1,   }, true,  )
                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:990:97: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :distinct => 1,   }, true,  )
                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:994:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"distinct":1}), res.body)
                 ^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:996:102: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                              :fr => false, :en => false, :ru => true 
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:997:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Indent the right brace the same as the first position after the preceding left parenthesis.
} } })
^
[36mtest/methods/requests/search_test.rb[0m:999:50: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                 ^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:65: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                ^^^
[36mtest/methods/requests/search_test.rb[0m:999:95: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:999:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [2556/120]
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:121: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:999:123: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                          ^^
[36mtest/methods/requests/search_test.rb[0m:999:127: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:999:127: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                              ^^
[36mtest/methods/requests/search_test.rb[0m:999:129: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                ^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:142: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:999:143: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:999:188: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:999:225: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:999:248: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:999:250: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:999:254: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:999:254: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                             ^^
[36mtest/methods/requests/search_test.rb[0m:999:256: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                               ^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:275: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:999:276: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:999:330: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                         ^
[36mtest/methods/requests/search_test.rb[0m:999:357: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                    ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:364: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                           ^
[36mtest/methods/requests/search_test.rb[0m:999:389: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:999:391: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:999:395: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:999:396: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                           ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:405: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:999:406: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                     ^^
[36mtest/methods/requests/search_test.rb[0m:999:435: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^^
[36mtest/methods/requests/search_test.rb[0m:999:437: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^^
[36mtest/methods/requests/search_test.rb[0m:999:441: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:999:442: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:451: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:999:452: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:999:480: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:999:482: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                 ^^
[36mtest/methods/requests/search_test.rb[0m:999:486: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:999:487: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:496: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:999:497: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^^
[36mtest/methods/requests/search_test.rb[0m:999:524: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:526: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:530: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:531: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:540: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:541: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:574: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:576: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:580: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:581: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:590: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:591: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:618: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:620: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:624: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:625: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:634: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:635: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:662: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:664: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:680: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^^
[36mtest/methods/requests/search_test.rb[0m:999:682: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:701: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:710: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:711: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:715: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:716: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:721: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:738: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:740: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:999:744: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:999:745: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:754: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:755: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:787: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:813: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:815: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:834: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:843: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:844: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:849: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:999:877: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:879: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:883: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:884: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:893: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:894: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:927: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:929: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:933: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:934: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:943: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:944: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:984: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:986: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:990: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:991: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1000: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1001: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1036: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1038: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1042: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1043: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1052: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1053: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1074: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1107: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1135: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1158: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1184: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1186: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1188: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1221: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1230: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1253: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1263: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:999:1284: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:999:1310: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1328: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1330: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1334: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1335: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:1344: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1345: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1382: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1388: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1410: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1437: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1458: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1486: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1516: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1524: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1526: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1528: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1575: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1577: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1581: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:999:1582: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1591: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1592: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1613: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1615: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1619: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  ^
[36mtest/methods/requests/search_test.rb[0m:999:1620: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1629: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1630: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1662: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:999:1680: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1682: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1686: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1687: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1696: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1697: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1714: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1716: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1718: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1741: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1743: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1747: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1748: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1753: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1754: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1785: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1804: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1833: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1861: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1887: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1889: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1891: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1922: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1924: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1944: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1946: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1959: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:999:1961: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1973: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1975: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      ^^
[36mtest/methods/requests/search_test.rb[0m:999:1978: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1979: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1980: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1984: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1986: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1989: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1990: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1994: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:1995: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2008: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2010: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2020: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   ^^
[36mtest/methods/requests/search_test.rb[0m:999:2022: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2034: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2036: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2040: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2041: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2044: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2045: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2068: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2070: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2072: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2079: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2080: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2083: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2084: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2087: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2088: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2092: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2093: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2134: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2146: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2148: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2152: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2153: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2155: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2156: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2178: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2180: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2184: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2185: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2194: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2195: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2244: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2268: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2270: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2274: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2275: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2280: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2281: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2303: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2305: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2324: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2326: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2330: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2331: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2336: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:999:2337: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2341: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2342: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2369: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                ^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:2375: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2401: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2407: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2431: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2438: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2464: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2491: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2493: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2497: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2498: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2503: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2504: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2520: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2522: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2538: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         ^^^^^^
[36mtest/methods/requests/search_test.rb[0m:999:2544: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2545: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2549: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:999:2550: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2554: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:999:2555: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.set_settings_with_http_info("theIndexName",    { :advancedSyntax => true,  :advancedSyntaxFeatures =>   [  "exactPhrase",  ], :allowCompressionOfIntegerArray => true,  :allowTyposOnNumericTokens => true,  :alternativesAsExact =>   [  "singleWordSynonym",  ], :attributeCriteriaComputedByMinProximity => true,  :attributeForDistinct => "test",  :attributesForFaceting =>   [ "algolia",   ], :attributesToHighlight =>   [ "algolia",   ], :attributesToRetrieve =>   [ "algolia",   ], :attributesToSnippet =>   [ "algolia",   ], :attributesToTransliterate =>   [ "algolia",   ], :camelCaseAttributes =>   [ "algolia",   ], :customNormalization =>     { :algolia =>     { :aloglia => "aglolia",   },   },  :customRanking =>   [ "algolia",   ], :decompoundQuery => false,  :decompoundedAttributes =>     { :algolia => "aloglia",   },  :disableExactOnAttributes =>   [ "algolia",   ], :disablePrefixOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnAttributes =>   [ "algolia",   ], :disableTypoToleranceOnWords =>   [ "algolia",   ], :distinct => 3,  :enablePersonalization => true,  :enableReRanking => false,  :enableRules => true,  :exactOnSingleWordQuery =>  "attribute", :highlightPreTag => "<span>",  :highlightPostTag => "</span>",  :hitsPerPage => 10,  :ignorePlurals => false,  :indexLanguages =>   [ "algolia",   ], :keepDiacriticsOnCharacters => "abc",  :maxFacetHits => 20,  :maxValuesPerFacet => 30,  :minProximity => 6,  :minWordSizefor1Typo => 5,  :minWordSizefor2Typos => 11,  :mode =>  "neuralSearch", :numericAttributesForFiltering =>   [ "algolia",   ], :optionalWords =>   [ "myspace",   ], :paginationLimitedTo => 0,  :queryLanguages =>   [ "algolia",   ], :queryType =>  "prefixLast", :ranking =>   [ "geo",   ], :reRankingApplyFilter => "mySearch:filters",  :relevancyStrictness => 10,  :removeStopWords => false,  :removeWordsIfNoResults =>  "lastWords", :renderingContent =>   { :facetOrdering =>   { :facets =>   { :order =>   [ "a",  "b",   ],  }, :values =>     { :a =>   { :order =>   [ "b",   ], :sortRemainingBy =>  "count",  },  },   },  }, :replaceSynonymsInHighlight => true,  :replicas =>   [ "",   ], :responseFields =>   [ "algolia",   ], :restrictHighlightAndSnippetArrays => true,  :searchableAttributes =>   [ "foo",   ], :semanticSearch =>   { :eventSources =>   [ "foo",   ],  }, :separatorsToIndex => "bar",  :snippetEllipsisText => "---",  :sortFacetValuesBy => "date",  :typoTolerance => false,  :unretrievableAttributes =>   [ "foo",   ], :userData =>     { :user => "data",   },   }, )

[36mtest/methods/requests/search_test.rb[0m:1003:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["algolia"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["algolia"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}), res.body)

[36mtest/methods/requests/search_test.rb[0m:1003:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [2015/120]
    assert_equal(%q({"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["algolia"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["algolia"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}), res.body)

[36mtest/methods/requests/search_test.rb[0m:1007:104: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                              :plurals => { :fr => false, :en => false, 
                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:1008:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:ru => true }, :stopwords => { :fr => false }, :compounds => { :ru => true } 
^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1008:52: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                   ^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1008:63: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                              ^^^
[36mtest/methods/requests/search_test.rb[0m:1008:74: [33mC[0m: [32m[Corrected] [0mLayout/SpaceAroundOperators: Operator [33m=>[0m should be surrounded by a single space.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                         ^^
[36mtest/methods/requests/search_test.rb[0m:1008:76: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                           ^^
[36mtest/methods/requests/search_test.rb[0m:1008:77: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
:ru => true }, :stopwords => { :fr => false }, :compounds => { :ru => true } 
                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:1008:79: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1008:80: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:1008:80: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideArrayLiteralBrackets: Do not use space inside array brackets.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                               ^^
[36mtest/methods/requests/search_test.rb[0m:1008:82: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                 ^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1008:91: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                          ^
[36mtest/methods/requests/search_test.rb[0m:1008:93: [33mC[0m: [32m[Corrected] [0mStyle/StringLiterals: Prefer single-quoted strings when you don't need string interpolation or special symbols.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                            ^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1008:104: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArrayLiteral: Avoid comma after the last item of an array.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:1008:105: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                        ^
[36mtest/methods/requests/search_test.rb[0m:1008:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [191/120]
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1008:127: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                              ^
[36mtest/methods/requests/search_test.rb[0m:1008:160: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                               ^
[36mtest/methods/requests/search_test.rb[0m:1008:184: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInHashLiteral: Avoid comma after the last item of a hash.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                       ^
[36mtest/methods/requests/search_test.rb[0m:1008:185: [33mC[0m: [32m[Corrected] [0mLayout/ExtraSpacing: Unnecessary spacing detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                        ^^
[36mtest/methods/requests/search_test.rb[0m:1008:189: [33mC[0m: [32m[Corrected] [0mStyle/TrailingCommaInArguments: Avoid comma after the last parameter of a method call.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                            ^
[36mtest/methods/requests/search_test.rb[0m:1008:190: [33mC[0m: [32m[Corrected] [0mLayout/SpaceInsideParens: Space inside parentheses detected.
    _, res = @client.update_api_key_with_http_info("myApiKey",    { :acl =>   [  "search",  "addObject",  ], :validity => 300,  :maxQueriesPerIPPerHour => 100,  :maxHitsPerQuery => 20,   }, )
                                                                                                                                                                                             ^
[36mtest/methods/requests/search_test.rb[0m:1009:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstHashElementIndentation: Indent the right brace the same as the first position after the preceding left parenthesis.
} })
^
[36mtest/methods/requests/search_test.rb[0m:1012:18: [33mC[0m: [32m[Corrected] [0mStyle/RedundantPercentQ: Use [33m%q[0m only for strings that contain both single quotes and double quotes.
    assert_equal(%q({"acl":["search","addObject"],"validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}), res.body)
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1012:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [127/120]
    assert_equal(%q({"acl":["search","addObject"],"validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}), res.body)
                                                                                                                        ^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1014:1: [33mC[0m: [32m[Corrected] [0mLayout/EmptyLinesAroundClassBody: Extra empty line detected at class body end.
[36mtest/methods/requests/search_test.rb[0m:1015:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:1026:121: [33mC[0m: Layout/LineLength: Line is too long. [152/120]
                                                                            :ru => true }, :stopwords => { :fr => false }, :compounds => { :ru => true }
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1032:121: [33mC[0m: Layout/LineLength: Line is too long. [139/120]
      '{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}', res.body
                                                                                                                        ^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1040:102: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.set_settings_with_http_info('theIndexName', { :removeStopWords => ['algolia'] }, 
                                                                                                     ^
[36mtest/methods/requests/search_test.rb[0m:1041:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
true)
^^^^
[36mtest/methods/requests/search_test.rb[0m:1068:65: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.set_settings_with_http_info('theIndexName', 
                                                                ^
[36mtest/methods/requests/search_test.rb[0m:1069:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :advancedSyntax => true, :advancedSyntaxFeatures => ['exactPhrase'], :allowCompressionOfIntegerArray => true, :allowTyposOnNumericTokens => true, :alternativesAsExact => ['singleWordSynonym'], :attributeCriteriaComputedByMinProximity => true, :attributeForDistinct => 'test', :attributesForFaceting => ['algolia'], :attributesToHighlight => ['algolia'], :attributesToRetrieve => ['algolia'], :attributesToSnippet => ['algolia'], :attributesToTransliterate => ['algolia'], :camelCaseAttributes => ['algolia'], :customNormalization => { :algolia => { :aloglia => 'aglolia' } }, :customRanking => ['algolia'], :decompoundQuery => false, :decompoundedAttributes => { :algolia => 'aloglia' }, :disableExactOnAttributes => ['algolia'], :disablePrefixOnAttributes => ['algolia'], :disableTypoToleranceOnAttributes => ['algolia'], :disableTypoToleranceOnWords => ['algolia'], :distinct => 3, :enablePersonalization => true, :enableReRanking => false, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :highlightPreTag => '<span>', :highlightPostTag => '</span>', :hitsPerPage => 10, :ignorePlurals => false, :indexLanguages => ['algolia'], :keepDiacriticsOnCharacters => 'abc', :maxFacetHits => 20, :maxValuesPerFacet => 30, :minProximity => 6, :minWordSizefor1Typo => 5, :minWordSizefor2Typos => 11, :mode => 'neuralSearch', :numericAttributesForFiltering => ['algolia'], :optionalWords => ['myspace'], :paginationLimitedTo => 0, :queryLanguages => ['algolia'], :queryType => 'prefixLast', :ranking => ['geo'], :reRankingApplyFilter => 'mySearch:filters', :relevancyStrictness => 10, :removeStopWords => false, :removeWordsIfNoResults => 'lastWords', :renderingContent => { :facetOrdering => { :facets => { :order => ['a', 'b'] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :replicas => [''], :responseFields => ['algolia'], :restrictHighlightAndSnippetArrays => true, :searchableAttributes => ['foo'], :semanticSearch => { :eventSources => ['foo'] }, :separatorsToIndex => 'bar', :snippetEllipsisText => '---', :sortFacetValuesBy => 'date', :typoTolerance => false, :unretrievableAttributes => ['foo'], :userData => { :user => 'data' } })

[36mtest/methods/requests/search_test.rb[0m:1069:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [2215/120]
{ :advancedSyntax => true, :advancedSyntaxFeatures => ['exactPhrase'], :allowCompressionOfIntegerArray => true, :allowTyposOnNumericTokens => true, :alternativesAsExact => ['singleWordSynonym'], :attributeCriteriaComputedByMinProximity => true, :attributeForDistinct => 'test', :attributesForFaceting => ['algolia'], :attributesToHighlight => ['algolia'], :attributesToRetrieve => ['algolia'], :attributesToSnippet => ['algolia'], :attributesToTransliterate => ['algolia'], :camelCaseAttributes => ['algolia'], :customNormalization => { :algolia => { :aloglia => 'aglolia' } }, :customRanking => ['algolia'], :decompoundQuery => false, :decompoundedAttributes => { :algolia => 'aloglia' }, :disableExactOnAttributes => ['algolia'], :disablePrefixOnAttributes => ['algolia'], :disableTypoToleranceOnAttributes => ['algolia'], :disableTypoToleranceOnWords => ['algolia'], :distinct => 3, :enablePersonalization => true, :enableReRanking => false, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :highlightPreTag => '<span>', :highlightPostTag => '</span>', :hitsPerPage => 10, :ignorePlurals => false, :indexLanguages => ['algolia'], :keepDiacriticsOnCharacters => 'abc', :maxFacetHits => 20, :maxValuesPerFacet => 30, :minProximity => 6, :minWordSizefor1Typo => 5, :minWordSizefor2Typos => 11, :mode => 'neuralSearch', :numericAttributesForFiltering => ['algolia'], :optionalWords => ['myspace'], :paginationLimitedTo => 0, :queryLanguages => ['algolia'], :queryType => 'prefixLast', :ranking => ['geo'], :reRankingApplyFilter => 'mySearch:filters', :relevancyStrictness => 10, :removeStopWords => false, :removeWordsIfNoResults => 'lastWords', :renderingContent => { :facetOrdering => { :facets => { :order => ['a', 'b'] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :replicas => [''], :responseFields => ['algolia'], :restrictHighlightAndSnippetArrays => true, :searchableAttributes => ['foo'], :semanticSearch => { :eventSources => ['foo'] }, :separatorsToIndex => 'bar', :snippetEllipsisText => '---', :sortFacetValuesBy => 'date', :typoTolerance => false, :unretrievableAttributes => ['foo'], :userData => { :user => 'data' } })

[36mtest/methods/requests/search_test.rb[0m:1069:1725: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :advancedSyntax => true, :advancedSyntaxFeatures => ['exactPhrase'], :allowCompressionOfIntegerArray => true, :allowTyposOnNumericTokens => true, :alternativesAsExact => ['singleWordSynonym'], :attributeCriteriaComputedByMinProximity => true, :attributeForDistinct => 'test', :attributesForFaceting => ['algolia'], :attributesToHighlight => ['algolia'], :attributesToRetrieve => ['algolia'], :attributesToSnippet => ['algolia'], :attributesToTransliterate => ['algolia'], :camelCaseAttributes => ['algolia'], :customNormalization => { :algolia => { :aloglia => 'aglolia' } }, :customRanking => ['algolia'], :decompoundQuery => false, :decompoundedAttributes => { :algolia => 'aloglia' }, :disableExactOnAttributes => ['algolia'], :disablePrefixOnAttributes => ['algolia'], :disableTypoToleranceOnAttributes => ['algolia'], :disableTypoToleranceOnWords => ['algolia'], :distinct => 3, :enablePersonalization => true, :enableReRanking => false, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :highlightPreTag => '<span>', :highlightPostTag => '</span>', :hitsPerPage => 10, :ignorePlurals => false, :indexLanguages => ['algolia'], :keepDiacriticsOnCharacters => 'abc', :maxFacetHits => 20, :maxValuesPerFacet => 30, :minProximity => 6, :minWordSizefor1Typo => 5, :minWordSizefor2Typos => 11, :mode => 'neuralSearch', :numericAttributesForFiltering => ['algolia'], :optionalWords => ['myspace'], :paginationLimitedTo => 0, :queryLanguages => ['algolia'], :queryType => 'prefixLast', :ranking => ['geo'], :reRankingApplyFilter => 'mySearch:filters', :relevancyStrictness => 10, :removeStopWords => false, :removeWordsIfNoResults => 'lastWords', :renderingContent => { :facetOrdering => { :facets => { :order => ['a', 'b'] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :replicas => [''], :responseFields => ['algolia'], :restrictHighlightAndSnippetArrays => true, :searchableAttributes => ['foo'], :semanticSearch => { :eventSources => ['foo'] }, :separatorsToIndex => 'bar', :snippetEllipsisText => '---', :sortFacetValuesBy => 'date', :typoTolerance => false, :unretrievableAttributes => ['foo'], :userData => { :user => 'data' } })

[36mtest/methods/requests/search_test.rb[0m:1074:1: [33mC[0m: [32m[Corrected] [0mLayout/FirstArgumentIndentation: Indent the first argument one step more than the start of the previous line.
'{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["algolia"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["algolia"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}', res.body)

[36mtest/methods/requests/search_test.rb[0m:1074:1996: [33mC[0m: [32m[Corrected] [0mLayout/MultilineMethodCallBraceLayout: Closing method call brace must be on the line after the last argument when opening brace is on a separate line from the first argument.
'{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["algolia"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["algolia"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}', res.body)

[36mtest/methods/requests/search_test.rb[0m:1079:63: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    _, res = @client.update_api_key_with_http_info('myApiKey', 
                                                              ^
[36mtest/methods/requests/search_test.rb[0m:1080:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
{ :acl => ['search', 'addObject'], :validity => 300, :maxQueriesPerIPPerHour => 100, :maxHitsPerQuery => 20 })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1080:11: [33mC[0m: [32m[Corrected] [0mStyle/WordArray: Use [33m%w[0m or [33m%W[0m for an array of words.
{ :acl => ['search', 'addObject'], :validity => 300, :maxQueriesPerIPPerHour => 100, :maxHitsPerQuery => 20 })
          ^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1084:116: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
    assert_equal('{"acl":["search","addObject"],"validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}', 
                                                                                                                   ^
[36mtest/methods/requests/search_test.rb[0m:1085:1: [33mC[0m: [32m[Corrected] [0mLayout/ArgumentAlignment: Align the arguments of a method call if they span more than one line.
res.body)
^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1103:161: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                 { :advancedSyntax => true, :advancedSyntaxFeatures => ['exactPhrase'], :allowCompressionOfIntegerArray => true, 
                                                                                                                                                                ^
[36mtest/methods/requests/search_test.rb[0m:1104:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:allowTyposOnNumericTokens => true, :alternativesAsExact => ['singleWordSynonym'], :attributeCriteriaComputedByMinProximity => true, :attributeForDistinct => 'test', :attributesForFaceting => ['algolia'], :attributesToHighlight => ['algolia'], :attributesToRetrieve => ['algolia'], :attributesToSnippet => ['algolia'], :attributesToTransliterate => ['algolia'], :camelCaseAttributes => ['algolia'], :customNormalization => { :algolia => { :aloglia => 'aglolia' } }, :customRanking => ['algolia'], :decompoundQuery => false, :decompoundedAttributes => { :algolia => 'aloglia' }, :disableExactOnAttributes => ['algolia'], :disablePrefixOnAttributes => ['algolia'], :disableTypoToleranceOnAttributes => ['algolia'], :disableTypoToleranceOnWords => ['algolia'], :distinct => 3, :enablePersonalization => true, :enableReRanking => false, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :highlightPreTag => '<span>', :highlightPostTag => '</span>', :hitsPerPage => 10, :ignorePlurals => false, :indexLanguages => ['algolia'], :keepDiacriticsOnCharacters => 'abc', :maxFacetHits => 20, :maxValuesPerFacet => 30, :minProximity => 6, :minWordSizefor1Typo => 5, :minWordSizefor2Typos => 11, :mode => 'neuralSearch', :numericAttributesForFiltering => ['algolia'], :optionalWords => ['myspace'], :paginationLimitedTo => 0, :queryLanguages => ['algolia'], :queryType => 'prefixLast', :ranking => ['geo'], :reRankingApplyFilter => 'mySearch:filters', :relevancyStrictness => 10, :removeStopWords => false, :removeWordsIfNoResults => 'lastWords', :renderingContent => { :facetOrdering => { :facets => { :order => %w[a b] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :replicas => [''], :responseFields => ['algolia'], :restrictHighlightAndSnippetArrays => true, :searchableAttributes => ['foo'], :semanticSearch => { :eventSources => ['foo'] }, :separatorsToIndex => 'bar', :snippetEllipsisText => '---', :sortFacetValuesBy => 'date', :typoTolerance => false, :unretrievableAttributes => ['foo'], :userData => { :user => 'data' } })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1110:1: [33mC[0m: [32m[Corrected] [0mLayout/ClosingParenthesisIndentation: Indent [33m)[0m to column 4 (not 0)
)
^
[36mtest/methods/requests/search_test.rb[0m:1116:121: [33mC[0m: [32m[Corrected] [0mLayout/LineLength: Line is too long. [158/120]
                                                   { :acl => %w[search addObject], :validity => 300, :maxQueriesPerIPPerHour => 100, :maxHitsPerQuery => 20 })
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1121:121: [33mC[0m: Layout/LineLength: Line is too long. [160/120]
                                                 { :advancedSyntax => true, :advancedSyntaxFeatures => ['exactPhrase'], :allowCompressionOfIntegerArray => true,
                                                                                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
[36mtest/methods/requests/search_test.rb[0m:1122:121: [33mC[0m: Layout/LineLength: Line is too long. [2151/120]
                                                   :allowTyposOnNumericTokens => true, :alternativesAsExact => ['singleWordSynonym'], :attributeCriteriaComputedByMinProximity => true, :attributeForDistinct => 'test', :attributesForFaceting => ['algolia'], :attributesToHighlight => ['algolia'], :attributesToRetrieve => ['algolia'], :attributesToSnippet => ['algolia'], :attributesToTransliterate => ['algolia'], :camelCaseAttributes => ['algolia'], :customNormalization => { :algolia => { :aloglia => 'aglolia' } }, :customRanking => ['algolia'], :decompoundQuery => false, :decompoundedAttributes => { :algolia => 'aloglia' }, :disableExactOnAttributes => ['algolia'], :disablePrefixOnAttributes => ['algolia'], :disableTypoToleranceOnAttributes => ['algolia'], :disableTypoToleranceOnWords => ['algolia'], :distinct => 3, :enablePersonalization => true, :enableReRanking => false, :enableRules => true, :exactOnSingleWordQuery => 'attribute', :highlightPreTag => '<span>', :highlightPostTag => '</span>', :hitsPerPage => 10, :ignorePlurals => false, :indexLanguages => ['algolia'], :keepDiacriticsOnCharacters => 'abc', :maxFacetHits => 20, :maxValuesPerFacet => 30, :minProximity => 6, :minWordSizefor1Typo => 5, :minWordSizefor2Typos => 11, :mode => 'neuralSearch', :numericAttributesForFiltering => ['algolia'], :optionalWords => ['myspace'], :paginationLimitedTo => 0, :queryLanguages => ['algolia'], :queryType => 'prefixLast', :ranking => ['geo'], :reRankingApplyFilter => 'mySearch:filters', :relevancyStrictness => 10, :removeStopWords => false, :removeWordsIfNoResults => 'lastWords', :renderingContent => { :facetOrdering => { :facets => { :order => %w[a b] }, :values => { :a => { :order => ['b'], :sortRemainingBy => 'count' } } } }, :replaceSynonymsInHighlight => true, :replicas => [''], :responseFields => ['algolia'], :restrictHighlightAndSnippetArrays => true, :searchableAttributes => ['foo'], :semanticSearch => { :eventSources => ['foo'] }, :separatorsToIndex => 'bar', :snippetEllipsisText => '---', :sortFacetValuesBy => 'date', :typoTolerance => false, :unretrievableAttributes => ['foo'], :userData => { :user => 'data' } })

[36mtest/methods/requests/search_test.rb[0m:1127:101: [33mC[0m: [32m[Corrected] [0mLayout/TrailingWhitespace: Trailing whitespace detected.
                                                   { :acl => %w[search addObject], :validity => 300, 
                                                                                                    ^
[36mtest/methods/requests/search_test.rb[0m:1127:121: [33mC[0m: Layout/LineLength: Line is too long. [2001/120]
      '{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["algolia"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["algolia"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}', res.body

[36mtest/methods/requests/search_test.rb[0m:1128:1: [33mC[0m: [32m[Corrected] [0mLayout/HashAlignment: Align the keys of a hash literal if they span more than one line.
:maxQueriesPerIPPerHour => 100, :maxHitsPerQuery => 20 })
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

3 files inspected, [31m2750 offenses[0m detected, [36m2705 offenses[0m corrected

Tip: Based on detected gems, the following RuboCop extension libraries might be helpful:
  * rubocop-rake (https://rubygems.org/gems/rubocop-rake)

You can opt out of this message by adding the following to your config (see https://docs.rubocop.org/rubocop/extensions.html#extension-suggestions for more options):
  AllCops:
    SuggestExtensions: false
file:///app/scripts/dist/scripts/common.js:66
            throw new Error(`command failed: ${command}`);
                  ^

Error: command failed: cd /app/tests/output/ruby && bundle install && bundle exec rubocop -A
    at run [90m(file:///app/scripts/[39mdist/scripts/common.js:66:19[90m)[39m
[90m    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)[39m
    at async formatter [90m(file:///app/scripts/[39mdist/scripts/formatter.js:53:5[90m)[39m
    at async ctsGenerateMany [90m(file:///app/scripts/[39mdist/scripts/cts/generate.js:46:9[90m)[39m
    at async Command.<anonymous> [90m(file:///app/scripts/[39mdist/scripts/cli/index.js:105:5[90m)[39m

Node.js v20.10.0
