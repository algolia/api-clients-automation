{{#tests}}
@Test
fun `{{#lambda.replaceBacktick}}{{{testName}}}{{/lambda.replaceBacktick}}`() = runTest {
    {{#autoCreateClient}}
    val client = {{client}}(appId = "appId", apiKey = "apiKey",{{#hasRegionalHost}}region = "{{defaultRegion}}",{{/hasRegionalHost}})
    {{/autoCreateClient}}
    {{#steps}}
    {{#times}}
    for (i in 1..{{.}}) {
    {{/times}}
    {{#isError}}
    assertFails { 
        {{#dynamicTemplate}}{{/dynamicTemplate}}
    }.let { error ->  assertError(error, "{{{expectedError}}}") }
    {{/isError}}
    {{^isError}}
    {{#isCreateClient}}
    {{> tests/client/createClient}}
    {{/isCreateClient}}
    {{#isMethod}}
    client.runTest(
          call = {
            {{> tests/method}}
          },
          {{#match}}
          {{^testResponse}}
          intercept = {
            {{#testUserAgent}}
                val regexp = "{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}".toRegex()
                val header = it.headers["User-Agent"].orEmpty()
                assertTrue(actual = header.matches(regexp), message = "Expected $header to match the following regex: $regexp")
            {{/testUserAgent}}
            {{#testTimeouts}}
                assertEquals({{{match.parametersWithDataTypeMap.connectTimeout.value}}}, it.connectTimeout);
                assertEquals({{{match.parametersWithDataTypeMap.responseTimeout.value}}}, it.socketTimeout);
            {{/testTimeouts}}
            {{#testHost}}
                assertEquals("{{{match}}}", it.url.host);
            {{/testHost}}        
          }{{/testResponse}}{{#testResponse}}
            {{#isHelper}}response = {
            {{#matchIsJSON}}
              assertNotNull(it)
              JSONAssert.assertEquals("""{{{match.parameters}}}""", Json.encodeToString(Json.encodeToJsonElement(it)), JSONCompareMode.STRICT)
            {{/matchIsJSON}}
            {{^matchIsJSON}}
              {{#matchIsNull}}
                assertNull(it)
              {{/matchIsNull}}
              {{^matchIsNull}}
                assertEquals("""{{{match}}}""", it)
              {{/matchIsNull}}
            {{/matchIsJSON}}
            }{{/isHelper}}
            {{^isHelper}}response = {
                val response = Json.encodeToString(it)
                assertEquals("{{#lambda.escapeQuotes}}{{{match.parameters}}}{{/lambda.escapeQuotes}}", response)
            }{{/isHelper}}
            {{/testResponse}}
          {{/match}}
    )
    {{/isMethod}}
    {{/isError}}
    {{#times}}
    }
    {{/times}}
    {{/steps}}
}
{{/tests}}