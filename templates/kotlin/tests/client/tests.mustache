{{#tests}}
@Test
fun `{{#lambda.replaceBacktick}}{{{testName}}}{{/lambda.replaceBacktick}}`() = runTest {
    {{#autoCreateClient}}
    val client = {{client}}(appId = "appId", apiKey = "apiKey",{{#hasRegionalHost}}region = "{{defaultRegion}}",{{/hasRegionalHost}})
    {{/autoCreateClient}}
    {{#steps}}
    {{#times}}
    for (i in 1..{{.}}) {
    {{/times}}
    {{#isError}}
    assertFails { 
        {{#dynamicTemplate}}{{/dynamicTemplate}}
    }.let { error ->  assertError(error, "{{{expectedError}}}".replace("%localhost%", if (System.getenv("CI") == "true") "localhost" else "host.docker.internal")) }
    {{/isError}}
    {{^isError}}
    {{#isCreateClient}}
    {{> tests/client/createClient}}
    {{/isCreateClient}}
    {{#isMethod}}
    client.runTest(
          call = {
            {{> tests/method}}
          },
          {{^testResponse}}
          intercept = {
            {{#testUserAgent}}
                val regexp = {{#match}}{{> tests/param_value}}{{/match}}.toRegex()
                val header = it.headers["User-Agent"].orEmpty()
                assertTrue(actual = header.matches(regexp), message = "Expected $header to match the following regex: $regexp")
            {{/testUserAgent}}
            {{#testTimeouts}}
                assertEquals({{{matchConnectTimeout}}}, it.connectTimeout);
                assertEquals({{{matchResponseTimeout}}}, it.socketTimeout);
            {{/testTimeouts}}
            {{#testHost}}
                assertEquals({{#match}}{{> tests/param_value}}{{/match}}, it.url.host);
            {{/testHost}}        
          }{{/testResponse}}{{#testResponse}}
            {{#isHelper}}response = {
            {{^match.isPrimitive}}
              assertNotNull(it)
              JSONAssert.assertEquals("""{{{match.value}}}""", Json.encodeToString(Json.encodeToJsonElement(it)), JSONCompareMode.STRICT)
            {{/match.isPrimitive}}
            {{#match.isPrimitive}}
              {{#match.isNull}}
                assertNull(it)
              {{/match.isNull}}
              {{^match.isNull}} 
                assertEquals({{#match}}{{> tests/param_value}}{{/match}}, it)
              {{/match.isNull}}
            {{/match.isPrimitive}}
            }{{/isHelper}}
            {{^isHelper}}response = {
                val response = Json.encodeToString(it)
                assertEquals({{#match}}{{> tests/param_value}}{{/match}}, response)
            }{{/isHelper}}
            {{/testResponse}}
    )
    {{/isMethod}}
    {{/isError}}
    {{#times}}
    }
    {{/times}}
    {{/steps}}
}
{{/tests}}