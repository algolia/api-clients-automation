import kotlinx.serialization.*
import kotlinx.serialization.json.*
{{#vendorExtensions.x-map-parent}}
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import {{packageName}}.extensions.internal.*
{{/vendorExtensions.x-map-parent}}

/**
 * {{{description}}}{{^description}}{{classname}}{{/description}}
 *
{{#allVars}}
 * @param {{{name}}} {{{description}}}
{{/allVars}}
 */
{{#isDeprecated}}
@Deprecated(message = "This schema is deprecated.")
{{/isDeprecated}}
@Serializable{{#parent}}{{#isMap}}({{classname}}Serializer::class){{/isMap}}{{/parent}}
{{#additionalModelTypeAnnotations}}
{{{.}}}
{{/additionalModelTypeAnnotations}}
public data class {{classname}}(
{{#vendorExtensions.x-map-parent}}
{{#vars}}

{{> json_object_field}},
{{/vars}}

    val additionalProperties: Map<String, JsonElement>? = null,
{{/vendorExtensions.x-map-parent}}
{{^vendorExtensions.x-map-parent}}
{{#vars}}

{{> data_class_field}},
{{/vars}}
{{/vendorExtensions.x-map-parent}}    
){{^vendorExtensions.x-map-parent}}{{#parent}} : {{{.}}}{{/parent}}{{/vendorExtensions.x-map-parent}}{{> oneof_parent}}{{#vendorExtensions.x-has-data-class-body}} {
{{/vendorExtensions.x-has-data-class-body}}
{{#hasEnums}}
{{#vars}}
{{#isEnum}}
    /**
     * {{{description}}}
     *
     * Values: {{#allowableValues}}{{#enumVars}}{{&name}}{{^-last}},{{/-last}}{{/enumVars}}{{/allowableValues}}
     */
    @Serializable
    {{#nonPublicApi}}internal {{/nonPublicApi}}enum class {{{nameInPascalCase}}}(val value: {{^isContainer}}{{dataType}}{{/isContainer}}{{#isContainer}}String{{/isContainer}}) {
    {{#allowableValues}}
    {{#enumVars}}
        @SerialName(value = {{^isString}}"{{/isString}}{{{value}}}{{^isString}}"{{/isString}}) {{&name}}({{{value}}}){{^-last}},{{/-last}}{{#-last}};{{/-last}}
    {{/enumVars}}
    {{/allowableValues}}
    }{{#kotlinx_serialization}}{{#enumUnknownDefaultCase}}

    @Serializer(forClass = {{{nameInPascalCase}}}::class)
    internal object {{nameInPascalCase}}Serializer : KSerializer<{{nameInPascalCase}}> {
        override val descriptor = {{{dataType}}}.serializer().descriptor

        override fun deserialize(decoder: Decoder): {{nameInPascalCase}} {
            val value = decoder.decodeSerializableValue({{{dataType}}}.serializer())
            return {{nameInPascalCase}}.entries.firstOrNull { it.value == value }
                ?: {{nameInPascalCase}}.{{#allowableValues}}{{#enumVars}}{{#-last}}{{&name}}{{/-last}}{{/enumVars}}{{/allowableValues}}
        }

        override fun serialize(encoder: Encoder, value: {{nameInPascalCase}}) {
            encoder.encodeSerializableValue({{{dataType}}}.serializer(), value.value)
        }
    }{{/enumUnknownDefaultCase}}{{/kotlinx_serialization}}
{{/isEnum}}
{{/vars}}
{{/hasEnums}}
{{#vendorExtensions.x-has-data-class-body}}
}
{{/vendorExtensions.x-has-data-class-body}}
{{#vendorExtensions.x-map-parent}}


{{> json_object_serializer}}
{{/vendorExtensions.x-map-parent}}
