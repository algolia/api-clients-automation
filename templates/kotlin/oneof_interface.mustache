import {{packageName}}.exception.AlgoliaClientException
import {{packageName}}.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * {{{description}}}{{^description}}{{classname}}{{/description}}
 * 
 * Implementations:
 {{#vendorExtensions}}
 {{#x-one-of-list}}
 * - [{{{type}}}]{{^child}} - *[{{classname}}.of{{#x-one-of-explicit-name}}{{name}}{{/x-one-of-explicit-name}}]*{{/child}}
 {{/x-one-of-list}}
{{/vendorExtensions}}
 */
{{#isDeprecated}}
@Deprecated(message = "This schema is deprecated.")
{{/isDeprecated}}
{{#additionalModelTypeAnnotations}}
{{{.}}}
{{/additionalModelTypeAnnotations}}
@Serializable({{classname}}Serializer::class)
public sealed interface {{classname}} {
    {{#vendorExtensions}}
    {{#x-one-of-list}}
    {{^child}}

    @Serializable
    @JvmInline
    public value class {{name}}Value(public val value: {{{type}}}): {{classname}}
    {{/child}}    
    {{/x-one-of-list}}

    public companion object {
    {{#x-one-of-list}}
    {{^child}}

    /** [{{classname}}] as [{{{type}}}] Value. */
    public fun of{{#x-one-of-explicit-name}}{{name}}{{/x-one-of-explicit-name}}(value: {{{type}}}): {{classname}} {
        return {{name}}Value(value);
    }
    {{/child}}    
    {{/x-one-of-list}}
    {{/vendorExtensions}}
    }
}

internal class {{classname}}Serializer : JsonContentPolymorphicSerializer<{{classname}}>({{classname}}::class) {
    override fun selectDeserializer(element: JsonElement): DeserializationStrategy<{{classname}}> {
        return when {
            {{#vendorExtensions.x-one-of-list}}
            {{#isObject}}
            element is JsonObject{{#discriminators}} && element.containsKey("{{field}}"){{/discriminators}} -> {{{type}}}.serializer()
            {{/isObject}}
            {{#isList}}
            element is JsonArray -> {{{classname}}}.{{name}}Value.serializer()
            {{/isList}}
            {{#isEnum}}
            element is JsonPrimitive && element.isString -> {{{type}}}.serializer()
            {{/isEnum}}
            {{#isInteger}}
            element is JsonPrimitive && element.intOrNull != null -> {{{classname}}}.{{name}}Value.serializer()
            {{/isInteger}}
            {{#isLong}}
            element is JsonPrimitive && element.longOrNull != null -> {{{classname}}}.{{name}}Value.serializer()
            {{/isLong}}
            {{#isDouble}}
            element is JsonPrimitive && element.doubleOrNull != null -> {{{classname}}}.{{name}}Value.serializer()
            {{/isDouble}}
            {{#isBoolean}}
            element is JsonPrimitive && element.booleanOrNull != null -> {{{classname}}}.{{name}}Value.serializer()
            {{/isBoolean}}
            {{#isString}}
            element is JsonPrimitive && element.isString != null -> {{{classname}}}.{{name}}Value.serializer()
            {{/isString}}
            {{/vendorExtensions.x-one-of-list}}
            else -> throw AlgoliaClientException("Failed to deserialize json element: $element")
        }
    }
}
