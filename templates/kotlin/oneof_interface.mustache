import {{packageName}}.exception.AlgoliaClientException
import {{packageName}}.extensions.internal.*
import kotlinx.serialization.*
import kotlinx.serialization.builtins.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.*
import kotlin.jvm.JvmInline

/**
 * {{{description}}}{{^description}}{{classname}}{{/description}}
 * 
 * Implementations:
 {{#vendorExtensions}}
 {{#x-one-of-list}}
 * - [{{{type}}}]{{^child}} - *[{{classname}}.of{{#x-one-of-explicit-name}}{{name}}{{/x-one-of-explicit-name}}]*{{/child}}
 {{/x-one-of-list}}
{{/vendorExtensions}}
 */
{{#isDeprecated}}
@Deprecated(message = "This schema is deprecated.")
{{/isDeprecated}}
{{#additionalModelTypeAnnotations}}
{{{.}}}
{{/additionalModelTypeAnnotations}}
@Serializable({{classname}}Serializer::class)
public sealed interface {{classname}} {
    {{#composedSchemas.oneOf}}
    {{^isModel}}
    {{^isEnumRef}}
    @Serializable
    @JvmInline
    public value class {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Value(public val value: {{{datatypeWithEnum}}}): {{classname}}
    {{/isEnumRef}}
    {{/isModel}}
    {{/composedSchemas.oneOf}}

    public companion object {
    {{#vendorExtensions.x-is-multi-array}}
    {{#composedSchemas.oneOf}}
    {{^isModel}}
    {{^isEnumRef}}
    public fun of{{#isArray}}{{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}{{/isArray}}(value: {{{datatypeWithEnum}}}): {{classname}} {
        return {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Value(value);
    }
    {{/isEnumRef}}
    {{/isModel}}
    {{/composedSchemas.oneOf}}
    {{/vendorExtensions.x-is-multi-array}}

    {{^vendorExtensions.x-is-multi-array}}
    {{#composedSchemas.oneOf}}
    {{^isModel}}
    {{^isEnumRef}}
    public fun of(value: {{{datatypeWithEnum}}}): {{classname}} {
        return {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Value(value);
    }
    {{/isEnumRef}}
    {{/isModel}}
    {{/composedSchemas.oneOf}}
    {{/vendorExtensions.x-is-multi-array}}
    }
}

internal class {{classname}}Serializer : JsonContentPolymorphicSerializer<{{classname}}>({{classname}}::class) {
    override fun selectDeserializer(element: JsonElement): DeserializationStrategy<{{classname}}> {
        return when {
            {{#composedSchemas.oneOf}}
            {{#isModel}}
            element is JsonObject{{#vendorExtensions.x-discriminator-fields}} && element.containsKey("{{{.}}}"){{/vendorExtensions.x-discriminator-fields}} -> {{{datatypeWithEnum}}}.serializer()
            {{/isModel}}
            {{#isMap}}
            element is JsonObject -> {{classname}}.{{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Value.serializer()
            {{/isMap}}
            {{#isArray}}
            element{{#items}}{{#isModel}}.isJsonArrayOfObjects{{/isModel}}{{#isPrimitiveType}}.isJsonArrayOfPrimitives{{/isPrimitiveType}}{{^isModel}}{{^isPrimitiveType}} is JsonArray{{/isPrimitiveType}}{{/isModel}}{{/items}} -> {{{classname}}}.{{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Value.serializer()
            {{/isArray}}
            {{#isEnumRef}}
            element.isString -> {{{datatypeWithEnum}}}.serializer()
            {{/isEnumRef}}
            {{#isInteger}}
            element.isInt -> {{{classname}}}.{{dataType}}Value.serializer()
            {{/isInteger}}
            {{#isLong}}
            element.isLong -> {{{classname}}}.{{dataType}}Value.serializer()
            {{/isLong}}
            {{#isDouble}}
            element.isDouble -> {{{classname}}}.{{dataType}}Value.serializer()
            {{/isDouble}}
            {{#isBoolean}}
            element.isBoolean -> {{{classname}}}.{{dataType}}Value.serializer()
            {{/isBoolean}}
            {{#isString}}
            element.isString -> {{{classname}}}.{{dataType}}Value.serializer()
            {{/isString}}
            {{/composedSchemas.oneOf}}
            else -> throw AlgoliaClientException("Failed to deserialize json element: $element")
        }
    }
}