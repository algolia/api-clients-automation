# Helper: Wait for a task to be published (completed) for a given `index_name` and `task_id`.
#
# @param index_name [String] the `index_name` where the operation was performed. (required)
# @param task_id [Integer] the `task_id` returned in the method response. (required)
# @param max_retries [Integer] the maximum number of retries. (optional, default to 50)
# @param timeout [Proc] the function to decide how long to wait between retries. (optional)
# @param request_options [Hash] the requestOptions to send along with the query, they will be forwarded to the `get_task` method.
# @return [Http::Response] the last get_task response
def wait_for_task(index_name, task_id, max_retries = 50, timeout = -> (retry_count) { [retry_count * 200, 5000].min }, request_options = {})
  retries = 0
  while retries < max_retries
    res = get_task(index_name, task_id, request_options)
    if res.status == 'published'
      return res
    end
    retries += 1
    sleep(timeout.call(retries) / 1000.0)
  end
  raise ApiError, "The maximum number of retries exceeded. (#{max_retries})"
end


# Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
#
# @param operation [String] the `operation` that was done on a `key`.
# @param key [String] the `key` that has been added, deleted or updated.
# @param api_key [Hash] necessary to know if an `update` operation has been processed, compare fields of the response with it.
# @param max_retries [Integer] the maximum number of retries.
# @param timeout [Proc] the function to decide how long to wait between retries.
# @param request_options [Hash] the requestOptions to send along with the query, they will be forwarded to the `getApikey` method and merged with the transporter requestOptions.
# @return [Http::Response] the last get_api_key response
def wait_for_api_key(operation, key, api_key = {}, max_retries = 50, timeout = -> (retry_count) { [retry_count * 200, 5000].min }, request_options = {})
  retries = 0
  if operation == 'update'
    raise ArgumentError, '`api_key` is required when waiting for an `update` operation.' if api_key.nil?
    while retries < max_retries
      begin
        updatad_key = get_api_key(key, request_options)
        updated_key_hash = updatad_key.to_hash
        equals = true
        api_key.to_hash.each do |k, v|
          equals &&= updated_key_hash[k] == v
        end
      
        return updatad_key if equals
      rescue AlgoliaError => e
        raise e unless e.code == 404
      end

      retries += 1
      sleep(timeout.call(retries) / 1000.0)
    end
  
    raise ApiError, "The maximum number of retries exceeded. (#{max_retries})"
  end

  while retries < max_retries
    begin
      res = get_api_key(key, request_options)
      return res if operation == 'add'
    rescue AlgoliaError => e
      return res if operation == 'delete' && e.code == 404
    end
    retries += 1
    sleep(timeout.call(retries) / 1000.0)
  end
  raise ApiError, "The maximum number of retries exceeded. (#{max_retries})"
end
