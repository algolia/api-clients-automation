  {{#tests}}
  # {{{testName}}}
  def test_{{#lambda.snakecase}}{{testType}}{{/lambda.snakecase}}{{testIndex}}
    {{#autoCreateClient}}
    client = Algolia::{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}.create(
      'APP_ID',
      'API_KEY',
      {{#hasRegionalHost}}'{{{defaultRegion}}}',{{/hasRegionalHost}}
      { requester: Algolia::Transport::EchoRequester.new }
    )
    {{/autoCreateClient}}
    {{#steps}}
    {{#times}}
    for i in 1..{{.}} do
    {{/times}}
    {{#isError}}
    begin
      {{#dynamicTemplate}}{{/dynamicTemplate}}
      assert(false, 'An error should have been raised')
    rescue => e
      assert_equal({{#lambda.codeSnakeCase}}%q({{{expectedError}}}){{/lambda.codeSnakeCase}}.sub('%localhost%', ENV.fetch('CI', nil) == 'true' ? 'localhost' : 'host.docker.internal'), e.message)
    end
    {{/isError}}
    {{^isError}}
    {{#dynamicTemplate}}{{/dynamicTemplate}}
    {{#testUserAgent}}
    assert(req.headers['user-agent'].match(/{{{match.value}}}/))
    {{/testUserAgent}}
    {{#testTimeouts}}
    assert_equal({{{matchConnectTimeout}}}, req.connect_timeout)
    assert_equal({{{matchResponseTimeout}}}, req.timeout)
    {{/testTimeouts}}
    {{#testHost}}
    assert_equal('{{{match.value}}}', req.host.url)
    {{/testHost}}
    {{#testResponse}}
    {{^match.isPrimitive}}
    assert_equal({{{match.value}}}, req.is_a?(Array) ? req.map(&:to_hash) : req.to_hash)
    {{/match.isPrimitive}}
    {{#match.isPrimitive}}
    assert_equal({{#match}}{{> tests/generateInnerParams}}{{/match}}, req)
    {{/match.isPrimitive}}
    {{/testResponse}}
    {{/isError}}
    {{#times}}
    end
    {{/times}}
    {{/steps}}
  end

  {{/tests}}