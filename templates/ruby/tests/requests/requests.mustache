require 'algolia'
require 'test/unit'

class Test{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}} < Test::Unit::TestCase
  include Algolia::{{{modelModule}}}
  def setup
    @client = Algolia::{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}.create_with_config(
      Algolia::Configuration.new(
      'APP_ID', 
      'API_KEY', 
      [Algolia::Transport::StatefulHost.new('localhost')], 
      '{{clientPrefix}}', 
      { requester: Algolia::Transport::EchoRequester.new })
    )
  end

  {{#blocksRequests}}
  {{#tests}}
  # {{{testName}}}
  def test_{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}{{testIndex}}
    req = @client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> requests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}}{ {{#requestOptions.headers.parameters}}:header_params => JSON.parse('{{{.}}}', :symbolize_names => true),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}:query_params => JSON.parse('{{{.}}}', :symbolize_names => true){{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

    {{#request}}
    assert_equal(:{{#lambda.lowercase}}{{method}}{{/lambda.lowercase}}, req.method)
    assert_equal('{{path}}', req.path)
    assert(({{#request.queryParameters}}{{{.}}}{{/request.queryParameters}}{{^request.queryParameters}}{}{{/request.queryParameters}}.to_a - req.query_params.to_a).empty?, req.query_params.to_s)
    assert(({{#request.headers}}{{{.}}}.transform_keys(&:to_s){{/request.headers}}{{^request.headers}}{}{{/request.headers}}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    {{#body}}
    assert_equal(JSON.parse(%q({{{.}}})), JSON.parse(req.body))
    {{/body}}
    {{^body}}{{#assertNullBody}}
    assert(req.body.nil?, 'body is not nil')
    {{/assertNullBody}}{{/body}}
    {{/request}}
  end

  {{/tests}}
  {{/blocksRequests}}
end
