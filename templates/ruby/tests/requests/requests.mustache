require 'algolia'
require 'test/unit'
require 'dotenv'
require_relative '../helpers'

Dotenv.load('../../.env')

class Test{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}} < Test::Unit::TestCase
  include Algolia::{{{modelModule}}}
  def setup
    @client = Algolia::{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}.create(
      'APP_ID',
      'API_KEY',
      {{#hasRegionalHost}}'{{{defaultRegion}}}',{{/hasRegionalHost}}
      { requester: Algolia::Transport::EchoRequester.new }
    )

    {{#hasE2E}}
    @e2e_client = Algolia::{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}.create(
      ENV.fetch('ALGOLIA_APPLICATION_ID', nil),
      ENV.fetch('ALGOLIA_ADMIN_KEY', nil)
      {{#hasRegionalHost}}, '{{{defaultRegion}}}'{{/hasRegionalHost}}
    )
    {{/hasE2E}}
  end

  {{#blocksRequests}}
  {{#tests}}
  # {{{testName}}}
  def test_{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}{{testIndex}}
    req = @client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> tests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}}{ {{#requestOptions.headers.parameters}}:header_params => JSON.parse('{{{.}}}', :symbolize_names => true),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}:query_params => JSON.parse('{{{.}}}', :symbolize_names => true){{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

    {{#request}}
    assert_equal(:{{#lambda.lowercase}}{{method}}{{/lambda.lowercase}}, req.method)
    assert_equal('{{path}}', req.path)
    assert(({{#request.queryParameters}}{{{.}}}{{/request.queryParameters}}{{^request.queryParameters}}{}{{/request.queryParameters}}.to_a - req.query_params.to_a).empty?, req.query_params.to_s)
    assert(({{#request.headers}}{{{.}}}.transform_keys(&:to_s){{/request.headers}}{{^request.headers}}{}{{/request.headers}}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    {{#body}}
    assert_equal(JSON.parse(%q({{{.}}})), JSON.parse(req.body))
    {{/body}}
    {{^body}}{{#assertNullBody}}
    assert(req.body.nil?, 'body is not nil')
    {{/assertNullBody}}{{/body}}
    {{/request}}

    {{#response}}
    res = @e2e_client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> tests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}}{ {{#requestOptions.headers.parameters}}:header_params => JSON.parse('{{{.}}}', :symbolize_names => true),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}:query_params => JSON.parse('{{{.}}}', :symbolize_names => true){{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

    {{#statusCode}}
    assert_equal(res.status, {{statusCode}})
    {{/statusCode}}
    {{#body}}
    res = @e2e_client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}({{#parametersWithDataType}}{{> tests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}}{ {{#requestOptions.headers.parameters}}:header_params => JSON.parse('{{{.}}}', :symbolize_names => true),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}:query_params => JSON.parse('{{{.}}}', :symbolize_names => true){{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})
    expected_body = JSON.parse(%q({{{.}}}))
    assert_equal(expected_body, union(expected_body, JSON.parse(res.to_json)))
    {{/body}}
    {{/response}}
  end

  {{/tests}}
  {{/blocksRequests}}
end
