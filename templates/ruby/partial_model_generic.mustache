  {{#description}}
  # {{{.}}}
  {{/description}}
  class {{classname}}{{#parent}} < {{{.}}}{{/parent}}
  {{#vars}}
    {{#description}}
    # {{{.}}}
    {{/description}}
    attr_accessor :{{{name}}}

  {{/vars}}
  {{#getAdditionalPropertiesIsAnyType}}
    attr_accessor :additional_properties

  {{/getAdditionalPropertiesIsAnyType}}
    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        {{#vars}}
        :{{{name}}} => :{{{baseName}}}{{^-last}},{{/-last}}
        {{/vars}}
      }
    end

    # Returns all the JSON keys this model knows about{{#parent}}, including the ones defined in its parent(s){{/parent}}
    def self.acceptable_attributes
      {{^parent}}
      attribute_map.values
      {{/parent}}
      {{#parent}}
      attribute_map.values.concat(superclass.acceptable_attributes)
      {{/parent}}
    end

    # Attribute type mapping.
    def self.types_mapping
      {
        {{#vars}}
        :{{{name}}} => :'{{{dataType}}}'{{^-last}},{{/-last}}
        {{/vars}}
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        {{#vars}}
        {{#isNullable}}
        :{{{name}}}{{^-last}},{{/-last}}
        {{/isNullable}}
        {{/vars}}
      ])
    end

    {{#anyOf}}
    {{#-first}}
    # List of class defined in anyOf (OpenAPI v3)
    def self.openapi_any_of
      [
    {{/-first}}
      :'{{{.}}}'{{^-last}},{{/-last}}
    {{#-last}}
      ]
    end

    {{/-last}}
    {{/anyOf}}
    {{#allOf}}
    {{#-first}}
    # List of class defined in allOf (OpenAPI v3)
    def self.openapi_all_of
      [
    {{/-first}}
      :'{{{.}}}'{{^-last}},{{/-last}}
    {{#-last}}
      ]
    end

    {{/-last}}
    {{/allOf}}
    {{#discriminator}}
    {{#propertyName}}
    # discriminator's property name in OpenAPI v3
    def self.openapi_discriminator_name
      :'{{{.}}}'
    end

    {{/propertyName}}
    {{/discriminator}}
    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        raise ArgumentError, "The input argument (attributes) must be a hash in `{{{moduleName}}}::{{{classname}}}` initialize method"
      end

      {{^getAdditionalPropertiesIsAnyType}}
      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          raise ArgumentError, "`#{k}` is not a valid attribute in `{{{moduleName}}}::{{{classname}}}`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      {{/getAdditionalPropertiesIsAnyType}}
      {{#parent}}
      # call parent's initialize
      super(attributes)
      {{/parent}}
      {{#vars}}
      if attributes.key?(:{{{name}}})
        {{#isArray}}
        if (value = attributes[:{{{name}}}]).is_a?(Array)
          self.{{{name}}} = value
        end
        {{/isArray}}
        {{#isMap}}
        if (value = attributes[:{{{name}}}]).is_a?(Hash)
          self.{{{name}}} = value
        end
        {{/isMap}}
        {{^isContainer}}
        self.{{{name}}} = attributes[:{{{name}}}]
        {{/isContainer}}
      {{#required}}
      else
        self.{{{name}}} = nil
      {{/required}}
      end

      {{/vars}}
      {{#getAdditionalPropertiesIsAnyType}}

      # add extra attribute to additional_properties
      self.additional_properties ||= {}
      self.additional_properties.merge!(attributes.reject { |k, _| self.class.attribute_map.key?(k.to_sym) })
      {{/getAdditionalPropertiesIsAnyType}}
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(other)
      return true if self.equal?(other)
      self.class == other.class{{#vars}} &&
          {{name}} == other.{{name}}{{/vars}}{{#parent}} && super(other){{/parent}}
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(other)
      self == other
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [{{#vars}}{{name}}{{^-last}}, {{/-last}}{{/vars}}].hash
    end

{{> base_object}}
  end
