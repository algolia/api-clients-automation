# {{{generationBanner}}}

require 'cgi'

module {{moduleName}}
{{#operations}}
  class {{classname}}
    attr_accessor :api_client

    def initialize(config = nil)
      @api_client = Algolia::ApiClient.new(config)
    end

    def self.create(app_id, api_key{{#hasRegionalHost}}, region = nil{{/hasRegionalHost}})
      hosts = []
      {{#hasRegionalHost}}
      regions = [{{#allowedRegions}}'{{.}}'{{^-last}}, {{/-last}}{{/allowedRegions}}]

      
      raise "`region` {{^fallbackToAliasHost}}is required and {{/fallbackToAliasHost}}must be one of the following: #{regions.join(', ')}" if {{^fallbackToAliasHost}}region.nil? || {{/fallbackToAliasHost}}(region != '' && !regions.include?(region))

      hosts << Transport::StatefulHost.new({{#fallbackToAliasHost}}region.nil? ? '{{{hostWithFallback}}}' : {{/fallbackToAliasHost}} '{{{regionalHost}}}'.sub!('{region}', region), accept: CallType::READ | CallType::WRITE)
      {{/hasRegionalHost}}{{^hasRegionalHost}}
      hosts << Transport::StatefulHost.new("#{app_id}-dsn.algolia.net", accept: CallType::READ)
      hosts << Transport::StatefulHost.new("#{app_id}.algolia.net", accept: CallType::WRITE)

      hosts += 1.upto(3).map do |i|
        Transport::StatefulHost.new("#{app_id}-#{i}.algolianet.com", accept: CallType::READ | CallType::WRITE)
      end.shuffle
      {{/hasRegionalHost}}

      config = Algolia::Configuration.new(app_id, api_key, hosts, '{{{baseName}}}')
      create_with_config(config)
    end

    def self.create_with_config(config)
      new(config)
    end

{{#operation}}
    {{#summary}}
    # {{{.}}}
    {{/summary}}
    {{#notes}}
    # {{{.}}}
    {{/notes}}
{{#vendorExtensions.x-group-parameters}}
    # @param [Hash] opts the parameters
{{#allParams}}
{{#required}}
    # @option opts [{{{dataType}}}] :{{paramName}} {{description}} (required)
{{/required}}
{{/allParams}}
{{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
{{#allParams}}
{{#required}}
    # @param {{paramName}} [{{{dataType}}}] {{description}}
{{/required}}
{{/allParams}}
    # @param [Hash] opts the optional parameters
{{/vendorExtensions.x-group-parameters}}
{{#allParams}}
{{^required}}
    # @option opts [{{{dataType}}}] :{{paramName}} {{description}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
{{/required}}
{{/allParams}}
    # @return [{{{returnType}}}{{^returnType}}nil{{/returnType}}]
    def {{operationId}}({{^vendorExtensions.x-group-parameters}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}opts = {})
      {{#returnType}}data, _status_code, _headers = {{/returnType}}{{operationId}}_with_http_info({{^vendorExtensions.x-group-parameters}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}opts)
      {{#returnType}}data{{/returnType}}{{^returnType}}nil{{/returnType}}
    end

    {{#summary}}
    # {{.}}
    {{/summary}}
    {{#notes}}
    # {{.}}
    {{/notes}}
{{#vendorExtensions.x-group-parameters}}
    # @param [Hash] opts the parameters
{{#allParams}}
{{#required}}
    # @option opts [{{{dataType}}}] :{{paramName}} {{description}} (required)
{{/required}}
{{/allParams}}
{{/vendorExtensions.x-group-parameters}}
{{^vendorExtensions.x-group-parameters}}
{{#allParams}}
{{#required}}
    # @param {{paramName}} [{{{dataType}}}] {{description}}
{{/required}}
{{/allParams}}
    # @param [Hash] opts the optional parameters
{{/vendorExtensions.x-group-parameters}}
{{#allParams}}
{{^required}}
    # @option opts [{{{dataType}}}] :{{paramName}} {{description}}{{#defaultValue}} (default to {{{.}}}){{/defaultValue}}
{{/required}}
{{/allParams}}
    # @return [Array<({{{returnType}}}{{^returnType}}nil{{/returnType}}, Integer, Hash)>] {{#returnType}}{{{.}}} data{{/returnType}}{{^returnType}}nil{{/returnType}}, response status code and response headers
    def {{operationId}}_with_http_info({{^vendorExtensions.x-group-parameters}}{{#allParams}}{{#required}}{{paramName}}, {{/required}}{{/allParams}}{{/vendorExtensions.x-group-parameters}}opts = {})
      {{#vendorExtensions.x-group-parameters}}
      # unbox the parameters from the hash
      {{#allParams}}
      {{^isNullable}}
      {{#required}}
      {{{paramName}}} = opts[:{{{paramName}}}]
      {{/required}}
      {{/isNullable}}
      {{/allParams}}
      {{/vendorExtensions.x-group-parameters}}
      {{#allParams}}
      {{^isNullable}}
      {{#required}}
      # verify the required parameter '{{paramName}}' is set
      if @api_client.config.client_side_validation && {{{paramName}}}.nil?
        raise ArgumentError, "Missing the required parameter '{{paramName}}' when calling {{classname}}.{{operationId}}"
      end
      {{#isEnum}}
      {{^isContainer}}
      # verify enum value
      allowable_values = [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]
      if @api_client.config.client_side_validation && !allowable_values.include?({{{paramName}}})
        raise ArgumentError, "invalid value for \"{{{paramName}}}\", must be one of #{allowable_values}"
      end
      {{/isContainer}}
      {{/isEnum}}
      {{/required}}
      {{/isNullable}}
      {{^required}}
      {{#isEnum}}
      {{#collectionFormat}}
      allowable_values = [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]
      if @api_client.config.client_side_validation && opts[:{{{paramName}}}] && !opts[:{{{paramName}}}].all? { |item| allowable_values.include?(item) }
        raise ArgumentError, "invalid value for \"{{{paramName}}}\", must include one of #{allowable_values}"
      end
      {{/collectionFormat}}
      {{^collectionFormat}}
      allowable_values = [{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]
      if @api_client.config.client_side_validation && opts[:{{{paramName}}}] && !allowable_values.include?(opts[:{{{paramName}}}])
        raise ArgumentError, "invalid value for \"{{{paramName}}}\", must be one of #{allowable_values}"
      end
      {{/collectionFormat}}
      {{/isEnum}}
      {{/required}}
      {{#hasValidation}}
      {{#maxLength}}
      if @api_client.config.client_side_validation && {{^required}}!opts[:{{{paramName}}}].nil? && {{/required}}{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:{{{paramName}}}]{{/required}}.to_s.length > {{{maxLength}}}
        raise ArgumentError, 'invalid value for "{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:"{{{paramName}}}"]{{/required}}" when calling {{classname}}.{{operationId}}, the character length must be smaller than or equal to {{{maxLength}}}.'
      end

      {{/maxLength}}
      {{#minLength}}
      if @api_client.config.client_side_validation && {{^required}}!opts[:{{{paramName}}}].nil? && {{/required}}{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:{{{paramName}}}]{{/required}}.to_s.length < {{{minLength}}}
        raise ArgumentError, 'invalid value for "{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:"{{{paramName}}}"]{{/required}}" when calling {{classname}}.{{operationId}}, the character length must be great than or equal to {{{minLength}}}.'
      end

      {{/minLength}}
      {{#maximum}}
      if @api_client.config.client_side_validation && {{^required}}!opts[:{{{paramName}}}].nil? && {{/required}}{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:{{{paramName}}}]{{/required}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{{maximum}}}
        raise ArgumentError, 'invalid value for "{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:"{{{paramName}}}"]{{/required}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{{maximum}}}.'
      end

      {{/maximum}}
      {{#minimum}}
      if @api_client.config.client_side_validation && {{^required}}!opts[:{{{paramName}}}].nil? && {{/required}}{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:{{{paramName}}}]{{/required}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{{minimum}}}
        raise ArgumentError, 'invalid value for "{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:"{{{paramName}}}"]{{/required}}" when calling {{classname}}.{{operationId}}, must be greater than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{{minimum}}}.'
      end

      {{/minimum}}
      {{#pattern}}
      pattern = {{{pattern}}}
      if @api_client.config.client_side_validation && {{^required}}!opts[:{{{paramName}}}].nil? && {{/required}}{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:{{{paramName}}}]{{/required}} !~ pattern
        raise ArgumentError, "invalid value for '{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:\"{{{paramName}}}\"]{{/required}}' when calling {{classname}}.{{operationId}}, must conform to the pattern #{pattern}."
      end

      {{/pattern}}
      {{#maxItems}}
      if @api_client.config.client_side_validation && {{^required}}!opts[:{{{paramName}}}].nil? && {{/required}}{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:{{{paramName}}}]{{/required}}.length > {{{maxItems}}}
        raise ArgumentError, 'invalid value for "{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:"{{{paramName}}}"]{{/required}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{{maxItems}}}.'
      end

      {{/maxItems}}
      {{#minItems}}
      if @api_client.config.client_side_validation && {{^required}}!opts[:{{{paramName}}}].nil? && {{/required}}{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:{{{paramName}}}]{{/required}}.length < {{{minItems}}}
        raise ArgumentError, 'invalid value for "{{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:"{{{paramName}}}"]{{/required}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{{minItems}}}.'
      end

      {{/minItems}}
      {{/hasValidation}}
      {{/allParams}}
      path = '{{{path}}}'{{#pathParams}}.sub('{' + '{{baseName}}' + '}', CGI.escape({{paramName}}.to_s){{^strictSpecBehavior}}.gsub('%2F', '/'){{/strictSpecBehavior}}){{/pathParams}}
      query_params = opts[:query_params] || {}
      {{#queryParams}}
      {{#required}}
      query_params[:{{{baseName}}}] = {{#collectionFormat}}@api_client.build_collection_param({{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}{{/collectionFormat}}
      {{/required}}
      {{/queryParams}}
      {{#queryParams}}
      {{^required}}
      query_params[:{{{baseName}}}] = {{#collectionFormat}}@api_client.build_collection_param(opts[:{{{paramName}}}], :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}opts[:{{{paramName}}}]{{/collectionFormat}} unless opts[:{{{paramName}}}].nil?
      {{/required}}
      {{/queryParams}}
      header_params = opts[:header_params] || {}
      {{#headerParams}}
      {{#required}}
      header_params[{{#lambdaFixHeaderKey}}:{{{baseName}}}{{/lambdaFixHeaderKey}}] = {{#collectionFormat}}@api_client.build_collection_param({{{paramName}}}, :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}{{{paramName}}}{{/collectionFormat}}
      {{/required}}
      {{/headerParams}}
      {{#headerParams}}
      {{^required}}
      header_params[{{#lambdaFixHeaderKey}}:{{{baseName}}}{{/lambdaFixHeaderKey}}] = {{#collectionFormat}}@api_client.build_collection_param(opts[:{{{paramName}}}], :{{{collectionFormat}}}){{/collectionFormat}}{{^collectionFormat}}opts[:{{{paramName}}}]{{/collectionFormat}} unless opts[:{{{paramName}}}].nil?
      {{/required}}
      {{/headerParams}}

      post_body = opts[:debug_body]{{#bodyParam}} || @api_client.object_to_http_body({{#required}}{{{paramName}}}{{/required}}{{^required}}opts[:{{{paramName}}}]{{/required}}){{/bodyParam}}

      return_type = opts[:debug_return_type]{{#returnType}} || '{{{modelModule}}}::{{{.}}}'{{/returnType}}

      new_options = opts.merge(
        :operation => :'{{classname}}.{{operationId}}',
        :header_params => header_params,
        :query_params => query_params,
        :body => post_body,
        :return_type => return_type,
        :use_read_transporter => {{#useReadTransporter}}true{{/useReadTransporter}}{{^useReadTransporter}}false{{/useReadTransporter}}
      )

      @api_client.call_api(:{{httpMethod}}, path, new_options)
    end
{{^-last}}

{{/-last}}
{{/operation}}
  end
{{/operations}}
end
