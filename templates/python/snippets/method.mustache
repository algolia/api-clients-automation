# {{generationBanner}}
# >IMPORT
{{> snippets/import}}
# IMPORT<

{{#blocksRequests}}
{{#snippets}}
def snippet_for_{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}{{testIndex}}():
    """
    Snippet for the {{method}} method.

    {{{description}}}
    """
    # >SEPARATOR {{method}} {{testName}}
    # Initialize the client
    # In an asynchronous context, you can use {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}} instead, which exposes the exact same methods.
    {{> snippets/init}}

    # Call the API 
    {{#hasResponse}}response = {{/hasResponse}}client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}({{#parametersWithDataType}}{{> tests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

    {{#hasResponse}}print(response){{/hasResponse}}

    # Skip deserialization
    {{#hasResponse}}raw_response = {{/hasResponse}}client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> tests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

    {{#hasResponse}}print(raw_response.raw_data){{/hasResponse}}
    
    # >LOG
    {{#hasResponse}}
    # use the class directly
    print(response)

    # print the JSON response
    print(response.to_json())
    {{/hasResponse}}
    # SEPARATOR<

{{/snippets}}
{{/blocksRequests}}