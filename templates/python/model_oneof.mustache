class {{classname}}({{#parent}}{{{.}}}{{/parent}}{{^parent}}BaseModel{{/parent}}):
{{> model_description}}

{{#composedSchemas.oneOf}}
    {{vendorExtensions.x-py-name}}: {{^required}}Optional[{{/required}}{{{dataType}}}{{^required}}]{{/required}} = Field({{^required}}default=None{{/required}})
    {{#description}}""" {{{.}}} """{{/description}}
{{/composedSchemas.oneOf}}
    actual_instance: Union[{{#oneOf}}{{{.}}}, {{/oneOf}}None] = None
    one_of_schemas: Set[str] = { {{#oneOf}}"{{.}}"{{^-last}}, {{/-last}}{{/oneOf}} }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`") 
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")  
            super().__init__(actual_instance=args[0]) # pyright: ignore
        else:
            super().__init__(**kwargs)

    @model_serializer
    def unwrap_actual_instance(self) -> Union[{{#oneOf}}{{{.}}}, {{/oneOf}}Self, None]:
        """
        Unwraps the `actual_instance` when calling the `to_json` method.
        """
        return self.actual_instance if hasattr(self, "actual_instance") else self

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        """Create an instance of {{{classname}}} from a JSON string"""
        return cls.from_json(dumps(obj))

    @classmethod
    {{#isNullable}}
    def from_json(cls, json_str: Optional[str]) -> Self:
    {{/isNullable}}
    {{^isNullable}}
    def from_json(cls, json_str: str) -> Self:
    {{/isNullable}}
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        {{#isNullable}}
        if json_str is None:
            return instance

        {{/isNullable}}
        error_messages = []

        {{#composedSchemas.oneOf}}
        {{#isContainer}}
        try:
            instance.{{vendorExtensions.x-py-name}} = loads(json_str)
            instance.actual_instance = instance.{{vendorExtensions.x-py-name}}

            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        {{/isContainer}}
        {{^isContainer}}
        {{#isPrimitiveType}}
        try:
            instance.{{vendorExtensions.x-py-name}} = loads(json_str)
            instance.actual_instance = instance.{{vendorExtensions.x-py-name}}

            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        {{/isPrimitiveType}}
        {{^isPrimitiveType}}
        try:
            instance.actual_instance = {{{dataType}}}.from_json(json_str)

            return instance
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        {{/isPrimitiveType}}
        {{/isContainer}}
        {{/composedSchemas.oneOf}}

        raise ValueError("No match found when deserializing the JSON string into {{{classname}}} with oneOf schemas: {{#oneOf}}{{{.}}}{{^-last}}, {{/-last}}{{/oneOf}}. Details: " + ", ".join(error_messages))

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(
          self.actual_instance.to_json # pyright: ignore
        ):
            return self.actual_instance.to_json() # pyright: ignore
        else:
            return dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], {{#oneOf}}{{{.}}}{{^-last}}, {{/-last}}{{/oneOf}}]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(
          self.actual_instance.to_dict # pyright: ignore
        ):
            return self.actual_instance.to_dict() # pyright: ignore
        else:
            return self.actual_instance # pyright: ignore