{{>partial_header}}
{{>imports}}

{{#operations}}{{#operation}}{{#imports}}
from algoliasearch.{{packageName}}.models.{{#lambda.snakecase}}{{{.}}}{{/lambda.snakecase}} import {{{.}}}
{{/imports}}{{/operation}}{{/operations}}

try:
    from typing import Self
except ImportError:
    from typing_extensions import Self


{{#operations}}
class {{classname}}:
    _transporter: Transporter
    _config: Config
    _request_options: RequestOptions

    def app_id(self) -> str:
        return self._config.app_id

    def __init__(self, transporter: Transporter, config: Config) -> None:
        self._transporter = transporter
        self._config = config
        self._request_options = RequestOptions(config)

    def create_with_config(config: Config) -> Self:
        transporter = Transporter(config)

        return {{classname}}(transporter, config)

    def create(app_id: Optional[str] = None, api_key: Optional[str] = None{{#hasRegionalHost}}, region: {{#fallbackToAliasHost}}Optional[str]{{/fallbackToAliasHost}}{{^fallbackToAliasHost}}str{{/fallbackToAliasHost}} = None{{/hasRegionalHost}}) -> Self:
        return {{classname}}.create_with_config(Config(app_id, api_key{{#hasRegionalHost}}, region{{/hasRegionalHost}}))

    async def close(self) -> None:
        return await self._transporter.close()
    {{#operation}}

    async def {{operationId}}_with_http_info{{>partial_api_args}} -> ApiResponse[str]:
        """
        {{#isDeprecated}}(Deprecated) {{/isDeprecated}}{{{summary}}}{{^summary}}{{operationId}}{{/summary}}

        {{#notes}}
        {{{.}}}
        {{/notes}}

        {{#allParams}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        :type {{paramName}}: {{dataType}}{{#optional}}, optional{{/optional}}
        {{/allParams}}
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        {{#isDeprecated}}warnings.warn("{{{httpMethod}}} {{{path}}} is deprecated.", DeprecationWarning){{/isDeprecated}}

        {{#allParams}}
        {{#required}}
        if {{paramName}} is None:
            raise ValueError("Parameter `{{paramName}}` is required when calling `{{nickname}}`.")

        {{/required}}
        {{/allParams}}

        _query_parameters: List[Tuple[str, str]] = []
        _headers: Dict[str, Optional[str]] = {}
        
        {{#vendorExtensions}}
        {{#queryParams}}
        if {{paramName}} is not None:
        {{^x-is-custom-request}}
            _query_parameters.append(('{{baseName}}', {{paramName}}))
        {{/x-is-custom-request}}
        {{#x-is-custom-request}}
            for _qpkey, _qpvalue in {{paramName}}.items():
                _query_parameters.append((_qpkey, _qpvalue))
        {{/x-is-custom-request}}
        {{/queryParams}}
        {{/vendorExtensions}}

        {{#headerParams}}
        if {{paramName}} is not None:
            _headers['{{#lambda.lowercase}}{{baseName}}{{/lambda.lowercase}}'] = {{paramName}}
        {{/headerParams}}

        {{#bodyParam}}
        _body = {}
        if {{paramName}} is not None:
            _body = {{paramName}}
        {{/bodyParam}}

        response = await self._transporter.request(
            verb=Verb.{{httpMethod}},
            path={{#vendorExtensions}}'{{{path}}}'{{#pathParams}}.replace({{=<% %>=}}'{<%baseName%>}'<%={{ }}=%>, {{#x-is-custom-request}}{{paramName}}{{/x-is-custom-request}}{{^x-is-custom-request}}quote(str({{paramName}}), safe=''){{/x-is-custom-request}}){{/pathParams}},{{/vendorExtensions}}
            data={{#bodyParam}}dumps(bodySerializer(_body)){{/bodyParam}}{{^bodyParam}}None{{/bodyParam}},
            request_options=self._request_options.merge(
                query_parameters=_query_parameters,
                headers=_headers,
                user_request_options=request_options,
            ),
            {{#vendorExtensions}}
            use_read_transporter={{#x-use-read-transporter}}True{{/x-use-read-transporter}}{{^x-use-read-transporter}}False{{/x-use-read-transporter}},
            {{/vendorExtensions}}
        )

        response.data = response.raw_data

        return response

    async def {{operationId}}{{>partial_api_args}} -> {{{returnType}}}{{^returnType}}None{{/returnType}}:
        """
        {{#isDeprecated}}(Deprecated) {{/isDeprecated}}{{{summary}}}{{^summary}}{{operationId}}{{/summary}}

        {{#notes}}
        {{{.}}}
        {{/notes}}

        {{#allParams}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        :type {{paramName}}: {{dataType}}{{#optional}}, optional{{/optional}}
        {{/allParams}}
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        {{#returnType}}
        :return: Returns the deserialized response in a '{{{returnType}}}' result object.
        {{/returnType}}
        """

        response = await self.{{operationId}}_with_http_info({{#allParams}}{{paramName}},{{/allParams}}request_options)

        return {{^returnType}}None{{/returnType}}{{#returnType}}response.deserialize({{{returnType}}}){{/returnType}}

{{/operation}}
{{/operations}}