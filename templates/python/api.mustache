{{> partial_header}}
{{> imports}}

{{#isSearchClient}}
from algoliasearch.search.models.action import Action
from algoliasearch.search.models.batch_request import BatchRequest
from algoliasearch.search.models.browse_params_object import BrowseParamsObject
from algoliasearch.search.models.operation_type import OperationType
from algoliasearch.search.models.replace_all_objects_response import ReplaceAllObjectsResponse
from algoliasearch.search.models.scope_type import ScopeType
from algoliasearch.search.models.secured_api_key_restrictions import SecuredApiKeyRestrictions
{{/isSearchClient}}

{{#operations}}{{#operation}}{{#imports}}
from algoliasearch.{{packageName}}.models.{{#lambda.snakecase}}{{{.}}}{{/lambda.snakecase}} import {{{.}}}
{{/imports}}{{/operation}}{{/operations}}


{{#modes}}
{{#operations}}
class {{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}:
    """The Algolia '{{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}' class.

    Args:
    app_id (str): The Algolia application ID to retrieve information from.
    api_key (str): The Algolia api key bound to the given `app_id`.
    {{#hasRegionalHost}}region ({{#allowedRegions}}"{{.}}"{{^-last}} | {{/-last}}{{/allowedRegions}}): The region of your Algolia application.{{/hasRegionalHost}}

    Returns:
    The initialized API client.

    Example:
    _client = {{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}("YOUR_ALGOLIA_APP_ID", "YOUR_ALGOLIA_API_KEY"{{#hasRegionalHost}}, region="{{#allowedRegions}}'{{.}}'{{^-last}} or {{/-last}}{{/allowedRegions}}"{{/hasRegionalHost}})
    _client_with_named_args = {{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}(app_id="YOUR_ALGOLIA_APP_ID", api_key="YOUR_ALGOLIA_API_KEY"{{#hasRegionalHost}}, region="{{#allowedRegions}}'{{.}}'{{^-last}} or {{/-last}}{{/allowedRegions}}"{{/hasRegionalHost}})

    See `{{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}.create_with_config` for advanced configuration.
    """

    _transporter: Transporter{{#isSyncClient}}Sync{{/isSyncClient}}
    _config: BaseConfig
    _request_options: RequestOptions

    def __init__(self, app_id: Optional[str] = None, api_key: Optional[str] = None, {{#hasRegionalHost}}region: {{#fallbackToAliasHost}}Optional[str] = None{{/fallbackToAliasHost}}{{^fallbackToAliasHost}}str = ""{{/fallbackToAliasHost}}, {{/hasRegionalHost}}transporter: Optional[Transporter{{#isSyncClient}}Sync{{/isSyncClient}}] = None, config: Optional[{{#lambda.pascalcase}}{{client}}Config{{/lambda.pascalcase}}] = None) -> None:
        if transporter is not None and config is None:
            config = {{#lambda.pascalcase}}{{client}}Config{{/lambda.pascalcase}}(transporter.config.app_id, transporter.config.api_key{{#hasRegionalHost}}, region{{/hasRegionalHost}})

        if config is None:
            config = {{#lambda.pascalcase}}{{client}}Config{{/lambda.pascalcase}}(app_id, api_key{{#hasRegionalHost}}, region{{/hasRegionalHost}})
        self._config = config
        self._request_options = RequestOptions(config)

        if transporter is None:
            transporter = Transporter{{#isSyncClient}}Sync{{/isSyncClient}}(config)
        self._transporter = transporter

    @classmethod
    def create_with_config(cls, config: {{#lambda.pascalcase}}{{client}}Config{{/lambda.pascalcase}}, transporter: Optional[Transporter{{#isSyncClient}}Sync{{/isSyncClient}}] = None) -> {{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}:
        """Allows creating a client with a customized `{{#lambda.pascalcase}}{{client}}Config{{/lambda.pascalcase}}` and `Transporter{{#isSyncClient}}Sync{{/isSyncClient}}`. If `transporter` is not provided, the default one will be initialized from the given `config`.

        Args:
        config ({{#lambda.pascalcase}}{{client}}Config{{/lambda.pascalcase}}): The config of the API client.
        transporter (Transporter{{#isSyncClient}}Sync{{/isSyncClient}}): The HTTP transporter, see `http/transporter.py` for implementation details.

        Returns:
        The initialized API client.

        Example:
        _client_with_custom_config = {{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}.create_with_config(config={{#lambda.pascalcase}}{{client}}Config{{/lambda.pascalcase}}(...))
        _client_with_custom_config_and_transporter = {{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}.create_with_config(config={{#lambda.pascalcase}}{{client}}Config{{/lambda.pascalcase}}(...), transporter=Transporter{{#isSyncClient}}Sync{{/isSyncClient}}(...))
        """
        if transporter is None:
            transporter = Transporter{{#isSyncClient}}Sync{{/isSyncClient}}(config)

        return {{classname}}{{#isSyncClient}}Sync{{/isSyncClient}}(app_id=config.app_id, api_key=config.api_key, {{#hasRegionalHost}}region=config.region, {{/hasRegionalHost}}transporter=transporter, config=config)

    {{^isSyncClient}}
    async def __aenter__(self) -> Self:
        return self

    async def __aexit__(self, exc_type, exc_value, traceback) -> None:
        """Closes the underlying `transporter` of the API client."""
        await self.close()

    async def close(self) -> None:
        """Closes the underlying `transporter` of the API client."""
        return await self._transporter.close()
    {{/isSyncClient}}

    {{#isSyncClient}}
    def __enter__(self) -> Self:
        return self

    def __exit__(self, exc_type, exc_value, traceback) -> None:
        """Closes the underlying `transporter` of the API client."""
        self.close()

    def close(self) -> None:
        return self._transporter.close()
    {{/isSyncClient}}
    
    {{^isSyncClient}}async {{/isSyncClient}}def set_client_api_key(self, api_key: str) -> None:
        """Sets a new API key to authenticate requests."""
        self._transporter.config.set_client_api_key(api_key)

    {{#isSearchClient}}
{{> search_helpers}}
    {{/isSearchClient}}

    {{#operation}}

    {{^isSyncClient}}async {{/isSyncClient}}def {{operationId}}_with_http_info{{> partial_api_args}} -> ApiResponse[str]:
        """
        {{#isDeprecated}}
        (Deprecated) {{operationId}}
        {{/isDeprecated}}
        {{#notes}}
        {{{.}}}
        {{/notes}}{{#vendorExtensions}}{{#x-acl.0}}
        Required API Key ACLs:{{/x-acl.0}}
        {{#x-acl}}
          - {{.}}
        {{/x-acl}}{{/vendorExtensions}}
        {{#allParams}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        :type {{paramName}}: {{dataType}}{{#optional}}, optional{{/optional}}
        {{/allParams}}
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        :return: Returns the raw algoliasearch 'APIResponse' object.
        """

        {{#isDeprecated}}warn("{{{httpMethod}}} {{{path}}} is deprecated.", DeprecationWarning){{/isDeprecated}}

        {{#allParams}}
        {{#required}}
        if {{paramName}} is None:
            raise ValueError("Parameter `{{paramName}}` is required when calling `{{nickname}}`.")

        {{/required}}
        {{/allParams}}

        {{#queryParams.0}}
        _query_parameters: Dict[str, Any] = {}
        {{/queryParams.0}}
        {{#headerParams.0}}
        _headers: Dict[str, str] = {}
        {{/headerParams.0}}
        
        {{#vendorExtensions}}
        {{#queryParams}}
        if {{paramName}} is not None:
        {{^x-is-custom-request}}
            _query_parameters["{{baseName}}"] = {{paramName}}
        {{/x-is-custom-request}}
        {{#x-is-custom-request}}
            for _qpkey, _qpvalue in {{paramName}}.items():
                _query_parameters[_qpkey] = _qpvalue
        {{/x-is-custom-request}}
        {{/queryParams}}
        {{/vendorExtensions}}

        {{#headerParams}}
        if {{paramName}} is not None:
            _headers['{{#lambda.lowercase}}{{baseName}}{{/lambda.lowercase}}'] = {{paramName}}
        {{/headerParams}}

        {{#bodyParam}}
        _data = {}
        if {{paramName}} is not None:
            _data = {{paramName}}
        {{/bodyParam}}

        return {{^isSyncClient}}await {{/isSyncClient}}self._transporter.request(
            verb=Verb.{{httpMethod}},
            path={{#vendorExtensions}}'{{{path}}}'{{#pathParams}}.replace({{=<% %>=}}'{<%baseName%>}'<%={{ }}=%>, {{#x-is-custom-request}}{{paramName}}{{/x-is-custom-request}}{{^x-is-custom-request}}quote(str({{paramName}}), safe=''){{/x-is-custom-request}}){{/pathParams}},{{/vendorExtensions}}
            request_options=self._request_options.merge(
                {{#queryParams.0}}query_parameters=_query_parameters,{{/queryParams.0}}
                {{#headerParams.0}}headers=_headers,{{/headerParams.0}}
                {{#bodyParam}}data=dumps(body_serializer(_data)),{{/bodyParam}}
                user_request_options=request_options,
            ),
            {{#vendorExtensions}}
            use_read_transporter={{#x-use-read-transporter}}True{{/x-use-read-transporter}}{{^x-use-read-transporter}}False{{/x-use-read-transporter}},
            {{/vendorExtensions}}
        )

    {{^isSyncClient}}async {{/isSyncClient}}def {{operationId}}{{> partial_api_args}} -> {{{returnType}}}{{^returnType}}None{{/returnType}}:
        """
        {{#isDeprecated}}
        (Deprecated) {{operationId}}
        {{/isDeprecated}}
        {{#notes}}
        {{{.}}}
        {{/notes}}{{#vendorExtensions}}{{#x-acl.0}}
        Required API Key ACLs:{{/x-acl.0}}
        {{#x-acl}}
          - {{.}}
        {{/x-acl}}{{/vendorExtensions}}
        {{#allParams}}
        :param {{paramName}}:{{#description}} {{{.}}}{{/description}}{{#required}} (required){{/required}}{{#optional}}(optional){{/optional}}
        :type {{paramName}}: {{dataType}}{{#optional}}, optional{{/optional}}
        {{/allParams}}
        :param request_options: The request options to send along with the query, they will be merged with the transporter base parameters (headers, query params, timeouts, etc.). (optional)
        {{#returnType}}
        :return: Returns the deserialized response in a '{{{returnType}}}' result object.
        {{/returnType}}
        """
        resp = {{^isSyncClient}}await {{/isSyncClient}}self.{{operationId}}_with_http_info({{#allParams}}{{paramName}},{{/allParams}}request_options)
        return resp.deserialize({{#returnType}}{{{.}}}{{/returnType}}{{^returnType}}None{{/returnType}}, resp.raw_data)

{{/operation}}
{{/operations}}
{{/modes}}