from os import environ
from typing import Optional

from algoliasearch.http.hosts import (
  CallType,
  Host,
  HostsCollection,
)
from algoliasearch.http.user_agent import UserAgent
from algoliasearch.http.base_config import BaseConfig


class {{#lambda.pascalcase}}{{client}}{{/lambda.pascalcase}}Config(BaseConfig):
    def __init__(self, app_id: Optional[str], api_key: Optional[str]{{#hasRegionalHost}}, region: {{#fallbackToAliasHost}}Optional[str] = None{{/fallbackToAliasHost}}{{^fallbackToAliasHost}}str = ""{{/fallbackToAliasHost}}{{/hasRegionalHost}}) -> None:
        super().__init__(app_id, api_key)

        user_agent = UserAgent().add("{{#lambda.pascalcase}}{{client}}{{/lambda.pascalcase}}")

        assert app_id, "`app_id` is missing."
        assert api_key, "`api_key` is missing."

        self.headers = {
            "x-algolia-application-id": app_id,
            "x-algolia-api-key": api_key,
            "user-agent": user_agent.get(),
            "content-type": "application/json",
        }

        http_proxy = environ.get("HTTP_PROXY")
        https_proxy = environ.get("HTTPS_PROXY")

        self.proxies = {}

        if http_proxy is not None:
            self.proxies["http"] = http_proxy
        if https_proxy is not None:
            self.proxies["https"] = https_proxy

        {{#hasRegionalHost}}
        self.region = region
        _regions = [{{#allowedRegions}}'{{.}}'{{^-last}},{{/-last}}{{/allowedRegions}}]

        if {{^fallbackToAliasHost}}not region or {{/fallbackToAliasHost}}(region is not None and region not in _regions):
            raise ValueError(f"`region` {{^fallbackToAliasHost}}is required and {{/fallbackToAliasHost}}must be one of the following: {', '.join(_regions)}")

        self.hosts = HostsCollection([Host({{#fallbackToAliasHost}}"{{{hostWithFallback}}}" if region is None else {{/fallbackToAliasHost}} "{{{regionalHost}}}".replace("{region}", region or ""))])
        {{/hasRegionalHost}}

        {{^hasRegionalHost}}
        self.hosts = HostsCollection(
            {{#hostsWithoutVariables.size}}
            [
              {{#hostsWithoutVariables}}
                Host("{{{.}}}"),
              {{/hostsWithoutVariables}}
            ]
            {{/hostsWithoutVariables.size}}
            {{#hostWithAppID}}
            [
                Host(url="{}-dsn.algolia.net".format(self.app_id), priority=10, accept=CallType.READ),
                Host(url="{}.algolia.net".format(self.app_id), priority=10, accept=CallType.WRITE),
                Host("{}-1.algolianet.com".format(self.app_id)),
                Host("{}-2.algolianet.com".format(self.app_id)),
                Host("{}-3.algolianet.com".format(self.app_id)),
            ],
            reorder_hosts=True,
            {{/hostWithAppID}}
        )
        {{/hasRegionalHost}}