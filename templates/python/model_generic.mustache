_ALIASES = {
    {{#vars}}
      "{{name}}": "{{{baseName}}}",
    {{/vars}}
}


def _alias_generator(name: str) -> str:
    return _ALIASES.get(name, name)

class {{classname}}({{#parent}}{{{.}}}{{/parent}}{{^parent}}BaseModel{{/parent}}):
{{> model_description}}

{{#vars}}
    {{name}}: {{^required}}Optional[{{/required}}{{#required}}{{#isNullable}}Union[{{/isNullable}}{{/required}}{{{dataType}}}{{#required}}{{#isNullable}}, None]{{/isNullable}}{{/required}}{{^required}}]{{/required}}{{^required}} = None{{/required}}
    {{#description}}
    """ {{{.}}} """
    {{/description}}
{{/vars}}
{{#vars}}
    {{#vendorExtensions.x-regex}}

    @field_validator('{{{name}}}')
    def {{{name}}}_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        {{^required}}
        if value is None:
            return value

        {{/required}}
        {{#required}}
        {{#isNullable}}
        if value is None:
            return value

        {{/isNullable}}
        {{/required}}
        if not match(r"{{{.}}}", value{{#vendorExtensions.x-modifiers}} ,re.{{{.}}}{{/vendorExtensions.x-modifiers}}):
            raise ValueError(r"must validate the regular expression {{{vendorExtensions.x-pattern}}}") 
        return value
    {{/vendorExtensions.x-regex}}
    {{#isEnum}}

    @field_validator('{{{name}}}')
    def {{{name}}}_validate_enum(cls, value):
        """Validates the enum"""
        {{^required}}
        if value is None:
            return value

        {{/required}}
        {{#required}}
        {{#isNullable}}
        if value is None:
            return value

        {{/isNullable}}
        {{/required}}
        {{#isArray}}
        for i in value:
            if i not in set([{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]):
                raise ValueError("each list item must be one of ({{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}})")
        {{/isArray}}
        {{^isArray}}
        if value not in set([{{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}}]):
            raise ValueError("must be one of enum values ({{#allowableValues}}{{#enumVars}}{{{value}}}{{^-last}}, {{/-last}}{{/enumVars}}{{/allowableValues}})")
        {{/isArray}}
        return value
    {{/isEnum}}
{{/vars}}

    model_config = ConfigDict(
        strict=False,
        use_enum_values=True, 
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
        alias_generator=_alias_generator,
        extra='allow',
    )

    {{#vendorExtensions.x-is-hit-object}}
    @staticmethod
    def __dump_item(item):
        return item.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
            warnings="none",
        ) if isinstance(item, BaseModel) else item

    @field_serializer("highlight_result")
    def serialize_highlight_result(self, v: HighlightResult | None):
        if v is None:
            return None

        if isinstance(v, dict):
            return {k: self.__dump_item(val) for k, val in v.items()}
        elif isinstance(v, list):
            return [self.__dump_item(val) for val in v]
        else:
            return self.__dump_item(v)

    @field_serializer("snippet_result")
    def serialize_snippet_result(self, v: SnippetResult | None):
        if v is None:
            return None

        if isinstance(v, dict):
            return {k: self.__dump_item(val) for k, val in v.items()}
        elif isinstance(v, list):
            return [self.__dump_item(val) for val in v]
        else:
            return self.__dump_item(v)
    {{/vendorExtensions.x-is-hit-object}}

    def to_json(self) -> str:
        return self.model_dump_json(by_alias=True, exclude_unset=True)

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of {{{classname}}} from a JSON string"""
        return cls.from_dict(loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias. """
        return self.model_dump(
            by_alias=True,
            exclude_none=True,
            exclude_unset=True,
        )

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of {{{classname}}} from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        {{#allVars}}
        {{#isContainer}}
        {{#isArray}}
        {{#items.isArray}}
        {{^items.items.isPrimitiveType}}
        obj["{{{baseName}}}"] = [ [{{{items.items.dataType}}}.from_dict(_inner_item) for _inner_item in _item] for _item in obj["{{{baseName}}}"] ] if obj.get("{{{baseName}}}") is not None else None
        {{/items.items.isPrimitiveType}}
        {{/items.isArray}}
        {{^items.isArray}}
        {{^items.isPrimitiveType}}
        {{#items.isEnumOrRef}}
        obj["{{{baseName}}}"] = obj.get("{{{baseName}}}")
        {{/items.isEnumOrRef}}
        {{^items.isEnumOrRef}}
        obj["{{{baseName}}}"] = [{{{items.dataType}}}.from_dict(_item) for _item in obj["{{{baseName}}}"]] if obj.get("{{{baseName}}}") is not None else None
        {{/items.isEnumOrRef}}
        {{/items.isPrimitiveType}}
        {{/items.isArray}}
        {{/isArray}}
        {{#isMap}}
        {{^items.isPrimitiveType}}
        {{^items.isEnumOrRef}}
        {{#items.isContainer}}
        {{#items.isMap}}
        obj["{{{baseName}}}"] = dict( (_k, dict( (_ik, {{{items.items.dataType}}}.from_dict(_iv)) for _ik, _iv in _v.items()) if _v is not None else None) for _k, _v in obj.get("{{{baseName}}}").items()) if obj.get("{{{baseName}}}") is not None else None
        {{/items.isMap}}
        {{#items.isArray}}
        obj["{{{baseName}}}"] = dict( (_k, [{{{items.items.dataType}}}.from_dict(_item) for _item in _v] if _v is not None else None) for _k, _v in obj.get("{{{baseName}}}", {}).items())
        {{/items.isArray}}
        {{/items.isContainer}}
        {{^items.isContainer}}
        obj["{{{baseName}}}"] = dict( (_k, {{{items.dataType}}}.from_dict(_v)) for _k, _v in obj["{{{baseName}}}"].items()) if obj.get("{{{baseName}}}") is not None else None
        {{/items.isContainer}}
        {{/items.isEnumOrRef}}
        {{#items.isEnumOrRef}}
        {{{baseName}}} = obj.get("{{{baseName}}}")
        if {{{baseName}}} is not None:
            obj["{{{baseName}}}"] = dict((_k, _v) for _k, _v in {{{baseName}}}.items())
        {{/items.isEnumOrRef}}
        {{/items.isPrimitiveType}}
        {{/isMap}}
        {{/isContainer}}
        {{^isContainer}}
        {{^isPrimitiveType}}
        {{^isEnumOrRef}}
        obj["{{{baseName}}}"] = {{{dataType}}}.from_dict(obj["{{{baseName}}}"]) if obj.get("{{{baseName}}}") is not None else None
        {{/isEnumOrRef}}
        {{#isEnumOrRef}}
        obj["{{{baseName}}}"] = obj.get("{{{baseName}}}")
        {{/isEnumOrRef}}
        {{/isPrimitiveType}}
        {{/isContainer}}
        {{/allVars}}

        return cls.model_validate(obj)