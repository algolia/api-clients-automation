    {{#tests}}
    async def test_{{#lambda.snakecase}}{{testType}}{{/lambda.snakecase}}_{{testIndex}}(self):
        """
        {{{testName}}}
        """
        {{#autoCreateClient}}
        self.create_client()
        {{/autoCreateClient}}

        {{#steps}}
        {{#isError}}
        try:
            {{#dynamicTemplate}}{{/dynamicTemplate}}
            assert False
        except (ValueError, Exception) as e:
            assert str(e) == {{#lambda.codeSnakeCase}}"{{{expectedError}}}"{{/lambda.codeSnakeCase}}
        {{/isError}}
        {{^isError}}
        {{#times}}for _ in range(0, {{.}}):
          {{/times}}{{#dynamicTemplate}}{{/dynamicTemplate}}
        {{#testUserAgent}}
        regex_user_agent = compile("{{#lambda.escapeSlash}}{{{match.value}}}{{/lambda.escapeSlash}}")
        assert regex_user_agent.match(_req.headers.get("user-agent")) is not None
        {{/testUserAgent}}
        {{#testTimeouts}}
        assert _req.timeouts.get("connect") == {{{matchConnectTimeout}}}
        assert _req.timeouts.get("response") == {{{matchResponseTimeout}}}
        {{/testTimeouts}}
        {{#testHost}}
        assert _req.host == "{{{match.value}}}"
        {{/testHost}}
        {{#testResponse}}
        {{^match.isPrimitive}}
        assert (_req if isinstance(_req, dict) else [elem.to_dict() for elem in _req] if isinstance(_req, list) else  _req.to_dict()) == loads("""{{{match.value}}}""")
        {{/match.isPrimitive}}
        {{#match.isPrimitive}}
        assert _req == {{#match}}{{> tests/generateInnerParams}}{{/match}}
        {{/match.isPrimitive}}
        {{/testResponse}}
        {{/isError}}
        {{/steps}}

    {{/tests}}