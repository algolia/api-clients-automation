# {{generationBanner}}
from os import environ
from re import compile
from json import loads

from algoliasearch.http.transporter import EchoTransporter
from algoliasearch.http.hosts import Host, HostsCollection
from algoliasearch.{{{import}}}.client import {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}
from algoliasearch.{{{import}}}.config import {{#lambda.pascalcase}}{{clientPrefix}}Config{{/lambda.pascalcase}}


class Test{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}:
    _client: {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}

    def create_client(self) -> {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}:
        _config = {{#lambda.pascalcase}}{{clientPrefix}}Config{{/lambda.pascalcase}}("appId", "apiKey"{{#hasRegionalHost}}, "{{{defaultRegion}}}"{{/hasRegionalHost}})
        self._client = {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}.create_with_config(config=_config, transporter=EchoTransporter(_config))

    {{#blocksClient}}
    {{#tests}}
    async def test_{{#lambda.snakecase}}{{testType}}{{/lambda.snakecase}}_{{testIndex}}(self):
        """
        {{{testName}}}
        """
        {{#autoCreateClient}}
        self.create_client()
        {{/autoCreateClient}}

        {{#steps}}
        {{#isError}}
        try:
            {{#dynamicTemplate}}{{/dynamicTemplate}}
            assert False
        except (ValueError, Exception) as e:
            assert str(e) == {{#lambda.codeSnakeCase}}"{{{expectedError}}}"{{/lambda.codeSnakeCase}}
        {{/isError}}
        {{^isError}}
        {{#dynamicTemplate}}{{/dynamicTemplate}}
        {{#match}}
        {{#testUserAgent}}
        regex_user_agent = compile("{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}")
        assert regex_user_agent.match(_req.headers.get("user-agent")) is not None
        {{/testUserAgent}}
        {{#testTimeouts}}
        assert _req.timeouts.get("connect") == {{{match.parametersWithDataTypeMap.connectTimeout.value}}}
        assert _req.timeouts.get("response") == {{{match.parametersWithDataTypeMap.responseTimeout.value}}}
        {{/testTimeouts}}
        {{#testHost}}
        assert _req.host == "{{{match}}}"
        {{/testHost}}
        {{#testResponse}}
        {{#matchIsObject}}
        assert _req == """{{{match.parameters}}}"""
        {{/matchIsObject}}
        {{^matchIsObject}}
        assert _req == """{{{match}}}"""
        {{/matchIsObject}}
        {{/testResponse}}
        {{/match}}
        {{/isError}}
        {{/steps}}

    {{/tests}}
    {{/blocksClient}}