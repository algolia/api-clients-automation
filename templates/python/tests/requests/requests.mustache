from time import time
from os import environ
from json import loads
from algoliasearch.http.transporter import EchoTransporter
from algoliasearch.http.helpers import SecuredApiKeyRestrictions
from algoliasearch.{{{import}}}.client import {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}
from algoliasearch.{{{import}}}.config import {{#lambda.pascalcase}}{{clientPrefix}}Config{{/lambda.pascalcase}}
{{#hasE2E}}
from ..helpers import Helpers
from dotenv import load_dotenv

load_dotenv("../../.env")
{{/hasE2E}}


class Test{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}{{#isE2E}}E2E{{/isE2E}}:
    _config = {{#lambda.pascalcase}}{{clientPrefix}}Config{{/lambda.pascalcase}}("test_app_id", "test_api_key"{{#hasRegionalHost}}, "{{{defaultRegion}}}"{{/hasRegionalHost}})
    _client = {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}.create_with_config(config=_config, transporter=EchoTransporter(_config))

    {{#hasE2E}}
    _helpers = Helpers()
    _e2e_app_id = environ.get("ALGOLIA_APPLICATION_ID")
    if _e2e_app_id is None:
        raise Exception("please provide an `ALGOLIA_APPLICATION_ID` env var for e2e tests")

    _e2e_api_key = environ.get("ALGOLIA_ADMIN_KEY")
    if _e2e_api_key is None:
        raise Exception("please provide an `ALGOLIA_ADMIN_KEY` env var for e2e tests")
    {{/hasE2E}}

    {{#blocksRequests}}
    {{#tests}}
    async def test_{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_{{testIndex}}(self):
        """
        {{{testName}}}
        """
        _req = await self._client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> tests/requests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

        {{#request}}
        assert _req.path == "{{{path}}}"
        assert _req.verb == "{{{method}}}"
        assert _req.query_parameters.items() == {{#queryParameters}}{{{.}}}{{/queryParameters}}{{^queryParameters}}{}{{/queryParameters}}.items()
        assert _req.headers.items() >= {{#headers}}{{{.}}}{{/headers}}{{^headers}}{}{{/headers}}.items()
        {{#body}}
        assert loads(_req.data) == loads("""{{{.}}}""")
        {{/body}}
        {{^body}}
        {{#assertNullBody}}
        assert _req.data is None
        {{/assertNullBody}}
        {{/body}}
        {{/request}}

        {{#response}}
        raw_resp = await {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}(self._e2e_app_id, self._e2e_api_key{{#hasRegionalHost}}, "{{{defaultRegion}}}"{{/hasRegionalHost}}).{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> tests/requests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})
        {{#statusCode}}
        assert raw_resp.status_code == {{statusCode}}
        {{/statusCode}}

        {{#body}}
        resp = await {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}(self._e2e_app_id, self._e2e_api_key{{#hasRegionalHost}}, "{{{defaultRegion}}}"{{/hasRegionalHost}}).{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}({{#parametersWithDataType}}{{> tests/requests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})
        _expected_body = loads("""{{{.}}}""")
        assert self._helpers.union(_expected_body, resp) == _expected_body
        {{/body}}
        {{/response}}

    {{/tests}}
    {{/blocksRequests}}

    {{#isSearchClient}}
    def test_generate_secured_api_key_0(self):
        """
        allow generating a secured api key without restrictions
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo")
        assert _resp == "Y2M1MGVkOGY0Yjg2YzE4MDJjYTMwOGU2YTMzNjg1MTA4Y2UwNjkwZmNjODMzYzhjN2FhNGE3M2FhZTdiMjhiZnsic2VhcmNoX3BhcmFtcyI6ICJ7XCJxdWVyeVwiOiBcIlwiLCBcInNpbWlsYXJRdWVyeVwiOiBcIlwiLCBcImZpbHRlcnNcIjogXCJcIiwgXCJzdW1PckZpbHRlcnNTY29yZXNcIjogZmFsc2UsIFwiZmFjZXRpbmdBZnRlckRpc3RpbmN0XCI6IGZhbHNlLCBcInBhZ2VcIjogMCwgXCJhcm91bmRMYXRMbmdcIjogXCJcIiwgXCJhcm91bmRMYXRMbmdWaWFJUFwiOiBmYWxzZSwgXCJwZXJzb25hbGl6YXRpb25JbXBhY3RcIjogMTAwLCBcImdldFJhbmtpbmdJbmZvXCI6IGZhbHNlLCBcInN5bm9ueW1zXCI6IHRydWUsIFwiY2xpY2tBbmFseXRpY3NcIjogZmFsc2UsIFwiYW5hbHl0aWNzXCI6IHRydWUsIFwicGVyY2VudGlsZUNvbXB1dGF0aW9uXCI6IHRydWUsIFwiZW5hYmxlQUJUZXN0XCI6IHRydWUsIFwicmVsZXZhbmN5U3RyaWN0bmVzc1wiOiAxMDAsIFwiaGlnaGxpZ2h0UHJlVGFnXCI6IFwiPGVtPlwiLCBcImhpZ2hsaWdodFBvc3RUYWdcIjogXCI8L2VtPlwiLCBcInNuaXBwZXRFbGxpcHNpc1RleHRcIjogXCJcXHUyMDI2XCIsIFwicmVzdHJpY3RIaWdobGlnaHRBbmRTbmlwcGV0QXJyYXlzXCI6IGZhbHNlLCBcImhpdHNQZXJQYWdlXCI6IDIwLCBcIm1pbldvcmRTaXplZm9yMVR5cG9cIjogNCwgXCJtaW5Xb3JkU2l6ZWZvcjJUeXBvc1wiOiA4LCBcImFsbG93VHlwb3NPbk51bWVyaWNUb2tlbnNcIjogdHJ1ZSwgXCJrZWVwRGlhY3JpdGljc09uQ2hhcmFjdGVyc1wiOiBcIlwiLCBcImRlY29tcG91bmRRdWVyeVwiOiB0cnVlLCBcImVuYWJsZVJ1bGVzXCI6IHRydWUsIFwiZW5hYmxlUGVyc29uYWxpemF0aW9uXCI6IGZhbHNlLCBcImFkdmFuY2VkU3ludGF4XCI6IGZhbHNlLCBcInJlcGxhY2VTeW5vbnltc0luSGlnaGxpZ2h0XCI6IGZhbHNlLCBcIm1pblByb3hpbWl0eVwiOiAxLCBcIm1heEZhY2V0SGl0c1wiOiAxMCwgXCJtYXhWYWx1ZXNQZXJGYWNldFwiOiAxMDAsIFwic29ydEZhY2V0VmFsdWVzQnlcIjogXCJjb3VudFwiLCBcImF0dHJpYnV0ZUNyaXRlcmlhQ29tcHV0ZWRCeU1pblByb3hpbWl0eVwiOiBmYWxzZSwgXCJlbmFibGVSZVJhbmtpbmdcIjogdHJ1ZX0iLCAidmFsaWRfdW50aWwiOiAiMCJ9"

    def test_generate_secured_api_key_1(self):
        """
        allow generating a secured api key with a dict of restrictions
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo", restrictions={
            "search_params": {"query": "foo"},
            "valid_until": 100,
            "restrict_indices": ["bar"],
            "restrict_sources": "baz",
            "user_token": "foobarbaz",
        })
        assert _resp == "OGM3YTUyNjI5MTExNjEwNWQ5ZTJhYzBlMWFmY2VjNTg3MmRlZTM4MjZmNzk2MjVmOTJkZGUyNjFhZTQzNDJlNXsic2VhcmNoX3BhcmFtcyI6ICJ7XCJxdWVyeVwiOiBcImZvb1wifSIsICJ2YWxpZF91bnRpbCI6ICIxMDAiLCAicmVzdHJpY3RfaW5kaWNlcyI6ICJiYXIiLCAicmVzdHJpY3Rfc291cmNlcyI6ICJiYXoiLCAidXNlcl90b2tlbiI6ICJmb29iYXJiYXoifQ=="

    def test_generate_secured_api_key_2(self):
        """
        allow generating a secured api key with from the model
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="bar", restrictions=SecuredApiKeyRestrictions(
              search_params={"query": "bar", "page": 3},
              valid_until=42,
              restrict_indices=["baz"],
              restrict_sources="foo",
              user_token="bazbarfoo",
        ))
        assert _resp == "NmY4NDZkZWM2OWI0YjRkYzdhNjgzOWY3NmQ3ZGRhNjNkYzBjZWRjNTYxY2NkOWEyOGQxNmEyOGNjMWIyYzJkYnsic2VhcmNoX3BhcmFtcyI6ICJ7XCJxdWVyeVwiOiBcImJhclwiLCBcInNpbWlsYXJRdWVyeVwiOiBcIlwiLCBcImZpbHRlcnNcIjogXCJcIiwgXCJzdW1PckZpbHRlcnNTY29yZXNcIjogZmFsc2UsIFwiZmFjZXRpbmdBZnRlckRpc3RpbmN0XCI6IGZhbHNlLCBcInBhZ2VcIjogMywgXCJhcm91bmRMYXRMbmdcIjogXCJcIiwgXCJhcm91bmRMYXRMbmdWaWFJUFwiOiBmYWxzZSwgXCJwZXJzb25hbGl6YXRpb25JbXBhY3RcIjogMTAwLCBcImdldFJhbmtpbmdJbmZvXCI6IGZhbHNlLCBcInN5bm9ueW1zXCI6IHRydWUsIFwiY2xpY2tBbmFseXRpY3NcIjogZmFsc2UsIFwiYW5hbHl0aWNzXCI6IHRydWUsIFwicGVyY2VudGlsZUNvbXB1dGF0aW9uXCI6IHRydWUsIFwiZW5hYmxlQUJUZXN0XCI6IHRydWUsIFwicmVsZXZhbmN5U3RyaWN0bmVzc1wiOiAxMDAsIFwiaGlnaGxpZ2h0UHJlVGFnXCI6IFwiPGVtPlwiLCBcImhpZ2hsaWdodFBvc3RUYWdcIjogXCI8L2VtPlwiLCBcInNuaXBwZXRFbGxpcHNpc1RleHRcIjogXCJcXHUyMDI2XCIsIFwicmVzdHJpY3RIaWdobGlnaHRBbmRTbmlwcGV0QXJyYXlzXCI6IGZhbHNlLCBcImhpdHNQZXJQYWdlXCI6IDIwLCBcIm1pbldvcmRTaXplZm9yMVR5cG9cIjogNCwgXCJtaW5Xb3JkU2l6ZWZvcjJUeXBvc1wiOiA4LCBcImFsbG93VHlwb3NPbk51bWVyaWNUb2tlbnNcIjogdHJ1ZSwgXCJrZWVwRGlhY3JpdGljc09uQ2hhcmFjdGVyc1wiOiBcIlwiLCBcImRlY29tcG91bmRRdWVyeVwiOiB0cnVlLCBcImVuYWJsZVJ1bGVzXCI6IHRydWUsIFwiZW5hYmxlUGVyc29uYWxpemF0aW9uXCI6IGZhbHNlLCBcImFkdmFuY2VkU3ludGF4XCI6IGZhbHNlLCBcInJlcGxhY2VTeW5vbnltc0luSGlnaGxpZ2h0XCI6IGZhbHNlLCBcIm1pblByb3hpbWl0eVwiOiAxLCBcIm1heEZhY2V0SGl0c1wiOiAxMCwgXCJtYXhWYWx1ZXNQZXJGYWNldFwiOiAxMDAsIFwic29ydEZhY2V0VmFsdWVzQnlcIjogXCJjb3VudFwiLCBcImF0dHJpYnV0ZUNyaXRlcmlhQ29tcHV0ZWRCeU1pblByb3hpbWl0eVwiOiBmYWxzZSwgXCJlbmFibGVSZVJhbmtpbmdcIjogdHJ1ZX0iLCAidmFsaWRfdW50aWwiOiAiNDIiLCAicmVzdHJpY3RfaW5kaWNlcyI6ICJiYXoiLCAicmVzdHJpY3Rfc291cmNlcyI6ICJmb28iLCAidXNlcl90b2tlbiI6ICJiYXpiYXJmb28ifQ=="

    def test_generate_secured_api_key_and_validity_0(self):
        """
        is able to check the remaining validity of a key
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo")
        _validity = self._client.get_secured_api_key_remaining_validity(_resp)
        assert abs(_validity) == int(round(time()))

    def test_generate_secured_api_key_and_validity_1(self):
        """
        throws when the validity field is not found
        """
        try:
            _resp = self._client.generate_secured_api_key("foo", {"valid_until": None})
            self._client.get_secured_api_key_remaining_validity(_resp)
            assert False
        except Exception as e:
            assert str(e) == "valid_until not found in api key."

    def test_generate_secured_api_key_and_validity_2(self):
        """
        throws when the invalid key
        """
        try:
            self._client.get_secured_api_key_remaining_validity("foo")
            assert False
        except Exception as e:
            assert str(e) == "Incorrect padding"
    {{/isSearchClient}}