from os import environ
from json import loads
from algoliasearch.http.transporter import EchoTransporter
from algoliasearch.{{{import}}}.client import {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}
from algoliasearch.{{{import}}}.config import Config
{{#hasE2E}}
from ..helpers import Helpers
from dotenv import load_dotenv

load_dotenv("../../.env")
{{/hasE2E}}


class Test{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}{{#isE2E}}E2E{{/isE2E}}:
    _config = Config("test_app_id", "test_api_key"{{#hasRegionalHost}}, "{{{defaultRegion}}}"{{/hasRegionalHost}})
    _client = {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}(EchoTransporter(_config), _config)

    {{#hasE2E}}
    _helpers = Helpers()
    _e2e_app_id = environ.get("ALGOLIA_APPLICATION_ID")
    if _e2e_app_id is None:
        raise Exception("please provide an `ALGOLIA_APPLICATION_ID` env var for e2e tests")

    _e2e_api_key = environ.get("ALGOLIA_ADMIN_KEY")
    if _e2e_api_key is None:
        raise Exception("please provide an `ALGOLIA_ADMIN_KEY` env var for e2e tests")
    {{/hasE2E}}

    {{#blocksRequests}}
    {{#tests}}
    async def test_{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_{{testIndex}}(self):
        """
        {{{testName}}}
        """
        _req = await self._client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> requests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

        {{#request}}
        assert _req.path == "{{{path}}}"
        assert _req.verb == "{{{method}}}"
        assert _req.query_parameters.items()  >= {{#queryParameters}}{{{.}}}{{/queryParameters}}{{^queryParameters}}{}{{/queryParameters}}.items()
        assert _req.headers.items() >= {{#headers}}{{{.}}}{{/headers}}{{^headers}}{}{{/headers}}.items()
        {{#body}}
        assert loads(_req.data) == loads("""{{{.}}}""")
        {{/body}}
        {{^body}}
        {{#assertNullBody}}
        assert _req.data is None
        {{/assertNullBody}}
        {{/body}}
        {{/request}}

        {{#response}}
        resp = await SearchClient.create(self._e2e_app_id, self._e2e_api_key).{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> requests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})
  
        {{#statusCode}}
        assert resp.status_code == {{statusCode}}
        {{/statusCode}}
        {{#body}}
        _expected_body = loads("""{{{.}}}""")
        assert self._helpers.union(_expected_body, loads(resp.raw_data)) == _expected_body
        {{/body}}
        {{/response}}

    {{/tests}}
    {{/blocksRequests}}