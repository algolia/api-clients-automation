from os import environ
from json import loads

from algoliasearch.{{{import}}} import {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}


class Test{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}:
    app_id = environ.get("ALGOLIA_APPLICATION_ID")
    if app_id is None:
        app_id = "test_app_id"

    api_key = environ.get("ALGOLIA_SEARCH_KEY")
    if api_key is None:
        api_key = "test_api_key"

    _client = {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}.create(app_id, api_key)

    {{#blocksRequests}}
    {{#tests}}
    async def test_{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_{{testIndex}}(self):
        """
        {{{testName}}}
        """
        _req = await self._client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}({{#parametersWithDataType}}{{> requests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

        assert _req.get("path") == "{{{request.path}}}"
        assert _req.get("method") == "{{{request.method}}}"
        assert _req.get("data") {{#request.body}}== """{{{.}}}"""{{/request.body}}{{^request.body}}is None{{/request.body}}
        assert _req.get("query_params") {{#request.queryParameters}}== {{{.}}}{{/request.queryParameters}}{{^request.queryParameters}}is None{{/request.queryParameters}}
        assert _req.get("headers") {{#request.headers}}== {{{.}}}{{/request.headers}}{{^request.headers}}is None{{/request.headers}}

    {{/tests}}
    {{/blocksRequests}}