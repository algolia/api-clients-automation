from os import environ
from json import loads

from algoliasearch.http.transporter import EchoTransporter
from algoliasearch.{{{import}}}.client import {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}
from algoliasearch.{{{import}}}.config import Config


class Test{{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}Requests:
    app_id = environ.get("ALGOLIA_APPLICATION_ID")
    if app_id is None:
        app_id = "test_app_id"

    api_key = environ.get("ALGOLIA_SEARCH_KEY")
    if api_key is None:
        api_key = "test_api_key"

    _config = Config(app_id, api_key{{#hasRegionalHost}}, "{{{defaultRegion}}}"{{/hasRegionalHost}})
    _client = {{#lambda.pascalcase}}{{{client}}}{{/lambda.pascalcase}}(EchoTransporter(_config), _config)

    {{#blocksRequests}}
    {{#tests}}
    async def test_{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_{{testIndex}}(self):
        """
        {{{testName}}}
        """
        _req = await self._client.{{#lambda.snakecase}}{{method}}{{/lambda.snakecase}}_with_http_info({{#parametersWithDataType}}{{> requests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}} request_options={ {{#requestOptions.headers.parameters}}"headers":loads("""{{{.}}}"""),{{/requestOptions.headers.parameters}}{{#requestOptions.queryParameters.parameters}}"query_parameters":loads("""{{{.}}}"""),{{/requestOptions.queryParameters.parameters}} }{{/hasRequestOptions}})

        assert _req.path == "{{{request.path}}}"
        assert _req.verb == "{{{request.method}}}"
        assert _req.query_parameters.items()  >= {{#request.queryParameters}}{{{.}}}{{/request.queryParameters}}{{^request.queryParameters}}{}{{/request.queryParameters}}.items()
        assert _req.headers.items() >= {{#request.headers}}{{{.}}}{{/request.headers}}{{^request.headers}}{}{{/request.headers}}.items()
        {{#request}}
        {{#body}}
        assert loads(_req.data) == loads("""{{{.}}}""")
        {{/body}}
        {{^body}}
        {{#assertNullBody}}
        assert _req.data is None
        {{/assertNullBody}}
        {{/body}}
        {{/request}}

    {{/tests}}
    {{/blocksRequests}}