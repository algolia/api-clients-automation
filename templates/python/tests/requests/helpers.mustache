def test_generate_secured_api_key_0(self):
        """
        allow generating a secured api key without restrictions
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo")
        assert _resp == "Yzc2MzU2ZWZhMTlkMjE5ZDFkN2UwOGNjYjIwYjFkMjZkYjUzYjE0MzE1NmY0MDZjOTlkY2I4ZTA4NzZkNmM1NXt9"

    def test_generate_secured_api_key_1(self):
        """
        allow generating a secured api key with a dict of restrictions
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo", restrictions={
            "search_params": {"query": "foo"},
            "valid_until": 100,
            "restrict_indices": ["bar"],
            "restrict_sources": "baz",
            "user_token": "foobarbaz",
        })
        assert _resp == "OGM3YTUyNjI5MTExNjEwNWQ5ZTJhYzBlMWFmY2VjNTg3MmRlZTM4MjZmNzk2MjVmOTJkZGUyNjFhZTQzNDJlNXsic2VhcmNoX3BhcmFtcyI6ICJ7XCJxdWVyeVwiOiBcImZvb1wifSIsICJ2YWxpZF91bnRpbCI6ICIxMDAiLCAicmVzdHJpY3RfaW5kaWNlcyI6ICJiYXIiLCAicmVzdHJpY3Rfc291cmNlcyI6ICJiYXoiLCAidXNlcl90b2tlbiI6ICJmb29iYXJiYXoifQ=="

    def test_generate_secured_api_key_2(self):
        """
        allow generating a secured api key with from the model
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="bar", restrictions=SecuredAPIKeyRestrictions(
              search_params={"query": "bar", "page": 3},
              valid_until=42,
              restrict_indices=["baz"],
              restrict_sources="foo",
              user_token="bazbarfoo",
        ))
        assert _resp == "Y2ZhNWM0Y2MxNjc1NTE2YjhiZjdlMGU5YWE1OGViOTk5MTdjMGU1YjRhNDU2NTczOWI5ZGE5Y2NjMTJmMDE0YXsic2VhcmNoUGFyYW1zIjogIntcInF1ZXJ5XCI6IFwiYmFyXCIsIFwic2ltaWxhclF1ZXJ5XCI6IFwiXCIsIFwiZmlsdGVyc1wiOiBcIlwiLCBcInN1bU9yRmlsdGVyc1Njb3Jlc1wiOiBmYWxzZSwgXCJmYWNldGluZ0FmdGVyRGlzdGluY3RcIjogZmFsc2UsIFwicGFnZVwiOiAzLCBcImFyb3VuZExhdExuZ1wiOiBcIlwiLCBcImFyb3VuZExhdExuZ1ZpYUlQXCI6IGZhbHNlLCBcInBlcnNvbmFsaXphdGlvbkltcGFjdFwiOiAxMDAsIFwiZ2V0UmFua2luZ0luZm9cIjogZmFsc2UsIFwic3lub255bXNcIjogdHJ1ZSwgXCJjbGlja0FuYWx5dGljc1wiOiBmYWxzZSwgXCJhbmFseXRpY3NcIjogdHJ1ZSwgXCJwZXJjZW50aWxlQ29tcHV0YXRpb25cIjogdHJ1ZSwgXCJlbmFibGVBQlRlc3RcIjogdHJ1ZSwgXCJyZWxldmFuY3lTdHJpY3RuZXNzXCI6IDEwMCwgXCJoaWdobGlnaHRQcmVUYWdcIjogXCI8ZW0+XCIsIFwiaGlnaGxpZ2h0UG9zdFRhZ1wiOiBcIjwvZW0+XCIsIFwic25pcHBldEVsbGlwc2lzVGV4dFwiOiBcIlxcdTIwMjZcIiwgXCJyZXN0cmljdEhpZ2hsaWdodEFuZFNuaXBwZXRBcnJheXNcIjogZmFsc2UsIFwiaGl0c1BlclBhZ2VcIjogMjAsIFwibWluV29yZFNpemVmb3IxVHlwb1wiOiA0LCBcIm1pbldvcmRTaXplZm9yMlR5cG9zXCI6IDgsIFwiYWxsb3dUeXBvc09uTnVtZXJpY1Rva2Vuc1wiOiB0cnVlLCBcImtlZXBEaWFjcml0aWNzT25DaGFyYWN0ZXJzXCI6IFwiXCIsIFwiZGVjb21wb3VuZFF1ZXJ5XCI6IHRydWUsIFwiZW5hYmxlUnVsZXNcIjogdHJ1ZSwgXCJlbmFibGVQZXJzb25hbGl6YXRpb25cIjogZmFsc2UsIFwiYWR2YW5jZWRTeW50YXhcIjogZmFsc2UsIFwicmVwbGFjZVN5bm9ueW1zSW5IaWdobGlnaHRcIjogZmFsc2UsIFwibWluUHJveGltaXR5XCI6IDEsIFwibWF4RmFjZXRIaXRzXCI6IDEwLCBcIm1heFZhbHVlc1BlckZhY2V0XCI6IDEwMCwgXCJzb3J0RmFjZXRWYWx1ZXNCeVwiOiBcImNvdW50XCIsIFwiYXR0cmlidXRlQ3JpdGVyaWFDb21wdXRlZEJ5TWluUHJveGltaXR5XCI6IGZhbHNlLCBcImVuYWJsZVJlUmFua2luZ1wiOiB0cnVlfSIsICJ2YWxpZFVudGlsIjogIjQyIiwgInJlc3RyaWN0SW5kaWNlcyI6ICJiYXoiLCAicmVzdHJpY3RTb3VyY2VzIjogImZvbyIsICJ1c2VyVG9rZW4iOiAiYmF6YmFyZm9vIn0="

    def test_generate_secured_api_key_and_validity_0(self):
        """
        is able to check the remaining validity of a key
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo", restrictions={"valid_until": 0})
        _validity = self._client.get_secured_api_key_remaining_validity(_resp)
        assert abs(_validity) == int(round(time()))

    def test_generate_secured_api_key_and_validity_1(self):
        """
        throws when the validity field is not found
        """
        try:
            _resp = self._client.generate_secured_api_key("foo", {"valid_until": None})
            self._client.get_secured_api_key_remaining_validity(_resp)
            assert False
        except Exception as e:
            assert str(e) == "valid_until not found in api key."

    def test_generate_secured_api_key_and_validity_2(self):
        """
        throws when the invalid key
        """
        try:
            self._client.get_secured_api_key_remaining_validity("foo")
            assert False
        except Exception as e:
            assert str(e) == "Incorrect padding"

    async def test_replace_all_objects_0(self):
        """
        executes with minimal parameters
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo", objects=[{"name": "John Doe"}]
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [BatchResponse(task_id=42, object_ids=["foo", "bar"])],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }

    async def test_replace_all_objects_1(self):
        """
        does many calls when len(objects) > batchSize
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo",
            objects=[
                {
                    "name": f"John Doe{i}",
                    "objectID": f"fff2bd4d-bb17-4e21-a0c4-0a8ea5e363f2{i}",
                }
                for i in range(33)
            ],
            batch_size=10,
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
            ],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }

    async def test_replace_all_objects_2(self):
        """
        batchSize is 1000 by default
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo",
            objects=[
                {
                    "name": f"John Doe{i}",
                    "objectID": f"fff2bd4d-bb17-4e21-a0c4-0a8ea5e363f2{i}",
                }
                for i in range(1001)
            ],
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
            ],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }
