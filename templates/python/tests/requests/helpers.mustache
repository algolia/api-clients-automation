def test_generate_secured_api_key_0(self):
        """
        allow generating a secured api key without restrictions
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo")
        assert _resp == "Yzc2MzU2ZWZhMTlkMjE5ZDFkN2UwOGNjYjIwYjFkMjZkYjUzYjE0MzE1NmY0MDZjOTlkY2I4ZTA4NzZkNmM1NXt9"

    def test_generate_secured_api_key_1(self):
        """
        allow generating a secured api key with a dict of restrictions
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo", restrictions={
            "search_params": {"query": "foo"},
            "valid_until": 100,
            "restrict_indices": ["bar"],
            "restrict_sources": "baz",
            "user_token": "foobarbaz",
        })
        assert _resp == "OGM3YTUyNjI5MTExNjEwNWQ5ZTJhYzBlMWFmY2VjNTg3MmRlZTM4MjZmNzk2MjVmOTJkZGUyNjFhZTQzNDJlNXsic2VhcmNoX3BhcmFtcyI6ICJ7XCJxdWVyeVwiOiBcImZvb1wifSIsICJ2YWxpZF91bnRpbCI6ICIxMDAiLCAicmVzdHJpY3RfaW5kaWNlcyI6ICJiYXIiLCAicmVzdHJpY3Rfc291cmNlcyI6ICJiYXoiLCAidXNlcl90b2tlbiI6ICJmb29iYXJiYXoifQ=="

    def test_generate_secured_api_key_2(self):
        """
        allow generating a secured api key with the model
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="bar", restrictions=SecuredAPIKeyRestrictions(
              search_params={"query": "bar", "page": 3},
              valid_until=42,
              restrict_indices=["baz"],
              restrict_sources="foo",
              user_token="bazbarfoo",
        ))
        assert _resp == "NmIzMWY4NjlmOGJlZTQxZmI2MjRhZDkwZTY0NWRiY2E3Yzk0NWNhNDMyMjI5NWZiNDk2YzliZjM1YTA1M2Y3Y3sic2VhcmNoUGFyYW1zIjogIntcInF1ZXJ5XCI6IFwiYmFyXCIsIFwic2ltaWxhclF1ZXJ5XCI6IFwiXCIsIFwic3VtT3JGaWx0ZXJzU2NvcmVzXCI6IGZhbHNlLCBcImZhY2V0aW5nQWZ0ZXJEaXN0aW5jdFwiOiBmYWxzZSwgXCJwYWdlXCI6IDMsIFwiYXJvdW5kTGF0TG5nXCI6IFwiXCIsIFwiYXJvdW5kTGF0TG5nVmlhSVBcIjogZmFsc2UsIFwicGVyc29uYWxpemF0aW9uSW1wYWN0XCI6IDEwMCwgXCJnZXRSYW5raW5nSW5mb1wiOiBmYWxzZSwgXCJzeW5vbnltc1wiOiB0cnVlLCBcImNsaWNrQW5hbHl0aWNzXCI6IGZhbHNlLCBcImFuYWx5dGljc1wiOiB0cnVlLCBcInBlcmNlbnRpbGVDb21wdXRhdGlvblwiOiB0cnVlLCBcImVuYWJsZUFCVGVzdFwiOiB0cnVlLCBcInJlbGV2YW5jeVN0cmljdG5lc3NcIjogMTAwLCBcImhpZ2hsaWdodFByZVRhZ1wiOiBcIjxlbT5cIiwgXCJoaWdobGlnaHRQb3N0VGFnXCI6IFwiPC9lbT5cIiwgXCJzbmlwcGV0RWxsaXBzaXNUZXh0XCI6IFwiXFx1MjAyNlwiLCBcInJlc3RyaWN0SGlnaGxpZ2h0QW5kU25pcHBldEFycmF5c1wiOiBmYWxzZSwgXCJoaXRzUGVyUGFnZVwiOiAyMCwgXCJtaW5Xb3JkU2l6ZWZvcjFUeXBvXCI6IDQsIFwibWluV29yZFNpemVmb3IyVHlwb3NcIjogOCwgXCJhbGxvd1R5cG9zT25OdW1lcmljVG9rZW5zXCI6IHRydWUsIFwia2VlcERpYWNyaXRpY3NPbkNoYXJhY3RlcnNcIjogXCJcIiwgXCJkZWNvbXBvdW5kUXVlcnlcIjogdHJ1ZSwgXCJlbmFibGVSdWxlc1wiOiB0cnVlLCBcImVuYWJsZVBlcnNvbmFsaXphdGlvblwiOiBmYWxzZSwgXCJhZHZhbmNlZFN5bnRheFwiOiBmYWxzZSwgXCJyZXBsYWNlU3lub255bXNJbkhpZ2hsaWdodFwiOiBmYWxzZSwgXCJtaW5Qcm94aW1pdHlcIjogMSwgXCJtYXhGYWNldEhpdHNcIjogMTAsIFwibWF4VmFsdWVzUGVyRmFjZXRcIjogMTAwLCBcInNvcnRGYWNldFZhbHVlc0J5XCI6IFwiY291bnRcIiwgXCJhdHRyaWJ1dGVDcml0ZXJpYUNvbXB1dGVkQnlNaW5Qcm94aW1pdHlcIjogZmFsc2UsIFwiZW5hYmxlUmVSYW5raW5nXCI6IHRydWV9IiwgInZhbGlkVW50aWwiOiAiNDIiLCAicmVzdHJpY3RJbmRpY2VzIjogImJheiIsICJyZXN0cmljdFNvdXJjZXMiOiAiZm9vIiwgInVzZXJUb2tlbiI6ICJiYXpiYXJmb28ifQ=="

    def test_generate_secured_api_key_and_validity_0(self):
        """
        is able to check the remaining validity of a key
        """
        _resp = self._client.generate_secured_api_key(parent_api_key="foo", restrictions={"valid_until": 0})
        _validity = self._client.get_secured_api_key_remaining_validity(_resp)
        assert abs(_validity) == int(round(time()))

    def test_generate_secured_api_key_and_validity_1(self):
        """
        throws when the validity field is not found
        """
        try:
            _resp = self._client.generate_secured_api_key("foo", {"valid_until": None})
            self._client.get_secured_api_key_remaining_validity(_resp)
            assert False
        except Exception as e:
            assert str(e) == "valid_until not found in api key."

    def test_generate_secured_api_key_and_validity_2(self):
        """
        throws when the invalid key
        """
        try:
            self._client.get_secured_api_key_remaining_validity("foo")
            assert False
        except Exception as e:
            assert str(e) == "Incorrect padding"

    async def test_replace_all_objects_0(self):
        """
        executes with minimal parameters
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo", objects=[{"name": "John Doe"}]
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [BatchResponse(task_id=42, object_ids=["foo", "bar"])],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }

    async def test_replace_all_objects_1(self):
        """
        does many calls when len(objects) > batchSize
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo",
            objects=[
                {
                    "name": f"John Doe{i}",
                    "objectID": f"fff2bd4d-bb17-4e21-a0c4-0a8ea5e363f2{i}",
                }
                for i in range(33)
            ],
            batch_size=10,
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
            ],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }

    async def test_replace_all_objects_2(self):
        """
        batchSize is 1000 by default
        """
        self._client.batch = AsyncMock(
            return_value=BatchResponse(task_id=42, object_ids=["foo", "bar"])
        )
        self._client.operation_index = AsyncMock(
            return_value=UpdatedAtResponse(task_id=21, updated_at="foobar")
        )
        self._client.get_task = AsyncMock(
            return_value=GetTaskResponse(status="published")
        )
        _resp = await self._client.replace_all_objects(
            index_name="foo",
            objects=[
                {
                    "name": f"John Doe{i}",
                    "objectID": f"fff2bd4d-bb17-4e21-a0c4-0a8ea5e363f2{i}",
                }
                for i in range(1001)
            ],
        )
        self._client.operation_index.assert_called()
        self._client.batch.assert_called()
        self._client.operation_index.assert_called()
        assert _resp == {
            "batch_responses": [
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
                BatchResponse(task_id=42, object_ids=["foo", "bar"]),
            ],
            "copy_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
            "move_operation_response": UpdatedAtResponse(
                task_id=21, updated_at="foobar"
            ),
        }