import com.algolia.exceptions.AlgoliaRuntimeException;
import com.fasterxml.jackson.core.*;
import com.fasterxml.jackson.databind.*;
import com.fasterxml.jackson.databind.annotation.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.algolia.exceptions.AlgoliaRuntimeException;
import com.algolia.utils.CompoundType;

import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.logging.Logger;

/**
 * {{{description}}}{{^description}}{{classname}}{{/description}}{{#isDeprecated}}
 * @deprecated{{/isDeprecated}}
 */{{#isDeprecated}}
@Deprecated{{/isDeprecated}}
@JsonDeserialize(using = {{classname}}.Deserializer.class)
{{>additionalModelTypeAnnotations}}
public interface {{classname}} {

    {{#vendorExtensions.x-is-multi-array}}
    {{#composedSchemas.oneOf}}
    {{^isModel}}
    {{^isEnumRef}}
    /** {{classname}} as {{{datatypeWithEnum}}} wrapper. */
    static {{classname}} of{{#isArray}}{{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}{{/isArray}}({{{datatypeWithEnum}}} value) {
        return new {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper(value);
    }
    {{/isEnumRef}}
    {{/isModel}}
    {{/composedSchemas.oneOf}}
    {{/vendorExtensions.x-is-multi-array}}

    {{^vendorExtensions.x-is-multi-array}}
    {{#composedSchemas.oneOf}}
    {{^isModel}}
    {{^isEnumRef}}
    /** {{classname}} as {{{datatypeWithEnum}}} wrapper. */
    static {{classname}} of({{{datatypeWithEnum}}} value) {
        return new {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper(value);
    }
    {{/isEnumRef}}
    {{/isModel}}
    {{/composedSchemas.oneOf}}
    {{/vendorExtensions.x-is-multi-array}}

    {{#composedSchemas.oneOf}}
    {{^isModel}}
    {{^isEnumRef}}
    /** {{classname}} as {{{datatypeWithEnum}}} wrapper. */
    @JsonSerialize(using = {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper.Serializer.class)
    class {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper implements {{classname}}{
        private final {{{datatypeWithEnum}}} value;

        {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper({{{datatypeWithEnum}}} value) {
            this.value = value;
        }

        public {{{datatypeWithEnum}}} getValue() {
            return value;
        }

        static class Serializer extends JsonSerializer<{{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper> {

            @Override
            public void serialize({{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper value, JsonGenerator gen, SerializerProvider provider) throws IOException {
                gen.writeObject(value.getValue());
            }
        }
    }
    {{/isEnumRef}}
    {{/isModel}}
    {{/composedSchemas.oneOf}}

    class Deserializer extends JsonDeserializer<{{classname}}> {

        private static final Logger LOGGER = Logger.getLogger(Deserializer.class.getName());

        @Override
        public {{classname}} deserialize(JsonParser jp, DeserializationContext ctxt) throws IOException {
            JsonNode tree = jp.readValueAsTree();
            {{#composedSchemas.oneOf}}
            // deserialize {{{datatypeWithEnum}}}
            if (tree.{{#isMap}}isObject(){{/isMap}}{{#isModel}}isObject(){{#vendorExtensions.x-discriminator-fields}} && tree.has("{{{.}}}"){{/vendorExtensions.x-discriminator-fields}}{{/isModel}}{{#isEnumRef}}isTextual(){{/isEnumRef}}{{#isArray}}isArray(){{/isArray}}{{#isInteger}}isInt(){{/isInteger}}{{#isLong}}isLong(){{/isLong}}{{#isDouble}}isDouble(){{/isDouble}}{{#isBoolean}}isBoolean(){{/isBoolean}}{{#isString}}isTextual(){{/isString}}){
                try(JsonParser parser = tree.traverse(jp.getCodec())) {  
                    {{#isModel}}
                    return parser.readValueAs({{{datatypeWithEnum}}}.class);
                    {{/isModel}}
                    {{#isEnumRef}}
                    return parser.readValueAs({{{datatypeWithEnum}}}.class);
                    {{/isEnumRef}}
                    {{#isArray}}
                    {{{datatypeWithEnum}}} value = parser.readValueAs(new TypeReference<{{{datatypeWithEnum}}}>(){});
                    return new {{classname}}.{{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper(value);
                    {{/isArray}}
                    {{^isModel}}{{^isEnumRef}}{{^isArray}}{{^isMap}}
                    {{{datatypeWithEnum}}} value = parser.readValueAs({{{datatypeWithEnum}}}.class);
                    return new {{classname}}.{{{datatypeWithEnum}}}Wrapper(value);
                    {{/isMap}}{{/isArray}}{{/isEnumRef}}{{/isModel}}
                    {{#isMap}}
                    {{{datatypeWithEnum}}} value = parser.readValueAs(new TypeReference<{{{datatypeWithEnum}}}>(){});
                    return new {{classname}}.{{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}Wrapper(value);
                    {{/isMap}}
                } catch (Exception e) {
                    // deserialization failed, continue
                    LOGGER.finest("Failed to deserialize oneOf {{{datatypeWithEnum}}} (error: " + e.getMessage() + ") (type: {{{datatypeWithEnum}}})");
                }    
            }
            {{/composedSchemas.oneOf}}
            throw new AlgoliaRuntimeException(String.format("Failed to deserialize json element: %s", tree));
        }

        /**
         * Handle deserialization of the 'null' value.
         */
        @Override
        public {{classname}} getNullValue(DeserializationContext ctxt) throws JsonMappingException {
        {{#isNullable}}
            return null;
        {{/isNullable}}
        {{^isNullable}}
            throw new JsonMappingException(ctxt.getParser(), "{{classname}} cannot be null");
        {{/isNullable}}
        }
    }
}