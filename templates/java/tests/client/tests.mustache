{{#tests}}
@Test
@DisplayName("{{{testName}}}")
void {{testType}}Test{{testIndex}}() {
  {{#autoCreateClient}}
    {{client}} client = createClient();
  {{/autoCreateClient}}

  {{#isHelper}}assertDoesNotThrow(() -> { {{/isHelper}}
  {{#steps}}
  {{#times}}
  for (int i = 0; i < {{.}}; i++) {
  {{/times}}
    {{#isError}}
      {
        Exception exception = assertThrows(Exception.class, () -> {
          {{#dynamicTemplate}}{{/dynamicTemplate}}
        });
        assertEquals("{{{expectedError}}}", exception.getMessage());
      }
    {{/isError}}
    {{^isError}}
      {{#dynamicTemplate}}{{/dynamicTemplate}}
      {{#testUserAgent}} 
      {
        String regexp = {{#match}}{{> tests/generateParams}}{{/match}};
        assertTrue(result.headers.get("user-agent").matches(regexp), "Expected " + result.headers.get("user-agent") + " to match the following regex: " + regexp);
      }
      {{/testUserAgent}}
      {{#testTimeouts}}
        assertEquals({{{matchConnectTimeout}}}, result.connectTimeout);
        assertEquals({{{matchResponseTimeout}}}, result.responseTimeout);
      {{/testTimeouts}}
      {{#testHost}}
        assertEquals({{#match}}{{> tests/generateParams}}{{/match}}, result.host);
      {{/testHost}}
      {{#testResponse}}
        {{#match.isPrimitive}}
          assertEquals({{#match}}{{> tests/generateParams}}{{/match}}, res);
        {{/match.isPrimitive}}
        {{^match.isPrimitive}}
          assertDoesNotThrow(() -> JSONAssert.assertEquals({{#match}}{{> tests/generateParams}}{{/match}}, json.writeValueAsString(res), JSONCompareMode.STRICT));
        {{/match.isPrimitive}}
      {{/testResponse}}
    {{/isError}}
  {{#times}}
  }
  {{/times}}
  {{/steps}}
  {{#isHelper}} });{{/isHelper}}
}
{{/tests}}