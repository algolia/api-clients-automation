package com.algolia.client;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertThrows;
import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;

import com.algolia.utils.HttpRequester;
import com.algolia.EchoInterceptor;
import com.algolia.EchoResponse;
import com.algolia.api.{{client}};
import com.algolia.model.{{import}}.*;
import com.algolia.config.*;
import java.util.*;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.TestInstance;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.skyscreamer.jsonassert.JSONAssert;
import org.skyscreamer.jsonassert.JSONCompareMode;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class {{client}}ClientTests {
  private EchoInterceptor echo = new EchoInterceptor();
  private ObjectMapper json;
    
  @BeforeAll
  void init() {
    this.json = JsonMapper.builder().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false).build();
  }

  {{client}} createClient() {
      return new {{client}}("appId", "apiKey", {{#hasRegionalHost}}"{{defaultRegion}}", {{/hasRegionalHost}}withEchoRequester());
  }

  private ClientOptions withEchoRequester() {
    return ClientOptions.builder().setRequesterConfig(requester -> requester.addInterceptor(echo)).build();
  }

  private ClientOptions withCustomHosts(List<Host> hosts, boolean gzipEncoding) {
    return ClientOptions.builder().setHosts(hosts).setCompressionType(gzipEncoding ? CompressionType.GZIP : CompressionType.NONE).build();
  }

  {{#blocksClient}}
  {{#tests}}
  @Test
  @DisplayName("{{{testName}}}")
  void {{testType}}Test{{testIndex}}() {
    {{#autoCreateClient}}
      {{client}} client = createClient();
    {{/autoCreateClient}}

    {{#steps}}
      {{#isError}}
       {
          Exception exception = assertThrows(Exception.class, () -> {
            {{#dynamicTemplate}}{{/dynamicTemplate}}
          });
          assertEquals("{{{expectedError}}}", exception.getMessage());
        }
      {{/isError}}
      {{^isError}}
        {{#dynamicTemplate}}{{/dynamicTemplate}}
        {{#match}}
          {{#testUserAgent}} {
            String regexp = "{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}";
            assertTrue(result.headers.get("user-agent").matches(regexp), "Expected " + result.headers.get("user-agent") + " to match the following regex: " + regexp);
          }{{/testUserAgent}}
          {{#testTimeouts}}
            assertEquals({{{match.parametersWithDataTypeMap.connectTimeout.value}}}, result.connectTimeout);
            assertEquals({{{match.parametersWithDataTypeMap.responseTimeout.value}}}, result.responseTimeout);
          {{/testTimeouts}}
          {{#testHost}}
            assertEquals("{{{match}}}", result.host);
          {{/testHost}}
          {{#testResponse}}
            assertDoesNotThrow(() -> JSONAssert.assertEquals("{{#lambda.escapeQuotes}}{{{match.parameters}}}{{/lambda.escapeQuotes}}", json.writeValueAsString(res), JSONCompareMode.STRICT));
          {{/testResponse}}
        {{/match}}
      {{/isError}}
    {{/steps}}
  }
  {{/tests}}
  {{/blocksClient}}
}