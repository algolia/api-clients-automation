package com.algolia.requests;

import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.fail;

import com.algolia.EchoInterceptor;
import com.algolia.EchoResponse;
import com.algolia.api.{{client}};
import com.algolia.config.*;
import com.algolia.model.{{import}}.*;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import java.util.*;
import org.junit.jupiter.api.*;
import org.skyscreamer.jsonassert.JSONAssert;
import org.skyscreamer.jsonassert.JSONCompareMode;

@TestInstance(TestInstance.Lifecycle.PER_CLASS)
class {{client}}RequestsTests {
    private {{client}} client;
    private EchoInterceptor echo;
    private ObjectMapper json;
    
    @BeforeAll
    void init() {
        this.json = JsonMapper.builder().configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES, false).build();
        this.echo = new EchoInterceptor();
        ClientOptions options = ClientOptions.builder()
                .setRequesterConfig(requester -> requester.addInterceptor(echo))
                .build();
        this.client = new {{client}}("appId", "apiKey", {{#hasRegionalHost}}"{{defaultRegion}}", {{/hasRegionalHost}}options);
    }

    @AfterAll
    void tearUp() throws Exception {
      client.close();
    }

    {{#blocksRequests}}
    {{#tests}}
    @Test
    @DisplayName("{{{testName}}}")
    void {{method}}Test{{testIndex}}() {
        assertDoesNotThrow(() -> {
            {{> tests/method}};
        });
        {{#request}}
        EchoResponse req = echo.getLastResponse();
        assertEquals("{{{path}}}", req.path);
        assertEquals("{{{method}}}", req.method);
        {{#body}}
        assertDoesNotThrow(() -> JSONAssert.assertEquals("{{#lambda.escapeQuotes}}{{{body}}}{{/lambda.escapeQuotes}}", req.body, JSONCompareMode.STRICT));
        {{/body}}
        {{^body}}
        {{#assertNullBody}}
        assertNull(req.body);
        {{/assertNullBody}}
        {{^assertNullBody}}
        assertEquals("{}", req.body);
        {{/assertNullBody}}
        {{/body}}

        {{#queryParameters}}
        try {
          Map<String, String> expectedQuery = json.readValue("{{#lambda.escapeQuotes}}{{{queryParameters}}}{{/lambda.escapeQuotes}}", new TypeReference<HashMap<String, String>>() {});
          Map<String, Object> actualQuery = req.queryParameters;

          assertEquals(expectedQuery.size(), actualQuery.size());
          for (Map.Entry<String, Object> p : actualQuery.entrySet()) {
            assertEquals(expectedQuery.get(p.getKey()), p.getValue());
          }
        } catch(JsonProcessingException e) {
          fail("failed to parse queryParameters json");
        }
        {{/queryParameters}}

        {{#headers}}
        try {
          Map<String, String> expectedHeaders = json.readValue("{{#lambda.escapeQuotes}}{{{headers}}}{{/lambda.escapeQuotes}}", new TypeReference<HashMap<String, String>>() {});
          Map<String, String> actualHeaders = req.headers;

          for (Map.Entry<String, String> p : expectedHeaders.entrySet()) {
            assertEquals(p.getValue(), actualHeaders.get(p.getKey()));
          }
        } catch(JsonProcessingException e) {
          fail("failed to parse headers json");
        }
        {{/headers}}
        {{/request}}
    }
    {{/tests}}
    {{/blocksRequests}}
}