{{#isSearchClient}}
/**
  * Helper: Wait for a task to complete with `indexName` and `taskID`.
  *
  * @param indexName The `indexName` where the operation was performed.
  * @param taskID The `taskID` returned in the method response.
  * @param maxRetries The maximum number of retry. 50 by default. (optional)
  * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public void waitForTask(String indexName, Long taskID, int maxRetries, IntUnaryOperator timeout, RequestOptions requestOptions) {
  TaskUtils.retryUntil(
    () -> this.getTask(indexName, taskID, requestOptions),
    (GetTaskResponse task) -> task.getStatus() == TaskStatus.PUBLISHED,
    maxRetries, 
    timeout
  );
}

/**
  * Helper: Wait for a task to complete with `indexName` and `taskID`.
  *
  * @param indexName The `indexName` where the operation was performed.
  * @param taskID The `taskID` returned in the method response.
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public void waitForTask(String indexName, Long taskID, RequestOptions requestOptions) {
  this.waitForTask(indexName, taskID, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, requestOptions);
}

/**
  * Helper: Wait for a task to complete with `indexName` and `taskID`.
  *
  * @param indexName The `indexName` where the operation was performed.
  * @param taskID The `taskID` returned in the method response.
  * @param maxRetries The maximum number of retry. 50 by default. (optional)
  * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
  */
public void waitForTask(String indexName, Long taskID, int maxRetries, IntUnaryOperator timeout) {
  this.waitForTask(indexName, taskID, maxRetries, timeout, null);
}

/**
  * Helper: Wait for a task to complete with `indexName` and `taskID`.
  *
  * @param indexName The `indexName` where the operation was performed.
  * @param taskID The `taskID` returned in the method response.
  */
public void waitForTask(String indexName, Long taskID) {
  this.waitForTask(indexName, taskID, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, null);
}

/**
* Helper: Wait for a application-level task to complete with `taskID`.
*
* @param taskID The `taskID` returned in the method response.
* @param maxRetries The maximum number of retry. 50 by default. (optional)
* @param timeout The function to decide how long to wait between retries. min(retries * 200,
*     5000) by default. (optional)
* @param requestOptions The requestOptions to send along with the query, they will be merged with
*     the transporter requestOptions. (optional)
*/
public void waitForAppTask(Long taskID, int maxRetries, IntUnaryOperator timeout, RequestOptions requestOptions) {
TaskUtils.retryUntil(
  () -> this.getAppTask(taskID, requestOptions),
  (GetTaskResponse task) -> task.getStatus() == TaskStatus.PUBLISHED,
  maxRetries,
  timeout
);
}

/**
* Helper: Wait for an application-level task to complete with `taskID`.
*
* @param taskID The `taskID` returned in the method response.
* @param requestOptions The requestOptions to send along with the query, they will be merged with
*     the transporter requestOptions. (optional)
*/
public void waitForAppTask(Long taskID, RequestOptions requestOptions) {
this.waitForAppTask(taskID, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, requestOptions);
}

/**
* Helper: Wait for an application-level task to complete with `taskID`.
*
* @param taskID The `taskID` returned in the method response.
* @param maxRetries The maximum number of retry. 50 by default. (optional)
* @param timeout The function to decide how long to wait between retries. min(retries * 200,
*     5000) by default. (optional)
*/
public void waitForAppTask(Long taskID, int maxRetries, IntUnaryOperator timeout) {
this.waitForAppTask(taskID, maxRetries, timeout, null);
}

/**
* Helper: Wait for an application-level task to complete with `taskID`.
*
* @param taskID The `taskID` returned in the method response.
*/
public void waitForAppTask(Long taskID) {
this.waitForAppTask(taskID, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, null);
}

/**
  * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
  *
  * @param operation The `operation` that was done on a `key`.
  * @param key The `key` that has been added, deleted or updated.
  * @param apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
  * @param maxRetries The maximum number of retry. 50 by default. (optional)
  * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public GetApiKeyResponse waitForApiKey(
  ApiKeyOperation operation,
  String key,
  ApiKey apiKey,
  int maxRetries,
  IntUnaryOperator timeout,
  RequestOptions requestOptions
) {
  if (operation == ApiKeyOperation.UPDATE) {
    if (apiKey == null) {
      throw new AlgoliaRuntimeException("`apiKey` is required when waiting for an `update` operation.");
    }

    // when updating an api key, we poll the api until we receive a different key
    return TaskUtils.retryUntil(
      () -> this.getApiKey(key, requestOptions),
      (GetApiKeyResponse respKey) -> {
        // we need to convert to an ApiKey object to use the `equals` method
        ApiKey sameType = new ApiKey()
          .setAcl(respKey.getAcl())
          .setDescription(respKey.getDescription())
          .setIndexes(respKey.getIndexes())
          .setMaxHitsPerQuery(respKey.getMaxHitsPerQuery())
          .setMaxQueriesPerIPPerHour(respKey.getMaxQueriesPerIPPerHour())
          .setQueryParameters(respKey.getQueryParameters())
          .setReferers(respKey.getReferers())
          .setValidity(respKey.getValidity());

        return apiKey.equals(sameType);
      },
      maxRetries,
      timeout
    );
  }

  // bypass lambda restriction to modify final object
  final GetApiKeyResponse[] addedKey = new GetApiKeyResponse[] { null };

  // check the status of the getApiKey method
  TaskUtils.retryUntil(
    () -> {
      try {
        addedKey[0] = this.getApiKey(key, requestOptions);
        // magic number to signify we found the key
        return -2;
      } catch (AlgoliaApiException e) {
        return e.getStatusCode();
      }
    },
    (Integer status) -> {
      switch (operation) {
        case ADD:
          // stop either when the key is created or when we don't receive 404
          return status == -2 || status != 404;
        case DELETE:
          // stop when the key is not found
          return status == 404;
        default:
          // continue
          return false;
      }
    },
    maxRetries,
    timeout
  );

  return addedKey[0];
}

/**
  * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
  *
  * @param operation The `operation` that was done on a `key`. (ADD or DELETE only)
  * @param key The `key` that has been added, deleted or updated.
  * @param maxRetries The maximum number of retry. 50 by default. (optional)
  * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public GetApiKeyResponse waitForApiKey(ApiKeyOperation operation, String key, int maxRetries, IntUnaryOperator timeout, RequestOptions requestOptions) {
  return this.waitForApiKey(operation, key, null, maxRetries, timeout, requestOptions);
}
/**
  * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
  *
  * @param operation The `operation` that was done on a `key`.
  * @param key The `key` that has been added, deleted or updated.
  * @param apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public GetApiKeyResponse waitForApiKey(ApiKeyOperation operation, String key, ApiKey apiKey, RequestOptions requestOptions) {
  return this.waitForApiKey(operation, key, apiKey, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, requestOptions);
}
/**
  * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
  *
  * @param operation The `operation` that was done on a `key`. (ADD or DELETE only)
  * @param key The `key` that has been added, deleted or updated.
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public GetApiKeyResponse waitForApiKey(ApiKeyOperation operation, String key, RequestOptions requestOptions) {
  return this.waitForApiKey(operation, key, null, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, requestOptions);
}
/**
  * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
  *
  * @param operation The `operation` that was done on a `key`.
  * @param key The `key` that has been added, deleted or updated.
  * @param apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
  * @param maxRetries The maximum number of retry. 50 by default. (optional)
  * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
  */
public GetApiKeyResponse waitForApiKey(ApiKeyOperation operation, String key, ApiKey apiKey, int maxRetries, IntUnaryOperator timeout) {
  return this.waitForApiKey(operation, key, apiKey, maxRetries, timeout, null);
}
/**
  * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
  *
  * @param operation The `operation` that was done on a `key`. (ADD or DELETE only)
  * @param key The `key` that has been added, deleted or updated.
  * @param maxRetries The maximum number of retry. 50 by default. (optional)
  * @param timeout  The function to decide how long to wait between retries. min(retries * 200, 5000) by default. (optional)
  */
public GetApiKeyResponse waitForApiKey(ApiKeyOperation operation, String key, int maxRetries, IntUnaryOperator timeout) {
  return this.waitForApiKey(operation, key, null, maxRetries, timeout, null);
}
/**
  * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
  *
  * @param operation The `operation` that was done on a `key`.
  * @param key The `key` that has been added, deleted or updated.
  * @param apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
  */
public GetApiKeyResponse waitForApiKey(ApiKeyOperation operation, String key, ApiKey apiKey) {
  return this.waitForApiKey(operation, key, apiKey, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, null);
}
/**
  * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
  *
  * @param operation The `operation` that was done on a `key`. (ADD or DELETE only)
  * @param key The `key` that has been added, deleted or updated.
  */
public GetApiKeyResponse waitForApiKey(ApiKeyOperation operation, String key) {
  return this.waitForApiKey(operation, key, null, TaskUtils.DEFAULT_MAX_RETRIES, TaskUtils.DEFAULT_TIMEOUT, null);
}

/**
  * Helper: Returns an iterator on top of the `browse` method.
  *
  * @param indexName The index in which to perform the request.
  * @param params The `browse` parameters.
  * @param innerType The class held by the index, could be your custom class or {@link Object}.
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public <T> Iterable<T> browseObjects(String indexName, BrowseParamsObject params, Class<T> innerType, RequestOptions requestOptions) {
  final Holder<String> currentCursor = new Holder<>();

  return AlgoliaIterableHelper.createIterable(
    () -> {
      BrowseResponse<T> response = this.browse(indexName, params, innerType, requestOptions);
      params.setCursor(response.getCursor());
      currentCursor.value = response.getCursor();
      return response.getHits().iterator();
    },
    () -> currentCursor.value != null
  );
}

/**
  * Helper: Returns an iterator on top of the `browse` method.
  *
  * @param indexName The index in which to perform the request.
  * @param params The `browse` parameters.
  * @param innerType The class held by the index, could be your custom class or {@link Object}.
  */
public <T> Iterable<T> browseObjects(String indexName, BrowseParamsObject params, Class<T> innerType) {
  return browseObjects(indexName, params, innerType, null);
}

/**
  * Helper: Returns an iterator on top of the `searchSynonyms` method.
  *
  * @param indexName The index in which to perform the request.
  * @param params The `searchSynonyms` parameters. (optional)
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public Iterable<SynonymHit> browseSynonyms(String indexName, SearchSynonymsParams params, RequestOptions requestOptions) {
  final Holder<Integer> currentPage = new Holder<>(0);

  params.setPage(0);
  params.setHitsPerPage(1000);

  return AlgoliaIterableHelper.createIterable(
    () -> {
      SearchSynonymsResponse response = this.searchSynonyms(indexName, params, requestOptions);
      currentPage.value = response.getNbHits() < params.getHitsPerPage() ? null : currentPage.value + 1;
      return response.getHits().iterator();
    },
    () -> currentPage.value != null
  );
}

/**
  * Helper: Returns an iterator on top of the `searchSynonyms` method.
  *
  * @param indexName The index in which to perform the request.
  * @param params The `searchSynonyms` parameters .(optional)
  */
public Iterable<SynonymHit> browseSynonyms(String indexName, SearchSynonymsParams params) {
  return browseSynonyms(indexName, params, null);
}


/**
  * Helper: Returns an iterator on top of the `searchSynonyms` method.
  *
  * @param indexName The index in which to perform the request.
  */
public Iterable<SynonymHit> browseSynonyms(String indexName) {
  return browseSynonyms(indexName, null, null);
}

/**
  * Helper: Returns an iterator on top of the `searchRules` method.
  *
  * @param indexName The index in which to perform the request.
  * @param params The `searchRules` parameters. (optional)
  * @param requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions. (optional)
  */
public Iterable<Rule> browseRules(String indexName, SearchRulesParams params, RequestOptions requestOptions) {
  final Holder<Integer> currentPage = new Holder<>(0);
  final int hitsPerPage = 1000;
  params.setHitsPerPage(hitsPerPage);

  return AlgoliaIterableHelper.createIterable(
    () -> {
      SearchRulesResponse response = this.searchRules(indexName, params.setPage(currentPage.value), requestOptions);
      currentPage.value = response.getNbHits() < hitsPerPage ? null : currentPage.value + 1;
      return response.getHits().iterator();
    },
    () -> currentPage.value != null
  );
}

/**
  * Helper: Returns an iterator on top of the `searchRules` method.
  *
  * @param indexName The index in which to perform the request.
  * @param params The `searchRules` parameters. (optional)
  */
public Iterable<Rule> browseRules(String indexName, SearchRulesParams params) {
  return browseRules(indexName, params, null);
}

/**
  * Helper: Returns an iterator on top of the `searchRules` method.
  *
  * @param indexName The index in which to perform the request.
  */
public Iterable<Rule> browseRules(String indexName) {
  return browseRules(indexName, new SearchRulesParams(), null);
}

/**
  * Executes a synchronous search for the provided search requests, with certainty that we will only request
  * Algolia records (hits). Results will be received in the same order as the queries.
  *
  * @param requests A list of search requests to be executed.
  */
public <T> List<SearchResponse<T>> searchForHits(@Nonnull List<SearchForHits> requests, Class<T> innerType) {
    return LaunderThrowable.await(searchForHitsAsync(requests, null, innerType, null));
}

/**
  * Executes a synchronous search for the provided search requests, with certainty that we will only request
  * Algolia records (hits). Results will be received in the same order as the queries.
  *
  * @param requests A list of search requests to be executed.
  * @param strategy The search strategy to be employed during the search.
  */
public <T> List<SearchResponse<T>> searchForHits(@Nonnull List<SearchForHits> requests, SearchStrategy strategy, Class<T> innerType) {
    return LaunderThrowable.await(searchForHitsAsync(requests, strategy, innerType, null));
}

/**
  * Executes a synchronous search for the provided search requests, with certainty that we will only request
  * Algolia records (hits). Results will be received in the same order as the queries.
  *
  * @param requests       A list of search requests to be executed.
  * @param strategy       The search strategy to be employed during the search.
  * @param requestOptions Additional options for the search request.
  */
public <T> List<SearchResponse<T>> searchForHits(@Nonnull List<SearchForHits> requests, SearchStrategy strategy, Class<T> innerType, RequestOptions requestOptions) {
    return LaunderThrowable.await(searchForHitsAsync(requests, strategy, innerType, requestOptions));
}

/**
  * Executes an asynchronous search for the provided search requests, with certainty that we will only request
  * Algolia records (hits). Results will be received in the same order as the queries.
  *
  * @param requests A list of search requests to be executed.
  */
public <T> CompletableFuture<List<SearchResponse<T>>> searchForHitsAsync(@Nonnull List<SearchForHits> requests, Class<T> innerType) {
    return searchForHitsAsync(requests, null, innerType, null);
}

/**
  * Executes an asynchronous search for the provided search requests, with certainty that we will only request
  * Algolia records (hits). Results will be received in the same order as the queries.
  *
  * @param requests A list of search requests to be executed.
  * @param strategy The search strategy to be employed during the search.
  */
public <T> CompletableFuture<List<SearchResponse<T>>> searchForHitsAsync(@Nonnull List<SearchForHits> requests, SearchStrategy strategy, Class<T> innerType) {
    return searchForHitsAsync(requests, strategy, innerType, null);
}

/**
  * Executes an asynchronous search for the provided search requests, with certainty that we will only request
  * Algolia records (hits). Results will be received in the same order as the queries.
  *
  * @param requests       A list of search requests to be executed.
  * @param innerType      The class held by the index, could be your custom class or {@link Object}.
  * @param strategy       The search strategy to be employed during the search.
  * @param requestOptions Additional options for the search request.
  */
public <T> CompletableFuture<List<SearchResponse<T>>> searchForHitsAsync(@Nonnull List<SearchForHits> requests, SearchStrategy strategy, Class<T> innerType, RequestOptions requestOptions) {
    final List<SearchQuery> searchQueries = new ArrayList<>(requests); // Upcast the list
    final SearchMethodParams params = new SearchMethodParams()
            .setRequests(searchQueries)
            .setStrategy(strategy);
    return searchAsync(params, innerType)
            .thenApply(searchResponses -> searchResponses
                    .getResults()
                    .stream()
                    .map(res -> (SearchResponse<T>) res)
                    .collect(Collectors.toList())
            );
}

/**
  * Executes a synchronous search for the provided search requests, with certainty that we will only request
  * Algolia facets. Results will be received in the same order as the queries.
  *
  * @param requests A list of search requests to be executed.
  */
public List<SearchForFacetValuesResponse> searchForFacets(@Nonnull List<SearchForFacets> requests) {
    return LaunderThrowable.await(searchForFacetsAsync(requests, null, null));
}

/**
  * Executes a synchronous search for the provided search requests, with certainty that we will only request
  * Algolia facets. Results will be received in the same order as the queries.
  *
  * @param requests A list of search requests to be executed.
  * @param strategy The search strategy to be employed during the search.
  */
public List<SearchForFacetValuesResponse> searchForFacets(@Nonnull List<SearchForFacets> requests, SearchStrategy strategy) {
    return LaunderThrowable.await(searchForFacetsAsync(requests, strategy, null));
}

/**
  * Executes a synchronous search for the provided search requests, with certainty that we will only request
  * Algolia facets. Results will be received in the same order as the queries.
  *
  * @param requests       A list of search requests to be executed.
  * @param strategy       The search strategy to be employed during the search.
  * @param requestOptions Additional options for the search request.
  */
public List<SearchForFacetValuesResponse> searchForFacets(@Nonnull List<SearchForFacets> requests, SearchStrategy strategy, RequestOptions requestOptions) {
    return LaunderThrowable.await(searchForFacetsAsync(requests, strategy, requestOptions));
}

/**
  * Executes an asynchronous search for the provided search requests, with certainty that we will only request
  * Algolia facets. Results will be received in the same order as the queries.
  *
  * @param requests A list of search requests to be executed.
  */
public CompletableFuture<List<SearchForFacetValuesResponse>> searchForFacetsAsync(@Nonnull List<SearchForFacets> requests) {
    return searchForFacetsAsync(requests, null, null);
}

/**
  * Executes an asynchronous search for the provided search requests, with certainty that we will only request
  * Algolia facets. Results will be received in the same order as the queries.
  *
  * @param requests A list of search requests to be executed.
  * @param strategy The search strategy to be employed during the search.
  */
public CompletableFuture<List<SearchForFacetValuesResponse>> searchForFacetsAsync(@Nonnull List<SearchForFacets> requests, SearchStrategy strategy) {
    return searchForFacetsAsync(requests, strategy, null);
}

/**
  * Executes an asynchronous search for the provided search requests, with certainty that we will only request
  * Algolia facets. Results will be received in the same order as the queries.
  *
  * @param requests       A list of search requests to be executed.
  * @param strategy       The search strategy to be employed during the search.
  * @param requestOptions Additional options for the search request.
  */
public CompletableFuture<List<SearchForFacetValuesResponse>> searchForFacetsAsync(@Nonnull List<SearchForFacets> requests, SearchStrategy strategy, RequestOptions requestOptions) {
    final List<SearchQuery> searchQueries = new ArrayList<>(requests); // Upcast the list
    final SearchMethodParams params = new SearchMethodParams()
            .setRequests(searchQueries)
            .setStrategy(strategy);
    return searchAsync(params, Hit.class)
            .thenApply(searchResponses -> searchResponses
                    .getResults()
                    .stream()
                    .map(res -> (SearchForFacetValuesResponse) res)
                    .collect(Collectors.toList())
            );
}

/**
* Helper: Chunks the given `objects` list in subset of 1000 elements max in order to make it fit
* in `batch` requests.
*
* @summary Helper: Chunks the given `objects` list in subset of 1000 elements max in order to
*     make it fit in `batch` requests.
* @param indexName - The `indexName` to replace `objects` in.
* @param objects - The array of `objects` to store in the given Algolia `indexName`.
* @param action - The `batch` `action` to perform on the given array of `objects`.
* @param waitForTasks - Whether or not we should wait until every `batch` tasks has been
*     processed, this operation may slow the total execution time of this method but is more
*     reliable.
* @param batchSize - The size of the chunk of `objects`. The number of `batch` calls will be
*     equal to `length(objects) / batchSize`. Defaults to 1000.
* @param requestOptions - The requestOptions to send along with the query, they will be forwarded
*     to the `getTask` method and merged with the transporter requestOptions.
*/
public <T> List<BatchResponse> chunkedBatch(
String indexName,
Iterable<T> objects,
Action action,
boolean waitForTasks,
int batchSize,
RequestOptions requestOptions
) {
List<BatchResponse> responses = new ArrayList<>();
List<BatchRequest> requests = new ArrayList<>();

for (T item : objects) {
  if (requests.size() == batchSize) {
    BatchResponse batch = batch(indexName, new BatchWriteParams().setRequests(requests), requestOptions);
    responses.add(batch);
    requests.clear();
  }

  requests.add(new BatchRequest().setAction(action).setBody(item));
}

if (requests.size() > 0) {
  BatchResponse batch = batch(indexName, new BatchWriteParams().setRequests(requests), requestOptions);
  responses.add(batch);
}

if (waitForTasks) {
  responses.forEach(response -> waitForTask(indexName, response.getTaskID(), requestOptions));
}

return responses;
}

/**
* Push a new set of objects and remove all previous ones. Settings, synonyms and query rules are
* untouched. Replace all records in an index without any downtime.
*
* @param indexName The `indexName` to replace `objects` in.
* @param objects The array of `objects` to store in the given Algolia `indexName`.
* @param batchSize The size of the chunk of `objects`. The number of `batch` calls will be equal
*     to `length(objects) / batchSize`.
* @throws AlgoliaRetryException When the retry has failed on all hosts
* @throws AlgoliaApiException When the API sends an http error code
* @throws AlgoliaRuntimeException When an error occurred during the serialization
*/
public <T> ReplaceAllObjectsResponse replaceAllObjects(
String indexName,
Iterable<T> objects,
int batchSize,
RequestOptions requestOptions
) {
Random rnd = new Random();
String tmpIndexName = indexName + "_tmp_" + rnd.nextInt(100);

// Copy settings, synonyms and rules
UpdatedAtResponse copyOperationResponse = operationIndex(
  indexName,
  new OperationIndexParams()
    .setOperation(OperationType.COPY)
    .setDestination(tmpIndexName)
    .addScope(ScopeType.SETTINGS)
    .addScope(ScopeType.RULES)
    .addScope(ScopeType.SYNONYMS),
  requestOptions
);
waitForTask(indexName, copyOperationResponse.getTaskID(), requestOptions);

// Save new objects
List<BatchResponse> batchResponses = chunkedBatch(tmpIndexName, objects, Action.ADD_OBJECT, true, batchSize, requestOptions);

// Move temporary index to source index
UpdatedAtResponse moveOperationResponse = operationIndex(
  tmpIndexName,
  new OperationIndexParams().setOperation(OperationType.MOVE).setDestination(indexName),
  requestOptions
);
waitForTask(indexName, moveOperationResponse.getTaskID(), requestOptions);

return new ReplaceAllObjectsResponse()
  .setCopyOperationResponse(copyOperationResponse)
  .setBatchResponses(batchResponses)
  .setMoveOperationResponse(moveOperationResponse);
}
{{/isSearchClient}}