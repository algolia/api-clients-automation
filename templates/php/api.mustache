<?php
// {{{generationBanner}}}

namespace {{apiPackage}};

use {{invokerPackage}}\Algolia;
use {{invokerPackage}}\ApiException;
use {{invokerPackage}}\Configuration\{{configClassname}};
use {{invokerPackage}}\Exceptions\ExceededRetriesException;
use {{invokerPackage}}\Exceptions\ValidUntilNotFoundException;
use {{invokerPackage}}\Iterators\ObjectIterator;
use {{invokerPackage}}\Iterators\RuleIterator;
use {{invokerPackage}}\Iterators\SynonymIterator;
use {{invokerPackage}}\ObjectSerializer;
use {{invokerPackage}}\RetryStrategy\ApiWrapper;
use {{invokerPackage}}\RetryStrategy\ApiWrapperInterface;
use {{invokerPackage}}\RetryStrategy\ClusterHosts;
use {{invokerPackage}}\Support\Helpers;

/**
 * {{classname}} Class Doc Comment
 *
 * @category Class
 * @package  {{invokerPackage}}
 */
{{#operations}}class {{classname}}
{
    public const VERSION = '{{{packageVersion}}}';
    /**
     * @var ApiWrapperInterface
     */
    protected $api;

    /**
     * @var {{configClassname}}
     */
    protected $config;

    /**
     * @param {{configClassname}} $config
     * @param ApiWrapperInterface $apiWrapper
     */
    public function __construct(ApiWrapperInterface $apiWrapper, {{configClassname}} $config)
    {
        $this->config = $config;
        $this->api = $apiWrapper;
    }

    {{#hasRegionalHost}}
    /**
     * Instantiate the client with basic credentials and region
     *
     * @param string $appId  Application ID
     * @param string $apiKey Algolia API Key
     * @param string $region Region
     */
    public static function create($appId = null, $apiKey = null, $region = null)
    {
        $config = {{configClassname}}::create($appId, $apiKey, $region);

        return static::createWithConfig($config);
    }
    {{/hasRegionalHost}}

    {{^hasRegionalHost}}
    /**
     * Instantiate the client with basic credentials
     *
     * @param string $appId  Application ID
     * @param string $apiKey Algolia API Key
     */
    public static function create($appId = null, $apiKey = null)
    {
        return static::createWithConfig({{configClassname}}::create($appId, $apiKey));
    }
    {{/hasRegionalHost}}
    
    /**
     * Instantiate the client with configuration
     *
     * @param {{configClassname}} $config Configuration
     */
    public static function createWithConfig({{configClassname}} $config)
    {
        $config = clone $config;

        $apiWrapper = new ApiWrapper(
            Algolia::getHttpClient(),
            $config,
            self::getClusterHosts($config)
        );

        return new static($apiWrapper, $config);
    }

    /**
     * Gets the cluster hosts depending on the config
     *
     * @param {{configClassname}} $config
     *
     * @return ClusterHosts
     */
    public static function getClusterHosts({{configClassname}} $config)
    {
        {{#hostWithAppID}}
        $cacheKey = sprintf('%s-clusterHosts-%s', __CLASS__, $config->getAppId());

        if ($hosts = $config->getHosts()) {
            // If a list of hosts was passed, we ignore the cache
            $clusterHosts = ClusterHosts::create($hosts);
        } elseif (false === ($clusterHosts = ClusterHosts::createFromCache($cacheKey))) {
            // We'll try to restore the ClusterHost from cache, if we cannot
            // we create a new instance and set the cache key
            $clusterHosts = ClusterHosts::createFromAppId($config->getAppId())
                ->setCacheKey($cacheKey);
        }
        {{/hostWithAppID}}

        {{#hasRegionalHost}}
        if ($hosts = $config->getHosts()) {
            // If a list of hosts was passed, we ignore the cache
            $clusterHosts = ClusterHosts::create($hosts);
        } else {
            $url = $config->getRegion() !== null && $config->getRegion() !== '' ?
                str_replace('{region}', $config->getRegion(), '{{{regionalHost}}}') :
                '{{{hostWithFallback}}}';
            $clusterHosts = ClusterHosts::create($url);
        }
        {{/hasRegionalHost}}

        {{#uniqueHost}}
        if ($hosts = $config->getHosts()) {
            // If a list of hosts was passed, we ignore the cache
            $clusterHosts = ClusterHosts::create($hosts);
        } else {
            $clusterHosts = ClusterHosts::create('{{.}}');
        }
        {{/uniqueHost}}

        return $clusterHosts;
    }

    /**
     * @return {{configClassname}}
     */
    public function getClientConfig()
    {
        return $this->config;
    }

{{#operation}}
    /**
{{#notes}}
     * {{{.}}}
     *
{{/notes}}
{{#vendorExtensions}}
{{#x-acl.0}}
     * Required API Key ACLs:{{/x-acl.0}}
     {{#x-acl}}
     *  - {{.}}
{{/x-acl}}
{{/vendorExtensions}}
{{#allParams}}
     * @param {{#isString}}string{{/isString}}{{#isLong}}int{{/isLong}}{{#isInteger}}int{{/isInteger}}{{#isBoolean}}bool{{/isBoolean}}{{^isString}}{{^isLong}}{{^isInteger}}{{^isBoolean}}array{{/isBoolean}}{{/isInteger}}{{/isLong}}{{/isString}} ${{paramName}}{{#description}} {{.}}{{/description}}{{^description}} {{paramName}}{{/description}} {{#required}}(required){{/required}}{{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}
{{#isModel}}
    {{#vars}}
     * - ${{paramName}}{{> arrayParam}}
    {{/vars}}
     * @see {{{dataType}}}
{{/isModel}}
{{/allParams}}
     * @param array $requestOptions The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
     *
     * @return {{#returnType}}{{#responses}}{{#dataType}}{{#-first}}array<string, mixed>|{{{dataType}}}{{/-first}}{{/dataType}}{{/responses}}{{/returnType}}{{^returnType}}void{{/returnType}}
  {{#isDeprecated}}
     * @deprecated
  {{/isDeprecated}}
     */
    public function {{operationId}}({{^vendorExtensions.x-group-parameters}}{{#allParams}}${{paramName}}{{^required}} = null{{/required}}, {{/allParams}}{{/vendorExtensions.x-group-parameters}}{{#vendorExtensions.x-group-parameters}}$associative_array{{/vendorExtensions.x-group-parameters}} $requestOptions = [])
    {
        {{#vendorExtensions.x-group-parameters}}
        // unbox the parameters from the associative array
        {{#allParams}}
        ${{paramName}} = array_key_exists('{{paramName}}', $associative_array) ? $associative_array['{{paramName}}'] : {{{defaultValue}}}{{^defaultValue}}null{{/defaultValue}};
        {{/allParams}}

        {{/vendorExtensions.x-group-parameters}}
        {{#allParams}}
        {{#required}}
        // verify the required parameter '{{paramName}}' is set
        if (!isset(${{paramName}})) {
            throw new \InvalidArgumentException(
                'Parameter `{{paramName}}` is required when calling `{{operationId}}`.'
            );
        }
        {{/required}}
        {{#hasValidation}}
        {{#maxLength}}
        if ({{^required}}${{paramName}} !== null && {{/required}}strlen(${{paramName}}) > {{maxLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than or equal to {{maxLength}}.');
        }
        {{/maxLength}}
        {{#minLength}}
        if ({{^required}}${{paramName}} !== null && {{/required}}strlen(${{paramName}}) < {{minLength}}) {
            throw new \InvalidArgumentException('invalid length for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than or equal to {{minLength}}.');
        }
        {{/minLength}}
        {{#maximum}}
        if ({{^required}}${{paramName}} !== null && {{/required}}${{paramName}} >{{#exclusiveMaximum}}={{/exclusiveMaximum}} {{maximum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be smaller than {{^exclusiveMaximum}}or equal to {{/exclusiveMaximum}}{{maximum}}.');
        }
        {{/maximum}}
        {{#minimum}}
        if ({{^required}}${{paramName}} !== null && {{/required}}${{paramName}} <{{#exclusiveMinimum}}={{/exclusiveMinimum}} {{minimum}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, must be bigger than {{^exclusiveMinimum}}or equal to {{/exclusiveMinimum}}{{minimum}}.');
        }
        {{/minimum}}
        {{#pattern}}
        if ({{^required}}${{paramName}} !== null && {{/required}}!preg_match("{{{pattern}}}", ${{paramName}})) {
            throw new \InvalidArgumentException("invalid value for \"{{paramName}}\" when calling {{classname}}.{{operationId}}, must conform to the pattern {{{pattern}}}.");
        }
        {{/pattern}}
        {{#maxItems}}
        if ({{^required}}${{paramName}} !== null && {{/required}}count(${{paramName}}) > {{maxItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be less than or equal to {{maxItems}}.');
        }
        {{/maxItems}}
        {{#minItems}}
        if ({{^required}}${{paramName}} !== null && {{/required}}count(${{paramName}}) < {{minItems}}) {
            throw new \InvalidArgumentException('invalid value for "${{paramName}}" when calling {{classname}}.{{operationId}}, number of items must be greater than or equal to {{minItems}}.');
        }
        {{/minItems}}

        {{/hasValidation}}
        {{/allParams}}

        $resourcePath = '{{{path}}}';
        $queryParameters = [];
        $headers = [];
        $httpBody = {{#bodyParam}}{{#required}}${{paramName}}{{/required}}{{^required}} isset(${{paramName}}) ? ${{paramName}} : []{{/required}}{{/bodyParam}}{{^bodyParam}}null{{/bodyParam}};
        {{#vendorExtensions}}{{#queryParams}}

        {{#isExplode}}
        if (${{paramName}} !== null) {
        {{#style}}
            $queryParameters{{^x-is-custom-request}}['{{baseName}}']{{/x-is-custom-request}} = ${{paramName}};
        {{/style}}
        {{^style}}
            $queryParameters['{{baseName}}'] = ${{paramName}};
        {{/style}}
        }
        {{/isExplode}}
        {{^isExplode}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{style}}{{^style}}{{collectionFormat}}{{/style}}', true);
        }
        if (${{paramName}} !== null) {
            $queryParameters['{{baseName}}'] = ${{paramName}};
        }
        {{/isExplode}}
        {{/queryParams}}{{/vendorExtensions}}
        {{#vendorExtensions}}{{#pathParams}}
        // path params
        {{#collectionFormat}}
        if (is_array(${{paramName}})) {
            ${{paramName}} = ObjectSerializer::serializeCollection(${{paramName}}, '{{collectionFormat}}');
        }
        {{/collectionFormat}}
        if (${{paramName}} !== null) {
            $resourcePath = str_replace(
                {{=<% %>=}}'{<%baseName%>}'<%={{ }}=%>,
                {{#x-is-custom-request}}${{paramName}}{{/x-is-custom-request}}{{^x-is-custom-request}}ObjectSerializer::toPathValue(${{paramName}}){{/x-is-custom-request}},
                $resourcePath
            );
        }
        {{/pathParams}}{{/vendorExtensions}}

        {{#headerParams}}
            $headers['{{baseName}}'] = ${{paramName}};
        {{/headerParams}}
        {{#servers.0}}
        $operationHosts = [{{#servers}}"{{{url}}}"{{^-last}}, {{/-last}}{{/servers}}];
        if ($this->hostIndex < 0 || $this->hostIndex >= sizeof($operationHosts)) {
            throw new \InvalidArgumentException("Invalid index {$this->hostIndex} when selecting the host. Must be less than ".sizeof($operationHosts));
        }
        $operationHost = $operationHosts[$this->hostIndex];

        {{/servers.0}}

        return $this->sendRequest('{{httpMethod}}', $resourcePath, $headers, $queryParameters, $httpBody, $requestOptions, {{#vendorExtensions.x-use-read-transporter}}true{{/vendorExtensions.x-use-read-transporter}});
    }

    {{/operation}}

    {{#isSearchClient}}
    /**
     * Wait for a task to complete with `indexName` and `taskID`.
     *
     * @param string $indexName Index name
     * @param int $taskId Task Id
     * @param array $requestOptions the requestOptions to send along with the query, they will be merged with the transporter requestOptions
     * @param int|null $maxRetries Maximum number of retries
     * @param int|null $timeout Timeout
     *
     * @throws ExceededRetriesException
     *
     * @return void
     */
    public function waitForTask($indexName, $taskId, $requestOptions = [], $maxRetries = null, $timeout = null)
    {
        if ($timeout === null) {
            $timeout = $this->config->getWaitTaskTimeBeforeRetry();
        }

        if ($maxRetries === null) {
            $maxRetries = $this->config->getDefaultMaxRetries();
        }

        Helpers::retryUntil(
            $this,
            'getTask',
            [$indexName, $taskId, $requestOptions],
            function($res) {return 'published' === $res['status'];},
            $maxRetries,
            $timeout
        );
    }

    /**
     * Wait for an application-level task to complete with `taskID`.
     *
     * @param int $taskId Task Id
     * @param array $requestOptions the requestOptions to send along with the query, they will be merged with the transporter requestOptions
     * @param int|null $maxRetries Maximum number of retries
     * @param int|null $timeout Timeout
     *
     * @throws ExceededRetriesException
     *
     * @return void
     */
    public function waitForAppTask($taskId, $requestOptions = [], $maxRetries = null, $timeout = null)
    {
        if ($timeout === null) {
            $timeout = $this->config->getWaitTaskTimeBeforeRetry();
        }

        if ($maxRetries === null) {
            $maxRetries = $this->config->getDefaultMaxRetries();
        }

        Helpers::retryUntil(
            $this,
            'getAppTask',
            [$taskId, $requestOptions],
            function($res) {return 'published' === $res['status'];},
            $maxRetries,
            $timeout
        );
    }

    /**
     * Wait for an API key to be added, updated or deleted based on a given `operation`.
     *
     * @param string $operation the `operation` that was done on a `key`
     * @param string $key the `key` that has been added, deleted or updated
     * @param array $apiKey Necessary to know if an `update` operation has been processed, compare fields of the response with it.
     * @param int|null $maxRetries Maximum number of retries
     * @param int|null $timeout Timeout
     * @param array $requestOptions the requestOptions to send along with the query, they will be merged with the transporter requestOptions
     *
     * @throws ExceededRetriesException
     *
     * @return void
     */
    public function waitForApiKey(
        $operation,
        $key,
        $apiKey = null,
        $maxRetries = null,
        $timeout = null,
        $requestOptions = []
    ) {
        if ($timeout === null) {
            $timeout = $this->config->getWaitTaskTimeBeforeRetry();
        }

        if ($maxRetries === null) {
            $maxRetries = $this->config->getDefaultMaxRetries();
        }

        Helpers::retryForApiKeyUntil(
            $operation,
            $this,
            $key,
            $apiKey,
            $maxRetries,
            $timeout,
            null,
            $requestOptions
        );
    }

    /**
     * Helper: Iterate on the `browse` method of the client to allow aggregating objects of an index.
     *
     * @param string $indexName Index name
     * @param array $requestOptions Request options
     *
     * @return ObjectIterator
     */
    public function browseObjects($indexName, $requestOptions = [])
    {
        return new ObjectIterator($indexName, $this, $requestOptions);
    }

    /**
     * Helper: Iterate on the `searchRules` method of the client to allow aggregating rules of an index.
     *
     * @param string $indexName Index name
     * @param array $requestOptions Request options
     *
     * @return RuleIterator
     */
    public function browseRules($indexName, $requestOptions = [])
    {
        return new RuleIterator($indexName, $this, $requestOptions);
    }

    /**
     * Helper: Iterate on the `searchSynonyms` method of the client to allow aggregating synonyms of an index.
     *
     * @param string $indexName Index name
     * @param array $requestOptions Request options
     *
     * @return SynonymIterator
     */
    public function browseSynonyms($indexName, $requestOptions = [])
    {
        return new SynonymIterator($indexName, $this, $requestOptions);
    }

    /**
    * Helper: Replace all objects in an index using a temporary one.
    * See https://api-clients-automation.netlify.app/docs/contributing/add-new-api-client#5-helpers for implementation details.
    *
    * @param string $indexName      The `indexName` to replace `objects` in.
    * @param array  $objects        The array of `objects` to store in the given Algolia `indexName`.
    * @param array  $batchSize      The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.
    * @param array  $requestOptions Request options
    */
    public function replaceAllObjects($indexName, $objects, $batchSize = 1000, $requestOptions = [])
    {
        $tmpIndexName = $indexName.'_tmp_'.uniqid('php_', true);

        $copyResponse = $this->operationIndex(
            $indexName,
            [
                'operation' => 'copy',
                'destination' => $tmpIndexName,
                'scope' => ['settings', 'synonyms', 'rules'],
            ],
            $requestOptions
        );

        $this->chunkedBatch($tmpIndexName, $objects, 'addObject', true, $batchSize, $requestOptions);

        $this->waitForTask($tmpIndexName, $copyResponse['taskID']);

        $copyResponse = $this->operationIndex(
            $indexName,
            [
                'operation' => 'copy',
                'destination' => $tmpIndexName,
                'scope' => ['settings', 'synonyms', 'rules'],
            ],
            $requestOptions
        );

        $this->waitForTask($tmpIndexName, $copyResponse['taskID']);

        $moveResponse = $this->operationIndex(
            $tmpIndexName,
            [
                'operation' => 'move',
                'destination' => $indexName,
            ],
            $requestOptions
        );

        $this->waitForTask($tmpIndexName, $moveResponse['taskID']);
    }

    /**
    * Helper: Chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `batch` requests.
    *
    * @param string $indexName      The `indexName` to replace `objects` in.
    * @param array  $objects        The array of `objects` to store in the given Algolia `indexName`.
    * @param array  $action         The `batch` `action` to perform on the given array of `objects`, defaults to `addObject`.
    * @param array  $waitForTasks   Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.
    * @param array  $batchSize      The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.
    * @param array  $requestOptions Request options
    */
    public function chunkedBatch(
        $indexName,
        $objects,
        $action = 'addObject',
        $waitForTasks = true,
        $batchSize = 1000,
        $requestOptions = []
    ) {
        $responses = [];
        $requests = [];
        $count = 0;

        foreach ($objects as $object) {
            $requests[] = [
                'action' => $action,
                'body' => $object,
            ];

            if (sizeof($requests) === $batchSize || $count === sizeof($objects)-1) {
                $responses[] = $this->batch($indexName, ['requests' => $requests], $requestOptions);
                $requests = [];
            }

            $count++;
        }

        if (!empty($requests)) {
            $responses[] = $this->batch($indexName, ['requests' => $requests], $requestOptions);
        }

        if ($waitForTasks && !empty($responses)) {
            foreach ($responses as $response) {
                $this->waitForTask($indexName, $response['taskID']);
            }
        }
    }

    /**
    * Helper: Generate a secured API Key.
    *
    * @param string $parentApiKey Parent API Key
    * @param array  $restrictions API Key's restrictions
    *
    * @return string
    */
    public static function generateSecuredApiKey($parentApiKey, $restrictions)
    {
        $formattedRestrictions = $restrictions;
        if (isset($restrictions['searchParams'])) {
            $formattedRestrictions = array_merge($restrictions, $restrictions['searchParams']);
            unset($formattedRestrictions['searchParams']);
        }

        ksort($formattedRestrictions);
        $urlEncodedRestrictions = Helpers::buildQuery($formattedRestrictions);

        $content = hash_hmac('sha256', $urlEncodedRestrictions, $parentApiKey).$urlEncodedRestrictions;

        return base64_encode($content);
    }

    /**
    * Helper: Returns the time the given securedApiKey remains valid in seconds.
    *
    * @param string $securedApiKey the key to check
    *
    * @return int remaining validity in seconds
    *
    * @throws ValidUntilNotFoundException
    */
    public static function getSecuredApiKeyRemainingValidity($securedApiKey)
    {
        $decodedKey = base64_decode($securedApiKey);
        $regex = '/validUntil=(\d+)/';
        preg_match($regex, $decodedKey, $matches);

        if (0 === count($matches)) {
            throw new ValidUntilNotFoundException("validUntil not found in given secured api key.");
        }

        $validUntil = (int) $matches[1];

        return $validUntil - time();
    }
    {{/isSearchClient}}

    private function sendRequest($method, $resourcePath, $headers, $queryParameters, $httpBody, $requestOptions, $useReadTransporter = false)
    {
        if (!isset($requestOptions['headers'])) {
            $requestOptions['headers'] = [];
        }
        if (!isset($requestOptions['queryParameters'])) {
            $requestOptions['queryParameters'] = [];
        }

        $requestOptions['headers'] = array_merge($headers, $requestOptions['headers']);
        $requestOptions['queryParameters'] = array_merge($queryParameters, $requestOptions['queryParameters']);
        $query = \GuzzleHttp\Psr7\Query::build($requestOptions['queryParameters']);

        return $this->api->sendRequest(
            $method,
            $resourcePath . ($query ? "?{$query}" : ''),
            $httpBody,
            $requestOptions,
            $useReadTransporter
        );
    }
}
{{/operations}}
