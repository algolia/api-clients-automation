<?php

namespace Algolia\AlgoliaSearch\Test\Client;

use Algolia\AlgoliaSearch\Api\{{client}};
use Algolia\AlgoliaSearch\Configuration\{{clientPrefix}}Config;
use Algolia\AlgoliaSearch\Http\HttpClientInterface;
use Algolia\AlgoliaSearch\Http\Psr7\Response;
use Algolia\AlgoliaSearch\RetryStrategy\ApiWrapper;
use Algolia\AlgoliaSearch\RetryStrategy\ClusterHosts;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

/**
 * Client tests for {{client}}
 */
class {{clientPrefix}}Test extends TestCase implements HttpClientInterface
{
    public const APP_ID = 'test-app-id';
    public const API_KEY = 'test-api-key';

    /**
     * @var RequestInterface[]
     */
    private $recordedRequests = [];

    protected function assertRequests(array $requests)
    {
        $this->assertGreaterThan(0, count($requests));
        $this->assertEquals(count($requests), count($this->recordedRequests));

        foreach ($requests as $i => $request) {
            $recordedRequest = $this->recordedRequests[$i]['request'];

            if (isset($request['host'])) {
                $this->assertEquals(
                    $request['host'],
                    $recordedRequest->getUri()->getHost()
                );
            }

            if (isset($request['userAgent'])) {
                $this->assertTrue(
                    (bool) preg_match(
                        '/' . $request['userAgent'] . '/',
                        $recordedRequest->getHeader('User-Agent')[0]
                    )
                );
            }

            if (isset($request['connectTimeout'])) {
                $this->assertEquals(
                    $request['connectTimeout'],
                    $this->recordedRequests[$i]['connectTimeout']
                );
            }

            if (isset($request['responseTimeout'])) {
                $this->assertEquals(
                    $request['responseTimeout'],
                    $this->recordedRequests[$i]['responseTimeout']
                );
            }
        }
    }

    /**
     * @return {{client}}
     */
    private function createClient($region = '{{{defaultRegion}}}')
    {
        {{^hasRegionalHost}}
            $config = {{clientPrefix}}Config::create(self::APP_ID, self::API_KEY);
            $clusterHosts = ClusterHosts::createFromAppId(self::APP_ID);
        {{/hasRegionalHost}}
        {{#hasRegionalHost}}
            $config = {{clientPrefix}}Config::create(
                self::APP_ID, 
                self::API_KEY, 
                $region,
                {{client}}::getAllowedRegions()
            );
            $clusterHosts = {{client}}::getClusterHosts($config);
        {{/hasRegionalHost}}
        $api = new ApiWrapper($this, $config, $clusterHosts);

        return new {{client}}($api, $config);
    }

    public function sendRequest(RequestInterface $request, $timeout, $connectTimeout)
    {
        $this->recordedRequests[] = [
            'request' => $request,
            'responseTimeout' => $timeout * 1000,
            'connectTimeout' => $connectTimeout * 1000,
        ];

        return new Response(200, [], '{}');
    }

    {{#blocksClient}}
    {{#tests}}
    /**
    * Test case : {{{testName}}}
    */
    public function test{{testIndex}}{{testType}}()
    {
        {{#autoCreateClient}}
            $client = $this->createClient(null);
        {{/autoCreateClient}}
        {{#steps}}
            {{#isCreateClient}}
                {{#isError}}
                    try {
                        $client = $this->createClient({{#parametersWithDataTypeMap.region}}"{{parametersWithDataTypeMap.region.value}}"{{/parametersWithDataTypeMap.region}});
                    } catch (\Exception $e) {
                        $this->assertEquals($e->getMessage(), '{{{expectedError}}}');
                    }
                {{/isError}}
                {{^isError}}
                    $client = $this->createClient({{#parametersWithDataTypeMap.region}}"{{parametersWithDataTypeMap.region.value}}"{{/parametersWithDataTypeMap.region}}{{^parametersWithDataTypeMap.region}}null{{/parametersWithDataTypeMap.region}});
                    // Make sure everything went fine without errors
                    $this->assertIsObject($client);
                {{/isError}}
            {{/isCreateClient}}
            {{#isMethod}}
                {{#isError}}
                try {
                    $client->{{{path}}}{{^parametersWithDataType}}();{{/parametersWithDataType}}({{#parametersWithDataType}}
                    {{> generateParams}}
                    {{/parametersWithDataType}});
                } catch (\Exception $e) {
                    $this->assertEquals($e->getMessage(), '{{{expectedError}}}');
                }
                {{/isError}}
                {{^isError}}
                    $client->{{{path}}}{{^parametersWithDataType}}();{{/parametersWithDataType}}({{#parametersWithDataType}}
                    {{> generateParams}}
                    {{/parametersWithDataType}});
                    {{#match}}
                        $this->assertRequests([
                            [
                            {{#testUserAgent}}
                                'userAgent' => '{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}',
                            {{/testUserAgent}}
                            {{#testHost}}
                                'host' => '{{{match}}}',
                            {{/testHost}}
                            {{#testTimeouts}}
                                'connectTimeout' => {{{match.parametersWithDataTypeMap.connectTimeout.value}}},
                                'responseTimeout' => {{{match.parametersWithDataTypeMap.responseTimeout.value}}},
                            {{/testTimeouts}}
                            {{#testResult}}
                            {{/testResult}}
                            ]
                        ]);
                    {{/match}}
                {{/isError}}
            {{/isMethod}}
        {{/steps}}
    }

    {{/tests}}
    {{/blocksClient}}
}
