<?php

// {{generationBanner}}

namespace Algolia\AlgoliaSearch\Test\Client;

use Algolia\AlgoliaSearch\Api\{{client}};
use Algolia\AlgoliaSearch\Configuration\{{clientPrefix}}Config;
use Algolia\AlgoliaSearch\Http\HttpClientInterface;
use Algolia\AlgoliaSearch\Http\Psr7\Response;
use Algolia\AlgoliaSearch\RetryStrategy\ApiWrapper;
use Algolia\AlgoliaSearch\RetryStrategy\ClusterHosts;
use PHPUnit\Framework\Attributes\TestDox;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

/**
 * Client tests for {{client}}
 */
#[CoversClass({{client}}::class)]
class {{clientPrefix}}Test extends TestCase implements HttpClientInterface
{
    public const APP_ID = 'test-app-id';
    public const API_KEY = 'test-api-key';

    private $recordedRequest;

    /**
     * @return {{client}}
     */
    private function createClient($appId, $apiKey{{#hasRegionalHost}}, $region = '{{{defaultRegion}}}'{{/hasRegionalHost}})
    {
        $config = {{clientPrefix}}Config::create($appId, $apiKey{{#hasRegionalHost}}, $region{{/hasRegionalHost}});
        $clusterHosts = {{client}}::getClusterHosts($config);
        $api = new ApiWrapper($this, $config, $clusterHosts);

        return new {{client}}($api, $config);
    }

    public function sendRequest(RequestInterface $request, $timeout, $connectTimeout)
    {
        $this->recordedRequest = [
            'request' => $request,
            'responseTimeout' => $timeout * 1000,
            'connectTimeout' => $connectTimeout * 1000,
        ];

        return new Response(200, [], '{}');
    }

    {{#blocksClient}}
    {{#tests}}
    #[TestDox('{{{testName}}}')]
    public function test{{testIndex}}{{testType}}()
    {
        {{#autoCreateClient}}
            $client = $this->createClient(self::APP_ID, self::API_KEY);
        {{/autoCreateClient}}
        {{#steps}}
            {{#isError}}
              try {
                  {{#dynamicTemplate}}{{/dynamicTemplate}}
                  $this->fail('Expected exception to be thrown');
              } catch (\Exception $e) {
                  $this->assertEquals($e->getMessage(), '{{{expectedError}}}');
              }
            {{/isError}}
            {{^isError}}
                {{#dynamicTemplate}}{{/dynamicTemplate}}
                {{#match}}
                    {{#testUserAgent}}
                    $this->assertTrue(
                        (bool) preg_match(
                            '/{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}/',
                            $this->recordedRequest['request']->getHeader('User-Agent')[0]
                        )
                    );
                    {{/testUserAgent}}
                    {{#testHost}}
                    $this->assertEquals(
                        '{{{match}}}',
                        $this->recordedRequest['request']->getUri()->getHost()
                    );
                    {{/testHost}}
                    {{#testTimeouts}}
                    $this->assertEquals(
                        {{{match.parametersWithDataTypeMap.connectTimeout.value}}},
                        $this->recordedRequest['connectTimeout']
                    );
                
                    $this->assertEquals(
                        {{{match.parametersWithDataTypeMap.responseTimeout.value}}},
                        $this->recordedRequest['responseTimeout']
                    );
                    {{/testTimeouts}}
                    {{#testResponse}}
                      {{#matchIsJSON}}
                        $this->assertEquals(
                            '{{{match.parameters}}}',
                            json_encode($res)
                        );
                      {{/matchIsJSON}}
                      {{^matchIsJSON}}
                        $this->assertEquals(
                            '{{{match}}}',
                            $res
                        );
                      {{/matchIsJSON}}
                    {{/testResponse}}
                {{/match}}
            {{/isError}}
        {{/steps}}
    }

    {{/tests}}
    {{/blocksClient}}
}
