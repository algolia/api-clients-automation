{{#tests}}
#[TestDox('{{{testName}}}')]
public function test{{testIndex}}{{testType}}(): void
{
    {{#autoCreateClient}}
        $client = $this->createClient(self::APP_ID, self::API_KEY);
    {{/autoCreateClient}}
    {{#steps}}
      {{#times}}
      for ($i = 1; $i <= {{.}}; $i++) {
      {{/times}}
        {{#isError}}
          try {
              {{#dynamicTemplate}}{{/dynamicTemplate}}
              $this->fail('Expected exception to be thrown');
          } catch (\Exception $e) {
              $this->assertEquals($e->getMessage(), '{{{expectedError}}}');
          }
        {{/isError}}
        {{^isError}}
            {{#shouldScope}}
            {
            {{/shouldScope}}
            {{#dynamicTemplate}}{{/dynamicTemplate}}
            {{#testUserAgent}}
            $this->assertTrue(
                (bool) preg_match(
                    '/{{{match.value}}}/',
                    $this->recordedRequest['request']->getHeader('User-Agent')[0]
                )
            );
            {{/testUserAgent}}
            {{#testHost}}
            $this->assertEquals(
                {{#match}}{{> tests/generateParams}}{{/match}}
                $this->recordedRequest['request']->getUri()->getHost()
            );
            {{/testHost}}
            {{#testTimeouts}}
            $this->assertEquals(
                {{{matchConnectTimeout}}},
                $this->recordedRequest['connectTimeout']
            );
        
            $this->assertEquals(
                {{{matchResponseTimeout}}},
                $this->recordedRequest['responseTimeout']
            );
            {{/testTimeouts}}
            {{#testResponse}}
              {{^match.isPrimitive}}
                $this->assertEquals(
                    '{{{match.value}}}',
                    json_encode($res)
                );
              {{/match.isPrimitive}}
              {{#match.isPrimitive}}
                $this->assertEquals(
                    {{#match}}{{> tests/generateParams}}{{/match}}
                    $res
                );
              {{/match.isPrimitive}}
            {{/testResponse}}
            {{#shouldScope}}
            }
            {{/shouldScope}}
        {{/isError}}
      {{#times}}
      }
      {{/times}}
    {{/steps}}
}

{{/tests}}