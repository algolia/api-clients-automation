{{#tests}}
#[TestDox('{{{testName}}}')]
public function test{{testIndex}}{{testType}}()
{
    {{#autoCreateClient}}
        $client = $this->createClient(self::APP_ID, self::API_KEY);
    {{/autoCreateClient}}
    {{#steps}}
      {{#times}}
      for ($i = 1; $i <= {{.}}; $i++) {
      {{/times}}
        {{#isError}}
          try {
              {{#dynamicTemplate}}{{/dynamicTemplate}}
              $this->fail('Expected exception to be thrown');
          } catch (\Exception $e) {
              $this->assertEquals($e->getMessage(), '{{{expectedError}}}');
          }
        {{/isError}}
        {{^isError}}
            {{#dynamicTemplate}}{{/dynamicTemplate}}
            {{#match}}
                {{#testUserAgent}}
                $this->assertTrue(
                    (bool) preg_match(
                        '/{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}/',
                        $this->recordedRequest['request']->getHeader('User-Agent')[0]
                    )
                );
                {{/testUserAgent}}
                {{#testHost}}
                $this->assertEquals(
                    '{{{match}}}',
                    $this->recordedRequest['request']->getUri()->getHost()
                );
                {{/testHost}}
                {{#testTimeouts}}
                $this->assertEquals(
                    {{{match.parametersWithDataTypeMap.connectTimeout.value}}},
                    $this->recordedRequest['connectTimeout']
                );
            
                $this->assertEquals(
                    {{{match.parametersWithDataTypeMap.responseTimeout.value}}},
                    $this->recordedRequest['responseTimeout']
                );
                {{/testTimeouts}}
                {{#testResponse}}
                  {{#matchIsJSON}}
                    $this->assertEquals(
                        '{{{match.parameters}}}',
                        json_encode($res)
                    );
                  {{/matchIsJSON}}
                  {{^matchIsJSON}}
                    {{#matchIsNull}}
                      $this->assertNull($res);
                    {{/matchIsNull}}
                    {{^matchIsNull}}
                      $this->assertEquals(
                          '{{{match}}}',
                          $res
                      );
                    {{/matchIsNull}}
                  {{/matchIsJSON}}
                {{/testResponse}}
            {{/match}}
        {{/isError}}
      {{#times}}
      }
      {{/times}}
    {{/steps}}
}

{{/tests}}