<?php

// {{generationBanner}}

namespace Algolia\AlgoliaSearch\Test\Request;

use Algolia\AlgoliaSearch\Api\{{client}};
use Algolia\AlgoliaSearch\Configuration\{{clientPrefix}}Config;
use Algolia\AlgoliaSearch\Http\HttpClientInterface;
use Algolia\AlgoliaSearch\Http\Psr7\Response;
use Algolia\AlgoliaSearch\RetryStrategy\ApiWrapper;
use Algolia\AlgoliaSearch\RetryStrategy\ClusterHosts;
use GuzzleHttp\Psr7\Query;
use PHPUnit\Framework\Attributes\TestDox;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

#[CoversClass({{client}}::class)]
class {{clientPrefix}}Test extends TestCase implements HttpClientInterface
{
    private $recordedRequests = [];

    protected function assertRequests(array $requests)
    {
        $this->assertGreaterThan(0, count($requests));
        $this->assertEquals(count($requests), count($this->recordedRequests));

        foreach ($requests as $i => $request) {
            $recordedRequest = $this->recordedRequests[$i];

            $this->assertEquals($request['method'], $recordedRequest->getMethod());

            $this->assertEquals($request['path'], $recordedRequest->getUri()->getPath());

            if (isset($request['body'])) {
                $this->assertEquals(
                    json_encode($request['body']),
                    $recordedRequest->getBody()->getContents()
                );
            }

            if (isset($request['queryParameters'])) {
                $this->assertEquals(
                    Query::build($request['queryParameters'], false),
                    $recordedRequest->getUri()->getQuery()
                );
            }

            if (isset($request['headers'])) {
                foreach ($request['headers'] as $key => $value) {
                    $this->assertArrayHasKey(
                        $key,
                        $recordedRequest->getHeaders()
                    );
                    $this->assertEquals(
                        $recordedRequest->getHeaderLine($key),
                        $value
                    );
                }
            }
        }
    }

    public function sendRequest(RequestInterface $request, $timeout, $connectTimeout)
    {
        $this->recordedRequests[] = $request;

        return new Response(200, [], '{}');
    }

    protected function getClient()
    {
        $config = {{clientPrefix}}Config::create('appID', 'apiKey'{{#hasRegionalHost}},'{{defaultRegion}}' {{/hasRegionalHost}});
        $api = new ApiWrapper($this, $config, ClusterHosts::create('127.0.0.1'));

        return new {{client}}($api, $config);
    }

    {{#blocksRequests}}
    {{#tests}}
    #[TestDox('{{{testName}}}')]
    public function test{{#lambda.titlecase}}{{method}}{{/lambda.titlecase}}{{testIndex}}()
    {
        $client = $this->getClient();
        {{#hasRequestOptions}}
          $requestOptions = [
            'queryParameters' => [
              {{#requestOptions.queryParameters.parametersWithDataType}}
                '{{{key}}}' => {{> tests/requests/requestOptionsParams}},
              {{/requestOptions.queryParameters.parametersWithDataType}}
            ],
            'headers' => [
              {{#requestOptions.headers.parametersWithDataType}}
                '{{{key}}}' => '{{{value}}}',
              {{/requestOptions.headers.parametersWithDataType}}
            ]
          ];
        {{/hasRequestOptions}}
        $client->{{^hasParameters}}{{{method}}}();{{/hasParameters}}{{#hasParameters}}{{{method}}}(
        {{#parametersWithDataType}}{{> tests/generateParams}}{{/parametersWithDataType}}{{#hasRequestOptions}}$requestOptions{{/hasRequestOptions}}
        );{{/hasParameters}}

        $this->assertRequests([
            [
                "path" => "{{{request.path}}}",
                "method" => "{{{request.method}}}",
                {{#request.body}}
                "body" => json_decode("{{#lambda.escapeQuotes}}{{{request.body}}}{{/lambda.escapeQuotes}}"),
                {{/request.body}}
                {{^request.body}}
                {{#assertNullBody}}
                "body" => null,
                {{/assertNullBody}}
                {{^assertNullBody}}
                "body" => json_decode(""),
                {{/assertNullBody}}
                {{/request.body}}
                {{#request.queryParameters}}
                "queryParameters" => json_decode("{{#lambda.escapeQuotes}}{{{request.queryParameters}}}{{/lambda.escapeQuotes}}", true),
                {{/request.queryParameters}}
                {{#request.headers}}
                "headers" => json_decode("{{#lambda.escapeQuotes}}{{{request.headers}}}{{/lambda.escapeQuotes}}", true),
                {{/request.headers}}
            ],
        ]);
    }
    {{/tests}}
    {{/blocksRequests}}
}
