// swift-tools-version: {{{swiftVersion}}}
// {{{generationBanner}}}

import PackageDescription

var extraPackageDependencies: [Package.Dependency] = []
var extraTargetDependencies: [Target.Dependency] = []
var targets: [Target] = []
var products: [Product] = []

#if os(Linux)
    let macOSVersion: SupportedPlatform.MacOSVersion = .v10_15
#else
    let macOSVersion: SupportedPlatform.MacOSVersion = .v11
#endif

#if os(Linux)
    extraPackageDependencies.append(contentsOf: [
        .package(url: "https://github.com/apple/swift-crypto.git", from: "3.2.0"),
        .package(url: "https://github.com/apple/swift-log.git", from: "1.5.4")
    ])
    extraTargetDependencies.append(contentsOf: [
        .product(name: "Crypto", package: "swift-crypto"),
        .product(name: "Logging", package: "swift-log")
    ])
#endif

#if os(Linux)
  targets.append(contentsOf: [
    .systemLibrary(name: "zlib", pkgConfig: "zlib", providers: [.apt(["zlib1g-dev"])]),
    .target(
      name: "Core",
      dependencies: [
        "zlib",
      ] + extraTargetDependencies,
      path: "Sources/Core"
    )
  ])
#else
  targets.append(
    .target(
      name: "Core",
      dependencies: extraTargetDependencies,
      path: "Sources/Core"
    )
  )
#endif

products.append(
  .library(
    name: "Core",
    targets: ["Core"]
  )
)

[{{#packageList}}
  "{{#lambda.client-to-name}}{{.}}{{/lambda.client-to-name}}"{{^-last}},{{/-last}}{{/packageList}}
].enumerated().forEach { (_, library) in
  targets.append(
    .target(
      name: library,
      dependencies: [
        .target(name: "Core"),
      ] + extraTargetDependencies,
      path: "Sources/\(library)",
      resources: [
        .copy("../../PrivacyInfo.xcprivacy")
      ]
    )
  )

  products.append(
    .library(
      name: "\(library)",
      targets: ["\(library)"]
    )
  )
}

let package = Package(
  name: "{{projectName}}",
  platforms: [
        .iOS(.v14),
        .macOS(macOSVersion),
        .tvOS(.v14),
        .watchOS(.v7),
  ],
  products: products,
  dependencies: extraPackageDependencies,
  targets: targets
)
