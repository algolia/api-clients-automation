{{#operations}}// {{{generationBanner}}}

import AnyCodable
import Foundation
import Core

typealias Client = {{classname}}

{{#description}}
/**
{{{.}}}
*/{{/description}}
{{#objcCompatible}}@objcMembers {{/objcCompatible}}open class {{classname}}{{#objcCompatible}} : NSObject{{/objcCompatible}} {

    private var configuration: Configuration
    private var transporter: Transporter

    var appID: String {
        self.configuration.appID
    }

    public init(configuration: Configuration, transporter: Transporter) {
        self.configuration = configuration
        self.transporter = transporter
    }

    public convenience init(configuration: Configuration) {
        self.init(configuration: configuration, transporter: Transporter(configuration: configuration))
    }

    public convenience init(appID: String, apiKey: String{{#hasRegionalHost}}, region: Region{{#fallbackToAliasHost}}?{{/fallbackToAliasHost}}{{/hasRegionalHost}}) throws {
        self.init(configuration: try Configuration(appID: appID, apiKey: apiKey{{#hasRegionalHost}}, region: region{{/hasRegionalHost}}))
    }

{{#operation}}
    {{#allParams}}
    {{#isEnum}}

    /**
     * enum for parameter {{paramName}}
     */
    public enum {{enumName}}_{{operationId}}: {{^isContainer}}{{{dataType}}}{{/isContainer}}{{#isContainer}}String{{/isContainer}}, CaseIterable {
        {{^enumUnknownDefaultCase}}
        {{#allowableValues}}
        {{#enumVars}}
        case {{name}} = {{{value}}}
        {{/enumVars}}
        {{/allowableValues}}
        {{/enumUnknownDefaultCase}}
        {{#enumUnknownDefaultCase}}
        {{#allowableValues}}
        {{#enumVars}}
        {{^-last}}
        case {{name}} = {{{value}}}
        {{/-last}}
        {{/enumVars}}
        {{/allowableValues}}
        {{/enumUnknownDefaultCase}}
    }
    {{/isEnum}}
    {{/allParams}}

    /**
     {{#allParams}}
     - parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/allParams}}
     - returns: {{{returnType}}}{{#returnType}}{{#isResponseOptional}}?{{/isResponseOptional}}{{/returnType}}{{^returnType}}Void{{/returnType}}
     */
    {{#isDeprecated}}
    @available(*, deprecated, message: "This operation is deprecated.")
    {{/isDeprecated}}
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    {{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} func {{operationId}}({{#allParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}[{{enumName}}_{{operationId}}]{{/isContainer}}{{^isContainer}}{{enumName}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{#lambda.to-codable}}{{{dataType}}}{{/lambda.to-codable}}{{/isEnum}}{{^required}}? = nil{{/required}}, {{/allParams}}requestOptions: RequestOptions? = nil) async throws{{#returnType}} -> {{{returnType}}}{{#returnType}}{{#isResponseOptional}}?{{/isResponseOptional}}{{/returnType}}{{/returnType}} {
    {{#returnType}}let response: Response<{{{returnType}}}> = {{/returnType}}try await {{operationId}}WithHTTPInfo({{#allParams}}{{paramName}}: {{paramName}}, {{/allParams}}requestOptions: requestOptions)
    {{#returnType}}

        guard let body = response.body else {
            throw AlgoliaError.missingData
        }

      return body{{/returnType}}
    }

    /**
     {{#notes}}{{{.}}}{{/notes}}
     {{#vendorExtensions}}
     {{#x-acl.0}}
     Required API Key ACLs:{{/x-acl.0}}
     {{#x-acl}}
       - {{.}}
     {{/x-acl}}
     {{/vendorExtensions}}{{#allParams}}
     - parameter {{paramName}}: ({{#isFormParam}}form{{/isFormParam}}{{#isQueryParam}}query{{/isQueryParam}}{{#isPathParam}}path{{/isPathParam}}{{#isHeaderParam}}header{{/isHeaderParam}}{{#isBodyParam}}body{{/isBodyParam}}) {{description}} {{^required}}(optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}
     {{/allParams}}
     - returns: RequestBuilder<{{{returnType}}}{{#returnType}}{{#isResponseOptional}}?{{/isResponseOptional}}{{/returnType}}{{^returnType}}Void{{/returnType}}> {{description}}
     */
    {{#isDeprecated}}
    @available(*, deprecated, message: "This operation is deprecated.")
    {{/isDeprecated}}
    {{^returnType}}@discardableResult{{/returnType}}
    {{#vendorExtensions}}{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}open{{/nonPublicApi}} func {{operationId}}WithHTTPInfo({{#allParams}}{{paramName}}: {{#isEnum}}{{#isContainer}}[{{enumName}}_{{operationId}}]{{/isContainer}}{{^isContainer}}{{enumName}}_{{operationId}}{{/isContainer}}{{/isEnum}}{{^isEnum}}{{#lambda.to-codable}}{{{dataType}}}{{/lambda.to-codable}}{{/isEnum}}{{^required}}? = nil{{/required}}, {{/allParams}}requestOptions userRequestOptions: RequestOptions? = nil) async throws -> Response<{{{returnType}}}{{#returnType}}{{#isResponseOptional}}?{{/isResponseOptional}}{{/returnType}}{{^returnType}}AnyCodable{{/returnType}}> {
        {{#pathParams}}{{#isString}}{{#required}}guard !{{{paramName}}}.isEmpty else {
          throw AlgoliaError.invalidArgument("{{{paramName}}}", "{{{operationId}}}")
        }

        {{/required}}{{/isString}}{{/pathParams}}{{#queryParams}}{{#isString}}{{#required}}guard !{{{paramName}}}.isEmpty else {
          throw AlgoliaError.invalidArgument("{{{paramName}}}", "{{{operationId}}}")
        }

        {{/required}}{{/isString}}{{/queryParams}}{{#bodyParam}}{{#isFreeFormObject}}{{#required}}guard !{{{paramName}}}.isEmpty else {
          throw AlgoliaError.invalidArgument("{{{paramName}}}", "{{{operationId}}}")
        }

        {{/required}}{{/isFreeFormObject}}{{/bodyParam}}
        {{^pathParams}}let{{/pathParams}}{{#pathParams}}{{#-first}}var{{/-first}}{{/pathParams}} resourcePath = "{{{path}}}"{{#pathParams}}
        let {{paramName}}PreEscape = "\({{#isEnum}}{{paramName}}{{#isContainer}}{{{dataType}}}{{/isContainer}}{{^isContainer}}.rawValue{{/isContainer}}{{/isEnum}}{{^isEnum}}APIHelper.mapValueToPathItem({{paramName}}){{/isEnum}})"{{^x-is-custom-request}}
        let {{paramName}}PostEscape = {{paramName}}PreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAlgoliaAllowed) ?? ""{{/x-is-custom-request}}
        resourcePath = resourcePath.replacingOccurrences(of: "{{=<% %>=}}{<%baseName%>}<%={{ }}=%>", with: {{^x-is-custom-request}}{{paramName}}PostEscape{{/x-is-custom-request}}{{#x-is-custom-request}}{{paramName}}PreEscape{{/x-is-custom-request}}, options: .literal, range: nil){{/pathParams}}
        {{#bodyParam}}
        let body = {{paramName}}
        {{/bodyParam}}
        {{^bodyParam}}
          let body: AnyCodable? = nil
        {{/bodyParam}}
        {{#hasQueryParams}}
        let queryParameters = {{#x-is-custom-request}}parameters{{/x-is-custom-request}}{{^x-is-custom-request}}[{{^queryParams}}:{{/queryParams}}
            {{#queryParams}}
            {{> _param}},
            {{/queryParams}}
        ]{{/x-is-custom-request}}
        {{/hasQueryParams}}
        {{^hasQueryParams}}
          let queryParameters: [String: Any?]? = nil
        {{/hasQueryParams}}

        let nillableHeaders: [String: Any?]? = {{^headerParams}}nil{{/headerParams}}{{#headerParams}}{{#-first}}[{{/-first}}
            {{> _param}},
        {{#-last}}]{{/-last}}{{/headerParams}}

        let headers = APIHelper.rejectNilHeaders(nillableHeaders)

        return try await self.transporter.send(
          method: "{{httpMethod}}",
          path: resourcePath,
          data: body{{#bodyParam}}{{^required}} ?? AnyCodable(){{/required}}{{/bodyParam}},
          requestOptions: RequestOptions(headers: headers, queryParameters: queryParameters) + userRequestOptions{{#vendorExtensions.x-use-read-transporter}},
          useReadTransporter: true{{/vendorExtensions.x-use-read-transporter}}
        )
    }{{/vendorExtensions}}
{{/operation}}{{#isSearchClient}}

    public enum ApiKeyOperation: String {
        case add
        case update
        case delete
    }

    /// Wait for a task to complete
    /// - parameter taskID: The id of the task to wait for
    /// - parameter indexName: The name of the index to wait for
    /// - parameter maxRetries: The maximum number of retries
    /// - parameter initialDelay: The initial delay between retries
    /// - parameter maxDelay: The maximum delay between retries
    /// - returns: Void
    open func waitForTask(
        with taskID: Int64,
        for indexName: String,
        maxRetries: Int? = 50,
        initialDelay: TimeInterval? = 0.2,
        maxDelay: TimeInterval? = 5.0
    ) async throws -> GetTaskResponse {
        try await retryUntil(
            retry: {
                try await self.getTask(indexName: indexName, taskID: taskID)
            },
            until: { response in
                response.status == TaskStatus.published
            },
            maxRetries: maxRetries,
            initialDelay: initialDelay,
            maxDelay: maxDelay
        )
    }

    /// Wait for an API key to be available
    /// - parameter key: The key to wait for
    /// - parameter operation: The type of operation
    /// - parameter apiKey: The original API key
    /// - parameter maxRetries: The maximum number of retries
    /// - parameter initialDelay: The initial delay between retries
    /// - parameter maxDelay: The maximum delay between retries
    /// - parameter requestOptions: The request options
    /// - returns: Void
    open func waitForApiKey(
        with key: String,
        operation: ApiKeyOperation,
        apiKey: ApiKey? = nil,
        maxRetries: Int? = 50,
        initialDelay: TimeInterval? = 0.2,
        maxDelay: TimeInterval? = 5.0,
        requestOptions: RequestOptions? = nil
    ) async throws -> Response<GetApiKeyResponse> {
        if operation == .update {
            guard let apiKey else {
                throw AlgoliaError.runtimeError("Missing API key optimistic value")
            }

            return try await retryUntil(
                retry: {
                    try await self.getApiKeyWithHTTPInfo(key: key, requestOptions: requestOptions)
                },
                until: { response in
                    guard let body = response.body else {
                        return false
                    }

                    if apiKey.description != body.description {
                        return false
                    }

                    if apiKey.queryParameters != body.queryParameters {
                        return false
                    }

                    if apiKey.maxHitsPerQuery != body.maxHitsPerQuery {
                        return false
                    }

                    if apiKey.maxQueriesPerIPPerHour != body.maxQueriesPerIPPerHour {
                        return false
                    }

                    if body.acl != apiKey.acl {
                        return false
                    }

                    if body.indexes != apiKey.indexes {
                        return false
                    }

                    if body.referers != apiKey.referers {
                        return false
                    }

                    return true
                },
                maxRetries: maxRetries,
                initialDelay: initialDelay,
                maxDelay: maxDelay
            )
        }

        return try await retryUntil(
            retry: {
                try await self.getApiKeyWithHTTPInfo(key: key, requestOptions: requestOptions)
            },
            until: { response in
                switch operation {
                case .add:
                    guard let body = response.body else {
                        return false
                    }

                    return body.createdAt > 0
                case .delete:
                    return response.statusCode == 404
                default:
                    return false
                }
            },
            maxRetries: maxRetries,
            initialDelay: initialDelay,
            maxDelay: maxDelay
        )
    }
{{/isSearchClient}}
}
{{/operations}}
