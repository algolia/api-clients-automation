{{#tests}}

  /**
  {{{testName}}}
  */
  func test{{#lambda.titlecase}}{{testType}}{{/lambda.titlecase}}Test{{testIndex}}() async throws {
    {{#autoCreateClient}}
      let configuration = try {{client}}Configuration(appID: APPLICATION_ID, apiKey: API_KEY{{#hasRegionalHost}}, region: Region.{{defaultRegion}}{{/hasRegionalHost}})
      let transporter: Transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
      let client: {{client}} = {{client}}(configuration: configuration, transporter: transporter)
    {{/autoCreateClient}}

    {{#steps}}
    {{#times}}
    for i in 1...{{.}} {
    {{/times}}
      {{#isError}}
        do {
          {{#dynamicTemplate}}{{/dynamicTemplate}}

          XCTFail("Expected an error to be thrown")
        } catch {
          XCTAssertEqual(error.localizedDescription, "{{{expectedError}}}")
        }
      {{/isError}}
      {{^isError}}
        {{#shouldScope}}
        do {
        {{/shouldScope}}
        {{#dynamicTemplate}}{{/dynamicTemplate}}
        {{#testUserAgent}}
          let userAgent = try XCTUnwrap(echoResponse.headers?["User-Agent"])
          guard let userAgent = userAgent else {
            XCTFail("Expected user-agent header")
            return
          }

          let pattern = "{{#lambda.escapeSlash}}{{{match.value}}}{{/lambda.escapeSlash}}"
          XCTAssertNoThrow(try regexMatch(userAgent, against: pattern), "Expected " + userAgent + " to match the following regex: " + pattern);
        {{/testUserAgent}}
        {{#testTimeouts}}
          XCTAssertEqual(TimeInterval({{{matchResponseTimeout}}} / 1000), echoResponse.timeout);
        {{/testTimeouts}}
        {{#testHost}}
          XCTAssertEqual("{{{match.value}}}", echoResponse.host);
        {{/testHost}}
        {{#testResponse}}
          {{#isHelper}}
            {{^match.isPrimitive}}
              let comparableData = try XCTUnwrap("{{#lambda.escapeQuotes}}{{{match.value}}}{{/lambda.escapeQuotes}}".data(using: .utf8))
              try XCTLenientAssertEqual(received: CodableHelper.jsonEncoder.encode(response), expected: comparableData)
            {{/match.isPrimitive}}
            {{#match.isPrimitive}}
              {{#match.isNull}}
                XCTAssertNil(response)
              {{/match.isNull}}
              {{^match.isNull}}
                XCTAssertEqual({{#match}}{{> tests/paramValue}}{{/match}}, response)
              {{/match.isNull}}
            {{/match.isPrimitive}}
          {{/isHelper}}
          {{^isHelper}}
            let comparableData = "{{#lambda.escapeQuotes}}{{{match.value}}}{{/lambda.escapeQuotes}}".data(using: .utf8)
            let comparableJSON = try XCTUnwrap(comparableData?.jsonString)
            XCTAssertEqual(comparableJSON, responseBodyJSON);
          {{/isHelper}}
        {{/testResponse}}
        {{#shouldScope}}
        }
        {{/shouldScope}}
      {{/isError}}
    {{#times}}
    }
    {{/times}}
    {{/steps}}
  }
{{/tests}}