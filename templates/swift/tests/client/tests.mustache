{{#tests}}

  /**
  {{{testName}}}
  */
  func test{{#lambda.titlecase}}{{testType}}{{/lambda.titlecase}}Test{{testIndex}}() async throws {
    {{#autoCreateClient}}
      let configuration = try {{client}}Configuration(appID: APPLICATION_ID, apiKey: API_KEY{{#hasRegionalHost}}, region: Region.{{defaultRegion}}{{/hasRegionalHost}})
      let transporter: Transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
      let client: {{client}} = {{client}}(configuration: configuration, transporter: transporter)
    {{/autoCreateClient}}

    {{#steps}}
    {{#times}}
    for i in 1...{{.}} {
    {{/times}}
      {{#isError}}
        do {
          {{#dynamicTemplate}}{{/dynamicTemplate}}

          XCTFail("Expected an error to be thrown")
        } catch {
          XCTAssertEqual(error.localizedDescription, "{{{expectedError}}}")
        }
      {{/isError}}
      {{^isError}}
        {{#dynamicTemplate}}{{/dynamicTemplate}}
        {{#match}}
          {{#testUserAgent}}

            let pattern = "{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}"
            let rule = StringRule(pattern: pattern)
            let userAgent = try XCTUnwrap(echoResponse.headers?["User-Agent"])
            guard let userAgent = userAgent else {
              XCTFail("Expected user-agent header")
              return
            }

            XCTAssertNoThrow(try Validator.validate(userAgent, against: rule), "Expected " + userAgent + " to match the following regex: " + pattern);
          {{/testUserAgent}}

          {{#testTimeouts}}

            XCTAssertEqual(TimeInterval({{{match.parametersWithDataTypeMap.responseTimeout.value}}} / 1000), echoResponse.timeout);
          {{/testTimeouts}}
          {{#testHost}}
            XCTAssertEqual("{{{match}}}", echoResponse.host);
          {{/testHost}}
          {{#testResponse}}
            {{#isHelper}}
              {{#matchIsJSON}}
                let comparableData = try XCTUnwrap("{{#lambda.escapeQuotes}}{{{match.parameters}}}{{/lambda.escapeQuotes}}".data(using: .utf8))
                try XCTLenientAssertEqual(received: CodableHelper.jsonEncoder.encode(response), expected: comparableData)
              {{/matchIsJSON}}
              {{^matchIsJSON}}
                {{#matchIsNull}}
                  XCTAssertNil(response)
                {{/matchIsNull}}
                {{^matchIsNull}}
                  XCTAssertEqual("{{#lambda.escapeQuotes}}{{{match}}}{{/lambda.escapeQuotes}}", response)
                {{/matchIsNull}}
              {{/matchIsJSON}}
            {{/isHelper}}
            {{^isHelper}}
              let comparableData = "{{#lambda.escapeQuotes}}{{#matchIsJSON}}{{{match.parameters}}}{{/matchIsJSON}}{{^matchIsJSON}}{{{match}}}{{/matchIsJSON}}{{/lambda.escapeQuotes}}".data(using: .utf8)
              let comparableJSON = try XCTUnwrap(comparableData?.jsonString)
              XCTAssertEqual(comparableJSON, responseBodyJSON);
            {{/isHelper}}
          {{/testResponse}}
        {{/match}}
      {{/isError}}
    {{#times}}
    }
    {{/times}}
    {{/steps}}
  }
{{/tests}}