// {{generationBanner}}
import XCTest

import Utils

@testable import Core
@testable import {{import}}

final class {{client}}RequestsTests: XCTestCase {

  static let APPLICATION_ID = "my_application_id"
  static let API_KEY = "my_api_key"

  {{#blocksRequests}}
    {{#tests}}
      /**
      {{{testName}}}
      */
      func test{{#lambda.titlecase}}{{method}}{{/lambda.titlecase}}Test{{testIndex}}() async throws {
        let configuration = try {{client}}Configuration(appID: {{client}}RequestsTests.APPLICATION_ID, apiKey: {{client}}RequestsTests.API_KEY{{#hasRegionalHost}}, region: Region.{{defaultRegion}}{{/hasRegionalHost}})
        let transporter: Transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client: {{client}} = {{client}}(configuration: configuration, transporter: transporter)

        let response{{#isGeneric}}: Response<{{{returnType}}}<Hit>>{{/isGeneric}} = {{> tests/method}}
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        {{#request}}
        {{#body}}
          let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
          let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

          let expectedBodyData = "{{#lambda.escapeQuotes}}{{{body}}}{{/lambda.escapeQuotes}}".data(using: .utf8)
          let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

          XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)
        {{/body}}
        {{^body}}

          {{^assertNullBody}}
            let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)

            XCTAssertEqual(echoResponseBodyData, "{}".data(using: .utf8))
          {{/assertNullBody}}
          {{#assertNullBody}}

            XCTAssertNil(echoResponse.originalBodyData)
          {{/assertNullBody}}
        {{/body}}

        XCTAssertEqual(echoResponse.path, "{{path}}")
        XCTAssertEqual(echoResponse.method, HTTPMethod.{{#lambda.lowercase}}{{&method}}{{/lambda.lowercase}})

          {{#queryParameters}}
            let expectedQueryParameters = try XCTUnwrap("{{#lambda.escapeQuotes}}{{{.}}}{{/lambda.escapeQuotes}}".data(using: .utf8))
            let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedQueryParameters)

            XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
          {{/queryParameters}}
        {{^queryParameters}}
          XCTAssertNil(echoResponse.queryParameters)
        {{/queryParameters}}

          {{#headers}}

            let expectedHeaders = try XCTUnwrap("{{#lambda.escapeQuotes}}{{{.}}}{{/lambda.escapeQuotes}}".data(using: .utf8))
            let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

            let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
            for header in expectedHeadersMap {
              XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
            }
          {{/headers}}
        {{/request}}
      }
    {{/tests}}

  {{/blocksRequests}}
}