#if canImport(AnyCodable)
import AnyCodable
#endif

import Core
import {{import}}

final class {{client}}Snippet {
  {{#blocksRequests}}
  {{#snippet}}
  // Snippet for the {{method}} method.
  //
  // {{{description}}}
  func snippetFor{{#lambda.pascalcase}}{{method}}{{/lambda.pascalcase}}() async throws {
    // Initialize the client
    let client = try {{client}}(appId: "YOUR_APP_ID", apiKey: "YOUR_API_KEY"{{#hasRegionalHost}}, region: .{{defaultRegion}}{{/hasRegionalHost}})

  {{#hasRequestOptions}}
    let requestOptions = RequestOptions({{#requestOptions.headers.parametersWithDataType}}{{#-first}}
      headers: [{{/-first}}
    "{{key}}": {{> tests/paramValue }}{{^-last}}, {{/-last}}{{#-last}}
      ]{{/-last}}{{/requestOptions.headers.parametersWithDataType}}{{#requestOptions.headers.parametersWithDataType}}{{#requestOptions.queryParameters.parametersWithDataType}},{{/requestOptions.queryParameters.parametersWithDataType}}{{/requestOptions.headers.parametersWithDataType}}{{#requestOptions.queryParameters.parametersWithDataType}}{{#-first}}
      queryItems: APIHelper.mapValuesToQueryItems([{{/-first}}
    "{{key}}": {{> tests/paramValue }}{{^-last}}, {{/-last}}{{#-last}}
      ]){{/-last}}{{/requestOptions.queryParameters.parametersWithDataType}}
    )
  {{/hasRequestOptions}}

    // Call the API
    let _ = try await client.{{method}}({{#parametersWithDataType}}{{> tests/generateParams}}{{^-last}},{{/-last}}{{/parametersWithDataType}}{{#hasRequestOptions}}, requestOptions: requestOptions{{/hasRequestOptions}})
  }
  {{/snippet}}
  {{/blocksRequests}}
}