// {{classname}}.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation{{#usePromiseKit}}
  import PromiseKit{{/usePromiseKit}}{{#useRxSwift}}
  import RxSwift{{/useRxSwift}}{{#useCombine}}
  #if canImport(Combine)
  import Combine
  #endif{{/useCombine}}{{#useVapor}}
  import Vapor{{/useVapor}}
#if canImport(AnyCodable)
import AnyCodable
#endif{{#swiftUseApiNamespace}}

  extension {{projectName}}API {
{{/swiftUseApiNamespace}}

public struct {{#lambda.client-to-name}}{{client}}{{/lambda.client-to-name}}ClientConfiguration: ClientConfiguration, Credentials {

  public let applicationID: String
  public let apiKey: String
  public var writeTimeout: TimeInterval
  public var readTimeout: TimeInterval
  public var logLevel: LogLevel
  public var hosts: [RetryableHost]
  public var defaultHeaders: [String: String]?
  public var batchSize: Int

  init(applicationID: String,
       apiKey: String,
       region: Region? = nil,
       writeTimeout: TimeInterval = DefaultConfiguration.default.writeTimeout,
       readTimeout: TimeInterval = DefaultConfiguration.default.readTimeout,
       logLevel: LogLevel = DefaultConfiguration.default.logLevel,
       defaultHeaders: [String: String]? = DefaultConfiguration.default.defaultHeaders,
       batchSize: Int = DefaultConfiguration.default.batchSize) {
    self.applicationID = applicationID
    self.apiKey = apiKey
    self.writeTimeout = writeTimeout
    self.readTimeout = readTimeout
    self.logLevel = logLevel
    self.hosts = Hosts.{{#lambda.camelcase}}{{#lambda.client-to-name}}{{client}}{{/lambda.client-to-name}}{{/lambda.camelcase}}(forRegion: region)
    self.defaultHeaders = defaultHeaders
    self.batchSize = batchSize
  }
}

{{#swiftUseApiNamespace}}
}
{{/swiftUseApiNamespace}}