// {{classname}}.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Core{{#usePromiseKit}}
  import PromiseKit{{/usePromiseKit}}{{#useRxSwift}}
  import RxSwift{{/useRxSwift}}{{#useCombine}}
  #if canImport(Combine)
  import Combine
  #endif{{/useCombine}}{{#useVapor}}
  import Vapor{{/useVapor}}
#if canImport(AnyCodable)
import AnyCodable
#endif{{#swiftUseApiNamespace}}{{^swiftUseClientNamespace}}

  extension {{projectName}}API {
{{/swiftUseClientNamespace}}{{/swiftUseApiNamespace}}
{{#swiftUseClientNamespace}}{{^swiftUseApiNamespace}}

  extension {{#lambda.client-to-name}}{{client}}{{/lambda.client-to-name}} {
{{/swiftUseApiNamespace}}{{/swiftUseClientNamespace}}

public struct ClientConfiguration: CommonClientConfiguration, Credentials {
{{#hasRegionalHost}}

  private let authorizedRegions: [Region] = [
    {{#allowedRegions}}Region.{{.}}{{^-last}}, {{/-last}}{{/allowedRegions}}
  ]
{{/hasRegionalHost}}

  public let applicationID: String
  public let apiKey: String
  public var writeTimeout: TimeInterval
  public var readTimeout: TimeInterval
  public var logLevel: LogLevel
  public var defaultHeaders: [String: String]?
  public var batchSize: Int
  public var hosts: [RetryableHost]!

  private func buildHosts({{#hasRegionalHost}}for region: Region?{{/hasRegionalHost}}) -> [RetryableHost] {
    {{^hasRegionalHost}}
    func buildHost(_ components: (suffix: String, callType: RetryableHost.CallTypeSupport))
      -> RetryableHost
    {
      let url = URL(string: "\(applicationID)\(components.suffix)")!
      return RetryableHost(url: url, callType: components.callType)
    }

    let hosts = [
      ("-dsn.algolia.net", .read),
      (".algolia.net", .write),
    ].map(buildHost)

    let commonHosts = [
      ("-1.algolianet.com", .universal),
      ("-2.algolianet.com", .universal),
      ("-3.algolianet.com", .universal),
    ].map(buildHost).shuffled()

    return hosts + commonHosts
{{/hasRegionalHost}}
{{#hasRegionalHost}}
    {{^fallbackToAliasHost}}

      guard let region = region else {
        fatalError("Region is required")
      }
      {{/fallbackToAliasHost}}

    guard {{#fallbackToAliasHost}}region == nil || {{/fallbackToAliasHost}}authorizedRegions.contains(region{{#fallbackToAliasHost}}!{{/fallbackToAliasHost}}) else {
        fatalError(
          "Region must be one of the following: \(authorizedRegions.map { $0.rawValue }.joined(separator: ", "))"
        )
      }

    {{#fallbackToAliasHost}}
      if let region = region {
    {{/fallbackToAliasHost}}
        guard let url = URL(string: "{{{regionalHost}}}".replacingOccurrences(of: "{region}", with: region.rawValue)) else {
                    fatalError("Malformed URL")
                }

            return [
                .init(url: url)
            ]
    {{#fallbackToAliasHost}}
      }

      guard let url = URL(string: "{{{hostWithFallback}}}") else {
        fatalError("Malformed URL")
      }

      return [
        .init(url: url)
      ]
    {{/fallbackToAliasHost}}
    {{/hasRegionalHost}}
  }

  init(applicationID: String,
       apiKey: String,{{#hasRegionalHost}}
       region: Region? = nil,{{/hasRegionalHost}}
       writeTimeout: TimeInterval = DefaultConfiguration.default.writeTimeout,
       readTimeout: TimeInterval = DefaultConfiguration.default.readTimeout,
       logLevel: LogLevel = DefaultConfiguration.default.logLevel,
       defaultHeaders: [String: String]? = DefaultConfiguration.default.defaultHeaders,
       batchSize: Int = DefaultConfiguration.default.batchSize) {
    self.applicationID = applicationID
    self.apiKey = apiKey
    self.writeTimeout = writeTimeout
    self.readTimeout = readTimeout
    self.logLevel = logLevel
    self.defaultHeaders = defaultHeaders
    self.batchSize = batchSize
    self.hosts = buildHosts({{#hasRegionalHost}}for: region{{/hasRegionalHost}})
  }
}
{{#swiftUseApiNamespace}}
{{^swiftUseClientNamespace}}
}
{{/swiftUseClientNamespace}}
{{/swiftUseApiNamespace}}
{{#swiftUseClientNamespace}}
{{^swiftUseApiNamespace}}
}
{{/swiftUseApiNamespace}}
{{/swiftUseClientNamespace}}