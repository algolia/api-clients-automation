// {{{generationBanner}}}

import Foundation
#if canImport(Core)
  import Core
#endif

public struct {{#lambda.client-to-name}}{{{client}}}{{/lambda.client-to-name}}ClientConfiguration: BaseConfiguration, Credentials {
{{#hasRegionalHost}}

  private let authorizedRegions: [Region] = [
    {{#allowedRegions}}Region.{{.}}{{^-last}}, {{/-last}}{{/allowedRegions}}
  ]
{{/hasRegionalHost}}

  public let appID: String
  public var apiKey: String
  public var writeTimeout: TimeInterval
  public var readTimeout: TimeInterval
  public var logLevel: LogLevel
  public var defaultHeaders: [String: String]?
  public var hosts: [RetryableHost]
  public let compression: CompressionAlgorithm

  public init(appID: String,
      apiKey: String,{{#hasRegionalHost}}
      region: Region{{#fallbackToAliasHost}}? = nil{{/fallbackToAliasHost}},{{/hasRegionalHost}}
      writeTimeout: TimeInterval = DefaultConfiguration.default.writeTimeout,
      readTimeout: TimeInterval = DefaultConfiguration.default.readTimeout,
      logLevel: LogLevel = DefaultConfiguration.default.logLevel,
      defaultHeaders: [String: String]? = DefaultConfiguration.default.defaultHeaders,
      hosts: [RetryableHost]? = nil{{#isSearchClient}},
      compression: CompressionAlgorithm = .none{{/isSearchClient}}
  ) throws {
    guard !appID.isEmpty else {
      throw AlgoliaError.invalidCredentials("appId")
    }

    guard !apiKey.isEmpty else {
      throw AlgoliaError.invalidCredentials("apiKey")
    }

    self.appID = appID
    self.apiKey = apiKey
    self.writeTimeout = writeTimeout
    self.readTimeout = readTimeout
    self.logLevel = logLevel
    self.defaultHeaders = [
      "X-Algolia-Application-Id": appID,
      "X-Algolia-API-Key": apiKey,
      "Content-Type": "application/json"
    ].merging(defaultHeaders ?? [:]) { (_, new) in new }
    self.compression = {{#isSearchClient}}compression{{/isSearchClient}}{{^isSearchClient}}.none{{/isSearchClient}}

    UserAgentController.append(UserAgent(title: "{{#lambda.client-to-name}}{{client}}{{/lambda.client-to-name}}", version: Version.current.description))

    guard let hosts = hosts else {
      {{^hostsWithoutVariables}}{{^hasRegionalHost}}
      func buildHost(_ components: (suffix: String, callType: RetryableHost.CallTypeSupport)) throws
        -> RetryableHost
      {
        guard let url = URL(string: "https://\(appID)\(components.suffix)") else {
          throw AlgoliaError.runtimeError("Malformed URL")
        }

        return RetryableHost(url: url, callType: components.callType)
      }

      let hosts = try [
        ("-dsn.algolia.net", .read),
        (".algolia.net", .write),
      ].map(buildHost)

      let commonHosts = try [
        ("-1.algolianet.com", .universal),
        ("-2.algolianet.com", .universal),
        ("-3.algolianet.com", .universal),
      ].map(buildHost).shuffled()

      self.hosts = hosts + commonHosts
  {{/hasRegionalHost}}{{/hostsWithoutVariables}}
  {{#hostsWithoutVariables.size}}
    self.hosts = [
    {{#hostsWithoutVariables}}
    .init(url: URL(string: "https://{{{.}}}")!),
    {{/hostsWithoutVariables}}
    ]
  {{/hostsWithoutVariables.size}}
  {{#uniqueHost}}

  {{/uniqueHost}}
  {{#hasRegionalHost}}
      guard {{#fallbackToAliasHost}}region == nil || {{/fallbackToAliasHost}}authorizedRegions.contains(region{{#fallbackToAliasHost}}!{{/fallbackToAliasHost}}) else {
          throw AlgoliaError.runtimeError(
            "`region` {{^fallbackToAliasHost}}is required and {{/fallbackToAliasHost}}must be one of the following: \(authorizedRegions.map { $0.rawValue }.joined(separator: ", "))"
          )
        }

      {{#fallbackToAliasHost}}
        if let region = region {
      {{/fallbackToAliasHost}}
          guard let url = URL(string: "https://{{{regionalHost}}}".replacingOccurrences(of: "{region}", with: region.rawValue)) else {
            throw AlgoliaError.runtimeError("Malformed URL")
          }

              self.hosts = [
                  .init(url: url)
              ]
      {{#fallbackToAliasHost}}
        } else {
          guard let url = URL(string: "https://{{{hostWithFallback}}}") else {
            throw AlgoliaError.runtimeError("Malformed URL")
          }

          self.hosts = [
            .init(url: url)
          ]
        }
      {{/fallbackToAliasHost}}
      {{/hasRegionalHost}}
      return
    }

    self.hosts = hosts
  }
}