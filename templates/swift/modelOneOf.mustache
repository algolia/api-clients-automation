{{#nonPublicApi}}internal{{/nonPublicApi}}{{^nonPublicApi}}public{{/nonPublicApi}} enum {{classname}}: Codable, JSONEncodable{{#vendorExtensions.x-swift-hashable}}, Hashable{{/vendorExtensions.x-swift-hashable}} {
    {{#oneOf}}
    case {{#lambda.camelcase}}{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}{{/lambda.camelcase}}({{.}})
    {{/oneOf}}

    public func encode(to encoder: Encoder) throws {
        var container = encoder.singleValueContainer()
        switch self {
        {{#oneOf}}
        case .{{#lambda.camelcase}}{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}{{/lambda.camelcase}}(let value):
            try container.encode(value)
        {{/oneOf}}
        }
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.singleValueContainer()
        {{#oneOf}}
        {{#-first}}
        if let value = try? container.decode({{.}}.self) {
        {{/-first}}
        {{^-first}}
        } else if let value = try? container.decode({{.}}.self) {
        {{/-first}}
            self = .{{#lambda.camelcase}}{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}{{/lambda.camelcase}}(value)
        {{/oneOf}}
        } else {
            throw DecodingError.typeMismatch(Self.Type.self, .init(codingPath: decoder.codingPath, debugDescription: "Unable to decode instance of {{classname}}"))
        }
    }
}
