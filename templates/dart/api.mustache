// {{{generationBanner}}}

import 'package:algolia_client_core/algolia_client_core.dart';
import 'package:{{pubName}}/src/deserialize.dart';
import 'package:{{pubName}}/src/version.dart';

{{#operations}}
{{#imports}}import '{{{.}}}';
{{/imports}}

{{#description}}
/// {{{description}}}
{{/description}}
final class {{classname}} implements ApiClient {

  @override
  final ClientOptions options;

  {{#hasRegionalHost}}
  final String{{#fallbackToAliasHost}}?{{/fallbackToAliasHost}} region;
  {{/hasRegionalHost}}

  final RetryStrategy _retryStrategy;

  {{classname}}({
    required String appId,
    required String apiKey,
    this.options = const ClientOptions(),
    {{#hasRegionalHost}}
    {{^fallbackToAliasHost}}required{{/fallbackToAliasHost}} this.region,
    {{/hasRegionalHost}}
  }) : _retryStrategy = RetryStrategy.create(
            segment: AgentSegment(value: "{{{baseName}}}", version: packageVersion),
            appId: appId,
            apiKey: apiKey,
            options: options,
            {{#hostWithAppID}}
            defaultHosts: () => [
              Host(url: '$appId-dsn.algolia.net', callType: CallType.read),
              Host(url: '$appId.algolia.net', callType: CallType.write),
            ] +
            (
                [
                  Host(url: '$appId-1.algolianet.com'),
                  Host(url: '$appId-2.algolianet.com'),
                  Host(url: '$appId-3.algolianet.com'),
                ]..shuffle()
            ),
            {{/hostWithAppID}}
            {{#hasRegionalHost}}
            defaultHosts: () {
              final allowedRegions = [{{#allowedRegions}}'{{.}}'{{^-last}},{{/-last}}{{/allowedRegions}}];
              {{^fallbackToAliasHost}}
              assert(allowedRegions.contains(region), '`region` is required and must be one of the following: ${allowedRegions.join(', ')}',);
              {{/fallbackToAliasHost}}
              {{#fallbackToAliasHost}}
              assert(region == null || allowedRegions.contains(region),  '`region` must be one of the following: ${allowedRegions.join(', ')}',);
              {{/fallbackToAliasHost}}
              final url = {{#fallbackToAliasHost}}region == null ? '{{{hostWithFallback}}}' : {{/fallbackToAliasHost}} '{{{regionalHost}}}'.replaceAll('{region}', region);
              return [Host(url: url)];
            }  
            {{/hasRegionalHost}}
            {{#uniqueHost}}
            {{/uniqueHost}}
            {{#hostsWithoutVariables.size}}
            defaultHosts: () => [
              {{#hostsWithoutVariables}}
                Host(url: '{{{.}}}'),
              {{/hostsWithoutVariables}}
            ],
            {{/hostsWithoutVariables.size}}
            ) {
    assert(appId.isNotEmpty, '`appId` is missing.');
    assert(apiKey.isNotEmpty, '`apiKey` is missing.');
  }

  /// Allows to switch the API key used to authenticate requests.
  @override
  void setClientApiKey({required String apiKey}) {
    this._retryStrategy.requester.setClientApiKey(apiKey);
  }
  {{#operation}}

  /// {{{notes}}}{{#vendorExtensions}}{{#x-acl.0}}
  ///
  /// Required API Key ACLs:{{/x-acl.0}}
  {{#x-acl}}
  ///   - {{.}}
  {{/x-acl}}
  {{/vendorExtensions}}
  ///
  /// Parameters:
  {{#allParams}}
  /// * [{{paramName}}] {{#description}}{{{.}}}{{/description}}{{#vendorExtensions}}{{#x-is-oneof}} - one of types: {{#x-oneof-types}}[{{{.}}}], {{/x-oneof-types}}{{/x-is-oneof}}{{/vendorExtensions}}
  {{/allParams}}
  /// * [requestOptions] additional request configuration.
  {{#vendorExtensions}}
  {{#x-is-oneof}}
  /// Returns one of types: {{#x-oneof-types}}
  /// - [{{{.}}}]{{/x-oneof-types}}
  {{/x-is-oneof}}
  {{/vendorExtensions}}
  {{#isDeprecated}}
  @Deprecated('This operation has been deprecated')
  {{/isDeprecated}}
  Future<{{{returnType}}}{{^returnType}}void{{/returnType}}> {{nickname}}({
    {{#requiredParams}}{{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{^isNullable}}required {{/isNullable}} {{{dataType}}} {{{paramName}}}, {{/requiredParams}}
    {{#optionalParams}}{{#isDeprecated}}@Deprecated('{{paramName}} is deprecated') {{/isDeprecated}}{{{dataType}}}? {{{paramName}}}, {{/optionalParams}}
    RequestOptions? requestOptions,
  }) async {
    {{#requiredParams}}
    {{#isString}}
    assert({{paramName}}.isNotEmpty, 'Parameter `{{paramName}}` is required when calling `{{operationId}}`.',);
    {{/isString}}
    {{#isFreeFormObject}}
    if ({{paramName}} is Map) { assert({{paramName}}.isNotEmpty, 'Parameter `{{paramName}}` is required when calling `{{operationId}}`.',); }
    if ({{paramName}} is Map) { assert({{paramName}} .isNotEmpty, 'Parameter `{{paramName}} ` is required when calling `{{operationId}}`.', ); }
    {{/isFreeFormObject}}
    {{/requiredParams}}
    final request = ApiRequest(
        method: RequestMethod.{{#lambda.snakecase}}{{httpMethod}}{{/lambda.snakecase}},
        {{^vendorExtensions.x-is-custom-request}}
        path: r'{{{path}}}'{{#pathParams}}.replaceAll('{' r'{{{baseName}}}' '}', Uri.encodeComponent({{{paramName}}}.toString())){{/pathParams}},
        {{/vendorExtensions.x-is-custom-request}}
        {{#vendorExtensions.x-is-custom-request}}
        path: r'{{{path}}}'{{#pathParams}}.replaceAll('{' r'{{{baseName}}}' '}', {{{paramName}}}){{/pathParams}},
        {{/vendorExtensions.x-is-custom-request}}
        {{#vendorExtensions.x-use-read-transporter}}
        isRead : {{{vendorExtensions.x-use-read-transporter}}},
        {{/vendorExtensions.x-use-read-transporter}}
        {{#hasHeaderParams}}
        headers : {
          {{#headerParams}}
          {{#required}}
          '{{baseName}}' : {{paramName}},
          {{/required}}
          {{^required}}
          if ({{paramName}} != null) '{{baseName}}' : {{paramName}},
          {{/required}}
          {{/headerParams}}
        },
        {{/hasHeaderParams}}
        {{#hasQueryParams}}
        queryParams: {
          {{#vendorExtensions.x-is-custom-request}}
          {{#queryParams}}
          ...{{^required}}?{{/required}}{{paramName}},
          {{/queryParams}}
          {{/vendorExtensions.x-is-custom-request}}
          {{^vendorExtensions.x-is-custom-request}}
          {{#queryParams}}
          {{#required}}
          '{{baseName}}' : {{paramName}},
          {{/required}}
          {{^required}}
          if ({{paramName}} != null) '{{baseName}}' : {{paramName}},
          {{/required}}
          {{/queryParams}}
          {{/vendorExtensions.x-is-custom-request}}
        },
        {{/hasQueryParams}}
        {{#hasBodyParam}}
        body: {{#bodyParam}}{{{paramName}}}{{#isModel}}{{^isRequired}}?{{/isRequired}}.toJson(){{/isModel}},{{/bodyParam}}
        {{/hasBodyParam}}
    );  
    {{#returnType}}final response = {{/returnType}}await _retryStrategy.execute(
      request: request,
      options: requestOptions,
    );
    {{#returnType}}
    return deserialize<{{{.}}}, {{{returnBaseType}}}>(response, '{{{.}}}', growable: true,);
    {{/returnType}}
  }  
  {{/operation}}

  @Deprecated('This operation has been deprecated, use `customPost` instead')
  Future<Object> post({
    required  String path,
    Map<String, Object>? parameters, Object? body,
    RequestOptions? requestOptions,
  }) async {
    return this.customPost(path: path, parameters: parameters, requestOptions: requestOptions);
  }

  {{^isAlgoliasearchClient}}
  @Deprecated('This operation has been deprecated, use `customPut` instead')
  Future<Object> put({
    required  String path,
    Map<String, Object>? parameters, Object? body,
    RequestOptions? requestOptions,
  }) async {
    return customPut(path: path, parameters: parameters, requestOptions: requestOptions);
  }

  @Deprecated('This operation has been deprecated, use `customGet` instead')
  Future<Object> get({
    required  String path,
    Map<String, Object>? parameters, Object? body,
    RequestOptions? requestOptions,
  }) async {
    return this.customGet(path: path, parameters: parameters, requestOptions: requestOptions);
  }

  @Deprecated('This operation has been deprecated, use `customDelete` instead')
  Future<Object> del({
    required  String path,
    Map<String, Object>? parameters, Object? body,
    RequestOptions? requestOptions,
  }) async {
    return this.customDelete(path: path, parameters: parameters, requestOptions: requestOptions);
  }
  {{/isAlgoliasearchClient}}

  @override
  void dispose() => _retryStrategy.dispose(); 
}
{{/operations}}
