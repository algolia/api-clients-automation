// {{generationBanner}}
import { {{client}} } from '{{{import}}}';
import { nodeEchoRequester } from '@algolia/requester-testing';
import type { EchoResponse } from '@algolia/requester-testing';
import type { RequestOptions } from '@algolia/client-common';

const appId = process.env.ALGOLIA_APPLICATION_ID || 'test_app_id';
const apiKey = process.env.ALGOLIA_SEARCH_KEY || 'test_api_key';

const client = {{client}}(appId, apiKey, {{#hasRegionalHost}}'{{{defaultRegion}}}', {{/hasRegionalHost}}{ requester: nodeEchoRequester() });

{{#blocksRequests}}
describe('{{operationId}}', () => {
  {{#tests}}
  test('{{{testName}}}', async () => {
    const req = ({{> tests/method}}) as unknown as EchoResponse;

    expect(req.path).toEqual('{{{request.path}}}');
    expect(req.method).toEqual('{{{request.method}}}');
    expect(req.data).toEqual({{#request.body}}{{{.}}}{{/request.body}}{{^request.body}}undefined{{/request.body}});
    expect(req.searchParams).toStrictEqual({{#request.queryParameters}}{{{.}}}{{/request.queryParameters}}{{^request.queryParameters}}undefined{{/request.queryParameters}});
    {{#request.headers}}
    expect(req.headers).toEqual(
      expect.objectContaining({{{request.headers}}})
    );
    {{/request.headers}}
  });

  {{/tests}}
})

{{/blocksRequests}}

{{#isSearchClient}}
{{> tests/requests/helpers}}
{{/isSearchClient}}