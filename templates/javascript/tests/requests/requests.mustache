{{#hasE2E}}
import * as dotenv from 'dotenv';

dotenv.config({path:'../../.env'});
{{/hasE2E}}
import { {{client}} } from '{{{import}}}';
import { echoRequester } from '{{{npmNamespace}}}/requester-node-http';
import type { EchoResponse } from '{{{npmNamespace}}}/client-common';
import type { RequestOptions } from '{{{npmNamespace}}}/client-common';

const appId = process.env.ALGOLIA_APPLICATION_ID || 'test_app_id';
const apiKey = process.env.ALGOLIA_SEARCH_KEY || 'test_api_key';

const client = {{client}}(appId, apiKey, {{#hasRegionalHost}}'{{{defaultRegion}}}', {{/hasRegionalHost}}{ requester: echoRequester() });

{{#hasE2E}}
if (!process.env.ALGOLIA_APPLICATION_ID) {
  throw new Error("please provide an `ALGOLIA_APPLICATION_ID` env var for e2e tests");
}

if (!process.env.ALGOLIA_ADMIN_KEY) {
  throw new Error("please provide an `ALGOLIA_ADMIN_KEY` env var for e2e tests");
}

const e2eClient = {{client}}(process.env.ALGOLIA_APPLICATION_ID, process.env.ALGOLIA_ADMIN_KEY, {{#hasRegionalHost}}'{{{defaultRegion}}}'{{/hasRegionalHost}});
{{/hasE2E}}

{{#blocksRequests}}
describe('{{operationId}}', () => {
  {{#tests}}
  test('{{{testName}}}', async () => {
    {{#hasRequestOptions}}const requestOptions: RequestOptions = {
      {{#requestOptions.queryParameters.parameters}}queryParameters: {{{.}}},{{/requestOptions.queryParameters.parameters}}
      {{#requestOptions.headers.parameters}}headers: {{{.}}}{{/requestOptions.headers.parameters}}
    };{{/hasRequestOptions}}

    const req = (await client.{{method}}({{#hasParameters}}{{{parameters}}}{{/hasParameters}}{{#hasRequestOptions}}, requestOptions{{/hasRequestOptions}})) as unknown as EchoResponse;

    expect(req.path).toEqual('{{{request.path}}}');
    expect(req.method).toEqual('{{{request.method}}}');
    expect(req.data).toEqual({{#request.body}}{{{.}}}{{/request.body}}{{^request.body}}undefined{{/request.body}});
    expect(req.searchParams).toStrictEqual({{#request.queryParameters}}{{{.}}}{{/request.queryParameters}}{{^request.queryParameters}}undefined{{/request.queryParameters}});
    {{#request.headers}}
    expect(req.headers).toEqual(
      expect.objectContaining({{{request.headers}}})
    );
    {{/request.headers}}

    {{#response}}
    const resp = (await e2eClient.{{method}}({{#hasParameters}}{{{parameters}}}{{/hasParameters}}{{#hasRequestOptions}}, requestOptions{{/hasRequestOptions}}));
  
    {{#body}}
    expect(resp).toMatchObject({{{.}}});
    {{/body}}
    {{/response}}
  });

  {{/tests}}
})

{{/blocksRequests}}