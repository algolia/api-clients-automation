describe('generateSecuredApiKey', () => {
  test('generates a key without restrictions', () => {
    const resp = client.generateSecuredApiKey({ parentApiKey: 'foo' });
    expect(resp).toEqual(
      'NjgzNzE2ZDlkN2Y4MmVlZDE3NGM2Y2FlYmUwODZlZTkzMzc2Yzc5ZDdjNjFkZDY3MGVhMDBmN2Y4ZDZlYjBhOA=='
    );
  });

  test('generates a key with restrictions', () => {
    const resp = client.generateSecuredApiKey({
      parentApiKey: 'foo',
      restrictions: {
        validUntil: 100,
        restrictIndices: ['bar'],
        restrictSources: '192,168.1.0/24',
        userToken: 'foobarbaz',
        searchParams: {
          query: 'foo',
        },
      },
    });
    expect(resp).toEqual(
      'M2RlY2Y5ZjgzMDU1ZDRiYjkyOTdjYjYxYWNjNWNhNTQ5ZGI5Mjc3ZmVjNmNmNjM2ZjAwMTA4OGRjNDI5YjFhOXZhbGlkVW50aWw9MTAwJnJlc3RyaWN0SW5kaWNlcz0lNUIlMjJiYXIlMjIlNUQmcmVzdHJpY3RTb3VyY2VzPTE5MiUyQzE2OC4xLjAlMkYyNCZ1c2VyVG9rZW49Zm9vYmFyYmF6JnNlYXJjaFBhcmFtcz0lN0IlMjJxdWVyeSUyMiUzQSUyMmZvbyUyMiU3RA=='
    );
  });
});

describe('getSecuredApiKeyRemainingValidity', () => {
  test('is able to check the remaining validity of a key', () => {
    const resp = client.generateSecuredApiKey({
      parentApiKey: 'foo',
      restrictions: { validUntil: 42 },
    });
    expect(resp).toEqual(
      'NDI5ZjRkMTRiNTBlZmExZWIyN2I3NzczOGUwMzE0NjYwMDU1M2M3NjYyY2IxODZhMDAxMWEwOWJmZjE5MzY0NnZhbGlkVW50aWw9NDI='
    );

    const validity = client.getSecuredApiKeyRemainingValidity({
      securedApiKey: resp,
    });
    expect(validity).toEqual(42 - Math.round(new Date().getTime() / 1000));
  });

  test('throws when the validity field is not found', () => {
    try {
      client.getSecuredApiKeyRemainingValidity({ securedApiKey: 'foo' });
      throw new Error('test is expected to throw error');
    } catch (e) {
      expect((e as Error).message).toMatch(
        'validUntil not found in given secured api key.'
      );
    }
  });
});

describe('replaceAllObjects', () => {
  beforeEach(() => {
    client.batch = jest.fn(() =>
      Promise.resolve({ taskID: 42, objectIDs: ['foo', 'bar'] })
    );
    client.operationIndex = jest.fn(() =>
      Promise.resolve({ taskID: 21, updatedAt: 'foobar' })
    );
    client.waitForTask = jest.fn(() =>
      Promise.resolve({ status: 'published' })
    );
  });

  afterEach(() => {
    jest.resetAllMocks();
    jest.restoreAllMocks();
  });

  test('executes with minimal parameters', async () => {
    const resp = await client.replaceAllObjects({
      indexName: 'foo',
      objects: [{ name: 'John Doe' }],
    });

    expect(client.batch).toHaveBeenCalledTimes(1);
    expect(client.operationIndex).toHaveBeenCalledTimes(2);
    expect(resp).toEqual({
      copyOperationResponse: { taskID: 21, updatedAt: 'foobar' },
      batchResponses: [
        {
          objectIDs: ['foo', 'bar'],
          taskID: 42,
        },
      ],
      moveOperationResponse: { taskID: 21, updatedAt: 'foobar' },
    });
  });

  test('does many calls when len(objects) > batchSize', async () => {
    const objects: Array<Record<string, any>> = [];
    for (let i = 0; i < 33; i++) {
      objects.push({ name: `John Doe${i}` });
    }

    const resp = await client.replaceAllObjects({
      indexName: 'foo',
      objects,
      batchSize: 10,
    });

    expect(client.batch).toHaveBeenCalledTimes(4);
    expect(client.operationIndex).toHaveBeenCalledTimes(2);
    expect(resp).toEqual({
      copyOperationResponse: { taskID: 21, updatedAt: 'foobar' },
      batchResponses: [
        {
          objectIDs: ['foo', 'bar'],
          taskID: 42,
        },
        {
          objectIDs: ['foo', 'bar'],
          taskID: 42,
        },
        {
          objectIDs: ['foo', 'bar'],
          taskID: 42,
        },
        {
          objectIDs: ['foo', 'bar'],
          taskID: 42,
        },
      ],
      moveOperationResponse: { taskID: 21, updatedAt: 'foobar' },
    });
  });

  test('batchSize is 1000 by default', async () => {
    const objects: Array<Record<string, any>> = [];
    for (let i = 0; i < 1001; i++) {
      objects.push({ name: `John Doe${i}` });
    }

    const resp = await client.replaceAllObjects({ indexName: 'foo', objects });

    expect(client.batch).toHaveBeenCalledTimes(2);
    expect(client.operationIndex).toHaveBeenCalledTimes(2);
    expect(resp).toEqual({
      copyOperationResponse: { taskID: 21, updatedAt: 'foobar' },
      batchResponses: [
        {
          objectIDs: ['foo', 'bar'],
          taskID: 42,
        },
        {
          objectIDs: ['foo', 'bar'],
          taskID: 42,
        },
      ],
      moveOperationResponse: { taskID: 21, updatedAt: 'foobar' },
    });
  });
});