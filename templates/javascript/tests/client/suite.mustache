// {{generationBanner}}
/* eslint-disable @typescript-eslint/no-unused-vars, require-await */
// @ts-nocheck Failing tests will have type errors, but we cannot suppress them even with @ts-expect-error because it doesn't work for a block of lines.
import { {{client}}, {{#lambda.titlecase}}{{client}}{{/lambda.titlecase}} } from '{{{import}}}';
import { echoRequester } from '{{{npmNamespace}}}/requester-node-http';
import type { EchoResponse } from '{{{npmNamespace}}}/requester-node-http';

const appId = 'test-app-id';
const apiKey = 'test-api-key';

function createClient(): {{#lambda.titlecase}}{{client}}{{/lambda.titlecase}} {
  return {{client}}(appId, apiKey, {{#hasRegionalHost}}'{{{defaultRegion}}}', {{/hasRegionalHost}}{ requester: echoRequester() });
}

{{#blocksClient}}
describe('{{testType}}', () => {
  {{#tests}}
  test('{{{testName}}}', async () => {
    {{#autoCreateClient}}
      const $client = createClient();
    {{/autoCreateClient}}

    {{#steps}}
      {{#isError}}
        try {
          {{#dynamicTemplate}}{{/dynamicTemplate}}
          throw new Error('test is expected to throw error');
        } catch(e) {
          expect((e as Error).message).toMatch("{{{expectedError}}}");
        }
      {{/isError}}
      {{^isError}}
        {{#dynamicTemplate}}{{/dynamicTemplate}}

        {{#testUserAgent}}
          expect(decodeURIComponent(result.algoliaAgent)).toMatch(/{{{match}}}/);
        {{/testUserAgent}}
        {{#testTimeouts}}
          expect(result).toEqual(expect.objectContaining({{{match.parameters}}}));
        {{/testTimeouts}}
        {{#testHost}}
          expect(result.host).toEqual("{{{match}}}");
        {{/testHost}}
        {{#testResponse}}
          {{#matchIsObject}}
            expect(result).toEqual({{{match.parameters}}});
          {{/matchIsObject}}
          {{^matchIsObject}}
            expect(result).toEqual("{{{match}}}");
          {{/matchIsObject}}
        {{/testResponse}}
      {{/isError}}
    {{/steps}}
  });

  {{/tests}}
})

{{/blocksClient}}

describe('init', () => {
  test('sets authMode', async () => {
    const qpClient = {{client}}('foo', 'bar', {{#hasRegionalHost}}'us',{{/hasRegionalHost}}{
      authMode: 'WithinQueryParameters',
      requester: echoRequester(),
    });
    const headerClient = {{client}}('foo', 'bar', {{#hasRegionalHost}}'us',{{/hasRegionalHost}}{
      authMode: 'WithinHeaders',
      requester: echoRequester(),
    });

    const qpResult = (await qpClient.customGet({
      path: '1/foo',
    })) as unknown as EchoResponse;
    expect(qpResult.searchParams).toEqual({
      'x-algolia-api-key': 'bar',
      'x-algolia-application-id': 'foo',
    });

    const headerResult = (await headerClient.customGet({
      path: '1/bar',
    })) as unknown as EchoResponse;
    expect(headerResult.headers).toEqual({
      accept: 'application/json',
      'content-type': 'text/plain',
      'x-algolia-api-key': 'bar',
      'x-algolia-application-id': 'foo',
    });
  });
});