// {{generationBanner}}
/* eslint-disable eslint/no-unused-vars */
import { describe, test, expect } from 'vitest';

{{^isCompositionFullClient}}
import { {{{clientName}}} } from '{{{importPackage}}}';
{{/isCompositionFullClient}}
{{#isCompositionFullClient}}
import { compositionFullClient } from '@algolia/client-composition';
{{/isCompositionFullClient}}
import { nodeEchoRequester } from '@algolia/requester-testing';
import type { EchoResponse } from '@algolia/requester-testing';

const appId = 'test-app-id';
const apiKey = 'test-api-key';

function createClient() {
  return {{^isCompositionFullClient}}{{{clientName}}}{{/isCompositionFullClient}}{{#isCompositionFullClient}}compositionFullClient{{/isCompositionFullClient}}(appId, apiKey{{#isStandaloneClient}}, { requester: nodeEchoRequester() }{{/isStandaloneClient}}){{^isStandaloneClient}}.{{{initMethod}}}({ options: { requester: nodeEchoRequester() }, {{#hasRegionalHost}} region:'{{{defaultRegion}}}' {{/hasRegionalHost}} });{{/isStandaloneClient}};
}

{{#blocksClient}}
{{> tests/client/tests}}
{{/blocksClient}}

describe('init', () => {
  test('sets authMode', async () => {
    const qpClient =  {{^isCompositionFullClient}}{{{clientName}}}{{/isCompositionFullClient}}{{#isCompositionFullClient}}compositionFullClient{{/isCompositionFullClient}}('foo', 'bar'{{#isStandaloneClient}}, { requester: nodeEchoRequester(), authMode: 'WithinQueryParameters' }{{/isStandaloneClient}}){{^isStandaloneClient}}.{{{initMethod}}}({ options: { requester: nodeEchoRequester(), authMode: 'WithinQueryParameters' }, {{#hasRegionalHost}} region:'{{{defaultRegion}}}' {{/hasRegionalHost}} });{{/isStandaloneClient}};
    const headerClient =  {{^isCompositionFullClient}}{{{clientName}}}{{/isCompositionFullClient}}{{#isCompositionFullClient}}compositionFullClient{{/isCompositionFullClient}}('foo', 'bar'{{#isStandaloneClient}}, { requester: nodeEchoRequester(), authMode: 'WithinHeaders' }{{/isStandaloneClient}}){{^isStandaloneClient}}.{{{initMethod}}}({ options: { requester: nodeEchoRequester(), authMode: 'WithinHeaders' }, {{#hasRegionalHost}} region:'{{{defaultRegion}}}' {{/hasRegionalHost}} });{{/isStandaloneClient}};

    const qpResult = (await qpClient.customGet({
      path: '1/foo',
    })) as unknown as EchoResponse;
    expect(qpResult.searchParams).toEqual({
      'x-algolia-api-key': 'bar',
      'x-algolia-application-id': 'foo',
    });

    const headerResult = (await headerClient.customGet({
      path: '1/bar',
    })) as unknown as EchoResponse;
    expect(headerResult.headers).toEqual({
      accept: 'application/json',
      'content-type': 'text/plain',
      'x-algolia-api-key': 'bar',
      'x-algolia-application-id': 'foo',
    });
  });
});