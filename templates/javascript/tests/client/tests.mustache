
describe('{{testType}}', () => {
  {{#tests}}
  test('{{{testName}}}', async () => {
    {{#autoCreateClient}}
      const client = createClient();
    {{/autoCreateClient}}

    {{#steps}}
      {{#times}}
      for (let i = 0; i < {{.}}; i++) {
      {{/times}}
      {{#isError}}
        try {
          {{#dynamicTemplate}}{{/dynamicTemplate}}
          throw new Error('test is expected to throw error');
        } catch(e) {
          expect((e as Error).message).toMatch("{{{expectedError}}}");
        }
      {{/isError}}
      {{^isError}}
        {{#dynamicTemplate}}{{/dynamicTemplate}}

        {{#testUserAgent}}
          expect(decodeURIComponent(result.algoliaAgent)).toMatch(/{{{match}}}/);
        {{/testUserAgent}}
        {{#testTimeouts}}
          expect(result).toEqual(expect.objectContaining({{{match.parameters}}}));
        {{/testTimeouts}}
        {{#testHost}}
          expect(result.host).toEqual("{{{match}}}");
        {{/testHost}}
        {{#testResponse}}
          {{#matchIsJSON}}
            expect(result).toEqual({{{match.parameters}}});
          {{/matchIsJSON}}
          {{^matchIsJSON}}
            {{#matchIsNull}}
              expect(result).toBeUndefined();
            {{/matchIsNull}}
            {{^matchIsNull}}
              expect(result).toEqual("{{{match}}}");
            {{/matchIsNull}}
          {{/matchIsJSON}}
        {{/testResponse}}
      {{/isError}}
      {{#times}}
      }
      {{/times}}
    {{/steps}}
  }, 15000);

  {{/tests}}
});