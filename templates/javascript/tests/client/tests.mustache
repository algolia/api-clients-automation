
describe('{{testType}}', () => {
  {{#tests}}
  test('{{{testName}}}', async () => {
    {{#autoCreateClient}}
      const client = createClient();
    {{/autoCreateClient}}

    {{#steps}}
      {{#times}}
      for (let i = 0; i < {{.}}; i++) {
      {{/times}}
      {{#isError}}
        try {
          {{#dynamicTemplate}}{{/dynamicTemplate}}
          throw new Error('test is expected to throw error');
        } catch(e) {
          expect((e as Error).message).toMatch("{{{expectedError}}}");
        }
      {{/isError}}
      {{^isError}}
        {{#shouldScope}} 
        {
        {{/shouldScope}}
        {{#dynamicTemplate}}{{/dynamicTemplate}}

        {{#testUserAgent}}
          expect(decodeURIComponent(result.algoliaAgent)).toMatch(/{{{match.value}}}/);
        {{/testUserAgent}}
        {{#testTimeouts}}
          expect(result).toEqual(expect.objectContaining({{{match.value}}}));
        {{/testTimeouts}}
        {{#testHost}}
          expect(result.host).toEqual("{{{match.value}}}");
        {{/testHost}}
        {{#testResponse}}
          {{#match.isPrimitive}}
            {{#match.isString}}
              expect(result).toEqual("{{{match.value}}}");
            {{/match.isString}}
            {{^match.isString}}
              expect(result).toEqual({{{match.value}}});
            {{/match.isString}}
          {{/match.isPrimitive}}
          {{^match.isPrimitive}}
            expect(result).toEqual({{{match.value}}});
          {{/match.isPrimitive}}
        {{/testResponse}}
        {{#shouldScope}} 
        }
        {{/shouldScope}}
      {{/isError}}
      {{#times}}
      }
      {{/times}}
    {{/steps}}
  }, 15000);

  {{/tests}}
});