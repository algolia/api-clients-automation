import http from 'http';
import { shuffle } from '../utils/helpers';
import { Transporter } from '../utils/Transporter'; 
import { Headers, Host, Request, RequestOptions } from '../utils/types';

{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';
{{#hasAuthMethods}}
import { HttpBearerAuth, ApiKeyAuth, OAuth } from '../model/models';
{{/hasAuthMethods}}

import { HttpError, RequestFile } from './apis';

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export enum {{classname}}ApiKeys {
{{#authMethods}}
{{#isApiKey}}
    {{name}},
{{/isApiKey}}
{{/authMethods}}
}

export class {{classname}} {
    private transporter: Transporter;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}
        '{{name}}': new HttpBasicAuth(),
{{/isBasicBasic}}
{{#isBasicBearer}}
        '{{name}}': new HttpBearerAuth(),
{{/isBasicBearer}}
{{#isApiKey}}
        '{{name}}': new ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{#isKeyInQuery}}'query'{{/isKeyInQuery}}{{#isKeyInCookie}}'cookie'{{/isKeyInCookie}}, '{{keyParamName}}'),
{{/isApiKey}}
{{#isOAuth}}
        '{{name}}': new OAuth(),
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}
    }

    protected interceptors: Interceptor[] = [];

    constructor(appId: string, apiKey: string) {
        this.setApiKey(SearchApiApiKeys.appId, appId);
        this.setApiKey(SearchApiApiKeys.apiKey, apiKey);
        this.transporter = new Transporter({
          hosts: ([
            { url: `${appId}-dsn.algolia.net`, accept: 'read', protocol: 'https' },
            { url: `${appId}.algolia.net`, accept: 'write', protocol: 'https' },
          ] as Host[]).concat(
            shuffle([
              { url: `${appId}-1.algolianet.com`, accept: 'readWrite', protocol: 'https' },
              { url: `${appId}-2.algolianet.com`, accept: 'readWrite', protocol: 'https' },
              { url: `${appId}-3.algolianet.com`, accept: 'readWrite', protocol: 'https' },
            ])
          ),
          baseHeaders: {
            'content-type': 'application/x-www-form-urlencoded'
          },
          userAgent: 'Algolia for Javascript',
          timeouts: {
            connect: 2,
            read: 5,
            write: 30,
          },
        });
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: {{classname}}ApiKeys, value: string) {
        (this.authentications as any)[{{classname}}ApiKeys[key]].apiKey = value;
    }
{{#hasAuthMethods}}
{{#authMethods}}
{{#isBasicBasic}}

    set username(username: string) {
        this.authentications.{{name}}.username = username;
    }

    set password(password: string) {
        this.authentications.{{name}}.password = password;
    }
{{/isBasicBasic}}
{{#isBasicBearer}}

    set accessToken(accessToken: string | (() => string)) {
        this.authentications.{{name}}.accessToken = accessToken;
    }
{{/isBasicBearer}}
{{#isOAuth}}

    set accessToken(token: string) {
        this.authentications.{{name}}.accessToken = token;
    }
{{/isOAuth}}
{{/authMethods}}
{{/hasAuthMethods}}

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

{{#operation}}
    /**
     * {{&notes}}
     {{#summary}}
     * @summary {{&summary}}
     {{/summary}}
     {{#allParams}}
     * @param {{paramName}} {{description}}
     {{/allParams}}
     */
    public async {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{{{returnType}}}> {
        const path = '{{{path}}}'{{#pathParams}}
            .replace('{' + '{{baseName}}' + '}', encodeURIComponent(String({{paramName}}))){{/pathParams}};
        let headers: Headers = {};
        let queryParameters: Record<string, string> = {};
{{#hasProduces}}
        const produces = [{{#produces}}'{{{mediaType}}}'{{^-last}}, {{/-last}}{{/produces}}];
        // give precedence to 'application/json'
        if (produces.indexOf('application/json') >= 0) {
            headers.Accept = 'application/json';
        } else {
            headers.Accept = produces.join(',');
        }
{{/hasProduces}}
        let formParams: Record<string, string> = {};

{{#allParams}}
{{#required}}
        // verify required parameter '{{paramName}}' is not null or undefined
        if ({{paramName}} === null || {{paramName}} === undefined) {
            throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
        }

{{/required}}
{{/allParams}}
{{#queryParams}}
        if ({{paramName}} !== undefined) {
            queryParameters['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
        }

{{/queryParams}}
{{#headerParams}}
        headers['{{baseName}}'] = ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}");
{{/headerParams}}
        headers = {...headers, ...options.headers};

        const request: Request = {
            method: '{{httpMethod}}',
            path,
{{#bodyParam}}
            data: ObjectSerializer.serialize({{paramName}}, "{{{dataType}}}")
{{/bodyParam}}
        };

        const requestOptions: RequestOptions = {
          headers,
          queryParameters
        };

        let authenticationPromise = Promise.resolve();
{{#authMethods}}
    {{#isApiKey}}
        if (this.authentications.{{name}}.apiKey) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(requestOptions));
        }
    {{/isApiKey}}
    {{#isBasicBasic}}
        if (this.authentications.{{name}}.username && this.authentications.{{name}}.password) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(requestOptions));
        }
    {{/isBasicBasic}}
    {{#isBasicBearer}}
        if (this.authentications.{{name}}.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(requestOptions));
        }
    {{/isBasicBearer}}
    {{#isOAuth}}
        if (this.authentications.{{name}}.accessToken) {
            authenticationPromise = authenticationPromise.then(() => this.authentications.{{name}}.applyToRequest(requestOptions));
        }
    {{/isOAuth}}
{{/authMethods}}
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(requestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(requestOptions));
        }

        await interceptorPromise;

        return this.transporter.retryableRequest(request, requestOptions);
    }
{{/operation}}
}
{{/operations}}
