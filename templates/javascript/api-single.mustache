import { shuffle } from '../utils/helpers';
import { Transporter } from '../utils/Transporter'; 
import { Headers, Host, Request, RequestOptions } from '../utils/types';
import { Requester } from '../utils/requester/Requester';

{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}
{{#hasAuthMethods}}
import { ApiKeyAuth } from '../model/models';
{{/hasAuthMethods}}

{{#operations}}
{{#description}}
/**
* {{&description}}
*/
{{/description}}
export enum {{classname}}ApiKeys {
  {{#authMethods}}
  {{#isApiKey}}
  {{name}},
  {{/isApiKey}}
  {{/authMethods}}
}

export class {{classname}} {
  private transporter: Transporter;

  protected authentications = {
    {{#hasAuthMethods}}
    {{#authMethods}}
    {{#isApiKey}}
    '{{name}}': new ApiKeyAuth({{#isKeyInHeader}}'header'{{/isKeyInHeader}}{{#isKeyInQuery}}'query'{{/isKeyInQuery}}{{#isKeyInCookie}}'cookie'{{/isKeyInCookie}}, '{{keyParamName}}'),
    {{/isApiKey}}
    {{/authMethods}}
    {{/hasAuthMethods}}
  }

  constructor(appId: string, apiKey: string, options?: {requester?: Requester, hosts?: Host[]}) {
    this.setApiKey(SearchApiApiKeys.appId, appId);
    this.setApiKey(SearchApiApiKeys.apiKey, apiKey);
    this.transporter = new Transporter({
      hosts: options?.hosts ?? this.getDefaultHosts(appId, apiKey),
      baseHeaders: {
        'content-type': 'application/x-www-form-urlencoded'
      },
      userAgent: 'Algolia for Javascript',
      timeouts: {
        connect: 2,
        read: 5,
        write: 30,
      },
      requester: options?.requester,
    });
  }

  public getDefaultHosts(appId: string, apiKey: string): Host[] {
    return (
        [
          { url: `${appId}-dsn.algolia.net`, accept: 'read', protocol: 'https' },
          { url: `${appId}.algolia.net`, accept: 'write', protocol: 'https' },
        ] as Host[]
      ).concat(
        shuffle([
          { url: `${appId}-1.algolianet.com`, accept: 'readWrite', protocol: 'https' },
          { url: `${appId}-2.algolianet.com`, accept: 'readWrite', protocol: 'https' },
          { url: `${appId}-3.algolianet.com`, accept: 'readWrite', protocol: 'https' },
        ])
      );
  }

  public setRequest(requester: Requester): void {
    this.transporter.setRequester(requester);
  }

  public setHosts(hosts: Host[]): void {
    this.transporter.setHosts(hosts);
  }

  public setApiKey(key: {{classname}}ApiKeys, value: string) {
    this.authentications[{{classname}}ApiKeys[key]].apiKey = value;
  }

  private async sendRequest<TResponse>(request: Request, requestOptions: RequestOptions): Promise<TResponse> {
    {{#authMethods}}
    {{#isApiKey}}
    if (this.authentications.{{name}}.apiKey) {
    this.authentications.{{name}}.applyToRequest(requestOptions);
    }
    {{/isApiKey}}
    {{/authMethods}}
    return this.transporter.request(request, requestOptions);
  }

  {{#operation}}
  /**
  * {{&notes}}
  {{#summary}}
  * @summary {{&summary}}
  {{/summary}}
  {{#allParams}}
  * @param {{paramName}} {{description}}
  {{/allParams}}
  */
  public async {{nickname}} ({{#allParams}}{{paramName}}{{^required}}?{{/required}}: {{{dataType}}}, {{/allParams}}) : Promise<{{{returnType}}}> {
    const path = '{{{path}}}'{{#pathParams}}.replace(
      '{' + '{{baseName}}' + '}', 
      encodeURIComponent(String({{paramName}}))
    ){{/pathParams}};
    let headers: Headers = { Accept: 'application/json' };
    let queryParameters: Record<string, string> = {};

    {{#allParams}}
    {{#required}}
    if ({{paramName}} === null || {{paramName}} === undefined) {
      throw new Error('Required parameter {{paramName}} was null or undefined when calling {{nickname}}.');
    }

    {{/required}}
    {{/allParams}}
    {{#queryParams}}
    if ({{paramName}} !== undefined) {
      queryParameters['{{baseName}}'] = {{paramName}};
    }

    {{/queryParams}}
    {{#headerParams}}
    headers['{{baseName}}'] = {{paramName}};
    {{/headerParams}}

    const request: Request = {
      method: '{{httpMethod}}',
      path,
      {{#bodyParam}}
      data: {{paramName}},
      {{/bodyParam}}
    };

    const requestOptions: RequestOptions = {
      headers,
      queryParameters
    };

    return this.sendRequest(request, requestOptions);
  }
  {{/operation}}
}
{{/operations}}
