import type { Options } from 'tsup';
import { defineConfig } from 'tsup';

import { getBaseNodeOptions, getBaseBrowserOptions, getDependencies } from "../../base.tsup.config"

import pkg from "./package.json" with {type:'json'}

const nodeOptions: Options = {
  ...getBaseNodeOptions(pkg, __dirname),
  dts: { entry: { 'node': '{{#isAlgoliasearchClient}}lite/{{/isAlgoliasearchClient}}builds/node.ts' } },
  entry: ['{{#isAlgoliasearchClient}}lite/{{/isAlgoliasearchClient}}builds/node.ts', '{{#isAlgoliasearchClient}}lite/{{/isAlgoliasearchClient}}src/*.ts'],
  {{#isAlgoliasearchClient}}
  outDir: 'dist/lite',
  {{/isAlgoliasearchClient}}
};

const nodeConfigs: Options[] = [
  {
    ...nodeOptions,
    format: 'cjs',
    name: `node ${pkg.name} cjs`
  },
  {
    ...nodeOptions,
    format: 'esm',
    name: `node ${pkg.name} esm`
  },
  {{^isAlgoliasearchClient}}
  {
    ...nodeOptions,
    format: 'esm',
    name: `fetch ${pkg.name} esm`,
    dts: { entry: { 'fetch': 'builds/fetch.ts' } },
    external: getDependencies(pkg, 'fetch'),
    entry: ['builds/fetch.ts', 'src/*.ts'],
  },
  {{/isAlgoliasearchClient}}
  {{#isAlgoliasearchClient}}
  {
    ...nodeOptions,
    format: 'cjs',
    name: 'node algoliasearch cjs',
    dts: { entry: { 'node': 'builds/node.ts' } },
    entry: ['builds/node.ts'],
    outDir: 'dist',
  },
  {
    ...nodeOptions,
    format: 'esm',
    name: 'node algoliasearch esm',
    dts: { entry: { 'node': 'builds/node.ts' } },
    entry: ['builds/node.ts'],
    outDir: 'dist',
  },
  {
    ...nodeOptions,
    format: 'esm',
    name: 'fetch algoliasearch esm',
    dts: { entry: { 'fetch': 'builds/fetch.ts' } },
    entry: ['builds/fetch.ts'],
    outDir: 'dist',
    external: getDependencies(pkg, 'fetch'),
  },
  {{/isAlgoliasearchClient}}
];

const browserOptions: Options = {
  ...getBaseBrowserOptions(pkg, __dirname),
  {{^isAlgoliasearchClient}}
  globalName: '{{clientName}}',
  {{/isAlgoliasearchClient}}
  {{#isAlgoliasearchClient}}
  globalName: 'lite',
  outDir: 'dist/lite',
  {{/isAlgoliasearchClient}}
};

const browserConfigs: Options[] = [
  {
    ...browserOptions,
    minify: false,
    name: `browser ${pkg.name} esm`,
    dts: { entry: { 'browser': '{{#isAlgoliasearchClient}}lite/{{/isAlgoliasearchClient}}builds/browser.ts' } },
    entry: ['{{#isAlgoliasearchClient}}lite/{{/isAlgoliasearchClient}}builds/browser.ts', '{{#isAlgoliasearchClient}}lite/{{/isAlgoliasearchClient}}src/*.ts'],
    {{#isAlgoliasearchClient}}
    external: ['dom', '@algolia/client-common', '@algolia/requester-browser-xhr'],
    {{/isAlgoliasearchClient}}
  },
  {
    ...browserOptions,
    dts: false,
    minify: true,
    name: `browser ${pkg.name} min esm`,
    entry: {'builds/browser.min': '{{#isAlgoliasearchClient}}lite/{{/isAlgoliasearchClient}}builds/browser.ts'},
    external: [],
    {{#isAlgoliasearchClient}}
    noExternal: ['dom', '@algolia/client-common', '@algolia/requester-browser-xhr'],
    {{/isAlgoliasearchClient}}
    {{^isAlgoliasearchClient}}
    noExternal: getDependencies(pkg, 'xhr'),
    {{/isAlgoliasearchClient}}
  },
  {{#isAlgoliasearchClient}}
  {
    ...browserOptions,
    name: 'algoliasearch esm',
    globalName: 'algoliasearch',
    dts: { entry: { 'browser': 'builds/browser.ts' } },
    entry: ['builds/browser.ts'],
    outDir: 'dist',
    minify: false,
  },
  {
    ...browserOptions,
    name: 'algoliasearch min esm',
    globalName: 'algoliasearch',
    dts: false,
    minify: true,
    entry: {'browser.min': 'builds/browser.ts'},
    outDir: 'dist',
    external: [],
    noExternal: getDependencies(pkg, 'xhr'),
  }
  {{/isAlgoliasearchClient}}
];

export default defineConfig([...nodeConfigs, ...browserConfigs]);