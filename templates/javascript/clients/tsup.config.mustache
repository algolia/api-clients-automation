import path from 'path';

import type { Options } from 'tsup';
import { defineConfig } from 'tsup';

const baseConfig: Options = {
  clean: true,
  dts: true,
  sourcemap: true,
  splitting: false,
  tsconfig: path.resolve(__dirname, 'tsconfig.json'),
};

const nodeConfigs: Options[] = [
  {
    ...baseConfig,
    platform: 'node',
    format: 'cjs',
    target: 'node14',
    external: ['@algolia/client-common', '@algolia/requester-node-http'],
    entry: { '{{packageName}}': 'builds/node.ts' },
  },
  {
    ...baseConfig,
    platform: 'node',
    format: 'esm',
    target: 'node14',
    external: ['@algolia/client-common', '@algolia/requester-node-http'],
    entry: { '{{packageName}}.esm.node': 'builds/node.ts' },
  },
  {{#isAlgoliasearchClient}}
  {
    ...baseConfig,
    platform: 'node',
    format: 'esm',
    target: 'node14',
    external: ['@algolia/client-common', '@algolia/requester-node-http'],
    entry: { 'lite.esm.node': 'builds/node.ts' },
  }
  {{/isAlgoliasearchClient}}
];

const browserConfigs: Options[] = [
  {
    ...baseConfig,
    globalName: '{{packageName}}',
    platform: 'browser',
    entry: {
      '{{packageName}}.esm.browser': 'builds/browser.ts'
    },
    external: ['dom', '@algolia/requester-browser-xhr'],
    format: ['esm'],
    target: ['chrome109', 'safari15.6', 'firefox115', 'edge126'],
  },
  {{#isAlgoliasearchClient}}
  {
    ...baseConfig,
    globalName: 'algoliasearch/lite',
    platform: 'browser',
    entry: {
      'lite.esm.browser': 'lite/browser.ts'
    },
    external: ['dom', '@algolia/requester-browser-xhr'],
    format: ['esm'],
    target: ['chrome109', 'safari15.6', 'firefox115', 'edge126'],
  }
  {{/isAlgoliasearchClient}}
]

export default defineConfig([...nodeConfigs, ...browserConfigs]);