// {{{generationBanner}}}

{{#dependencies}}
import type {
  {{#lambda.titlecase}}{{{dependencyName}}}Client{{/lambda.titlecase}},
  {{#dependencyHasRegionalHosts}}
  Region as {{#lambda.titlecase}}{{{dependencyName}}}Region{{/lambda.titlecase}},
  RegionOptions as {{#lambda.titlecase}}{{{dependencyName}}}RegionOptions{{/lambda.titlecase}},
  {{/dependencyHasRegionalHosts}}
} from '{{{dependencyPackage}}}';
{{/dependencies}}

import type { Direction } from '@algolia/client-analytics';
import type { ClientOptions } from '@algolia/client-common';
import type { EventType } from '@algolia/client-personalization';
import type {
  Action,
  AdvancedSyntaxFeatures,
  AlternativesAsExact,
  Anchoring,
  AroundPrecision,
  AroundRadius,
  AroundRadiusAll,
  AutomaticFacetFilter,
  AutomaticFacetFilters,
  Banner,
  BannerImage,
  BannerImageUrl,
  BannerLink,
  BaseIndexSettings,
  BaseSearchParams,
  BaseSearchParamsWithoutQuery,
  BaseSearchResponse,
  BooleanString,
  Condition,
  Consequence,
  ConsequenceHide,
  ConsequenceParams,
  ConsequenceQuery,
  ConsequenceQueryObject,
  CustomDeleteProps,
  CustomGetProps,
  CustomPostProps,
  CustomPutProps,
  DeleteSourceProps,
  DeletedAtResponse,
  Distinct,
  Edit,
  EditType,
  ErrorBase,
  ExactOnSingleWordQuery,
  Exhaustive,
  FacetFilters,
  FacetHits,
  FacetOrdering,
  FacetStats,
  Facets,
  GetTaskProps,
  HighlightResult,
  HighlightResultOption,
  Hit,
  IgnorePlurals,
  IndexSettingsAsSearchParams,
  InsideBoundingBox,
  Languages,
  MatchLevel,
  MatchedGeoLocation,
  Mode,
  NumericFilters,
  OptionalFilters,
  OptionalWords,
  Params,
  Personalization,
  Promote,
  PromoteObjectID,
  PromoteObjectIDs,
  QueryType,
  Range,
  RankingInfo,
  ReRankingApplyFilter,
  Redirect,
  RedirectRuleIndexData,
  RedirectRuleIndexMetadata,
  RedirectURL,
  RemoveStopWords,
  RemoveWordsIfNoResults,
  RenderingContent,
  SearchForFacetValuesProps,
  SearchForFacetValuesRequest,
  SearchForFacetValuesResponse,
  SearchHits,
  SearchPagination,
  SearchParams,
  SearchParamsObject,
  SearchParamsQuery,
  SearchResponse,
  SemanticSearch,
  SnippetResult,
  SnippetResultOption,
  SortRemainingBy,
  Source,
  SupportedLanguage,
  TagFilters,
  TaskStatus,
  TimeRange,
  TypoTolerance,
  TypoToleranceEnum,
  Value,
  Widgets,
} from '@algolia/client-search';
import { apiClientVersion } from '@algolia/client-search';
import type { Event, EventStatus, WatchResponse } from '@algolia/ingestion';

import type {
  ABTest,
  ABTestConfiguration,
  ABTestResponse,
  AbTestsVariant,
  AbTestsVariantSearchParams,
  AddABTestsRequest,
  AddABTestsVariant,
  CustomSearchParams,
  DeleteABTestProps,
  EffectMetric,
  EmptySearchFilter,
  EstimateABTestRequest,
  EstimateABTestResponse,
  EstimateConfiguration,
  FilterEffects,
  GetABTestProps,
  ListABTestsProps,
  ListABTestsResponse,
  MinimumDetectableEffect,
  OutliersFilter,
  Status,
  StopABTestProps,
  Variant,
} from '@algolia/client-abtesting';

{{#dependencies}}
export * from '{{{dependencyPackage}}}';
{{/dependencies}}
export * from '@algolia/client-search';

export type Region = {{#dependencies}} {{#dependencyHasRegionalHosts}}{{^-first}}|{{/-first}}{{#lambda.titlecase}}{{{dependencyName}}}Region{{/lambda.titlecase}} {{/dependencyHasRegionalHosts}}{{/dependencies}};
export type RegionOptions = {{#dependencies}} {{#dependencyHasRegionalHosts}}{{^-first}}|{{/-first}}{{#lambda.titlecase}}{{{dependencyName}}}RegionOptions{{/lambda.titlecase}} {{/dependencyHasRegionalHosts}}{{/dependencies}};

export type {
  Status,
  EventType,
{{#dependencies}}
  {{#dependencyHasRegionalHosts}}
  {{#lambda.titlecase}}{{{dependencyName}}}Region{{/lambda.titlecase}},
  {{#lambda.titlecase}}{{{dependencyName}}}RegionOptions{{/lambda.titlecase}},
  {{/dependencyHasRegionalHosts}}
{{/dependencies}}
};

export type {
  ABTest,
  ABTestConfiguration,
  ABTestResponse,
  AbTestsVariant,
  AbTestsVariantSearchParams,
  Action,
  AddABTestsRequest,
  AddABTestsVariant,
  AdvancedSyntaxFeatures,
  AlternativesAsExact,
  Anchoring,
  AroundPrecision,
  AroundRadius,
  AroundRadiusAll,
  AutomaticFacetFilter,
  AutomaticFacetFilters,
  Banner,
  BannerImage,
  BannerImageUrl,
  BannerLink,
  BaseIndexSettings,
  BaseSearchParams,
  BaseSearchParamsWithoutQuery,
  BaseSearchResponse,
  BooleanString,
  Condition,
  Consequence,
  ConsequenceHide,
  ConsequenceParams,
  ConsequenceQuery,
  ConsequenceQueryObject,
  CustomDeleteProps,
  CustomGetProps,
  CustomPostProps,
  CustomPutProps,
  CustomSearchParams,
  DeleteABTestProps,
  DeleteSourceProps,
  DeletedAtResponse,
  Direction,
  Distinct,
  Edit,
  EditType,
  EffectMetric,
  EmptySearchFilter,
  ErrorBase,
  EstimateABTestRequest,
  EstimateABTestResponse,
  EstimateConfiguration,
  Event,
  EventStatus,
  ExactOnSingleWordQuery,
  Exhaustive,
  FacetFilters,
  FacetHits,
  FacetOrdering,
  FacetStats,
  Facets,
  FilterEffects,
  GetABTestProps,
  GetTaskProps,
  HighlightResult,
  HighlightResultOption,
  Hit,
  IgnorePlurals,
  IndexSettingsAsSearchParams,
  InsideBoundingBox,
  Languages,
  ListABTestsProps,
  ListABTestsResponse,
  MatchLevel,
  MatchedGeoLocation,
  MinimumDetectableEffect,
  Mode,
  NumericFilters,
  OptionalFilters,
  OptionalWords,
  OutliersFilter,
  Params,
  Personalization,
  Promote,
  PromoteObjectID,
  PromoteObjectIDs,
  QueryType,
  Range,
  RankingInfo,
  ReRankingApplyFilter,
  Redirect,
  RedirectRuleIndexData,
  RedirectRuleIndexMetadata,
  RedirectURL,
  RemoveStopWords,
  RemoveWordsIfNoResults,
  RenderingContent,
  SearchForFacetValuesProps,
  SearchForFacetValuesRequest,
  SearchForFacetValuesResponse,
  SearchHits,
  SearchPagination,
  SearchParams,
  SearchParamsObject,
  SearchParamsQuery,
  SearchResponse,
  SemanticSearch,
  SnippetResult,
  SnippetResultOption,
  SortRemainingBy,
  Source,
  StopABTestProps,
  SupportedLanguage,
  TagFilters,
  TaskStatus,
  TimeRange,
  TypoTolerance,
  TypoToleranceEnum,
  Value,
  Variant,
  WatchResponse,
  Widgets,
};

export { apiClientVersion };

/**
 * Options forwarded to the client initialized via the `init` method.
 */
export type InitClientOptions = Partial<{
  /**
   * App to target with the initialized client, defaults to the `algoliasearch` appId.
   */
  appId: string;
  /**
   * API key of the targeted app ID, defaults to the `algoliasearch` apiKey.
   */
  apiKey: string;
  options: ClientOptions;
}>;
