{{#nodeSearchHelpers}}
import {createHmac} from 'crypto';
{{/nodeSearchHelpers}}

import {
  DEFAULT_CONNECT_TIMEOUT_BROWSER,
  DEFAULT_CONNECT_TIMEOUT_NODE,
  DEFAULT_READ_TIMEOUT_BROWSER,
  DEFAULT_READ_TIMEOUT_NODE,
  DEFAULT_WRITE_TIMEOUT_BROWSER,
  DEFAULT_WRITE_TIMEOUT_NODE,
  createBrowserLocalStorageCache,
  createFallbackableCache,
  createMemoryCache,
  createNullCache,
  serializeQueryParameters,
} from '@algolia/client-common';
import type { AbtestingClient } from '@algolia/client-abtesting';
import type { Region as AbtestingRegion } from '@algolia/client-abtesting/src/abtestingClient';
import {
  createAbtestingClient,
  REGIONS as abtestingRegions,
} from '@algolia/client-abtesting/src/abtestingClient';
import type { AnalyticsClient } from '@algolia/client-analytics';
import {
  createAnalyticsClient,
  REGIONS as analyticsRegions,
} from '@algolia/client-analytics/src/analyticsClient';
import type { Region as AnalyticsRegion } from '@algolia/client-analytics/src/analyticsClient';
import type {
  ClientOptions,
  CreateClientOptions,
} from '@algolia/client-common';
import type { PersonalizationClient } from '@algolia/client-personalization';
import type { Region as PersonalizationRegion } from '@algolia/client-personalization/src/personalizationClient';
import {
  createPersonalizationClient,
  REGIONS as personalizationRegions,
} from '@algolia/client-personalization/src/personalizationClient';
import {
  createSearchClient,
  apiClientVersion as searchClientVersion,
} from '@algolia/client-search/src/searchClient';
import type { RecommendClient } from '@algolia/recommend';
import { createRecommendClient } from '@algolia/recommend/src/recommendClient';
import { createXhrRequester } from '@algolia/requester-browser-xhr';
import { createHttpRequester } from '@algolia/requester-node-http';

import type {
  InitClientOptions,
  InitClientRegion,
  GenerateSecuredApiKeyOptions,
  GetSecuredApiKeyRemainingValidityOptions,
} from './models';

export * from './models';

export const apiClientVersion = searchClientVersion;

/**
 * The client type.
 */
export type Algoliasearch = ReturnType<typeof algoliasearch>;

// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
export function algoliasearch(
  appId: string,
  apiKey: string,
  options?: ClientOptions
) {
  if (!appId || typeof appId !== 'string') {
    throw new Error('`appId` is missing.');
  }

  if (!apiKey || typeof apiKey !== 'string') {
    throw new Error('`apiKey` is missing.');
  }