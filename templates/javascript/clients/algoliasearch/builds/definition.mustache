// {{{generationBanner}}}

import type { ClientOptions, RequestOptions } from '@algolia/client-common';

{{#dependencies}}
import { {{{dependencyName}}}Client } from '{{{dependencyPackage}}}';
import type { {{#lambda.titlecase}}{{{dependencyName}}}{{/lambda.titlecase}}Client } from '{{{dependencyPackage}}}';
{{/dependencies}}

import type { PartialUpdateObjectsOptions, SaveObjectsOptions } from '@algolia/client-search';
import type { PushTaskRecords, WatchResponse } from '@algolia/ingestion';

import type {
  InitClientOptions,
  {{#dependencies}}
  {{#dependencyHasRegionalHosts}}
  {{#lambda.titlecase}}{{{dependencyName}}}Region{{/lambda.titlecase}},
  {{#lambda.titlecase}}{{{dependencyName}}}RegionOptions{{/lambda.titlecase}},
  {{/dependencyHasRegionalHosts}}
  {{/dependencies}}
} from './models';

export * from './models';

export type Algoliasearch = SearchClient & {
  {{#dependencies}}
  {{#withInitMethod}}
  init{{#lambda.titlecase}}{{{dependencyName}}}{{/lambda.titlecase}}: (initOptions{{^dependencyHasRegionalHosts}}?{{/dependencyHasRegionalHosts}}: InitClientOptions {{#dependencyHasRegionalHosts}}& {{#lambda.titlecase}}{{{dependencyName}}}RegionOptions{{/lambda.titlecase}}{{/dependencyHasRegionalHosts}}) => {{#lambda.titlecase}}{{{dependencyName}}}{{/lambda.titlecase}}Client;
  {{/withInitMethod}}
  {{/dependencies}}

  // Bridge helpers to expose along with the search endpoints at the root of the API client

  /**
   * Helper: Similar to the `saveObjects` method but requires a Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/) to be created first, in order to transform records before indexing them to Algolia. The `region` must've been passed to the client instantiation method.
   *
   * @summary Save objects to an Algolia index by leveraging the Transformation pipeline setup in the Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/).
   * @param saveObjects - The `saveObjects` object.
   * @param saveObjects.indexName - The `indexName` to save `objects` in.
   * @param saveObjects.objects - The array of `objects` to store in the given Algolia `indexName`.
   * @param saveObjects.batchSize - The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.
   * @param saveObjects.waitForTasks - Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.
   * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `batch` method and merged with the transporter requestOptions.
   */
  saveObjectsWithTransformation: (options: SaveObjectsOptions, requestOptions?: RequestOptions) => Promise<WatchResponse>;

  /**
   * Helper: Similar to the `partialUpdateObjects` method but requires a Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/) to be created first, in order to transform records before indexing them to Algolia. The `region` must've been passed to the client instantiation method.
   *
   * @summary Save objects to an Algolia index by leveraging the Transformation pipeline setup in the Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/).
   * @param partialUpdateObjects - The `partialUpdateObjects` object.
   * @param partialUpdateObjects.indexName - The `indexName` to update `objects` in.
   * @param partialUpdateObjects.objects - The array of `objects` to update in the given Algolia `indexName`.
   * @param partialUpdateObjects.createIfNotExists - To be provided if non-existing objects are passed, otherwise, the call will fail..
   * @param partialUpdateObjects.batchSize - The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.
   * @param partialUpdateObjects.waitForTasks - Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.
   * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.
   */
  partialUpdateObjectsWithTransformation: (options: PartialUpdateObjectsOptions, requestOptions?: RequestOptions) => Promise<WatchResponse>;
};

export type TransformationOptions = {
  // When provided, a second transporter will be created in order to leverage the `*WithTransformation` methods exposed by the Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/).
  transformation?: {
    // The region of your Algolia application ID, used to target the correct hosts of the transformation service.
    region: IngestionRegion;
  };
};

export function algoliasearch(
  appId: string,
  apiKey: string,
  options?: ClientOptions & TransformationOptions,
): Algoliasearch {
  if (!appId || typeof appId !== 'string') {
    throw new Error('`appId` is missing.');
  }

  if (!apiKey || typeof apiKey !== 'string') {
    throw new Error('`apiKey` is missing.');
  }

  const client = searchClient(appId, apiKey, options);

  let ingestionTransporter: IngestionClient | undefined;

  if (options?.transformation) {
    if (!options.transformation.region) {
      throw new Error('`region` must be provided when leveraging the transformation pipeline');
    }

    ingestionTransporter = ingestionClient(appId, apiKey, options.transformation.region, options);
  }

  return {
    ...client,

    async saveObjectsWithTransformation({ objects, waitForTasks }, requestOptions): Promise<WatchResponse> {
      if (!ingestionTransporter) {
        throw new Error('`transformation.region` must be provided at client instantiation before calling this method.');
      }

      if (!options?.transformation?.region) {
        throw new Error('`region` must be provided when leveraging the transformation pipeline');
      }

      return ingestionTransporter?.push(
        {
          watch: waitForTasks,
          pushTaskPayload: {
            action: 'addObject',
            records: objects as PushTaskRecords[],
          },
        },
        requestOptions,
      );
    },

    async partialUpdateObjectsWithTransformation(
      { objects, createIfNotExists, waitForTasks },
      requestOptions,
    ): Promise<WatchResponse> {
      if (!ingestionTransporter) {
        throw new Error('`transformation.region` must be provided at client instantiation before calling this method.');
      }

      if (!options?.transformation?.region) {
        throw new Error('`region` must be provided when leveraging the transformation pipeline');
      }

      return ingestionTransporter?.push(
        {
          watch: waitForTasks,
          pushTaskPayload: {
            action: createIfNotExists ? 'partialUpdateObject' : 'partialUpdateObjectNoCreate',
            records: objects as PushTaskRecords[],
          },
        },
        requestOptions,
      );
    },

    /**
     * Get the value of the `algoliaAgent`, used by our libraries internally and telemetry system.
     */
    get _ua(): string {
      return client.transporter.algoliaAgent.value;
    },

    {{#dependencies}}
    {{#withInitMethod}}
    init{{#lambda.titlecase}}{{{dependencyName}}}{{/lambda.titlecase}}: (initOptions: InitClientOptions {{#dependencyHasRegionalHosts}}& {{#lambda.titlecase}}{{{dependencyName}}}RegionOptions{{/lambda.titlecase}}{{/dependencyHasRegionalHosts}}{{^dependencyHasRegionalHosts}}={}{{/dependencyHasRegionalHosts}}): {{#lambda.titlecase}}{{{dependencyName}}}{{/lambda.titlecase}}Client => {
      return {{{dependencyName}}}Client(initOptions.appId || appId, initOptions.apiKey || apiKey, {{#dependencyHasRegionalHosts}}initOptions.region,{{/dependencyHasRegionalHosts}}initOptions.options);
    },
    {{/withInitMethod}}

    {{/dependencies}}
  }
}