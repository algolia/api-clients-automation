import {
  createAuth,
  createTransporter,
  createNullLogger,
  getAlgoliaAgent,
  shuffle,
  {{#isSearchClient}}
  ApiError,
  serializeQueryParameters,
  createIterablePromise,
  {{/isSearchClient}}
  {{#isAlgoliaCompositionClient}}
  createIterablePromise,
  {{/isAlgoliaCompositionClient}}
} from '@algolia/client-common';
import type {
  CreateClientOptions,
  Headers,
  Host,
  QueryParameters,
  Request,
  RequestOptions,
  {{#isSearchClient}}
  IterableOptions,
  {{/isSearchClient}}
} from '@algolia/client-common';

{{#imports}}
import type { {{classname}} } from '{{filename}}';
{{/imports}}

{{#operations}}
import type {
  {{#isSearchClient}}
    BrowseOptions,
    ChunkedBatchOptions,
    DeleteObjectsOptions,
    PartialUpdateObjectsOptions,
    ReplaceAllObjectsOptions,
    SaveObjectsOptions,
    WaitForApiKeyOptions,
    WaitForAppTaskOptions,
    WaitForTaskOptions,
  {{/isSearchClient}}
  {{#isAlgoliaCompositionClient}}
    WaitForCompositionTaskOptions,
  {{/isAlgoliaCompositionClient}}
  {{#operation}}
    {{#vendorExtensions}}
      {{#x-create-wrapping-object}}
        {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props,
      {{/x-create-wrapping-object}}
      {{#x-legacy-signature}}
        LegacySearchMethodProps,
      {{/x-legacy-signature}}
      {{#x-legacy-signature-recommend}}
        LegacyGetRecommendationsParams,
      {{/x-legacy-signature-recommend}}
    {{/vendorExtensions}}
  {{/operation}}
} from '../model/clientMethodProps';
{{/operations}}

{{#isSearchClient}}
  import type { BatchRequest } from '../model/batchRequest';
{{/isSearchClient}}

{{#isAlgoliasearchClient}}
  import type { SearchResponse } from '../model/searchResponse';
  import type { SearchForFacetValuesResponse } from '../model/searchForFacetValuesResponse';
{{/isAlgoliasearchClient}}

{{#isIngestionClient}}
  import type { OnDemandTrigger } from '../model/onDemandTrigger';
  import type { ScheduleTrigger } from '../model/scheduleTrigger';
  import type { SubscriptionTrigger } from '../model/subscriptionTrigger';
  import type { TaskCreateTrigger } from '../model/taskCreateTrigger';
  import type { Trigger } from '../model/trigger';
{{/isIngestionClient}}