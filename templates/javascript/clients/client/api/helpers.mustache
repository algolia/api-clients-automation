/**
 * Helper: Wait for a task to be published (completed) for a given `indexName` and `taskID`.
 *
 * @summary Helper method that waits for a task to be published (completed).
 * @param waitForTaskOptions - The `waitForTaskOptions` object.
 * @param waitForTaskOptions.indexName - The `indexName` where the operation was performed.
 * @param waitForTaskOptions.taskID - The `taskID` returned in the method response.
 * @param waitForTaskOptions.maxRetries - The maximum number of retries. 50 by default.
 * @param waitForTaskOptions.timeout - The function to decide how long to wait between retries.
 * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.
 */
waitForTask(
  {
    indexName,
    taskID,
    maxRetries = 50,
    timeout = (retryCount: number): number =>
      Math.min(retryCount * 200, 5000),
  }: WaitForTaskOptions,
  requestOptions?: RequestOptions
): Promise<GetTaskResponse> {
  let retryCount = 0;

  return createIterablePromise({
    func: () => this.getTask({ indexName, taskID }, requestOptions),
    validate: (response) => response.status === 'published',
    aggregator: () => (retryCount += 1),
    error: {
      validate: () => retryCount >= maxRetries,
      message: () =>
        `The maximum number of retries exceeded. (${retryCount}/${maxRetries})`,
    },
    timeout: () => timeout(retryCount),
  });
},

/**
 * Helper: Wait for an application-level task to complete for a given `taskID`.
 *
 * @summary Helper method that waits for a task to be published (completed).
 * @param waitForAppTaskOptions - The `waitForTaskOptions` object.
 * @param waitForAppTaskOptions.taskID - The `taskID` returned in the method response.
 * @param waitForAppTaskOptions.maxRetries - The maximum number of retries. 50 by default.
 * @param waitForAppTaskOptions.timeout - The function to decide how long to wait between retries.
 * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.
 */
waitForAppTask(
  {
    taskID,
    maxRetries = 50,
    timeout = (retryCount: number): number =>
      Math.min(retryCount * 200, 5000),
  }: WaitForAppTaskOptions,
  requestOptions?: RequestOptions
): Promise<GetTaskResponse> {
  let retryCount = 0;

  return createIterablePromise({
    func: () => this.getAppTask({ taskID }, requestOptions),
    validate: (response) => response.status === 'published',
    aggregator: () => (retryCount += 1),
    error: {
      validate: () => retryCount >= maxRetries,
      message: () =>
        `The maximum number of retries exceeded. (${retryCount}/${maxRetries})`,
    },
    timeout: () => timeout(retryCount),
  });
},

/**
 * Helper: Wait for an API key to be added, updated or deleted based on a given `operation`.
 *
 * @summary Helper method that waits for an API key task to be processed.
 * @param waitForApiKeyOptions - The `waitForApiKeyOptions` object.
 * @param waitForApiKeyOptions.operation - The `operation` that was done on a `key`.
 * @param waitForApiKeyOptions.key - The `key` that has been added, deleted or updated.
 * @param waitForApiKeyOptions.apiKey - Necessary to know if an `update` operation has been processed, compare fields of the response with it.
 * @param waitForApiKeyOptions.maxRetries - The maximum number of retries. 50 by default.
 * @param waitForApiKeyOptions.timeout - The function to decide how long to wait between retries.
 * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getApikey` method and merged with the transporter requestOptions.
 */
waitForApiKey(
  {
    operation,
    key,
    apiKey,
    maxRetries = 50,
    timeout = (retryCount: number): number =>
      Math.min(retryCount * 200, 5000),
  }: WaitForApiKeyOptions,
  requestOptions?: RequestOptions
): Promise<ApiError | GetApiKeyResponse> {
  let retryCount = 0;
  const baseIteratorOptions: IterableOptions<ApiError | GetApiKeyResponse> = {
    aggregator: () => (retryCount += 1),
    error: {
      validate: () => retryCount >= maxRetries,
      message: () =>
        `The maximum number of retries exceeded. (${retryCount}/${maxRetries})`,
    },
    timeout: () => timeout(retryCount),
  };

  if (operation === 'update') {
    if (!apiKey) {
      throw new Error(
        '`apiKey` is required when waiting for an `update` operation.'
      );
    }

    return createIterablePromise({
      ...baseIteratorOptions,
      func: () => this.getApiKey({ key }, requestOptions),
      validate: (response) => {
        for (const field of Object.keys(apiKey)) {
          const value = apiKey[field as keyof ApiKey];
          const resValue = response[field as keyof ApiKey];
          if (Array.isArray(value) && Array.isArray(resValue)) {
            if (
              value.length !== resValue.length ||
              value.some((v, index) => v !== resValue[index])
            ) {
              return false;
            }
          } else if (value !== resValue) {
            return false;
          }
        }
        return true;
      },
    });
  }

  return createIterablePromise({
    ...baseIteratorOptions,
    func: () =>
      this.getApiKey({ key }, requestOptions).catch((error) => error),
    validate: (error: ApiError) =>
      operation === 'add' ? error.status !== 404 : error.status === 404,
  });
},

/**
 * Helper: Iterate on the `browse` method of the client to allow aggregating objects of an index.
 *
 * @summary Helper method that iterates on the `browse` method.
 * @param browseObjects - The `browseObjects` object.
 * @param browseObjects.indexName - The index in which to perform the request.
 * @param browseObjects.browseParams - The `browse` parameters.
 * @param browseObjects.validate - The validator function. It receive the resolved return of the API call. By default, stops when there is no `cursor` in the response.
 * @param browseObjects.aggregator - The function that runs right after the API call has been resolved, allows you to do anything with the response before `validate`.
 * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `browse` method and merged with the transporter requestOptions.
 */
browseObjects<T>(
  {
    indexName,
    browseParams,
    ...browseObjectsOptions
  }: BrowseOptions<BrowseResponse<T>> & BrowseProps,
  requestOptions?: RequestOptions
): Promise<BrowseResponse<T>> {
  return createIterablePromise<BrowseResponse<T>>({
    func: (previousResponse) => {
      return this.browse(
        {
          indexName,
          browseParams: {
            cursor: previousResponse ? previousResponse.cursor : undefined,
            ...browseParams,
          },
        },
        requestOptions
      );
    },
    validate: (response) => response.cursor === undefined,
    ...browseObjectsOptions,
  });
},

/**
 * Helper: Iterate on the `searchRules` method of the client to allow aggregating rules of an index.
 *
 * @summary Helper method that iterates on the `searchRules` method.
 * @param browseRules - The `browseRules` object.
 * @param browseRules.indexName - The index in which to perform the request.
 * @param browseRules.searchRulesParams - The `searchRules` method parameters.
 * @param browseRules.validate - The validator function. It receive the resolved return of the API call. By default, stops when there is less hits returned than the number of maximum hits (1000).
 * @param browseRules.aggregator - The function that runs right after the API call has been resolved, allows you to do anything with the response before `validate`.
 * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `searchRules` method and merged with the transporter requestOptions.
 */
browseRules(
  {
    indexName,
    searchRulesParams,
    ...browseRulesOptions
  }: BrowseOptions<SearchRulesResponse> & SearchRulesProps,
  requestOptions?: RequestOptions
): Promise<SearchRulesResponse> {
  const params = {
    hitsPerPage: 1000,
    ...searchRulesParams,
  };

  return createIterablePromise<SearchRulesResponse>({
    func: (previousResponse) => {
      return this.searchRules(
        {
          indexName,
          searchRulesParams: {
            ...params,
            page: previousResponse
              ? previousResponse.page + 1
              : params.page || 0,
          },
        },
        requestOptions
      );
    },
    validate: (response) => response.nbHits < params.hitsPerPage,
    ...browseRulesOptions,
  });
},

/**
 * Helper: Iterate on the `searchSynonyms` method of the client to allow aggregating rules of an index.
 *
 * @summary Helper method that iterates on the `searchSynonyms` method.
 * @param browseSynonyms - The `browseSynonyms` object.
 * @param browseSynonyms.indexName - The index in which to perform the request.
 * @param browseSynonyms.validate - The validator function. It receive the resolved return of the API call. By default, stops when there is less hits returned than the number of maximum hits (1000).
 * @param browseSynonyms.aggregator - The function that runs right after the API call has been resolved, allows you to do anything with the response before `validate`.
 * @param browseSynonyms.searchSynonymsParams - The `searchSynonyms` method parameters.
 * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `searchSynonyms` method and merged with the transporter requestOptions.
 */
browseSynonyms(
  {
    indexName,
    searchSynonymsParams,
    ...browseSynonymsOptions,
  }: BrowseOptions<SearchSynonymsResponse> & SearchSynonymsProps,
  requestOptions?: RequestOptions
): Promise<SearchSynonymsResponse> {
  const params = {
    page: 0,
    ...searchSynonymsParams,
    hitsPerPage: 1000,
  };

  return createIterablePromise<SearchSynonymsResponse>({
    func: (_) => {
      const resp = this.searchSynonyms(
        {
          indexName,
          searchSynonymsParams: {
            ...params,
            page: params.page,
          },
        },
        requestOptions
      );
      params.page += 1;
      return resp;
    },
    validate: (response) => response.nbHits < params.hitsPerPage,
    ...browseSynonymsOptions,
  });
},

/**
 * Helper: calls the `search` method but with certainty that we will only request Algolia records (hits) and not facets.
 * Disclaimer: We don't assert that the parameters you pass to this method only contains `hits` requests to prevent impacting search performances, this helper is purely for typing purposes.
 *
 * @summary Search multiple indices for `hits`.
 * @param searchMethodParams - Query requests and strategies. Results will be received in the same order as the queries.
 * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
 */
searchForHits<T>(
  searchMethodParams: LegacySearchMethodProps | SearchMethodParams,
  requestOptions?: RequestOptions
): Promise<{results: Array<SearchResponse<T>>}> {
  return this.search(searchMethodParams, requestOptions) as Promise<{results: Array<SearchResponse<T>>}>;
},

/**
 * Helper: calls the `search` method but with certainty that we will only request Algolia facets and not records (hits).
 * Disclaimer: We don't assert that the parameters you pass to this method only contains `facets` requests to prevent impacting search performances, this helper is purely for typing purposes.
 *
 * @summary Search multiple indices for `facets`.
 * @param searchMethodParams - Query requests and strategies. Results will be received in the same order as the queries.
 * @param requestOptions - The requestOptions to send along with the query, they will be merged with the transporter requestOptions.
 */
searchForFacets(
  searchMethodParams: LegacySearchMethodProps | SearchMethodParams,
  requestOptions?: RequestOptions
): Promise<{results: Array<SearchForFacetValuesResponse>}> {
  return this.search(searchMethodParams, requestOptions) as Promise<{results: Array<SearchForFacetValuesResponse>}>;
},

/**
 * Helper: Chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `batch` requests.
 *
 * @summary Helper: Chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `batch` requests.
 * @param chunkedBatch - The `chunkedBatch` object.
 * @param chunkedBatch.indexName - The `indexName` to replace `objects` in.
 * @param chunkedBatch.objects - The array of `objects` to store in the given Algolia `indexName`.
 * @param chunkedBatch.action - The `batch` `action` to perform on the given array of `objects`, defaults to `addObject`.
 * @param chunkedBatch.waitForTasks - Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.
 * @param chunkedBatch.batchSize - The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.
 * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.
 */
async chunkedBatch({ indexName, objects, action = 'addObject', waitForTasks, batchSize = 1000 }: ChunkedBatchOptions, requestOptions?: RequestOptions): Promise<Array<BatchResponse>> {
  let requests: Array<BatchRequest> = [];
  const responses: Array<BatchResponse> = [];

  const objectEntries = objects.entries();
  for (const [i, obj] of objectEntries) {
    requests.push({action, body: obj});
    if (requests.length === batchSize || i === objects.length-1) {
      responses.push(await this.batch({indexName, batchWriteParams: {requests}}, requestOptions));
      requests = [];
    }
  }

  if (waitForTasks) {
    for (const resp of responses) {
      await this.waitForTask({indexName, taskID: resp.taskID});
    }
  }

  return responses;
},

/**
 * Helper: Replaces all objects (records) in the given `index_name` with the given `objects`. A temporary index is created during this process in order to backup your data.
 *
 * @summary Helper: Replaces all objects (records) in the given `index_name` with the given `objects`. A temporary index is created during this process in order to backup your data.
 * @param replaceAllObjects - The `replaceAllObjects` object.
 * @param replaceAllObjects.indexName - The `indexName` to replace `objects` in.
 * @param replaceAllObjects.objects - The array of `objects` to store in the given Algolia `indexName`.
 * @param replaceAllObjects.batchSize - The size of the chunk of `objects`. The number of `batch` calls will be equal to `objects.length / batchSize`. Defaults to 1000.
 * @param requestOptions - The requestOptions to send along with the query, they will be forwarded to the `getTask` method and merged with the transporter requestOptions.
 */
async replaceAllObjects(
  { indexName, objects, batchSize }: ReplaceAllObjectsOptions,
  requestOptions?: RequestOptions
): Promise<ReplaceAllObjectsResponse> {
  const randomSuffix = Math.random().toString(36).substring(7);
  const tmpIndexName = `${indexName}_tmp_${randomSuffix}`;

  const copyOperationResponse = await this.operationIndex(
    {
      indexName,
      operationIndexParams: {
        operation: 'copy',
        destination: tmpIndexName,
        scope: ['settings', 'rules', 'synonyms'],
      },
    },
    requestOptions
  );
  await this.waitForTask({
    indexName,
    taskID: copyOperationResponse.taskID,
  });

  const batchResponses = await this.chunkedBatch(
    { indexName: tmpIndexName, objects, waitForTasks: true, batchSize },
    requestOptions
  );

  const moveOperationResponse = await this.operationIndex(
    {
      indexName: tmpIndexName,
      operationIndexParams: { operation: 'move', destination: indexName },
    },
    requestOptions
  );
  await this.waitForTask({
    indexName,
    taskID: moveOperationResponse.taskID,
  });

  return { copyOperationResponse, batchResponses, moveOperationResponse };
},