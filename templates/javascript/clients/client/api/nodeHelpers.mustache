/**
 * Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.
 *
 * @summary Helper: Generates a secured API key based on the given `parentApiKey` and given `restrictions`.
 * @param generateSecuredApiKey - The `generateSecuredApiKey` object.
 * @param generateSecuredApiKey.parentApiKey - The base API key from which to generate the new secured one.
 * @param generateSecuredApiKey.restrictions - A set of properties defining the restrictions of the secured API key.
 */
generateSecuredApiKey({
  parentApiKey,
  restrictions = {},
}: GenerateSecuredApiKeyOptions): string {
  const queryParameters = serializeQueryParameters(restrictions);
  return Buffer.from(
    createHmac('sha256', parentApiKey)
      .update(queryParameters)
      .digest('hex') + queryParameters
  ).toString('base64');
},

/**
 * Helper: Retrieves the remaining validity of the previous generated `secured_api_key`, the `ValidUntil` parameter must have been provided.
 *
 * @summary Helper: Retrieves the remaining validity of the previous generated `secured_api_key`, the `ValidUntil` parameter must have been provided.
 * @param getSecuredApiKeyRemainingValidity - The `getSecuredApiKeyRemainingValidity` object.
 * @param getSecuredApiKeyRemainingValidity.securedApiKey - The secured API key generated with the `generateSecuredApiKey` method.
 */
getSecuredApiKeyRemainingValidity({
  securedApiKey,
}: GetSecuredApiKeyRemainingValidityOptions): number {
  const decodedString = Buffer.from(securedApiKey, 'base64').toString(
    'ascii'
  );
  const regex = /validUntil=(\d+)/;
  const match = decodedString.match(regex);

  if (match === null) {
    throw new Error('validUntil not found in given secured api key.');
  }

  return parseInt(match[1], 10) - Math.round(new Date().getTime() / 1000);
},
