// {{{generationBanner}}}

{{#apiInfo.apis.0}}

{{#imports}}
import { {{classname}} } from '{{filename}}';
{{/imports}}

{{! Imports for the legacy search method signature }}
{{#operations}}{{#operation}}{{#vendorExtensions.x-legacy-signature}}{{> client/api/operation/legacySearchCompatible/imports}}{{/vendorExtensions.x-legacy-signature}}{{/operation}}{{/operations}}

{{! Imports for the helpers method of the search client }}
{{#isSearchClient}}import type { CreateIterablePromise } from '{{{npmNamespace}}}/client-common';{{/isSearchClient}}

{{#operations}}
{{#operation}}

{{#vendorExtensions}}
{{#x-create-wrapping-object}}
/**
 * Properties for the `{{nickname}}` method.
 */
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
{{/x-create-wrapping-object}}

{{#x-legacy-signature}}{{> client/api/operation/legacySearchCompatible/model}}{{/x-legacy-signature}}

{{/vendorExtensions}}

{{/operation}}
{{/operations}}

{{#isSearchClient}}
/**
 * The `browseObjects`, `browseRules`, `browseSynonyms` options.
 */
export type BrowseOptions<T> = Partial<
  Pick<CreateIterablePromise<T>, 'validate'>
> &
  Required<Pick<CreateIterablePromise<T>, 'aggregator'>>;

type WaitForOptions = Partial<{
  /**
   * The maximum number of retries. 50 by default.
   */
  maxRetries: number;

  /**
   * The function to decide how long to wait between retries.
   */
  timeout: (retryCount: number) => number;
}>;

export type WaitForTaskOptions = WaitForOptions & {
  /**
   * The `indexName` where the operation was performed.
   */
  indexName: string;
  /**
   * The `taskID` returned by the method response.
   */
  taskID: number;
};

export type WaitForApiKeyOptions = WaitForOptions & {
  /**
   * The API Key.
   */
  key: string;
} & (
    | {
        /**
         * The operation that has been performed, used to compute the stop condition.
         */
        operation: 'add' | 'delete';
        apiKey?: never;
      }
    | {
        /**
         * The operation that has been performed, used to compute the stop condition.
         */
        operation: 'update';
        /**
         * The updated fields, used to compute the stop condition.
         */
        apiKey: Partial<ApiKey>;
      }
  );

export type GenerateSecuredApiKeyOptions = {
  /**
   * The base API key from which to generate the new secured one.
   */
  parentApiKey: string;

  /**
   * A set of properties defining the restrictions of the secured API key.
   */
  restrictions?: SecuredApiKeyRestrictions;
}

export type GetSecuredApiKeyRemainingValidityOptions = {
  /**
   * The secured API key generated with the `generateSecuredApiKey` method.
   */
  securedApiKey: string;
}

export type SecuredApiKeyRestrictions = {
  /**
   * A Unix timestamp used to define the expiration date of the API key.
   */
  validUntil?: number;

  /**
   * List of index names that can be queried.
   */
  restrictIndices?: string[] | string;

  /**
   * IPv4 network allowed to use the generated key. This is used for more protection against API key leaking and reuse.
   */
  restrictSources?: string;

  /**
   * Specify a user identifier. This is often used with rate limits.
   */
  userToken?: string;

  searchParams?: SearchParamsObject;
};
{{/isSearchClient}}

{{/apiInfo.apis.0}}