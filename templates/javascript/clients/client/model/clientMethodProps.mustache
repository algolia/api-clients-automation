// {{{generationBanner}}}

{{#apiInfo.apis.0}}

{{#imports}}
import type { {{classname}} } from '{{filename}}';
{{/imports}}

{{! Imports for the legacy search method signature }}
{{#operations}}
  {{#operation}}{{#vendorExtensions.x-legacy-signature}}{{> client/api/operation/legacySearchCompatible/imports}}{{/vendorExtensions.x-legacy-signature}}{{/operation}}
  {{#operation}}{{#vendorExtensions.x-legacy-signature-recommend}}{{> client/api/operation/legacyGetRecommendationsCompatible/imports}}{{/vendorExtensions.x-legacy-signature-recommend}}{{/operation}}
{{/operations}}

{{! Imports for the helpers method of the search client }}
{{#isSearchClient}}
import type { CreateIterablePromise } from '@algolia/client-common';
{{/isSearchClient}}

{{#operations}}
{{#operation}}

{{#vendorExtensions}}
{{#x-create-wrapping-object}}
/**
 * Properties for the `{{nickname}}` method.
 */
export type {{#lambda.titlecase}}{{nickname}}{{/lambda.titlecase}}Props = {
  {{#allParams}}
    {{#description}}
    /**
    * {{{description}}}
    */
    {{/description}}
    {{paramName}}{{^required}}?{{/required}}: {{{dataType}}};
  {{/allParams}}
}
{{/x-create-wrapping-object}}

{{#x-legacy-signature}}{{> client/api/operation/legacySearchCompatible/model}}{{/x-legacy-signature}}
{{#x-legacy-signature-recommend}}{{> client/api/operation/legacyGetRecommendationsCompatible/model}}{{/x-legacy-signature-recommend}}

{{/vendorExtensions}}

{{/operation}}
{{/operations}}

{{#isSearchClient}}
{{^isAlgoliasearchClient}}
/**
 * The `browseObjects`, `browseRules`, `browseSynonyms` options.
 */
export type BrowseOptions<T> = Partial<
  Pick<CreateIterablePromise<T>, 'validate'>
> &
  Required<Pick<CreateIterablePromise<T>, 'aggregator'>>;

type WaitForOptions = Partial<{
  /**
   * The maximum number of retries. 50 by default.
   */
  maxRetries: number;

  /**
   * The function to decide how long to wait between retries.
   */
  timeout: (retryCount: number) => number;
}>;

export type WaitForAppTaskOptions = WaitForOptions & {
  /**
   * The `taskID` returned by the method response.
   */
  taskID: number;
};

export type WaitForTaskOptions = WaitForAppTaskOptions & {
  /**
   * The `indexName` where the operation was performed.
   */
  indexName: string;
};

export type WaitForApiKeyOptions = WaitForOptions & {
  /**
   * The API Key.
   */
  key: string;
} & (
    | {
        /**
         * The operation that has been performed, used to compute the stop condition.
         */
        operation: Extract<ApiKeyOperation, 'add' | 'delete'>;
        apiKey?: never;
      }
    | {
        /**
         * The operation that has been performed, used to compute the stop condition.
         */
        operation: Extract<ApiKeyOperation, 'update'>;
        /**
         * The updated fields, used to compute the stop condition.
         */
        apiKey: Partial<ApiKey>;
      }
  );

{{#isSearchClient}}
export type GenerateSecuredApiKeyOptions = {
  /**
   * The base API key from which to generate the new secured one.
   */
  parentApiKey: string;

  /**
   * A set of properties defining the restrictions of the secured API key.
   */
  restrictions?: SecuredApiKeyRestrictions;
}

export type GetSecuredApiKeyRemainingValidityOptions = {
  /**
   * The secured API key generated with the `generateSecuredApiKey` method.
   */
  securedApiKey: string;
}

export type SearchClientNodeHelpers = {
  generateSecuredApiKey: (opts: GenerateSecuredApiKeyOptions) => string;
  getSecuredApiKeyRemainingValidity: (opts: GetSecuredApiKeyRemainingValidityOptions) => number;
}
{{/isSearchClient}}

export type DeleteObjectsOptions = Pick<ChunkedBatchOptions, 'indexName' | 'waitForTasks' | 'batchSize'> & {
  /**
   * The objectIDs to delete.
   */
  objectIDs: string[];
};

export type PartialUpdateObjectsOptions = Pick<
  ChunkedBatchOptions,
  'indexName' | 'objects' | 'waitForTasks' | 'batchSize'
> & {
  /**
   *To be provided if non-existing objects are passed, otherwise, the call will fail.
   */
  createIfNotExists?: boolean;
};

export type SaveObjectsOptions = Pick<
  ChunkedBatchOptions,
  'indexName' | 'objects' | 'waitForTasks' | 'batchSize'
>;

export type ChunkedBatchOptions = ReplaceAllObjectsOptions & {
  /**
   * The `batch` `action` to perform on the given array of `objects`, defaults to `addObject`.
   */
  action?: Action;

  /**
   * Whether or not we should wait until every `batch` tasks has been processed, this operation may slow the total execution time of this method but is more reliable.
   */
  waitForTasks?: boolean;
}

export type ReplaceAllObjectsOptions = {
  /**
   * The `indexName` to replace `objects` in.
   */
  indexName: string;

  /**
   * The array of `objects` to store in the given Algolia `indexName`.
   */
  objects: Array<Record<string, unknown>>;

  /**
   * The size of the chunk of `objects`. The number of `batch` calls will be equal to `length(objects) / batchSize`. Defaults to 1000.
   */
  batchSize?: number;
}
{{/isAlgoliasearchClient}}
{{/isSearchClient}}
{{#isCompositionClient}}
export type WaitForCompositionTaskOptions = {
  /**
   * The maximum number of retries. 50 by default.
   */
  maxRetries?: number;

  /**
   * The function to decide how long to wait between retries.
   */
  timeout?: (retryCount: number) => number;

  /**
   * The `taskID` returned by the method response.
   */

  taskID: number;
  /**
   * The `compositionID` where the operation was performed.
   */
  compositionID: string;
};
{{/isCompositionClient}}

{{/apiInfo.apis.0}}