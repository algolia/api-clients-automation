package algoliasearch.requests

import algoliasearch.EchoInterceptor
import algoliasearch.api.{{client}}
import algoliasearch.config.*
import algoliasearch.{{import}}.*
import org.json4s.*
import org.json4s.native.JsonParser.*
import org.scalatest.funsuite.AnyFunSuite
{{#hasE2E}}
import io.github.cdimascio.dotenv.Dotenv
import org.skyscreamer.jsonassert.JSONCompare.compareJSON
import org.skyscreamer.jsonassert.JSONCompareMode
import org.json4s.native.Serialization
import org.json4s.native.Serialization.write
{{/hasE2E}}

import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContextExecutor}

class {{clientPrefix}}Test extends AnyFunSuite {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = org.json4s.DefaultFormats

  def testClient(): ({{client}}, EchoInterceptor) = {
    val echo = EchoInterceptor()
    (
      {{client}}(
        appId = "appId",
        apiKey = "apiKey",
        {{#hasRegionalHost}}
        region = {{#fallbackToAliasHost}}Some("{{defaultRegion}}"){{/fallbackToAliasHost}}{{^fallbackToAliasHost}}"{{defaultRegion}}"{{/fallbackToAliasHost}},
        {{/hasRegionalHost}}
        clientOptions = ClientOptions
          .builder()
          .withRequesterConfig(requester => requester.withInterceptor(echo))
          .build()
      ),
      echo
    )
  }

  {{#hasE2E}}
  def testE2EClient(): {{client}} = {
    {{#hasRegionalHost}}
    val region = {{#fallbackToAliasHost}}Some("{{defaultRegion}}"){{/fallbackToAliasHost}}{{^fallbackToAliasHost}}"{{defaultRegion}}"{{/fallbackToAliasHost}}
    {{/hasRegionalHost}}
    if (System.getenv("CI") == "true") {
      {{client}}(
        appId = System.getenv("ALGOLIA_APPLICATION_ID"),
        apiKey = System.getenv("{{e2eApiKey}}"){{#hasRegionalHost}},
        region = region{{/hasRegionalHost}}
      )
    } else {
      val dotenv = Dotenv.configure.directory("../../").load
      {{client}}(
        appId = dotenv.get("ALGOLIA_APPLICATION_ID"),
        apiKey = dotenv.get("{{e2eApiKey}}"){{#hasRegionalHost}},
        region = region{{/hasRegionalHost}}
      )
    }
  }
  {{/hasE2E}}

  {{#blocksRequests}}
  {{#tests}}
  
  test("{{{testName}}}") {
    val (client, echo) = testClient()
    val future = client.{{method}}{{#isCustomRequest}}[JObject]{{/isCustomRequest}}(
    {{#parametersWithDataType}}
    {{> tests/request_param}}{{^-last}},{{/-last}}
    {{/parametersWithDataType}}    
    {{#hasRequestOptions}}
    , requestOptions = Some(RequestOptions.builder()
    {{#requestOptions.queryParameters.parametersWithDataType}}
      .withQueryParameter("{{{key}}}", {{> tests/requests/requestOptionsParams}})
    {{/requestOptions.queryParameters.parametersWithDataType}}
    {{#requestOptions.headers.parametersWithDataType}}
      .withHeader("{{{key}}}", "{{{value}}}")
    {{/requestOptions.headers.parametersWithDataType}}
      .build())
    {{/hasRequestOptions}}
    )

    {{#request}}
    Await.ready(future, Duration.Inf)
    val res = echo.lastResponse.get

    assert(res.path == "{{{path}}}")
    assert(res.method == "{{{method}}}")
    {{#body}}
    val expectedBody = parse("""{{{body}}}""")
    val actualBody = parse(res.body.get)
    assert(actualBody == expectedBody)
    {{/body}}
    {{^body}}
    {{#assertNullBody}}
    assert(res.body.isEmpty)
    {{/assertNullBody}}
    {{^assertNullBody}}
    assert(res.body.contains("{}"))
    {{/assertNullBody}}
    {{/body}}
    {{#queryParameters}}
    val expectedQuery = parse("""{{{queryParameters}}}""").asInstanceOf[JObject].obj.toMap
    val actualQuery = res.queryParameters
    assert(actualQuery.size == expectedQuery.size)
    for ((k, v) <- actualQuery) {
      assert(expectedQuery.contains(k))
      assert(expectedQuery(k).values == v)
    }
    {{/queryParameters}}
    {{#headers}}
    val expectedHeaders = parse("""{{{headers}}}""").asInstanceOf[JObject].obj.toMap
    val actualHeaders = res.headers
    for ((k, v) <- expectedHeaders) {
      assert(actualHeaders.contains(k))
      assert(actualHeaders(k) == v.asInstanceOf[JString].s)
    }
    {{/headers}}
    {{/request}}
    {{#response}}
    val e2eClient = testE2EClient()
    val e2eFuture = e2eClient.{{method}}{{#isCustomRequest}}[JObject]{{/isCustomRequest}}(
    {{#parametersWithDataType}}
    {{> tests/request_param}}{{^-last}},{{/-last}}
    {{/parametersWithDataType}}    
    {{#hasRequestOptions}}
    , requestOptions = Some(RequestOptions.builder()
    {{#requestOptions.queryParameters.parametersWithDataType}}
      .withQueryParameter("{{{key}}}", {{> tests/requests/requestOptionsParams}})
    {{/requestOptions.queryParameters.parametersWithDataType}}
    {{#requestOptions.headers.parametersWithDataType}}
      .withHeader("{{{key}}}", "{{{value}}}")
    {{/requestOptions.headers.parametersWithDataType}}
      .build())
    {{/hasRequestOptions}}
    )

    val response = Await.result(e2eFuture, Duration.Inf)
    {{#body}}
    compareJSON("""{{{body}}}""", write(response), JSONCompareMode.LENIENT)
    {{/body}}
    {{/response}}
  }
  
  {{/tests}}
  {{/blocksRequests}}
}