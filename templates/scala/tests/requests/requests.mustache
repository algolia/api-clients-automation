// {{generationBanner}}
package algoliasearch.requests

import algoliasearch.EchoInterceptor
import algoliasearch.api.{{client}}
import algoliasearch.config.*
import algoliasearch.{{import}}.*
import org.json4s.*
import org.json4s.native.JsonParser.*
import org.scalatest.funsuite.AnyFunSuite

import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContextExecutor}

class {{clientPrefix}}Test extends AnyFunSuite {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = org.json4s.DefaultFormats

  def testClient(): ({{client}}, EchoInterceptor) = {
    val echo = EchoInterceptor()
    (
      {{client}}(
        appId = "appId",
        apiKey = "apiKey",
        {{#hasRegionalHost}}
        region = {{#fallbackToAliasHost}}Some("{{defaultRegion}}"){{/fallbackToAliasHost}}{{^fallbackToAliasHost}}"{{defaultRegion}}"{{/fallbackToAliasHost}},
        {{/hasRegionalHost}}
        clientOptions = ClientOptions
          .builder()
          .withRequesterConfig(requester => requester.withInterceptor(echo))
          .build()
      ),
      echo
    )
  }

  {{#blocksRequests}}
  {{#tests}}
  
  test("{{{testName}}}{{testIndex}}") {
    val (client, echo) = testClient()
    val future = {{> tests/method}}

    {{#request}}
    Await.ready(future, Duration.Inf)
    val res = echo.lastResponse.get

    assert(res.path == "{{{path}}}")
    assert(res.method == "{{{method}}}")
    {{#body}}
    val expectedBody = parse("""{{{body}}}""")
    val actualBody = parse(res.body.get)
    assert(actualBody == expectedBody)
    {{/body}}
    {{^body}}
    {{#assertNullBody}}
    assert(res.body.isEmpty)
    {{/assertNullBody}}
    {{^assertNullBody}}
    assert(res.body.contains("{}"))
    {{/assertNullBody}}
    {{/body}}
    {{#queryParameters}}
    val expectedQuery = parse("""{{{queryParameters}}}""").asInstanceOf[JObject].obj.toMap
    val actualQuery = res.queryParameters
    assert(actualQuery.size == expectedQuery.size)
    for ((k, v) <- actualQuery) {
      assert(expectedQuery.contains(k))
      assert(expectedQuery(k).values == v)
    }
    {{/queryParameters}}
    {{#headers}}
    val expectedHeaders = parse("""{{{headers}}}""").asInstanceOf[JObject].obj.toMap
    val actualHeaders = res.headers
    for ((k, v) <- expectedHeaders) {
      assert(actualHeaders.contains(k))
      assert(actualHeaders(k) == v.asInstanceOf[JString].s)
    }
    {{/headers}}
    {{/request}}
  }
  
  {{/tests}}
  {{/blocksRequests}}
}