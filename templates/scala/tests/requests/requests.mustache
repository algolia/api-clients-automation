package algoliasearch.methods.requests

import algoliasearch.EchoInterceptor
import algoliasearch.api.{{client}}
import algoliasearch.config.*
import algoliasearch.{{import}}.*
import org.json4s.*
import org.json4s.native.JsonParser.*
import org.scalatest.funsuite.AnyFunSuite

import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContextExecutor}

class {{clientPrefix}}Test extends AnyFunSuite {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = org.json4s.DefaultFormats

  val echo: EchoInterceptor = EchoInterceptor()
  val client: {{client}} = {{client}}(
    appId = "appId",
    apiKey = "apiKey",
    {{#hasRegionalHost}}
    region = {{#fallbackToAliasHost}}Some("{{defaultRegion}}"){{/fallbackToAliasHost}}{{^fallbackToAliasHost}}"{{defaultRegion}}"{{/fallbackToAliasHost}},
    {{/hasRegionalHost}}
    clientOptions = ClientOptions
      .builder()
      .withRequesterConfig(requester => requester.withInterceptor(echo))
      .build()
  )

  {{#blocksRequests}}
  {{#tests}}
  
  test("{{{testName}}}") {
    val future = client.{{method}}{{#isCustomRequest}}[JObject]{{/isCustomRequest}}(
    {{#parametersWithDataType}}
    {{> request_param}}{{^-last}},{{/-last}}
    {{/parametersWithDataType}}    
    {{#hasRequestOptions}}
    , requestOptions = Some(RequestOptions.builder()
    {{#requestOptions.queryParameters.parametersWithDataType}}
      .withQueryParameter("{{{key}}}", {{> requests/requestOptionsParams}})
    {{/requestOptions.queryParameters.parametersWithDataType}}
    {{#requestOptions.headers.parametersWithDataType}}
      .withHeader("{{{key}}}", "{{{value}}}")
    {{/requestOptions.headers.parametersWithDataType}}
      .build())
    {{/hasRequestOptions}}
    )

    {{#request}}
    Await.ready(future, Duration.Inf)
    val res = echo.lastResponse.get

    assert(res.path == "{{{path}}}")
    assert(res.method == "{{{method}}}")
    {{#body}}
    val expectedBody = parse("""{{{body}}}""")
    val actualBody = parse(res.body.get)
    assert(actualBody == expectedBody)
    {{/body}}
    {{^body}}
    {{#assertNullBody}}
    assert(res.body.isEmpty)
    {{/assertNullBody}}
    {{^assertNullBody}}
    assert(Some("{}") == res.body)
    {{/assertNullBody}}
    {{/body}}
    {{/request}}
  }
  
  {{/tests}}
  {{/blocksRequests}}
}
