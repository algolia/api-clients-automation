// {{generationBanner}}
package algoliasearch.client

import algoliasearch.api.{{client}}
import algoliasearch.config.*
import algoliasearch.{EchoInterceptor, assertError}
import algoliasearch.{{import}}.*
import algoliasearch.exception.*
import org.json4s.*
import org.json4s.native.JsonParser.*
import org.json4s.native.Serialization
import org.json4s.native.Serialization.write
import org.scalatest.funsuite.AnyFunSuite

import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContextExecutor}

class {{clientPrefix}}Test extends AnyFunSuite {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = org.json4s.DefaultFormats

  def testClient(appId: String = "appId", apiKey: String = "apiKey"{{#hasRegionalHost}}, region: String = {{#fallbackToAliasHost}}null{{/fallbackToAliasHost}}{{^fallbackToAliasHost}}"{{defaultRegion}}"{{/fallbackToAliasHost}}{{/hasRegionalHost}}): ({{client}}, EchoInterceptor) = {
    val echo = EchoInterceptor()
    (
      {{client}}(
        appId = appId,
        apiKey = apiKey,
        {{#hasRegionalHost}}
        region = {{#fallbackToAliasHost}}Option(region){{/fallbackToAliasHost}}{{^fallbackToAliasHost}}region{{/fallbackToAliasHost}},
        {{/hasRegionalHost}}
        clientOptions = ClientOptions
          .builder()
          .withRequesterConfig(requester => requester.withInterceptor(echo))
          .build()
      ),
      echo
    )
  }

  {{#blocksClient}}
  {{#tests}}
  {{^isHelper}} {{! Helper tests are not supported yet}}

  test("{{{testName}}}") {
    {{#autoCreateClient}}
    val (client, echo) = testClient()
    {{/autoCreateClient}}

    {{#steps}}

    {{#isError}}
    assertError("{{{expectedError}}}") {
      {{#dynamicTemplate}}{{/dynamicTemplate}}
    }
    {{/isError}}
    {{^isError}}
    {{#dynamicTemplate}}{{/dynamicTemplate}}
    {{#match}}
    {{#testUserAgent}}
    val regexp = """{{{match}}}""".r
    val header = echo.lastResponse.get.headers("user-agent")
    assert(header.matches(regexp.regex), s"Expected $header to match the following regex: ${regexp.regex}")
    {{/testUserAgent}}
    {{#testTimeouts}}
    assert(echo.lastResponse.get.connectTimeout == {{{match.parametersWithDataTypeMap.connectTimeout.value}}})
    assert(echo.lastResponse.get.responseTimeout == {{{match.parametersWithDataTypeMap.responseTimeout.value}}})
    {{/testTimeouts}}
    {{#testHost}}
    assert(echo.lastResponse.get.host == "{{{match}}}")
    {{/testHost}}
    {{#testResponse}}
    {{#matchIsJSON}}
    assert(write(res) == "{{#lambda.escapeQuotes}}{{{match.parameters}}}{{/lambda.escapeQuotes}}")
    {{/matchIsJSON}}
    {{^matchIsJSON}}
    assert(res == "{{{match}}}")
    {{/matchIsJSON}}
    {{/testResponse}}
    {{/match}}
    {{/isError}}
    {{/steps}}
  }
  {{/isHelper}}
  {{/tests}}
  {{/blocksClient}}
}
