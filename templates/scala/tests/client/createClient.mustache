{{#useEchoRequester}}
val (client, echo) = testClient(appId = "{{parametersWithDataTypeMap.appId.value}}", apiKey = "{{parametersWithDataTypeMap.apiKey.value}}"{{#hasRegionalHost}}{{#parametersWithDataTypeMap.region}}, region = "{{value}}"{{/parametersWithDataTypeMap.region}}{{/hasRegionalHost}}){{/useEchoRequester}}{{#hasCustomHosts}}
val client = {{client}}(
        appId = "{{parametersWithDataTypeMap.appId.value}}",
        apiKey = "{{parametersWithDataTypeMap.apiKey.value}}",
        {{#hasRegionalHost}}{{#parametersWithDataTypeMap.region}} region = {{#fallbackToAliasHost}}Option({{/fallbackToAliasHost}}"{{value}}"{{#fallbackToAliasHost}}){{/fallbackToAliasHost}},{{/parametersWithDataTypeMap.region}}{{/hasRegionalHost}}
        clientOptions = ClientOptions
          .builder()
          .withHosts(List({{#customHosts}}Host(if (System.getenv("CI") == "true") "localhost" else "host.docker.internal", Set(CallType.Read, CallType.Write), "http", Option({{port}})){{^-last}},{{/-last}}{{/customHosts}}))
          {{#gzipEncoding}}.withCompressionType(CompressionType.Gzip){{/gzipEncoding}}
          .build()
      )
{{/hasCustomHosts}}