// {{generationBanner}}
package algoliasearch.client

import algoliasearch.api.{{client}}
import algoliasearch.config.*
import algoliasearch.{EchoInterceptor, assertError}
import algoliasearch.{{import}}.*
import algoliasearch.exception.*
{{#isSearchClient}}
import algoliasearch.extension.SearchClientExtensions
{{/isSearchClient}}
import org.json4s.*
import org.json4s.native.JsonParser.*
import org.json4s.native.Serialization
import org.json4s.native.Serialization.write
import org.scalatest.funsuite.AnyFunSuite

import java.util.concurrent.TimeUnit
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContextExecutor}

class {{clientPrefix}}BenchmarkTest extends AnyFunSuite {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = JsonSupport.format

  def testClient(appId: String = "appId", apiKey: String = "apiKey"{{#hasRegionalHost}}, region: String = {{#fallbackToAliasHost}}null{{/fallbackToAliasHost}}{{^fallbackToAliasHost}}"{{defaultRegion}}"{{/fallbackToAliasHost}}{{/hasRegionalHost}}): ({{client}}, EchoInterceptor) = {
    val echo = EchoInterceptor()
    (
      {{client}}(
        appId = appId,
        apiKey = apiKey,
        {{#hasRegionalHost}}
        region = {{#fallbackToAliasHost}}Option(region){{/fallbackToAliasHost}}{{^fallbackToAliasHost}}region{{/fallbackToAliasHost}},
        {{/hasRegionalHost}}
        clientOptions = ClientOptions
          .builder()
          .withRequesterConfig(requester => requester.withInterceptor(echo))
          .build()
      ),
      echo
    )
  }

  {{#blocksBenchmark}}
  {{> tests/client/tests}}
  {{/blocksBenchmark}}
}