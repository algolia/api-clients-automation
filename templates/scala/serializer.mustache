class {{classname}}Serializer extends Serializer[{{classname}}] {

{{#vendorExtensions.x-has-unescaped-property}}
  private val renamedFields = Map[String, String](
    {{#vars}}
    {{#vendorExtensions.x-unescaped-name}}
    "{{{.}}}" -> "{{{name}}}"{{^-last}},{{/-last}}
    {{/vendorExtensions.x-unescaped-name}}
    {{/vars}}
  )
{{/vendorExtensions.x-has-unescaped-property}}
  override def deserialize(implicit format: Formats): PartialFunction[(TypeInfo, JValue), {{classname}}] = {
    case (TypeInfo(clazz, _), json) if clazz == classOf[{{classname}}] => json match {
      case jobject: JObject =>
        {{#vendorExtensions.x-has-unescaped-property}}
        // Rename fields from JSON to Scala
        val renamedObject = JObject(
          jobject.obj.map { field =>
            renamedFields.get(field._1).map(JField(_, field._2)).getOrElse(field)
          }
        )
        {{/vendorExtensions.x-has-unescaped-property}}
        val formats = format - this
        val mf = manifest[{{classname}}]
        {{#additionalProperties.isAnyType}}val obj = {{/additionalProperties.isAnyType}}Extraction.extract[{{classname}}]({{#vendorExtensions.x-has-unescaped-property}}renamedObject{{/vendorExtensions.x-has-unescaped-property}}{{^vendorExtensions.x-has-unescaped-property}}jobject{{/vendorExtensions.x-has-unescaped-property}})(formats, mf)

        {{#additionalProperties.isAnyType}}
        val fields = Set({{#vars}}"{{#vendorExtensions.x-unescaped-name}}{{{.}}}{{/vendorExtensions.x-unescaped-name}}{{^vendorExtensions.x-unescaped-name}}{{{name}}}{{/vendorExtensions.x-unescaped-name}}"{{^-last}}, {{/-last}}{{/vars}})
        val additionalProperties = jobject removeField {
          case (name, _) if fields.contains(name) => true
          case _                                  => false
        }
        additionalProperties match {
          case JObject(fieldsList) => obj copy (additionalProperties = Some(fieldsList))
          case _                   => obj
        }
        {{/additionalProperties.isAnyType}}
      case _ => throw new IllegalArgumentException(s"Can't deserialize $json as {{classname}}")
    }
  }

  override def serialize(implicit format: Formats): PartialFunction[Any, JValue] = { case value: {{classname}} =>
    val formats = format - this // remove current serializer from formats to avoid stackoverflow
    {{#vendorExtensions.x-has-unescaped-property}}{{#additionalProperties.isAnyType}}val baseObj = {{/additionalProperties.isAnyType}}{{/vendorExtensions.x-has-unescaped-property}}{{#vendorExtensions.x-has-unescaped-property}}{{^additionalProperties.isAnyType}}val baseObj = {{/additionalProperties.isAnyType}}{{/vendorExtensions.x-has-unescaped-property}}{{#additionalProperties.isAnyType}}{{^vendorExtensions.x-has-unescaped-property}}val baseObj = {{/vendorExtensions.x-has-unescaped-property}}{{/additionalProperties.isAnyType}}Extraction.decompose(value{{#additionalProperties.isAnyType}}.copy(additionalProperties = None){{/additionalProperties.isAnyType}})(formats)
    {{#vendorExtensions.x-has-unescaped-property}}{{#additionalProperties.isAnyType}}val renamedObj = {{/additionalProperties.isAnyType}}baseObj transformField {
      case JField(name, value) if renamedFields.exists(_._2 == name) => (renamedFields.find(_._2 == name).get._1, value)
    }{{/vendorExtensions.x-has-unescaped-property}}{{#additionalProperties.isAnyType}}
    value.additionalProperties match {
      case Some(fields) => {{#vendorExtensions.x-has-unescaped-property}}renamedObj{{/vendorExtensions.x-has-unescaped-property}}{{^vendorExtensions.x-has-unescaped-property}}baseObj{{/vendorExtensions.x-has-unescaped-property}} merge JObject(fields)
      case None         => {{#vendorExtensions.x-has-unescaped-property}}renamedObj{{/vendorExtensions.x-has-unescaped-property}}{{^vendorExtensions.x-has-unescaped-property}}baseObj{{/vendorExtensions.x-has-unescaped-property}}
    }{{/additionalProperties.isAnyType}}
  }
}