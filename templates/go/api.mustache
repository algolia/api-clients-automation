// {{{generationBanner}}}
package {{packageName}}

{{#operations}}
import (
	"bytes"
	"context"
  "encoding/json"
	"io"
	"net/http"
	"net/url"
  "strings"
  {{#isSearchClient}}
  "slices"
  "time"
  "sort"
  "github.com/algolia/algoliasearch-client-go/v4/algolia/errs"
  "crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
  {{/isSearchClient}}

  "github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
  "github.com/algolia/algoliasearch-client-go/v4/algolia/call"
)

type Option struct {
	optionType  string
	name  string
	value string
}

func QueryParamOption(name string, val any) Option {
	return Option{
    optionType:  "query",
		name:  queryParameterToString(name),
		value: queryParameterToString(val),
	}
}

func HeaderParamOption(name string, val any) Option {
	return Option{
    optionType:  "header",
		name:  name,
		value: parameterToString(val),
	}
}

{{#operation}}
  {{#hasParams}}
func (r *{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
  {{#allParams}}
	if v, ok := req["{{#isQueryParam}}{{baseName}}{{/isQueryParam}}{{^isQueryParam}}{{paramName}}{{/isQueryParam}}"]; ok {
		err = json.Unmarshal(v, &r.{{paramName}})
		if err != nil {
      err = json.Unmarshal(b, &r.{{paramName}})
      if err != nil {
			  return fmt.Errorf("cannot unmarshal {{paramName}}: %w", err)
      }
		}
	} {{#isBodyParam}}{{#required}}else {
    err = json.Unmarshal(b, &r.{{paramName}})
    if err != nil {
      return fmt.Errorf("cannot unmarshal body parameter {{paramName}}: %w", err)
    }
  }{{/required}}{{/isBodyParam}}
  {{/allParams}}

  return nil
}

// {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request represents the request with all the parameters for the API call.
type {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request struct {
{{#allParams}}
	{{paramName}} {{^required}}{{^isPathParam}}{{^isFreeFormObject}}{{^isArray}}{{^isMap}}{{^isEnumRef}}*{{/isEnumRef}}{{/isMap}}{{/isArray}}{{/isFreeFormObject}}{{/isPathParam}}{{/required}}{{#required}}{{#isModel}}*{{/isModel}}{{/required}}{{{dataType}}}
{{/allParams}}
}

{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
//New{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request creates an instance of the {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request to be used for the API call.
func (c *APIClient) NewApi{{{nickname}}}Request({{#requiredParams}} {{paramName}} {{^isPathParam}}{{^isFreeFormObject}}{{^isArray}}{{^isMap}}{{^isPrimitiveType}}{{^isEnumRef}}*{{/isEnumRef}}{{/isPrimitiveType}}{{/isMap}}{{/isArray}}{{/isFreeFormObject}}{{/isPathParam}}{{{dataType}}} {{^-last}},{{/-last}}{{/requiredParams}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
	return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request{
		{{#requiredParams}}
		{{paramName}}: {{paramName}},
		{{/requiredParams}}
	}
}

{{#allParams}}
{{^required}}
// With{{#lambda.titlecase}}{{baseName}}{{/lambda.titlecase}} adds the {{paramName}} to the {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request and returns the request for chaining.
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) With{{#lambda.titlecase}}{{baseName}}{{/lambda.titlecase}}({{paramName}} {{^isFreeFormObject}}{{^isArray}}{{^isMap}}{{^isPrimitiveType}}{{^isEnumRef}}*{{/isEnumRef}}{{/isPrimitiveType}}{{/isMap}}{{/isArray}}{{/isFreeFormObject}}{{{dataType}}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
	r.{{paramName}} = {{#isPrimitiveType}}{{^isMap}}&{{/isMap}}{{/isPrimitiveType}}{{paramName}}
	return r
}

{{/required}}
{{/allParams}}
{{/hasParams}}
/*
{{operationId}} Wraps {{nickname}}WithContext using context.Background.
{{> operation_description}}
func (c *APIClient) {{nickname}}({{#hasParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request,{{/hasParams}} opts ...Option) ({{#returnType}}{{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}error) {
  return c.{{nickname}}WithContext(context.Background(), {{#hasParams}}r,{{/hasParams}} opts...)
}

/*
{{operationId}}
{{> operation_description}}
func (c *APIClient) {{nickname}}WithContext(ctx context.Context, {{#hasParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request,{{/hasParams}} opts ...Option) ({{#returnType}}{{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}error) {
	var (
    postBody     any
		{{#returnType}}
		returnValue  {{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}
		{{/returnType}}
	)

  {{#vendorExtensions}}
  requestPath := "{{{path}}}"{{#pathParams}}
  requestPath = strings.ReplaceAll(requestPath, {{=<% %>=}}"{<%baseName%>}"<%={{ }}=%>, {{#x-is-custom-request}}parameterToString(r.{{paramName}}){{/x-is-custom-request}}{{^x-is-custom-request}}url.PathEscape(parameterToString(r.{{paramName}})){{/x-is-custom-request}}){{/pathParams}}
  {{/vendorExtensions}}

	headers := make(map[string]string)
	queryParams := url.Values{}
	{{#allParams}}
	{{#required}}
  {{#isString}}
	if r.{{paramName}} == "" { 
    return {{#returnType}}returnValue, {{/returnType}}reportError("Parameter `{{paramName}}` is required when calling `{{operationId}}`.")
  }{{/isString}}{{#isContainer}}
  if len(r.{{paramName}}) == 0 { 
    return {{#returnType}}returnValue, {{/returnType}}reportError("Parameter `{{paramName}}` is required when calling `{{operationId}}`.")
  }{{/isContainer}}{{#isMap}}
  if len(r.{{paramName}}) == 0 { 
    return {{#returnType}}returnValue, {{/returnType}}reportError("Parameter `{{paramName}}` is required when calling `{{operationId}}`.")
  }{{/isMap}}{{^isPrimitiveType}}{{^isContainer}}{{^isMap}}{{^isEnumRef}}
  if r.{{paramName}} == nil {
	  return {{#returnType}}returnValue, {{/returnType}}reportError("Parameter `{{paramName}}` is required when calling `{{operationId}}`.")
	}{{/isEnumRef}}{{/isMap}}{{/isContainer}}{{/isPrimitiveType}}
	{{#minItems}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) < {{minItems}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have at least {{minItems}} elements")
	}
	{{/minItems}}
	{{#maxItems}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) > {{maxItems}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have less than {{maxItems}} elements")
	}
	{{/maxItems}}
	{{#minLength}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) < {{minLength}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have at least {{minLength}} elements")
	}
	{{/minLength}}
	{{#maxLength}}
	if len({{^isPathParam}}*{{/isPathParam}}r.{{paramName}}) > {{maxLength}} {
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must have less than {{maxLength}} elements")
	}
	{{/maxLength}}
	{{#minimum}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}r.{{paramName}} < {{minimum}} {
	{{/isString}}
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must be greater than {{minimum}}")
	}
	{{/minimum}}
	{{#maximum}}
	{{^isString}}
	if {{^isPathParam}}*{{/isPathParam}}r.{{paramName}} > {{maximum}} {
	{{/isString}}
		return {{#returnType}}returnValue, {{/returnType}}reportError("{{paramName}} must be less than {{maximum}}")
	}
	{{/maximum}}
	{{/required}}
	{{/allParams}}

  {{#vendorExtensions.x-is-custom-request}}
    {{#queryParams}}
      {{^required}}if !utils.IsNilOrEmpty(r.{{paramName}}) { {{/required}}
          for k, v := range r.{{paramName}} {
           queryParams.Set(k, queryParameterToString(v))
          }
      {{^required}} } {{/required}}
    {{/queryParams}}
  {{/vendorExtensions.x-is-custom-request}}
  {{^vendorExtensions.x-is-custom-request}}
	{{#queryParams}}
	{{#required}}
	queryParams.Set("{{baseName}}", queryParameterToString({{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}{{^isEnumRef}}*{{/isEnumRef}}{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}}))
	{{/required}}
  {{^required}}
  if !utils.IsNilOrEmpty(r.{{paramName}}) {
    queryParams.Set("{{baseName}}", queryParameterToString({{^isFreeFormObject}}{{^isArray}}{{^isEnumRef}}*{{/isEnumRef}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}}))
  }
  {{/required}}
	{{/queryParams}}
  {{/vendorExtensions.x-is-custom-request}}
  {{#headerParams}}
	{{#required}}
	headers["{{baseName}}"] = parameterToString({{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}{{^isEnumRef}}*{{/isEnumRef}}{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}})
	{{/required}}
  {{^required}}
  if !utils.IsNilOrEmpty(r.{{paramName}}) {
    headers["{{baseName}}"] = parameterToString({{^isFreeFormObject}}{{^isArray}}{{^isEnumRef}}*{{/isEnumRef}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}})
  }
  {{/required}}
{{/headerParams}}

  // optional params if any
  for _, opt := range opts {
    switch opt.optionType {
      case "query":
        queryParams.Set(opt.name, opt.value)
      case "header":
        headers[opt.name] = opt.value
    }
  }

{{#bodyParams}}
  // body params{{^required}}
  if utils.IsNilOrEmpty(r.{{paramName}}) {
    postBody = "{}"
  } else { {{/required}}
    postBody = r.{{paramName}}{{^required}}
   } {{/required}}
{{/bodyParams}}
	req, err := c.prepareRequest(ctx, requestPath, http.Method{{httpMethod}}, postBody, headers, queryParams)
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}

	res, resBody, err := c.callAPI(req, {{#vendorExtensions}}{{#x-use-read-transporter}}true{{/x-use-read-transporter}}{{^x-use-read-transporter}}false{{/x-use-read-transporter}}{{/vendorExtensions}})
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}
  if res == nil {
    return {{#returnType}}returnValue, {{/returnType}}reportError("res is nil")
  }

	if res.StatusCode >= 300 {
		newErr := &APIError{
      Message: string(resBody),
			Status: res.StatusCode,
		}
		
    var v ErrorBase
    err = c.decode(&v, resBody)
    if err != nil {
      newErr.Message = err.Error()
      return {{#returnType}}returnValue, {{/returnType}}newErr
    }

		return {{#returnType}}returnValue, {{/returnType}}newErr
	}

	{{#returnType}}
	err = c.decode(&returnValue, resBody)
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}reportError("cannot decode result: %w", err)
	}

	{{/returnType}}
	return {{#returnType}}returnValue, {{/returnType}}nil
}

{{/operation}}
{{/operations}}

{{#isSearchClient}}
{{> search_helpers}}
{{/isSearchClient}}