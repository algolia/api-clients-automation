// {{{generationBanner}}}
package {{packageName}}

{{#operations}}
import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"strings"
  {{#isSearchClient}}
  "github.com/algolia/algoliasearch-client-go/v4/algolia/errs"
  "cmp"
  "crypto/hmac"
	"crypto/sha256"
	"encoding/base64"
	"encoding/hex"
  "errors"
  "slices"
  "sort"
  "time"
  {{/isSearchClient}}

  "github.com/algolia/algoliasearch-client-go/v4/algolia/utils"
)

type config struct {
	// -- Request options for API calls
	context      context.Context
	queryParams  url.Values
	headerParams map[string]string

  {{#isSearchClient}}
  // -- ChunkedBatch options
	waitForTasks bool
	batchSize    int

  // -- Partial update options
  createIfNotExists bool

	// -- Iterable options
	maxRetries    int
	timeout       func(int) time.Duration
	aggregator    func(any, error)

  // -- WaitForApiKey options
  apiKey *ApiKey
  {{/isSearchClient}}
}

type RequestOption interface {
	apply(*config)
}

type requestOption func(*config)

func (r requestOption) apply(c *config) {
	r(c)
}

func WithContext(ctx context.Context) requestOption {
	return requestOption(func(c *config) {
		c.context = ctx
	})
}

func WithHeaderParam(key string, value any) requestOption {
	return requestOption(func(c *config) {
		c.headerParams[key] = utils.ParameterToString(value)
	})
}

func WithQueryParam(key string, value any) requestOption {
	return requestOption(func(c *config) {
		c.queryParams.Set(utils.QueryParameterToString(key), utils.QueryParameterToString(value))
	})
}

{{#isSearchClient}}

// --------- ChunkedBatch options ---------

type ChunkedBatchOption interface {
	RequestOption
	chunkedBatch()
}

type chunkedBatchOption func(*config)

var (
	_ ChunkedBatchOption = (*chunkedBatchOption)(nil)
	_ ChunkedBatchOption = (*requestOption)(nil)
)

func (c chunkedBatchOption) apply(conf *config) {
	c(conf)
}

func (c chunkedBatchOption) chunkedBatch() {}

func (r requestOption) chunkedBatch() {}

func WithWaitForTasks(waitForTasks bool) chunkedBatchOption {
	return chunkedBatchOption(func(c *config) {
		c.waitForTasks = waitForTasks
	})
}

func WithBatchSize(batchSize int) chunkedBatchOption {
	return chunkedBatchOption(func(c *config) {
		c.batchSize = batchSize
	})
}

// --------- ChunkedBatch options ---------

type PartialUpdateObjectsOption interface {
	ChunkedBatchOption
	partialUpdateObjects()
}

type partialUpdateObjectsOption func(*config)

var (
	_ PartialUpdateObjectsOption = (*partialUpdateObjectsOption)(nil)
  _ PartialUpdateObjectsOption = (*chunkedBatchOption)(nil)
	_ PartialUpdateObjectsOption = (*requestOption)(nil)
)

func (p partialUpdateObjectsOption) apply(c *config) {
	p(c)
}

func (p partialUpdateObjectsOption) partialUpdateObjects() {}

func (p partialUpdateObjectsOption) chunkedBatch() {}

func (c chunkedBatchOption) partialUpdateObjects() {}

func (r requestOption) partialUpdateObjects() {}

func WithCreateIfNotExists(createIfNotExists bool) partialUpdateObjectsOption {
	return partialUpdateObjectsOption(func(c *config) {
		c.createIfNotExists = createIfNotExists
	})
}

// --------- Iterable options ---------.

type IterableOption interface {
	RequestOption
	iterable()
}

type iterableOption func(*config)

var (
	_ IterableOption = (*iterableOption)(nil)
	_ IterableOption = (*requestOption)(nil)
)

func (i iterableOption) apply(c *config) {
	i(c)
}

func (r requestOption) iterable() {}

func (i iterableOption) iterable() {}

func WithMaxRetries(maxRetries int) iterableOption {
	return iterableOption(func(c *config) {
		c.maxRetries = maxRetries
	})
}

func WithTimeout(timeout func(int) time.Duration) iterableOption {
	return iterableOption(func(c *config) {
		c.timeout = timeout
	})
}

func WithAggregator(aggregator func(any, error)) iterableOption {
	return iterableOption(func(c *config) {
		c.aggregator = aggregator
	})
}

// --------- WaitForKey options ---------.

type WaitForApiKeyOption interface {
	IterableOption
	waitForApiKey()
}

type waitForApiKeyOption func(*config)

var (
  _ WaitForApiKeyOption = (*waitForApiKeyOption)(nil)
	_ WaitForApiKeyOption = (*iterableOption)(nil)
	_ WaitForApiKeyOption = (*requestOption)(nil)
)

func (w waitForApiKeyOption) apply(c *config) {
	w(c)
}

func (w waitForApiKeyOption) waitForApiKey() {}

func (w waitForApiKeyOption) iterable() {}

func (r requestOption) waitForApiKey() {}

func (i iterableOption) waitForApiKey() {}

func WithApiKey(apiKey *ApiKey) waitForApiKeyOption {
	return waitForApiKeyOption(func(c *config) {
		c.apiKey = apiKey
	})
}

// --------- Helper to convert options ---------

func toRequestOptions[T RequestOption](opts []T) []RequestOption {
	requestOpts := make([]RequestOption, 0, len(opts))

	for _, opt := range opts {
		requestOpts = append(requestOpts, opt)
	}

	return requestOpts
}

func toIterableOptions(opts []ChunkedBatchOption) []IterableOption {
	iterableOpts := make([]IterableOption, 0, len(opts))

	for _, opt := range opts {
		if opt, ok := opt.(IterableOption); ok {
			iterableOpts = append(iterableOpts, opt)
		}
	}

	return iterableOpts
}

func toIterableOptionsWaitFor(opts []WaitForApiKeyOption) []IterableOption {
	iterableOpts := make([]IterableOption, 0, len(opts))

	for _, opt := range opts {
		if opt, ok := opt.(IterableOption); ok {
			iterableOpts = append(iterableOpts, opt)
		}
	}

	return iterableOpts
}

func toChunkedBatchOptions(opts []PartialUpdateObjectsOption) []ChunkedBatchOption {
	chunkedBatchOpts := make([]ChunkedBatchOption, 0, len(opts))

	for _, opt := range opts {
		if opt, ok := opt.(ChunkedBatchOption); ok {
			chunkedBatchOpts = append(chunkedBatchOpts, opt)
		}
	}

	return chunkedBatchOpts
}
{{/isSearchClient}}

{{#operation}}
  {{#hasParams}}
func (r *{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) UnmarshalJSON(b []byte) error {
	req := map[string]json.RawMessage{}
	err := json.Unmarshal(b, &req)
	if err != nil {
		return fmt.Errorf("cannot unmarshal request: %w", err)
	}
  {{#allParams}}
	if v, ok := req["{{#isQueryParam}}{{baseName}}{{/isQueryParam}}{{^isQueryParam}}{{paramName}}{{/isQueryParam}}"]; ok {
		err = json.Unmarshal(v, &r.{{paramName}})
		if err != nil {
      err = json.Unmarshal(b, &r.{{paramName}})
      if err != nil {
			  return fmt.Errorf("cannot unmarshal {{paramName}}: %w", err)
      }
		}
	} {{#isBodyParam}}{{#required}}else {
    err = json.Unmarshal(b, &r.{{paramName}})
    if err != nil {
      return fmt.Errorf("cannot unmarshal body parameter {{paramName}}: %w", err)
    }
  }{{/required}}{{/isBodyParam}}
  {{/allParams}}

  return nil
}

// {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request represents the request with all the parameters for the API call.
type {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request struct {
{{#allParams}}
	{{paramName}} {{^required}}{{^isPathParam}}{{^isFreeFormObject}}{{^isArray}}{{^isMap}}{{^isEnumRef}}*{{/isEnumRef}}{{/isMap}}{{/isArray}}{{/isFreeFormObject}}{{/isPathParam}}{{/required}}{{#required}}{{#isModel}}*{{/isModel}}{{/required}}{{{dataType}}}
{{/allParams}}
}

{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
//New{{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request creates an instance of the {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request to be used for the API call.
func (c *APIClient) NewApi{{{nickname}}}Request({{#requiredParams}} {{paramName}} {{^isPathParam}}{{^isFreeFormObject}}{{^isArray}}{{^isMap}}{{^isPrimitiveType}}{{^isEnumRef}}*{{/isEnumRef}}{{/isPrimitiveType}}{{/isMap}}{{/isArray}}{{/isFreeFormObject}}{{/isPathParam}}{{{dataType}}} {{^-last}},{{/-last}}{{/requiredParams}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
	return {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request{
		{{#requiredParams}}
		{{paramName}}: {{paramName}},
		{{/requiredParams}}
	}
}

{{#allParams}}
{{^required}}
// With{{#lambda.titlecase}}{{baseName}}{{/lambda.titlecase}} adds the {{paramName}} to the {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request and returns the request for chaining.
{{#isDeprecated}}
// Deprecated
{{/isDeprecated}}
func (r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request) With{{#lambda.titlecase}}{{baseName}}{{/lambda.titlecase}}({{paramName}} {{^isFreeFormObject}}{{^isArray}}{{^isMap}}{{^isPrimitiveType}}{{^isEnumRef}}*{{/isEnumRef}}{{/isPrimitiveType}}{{/isMap}}{{/isArray}}{{/isFreeFormObject}}{{{dataType}}}) {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request {
	r.{{paramName}} = {{#isPrimitiveType}}{{^isMap}}&{{/isMap}}{{/isPrimitiveType}}{{paramName}}
	return r
}

{{/required}}
{{/allParams}}
{{/hasParams}}
/*
{{operationId}} calls the API and returns the raw response from it.
  {{#notes}}

    {{{unescapedNotes}}}
  {{/notes}}
  {{#vendorExtensions}}
    {{#x-acl.0}}

      Required API Key ACLs:{{/x-acl.0}}
    {{#x-acl}}
      - {{.}}
    {{/x-acl}}
  {{/vendorExtensions}}

  Request can be constructed by NewApi{{operationId}}Request with parameters below.
  {{#allParams}}
    @param {{paramName}} {{dataType}}{{#description}} - {{{.}}}{{/description}}
  {{/allParams}}
  @param opts ...RequestOption - Optional parameters for the API call
  @return *http.Response - The raw response from the API
  @return []byte - The raw response body from the API
  @return error - An error if the API call fails
  {{#isDeprecated}}

    Deprecated
  {{/isDeprecated}}
  */
func (c *APIClient) {{nickname}}WithHTTPInfo({{#hasParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request,{{/hasParams}} opts ...RequestOption) (*http.Response, []byte, error) {
  {{#vendorExtensions}}
  requestPath := "{{{path}}}"{{#pathParams}}
  requestPath = strings.ReplaceAll(requestPath, {{=<% %>=}}"{<%baseName%>}"<%={{ }}=%>, {{#x-is-custom-request}}utils.ParameterToString(r.{{paramName}}){{/x-is-custom-request}}{{^x-is-custom-request}}url.PathEscape(utils.ParameterToString(r.{{paramName}})){{/x-is-custom-request}}){{/pathParams}}
  {{/vendorExtensions}}

	{{#allParams}}
	{{#required}}
  {{#isString}}
	if r.{{paramName}} == "" { 
    return nil, nil, reportError("Parameter `{{paramName}}` is required when calling `{{operationId}}`.")
  }{{/isString}}{{#isContainer}}
  if len(r.{{paramName}}) == 0 { 
    return nil, nil, reportError("Parameter `{{paramName}}` is required when calling `{{operationId}}`.")
  }{{/isContainer}}{{#isMap}}
  if len(r.{{paramName}}) == 0 { 
    return nil, nil, reportError("Parameter `{{paramName}}` is required when calling `{{operationId}}`.")
  }{{/isMap}}{{^isPrimitiveType}}{{^isContainer}}{{^isMap}}{{^isEnumRef}}
  if r.{{paramName}} == nil {
	  return nil, nil, reportError("Parameter `{{paramName}}` is required when calling `{{operationId}}`.")
	}{{/isEnumRef}}{{/isMap}}{{/isContainer}}{{/isPrimitiveType}}
	{{/required}}
	{{/allParams}}

  conf := config{
    context:      context.Background(),
    queryParams:  url.Values{},
    headerParams: map[string]string{},
  }

  {{#vendorExtensions.x-is-custom-request}}
    {{#queryParams}}
      {{^required}}if !utils.IsNilOrEmpty(r.{{paramName}}) { {{/required}}
          for k, v := range r.{{paramName}} {
           conf.queryParams.Set(k, utils.QueryParameterToString(v))
          }
      {{^required}} } {{/required}}
    {{/queryParams}}
  {{/vendorExtensions.x-is-custom-request}}
  {{^vendorExtensions.x-is-custom-request}}
	{{#queryParams}}
	{{#required}}
	conf.queryParams.Set("{{baseName}}", utils.QueryParameterToString({{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}{{^isEnumRef}}*{{/isEnumRef}}{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}}))
	{{/required}}
  {{^required}}
  if !utils.IsNilOrEmpty(r.{{paramName}}) {
    conf.queryParams.Set("{{baseName}}", utils.QueryParameterToString({{^isFreeFormObject}}{{^isArray}}{{^isEnumRef}}*{{/isEnumRef}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}}))
  }
  {{/required}}
	{{/queryParams}}
  {{/vendorExtensions.x-is-custom-request}}
  {{#headerParams}}
	{{#required}}
	conf.headerParams["{{baseName}}"] = utils.ParameterToString({{^isFreeFormObject}}{{^isArray}}{{^isPrimitiveType}}{{^isEnumRef}}*{{/isEnumRef}}{{/isPrimitiveType}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}})
	{{/required}}
  {{^required}}
  if !utils.IsNilOrEmpty(r.{{paramName}}) {
    conf.headerParams["{{baseName}}"] = utils.ParameterToString({{^isFreeFormObject}}{{^isArray}}{{^isEnumRef}}*{{/isEnumRef}}{{/isArray}}{{/isFreeFormObject}}r.{{paramName}})
  }
  {{/required}}
{{/headerParams}}

  // optional params if any
  for _, opt := range opts {
    opt.apply(&conf)
  }

  var postBody any

{{#bodyParams}}
  // body params{{^required}}
  if utils.IsNilOrEmpty(r.{{paramName}}) {
    postBody = "{}"
  } else { {{/required}}
    postBody = r.{{paramName}}{{^required}}
   } {{/required}}
{{/bodyParams}}
	req, err := c.prepareRequest(conf.context, requestPath, http.Method{{httpMethod}}, postBody, conf.headerParams, conf.queryParams)
	if err != nil {
		return nil, nil, err
	}

	return c.callAPI(req, {{#vendorExtensions}}{{#x-use-read-transporter}}true{{/x-use-read-transporter}}{{^x-use-read-transporter}}false{{/x-use-read-transporter}}{{/vendorExtensions}})
}

/*
{{operationId}} casts the HTTP response body to a defined struct.
{{> operation_description}}
func (c *APIClient) {{nickname}}({{#hasParams}}r {{#structPrefix}}{{&classname}}{{/structPrefix}}{{^structPrefix}}Api{{/structPrefix}}{{operationId}}Request,{{/hasParams}} opts ...RequestOption) ({{#returnType}}{{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}, {{/returnType}}error) {
  {{#returnType}}
    var returnValue  {{^isArray}}{{^returnTypeIsPrimitive}}*{{/returnTypeIsPrimitive}}{{/isArray}}{{{.}}}
  {{/returnType}}

  res, resBody, err := c.{{nickname}}WithHTTPInfo({{#hasParams}}r, {{/hasParams}}opts...)
  if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}err
	}
  if res == nil {
    return {{#returnType}}returnValue, {{/returnType}}reportError("res is nil")
  }

	if res.StatusCode >= 300 {
			return {{#returnType}}returnValue, {{/returnType}}c.decodeError(res, resBody)
	}

	{{#returnType}}
	err = c.decode(&returnValue, resBody)
	if err != nil {
		return {{#returnType}}returnValue, {{/returnType}}reportError("cannot decode result: %w", err)
	}

	{{/returnType}}
	return {{#returnType}}returnValue, {{/returnType}}nil
}

{{/operation}}
{{/operations}}

{{#isSearchClient}}
{{> search_helpers}}
{{/isSearchClient}}
