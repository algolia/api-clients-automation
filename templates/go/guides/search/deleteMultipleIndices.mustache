package main

import (
  "encoding/json"
  "fmt"
  "net/http"
)

{{> snippets/import}}

func deleteMultipleIndices() {
  // You need an API key with `deleteIndex`
  {{> snippets/init}}

  // List all indices
  indices, err := {{#dynamicSnippet}}listIndicesSimple{{/dynamicSnippet}}
  if err != nil {
    panic(err)
  }

  // Primary indices don't have a `primary` key
  primaryIndices := make([]search.FetchedIndex, len(indices.Items))
	replicaIndices := make([]search.FetchedIndex, len(indices.Items))

	for _, index := range indices.Items {
		if index.Primary == nil {
			primaryIndices = append(primaryIndices, index)
		} else {
			replicaIndices = append(replicaIndices, index)
		}
	}

  // Delete primary indices first
  if len(primaryIndices) > 0 {
		requests := make([]search.MultipleBatchRequest, len(primaryIndices))

		for _, index := range primaryIndices {
			requests = append(requests, search.MultipleBatchRequest{
				Action:    "delete",
				IndexName: index.Name,
			})
    }

    _, err = {{#dynamicSnippet}}deleteMultipleIndicesPrimary{{/dynamicSnippet}}
    if err != nil {
      panic(err)
    }

    fmt.Println("Deleted primary indices.")
  }

  // Now, delete replica indices
  if len(replicaIndices) > 0 {
		requests := make([]search.MultipleBatchRequest, len(primaryIndices))

		for _, index := range primaryIndices {
			requests = append(requests, search.MultipleBatchRequest{
				Action:    "delete",
				IndexName: index.Name,
			})
		}

    _, err = {{#dynamicSnippet}}deleteMultipleIndicesReplica{{/dynamicSnippet}}
    if err != nil {
      panic(err)
    }

    fmt.Println("Deleted replica indices.")
  }
}
