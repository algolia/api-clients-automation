package main

import (
  "fmt"
  "net/http"
)

{{> snippets/import}}

func saveImageClassifications() {
  type Image struct {
    ImageURL string                   `json:"imageURL"`
    ObjectID string                   `json:"objectID"`
    Objects  []map[string]interface{} `json:"objects"`
  }

  getImageLabels := func(imageURL, objectID string, scoreLimit float64) Image {
    // Implement your image classification logic here
    return Image{
      ImageURL: imageURL,
      ObjectID: objectID,
      Objects:  []map[string]interface{}{},
    }
  }

  {{> snippets/init}}

  images := []Image{}

	err = client.BrowseObjects("<YOUR_INDEX_NAME>", search.BrowseParamsObject{}, search.WithAggregator(func(res any, err error) {
		if err != nil {
			panic(err)
		}

		browseRes, ok := res.(search.BrowseResponse)
		if !ok {
			panic("Invalid response")
		}

		for _, hit := range browseRes.Hits {
			props := hit.AdditionalProperties
			imageURL, _ := props["imageURL"].(string)
			images = append(images, getImageLabels(imageURL, hit.GetObjectID(), 0.5))
		}
	}))
	if err != nil {
		panic(err)
	}

	records := make([]map[string]any, len(images))
	for i, img := range images {
		records[i] = map[string]any{
			"imageURL": img.ImageURL,
			"objectID": img.ObjectID,
			"objects":  img.Objects,
		}
	}

  _, err = {{#dynamicSnippet}}partialUpdatesRecords{{/dynamicSnippet}}
  if err != nil {
      panic(err)
  }
}