/*
SearchForHits calls the `search` method but with certainty that we will only request Algolia records (hits) and not facets.
Disclaimer: We don't assert that the parameters you pass to this method only contains `hits` requests to prevent impacting search performances, this helper is purely for typing purposes.

  @param r ApiSearchRequest - Body of the `search` operation.
  @param opts ...utils.RequestOption - Optional parameters for the request.
  @return []SearchResponse - List of hits.
  @return error - Error if any.
 */
func (c *APIClient) SearchForHits(r ApiSearchRequest, opts ...utils.RequestOption) ([]SearchResponse, error) {
  res, err := c.Search(r, opts...)
  if err != nil {
    return nil, err
  }

  hits := make([]SearchResponse, 0, len(res.GetResults()))

  for _, hit := range res.GetResults() {
    if hit.SearchResponse != nil {
      hits = append(hits, *hit.SearchResponse)
    }
  }

  return slices.Clip(hits), nil
}

/*
SearchForFacets calls the `search` method but with certainty that we will only request Algolia facets and not records (hits).
Disclaimer: We don't assert that the parameters you pass to this method only contains `facets` requests to prevent impacting search performances, this helper is purely for typing purposes.

  @param r ApiSearchRequest - Body of the `search` operation.
  @param opts ...utils.RequestOption - Optional parameters for the request.
  @return []SearchForFacetValuesResponse - List of facet hits.
  @return error - Error if any.
 */
func (c *APIClient) SearchForFacets(r ApiSearchRequest, opts ...utils.RequestOption) ([]SearchForFacetValuesResponse, error) {
  res, err := c.Search(r, opts...)
  if err != nil {
    return nil, err
  }

  facetHits := make([]SearchForFacetValuesResponse, 0, len(res.GetResults()))

  for _, hit := range res.GetResults() {
      if hit.SearchForFacetValuesResponse != nil {
        facetHits = append(facetHits, *hit.SearchForFacetValuesResponse)
      }
  }

  return slices.Clip(facetHits), nil
}

/*
WaitForTask waits for a task to be published.
It returns the task response if the operation was successful.
It returns an error if the operation failed.

	@param indexName string - Index name.
	@param taskID int64 - Task ID.
	@param opts ...utils.IterableOption - Optional parameters for the request.
	@return *GetTaskResponse - Task response.
	@return error - Error if any.
*/
func (c *APIClient) WaitForTask(
	indexName string,
	taskID int64,
	opts ...utils.IterableOption,
) (*GetTaskResponse, error) {
  // provide a defalut timeout function
  opts = append([]utils.IterableOption{utils.WithTimeout(func(count int) time.Duration {
    return time.Duration(min(200*count, 5000)) * time.Millisecond
  })}, opts...)

	return utils.CreateIterable( //nolint:wrapcheck
		func(*GetTaskResponse, error) (*GetTaskResponse, error) {
			return c.GetTask(c.NewApiGetTaskRequest(indexName, taskID), utils.ToRequestOptions(opts)...)
		},
		func(response *GetTaskResponse, err error) bool {
			if err != nil || response == nil {
				return false
			}

			return response.Status == TASK_STATUS_PUBLISHED
		},
		opts...,
	)
}

/*
WaitForAppTask waits for an application-level task to be published.
It returns the task response if the operation was successful.
It returns an error if the operation failed.

	@param taskID int64 - Task ID.
	@param opts ...utils.IterableOption - Optional parameters for the request.
	@return *GetTaskResponse - Task response.
	@return error - Error if any.
*/
func (c *APIClient) WaitForAppTask(
	taskID int64,
	opts ...utils.IterableOption,
) (*GetTaskResponse, error) {
  // provide a defalut timeout function
  opts = append([]utils.IterableOption{utils.WithTimeout(func(count int) time.Duration {
    return time.Duration(min(200*count, 5000)) * time.Millisecond
  })}, opts...)

	return utils.CreateIterable( //nolint:wrapcheck
		func(*GetTaskResponse, error) (*GetTaskResponse, error) {
			return c.GetAppTask(c.NewApiGetAppTaskRequest(taskID), utils.ToRequestOptions(opts)...)
		},
		func(response *GetTaskResponse, err error) bool {
			if err != nil || response == nil {
				return false
			}

			return response.Status == TASK_STATUS_PUBLISHED
		},
		opts...,
	)
}

/*
WaitForApiKey waits for an API key to be created, deleted or updated.
It returns the API key response if the operation was successful.
It returns an error if the operation failed.

The operation can be one of the following:
  - "add": wait for the API key to be created
  - "delete": wait for the API key to be deleted
  - "update": wait for the API key to be updated

If the operation is "update", the apiKey parameter must be set.
If the operation is "delete" or "add", the apiKey parameter is not used.

	@param operation ApiKeyOperation - Operation type - add, delete or update.
	@param key string - API key.
	@param apiKey *ApiKey - API key structure - required for update operation.
	@param opts ...utils.IterableOption - Optional parameters for the request.
	@return *GetApiKeyResponse - API key response.
	@return error - Error if any.
*/
func (c *APIClient) WaitForApiKey(
	operation ApiKeyOperation,
	key string,
	apiKey *ApiKey,
	opts ...utils.IterableOption,
) (*GetApiKeyResponse, error) {
	if operation != API_KEY_OPERATION_ADD && operation != API_KEY_OPERATION_DELETE && operation != API_KEY_OPERATION_UPDATE {
		return nil, &errs.WaitKeyOperationError{}
	}

  // provide a defalut timeout function
  opts = append([]utils.IterableOption{utils.WithTimeout(func(count int) time.Duration {
    return time.Duration(min(200*count, 5000)) * time.Millisecond
  })}, opts...)

	var validateFunc func(*GetApiKeyResponse, error) bool

	if operation == API_KEY_OPERATION_UPDATE {
		if apiKey == nil {
			return nil, &errs.WaitKeyUpdateError{}
		}

		validateFunc = func(response *GetApiKeyResponse, err error) bool {
			if err != nil || response == nil {
				return false
			}

			if apiKey.GetDescription() != response.GetDescription() {
				return false
			}

			if apiKey.GetQueryParameters() != response.GetQueryParameters() {
				return false
			}

			if apiKey.GetMaxHitsPerQuery() != response.GetMaxHitsPerQuery() {
				return false
			}

			if apiKey.GetMaxQueriesPerIPPerHour() != response.GetMaxQueriesPerIPPerHour() {
				return false
			}

			if apiKey.GetValidity() != response.GetValidity() {
				return false
			}

			slices.Sort(apiKey.Acl)
			slices.Sort(response.Acl)

			if !slices.Equal(apiKey.Acl, response.Acl) {
				return false
			}

			slices.Sort(apiKey.Indexes)
			slices.Sort(response.Indexes)

			if !slices.Equal(apiKey.Indexes, response.Indexes) {
				return false
			}

			slices.Sort(apiKey.Referers)
			slices.Sort(response.Referers)

			return slices.Equal(apiKey.Referers, response.Referers)
		}
	} else {
		validateFunc = func(response *GetApiKeyResponse, err error) bool {
			switch operation {
			case API_KEY_OPERATION_ADD:
        if _, ok := err.(*APIError); ok {
					apiErr := err.(*APIError)

					return apiErr.Status != 404
				}

				return true
			case API_KEY_OPERATION_DELETE:
				if _, ok := err.(*APIError); ok {
					apiErr := err.(*APIError)

					return apiErr.Status == 404
				}

				return false
			}
			return false
		}
	}

	return utils.CreateIterable( //nolint:wrapcheck
		func(*GetApiKeyResponse, error) (*GetApiKeyResponse, error) {
			return c.GetApiKey(c.NewApiGetApiKeyRequest(key), utils.ToRequestOptions(opts)...)
		},
		validateFunc,
		opts...,
	)
}

/*
BrowseObjects allows to aggregate all the hits returned by the API calls.

	  @param indexName string - Index name.
	  @param browseParams BrowseParamsObject - Browse parameters.
		@param opts ...utils.IterableOption - Optional parameters for the request.
		@return *BrowseResponse - Browse response.
		@return error - Error if any.
*/
func (c *APIClient) BrowseObjects(
	indexName string,
	browseParams BrowseParamsObject,
	opts ...utils.IterableOption,
) (*BrowseResponse, error) {
	return utils.CreateIterable( //nolint:wrapcheck
		func(previousResponse *BrowseResponse, previousErr error) (*BrowseResponse, error) {
			if previousResponse != nil {
				browseParams.Cursor = previousResponse.Cursor
			}

			return c.Browse(
				c.NewApiBrowseRequest(indexName).WithBrowseParams(BrowseParamsObjectAsBrowseParams(&browseParams)),
				utils.ToRequestOptions(opts)...,
			)
		},
		func(response *BrowseResponse, responseErr error) bool {
			return responseErr != nil || response != nil && response.Cursor == nil
		},
		opts...,
	)
}

/*
BrowseRules allows to aggregate all the rules returned by the API calls.

	@param indexName string - Index name.
	@param searchRulesParams SearchRulesParams - Search rules parameters.
	@param opts ...utils.IterableOption - Optional parameters for the request.
	@return *SearchRulesResponse - Search rules response.
	@return error - Error if any.
*/
func (c *APIClient) BrowseRules(
	indexName string,
	searchRulesParams SearchRulesParams,
	opts ...utils.IterableOption,
) (*SearchRulesResponse, error) {
	hitsPerPage := int32(1000)
	if searchRulesParams.HitsPerPage != nil {
		hitsPerPage = *searchRulesParams.HitsPerPage
	}

	return utils.CreateIterable( //nolint:wrapcheck
		func(previousResponse *SearchRulesResponse, previousErr error) (*SearchRulesResponse, error) {
			searchRulesParams.HitsPerPage = &hitsPerPage

			if previousResponse != nil {
				searchRulesParams.Page = utils.ToPtr(previousResponse.Page + 1)
			}

			if searchRulesParams.Page == nil {
				searchRulesParams.Page = utils.ToPtr(int32(0))
			}

			return c.SearchRules(
				c.NewApiSearchRulesRequest(indexName).WithSearchRulesParams(&searchRulesParams),
				utils.ToRequestOptions(opts)...,
			)
		},
		func(response *SearchRulesResponse, responseErr error) bool {
			return responseErr != nil || (response != nil && response.NbHits < hitsPerPage)
		},
		opts...,
	)
}

/*
BrowseSynonyms allows to aggregate all the synonyms returned by the API calls.

	@param indexName string - Index name.
	@param searchSynonymsParams SearchSynonymsParams - Search synonyms parameters.
	@param opts ...utils.IterableOption - Optional parameters for the request.
	@return *SearchSynonymsResponse - Search synonyms response.
	@return error - Error if any.
*/
func (c *APIClient) BrowseSynonyms(
	indexName string,
	searchSynonymsParams SearchSynonymsParams,
	opts ...utils.IterableOption,
) (*SearchSynonymsResponse, error) {
	hitsPerPage := int32(1000)
	if searchSynonymsParams.HitsPerPage != nil {
		hitsPerPage = *searchSynonymsParams.HitsPerPage
	}

	if searchSynonymsParams.Page == nil {
		searchSynonymsParams.Page = utils.ToPtr(int32(0))
	}

	return utils.CreateIterable( //nolint:wrapcheck
		func(previousResponse *SearchSynonymsResponse, previousErr error) (*SearchSynonymsResponse, error) {
			searchSynonymsParams.HitsPerPage = &hitsPerPage

			defer func() {
				searchSynonymsParams.Page = utils.ToPtr(*searchSynonymsParams.Page + 1)
			}()

			return c.SearchSynonyms(
				c.NewApiSearchSynonymsRequest(indexName).WithSearchSynonymsParams(&searchSynonymsParams),
				utils.ToRequestOptions(opts)...,
			)
		},
		func(response *SearchSynonymsResponse, responseErr error) bool {
			return responseErr != nil || (response != nil && response.NbHits < hitsPerPage)
		},
		opts...,
	)
}

func encodeRestrictions(restrictions *SecuredApiKeyRestrictions) (string, error) {
	if restrictions == nil {
		return "", nil
	}

	toSerialize := map[string]any{}
	if restrictions.Filters != nil {
		toSerialize["filters"] = *restrictions.Filters
	}
	if restrictions.ValidUntil != nil {
		toSerialize["validUntil"] = *restrictions.ValidUntil
	}
	if restrictions.RestrictIndices != nil {
		toSerialize["restrictIndices"] = restrictions.RestrictIndices
	}
	if restrictions.RestrictSources != nil {
		toSerialize["restrictSources"] = *restrictions.RestrictSources
	}
	if restrictions.UserToken != nil {
		toSerialize["userToken"] = *restrictions.UserToken
	}
	if restrictions.SearchParams != nil {
		// merge with searchParams
		serializedParams, err := restrictions.SearchParams.MarshalJSON()
		if err != nil {
			return "", fmt.Errorf("failed to marshal SearchParams: %w", err)
		}
		err = json.Unmarshal(serializedParams, &toSerialize)
		if err != nil {
			return "", fmt.Errorf("failed to unmarshal SearchParams: %w", err)
		}
	}

	// sort the keys to ensure consistent encoding
	keys := make([]string, 0, len(toSerialize))
	for k := range toSerialize {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	queryString := make([]string, 0, len(toSerialize))
	for _, k := range keys {
		queryString = append(queryString, k+"="+utils.QueryParameterToString(toSerialize[k]))
	}

	return strings.Join(queryString, "&"), nil
}

// GenerateSecuredApiKey generates a public API key intended to restrict access
// to certain records. This new key is built upon the existing key named
// `parentApiKey` and the following options.
func (c *APIClient) GenerateSecuredApiKey(parentApiKey string, restrictions *SecuredApiKeyRestrictions) (string, error) {
	h := hmac.New(sha256.New, []byte(parentApiKey))

	message, err := encodeRestrictions(restrictions)
	if err != nil {
		return "", err
	}
	_, err = h.Write([]byte(message))
	if err != nil {
		return "", fmt.Errorf("failed to compute HMAC: %w", err)
	}

	checksum := hex.EncodeToString(h.Sum(nil))
	key := base64.StdEncoding.EncodeToString([]byte(checksum + message))

	return key, nil
}

// GetSecuredApiKeyRemainingValidity retrieves the remaining validity of the previously generated `securedApiKey`, the `ValidUntil` parameter must have been provided.
func (c *APIClient) GetSecuredApiKeyRemainingValidity(securedApiKey string) (time.Duration, error) {
	if len(securedApiKey) == 0 {
		return 0, fmt.Errorf("given secured API key is empty: %s", securedApiKey)
	}

	decoded, err := base64.StdEncoding.DecodeString(securedApiKey)
	if err != nil {
		return 0, fmt.Errorf("unable to decode given secured API key: %s", err)
	}

	submatch := regexp.MustCompile(`validUntil=(\d{1,10})`).FindSubmatch(decoded)

	if len(submatch) != 2 {
		return 0, fmt.Errorf("unable to find `validUntil` parameter in the given secured API key: %s", string(decoded))
	}

	ts, err := strconv.Atoi(string(submatch[1]))
	if err != nil {
		return 0, fmt.Errorf("invalid format for the received `validUntil` value: %s", string(submatch[1]))
	}

	return time.Until(time.Unix(int64(ts), 0)), nil
}



// Helper: Saves the given array of objects in the given index. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objects in it.
func (c *APIClient) SaveObjects(indexName string, objects []map[string]any, opts ...utils.ChunkedBatchOption) ([]BatchResponse, error) {
  return c.ChunkedBatch(indexName, objects, ACTION_ADD_OBJECT, opts...)
}

// Helper: Deletes every records for the given objectIDs. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objectIDs in it.
func (c *APIClient) DeleteObjects(indexName string, objectIDs []string, opts ...utils.ChunkedBatchOption) ([]BatchResponse, error) {
  objects := make([]map[string]any, 0, len(objectIDs))

  for _, id := range objectIDs {
    objects = append(objects, map[string]any{"objectID":id})
  }

  return c.ChunkedBatch(indexName, objects, ACTION_DELETE_OBJECT, opts...)
}

// Helper: Replaces object content of all the given objects according to their respective `objectID` field. The `chunkedBatch` helper is used under the hood, which creates a `batch` requests with at most 1000 objects in it.
func (c *APIClient) PartialUpdateObjects(indexName string, objects []map[string]any, createIfNotExists bool, opts ...utils.ChunkedBatchOption) ([]BatchResponse, error) {
  var action Action

  if createIfNotExists {
    action = ACTION_PARTIAL_UPDATE_OBJECT
  } else {
    action = ACTION_PARTIAL_UPDATE_OBJECT_NO_CREATE
  }

  return c.ChunkedBatch(indexName, objects, action, opts...)
}

// ChunkedBatch chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `batch` requests.
func (c *APIClient) ChunkedBatch(indexName string, objects []map[string]any, action Action, opts ...utils.ChunkedBatchOption) ([]BatchResponse, error) {
  options := utils.Options{
    WaitForTasks: false,
    BatchSize:    1000,
  }
	
  for _, opt := range opts {
    opt.Apply(&options)
  }

	requests := make([]BatchRequest, 0, len(objects)%options.BatchSize)
	responses := make([]BatchResponse, 0, len(objects)%options.BatchSize)

	for i, obj := range objects {
		requests = append(requests, *NewBatchRequest(action, obj))

		if len(requests) == options.BatchSize || i == len(objects)-1 {
			resp, err := c.Batch(c.NewApiBatchRequest(indexName, NewBatchWriteParams(requests)), utils.ToRequestOptions(opts)...)
			if err != nil {
				return nil, err
			}

			responses = append(responses, *resp)
			requests = make([]BatchRequest, 0, len(objects)%options.BatchSize)
		}
	}

	if options.WaitForTasks {
		for _, resp := range responses {
			_, err := c.WaitForTask(indexName, resp.TaskID, utils.ToIterableOptions(opts)...)
			if err != nil {
				return nil, err
			}
		}
	}

	return responses, nil
}

// ReplaceAllObjects replaces all objects (records) in the given `indexName` with the given `objects`. A temporary index is created during this process in order to backup your data.
// See https://api-clients-automation.netlify.app/docs/contributing/add-new-api-client#5-helpers for implementation details.
func (c *APIClient) ReplaceAllObjects(indexName string, objects []map[string]any, opts ...utils.ChunkedBatchOption) (*ReplaceAllObjectsResponse, error) {
	tmpIndexName := fmt.Sprintf("%s_tmp_%d", indexName, time.Now().UnixNano())

	copyResp, err := c.OperationIndex(c.NewApiOperationIndexRequest(indexName, NewOperationIndexParams(OPERATION_TYPE_COPY, tmpIndexName, WithOperationIndexParamsScope([]ScopeType{SCOPE_TYPE_SETTINGS, SCOPE_TYPE_RULES, SCOPE_TYPE_SYNONYMS}))), utils.ToRequestOptions(opts)...)
	if err != nil {
		return nil, err
	}

  opts = append(opts, utils.WithWaitForTasks(true))

	batchResp, err := c.ChunkedBatch(tmpIndexName, objects, ACTION_ADD_OBJECT, opts...)
	if err != nil {
		return nil, err
	}

	_, err = c.WaitForTask(tmpIndexName, copyResp.TaskID, utils.ToIterableOptions(opts)...)
	if err != nil {
		return nil, err
	}

	copyResp, err = c.OperationIndex(c.NewApiOperationIndexRequest(indexName, NewOperationIndexParams(OPERATION_TYPE_COPY, tmpIndexName, WithOperationIndexParamsScope([]ScopeType{SCOPE_TYPE_SETTINGS, SCOPE_TYPE_RULES, SCOPE_TYPE_SYNONYMS}))), utils.ToRequestOptions(opts)...)
	if err != nil {
		return nil, err
	}

	_, err = c.WaitForTask(tmpIndexName, copyResp.TaskID, utils.ToIterableOptions(opts)...)
	if err != nil {
		return nil, err
	}

	moveResp, err := c.OperationIndex(c.NewApiOperationIndexRequest(tmpIndexName, NewOperationIndexParams(OPERATION_TYPE_MOVE, indexName)), utils.ToRequestOptions(opts)...)
	if err != nil {
		return nil, err
	}

	_, err = c.WaitForTask(tmpIndexName, moveResp.TaskID, utils.ToIterableOptions(opts)...)
	if err != nil {
		return nil, err
	}

	return &ReplaceAllObjectsResponse{
		CopyOperationResponse: *copyResp,
		BatchResponses:        batchResp,
		MoveOperationResponse: *moveResp,
	}, nil
}
