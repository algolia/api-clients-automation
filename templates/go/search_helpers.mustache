/*
WaitForTask waits for a task to be published.
Wraps WaitForTaskWithContext with context.Background().
It returns the task response if the operation was successful.
It returns an error if the operation failed.

The maxRetries parameter is the maximum number of retries.
The initialDelay parameter is the initial delay between each retry.
The maxDelay parameter is the maximum delay between each retry.

  @param indexName string - Index name.
  @param taskID int64 - Task ID.
  @param maxRetries *int - Maximum number of retries.
  @param initialDelay *time.Duration - Initial delay between retries.
  @param maxDelay *time.Duration - Maximum delay between retries.
  @param opts ...Option - Optional parameters for the request.
  @return *GetTaskResponse - Task response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForTask(
  indexName string,
  taskID int64,
  maxRetries *int,
  initialDelay *time.Duration,
  maxDelay *time.Duration,
  opts ...Option,
) (*GetTaskResponse, error) {
  return c.WaitForTaskWithContext(
    context.Background(),
    indexName,
    taskID,
    maxRetries,
    initialDelay,
    maxDelay,
    opts...,
  )
}

/*
WaitForTaskWithContext waits for a task to be published.
It returns the task response if the operation was successful.
It returns an error if the operation failed.

The maxRetries parameter is the maximum number of retries.
The initialDelay parameter is the initial delay between each retry.
The maxDelay parameter is the maximum delay between each retry.

  @param ctx context.Context - The context that will be drilled down to the actual request.
  @param indexName string - Index name.
  @param taskID int64 - Task ID.
  @param maxRetries *int - Maximum number of retries.
  @param initialDelay *time.Duration - Initial delay between retries.
  @param maxDelay *time.Duration - Maximum delay between retries.
  @param opts ...Option - Optional parameters for the request.
  @return *GetTaskResponse - Task response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForTaskWithContext(
  ctx context.Context,
  indexName string,
  taskID int64,
  maxRetries *int,
  initialDelay *time.Duration,
  maxDelay *time.Duration,
  opts ...Option,
) (*GetTaskResponse, error) {
  return utils.RetryUntil( //nolint:wrapcheck
    func() (*GetTaskResponse, error) {
      return c.GetTaskWithContext(ctx, c.NewApiGetTaskRequest(indexName, taskID), opts...)
    },
    func(response *GetTaskResponse, err error) bool {
      if err != nil || response == nil {
        return false
      }

      return response.Status == TASKSTATUS_PUBLISHED
    },
    maxRetries,
    initialDelay,
    maxDelay,
  )
}

/*
WaitForApiKey waits for an API key to be created, deleted or updated.
It returns the API key response if the operation was successful.
It returns an error if the operation failed.

The operation can be one of the following:
  - "add": wait for the API key to be created
  - "delete": wait for the API key to be deleted
  - "update": wait for the API key to be updated

If the operation is "update", the apiKey parameter must be set.
If the operation is "delete" or "add", the apiKey parameter is not used.

  @param operation ApiKeyOperation - Operation type - add, delete or update.
  @param key string - API key.
  @param apiKey *ApiKey - API key structure - required for update operation.
  @param opts ...Option - Optional parameters for the request.
  @return *GetApiKeyResponse - API key response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForApiKey(
  operation ApiKeyOperation,
  key string,
  apiKey *ApiKey,
  opts ...Option,
) (*GetApiKeyResponse, error) {
  return c.WaitForApiKeyWithContext(
    context.Background(),
    operation,
    key,
    apiKey,
    nil,
    nil,
    nil,
    opts...,
  )
}

/*
WaitForApiKey waits for an API key to be created, deleted or updated.
Wraps WaitForApiKeyWithContext with context.Background().
It returns the API key response if the operation was successful.
It returns an error if the operation failed.

The operation can be one of the following:
  - "add": wait for the API key to be created
  - "delete": wait for the API key to be deleted
  - "update": wait for the API key to be updated

The maxRetries parameter is the maximum number of retries.
The initialDelay parameter is the initial delay between each retry.
The maxDelay parameter is the maximum delay between each retry.

If the operation is "update", the apiKey parameter must be set.
If the operation is "delete" or "add", the apiKey parameter is not used.

  @param operation ApiKeyOperation - Operation type - add, delete or update.
  @param key string - API key.
  @param apiKey *ApiKey - API key structure - required for update operation.
  @param maxRetries *int - Maximum number of retries.
  @param initialDelay *time.Duration - Initial delay between retries.
  @param maxDelay *time.Duration - Maximum delay between retries.
  @param opts ...Option - Optional parameters for the request.
  @return *GetApiKeyResponse - API key response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForApiKeyWithOptions(
  operation ApiKeyOperation,
  key string,
  apiKey *ApiKey,
  maxRetries *int,
  initialDelay *time.Duration,
  maxDelay *time.Duration,
  opts ...Option,
) (*GetApiKeyResponse, error) {
  return c.WaitForApiKeyWithContext(
    context.Background(),
    operation,
    key,
    apiKey,
    maxRetries,
    initialDelay,
    maxDelay,
    opts...,
  )
}

/*
WaitForApiKeyWithContext waits for an API key to be created, deleted or updated.
It returns the API key response if the operation was successful.
It returns an error if the operation failed.

The operation can be one of the following:
  - "add": wait for the API key to be created
  - "delete": wait for the API key to be deleted
  - "update": wait for the API key to be updated

The maxRetries parameter is the maximum number of retries.
The initialDelay parameter is the initial delay between each retry.
The maxDelay parameter is the maximum delay between each retry.

If the operation is "update", the apiKey parameter must be set.
If the operation is "delete" or "add", the apiKey parameter is not used.

  @param ctx context.Context - The context that will be drilled down to the actual request.
  @param operation ApiKeyOperation - Operation type - add, delete or update.
  @param key string - API key.
  @param apiKey *ApiKey - API key structure - required for update operation.
  @param maxRetries *int - Maximum number of retries.
  @param initialDelay *time.Duration - Initial delay between retries.
  @param maxDelay *time.Duration - Maximum delay between retries.
  @param opts ...Option - Optional parameters for the request.
  @return *GetApiKeyResponse - API key response.
  @return error - Error if any.
*/
func (c *APIClient) WaitForApiKeyWithContext(
  ctx context.Context,
  operation ApiKeyOperation,
  key string,
  apiKey *ApiKey,
  maxRetries *int,
  initialDelay *time.Duration,
  maxDelay *time.Duration,
  opts ...Option,
) (*GetApiKeyResponse, error) {
  if operation != APIKEYOPERATION_ADD && operation != APIKEYOPERATION_DELETE && operation != APIKEYOPERATION_UPDATE {
    return nil, &errs.WaitKeyOperationError{}
  }

  if operation == APIKEYOPERATION_UPDATE {
    if apiKey == nil {
      return nil, &errs.WaitKeyUpdateError{}
    }

    return utils.RetryUntil( //nolint:wrapcheck
      func() (*GetApiKeyResponse, error) {
        return c.GetApiKeyWithContext(ctx, c.NewApiGetApiKeyRequest(key), opts...)
      },
      func(response *GetApiKeyResponse, err error) bool {
        if err != nil || response == nil {
          return false
        }

        if apiKey.GetDescription() != response.GetDescription() {
          return false
        }

        if apiKey.GetQueryParameters() != response.GetQueryParameters() {
          return false
        }

        if apiKey.GetMaxHitsPerQuery() != response.GetMaxHitsPerQuery() {
          return false
        }

        if apiKey.GetMaxQueriesPerIPPerHour() != response.GetMaxQueriesPerIPPerHour() {
          return false
        }

        if apiKey.GetValidity() != response.GetValidity() {
          return false
        }

        slices.Sort(apiKey.Acl)
        slices.Sort(response.Acl)

        if !slices.Equal(apiKey.Acl, response.Acl) {
          return false
        }

        slices.Sort(apiKey.Indexes)
        slices.Sort(response.Indexes)

        if !slices.Equal(apiKey.Indexes, response.Indexes) {
          return false
        }

        slices.Sort(apiKey.Referers)
        slices.Sort(response.Referers)

        return slices.Equal(apiKey.Referers, response.Referers)
      },
      maxRetries,
      initialDelay,
      maxDelay,
    )
  }

  return utils.RetryUntil( //nolint:wrapcheck
    func() (*GetApiKeyResponse, error) {
      return c.GetApiKeyWithContext(ctx, c.NewApiGetApiKeyRequest(key), opts...)
    },
    func(response *GetApiKeyResponse, err error) bool {
      switch operation {
      case APIKEYOPERATION_ADD:
        return err == nil && response != nil && response.CreatedAt > 0
      case APIKEYOPERATION_DELETE:
        if _, ok := err.(*APIError); ok {
          apiErr := err.(*APIError)

          return apiErr.Status == 404
        }

        return false
      }
      return false
    },
    maxRetries,
    initialDelay,
    maxDelay,
  )
}

func encodeRestrictions(restrictions *SecuredAPIKeyRestrictions) (string, error) {
	if restrictions == nil {
		return "", nil
	}

	toSerialize := map[string]any{}
	if restrictions.Filters != nil {
		toSerialize["filters"] = *restrictions.Filters
	}
	if restrictions.ValidUntil != nil {
		toSerialize["validUntil"] = *restrictions.ValidUntil
	}
	if restrictions.RestrictIndices != nil {
		toSerialize["restrictIndices"] = restrictions.RestrictIndices
	}
	if restrictions.RestrictSources != nil {
		toSerialize["restrictSources"] = *restrictions.RestrictSources
	}
	if restrictions.UserToken != nil {
		toSerialize["userToken"] = *restrictions.UserToken
	}
	if restrictions.SearchParams != nil {
		// merge with searchParams
		serializedParams, err := restrictions.SearchParams.MarshalJSON()
		if err != nil {
			return "", fmt.Errorf("failed to marshal SearchParams: %w", err)
		}
		err = json.Unmarshal(serializedParams, &toSerialize)
		if err != nil {
			return "", fmt.Errorf("failed to unmarshal SearchParams: %w", err)
		}
	}

	// sort the keys to ensure consistent encoding
	keys := make([]string, 0, len(toSerialize))
	for k := range toSerialize {
		keys = append(keys, k)
	}
	sort.Strings(keys)

	queryString := make([]string, 0, len(toSerialize))
	for _, k := range keys {
		queryString = append(queryString, k+"="+queryParameterToString(toSerialize[k]))
	}

	return strings.Join(queryString, "&"), nil
}

// GenerateSecuredApiKey generates a public API key intended to restrict access
// to certain records. This new key is built upon the existing key named
// `parentApiKey` and the following options.
func (c *APIClient) GenerateSecuredApiKey(parentApiKey string, restrictions *SecuredAPIKeyRestrictions) (string, error) {
	h := hmac.New(sha256.New, []byte(parentApiKey))

	message, err := encodeRestrictions(restrictions)
	if err != nil {
		return "", err
	}
	_, err = h.Write([]byte(message))
	if err != nil {
		return "", fmt.Errorf("failed to compute HMAC: %w", err)
	}

	checksum := hex.EncodeToString(h.Sum(nil))
	key := base64.StdEncoding.EncodeToString([]byte(checksum + message))

	return key, nil
}

// GetSecuredApiKeyRemainingValidity retrieves the remaining validity of the previously generated `securedApiKey`, the `ValidUntil` parameter must have been provided.
func (c *APIClient) GetSecuredApiKeyRemainingValidity(securedApiKey string) (time.Duration, error) {
	if len(securedApiKey) == 0 {
		return 0, fmt.Errorf("given secured API key is empty: %s", securedApiKey)
	}

	decoded, err := base64.StdEncoding.DecodeString(securedApiKey)
	if err != nil {
		return 0, fmt.Errorf("unable to decode given secured API key: %s", err)
	}

	submatch := regexp.MustCompile(`validUntil=(\d{1,10})`).FindSubmatch(decoded)

	if len(submatch) != 2 {
		return 0, fmt.Errorf("unable to find `validUntil` parameter in the given secured API key: %s", string(decoded))
	}

	ts, err := strconv.Atoi(string(submatch[1]))
	if err != nil {
		return 0, fmt.Errorf("invalid format for the received `validUntil` value: %s", string(submatch[1]))
	}

	return time.Until(time.Unix(int64(ts), 0)), nil
}