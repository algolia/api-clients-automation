// {{generationBanner}}
package e2e

import (
  "os"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/joho/godotenv"

  "github.com/algolia/algoliasearch-client-go/v4/algolia/{{clientImport}}"
)

func createE2E{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}Client(t *testing.T) *{{clientPrefix}}.APIClient {
  t.Helper()

  appID := os.Getenv("ALGOLIA_APPLICATION_ID")
  if appID == "" && os.Getenv("CI") != "true" {
    err := godotenv.Load("../../../../.env")
    require.NoError(t, err)
    appID = os.Getenv("ALGOLIA_APPLICATION_ID")
  }
  apiKey := os.Getenv("{{e2eApiKey}}")
  client, err := {{clientPrefix}}.NewClient(appID, apiKey, {{#hasRegionalHost}}{{clientPrefix}}.{{#lambda.uppercase}}{{defaultRegion}}{{/lambda.uppercase}},{{/hasRegionalHost}})
  require.NoError(t, err)

  return client
}

{{#blocksE2E}}
func Test{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}E2E_{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}(t *testing.T) {
    {{#tests}}
    t.Run("{{{testName}}}", func(t *testing.T) {
      client := createE2E{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}Client(t)
      res, err := client.{{#lambda.titlecase}}{{method}}{{/lambda.titlecase}}({{#hasOperationParams}}client.NewApi{{#lambda.titlecase}}{{method}}{{/lambda.titlecase}}Request(
        {{#parametersWithDataType}}{{#required}}{{> tests/generateParams}},{{/required}}{{/parametersWithDataType}}
      ){{#parametersWithDataType}}{{^required}}.With{{#lambda.pascalcase}}{{{key}}}{{/lambda.pascalcase}}({{> tests/generateParams}}){{/required}}{{/parametersWithDataType}}{{/hasOperationParams}}{{#requestOptions}}{{#hasOperationParams}},{{/hasOperationParams}}
      {{#queryParameters.parametersWithDataType}}utils.WithQueryParam("{{{key}}}", {{> tests/generateInnerParams}}),{{/queryParameters.parametersWithDataType}}{{#headers.parametersWithDataType}}utils.WithHeaderParam("{{{key}}}", {{> tests/generateInnerParams}}),{{/headers.parametersWithDataType}}
      {{/requestOptions}})
      require.NoError(t, err)
      _ = res

      {{#response}}
      {{#body}}
      rawBody, err := json.Marshal(res)
      require.NoError(t, err)

      var rawBodyMap any
      err = json.Unmarshal(rawBody, &rawBodyMap)
      require.NoError(t, err)

      expectedBodyRaw := `{{{.}}}`
      var expectedBody any
      err = json.Unmarshal([]byte(expectedBodyRaw), &expectedBody)
      require.NoError(t, err)

      unionBody := tests.Union(expectedBody, rawBodyMap)
      unionBodyRaw, err := json.Marshal(unionBody)
      require.NoError(t, err)

      jsonassert.New(t).Assertf(string(unionBodyRaw), expectedBodyRaw)
      {{/body}}
      {{/response}}
    })
{{/tests}}
}

{{/blocksE2E}}