{{#tests}}
// {{{testName}}}
func Test{{#lambda.titlecase}}{{clientPrefix}}{{testType}}{{/lambda.titlecase}}{{testIndex}}(t *testing.T) {
  var err error
  var res any
  _ = res
  {{#autoCreateClient}}
  client, echo := create{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}Client(t)
  {{/autoCreateClient}}
  {{^autoCreateClient}}
  echo := &tests.EchoRequester{}
  var client *{{clientPrefix}}.APIClient
  var cfg {{clientPrefix}}.{{clientName}}Configuration
  _ = client
  {{/autoCreateClient}}
  _ = echo
  {{#steps}}
  {{#times}}
  for i := 0; i < {{.}}; i++ {
  {{/times}}
  {{#isError}}
  {{#dynamicTemplate}}{{/dynamicTemplate}}
  require.EqualError(t, err, "{{{expectedError}}}")
  {{/isError}}
  {{^isError}}
  {{#dynamicTemplate}}{{/dynamicTemplate}}
  require.NoError(t, err)
  {{#match}}
    {{#testUserAgent}}
      require.Regexp(t, regexp.MustCompile(`{{{match}}}`), echo.Header.Get("User-Agent"))
    {{/testUserAgent}}
    {{#testTimeouts}}
      require.Equal(t, int64({{{match.parametersWithDataTypeMap.connectTimeout.value}}}), echo.ConnectTimeout.Milliseconds())
      require.Equal(t, int64({{{match.parametersWithDataTypeMap.responseTimeout.value}}}), echo.Timeout.Milliseconds())
    {{/testTimeouts}}
    {{#testHost}}
      require.Equal(t, "{{{match}}}", echo.Host)
    {{/testHost}}
    {{#testResponse}}
      {{#matchIsJSON}}
        rawBody, err := json.Marshal(res)
        require.NoError(t, err)
        require.JSONEq(t, `{{{match.parameters}}}`, string(rawBody))
      {{/matchIsJSON}}
      {{^matchIsJSON}}
        {{#matchIsNull}}
          require.Nil(t, res)
        {{/matchIsNull}}
        {{^matchIsNull}}
        require.Equal(t, `{{{match}}}`, res)
        {{/matchIsNull}}
      {{/matchIsJSON}}
    {{/testResponse}}
  {{/match}}
  {{/isError}}
  {{#times}}
  }
  {{/times}}
  {{/steps}}
}

{{/tests}}