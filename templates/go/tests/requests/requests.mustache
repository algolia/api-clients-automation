// {{generationBanner}}
package requests

import (
  "encoding/json"
	"testing"
	"time"

	"github.com/kinbiko/jsonassert"
	"github.com/stretchr/testify/require"

	"gotests/tests"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/{{clientImport}}"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
)

func create{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}Client(t *testing.T) (*{{clientPrefix}}.APIClient, *tests.EchoRequester) {
  t.Helper()

  echo := &tests.EchoRequester{}
  cfg := {{clientPrefix}}.{{clientName}}Configuration{
    Configuration: transport.Configuration{
      AppID:     "appID",
      ApiKey:    "apiKey",
      Requester: echo,
    },{{#hasRegionalHost}}
    Region:    {{clientPrefix}}.{{#lambda.uppercase}}{{defaultRegion}}{{/lambda.uppercase}},{{/hasRegionalHost}}
  }
  client, err := {{clientPrefix}}.NewClientWithConfig(cfg)
  require.NoError(t, err)

  return client, echo
}

{{#blocksRequests}}
func Test{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}_{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}(t *testing.T) {
    client, echo := create{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}Client(t)
    _ = echo

    {{#tests}} 
    t.Run("{{{testName}}}", func(t *testing.T) {
      {{#hasResponse}}_, {{/hasResponse}}err := {{> tests/method}}
      require.NoError(t, err)

      {{#request}}
      require.Equal(t, "{{path}}", echo.Path)
      require.Equal(t, "{{{method}}}", echo.Method)

      {{#body}}
      ja := jsonassert.New(t)
      ja.Assertf(*echo.Body, `{{{.}}}`)
      {{/body}}
      {{^body}}
      {{#assertNullBody}}
        require.Nil(t, echo.Body)
      {{/assertNullBody}}
      {{^assertNullBody}}
        require.Empty(t, echo.Body);
      {{/assertNullBody}}
      {{/body}}
      {{#headers}}
        headers := map[string]string{}
        require.NoError(t, json.Unmarshal([]byte(`{{{.}}}`), &headers))
        for k, v := range headers {
          require.Equal(t, v, echo.Header.Get(k))
        }
      {{/headers}}
      {{#queryParameters}}
        queryParams := map[string]string{}
        require.NoError(t, json.Unmarshal([]byte(`{{{.}}}`), &queryParams))
        require.Len(t, queryParams, len(echo.Query))
        for k, v := range queryParams {
            require.Equal(t, v, echo.Query.Get(k))
        }
      {{/queryParameters}}
      {{/request}}
    })
{{/tests}}
}

{{/blocksRequests}}

{{#isSearchClient}}
{{> tests/requests/helpers}}
{{/isSearchClient}}