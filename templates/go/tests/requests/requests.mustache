package requests

import (
  "encoding/json"
  "net/url"
  "testing"

  "github.com/kinbiko/jsonassert"
  "github.com/stretchr/testify/require"

  "gotests/tests"

  "github.com/algolia/algoliasearch-client-go/v4/algolia/{{clientImport}}"
  "github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
)

func create{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}Client() (*{{clientPrefix}}.APIClient, *tests.EchoRequester) {
  echo := &tests.EchoRequester{}
  cfg := {{clientPrefix}}.Configuration{
    Configuration: transport.Configuration{
      AppID:     "appID",
      ApiKey:    "apiKey",
      Requester: echo,
    },{{#hasRegionalHost}}
    Region:    {{clientPrefix}}.{{#lambda.uppercase}}{{defaultRegion}}{{/lambda.uppercase}},{{/hasRegionalHost}}
  }
  client, _ := {{clientPrefix}}.NewClientWithConfig(cfg)

  return client, echo
}

{{#blocksRequests}}
func Test{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}_{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}(t *testing.T) {
    client, echo := create{{#lambda.titlecase}}{{clientPrefix}}{{/lambda.titlecase}}Client()

    {{#tests}} 
    t.Run("{{{testName}}}", func(t *testing.T) {
      {{#hasResponsePayload}}_, {{/hasResponsePayload}}err := client.{{#lambda.titlecase}}{{method}}{{/lambda.titlecase}}({{#hasOperationParams}}client.NewApi{{#lambda.titlecase}}{{method}}{{/lambda.titlecase}}Request(
        {{#parametersWithDataType}}{{#required}}{{> tests/generateParams}},{{/required}}{{/parametersWithDataType}}
      ){{#parametersWithDataType}}{{^required}}.With{{#lambda.pascalcase}}{{{key}}}{{/lambda.pascalcase}}({{> tests/generateParams}}){{/required}}{{/parametersWithDataType}}{{/hasOperationParams}}{{#requestOptions}}{{#hasOperationParams}},{{/hasOperationParams}}
      {{#queryParameters.parametersWithDataType}}{{clientPrefix}}.QueryParamOption("{{{key}}}", {{> tests/generateInnerParams}}),{{/queryParameters.parametersWithDataType}}{{#headers.parametersWithDataType}}{{clientPrefix}}.HeaderParamOption("{{{key}}}", {{> tests/generateInnerParams}}),{{/headers.parametersWithDataType}}
      {{/requestOptions}})
      require.NoError(t, err)

      expectedPath, err := url.QueryUnescape("{{{request.path}}}")
      require.NoError(t, err)
      require.Equal(t, expectedPath, echo.Path)
      require.Equal(t, "{{{request.method}}}", echo.Method)

      {{#request.body}}
      ja := jsonassert.New(t)
      ja.Assertf(*echo.Body, `{{{request.body}}}`)
      {{/request.body}}
      {{^request.body}}
      {{#assertNullBody}}
        require.Nil(t, echo.Body)
      {{/assertNullBody}}
      {{^assertNullBody}}
        require.Empty(t, echo.Body);
      {{/assertNullBody}}
      {{/request.body}}
      {{#request.headers}}
        headers := map[string]string{}
        require.NoError(t, json.Unmarshal([]byte(`{{{.}}}`), &headers))
        for k, v := range headers {
          require.Equal(t, v, echo.Header.Get(k))
        }
      {{/request.headers}}
      {{#request.queryParameters}}
        queryParams := map[string]string{}
        require.NoError(t, json.Unmarshal([]byte(`{{{.}}}`), &queryParams))
        for k, v := range queryParams {
            require.Equal(t, v, echo.Query.Get(k))
        }
      {{/request.queryParameters}}
    })
{{/tests}}
}

{{/blocksRequests}}