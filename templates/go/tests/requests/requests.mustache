package tests

import (
  "bytes"
  "io"
  "net/http"
  "os"
  "testing"

  "github.com/stretchr/testify/require"
  "github.com/kinbiko/jsonassert"

  "github.com/algolia/algoliasearch-client-go/algolia/{{clientPrefix}}"
)

type echoRequester struct {
	path string
  method string
  body *string
}

func (e *echoRequester) Request(req *http.Request) (*http.Response, error) {
	e.path = req.URL.Path
  e.method = req.Method
  if req.Body != nil {
    body, _ := io.ReadAll(req.Body)
    strBody := string(body)
    e.body = &strBody
  } else {
    e.body = nil
  }
  

	return &http.Response{
		StatusCode: 200,
		Body:       io.NopCloser(bytes.NewBufferString("")),
	}, nil
} 

var (
  echo *echoRequester
  client *ingestion.APIClient
)

func TestMain(m *testing.M) {
  // reset requester
  echo = &echoRequester{}
  cfg := ingestion.Configuration{
		AppID:     "appID",
		ApiKey:    "apiKey",
		Region: ingestion.US,
		Requester: echo,
	}
	client = ingestion.NewClientWithConfig(cfg)

  code := m.Run()
  os.Exit(code)
}

{{#blocksRequests}}
func Test{{#lambda.titlecase}}{{operationId}}{{/lambda.titlecase}}(t * testing.T) {
  // No parallel because we use the same echoRequester for all tests.

  var err error
  {{#tests}}
  // {{{testName}}}
  _, err = client.{{{method}}}({{#parametersWithDataType}}{{> generateParams}}{{^-last}},{{/-last}}{{/parametersWithDataType}})

  require.NoError(t, err)
  require.Equal(t, "{{{request.path}}}", echo.path)
  require.Equal(t, "{{{request.method}}}", echo.method)
  
  {{#request.body}}
  ja := jsonassert.New(t)
  ja.Assertf(*echo.body, `{{{request.body}}}`)
  {{/request.body}}
  {{^request.body}}
  {{#assertNullBody}}
    require.Nil(t, echo.body)
  {{/assertNullBody}}
  {{^assertNullBody}}
    require.Empty(t, *echo.body);
  {{/assertNullBody}}
{{/request.body}}
  {{/tests}}
}
{{/blocksRequests}}
