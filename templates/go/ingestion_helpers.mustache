/*
ChunkedPush Chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `push` requests by leveraging the Transformation pipeline setup in the Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/).

	@param indexName string - the index name to save objects into.
	@param objects []map[string]any - List of objects to save.
	@param action Action - The action to perform on the objects.
	@param referenceIndexName *string - This is required when targeting an index that does not have a push connector setup (e.g. a tmp index), but you wish to attach another index's transformation to it (e.g. the source index name).
	@param opts ...ChunkedBatchOption - Optional parameters for the request.
	@return []WatchResponse - List of push responses.
	@return error - Error if any.
*/
func (c *APIClient) ChunkedPush(indexName string, objects []map[string]any, action Action, referenceIndexName *string, opts ...ChunkedBatchOption) ([]WatchResponse, error) {
	conf := config{
		headerParams: map[string]string{},
		waitForTasks: false,
		batchSize:    1000,
	}

	for _, opt := range opts {
		opt.apply(&conf)
	}

	records := make([]map[string]any, 0, len(objects)%conf.batchSize)
	responses := make([]WatchResponse, 0, len(objects)%conf.batchSize)

	for i, obj := range objects {
		records = append(records, obj)

		if len(records) == conf.batchSize || i == len(objects)-1 {
			pushRecords := make([]PushTaskRecords, 0, len(records))

			rawRecords, err := json.Marshal(records)
			if err != nil {
				return nil, reportError("unable to marshal the given `objects`: %w", err)
			}

			err = json.Unmarshal(rawRecords, &pushRecords)
			if err != nil {
				return nil, reportError("unable to unmarshal the given `objects` to an `[]PushTaskRecords` payload: %w", err)
			}

      request := c.NewApiPushRequest(
					indexName,
					NewEmptyPushTaskPayload().
						SetAction(action).
						SetRecords(pushRecords),
				)

      if referenceIndexName != nil {
        request = request.WithReferenceIndexName(*referenceIndexName)
      }

			resp, err := c.Push(request)
			if err != nil {
				return nil, err //nolint: wrapcheck
			}

			responses = append(responses, *resp)
			records = make([]map[string]any, 0, len(objects)%conf.batchSize)
		}


	  if conf.waitForTasks && (len(responses) % 50 == 0 || i == len(objects)-1) { 
      var waitableResponses []WatchResponse

      if len(responses) > 50 {
        waitableResponses = responses[len(responses)-50:]
      } else {
        waitableResponses = responses
      }

	  	for _, resp := range waitableResponses {
        _, err := CreateIterable( //nolint:wrapcheck
	  			func(*Event, error) (*Event, error) {
            if resp.EventID == nil {
	  			    return nil, reportError("received unexpected response from the push endpoint, eventID must not be undefined")
            }

	  				return c.GetEvent(c.NewApiGetEventRequest(resp.RunID, *resp.EventID))
	  			},
	  			func(response *Event, err error) (bool, error) {
	  				var apiErr *APIError
	  				if errors.As(err, &apiErr) {
	  					return apiErr.Status != 404, nil
	  				}

	  				return true, err
	  			},
	  			WithTimeout(func(count int) time.Duration { return time.Duration(min(500*count, 5000)) * time.Millisecond }), WithMaxRetries(50),
	  		)
	  		if err != nil {
	  			return nil, err
	  		}
	  	}
	  }
	}

	return responses, nil
}