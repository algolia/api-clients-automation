// ChunkedPush Chunks the given `objects` list in subset of 1000 elements max in order to make it fit in `push` requests by leveraging the Transformation pipeline setup in the Push connector (https://www.algolia.com/doc/guides/sending-and-managing-data/send-and-update-your-data/connectors/push/).
//
// Parameters:
//   - transformationID - Unique identifier of a transformation.
//   - indexName string - the index name to save objects into.
//   - objects []map[string]any - List of objects to save.
//   - action Action - The action to perform on the objects.
//   - referenceIndexName *string - This is required when targeting an index that does not have a push connector setup (e.g. a tmp index), but you wish to attach another index's transformation to it (e.g. the source index name).
//   - opts - Optional parameters for the API call (e.g. WithHeaderParam, WithReadTimeout...)
func (c *APIClient) ChunkedPush(ctx context.Context, indexName string, objects []map[string]any, action Action, referenceIndexName *string, opts ...ChunkedBatchOption) ([]WatchResponse, error) {
	conf := config{
		headerParams: map[string]string{},
		waitForTasks: false,
		batchSize:    1000,
	}

	offset := 0
	waitBatchSize := conf.batchSize / 10
	if waitBatchSize < 1 {
		waitBatchSize = conf.batchSize
	}

	for _, opt := range opts {
		opt.apply(&conf)
	}

	records := make([]map[string]any, 0, len(objects)%conf.batchSize)
	responses := make([]WatchResponse, 0, len(objects)%conf.batchSize)

	for i, obj := range objects {
		records = append(records, obj)

		if len(records) == conf.batchSize || i == len(objects)-1 {
			pushRecords := make([]PushTaskRecords, 0, len(records))

			rawRecords, err := json.Marshal(records)
			if err != nil {
				return nil, reportError("unable to marshal the given `objects`: %w", err)
			}

			err = json.Unmarshal(rawRecords, &pushRecords)
			if err != nil {
				return nil, reportError("unable to unmarshal the given `objects` to an `[]PushTaskRecords` payload: %w", err)
			}

			opts := NewPushOptions()
			if referenceIndexName != nil {
				opts = opts.WithReferenceIndexName(*referenceIndexName)
			}

			resp, err := c.Push(ctx, indexName, action, pushRecords, opts)
			if err != nil {
				return nil, err //nolint: wrapcheck
			}

			responses = append(responses, *resp)
			records = make([]map[string]any, 0, len(objects)%conf.batchSize)
		}

		if conf.waitForTasks && len(responses) > 0 && (len(responses)%waitBatchSize == 0 || i == len(objects)-1) {
			var waitableResponses []WatchResponse

			if len(responses) > offset+waitBatchSize {
				waitableResponses = responses[offset:waitBatchSize]
			} else {
				waitableResponses = responses[offset:]
			}

			for _, resp := range waitableResponses {
				_, err := CreateIterable(
					func(*Event, error) (*Event, error) {
						if resp.EventID == nil {
							return nil, reportError("received unexpected response from the push endpoint, eventID must not be undefined")
						}

						return c.GetEvent(ctx, resp.RunID, *resp.EventID)
					},
					func(response *Event, err error) (bool, error) {
						var apiErr *APIError
						if errors.As(err, &apiErr) {
							return apiErr.Status != 404, nil
						}

						return true, err
					},
					WithTimeout(func(count int) time.Duration { return time.Duration(min(500*count, 5000)) * time.Millisecond }), WithMaxRetries(50),
				)
				if err != nil {
					return nil, err
				}
			}

			offset += waitBatchSize
		}
	}

	return responses, nil
}
