// {{classname}} {{{description}}}{{^description}}struct for {{{classname}}}{{/description}}.
type {{classname}}{{> generic_init}} struct {
{{#parent}}
{{^isMap}}
{{^isArray}}
	{{{parent}}}
{{/isArray}}
{{/isMap}}
{{#isArray}}
	Items {{{parent}}}
{{/isArray}}
{{/parent}}
{{#vars}}
  {{#description}}
    // {{{.}}}
  {{/description}}
  {{#deprecated}}
    // Deprecated
  {{/deprecated}}
	{{name}} {{^required}}{{^isNullable}}{{^isArray}}{{^isFreeFormObject}}*{{/isFreeFormObject}}{{/isArray}}{{/isNullable}}{{/required}}{{> generic_type}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`
{{/vars}}
{{#isAdditionalPropertiesTrue}}
	AdditionalProperties map[string]any
{{/isAdditionalPropertiesTrue}}
}

{{#isAdditionalPropertiesTrue}}
type _{{classname}}{{> generic_init}} {{classname}}{{> generic_param}}

{{/isAdditionalPropertiesTrue}}
{{#hasOptional}}
type {{{classname}}}Option{{> generic_init}} func(f *{{{classname}}}{{> generic_param}})

{{/hasOptional}}
{{#vendorExtensions}}{{#vars}}{{^required}}
func With{{{classname}}}{{{name}}}{{#x-has-child-generic}}[T any]{{/x-has-child-generic}}(val {{{dataType}}}) {{{classname}}}Option{{#x-has-child-generic}}[T]{{/x-has-child-generic}} {
	return func(f *{{{classname}}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) {
		f.{{{name}}} = {{^isNullable}}{{^isArray}}{{^isFreeFormObject}}&{{/isFreeFormObject}}{{/isArray}}{{/isNullable}}val
	}
}

{{/required}}{{/vars}}{{/vendorExtensions}}
// New{{classname}} instantiates a new {{classname}} object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed.
func New{{classname}}{{> generic_init}}({{#requiredVars}}{{nameInCamelCase}} {{> generic_type}}{{^-last}}, {{/-last}}{{/requiredVars}}{{#hasOptional}}{{#requiredVars.0}}, {{/requiredVars.0}}opts ...{{{classname}}}Option{{> generic_param}}{{/hasOptional}}) *{{classname}}{{> generic_param}} {
	this := &{{classname}}{{> generic_param}}{}
{{#allVars}}
{{#required}}
	this.{{name}} = {{nameInCamelCase}}
{{/required}}
{{^required}}
{{/required}}
{{/allVars}}
{{#hasOptional}}
for _, opt := range opts {
  opt(this)
}
{{/hasOptional}}
	return this
}

// NewEmpty{{classname}} return a pointer to an empty {{classname}} object.
func NewEmpty{{classname}}{{> generic_init}}() *{{classname}}{{> generic_param}} {
  return &{{classname}}{{> generic_param}}{}
}

{{#vendorExtensions}}
{{#vars}}
{{#required}}
// Get{{name}} returns the {{name}} field value.
{{#isNullable}}
// If the value is explicit nil, the zero value for {{> generic_type}} will be returned.
{{/isNullable}}
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Get{{name}}() {{> generic_type}} {
	if o == nil{{#isNullable}}{{^vendorExtensions.x-golang-is-container}} || o.{{name}}.Get() == nil{{/vendorExtensions.x-golang-is-container}}{{/isNullable}} {
		var ret {{> generic_type}}
		return ret
	}

{{#isNullable}}
{{#vendorExtensions.x-golang-is-container}}
	return o.{{name}}
{{/vendorExtensions.x-golang-is-container}}
{{^vendorExtensions.x-golang-is-container}}
	return *o.{{name}}.Get()
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}
{{^isNullable}}
	return o.{{name}}
{{/isNullable}}
}

// Get{{name}}Ok returns a tuple with the {{name}} field value
// and a boolean to check if the value has been set.
{{#isNullable}}
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
{{/isNullable}}
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Get{{name}}Ok() ({{^isArray}}{{^isFreeFormObject}}*{{/isFreeFormObject}}{{/isArray}}{{> generic_type}}, bool) {
	if o == nil{{#isNullable}}{{#vendorExtensions.x-golang-is-container}} || o.{{name}} == nil{{/vendorExtensions.x-golang-is-container}}{{/isNullable}} {
		return nil, false
	}
{{#isNullable}}
{{#vendorExtensions.x-golang-is-container}}
	return {{^isArray}}{{^isFreeFormObject}}&{{/isFreeFormObject}}{{/isArray}}o.{{name}}, true
{{/vendorExtensions.x-golang-is-container}}
{{^vendorExtensions.x-golang-is-container}}
	return o.{{name}}.Get(), o.{{name}}.IsSet()
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}
{{^isNullable}}
	return {{^isArray}}{{^isFreeFormObject}}&{{/isFreeFormObject}}{{/isArray}}o.{{name}}, true
{{/isNullable}}
}

// Set{{name}} sets field value.
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Set{{name}}(v {{#isModel}}*{{/isModel}}{{> generic_type}}) *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}} {
{{#isNullable}}
{{#vendorExtensions.x-golang-is-container}}
	o.{{name}} = v
{{/vendorExtensions.x-golang-is-container}}
{{^vendorExtensions.x-golang-is-container}}
	o.{{name}}.Set({{^isModel}}&{{/isModel}}v)
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}
{{^isNullable}}
	o.{{name}} = {{#isModel}}*{{/isModel}}v
{{/isNullable}}
  return o
}

{{/required}}
{{^required}}
// Get{{name}} returns the {{name}} field value if set, zero value otherwise{{#isNullable}} (both if not set or set to explicit null){{/isNullable}}.
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Get{{name}}() {{> generic_type}} {
	if o == nil{{^isNullable}} || o.{{name}} == nil{{/isNullable}}{{#isNullable}}{{^vendorExtensions.x-golang-is-container}} || o.{{name}}.Get() == nil{{/vendorExtensions.x-golang-is-container}}{{/isNullable}} {
		var ret {{> generic_type}}
		return ret
	}
{{#isNullable}}
{{#vendorExtensions.x-golang-is-container}}
	return o.{{name}}
{{/vendorExtensions.x-golang-is-container}}
{{^vendorExtensions.x-golang-is-container}}
	return *o.{{name}}.Get()
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}
{{^isNullable}}
	return {{^isArray}}{{^isFreeFormObject}}*{{/isFreeFormObject}}{{/isArray}}o.{{name}}
{{/isNullable}}
}

// Get{{name}}Ok returns a tuple with the {{name}} field value if set, nil otherwise
// and a boolean to check if the value has been set.
{{#isNullable}}
// NOTE: If the value is an explicit nil, `nil, true` will be returned.
{{/isNullable}}
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Get{{name}}Ok() ({{^isArray}}{{^isFreeFormObject}}*{{/isFreeFormObject}}{{/isArray}}{{> generic_type}}, bool) {
	if o == nil{{^isNullable}} || o.{{name}} == nil{{/isNullable}}{{#isNullable}}{{#vendorExtensions.x-golang-is-container}} || o.{{name}} == nil{{/vendorExtensions.x-golang-is-container}}{{/isNullable}} {
		return nil, false
	}
{{#isNullable}}
{{#vendorExtensions.x-golang-is-container}}
	return {{^isArray}}{{^isFreeFormObject}}&{{/isFreeFormObject}}{{/isArray}}o.{{name}}, true
{{/vendorExtensions.x-golang-is-container}}
{{^vendorExtensions.x-golang-is-container}}
	return o.{{name}}.Get(), o.{{name}}.IsSet()
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}
{{^isNullable}}
	return o.{{name}}, true
{{/isNullable}}
}

// Has{{name}} returns a boolean if a field has been set.
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Has{{name}}() bool {
	if o != nil && {{^isNullable}}o.{{name}} != nil{{/isNullable}}{{#isNullable}}{{#vendorExtensions.x-golang-is-container}}o.{{name}} != nil{{/vendorExtensions.x-golang-is-container}}{{^vendorExtensions.x-golang-is-container}}o.{{name}}.IsSet(){{/vendorExtensions.x-golang-is-container}}{{/isNullable}} {
		return true
	}

	return false
}

// Set{{name}} gets a reference to the given {{dataType}} and assigns it to the {{name}} field.
{{#deprecated}}
// Deprecated
{{/deprecated}}
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Set{{name}}(v {{#isModel}}*{{/isModel}}{{> generic_type}}) *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}} {
{{#isNullable}}
{{#vendorExtensions.x-golang-is-container}}
	o.{{name}} = v
{{/vendorExtensions.x-golang-is-container}}
{{^vendorExtensions.x-golang-is-container}}
	o.{{name}}.Set({{^isArray}}{{^isModel}}{{^isFreeFormObject}}&{{/isFreeFormObject}}{{/isModel}}{{/isArray}}v)
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}
{{^isNullable}}
	o.{{name}} = {{^isArray}}{{^isModel}}{{^isFreeFormObject}}&{{/isFreeFormObject}}{{/isModel}}{{/isArray}}v
{{/isNullable}}
  return o
}
{{#isNullable}}
{{^vendorExtensions.x-golang-is-container}}
// Set{{name}}Nil sets the value for {{name}} to be an explicit nil
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Set{{name}}Nil() {
	o.{{name}}.Set(nil)
}

// Unset{{name}} ensures that no value is present for {{name}}, not even an explicit nil
func (o *{{classname}}{{#x-has-child-generic}}[T]{{/x-has-child-generic}}) Unset{{name}}() {
	o.{{name}}.Unset()
}
{{/vendorExtensions.x-golang-is-container}}
{{/isNullable}}

{{/required}}
{{/vars}}
{{/vendorExtensions}}

{{#isAdditionalPropertiesTrue}}
func (o *{{{classname}}}{{> generic_param}}) SetAdditionalProperty(key string, value any) *{{{classname}}}{{> generic_param}} {
  if o.AdditionalProperties == nil {
    o.AdditionalProperties = make(map[string]any)
  }

  o.AdditionalProperties[key] = value

  return o
}
{{/isAdditionalPropertiesTrue}}

func (o {{classname}}{{> generic_param}}) MarshalJSON() ([]byte, error) {
	toSerialize := {{#isArray}}make([]any, len(o.Items)){{/isArray}}{{^isArray}}map[string]any{}{{/isArray}}
	{{#parent}}
	{{^isMap}}
	{{^isArray}}
	serialized{{parent}}, err{{parent}} := json.Marshal(o.{{parent}})
	if err{{parent}} != nil {
		return []byte{}, fmt.Errorf("failed to marshal property {{parent}} of {{classname}}: %w", err{{parent}})
	}
	err{{parent}} = json.Unmarshal([]byte(serialized{{parent}}), &toSerialize)
	if err{{parent}} != nil {
		return []byte{}, fmt.Errorf("failed to unmarshal property {{parent}} of {{classname}}: %w", err{{parent}})
	}
	{{/isArray}}
	{{/isMap}}
	{{#isArray}}
	for i, item := range o.Items {
		toSerialize[i] = item
	}
	{{/isArray}}
	{{/parent}}
	{{#vars}}
	{{! if argument is nullable, only serialize it if it is set}}
	{{#isNullable}}
	{{#vendorExtensions.x-golang-is-container}}
	{{! support for container fields is not ideal at this point because of lack of Nullable* types}}
	if o.{{name}} != nil {
		toSerialize["{{baseName}}"] = o.{{name}}
	}
	{{/vendorExtensions.x-golang-is-container}}
	{{^vendorExtensions.x-golang-is-container}}
	if {{#required}}true{{/required}}{{^required}}o.{{name}}.IsSet(){{/required}} {
		toSerialize["{{baseName}}"] = o.{{name}}.Get()
	}
	{{/vendorExtensions.x-golang-is-container}}
	{{/isNullable}}
	{{! if argument is not nullable, don't set it if it is nil}}
	{{^isNullable}}
	if {{#required}}true{{/required}}{{^required}}o.{{name}} != nil{{/required}} {
		toSerialize["{{baseName}}"] = o.{{name}}
	}
	{{/isNullable}}
	{{/vars}}
	{{#isAdditionalPropertiesTrue}}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	{{/isAdditionalPropertiesTrue}}
	serialized, err := json.Marshal(toSerialize)
  if err != nil {
    return nil, fmt.Errorf("failed to marshal {{classname}}: %w", err)
  }

  return serialized, nil
}

{{#isAdditionalPropertiesTrue}}
func (o *{{classname}}{{> generic_param}}) UnmarshalJSON(bytes []byte) error {
{{#parent}}
{{^isMap}}
	type {{classname}}WithoutEmbeddedStruct{{> generic_param}} struct {
	{{#vars}}
	{{^-first}}
	{{/-first}}
	{{#description}}
		// {{{.}}}
	{{/description}}
	{{#deprecated}}
		// Deprecated
	{{/deprecated}}
		{{name}} {{^required}}{{^isNullable}}{{^isArray}}{{^isFreeFormObject}}*{{/isFreeFormObject}}{{/isArray}}{{/isNullable}}{{/required}}{{#vendorExtensions.x-has-child-generic}}T{{/vendorExtensions.x-has-child-generic}}{{^vendorExtensions.x-has-child-generic}}{{{dataType}}}{{/vendorExtensions.x-has-child-generic}} `json:"{{baseName}}{{^required}},omitempty{{/required}}"{{#withXml}} xml:"{{baseName}}{{#isXmlAttribute}},attr{{/isXmlAttribute}}"{{/withXml}}{{#vendorExtensions.x-go-custom-tag}} {{{.}}}{{/vendorExtensions.x-go-custom-tag}}`
	{{/vars}}
	}

	var{{{classname}}}WithoutEmbeddedStruct := {{classname}}WithoutEmbeddedStruct{{> generic_param}}{}

	err = json.Unmarshal(bytes, &var{{classname}}WithoutEmbeddedStruct)
	if err == nil {
		var{{classname}} := _{{classname}}{}
		{{#vars}}
		var{{classname}}.{{name}} = var{{classname}}WithoutEmbeddedStruct.{{name}}
		{{/vars}}
		*o = {{classname}}{{> generic_param}}(var{{classname}})
	} else {
		return fmt.Errorf("failed to unmarshal {{classname}}WithoutEmbeddedStruct: %w", err)
	}

	var{{classname}} := _{{classname}}{{> generic_param}}{}

	err = json.Unmarshal(bytes, &var{{classname}})
	if err == nil {
		o.{{parent}} = var{{classname}}.{{parent}}
	} else {
		return fmt.Errorf("failed to unmarshal {{{classname}}}: %w", err)
	}

	additionalProperties := make(map[string]any)

	err = json.Unmarshal(bytes, &additionalProperties)
  if err != nil {
    return fmt.Errorf("failed to unmarshal {{classname}}: %w", err)
  }

  {{#vars}}
  delete(additionalProperties, "{{baseName}}")
  {{/vars}}

  // remove fields from embedded structs
  reflect{{parent}} := reflect.ValueOf(o.{{parent}})
  for i := 0; i < reflect{{parent}}.Type().NumField(); i++ {
    t := reflect{{parent}}.Type().Field(i)

    if jsonTag := t.Tag.Get("json"); jsonTag != "" {
      fieldName := ""
      if commaIdx := strings.Index(jsonTag, ","); commaIdx > 0 {
        fieldName = jsonTag[:commaIdx]
      } else {
        fieldName = jsonTag
      }
      if fieldName != "AdditionalProperties" {
        delete(additionalProperties, fieldName)
      }
    }
  }

  o.AdditionalProperties = additionalProperties

  return nil
{{/isMap}}
{{#isMap}}
	var{{classname}} := _{{classname}}{{> generic_param}}{}

  err := json.Unmarshal(bytes, &var{{classname}})
  if err != nil {
    return fmt.Errorf("failed to unmarshal {{classname}}: %w", err)
  }

	*o = {{classname}}{{> generic_param}}(var{{classname}})

	additionalProperties := make(map[string]any)

	err = json.Unmarshal(bytes, &additionalProperties)
  if err != nil {
    return fmt.Errorf("failed to unmarshal additionalProperties in {{classname}}: %w", err)
  }

  {{#vars}}
  delete(additionalProperties, "{{baseName}}")
  {{/vars}}
  o.AdditionalProperties = additionalProperties

	return nil
{{/isMap}}
{{/parent}}
{{^parent}}
	var{{classname}} := _{{classname}}{{> generic_param}}{}

  err := json.Unmarshal(bytes, &var{{classname}})
  if err != nil {
    return fmt.Errorf("failed to unmarshal {{classname}}: %w", err)
  }

	*o = {{classname}}{{> generic_param}}(var{{classname}})

	additionalProperties := make(map[string]any)

	err = json.Unmarshal(bytes, &additionalProperties)
  if err != nil {
    return fmt.Errorf("failed to unmarshal additionalProperties in {{classname}}: %w", err)
  }

  {{#vars}}
  delete(additionalProperties, "{{baseName}}")
  {{/vars}}
  o.AdditionalProperties = additionalProperties
	
  return nil
  {{/parent}}
}

{{/isAdditionalPropertiesTrue}}
{{#isArray}}
func (o *{{classname}}{{> generic_param}}) UnmarshalJSON(bytes []byte) error {
	return json.Unmarshal(bytes, &o.Items)
}

{{/isArray}}
func (o {{classname}}{{> generic_param}}) String() string {
  out := ""
	{{#vars}}
  out += fmt.Sprintf("  {{baseName}}=%v\n", o.{{name}})
	{{/vars}}
	{{#isAdditionalPropertiesTrue}}
	for key, value := range o.AdditionalProperties {
		out += fmt.Sprintf("  %s=%v\n", key, value)
	}
	{{/isAdditionalPropertiesTrue}}
  return fmt.Sprintf("{{classname}} {\n%s}", out)
}
{{> nullable_model}}
