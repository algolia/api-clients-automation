// {{classname}} - {{{description}}}{{^description}}struct for {{{classname}}}{{/description}}
type {{classname}} struct {
	{{#oneOf}}
	{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} *{{{.}}}
	{{/oneOf}}
}

{{#composedSchemas.oneOf}}
// {{{datatypeWithEnum}}}As{{classname}} is a convenience function that returns {{{datatypeWithEnum}}} wrapped in {{classname}}
func {{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}As{{classname}}(v {{#isModel}}*{{/isModel}}{{{datatypeWithEnum}}}) *{{classname}} {
	return &{{classname}}{
		{{#lambda.type-to-name}}{{{datatypeWithEnum}}}{{/lambda.type-to-name}}: {{^isModel}}&{{/isModel}}v,
	}
}

{{/composedSchemas.oneOf}}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *{{classname}}) UnmarshalJSON(data []byte) error {
	var err error
	{{#isNullable}}
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	{{/isNullable}}
  {{#vendorExtensions.x-has-discriminator}}
  // use discriminator value to speed up the lookup if possible, if not we will try every possibility
  var jsonDict map[string]any
  _ = newStrictDecoder(data).Decode(&jsonDict)
  {{/vendorExtensions.x-has-discriminator}}
  {{#composedSchemas.oneOf}}
  {{#vendorExtensions.x-discriminator-fields.size}}
  if {{#vendorExtensions.x-discriminator-fields}}utils.HasKey(jsonDict, "{{.}}"){{^-last}} && {{/-last}}{{/vendorExtensions.x-discriminator-fields}} {
  {{/vendorExtensions.x-discriminator-fields.size}}
    // try to unmarshal data into {{#lambda.type-to-name}}{{{dataType}}}{{/lambda.type-to-name}}
    err = newStrictDecoder(data).Decode(&dst.{{#lambda.type-to-name}}{{{dataType}}}{{/lambda.type-to-name}})
    if err == nil && validateStruct(dst.{{#lambda.type-to-name}}{{{dataType}}}{{/lambda.type-to-name}}) == nil {
      return nil // found the correct type
    } else {
      dst.{{#lambda.type-to-name}}{{{dataType}}}{{/lambda.type-to-name}} = nil
    }
  {{#vendorExtensions.x-discriminator-fields.size}}
  }
  {{/vendorExtensions.x-discriminator-fields.size}}
  {{/composedSchemas.oneOf}}

  return fmt.Errorf("Data failed to match schemas in oneOf({{classname}})")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src {{classname}}) MarshalJSON() ([]byte, error) {
{{#oneOf}}
	if src.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} != nil {
		serialized, err := json.Marshal(&src.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}})
    if err != nil {
      return nil, fmt.Errorf("failed to unmarshal one of {{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} of {{classname}}: %w", err)
    }

    return serialized, nil
	}

{{/oneOf}}
	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj {{classname}}) GetActualInstance() (any) {
{{#oneOf}}
	if obj.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}} != nil {
		return *obj.{{#lambda.type-to-name}}{{{.}}}{{/lambda.type-to-name}}
	}

{{/oneOf}}
	// all schemas are nil
	return nil
}
