{{#model}}
    /// <summary>
    /// {{{description}}}{{^description}}{{classname}}{{/description}}
    /// </summary>
    {{#vendorExtensions.x-cls-compliant}}
    [CLSCompliant({{{.}}})]
    {{/vendorExtensions.x-cls-compliant}}
    {{#vendorExtensions.x-com-visible}}
    [ComVisible({{{.}}})]
    {{/vendorExtensions.x-com-visible}}
    {{^vendorExtensions.x-has-child-generic}}
    [JsonConverter(typeof({{classname}}JsonConverter))]
    {{/vendorExtensions.x-has-child-generic}}
    {{> visibility}} partial class {{classname}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}} : {{#lambda.joinWithComma}}AbstractSchema  {{#parent}}{{{.}}}  {{/parent}}{{#equatable}}IEquatable<{{classname}}>  {{/equatable}}{{#validatable}}IValidatableObject  {{/validatable}}{{/lambda.joinWithComma}}
    {
        {{#isNullable}}
        /// <summary>
        /// Initializes a new instance of the {{classname}} class.
        /// </summary>
        public {{classname}}()
        {
            this.IsNullable = true;
            this.SchemaType= "oneOf";
        }

        {{/isNullable}}
        {{#composedSchemas.oneOf}}
        {{^vendorExtensions.x-has-child-generic}}
        {{^vendorExtensions.x-duplicated-data-type}}
        {{^isNull}}
        /// <summary>
        /// Initializes a new instance of the {{classname}} class
        /// with a {{#lambdaCref}}{{{dataType}}}{{/lambdaCref}}
        /// </summary>
        /// <param name="actualInstance">An instance of {{dataType}}.</param>
        public {{classname}}({{{dataType}}} actualInstance)
        {
            IsNullable = {{#model.isNullable}}true{{/model.isNullable}}{{^model.isNullable}}false{{/model.isNullable}};
            SchemaType= "oneOf";
            ActualInstance = actualInstance{{^model.isNullable}}{{^isPrimitiveType}}{{^allowableValues}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/allowableValues}}{{/isPrimitiveType}}{{#isPrimitiveType}}{{#isArray}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isArray}}{{#isFreeFormObject}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isFreeFormObject}}{{#isString}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isString}}{{/isPrimitiveType}}{{/model.isNullable}};
        }
        {{/isNull}}
        {{/vendorExtensions.x-duplicated-data-type}}
        {{/vendorExtensions.x-has-child-generic}}

        {{#vendorExtensions.x-has-child-generic}}
          /// <summary>
          /// Initializes a new instance of the {{classname}} class
          /// with a {{#lambdaCref}}{{{dataType}}}{{/lambdaCref}}
          /// </summary>
          /// <param name="actualInstance">An instance of {{dataType}}.</param>
          public {{classname}}(object actualInstance)
          {
              IsNullable = {{#model.isNullable}}true{{/model.isNullable}}{{^model.isNullable}}false{{/model.isNullable}};
              SchemaType= "oneOf";
              ActualInstance = actualInstance{{^model.isNullable}}{{^isPrimitiveType}}{{^allowableValues}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/allowableValues}}{{/isPrimitiveType}}{{#isPrimitiveType}}{{#isArray}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isArray}}{{#isFreeFormObject}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isFreeFormObject}}{{#isString}} ?? throw new ArgumentException("Invalid instance found. Must not be null."){{/isString}}{{/isPrimitiveType}}{{/model.isNullable}};
          }
        {{/vendorExtensions.x-has-child-generic}}
        {{/composedSchemas.oneOf}}

        /// <summary>
        /// Gets or Sets ActualInstance
        /// </summary>
        public sealed override object ActualInstance { get; set; }
        {{#composedSchemas.oneOf}}
        {{^vendorExtensions.x-duplicated-data-type}}
        {{^isNull}}

        /// <summary>
        /// {{#lambda.escape-generic}}Get the actual instance of `{{{dataType}}}`. If the actual instance is not `{{{dataType}}}`,
        /// the InvalidClassException will be thrown{{/lambda.escape-generic}}
        /// </summary>
        /// <returns>An instance of {{#lambda.escape-generic}}{{dataType}}{{/lambda.escape-generic}}</returns>
        public {{{dataType}}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}} As{{#lambda.titlecase}}{{baseType}}{{/lambda.titlecase}}{{#isArray}}{{^complexType}}{{#lambda.titlecase}}{{{items.dataType}}}{{/lambda.titlecase}}{{/complexType}}{{/isArray}}()
        {
            return ({{{dataType}}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}})ActualInstance;
        }
        {{/isNull}}
        {{/vendorExtensions.x-duplicated-data-type}}
        {{/composedSchemas.oneOf}}

        {{#composedSchemas.oneOf}}
          {{^vendorExtensions.x-duplicated-data-type}}
            {{^isNull}}

                /// <summary>
                /// {{#lambda.escape-generic}}Check if the actual instance is of `{{{dataType}}}` type.{{/lambda.escape-generic}}
                /// </summary>
                /// <returns>Whether or not the instance is the type</returns>
                public bool Is{{#lambda.titlecase}}{{baseType}}{{/lambda.titlecase}}{{#isArray}}{{^complexType}}{{#lambda.titlecase}}{{{items.dataType}}}{{/lambda.titlecase}}{{/complexType}}{{/isArray}}()
                {
                    return ActualInstance.GetType() == typeof({{{dataType}}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}});
                }
            {{/isNull}}
          {{/vendorExtensions.x-duplicated-data-type}}
        {{/composedSchemas.oneOf}}

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class {{classname}} {\n");
            sb.Append("  ActualInstance: ").Append(ActualInstance).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public override string ToJson()
        {
          return JsonSerializer.Serialize(ActualInstance, JsonConfig.Options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is not {{classname}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}} input)
            {
              return false;
            }

            return ActualInstance.Equals(input.ActualInstance);
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (ActualInstance != null)
                    hashCode = hashCode * 59 + ActualInstance.GetHashCode();
                return hashCode;
            }
        }
    }



    {{#vendorExtensions.x-has-child-generic}}
    /// <summary>
    /// Custom JSON converter factory for {{classname}}
    /// </summary>
    public class {{classname}}ConverterFactory : JsonConverterFactory
    {
      /// <summary>
      /// Check if the type is a {{classname}}
      /// </summary>
      public override bool CanConvert(Type typeToConvert)
      {
        return typeToConvert.IsGenericType && typeToConvert.GetGenericTypeDefinition() == typeof({{classname}}<>);
      }

      /// <summary>
      /// Create a new converter
      /// </summary>
      public override JsonConverter CreateConverter(Type typeToConvert, JsonSerializerOptions options)
      {
        var innerType = typeToConvert.GetGenericArguments()[0];

        JsonConverter converter = (JsonConverter)Activator.CreateInstance(
          typeof({{classname}}JsonConverter<>).MakeGenericType(innerType),
          BindingFlags.Instance | BindingFlags.Public,
          binder: null,
          args: [],
          culture: null)!;

        return converter;
      }
    }
    {{/vendorExtensions.x-has-child-generic}}


    /// <summary>
    /// Custom JSON converter for {{classname}}
    /// </summary>
    public class {{classname}}JsonConverter{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}} : JsonConverter<{{classname}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}}>
    {
      {{#vendorExtensions.x-has-child-generic}}
      /// <summary>
      /// The value converter
      /// </summary>
      public {{classname}}JsonConverter()
      {
      }
      {{/vendorExtensions.x-has-child-generic}}

      /// <summary>
      /// Check if the object can be converted
      /// </summary>
      /// <param name="objectType">Object type</param>
      /// <returns>True if the object can be converted</returns>
      public override bool CanConvert(Type objectType)
      {
      return objectType == typeof({{classname}}{{#vendorExtensions}}{{#x-has-child-generic}}<T>{{/x-has-child-generic}}{{/vendorExtensions}});
      }

      /// <summary>
      /// To convert a JSON string into an object
      /// </summary>
      /// <param name="reader">JSON reader</param>
      /// <param name="typeToConvert">Object type</param>
      /// <param name="options">Serializer options</param>
      /// <returns>The object converted from the JSON string</returns>
      public override {{classname}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}} Read(ref Utf8JsonReader reader, Type typeToConvert, JsonSerializerOptions options)
      {
        {{#vendorExtensions}}
        var jsonDocument = JsonDocument.ParseValue(ref reader);
        var root = jsonDocument.RootElement;
        {{#composedSchemas.oneOf}}
        if (root.ValueKind == JsonValueKind.{{#isModel}}Object{{#vendorExtensions.x-discriminator-fields}} && root.TryGetProperty("{{{.}}}", out _){{/vendorExtensions.x-discriminator-fields}}{{/isModel}}{{#isEnumRef}}String{{/isEnumRef}}{{#isArray}}Array{{/isArray}}{{#isInteger}}Number{{/isInteger}}{{#isLong}}Number{{/isLong}}{{#isDouble}}Number{{/isDouble}}{{#isBoolean}}True || root.ValueKind == JsonValueKind.False{{/isBoolean}}{{#isString}}String{{/isString}}{{^isEnumRef}}{{^isModel}}{{^isArray}}{{^isInteger}}{{^isLong}}{{^isDouble}}{{^isBoolean}}{{^isString}}Object{{/isString}}{{/isBoolean}}{{/isDouble}}{{/isLong}}{{/isInteger}}{{/isArray}}{{/isModel}}{{/isEnumRef}})
        {
          try
          {
            return new {{classname}}{{#x-has-child-generic}}<T>{{/x-has-child-generic}}(jsonDocument.Deserialize<{{{datatypeWithEnum}}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}}>(JsonConfig.Options));
          }
          catch (Exception exception)
          {
            // deserialization failed, try the next one
            System.Diagnostics.Debug.WriteLine($"Failed to deserialize into {{{datatypeWithEnum}}}: {exception}");
          }
        }
        {{/composedSchemas.oneOf}}
        {{/vendorExtensions}}
        throw new InvalidDataException($"The JSON string cannot be deserialized into any schema defined.");
      }

      /// <summary>
      /// To write the JSON string
      /// </summary>
      /// <param name="writer">JSON writer</param>
      /// <param name="value">{{classname}} to be converted into a JSON string</param>
      /// <param name="options">JSON Serializer options</param>
      public override void Write(Utf8JsonWriter writer, {{classname}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}} value, JsonSerializerOptions options)
      {
        writer.WriteRawValue(value.ToJson());
      }
    }
{{/model}}
