//
// {{{generationBanner}}}
//
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
{{#hasImport}}using Algolia.Search.Models.{{apiPackageName}};
{{/hasImport}}
using Algolia.Search.Transport;
using Algolia.Search.Http;
using Algolia.Search.Utils;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;

namespace Algolia.Search.Clients;

  {{#operations}}

  {{#supportsAsync}}
  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  {{> visibility}} {{#isSearchClient}}partial {{/isSearchClient}}interface {{interfacePrefix}}{{classname}}
  {
      {{#operation}}
      /// <summary>
      /// {{{notes}}}
      /// </summary>{{#vendorExtensions}}{{#x-acl.0}}
      ///
      /// Required API Key ACLs:{{/x-acl.0}}
      {{#x-acl}}
      ///   - {{.}}
      {{/x-acl}}
      {{/vendorExtensions}}
      {{#allParams}}
      /// <param name="{{paramName}}">{{{description}}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
      {{/allParams}}
      /// <param name="options">Add extra http header or query parameters to Algolia.</param>
      /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
      /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
      /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
      /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
      /// <returns>Task of {{> return_type_doc}}</returns>
      {{#isDeprecated}}
      [Obsolete]
      {{/isDeprecated}}
      Task{{#returnType}}<{{> return_type}}>{{/returnType}} {{operationId}}Async{{#returnType}}{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}{{/returnType}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}RequestOptions options = null, CancellationToken cancellationToken = default);

      /// <summary>
      /// {{{notes}}} (Synchronous version)
      /// </summary>{{#vendorExtensions}}{{#x-acl.0}}
      ///
      /// Required API Key ACLs:{{/x-acl.0}}
      {{#x-acl}}
        ///   - {{.}}
      {{/x-acl}}
      {{/vendorExtensions}}
      {{#allParams}}
      /// <param name="{{paramName}}">{{{description}}}{{^required}} (optional{{#defaultValue}}, default to {{{.}}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
      {{/allParams}}
      /// <param name="options">Add extra http header or query parameters to Algolia.</param>
      /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
      /// <exception cref="ArgumentException">Thrown when arguments are not correct</exception>
      /// <exception cref="Algolia.Search.Exceptions.AlgoliaApiException">Thrown when the API call was rejected by Algolia</exception>
      /// <exception cref="Algolia.Search.Exceptions.AlgoliaUnreachableHostException">Thrown when the client failed to call the endpoint</exception>
      /// <returns>{{> return_type_doc}}</returns>
      {{#isDeprecated}}
      [Obsolete]
      {{/isDeprecated}}
      {{^returnType}}void{{/returnType}}{{#returnType}}{{> return_type}}{{/returnType}} {{operationId}}{{#returnType}}{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}{{/returnType}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}RequestOptions options = null, CancellationToken cancellationToken = default);

      {{/operation}}
  }

  {{/supportsAsync}}


  /// <summary>
  /// Represents a collection of functions to interact with the API endpoints
  /// </summary>
  {{> visibility}} partial class {{classname}} : {{interfacePrefix}}{{classname}}
  {
      internal HttpTransport _transport;
      private readonly ILogger<{{apiPackageName}}Client> _logger;

      /// <summary>
      /// Create a new {{apiPackageName}} client for the given appID and apiKey.
      /// </summary>
      /// <param name="applicationId">Your application</param>
      /// <param name="apiKey">Your API key</param>
      /// <param name="loggerFactory">Logger factory</param>
      {{#hasRegionalHost}}/// <param name="region">The targeted region</param>{{/hasRegionalHost}}
      public {{classname}}(string applicationId, string apiKey{{#hasRegionalHost}}, string region{{/hasRegionalHost}}{{#fallbackToAliasHost}} = null{{/fallbackToAliasHost}}, ILoggerFactory loggerFactory = null) : this(new {{apiPackageName}}Config(applicationId, apiKey{{#hasRegionalHost}}, region{{/hasRegionalHost}}), new AlgoliaHttpRequester(loggerFactory), loggerFactory)
      {
      }

      /// <summary>
      /// Initialize a client with custom config
      /// </summary>
      /// <param name="config">Algolia configuration</param>
      /// <param name="loggerFactory">Logger factory</param>
      public {{classname}}({{apiPackageName}}Config config, ILoggerFactory loggerFactory = null) : this(config, new AlgoliaHttpRequester(loggerFactory), loggerFactory)
      {
      }

      /// <summary>
      /// Initialize the client with custom config and custom Requester
      /// </summary>
      /// <param name="config">Algolia Config</param>
      /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
      /// <param name="loggerFactory">Logger factory</param>
      public {{classname}}({{apiPackageName}}Config config, IHttpRequester httpRequester, ILoggerFactory loggerFactory = null)
      {
        if (httpRequester == null)
        {
          throw new ArgumentException("An httpRequester is required");
        }
        if (config == null)
        {
          throw new ArgumentException("A config is required");
        }
        if (string.IsNullOrWhiteSpace(config.AppId))
        {
          throw new ArgumentException("`AppId` is missing.");
        }
        if (string.IsNullOrWhiteSpace(config.ApiKey))
        {
          throw new ArgumentException("`ApiKey` is missing.");
        }

        var factory = loggerFactory ?? NullLoggerFactory.Instance;
        _transport = new HttpTransport(config, httpRequester, factory);
        _logger = factory.CreateLogger<{{apiPackageName}}Client>();

        if (_logger.IsEnabled(Microsoft.Extensions.Logging.LogLevel.Information))
        {
          _logger.LogInformation("Algolia {{apiPackageName}} client is initialized.");
        }
      }

      /// <summary>
      /// Helper to switch the API key sent with each request
      /// </summary>
      /// <param name="apiKey">Your new API Key</param>
      /// <returns></returns>
      public void SetClientApiKey(string apiKey)
      {
        _transport._algoliaConfig.SetClientApiKey(apiKey);
      }
  

      {{#operation}}
      {{#supportsAsync}}

      /// <inheritdoc />
      {{#isDeprecated}}
      [Obsolete]
      {{/isDeprecated}}
      public async Task{{#returnType}}<{{> return_type}}>{{/returnType}} {{operationId}}Async{{#returnType}}{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}{{/returnType}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}RequestOptions options = null, CancellationToken cancellationToken = default)
      {
          {{#allParams}}
          {{#required}}
          {{^vendorExtensions.x-csharp-value-type}}{{^isEnumRef}}
          if ({{paramName}} == null)
              throw new ArgumentException("Parameter `{{paramName}}` is required when calling `{{operationId}}`.");
            {{/isEnumRef}}{{/vendorExtensions.x-csharp-value-type}}
          {{/required}}
          {{/allParams}}
          var requestOptions = new InternalRequestOptions(options);
          {{#vendorExtensions.x-is-custom-request}}
          {{#pathParams}}
          requestOptions.CustomPathParameters.Add("{{baseName}}", QueryStringHelper.ParameterToString({{paramName}}));
          {{/pathParams}}
          {{/vendorExtensions.x-is-custom-request}}
          {{#vendorExtensions}}{{^x-is-custom-request}}
          {{#pathParams}}
          {{#required}}
          requestOptions.PathParameters.Add("{{baseName}}", QueryStringHelper.ParameterToString({{paramName}}));
          {{/required}}
          {{^required}}
          if ({{paramName}} != null)
          {
              requestOptions.PathParameters.Add("{{baseName}}", QueryStringHelper.ParameterToString({{paramName}}));
          }
          {{/required}}
          {{/pathParams}}
          {{/x-is-custom-request}}{{/vendorExtensions}}
          {{#vendorExtensions.x-is-custom-request}}
          {{#queryParams}}
          requestOptions.AddCustomQueryParameters({{paramName}});
          {{/queryParams}}
          {{/vendorExtensions.x-is-custom-request}}
          {{^vendorExtensions.x-is-custom-request}}
          {{#queryParams}}
          requestOptions.AddQueryParameter("{{baseName}}", {{paramName}});
          {{/queryParams}}
          {{/vendorExtensions.x-is-custom-request}}
          {{#headerParams}}
          {{#required}}
          requestOptions.HeaderParameters.Add("{{baseName}}".ToLowerInvariant(), QueryStringHelper.ParameterToString({{paramName}})); // header parameter
          {{/required}}
          {{^required}}
          if ({{paramName}} != null)
          {
              requestOptions.HeaderParameters.Add("{{baseName}}".ToLowerInvariant(), QueryStringHelper.ParameterToString({{paramName}})); // header parameter
          }
          {{/required}}
          {{/headerParams}}
          {{#formParams}}
          {{#required}}
          requestOptions.FormParameters.Add("{{baseName}}", QueryStringHelper.ParameterToString({{paramName}})); // form parameter
          {{/required}}
          {{^required}}
          if ({{paramName}} != null)
          {
              requestOptions.FormParameters.Add("{{baseName}}", QueryStringHelper.ParameterToString({{paramName}})); // form parameter
          }
          {{/required}}
          {{/formParams}}
          {{#bodyParam}}
          requestOptions.Data = {{paramName}};
          {{/bodyParam}}
          {{#vendorExtensions}}
          {{#x-use-read-transporter}}
          requestOptions.UseReadTransporter = true;
          {{/x-use-read-transporter}}
          {{/vendorExtensions}}
          {{#returnType}}return {{/returnType}}await _transport.ExecuteRequestAsync{{#returnType}}<{{> return_type}}>{{/returnType}}(new HttpMethod("{{httpMethod}}"),"{{{path}}}", requestOptions, cancellationToken).ConfigureAwait(false);
      }


      /// <inheritdoc />
      {{#isDeprecated}}
      [Obsolete]
      {{/isDeprecated}}
      public {{^returnType}}void{{/returnType}}{{#returnType}}{{> return_type}}{{/returnType}} {{operationId}}{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}({{#allParams}}{{{dataType}}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}RequestOptions options = null, CancellationToken cancellationToken = default) =>
        AsyncHelper.RunSync(() => {{operationId}}Async{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}({{#allParams}}{{paramName}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}} options, cancellationToken));

      {{/supportsAsync}}
      {{/operation}}
  }
  {{/operations}}
