// {{generationBanner}}
using Algolia.Search.Http;
using Algolia.Search.Clients;
using Algolia.Search.Models.{{clientPrefix}};
using Action = Algolia.Search.Models.Search.Action;

public class Snippet{{client}}
{

  {{#blocksRequests}}
  {{#snippet}}
  /// <summary>
  /// Snippet for the {{#lambda.pascalcase}}{{method}}{{/lambda.pascalcase}} method.
  ///
  /// {{{description}}}
  /// </summary>
  public async Task SnippetFor{{client}}{{#lambda.pascalcase}}{{method}}{{/lambda.pascalcase}}()
  {
    // >SEPARATOR {{method}}
    // Initialize the client
    var client = new {{client}}(new {{clientPrefix}}Config("YOUR_APP_ID", "YOUR_API_KEY"{{#hasRegionalHost}},"YOUR_APP_ID_REGION"{{/hasRegionalHost}}));

    // Call the API
    var response = await client.{{#lambda.pascalcase}}{{method}}{{/lambda.pascalcase}}Async{{#isGeneric}}<Object>{{/isGeneric}}({{#parametersWithDataType}}{{> tests/generateParams}}{{^-last}},{{/-last}}{{/parametersWithDataType}}{{#hasRequestOptions}}, new RequestOptionBuilder()
    {{#requestOptions.queryParameters.parametersWithDataType}}
        .AddExtraQueryParameters("{{{key}}}", {{> tests/requests/requestOptionsParams}} )
    {{/requestOptions.queryParameters.parametersWithDataType}}
    {{#requestOptions.headers.parametersWithDataType}}
        .AddExtraHeader("{{{key}}}", "{{{value}}}")
    {{/requestOptions.headers.parametersWithDataType}}
        .Build()
      {{/hasRequestOptions}});
    // SEPARATOR<
  }

  {{/snippet}}
  {{/blocksRequests}}
}