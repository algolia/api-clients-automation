    /// <summary>
    /// {{{description}}}{{^description}}{{classname}}{{/description}}
    /// </summary>
    {{#vendorExtensions.x-cls-compliant}}
    [CLSCompliant({{{vendorExtensions.x-cls-compliant}}})]
    {{/vendorExtensions.x-cls-compliant}}
    {{#vendorExtensions.x-com-visible}}
    [ComVisible({{{vendorExtensions.x-com-visible}}})]
    {{/vendorExtensions.x-com-visible}}
    {{^useUnityWebRequest}}
    {{#discriminator}}
    [JsonConverter(typeof(JsonSubtypes), "{{{discriminatorName}}}")]
    {{#mappedModels}}
    [JsonSubtypes.KnownSubType(typeof({{{modelName}}}), "{{^vendorExtensions.x-discriminator-value}}{{{mappingName}}}{{/vendorExtensions.x-discriminator-value}}{{#vendorExtensions.x-discriminator-value}}{{{.}}}{{/vendorExtensions.x-discriminator-value}}")]
    {{/mappedModels}}
    {{/discriminator}}
    {{/useUnityWebRequest}}
    {{> visibility}} partial class {{classname}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}}
    {
        {{#vars}}
        {{#items.isEnum}}
        {{#items}}
        {{^complexType}}
{{> modelInnerEnum}}
        {{/complexType}}
        {{/items}}
        {{/items.isEnum}}
        {{#isEnum}}
        {{^complexType}}
{{> modelInnerEnum}}
        {{/complexType}}
        {{/isEnum}}
        {{#isEnum}}

        /// <summary>
        /// {{{description}}}{{^description}}Gets or Sets {{{name}}}{{/description}}
        /// </summary>
        {{#description}}
        /// <value>{{{.}}}</value>
        {{/description}}
        {{^conditionalSerialization}}
        [JsonPropertyName("{{baseName}}")]
        {{#deprecated}}
        [Obsolete]
        {{/deprecated}}
        public {{> generic_type}} {{name}} { get; set; }
        {{#isReadOnly}}

        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return false;
        }
        {{/isReadOnly}}
        {{/conditionalSerialization}}
        {{#conditionalSerialization}}
        {{#isReadOnly}}
        [JsonPropertyName("{{baseName}}")]
        {{#deprecated}}
        [Obsolete]
        {{/deprecated}}
        public {{> generic_type}} {{name}} { get; set; }


        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return false;
        }
        {{/isReadOnly}}

        {{^isReadOnly}}
        [JsonPropertyName("{{baseName}}")]
        {{#deprecated}}
        [Obsolete]
        {{/deprecated}}
        public {{{complexType}}}{{^complexType}}{{{datatypeWithEnum}}}{{/complexType}}{{^isContainer}}{{^required}}?{{/required}}{{/isContainer}} {{name}}
        {
            get{ return _{{name}};}
            set
            {
                _{{name}} = value;
                _flag{{name}} = true;
            }
        }
        private {{{complexType}}}{{^complexType}}{{{datatypeWithEnum}}}{{/complexType}}{{^isContainer}}{{^required}}?{{/required}}{{/isContainer}} _{{name}};
        private bool _flag{{name}};

        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return _flag{{name}};
        }
        {{/isReadOnly}}
        {{/conditionalSerialization}}
        {{/isEnum}}
        {{/vars}}
    {{#hasRequired}}
    {{^hasOnlyReadOnly}}
        /// <summary>
        /// Initializes a new instance of the {{classname}} class.
        /// </summary>
        [JsonConstructor]
        {{^isAdditionalPropertiesTrue}}
        public {{classname}}() { }
        {{/isAdditionalPropertiesTrue}}
        {{#isAdditionalPropertiesTrue}}
        public {{classname}}()
        {
            AdditionalProperties = new Dictionary<string, object>();
        }
        {{/isAdditionalPropertiesTrue}}
    {{/hasOnlyReadOnly}}
    {{/hasRequired}}
        /// <summary>
        /// Initializes a new instance of the {{classname}} class.
        /// </summary>
        {{#readWriteVars}}
        {{#required}}
        /// <param name="{{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}}">{{description}}{{^description}}{{nameInCamelCase}}{{/description}}{{#required}} (required){{/required}}{{#defaultValue}} (default to {{.}}){{/defaultValue}}.</param>
        {{/required}}
        {{/readWriteVars}}
    {{#hasOnlyReadOnly}}
        [JsonConstructor]
    {{/hasOnlyReadOnly}}
        public {{classname}}({{#requiredVars}}{{> generic_type}} {{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}}{{^-last}}, {{/-last}}{{/requiredVars}}){{#parent}} : base({{#parentVars}}{{nameInCamelCase}}{{^-last}}, {{/-last}}{{/parentVars}}){{/parent}}
        {
            {{#vars}}
            {{^isInherited}}
            {{^isReadOnly}}
            {{#required}}
            {{^conditionalSerialization}}
            {{^vendorExtensions.x-csharp-value-type}}
            {{name}} = {{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}} ?? throw new ArgumentNullException(nameof({{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}}));
            {{/vendorExtensions.x-csharp-value-type}}
            {{#vendorExtensions.x-csharp-value-type}}
            {{name}} = {{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}};
            {{/vendorExtensions.x-csharp-value-type}}
            {{/conditionalSerialization}}
            {{#conditionalSerialization}}
            {{^vendorExtensions.x-csharp-value-type}}
            if ({{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}} == null)
            {
                throw new ArgumentNullException(nameof({{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}}));
            }
            _{{name}} = {{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}};
            {{/vendorExtensions.x-csharp-value-type}}
            {{#vendorExtensions.x-csharp-value-type}}
            _{{name}} = {{#lambda.camelcase_sanitize_param}}{{name}}{{/lambda.camelcase_sanitize_param}};
            {{/vendorExtensions.x-csharp-value-type}}
            {{/conditionalSerialization}}
            {{/required}}
            {{/isReadOnly}}
            {{/isInherited}}
            {{/vars}}
            {{#isAdditionalPropertiesTrue}}
            AdditionalProperties = new Dictionary<string, object>();
            {{/isAdditionalPropertiesTrue}}
        }

        {{#vars}}
        {{^isInherited}}
        {{^isEnum}}
        /// <summary>
        /// {{{description}}}{{^description}}Gets or Sets {{{name}}}{{/description}}
        /// </summary>{{#description}}
        /// <value>{{{.}}}</value>{{/description}}
        {{^conditionalSerialization}}
        [JsonPropertyName("{{baseName}}")]
        {{#isDate}}
        [JsonConverter(typeof(OpenAPIDateConverter))]
        {{/isDate}}
        {{#deprecated}}
        [Obsolete]
        {{/deprecated}}
        public {{> generic_type}} {{name}} { get; {{#isReadOnly}}private {{/isReadOnly}}set; }

        {{#isReadOnly}}
        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return false;
        }
        {{/isReadOnly}}
        {{/conditionalSerialization}}
        {{#conditionalSerialization}}
        {{#isReadOnly}}
        [JsonPropertyName("{{baseName}}")]
        {{#isDate}}
        [JsonConverter(typeof(OpenAPIDateConverter))]
        {{/isDate}}
        {{#deprecated}}
        [Obsolete]
        {{/deprecated}}
        public {{{dataType}}} {{name}} { get; private set; }

        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return false;
        }
        {{/isReadOnly}}
        {{^isReadOnly}}
        {{#isDate}}
        [JsonConverter(typeof(OpenAPIDateConverter))]
        {{/isDate}}
        [JsonPropertyName("{{baseName}}")]
        {{#deprecated}}
        [Obsolete]
        {{/deprecated}}
        public {{{dataType}}} {{name}}
        {
            get{ return _{{name}};}
            set
            {
                _{{name}} = value;
                _flag{{name}} = true;
            }
        }
        private {{{dataType}}} _{{name}};
        private bool _flag{{name}};

        /// <summary>
        /// Returns false as {{name}} should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerialize{{name}}()
        {
            return _flag{{name}};
        }
        {{/isReadOnly}}
        {{/conditionalSerialization}}
        {{/isEnum}}
        {{/isInherited}}
        {{/vars}}
        {{#isAdditionalPropertiesTrue}}
        /// <summary>
        /// Gets or Sets additional properties
        /// </summary>
        [JsonExtensionData]
        public IDictionary<string, object> AdditionalProperties { get; set; }

        {{/isAdditionalPropertiesTrue}}
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class {{classname}} {\n");
            {{#parent}}
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            {{/parent}}
            {{#vars}}
            sb.Append("  {{name}}: ").Append({{name}}).Append("\n");
            {{/vars}}
            {{#isAdditionalPropertiesTrue}}
            sb.Append("  AdditionalProperties: ").Append(AdditionalProperties).Append("\n");
            {{/isAdditionalPropertiesTrue}}
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public {{#parent}}{{^isArray}}{{^isMap}}override {{/isMap}}{{/isArray}}{{/parent}}{{^parent}}virtual {{/parent}}string ToJson()
        {
          return JsonSerializer.Serialize(this, JsonConfig.Options);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is not {{classname}}{{#vendorExtensions.x-has-child-generic}}<T>{{/vendorExtensions.x-has-child-generic}} input)
            {
            return false;
            }

            return {{#vars}}{{#parent}}base.Equals(input) && {{/parent}}{{^isContainer}}
                ({{name}} == input.{{name}} || {{^vendorExtensions.x-is-value-type}}({{name}} != null && {{name}}.Equals(input.{{name}})){{/vendorExtensions.x-is-value-type}}{{#vendorExtensions.x-is-value-type}}{{name}}.Equals(input.{{name}}){{/vendorExtensions.x-is-value-type}}){{^-last}} && {{/-last}}{{/isContainer}}{{#isContainer}}
                ({{name}} == input.{{name}} || {{^vendorExtensions.x-is-value-type}}{{name}} != null && input.{{name}} != null && {{/vendorExtensions.x-is-value-type}}{{name}}.SequenceEqual(input.{{name}})){{^-last}} && {{/-last}}{{/isContainer}}{{/vars}}{{^vars}}{{#parent}}base.Equals(input){{/parent}}{{^parent}}false{{/parent}}{{/vars}}{{^isAdditionalPropertiesTrue}};{{/isAdditionalPropertiesTrue}}
                {{#isAdditionalPropertiesTrue}}
                && (AdditionalProperties.Count == input.AdditionalProperties.Count && !AdditionalProperties.Except(input.AdditionalProperties).Any());
                {{/isAdditionalPropertiesTrue}}
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                {{#parent}}
                int hashCode = base.GetHashCode();
                {{/parent}}
                {{^parent}}
                int hashCode = 41;
                {{/parent}}
                {{#vars}}
                {{^vendorExtensions.x-is-value-type}}
                if ({{name}} != null)
                {
                    hashCode = (hashCode * 59) + {{name}}.GetHashCode();
                }
                {{/vendorExtensions.x-is-value-type}}
                {{#vendorExtensions.x-is-value-type}}
                hashCode = (hashCode * 59) + {{name}}.GetHashCode();
                {{/vendorExtensions.x-is-value-type}}
                {{/vars}}
                {{#isAdditionalPropertiesTrue}}
                if (AdditionalProperties != null)
                {
                    hashCode = (hashCode * 59) + AdditionalProperties.GetHashCode();
                }
                {{/isAdditionalPropertiesTrue}}
                return hashCode;
            }
        }

    }
