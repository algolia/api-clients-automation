{{>partial_header}}

using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Threading;
using System.Threading.Tasks;
using Algolia.Search.Clients;
using Algolia.Search.Models;
{{#hasImport}}using Algolia.Search.{{modelPackage}}.{{packageName}};
{{/hasImport}}
using Algolia.Search.Transport;
using Algolia.Search.Http;

namespace Algolia.Search.Clients
{
    {{#operations}}
    {{#supportsAsync}}
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} interface {{interfacePrefix}}{{classname}}
    {
        {{#operation}}
        /// <summary>
        /// {{{summary}}}
        /// </summary>
        /// <remarks>
        /// {{{notes}}}
        /// </remarks>
        /// <exception cref="Algolia.Search.{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}
        /// <param name="{{paramName}}">{{{description}}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}
        /// <param name="options">Add extra http header or query parameters to Algolia.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of {{> return_type}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        Task<{{> return_type}}> {{operationId}}Async{{#returnType}}{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}{{/returnType}}({{#allParams}}{{{dataType}}}{{#isEnumRef}}{{^required}}?{{/required}}{{/isEnumRef}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}RequestOptions options = null, CancellationToken cancellationToken = default);
        {{/operation}}
    }
    {{/supportsAsync}}


    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    {{>visibility}} partial class {{classname}} : {{interfacePrefix}}{{classname}}
    {
        private readonly HttpTransport _transport;
        private readonly AlgoliaConfig _config;

        /// <summary>
        /// Create a new {{packageName}} client for the given appID and apiKey.
        /// </summary>
        /// <param name="applicationId">Your application</param>
        /// <param name="apiKey">Your API key</param>
        {{#hasRegionalHost}}/// <param name="region">The targeted region</param>{{/hasRegionalHost}}
        public {{classname}}(string applicationId, string apiKey{{#hasRegionalHost}}, string region{{/hasRegionalHost}}{{#fallbackToAliasHost}} = null{{/fallbackToAliasHost}}) : this(new {{packageName}}Config(applicationId, apiKey{{#hasRegionalHost}}, region{{/hasRegionalHost}}), new AlgoliaHttpRequester())
        {
        }

        /// <summary>
        /// Initialize a client with custom config
        /// </summary>
        /// <param name="config">Algolia configuration</param>
        public {{classname}}({{packageName}}Config config) : this(config, new AlgoliaHttpRequester())
        {
        }

        /// <summary>
        /// Initialize the client with custom config and custom Requester
        /// </summary>
        /// <param name="config">Algolia Config</param>
        /// <param name="httpRequester">Your Http requester implementation of <see cref="IHttpRequester"/></param>
        public {{classname}}({{packageName}}Config config, IHttpRequester httpRequester)
        {
          if (httpRequester == null)
          {
            throw new ArgumentNullException(nameof(httpRequester), "An httpRequester is required");
          }
          if (config == null)
          {
            throw new ArgumentNullException(nameof(config), "A config is required");
          }
          if (string.IsNullOrWhiteSpace(config.AppId))
          {
            throw new ArgumentNullException(nameof(config.AppId), "Application ID is required");
          }
          if (string.IsNullOrWhiteSpace(config.ApiKey))
          {
            throw new ArgumentNullException(nameof(config.ApiKey), "An API key is required");
          }

          _config = config;
          _transport = new HttpTransport(config, httpRequester);
        }

        {{#operation}}
        {{#supportsAsync}}

        /// <summary>
        /// {{{summary}}} {{notes}}
        /// </summary>
        /// <exception cref="Algolia.Search.{{packageName}}.Client.ApiException">Thrown when fails to make API call</exception>
        {{#allParams}}
        /// <param name="{{paramName}}">{{description}}{{^required}} (optional{{#defaultValue}}, default to {{.}}{{/defaultValue}}){{/required}}{{#isDeprecated}} (deprecated){{/isDeprecated}}</param>
        {{/allParams}}
        /// <param name="options">Add extra http header or query parameters to Algolia.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of {{> return_type}}</returns>
        {{#isDeprecated}}
        [Obsolete]
        {{/isDeprecated}}
        public async Task<{{> return_type}}> {{operationId}}Async{{#returnType}}{{#vendorExtensions.x-is-generic}}<T>{{/vendorExtensions.x-is-generic}}{{/returnType}}({{#allParams}}{{{dataType}}}{{#isEnumRef}}{{^required}}?{{/required}}{{/isEnumRef}} {{paramName}}{{^required}}{{#optionalMethodArgument}} = default{{/optionalMethodArgument}}{{/required}}{{^-last}}, {{/-last}}{{/allParams}}{{#allParams.0}}, {{/allParams.0}}RequestOptions options = null, CancellationToken cancellationToken = default)
        {
            {{#allParams}}
            {{#required}}
            {{^vendorExtensions.x-csharp-value-type}}
            if ({{paramName}} == null)
                throw new ApiException(400, "Missing required parameter '{{paramName}}' when calling {{classname}}->{{operationId}}");

            {{/vendorExtensions.x-csharp-value-type}}
            {{/required}}
            {{/allParams}}
            var requestOptions = new InternalRequestOptions(options);
            {{#vendorExtensions.x-is-custom-request}}
            {{#pathParams}}
            requestOptions.CustomPathParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}}));
            {{/pathParams}}
            {{/vendorExtensions.x-is-custom-request}}
            {{#vendorExtensions}}{{^x-is-custom-request}}
            {{#pathParams}}
            {{#required}}
            requestOptions.PathParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}}));
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                requestOptions.PathParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}}));
            }
            {{/required}}
            {{/pathParams}}
            {{/x-is-custom-request}}{{/vendorExtensions}}
            {{#vendorExtensions.x-is-custom-request}}
            {{#queryParams}}
            requestOptions.AddCustomQueryParameters({{paramName}});
            {{/queryParams}}
            {{/vendorExtensions.x-is-custom-request}}
            {{^vendorExtensions.x-is-custom-request}}
            {{#queryParams}}
            requestOptions.AddQueryParameter("{{baseName}}", {{paramName}});
            {{/queryParams}}
            {{/vendorExtensions.x-is-custom-request}}
            {{#headerParams}}
            {{#required}}
            requestOptions.HeaderParameters.Add("{{baseName}}".ToLowerInvariant(), ClientUtils.ParameterToString({{paramName}})); // header parameter
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                requestOptions.HeaderParameters.Add("{{baseName}}".ToLowerInvariant(), ClientUtils.ParameterToString({{paramName}})); // header parameter
            }
            {{/required}}
            {{/headerParams}}
            {{#formParams}}
            {{#required}}
            requestOptions.FormParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // form parameter
            {{/required}}
            {{^required}}
            if ({{paramName}} != null)
            {
                requestOptions.FormParameters.Add("{{baseName}}", ClientUtils.ParameterToString({{paramName}})); // form parameter
            }
            {{/required}}
            {{/formParams}}
            {{#bodyParam}}
            requestOptions.Data = {{paramName}};
            {{/bodyParam}}
            {{#vendorExtensions}}
            {{#x-use-read-transporter}}
            requestOptions.UseReadTransporter = true;
            {{/x-use-read-transporter}}
            {{/vendorExtensions}}
            return await _transport.ExecuteRequestAsync<{{> return_type}}>(new HttpMethod("{{httpMethod}}"),"{{{path}}}", requestOptions, cancellationToken).ConfigureAwait(false);
        }
        {{/supportsAsync}}
        {{/operation}}
    }
    {{/operations}}
}
