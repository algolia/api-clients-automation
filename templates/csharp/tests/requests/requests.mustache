using Algolia.Search.Http;
using Algolia.Search.Clients;
using Algolia.Search.Models.{{clientPrefix}};
using Xunit;
using Newtonsoft.Json;
using Quibble.Xunit;
using Action = Algolia.Search.Models.Search.Action;

public class {{client}}RequestTests
{
  private readonly {{client}} _client;
  private readonly EchoHttpRequester _echo;

  public {{client}}RequestTests()
  {
    _echo = new EchoHttpRequester();
    _client = new {{client}}(new {{clientPrefix}}Config("appId", "apiKey"{{#hasRegionalHost}},"{{defaultRegion}}"{{/hasRegionalHost}}), _echo);
  }

  [Fact]
  public void Dispose()
  {

  }

  {{#blocksRequests}}
  {{#tests}}
  [Fact(DisplayName = "{{{testName}}}")]
  public async Task {{#lambda.pascalcase}}{{method}}Test{{testIndex}}{{/lambda.pascalcase}}()
  {
     await _client.{{#lambda.pascalcase}}{{method}}{{/lambda.pascalcase}}Async{{#isGeneric}}<Object>{{/isGeneric}}({{#parametersWithDataType}}{{> tests/generateParams}}{{^-last}},{{/-last}}{{/parametersWithDataType}}{{#hasRequestOptions}}, new RequestOptions(){
      {{#requestOptions.queryParameters.parametersWithDataType}}
        QueryParameters = new Dictionary<string, object>(){ {"{{{key}}}", {{> tests/requests/requestOptionsParams}} }},
      {{/requestOptions.queryParameters.parametersWithDataType}}
      {{#requestOptions.headers.parametersWithDataType}}
        Headers = new Dictionary<string, string>(){ {"{{{key}}}", "{{{value}}}" }},
      {{/requestOptions.headers.parametersWithDataType}}
    }{{/hasRequestOptions}});

     var req = _echo.LastResponse;
    {{#request}}
     Assert.Equal("{{{path}}}",req.Path);
     Assert.Equal("{{{method}}}",req.Method.ToString());
    {{#body}}
        JsonAssert.EqualOverrideDefault("{{#lambda.escapeQuotes}}{{{body}}}{{/lambda.escapeQuotes}}", req.Body, new JsonDiffConfig(true));
    {{/body}}
    {{^body}}
      {{#assertNullBody}}
          Assert.Null(req.Body);
      {{/assertNullBody}}
      {{^assertNullBody}}
          Assert.Equal("{}", req.Body);
      {{/assertNullBody}}
    {{/body}}
      {{#queryParameters}}
        var expectedQuery = JsonConvert.DeserializeObject<Dictionary<string, string>>("{{#lambda.escapeQuotes}}{{{queryParameters}}}{{/lambda.escapeQuotes}}");
        Assert.NotNull(expectedQuery);

        var actualQuery = req.QueryParameters;
        Assert.Equal(expectedQuery.Count, actualQuery.Count);

        foreach (var query in actualQuery)
        {
          expectedQuery.TryGetValue(query.Key, out var result);
          Assert.Equal(query.Value, result);
        }
    {{/queryParameters}}
    {{#headers}}
        var expectedHeaders = JsonConvert.DeserializeObject<Dictionary<string, string>>("{{#lambda.escapeQuotes}}{{{headers}}}{{/lambda.escapeQuotes}}");
        var actualHeaders = req.Headers;
        foreach (var expectedHeader in expectedHeaders)
        {
          string actualHeaderValue;
          actualHeaders.TryGetValue(expectedHeader.Key, out actualHeaderValue);
          Assert.Equal(expectedHeader.Value, actualHeaderValue);
        }
    {{/headers}}
    {{/request}}
  }
  {{/tests}}
  {{/blocksRequests}}
}