using Algolia.Search.Http;
using Algolia.Search.Clients;
using Algolia.Search.Models.{{clientPrefix}};
using Algolia.Search.Serializer;
using Xunit;
using Newtonsoft.Json;
using Quibble.Xunit;
using dotenv.net;
using Action = Algolia.Search.Models.Search.Action;

public class {{client}}RequestTests
{
private readonly {{client}} _client{{#hasE2E}}, _e2eClient{{/hasE2E}};
  private readonly EchoHttpRequester _echo;

  public {{client}}RequestTests()
  {
    _echo = new EchoHttpRequester();
    _client = new {{client}}(new {{clientPrefix}}Config("appId", "apiKey"{{#hasRegionalHost}},"{{defaultRegion}}"{{/hasRegionalHost}}), _echo);

    {{#hasE2E}}
      DotEnv.Load(options: new DotEnvOptions(ignoreExceptions: true, probeForEnv: true, probeLevelsToSearch: 8, envFilePaths: new[] { ".env" }));

      var e2EAppId = Environment.GetEnvironmentVariable("ALGOLIA_APPLICATION_ID");
      if (e2EAppId == null)
      {
        throw new Exception("please provide an `ALGOLIA_APPLICATION_ID` env var for e2e tests");
      }

      var e2EApiKey = Environment.GetEnvironmentVariable("ALGOLIA_ADMIN_KEY");
      if (e2EApiKey == null)
      {
        throw new Exception("please provide an `ALGOLIA_ADMIN_KEY` env var for e2e tests");
      }

      _e2eClient = new {{client}}(new {{clientPrefix}}Config(e2EAppId, e2EApiKey{{#hasRegionalHost}},"{{defaultRegion}}"{{/hasRegionalHost}}));
    {{/hasE2E}}
  }

  [Fact]
  public void Dispose()
  {

  }

  {{#blocksRequests}}
  {{#tests}}
  [Fact(DisplayName = "{{{testName}}}")]
  public async Task {{#lambda.pascalcase}}{{method}}Test{{testIndex}}{{/lambda.pascalcase}}()
  {
     await _client.{{#lambda.pascalcase}}{{method}}{{/lambda.pascalcase}}Async{{#isGeneric}}<Hit>{{/isGeneric}}({{#parametersWithDataType}}{{> tests/generateParams}}{{^-last}},{{/-last}}{{/parametersWithDataType}}{{#hasRequestOptions}}, new RequestOptionBuilder()
      {{#requestOptions.queryParameters.parametersWithDataType}}
          .AddExtraQueryParameters("{{{key}}}", {{> tests/requests/requestOptionsParams}} )
      {{/requestOptions.queryParameters.parametersWithDataType}}
      {{#requestOptions.headers.parametersWithDataType}}
          .AddExtraHeader("{{{key}}}", "{{{value}}}")
      {{/requestOptions.headers.parametersWithDataType}}
          .Build()
    {{/hasRequestOptions}});

     var req = _echo.LastResponse;
    {{#request}}
     Assert.Equal("{{{path}}}",req.Path);
     Assert.Equal("{{{method}}}",req.Method.ToString());
    {{#body}}
        JsonAssert.EqualOverrideDefault("{{#lambda.escapeQuotes}}{{{body}}}{{/lambda.escapeQuotes}}", req.Body, new JsonDiffConfig(false));
    {{/body}}
    {{^body}}
      {{#assertNullBody}}
          Assert.Null(req.Body);
      {{/assertNullBody}}
      {{^assertNullBody}}
          Assert.Equal("{}", req.Body);
      {{/assertNullBody}}
    {{/body}}
      {{#queryParameters}}
        var expectedQuery = JsonConvert.DeserializeObject<Dictionary<string, string>>("{{#lambda.escapeQuotes}}{{{queryParameters}}}{{/lambda.escapeQuotes}}");
        Assert.NotNull(expectedQuery);

        var actualQuery = req.QueryParameters;
        Assert.Equal(expectedQuery.Count, actualQuery.Count);

        foreach (var actual in actualQuery)
        {
          expectedQuery.TryGetValue(actual.Key, out var expected);
          Assert.Equal(expected, actual.Value);
        }
    {{/queryParameters}}
    {{#headers}}
        var expectedHeaders = JsonConvert.DeserializeObject<Dictionary<string, string>>("{{#lambda.escapeQuotes}}{{{headers}}}{{/lambda.escapeQuotes}}");
        var actualHeaders = req.Headers;
        foreach (var expectedHeader in expectedHeaders)
        {
          string actualHeaderValue;
          actualHeaders.TryGetValue(expectedHeader.Key, out actualHeaderValue);
          Assert.Equal(expectedHeader.Value, actualHeaderValue);
        }
    {{/headers}}
    {{/request}}


    {{#response}}
      // e2e
      try {
        var resp = await _e2eClient.{{#lambda.pascalcase}}{{method}}{{/lambda.pascalcase}}Async{{#isGeneric}}<Hit>{{/isGeneric}}({{#parametersWithDataType}}{{> tests/generateParams}}{{^-last}},{{/-last}}{{/parametersWithDataType}}{{#hasRequestOptions}}, new RequestOptions(){
          {{#requestOptions.queryParameters}}
            QueryParameters = new Dictionary<string, object>(){ {{#parametersWithDataType}} {"{{{key}}}", {{> tests/requests/requestOptionsParams}} } {{^-last}},{{/-last}}{{/parametersWithDataType}} },
          {{/requestOptions.queryParameters}}
          {{#requestOptions.headers}}
            Headers = new Dictionary<string, string>(){ {{#parametersWithDataType}} {"{{{key}}}", "{{{value}}}" } {{^-last}},{{/-last}}{{/parametersWithDataType}} },
          {{/requestOptions.headers}}
        }{{/hasRequestOptions}});
      {{#statusCode}}
          // Check status code {{statusCode}}
          Assert.NotNull(resp);
      {{/statusCode}}

      {{#body}}
          JsonAssert.EqualOverrideDefault("{{#lambda.escapeQuotes}}{{{.}}}{{/lambda.escapeQuotes}}", JsonConvert.SerializeObject(resp, settings: JsonConfig.AlgoliaJsonSerializerSettings), new JsonDiffConfig(true));
      {{/body}}
      } catch (Exception e)
      {
        Assert.Fail("An exception was thrown: " + e.Message);
      }
    {{/response}}
  }
  {{/tests}}
  {{/blocksRequests}}
}