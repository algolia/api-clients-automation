using Algolia.Search.Clients;
using Algolia.Search.Models.{{clientPrefix}};
using Algolia.Search.Http;
using System.Text.RegularExpressions;
using Xunit;

public class {{client}}Tests
{
private readonly EchoHttpRequester _echo;
private Exception _ex;

public {{client}}Tests()
{
_echo = new EchoHttpRequester();
}

[Fact]
public void Dispose()
{

}

{{#blocksClient}}
  {{#tests}}
    [Fact(DisplayName = "{{{testName}}}")]
    public async Task {{#lambda.pascalcase}}{{testType}}Test{{testIndex}}{{/lambda.pascalcase}}()
    {
    {{#autoCreateClient}}
    var client = new {{client}}(new {{clientPrefix}}Config("appId", "apiKey"{{#hasRegionalHost}},"{{defaultRegion}}"{{/hasRegionalHost}}), _echo);
    {{/autoCreateClient}}
    {{#steps}}
      {{#isError}}
        _ex = await Assert.ThrowsAnyAsync<Exception>(async () => { {{> tests/client/step}} });
        Assert.Equal("{{{expectedError}}}".ToLowerInvariant(), _ex.Message.ToLowerInvariant());

      {{/isError}}
      {{^isError}}
        {{> tests/client/step}}
        {{#match}}
          {{#testUserAgent}} {
            var regexp = new Regex("{{#lambda.escapeSlash}}{{{match}}}{{/lambda.escapeSlash}}");
            Assert.Matches(regexp,result.Headers["user-agent"]);
            }{{/testUserAgent}}
          {{#testTimeouts}}
              Assert.Equal({{{match.parametersWithDataTypeMap.connectTimeout.value}}}, result.ConnectTimeout.TotalMilliseconds);
              Assert.Equal({{{match.parametersWithDataTypeMap.responseTimeout.value}}}, result.ResponseTimeout.TotalMilliseconds);
          {{/testTimeouts}}
          {{#testHost}}
              Assert.Equal("{{{match}}}", result.Host);
          {{/testHost}}
        {{/match}}
      {{/isError}}
    {{/steps}}
    }
  {{/tests}}
{{/blocksClient}}
  }