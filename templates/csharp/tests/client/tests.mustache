{{#tests}} 
    [Fact(DisplayName = "{{{testName}}}")]
    public async Task {{#lambda.pascalcase}}{{testType}}Test{{testIndex}}{{/lambda.pascalcase}}()
    {
    {{#autoCreateClient}}
    var client = new {{client}}(new {{clientPrefix}}Config("appId", "apiKey"{{#hasRegionalHost}},"{{defaultRegion}}"{{/hasRegionalHost}}), _echo);
    {{/autoCreateClient}}
    {{#steps}}
    {{#times}}
    for (int i = 0; i < {{.}}; i++) {
    {{/times}}
      {{#isError}}
        _ex = await Assert.ThrowsAnyAsync<Exception>(async () => { {{#dynamicTemplate}}{{/dynamicTemplate}} });
        Assert.Equal("{{{expectedError}}}".ToLowerInvariant(), _ex.Message.ToLowerInvariant());

      {{/isError}}
      {{^isError}}
        {{#shouldScope}} 
        {
        {{/shouldScope}}
        {{#dynamicTemplate}}{{/dynamicTemplate}}
        {{#testUserAgent}} {
          var regexp = new Regex({{#match}}{{> tests/generateParams}}{{/match}});
          Assert.Matches(regexp,result.Headers["user-agent"]);
          }{{/testUserAgent}}
        {{#testTimeouts}}
            Assert.Equal({{{matchConnectTimeout}}}, result.ConnectTimeout.TotalMilliseconds);
            Assert.Equal({{{matchResponseTimeout}}}, result.ResponseTimeout.TotalMilliseconds);
        {{/testTimeouts}}
        {{#testHost}}
            Assert.Equal({{#match}}{{> tests/generateParams}}{{/match}}, result.Host);
        {{/testHost}}
        {{#testResponse}}
          {{#match.isPrimitive}}
            Assert.Equal({{#match}}{{> tests/generateParams}}{{/match}}, res);
          {{/match.isPrimitive}}
          {{^match.isPrimitive}}
            JsonAssert.EqualOverrideDefault({{#match}}{{> tests/generateParams}}{{/match}}, JsonSerializer.Serialize(res, JsonConfig.Options), new JsonDiffConfig(false));
          {{/match.isPrimitive}}
        {{/testResponse}}
        {{#shouldScope}} 
        }
        {{/shouldScope}}
      {{/isError}}
    {{#times}}
    }
    {{/times}}
    {{/steps}}
    }
{{/tests}}