{{#hasCustomClientCreate}}
{{clientPrefix}}Config _config = new {{clientPrefix}}Config("{{parametersWithDataTypeMap.appId.value}}","{{parametersWithDataTypeMap.apiKey.value}}"{{#hasRegionalHost}}{{#parametersWithDataTypeMap.region}},"{{parametersWithDataTypeMap.region.value}}"{{/parametersWithDataTypeMap.region}}{{/hasRegionalHost}}) {
{{#hasCustomHosts}}
  CustomHosts = new List<StatefulHost>
    {
      {{#customHosts}}new () {
        Scheme = HttpScheme.Http,
        Url = Environment.GetEnvironmentVariable("CI") == "true" ? "localhost" : "host.docker.internal",
        Port = {{port}},
        Up = true,
        LastUse = DateTime.UtcNow,
        Accept = CallType.Read | CallType.Write,
      }{{^-last}},{{/-last}}{{/customHosts}}
  }{{#gzipEncoding}},Compression = CompressionType.Gzip{{/gzipEncoding}}
{{/hasCustomHosts}}
{{#hasCustomWriteTimeout}}
  WriteTimeout = {{writeTimeout}}
{{/hasCustomWriteTimeout}}
};
{{^autoCreateClient}}var client = {{/autoCreateClient}}new {{client}}(_config);
{{/hasCustomClientCreate}}
{{#useEchoRequester}}
{{^autoCreateClient}}var client = {{/autoCreateClient}}new {{client}}(new {{clientPrefix}}Config("{{parametersWithDataTypeMap.appId.value}}","{{parametersWithDataTypeMap.apiKey.value}}"{{#hasRegionalHost}}{{#parametersWithDataTypeMap.region}},"{{parametersWithDataTypeMap.region.value}}"{{/parametersWithDataTypeMap.region}}{{/hasRegionalHost}}), _echo);{{/useEchoRequester}}