{{#isNull}}
  null
{{/isNull}}
{{#isString}}
  "{{{value}}}"
{{/isString}}
{{#isInteger}}
  {{{value}}}
{{/isInteger}}
{{#isLong}}
  {{{value}}}L
{{/isLong}}
{{#isDouble}}
  {{{value}}}
{{/isDouble}}
{{#isBoolean}}
  {{{value}}}
{{/isBoolean}}
{{#isEnum}}
  {{> tests/maybeConvertOneOf}}(({{{objectName}}})Enum.Parse(typeof({{{objectName}}}), "{{#lambda.pascalcase}}{{{value}}}{{/lambda.pascalcase}}"))
{{/isEnum}}
{{#isArray}}
  new List{{> tests/generateGenerics}}(){ {{#value}}{{> tests/generateParams}}{{^-last}},{{/-last}}{{/value}} }
{{/isArray}}
{{#isObject}}
  {{> tests/maybeConvertOneOf}}(new {{{objectName}}}(){
  {{#value}}{{#isAdditionalProperty}}AdditionalProperties = new Dictionary<string, object>{ {"{{{key}}}", {{> tests/generateParams}} } }{{/isAdditionalProperty}}{{^isAdditionalProperty}}{{#lambda.pascalcase}}{{#lambda.csharpIdentifier}}{{&key}}{{/lambda.csharpIdentifier}}{{/lambda.pascalcase}} = {{> tests/generateParams}},{{/isAdditionalProperty}}{{/value}}
  })
{{/isObject}}
{{#isFreeFormObject}}
  {{#isAnyType}}
    new Dictionary<string, string> { {{#value}}{ {{#entrySet}}"{{{key}}}", "{{{value}}}" }{{^-last}},{{/-last}}{{/entrySet}}{{/value}} }
  {{/isAnyType}}
  {{^isAnyType}}
    new Dictionary{{> tests/forceMapGenerics}}{ {{#value}}{"{{{key}}}", {{> tests/generateParams}} }{{^-last}},{{/-last}}{{/value}} }
  {{/isAnyType}}
{{/isFreeFormObject}}