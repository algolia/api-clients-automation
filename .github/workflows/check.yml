name: Checks

on:
  pull_request:
    types: [opened, synchronize]
  push:
    branches:
      - main

concurrency:
  group: ${{ github.ref }}
  cancel-in-progress: true

# Uncomment the line below to enable artifacts debugging
# env:
#   ACTIONS_RUNNER_DEBUG: true

jobs:
  setup:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup
        id: setup
        uses: ./.github/actions/setup
        with:
          type: matrix

      - name: Lint GitHub actions
        run: yarn github-actions:lint

      - name: Lint generators
        run: |
          yarn cli format java generators
          diff=$(git status --porcelain ./generators | wc -l)

          if [[ $diff > 0 ]]; then
            echo "Format the generators folder by running 'yarn docker format java generators'"
          fi

          exit $diff

      - name: Lint json files
        run: yarn eslint --ext=json .

    outputs:
      RUN_SCRIPTS: ${{ steps.setup.outputs.RUN_SCRIPTS }}

      RUN_SPECS: ${{ steps.setup.outputs.RUN_SPECS }}
      SPECS_MATRIX: ${{ steps.setup.outputs.SPECS_MATRIX }}

      RUN_GEN: ${{ steps.setup.outputs.RUN_GEN }}
      GEN_MATRIX: ${{ steps.setup.outputs.GEN_MATRIX }}

      RUN_JS_ALGOLIASEARCH: ${{ steps.setup.outputs.RUN_JS_ALGOLIASEARCH }}
      RUN_JS_UTILS: ${{ steps.setup.outputs.RUN_JS_UTILS }}
      RUN_JS_TESTS: ${{ steps.setup.outputs.RUN_JS_TESTS }}
      JS_MATRIX: ${{ steps.setup.outputs.JS_MATRIX }}

      RUN_CTS: ${{ steps.setup.outputs.RUN_CTS }}

      RUN_CODEGEN: ${{ steps.setup.outputs.RUN_CODEGEN }}

  scripts:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: setup
    if: ${{ needs.setup.outputs.RUN_SCRIPTS == 'true' }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Check script linting
        run: yarn scripts:lint

      - name: Test scripts
        run: yarn scripts:test

      - name: Test custom eslint plugin
        run: yarn workspace eslint-plugin-automation-custom test

  specs:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs: setup
    if: ${{ needs.setup.outputs.RUN_SPECS == 'true' }}
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.SPECS_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      - name: Cache '${{ matrix.client.name }}' bundled spec
        id: cache
        uses: actions/cache@v3
        with:
          key: |
            ${{ matrix.client.name }}-${{ hashFiles(
              format('{0}/**', matrix.client.path),
              'specs/common/**'
            )}}
          path: ${{ matrix.client.bundledPath }}

      - name: Setup
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Building '${{ matrix.client.name }}' spec
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: yarn cli build specs ${{ matrix.client.name }}

      - name: Show diff for '${{ matrix.client.name }}' bundled spec
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: git --no-pager diff

      - name: Store '${{ matrix.client.name }}' bundled spec
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: spec-${{ matrix.client.name }}
          path: ${{ format('specs/bundled/{0}.yml', matrix.client.name) }}

  client_javascript_utils:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs: setup
    if: ${{ needs.setup.outputs.RUN_JS_UTILS == 'true' }}
    strategy:
      matrix:
        client:
          - client-common
          - requester-browser-xhr
          - requester-node-http
    steps:
      - uses: actions/checkout@v2

      - name: Cache '${{ matrix.client }}' client folder
        id: cache
        uses: actions/cache@v3
        with:
          key: |
            ${{ matrix.client }}-${{ hashFiles(
              format('clients/algoliasearch-client-javascript/packages/{0}/**', matrix.client)
            )}}
          path: clients/algoliasearch-client-javascript/packages/${{ matrix.client }}

      - name: Setup
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Build '${{ matrix.client }}' client
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: yarn workspace algoliasearch-client-javascript build ${{ matrix.client }}

      - name: Run tests for 'client-common'
        if: ${{
          steps.cache.outputs.cache-hit != 'true' &&
          needs.setup.outputs.RUN_JS_TESTS == 'true' &&
          matrix.client == 'client-common' }}
        run: yarn workspace @experimental-api-clients-automation/client-common test

      - name: Store '${{ matrix.client }}' JavaScript utils package
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: client-javascript-utils-${{ matrix.client }}
          path: clients/algoliasearch-client-javascript/packages/${{ matrix.client }}

  client_gen:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs:
      - setup
      - specs
      - scripts
      - client_javascript_utils
    if: |
      always() &&
      needs.setup.outputs.RUN_GEN == 'true' &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    strategy:
      matrix: ${{ fromJSON(needs.setup.outputs.GEN_MATRIX) }}
    steps:
      - uses: actions/checkout@v2

      # Language others than JavaScript only need `API` and `model`s to be stored.
      - name: Cache '${{ matrix.client.name }}' client API and Model
        if: ${{ !matrix.client.storeFolder }}
        id: cache-split
        uses: actions/cache@v3
        with:
          key: |
            ${{ matrix.client.name }}-${{ hashFiles(
              format('specs/bundled/{0}.yml', matrix.client.name),
              format('templates/{0}/**', matrix.client.language),
              'generators/src/**'
            )}}
          path: |
            ${{ matrix.client.apiPath }}
            ${{ matrix.client.modelPath }}

      # For JavaScript, we store the whole folder.
      - name: Cache '${{ matrix.client.name }}' client folder
        if: ${{ matrix.client.storeFolder }}
        id: cache-folder
        uses: actions/cache@v3
        with:
          key: |
            ${{ matrix.client.name }}-${{ hashFiles(
              format('specs/bundled/{0}.yml', matrix.client.name),
              format('templates/{0}/**', matrix.client.language),
              'generators/src/**'
            )}}
          path: ${{ matrix.client.path }}

      - name: Download '${{ matrix.client.name }}' bundled spec
        if: |
          ${{
            steps.cache-folder.outputs.cache-hit != 'true' &&
            steps.cache-split.outputs.cache-hit != 'true'
          }}
        uses: actions/download-artifact@v3
        with:
          name: spec-${{ matrix.client.name }}
          path: specs/bundled/

      - name: Setup
        if: |
          ${{
            steps.cache-folder.outputs.cache-hit != 'true' &&
            steps.cache-split.outputs.cache-hit != 'true'
          }}
        uses: ./.github/actions/setup

      - name: Generate '${{ matrix.client.language }}' '${{ matrix.client.name }}' client
        if: |
          ${{
            steps.cache-folder.outputs.cache-hit != 'true' &&
            steps.cache-split.outputs.cache-hit != 'true'
          }}
        run: yarn cli generate ${{ matrix.client.language }} ${{ matrix.client.name }}

      # Some clients like PHP does not have a build process
      - name: Build '${{ matrix.client.language }}' '${{ matrix.client.name }}' client
        if: |
          ${{
            steps.cache-folder.outputs.cache-hit != 'true' &&
            steps.cache-split.outputs.cache-hit != 'true' &&
            matrix.client.shouldBuild
          }}
        run: yarn cli build clients ${{ matrix.client.language }} ${{ matrix.client.name }}

      - name: Show diff for '${{ matrix.client.name }}' client
        if: |
          ${{
            steps.cache-folder.outputs.cache-hit != 'true' &&
            steps.cache-split.outputs.cache-hit != 'true'
          }}
        run: git --no-pager diff

      # Language others than JavaScript only need `API` and `model`s to be stored.
      - name: Store API file for '${{ matrix.client.name }}' ${{ matrix.client.language }} client
        if: ${{ !matrix.client.storeFolder }}
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: client-${{matrix.client.language }}-${{ matrix.client.name }}-api
          path: ${{ matrix.client.apiPath }}

      - name: Store Model folder for '${{ matrix.client.name }}' ${{ matrix.client.language }} client
        if: ${{ !matrix.client.storeFolder }}
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: client-${{matrix.client.language }}-${{ matrix.client.name }}-model
          path: ${{ matrix.client.modelPath }}

      # For JavaScript, we store the whole folder.
      - name: Store '${{ matrix.client.name }}' ${{ matrix.client.language }} client
        if: ${{ matrix.client.storeFolder }}
        uses: actions/upload-artifact@v3
        with:
          if-no-files-found: error
          name: client-${{matrix.client.language }}-${{ matrix.client.name }}
          path: ${{ matrix.client.path }}

  client_javascript_algoliasearch:
    timeout-minutes: 10
    runs-on: ubuntu-20.04
    needs:
      - setup
      - client_gen
    if: |
      always() &&
      needs.setup.outputs.RUN_JS_ALGOLIASEARCH == 'true' &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    steps:
      - uses: actions/checkout@v2

      - name: Cache 'algoliasearch' client folder
        id: cache
        uses: actions/cache@v3
        with:
          key: |
            algoliasearch-${{ hashFiles(
              'clients/algoliasearch-client-javascript/packages/algoliasearch/**'
            )}}
          path: clients/algoliasearch-client-javascript/packages/algoliasearch/

      - name: Restore 'analytics' client
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: client-javascript-analytics
          path: clients/algoliasearch-client-javascript/packages/client-analytics/

      - name: Restore 'personalization' client
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: client-javascript-personalization
          path: clients/algoliasearch-client-javascript/packages/client-personalization/

      - name: Restore 'search' client
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: actions/download-artifact@v3
        with:
          name: client-javascript-search
          path: clients/algoliasearch-client-javascript/packages/client-search/

      - name: Setup
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Build 'algoliasearch' client
        if: ${{ steps.cache.outputs.cache-hit != 'true' }}
        run: yarn cli build clients javascript algoliasearch

  cts:
    runs-on: ubuntu-20.04
    timeout-minutes: 20
    needs:
      - setup
      - client_gen
    if: |
      always() &&
      needs.setup.outputs.RUN_CTS == 'true' &&
      !contains(needs.*.result, 'cancelled') &&
      !contains(needs.*.result, 'failure')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.TOKEN_GENERATE_BOT }}

      - name: Download all the previously stored artifacts
        uses: ./.github/actions/restore-all

      - name: Setup
        uses: ./.github/actions/setup

      - name: Show generated client and bundled specs changes
        run: git --no-pager diff

      - name: Push generated code to generated branch
        if: github.event_name == 'pull_request'
        id: pushGeneratedCode
        run: yarn workspace scripts pushGeneratedCode
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GENERATE_BOT }}
          PR_NUMBER: ${{ github.event.number }}

      - name: Check JavaScript client size
        run: exit $(yarn workspace algoliasearch-client-javascript test:size | echo $?)

      # This can be added once the PHP CTS is fixed
      # - name: Cache generated CTS
      #   id: cache
      #   uses: actions/cache@v3
      #   with:
      #     path: tests/output
      #     key: ${{ hashFiles( 'tests/output/**' ) }}

      - name: Generate
        # if: steps.cache.outputs.cache-hit != 'true'
        run: yarn cli cts generate

      - name: Check diff with pushed CTS
        # if: steps.cache.outputs.cache-hit != 'true'
        run: |
          git --no-pager diff
          exit $(git status --porcelain ./tests/output | wc -l)

      - name: Run
        run: yarn cli cts run

  codegen_on_main:
    runs-on: ubuntu-20.04
    timeout-minutes: 10
    needs:
      - setup
      - cts
    if: |
      always() &&
      github.ref == 'refs/heads/main' &&
      needs.setup.outputs.RUN_CODEGEN == 'true' &&
      needs.cts.result == 'success'
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}
          token: ${{ secrets.TOKEN_GENERATE_BOT }}

      - name: Download all the previously stored artifacts
        uses: ./.github/actions/restore-all

      - name: Setup
        uses: ./.github/actions/setup
        with:
          type: minimal

      - name: Push generated code to main
        id: pushGeneratedCode
        run: yarn workspace scripts pushGeneratedCode
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GENERATE_BOT }}

      - name: Spread generation to each repository
        if: steps.pushGeneratedCode.exitcode == 0
        run: yarn workspace scripts spreadGeneration
        env:
          GITHUB_TOKEN: ${{ secrets.TOKEN_GENERATE_BOT }}
