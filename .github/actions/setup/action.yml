name: Setup

description: Setup CI environment.

inputs:
  type:
    description: Type of setup, `minimal` will only setup the JavaScript monorepo, empty will also install Java.
    required: false
  language:
    description: the language for which to install deps
    required: false
  version:
    description: the version of the language to setup
    required: false

runs:
  using: composite
  steps:
    # Java for code generation
    - name: Install Java
      if: inputs.type != 'minimal'
      uses: actions/setup-java@v4.4.0
      with:
        distribution: zulu
        java-version-file: config/.java-version

    - name: Setup gradle
      if: inputs.type != 'minimal'
      uses: gradle/actions/setup-gradle@v4
      with:
        validate-wrappers: true
        add-job-summary: 'on-failure'

    - name: Download Java formatter
      if: inputs.type != 'minimal'
      shell: bash
      run: curl --retry 3 -L "https://github.com/google/google-java-format/releases/download/v1.23.0/google-java-format-1.23.0-all-deps.jar" > /tmp/java-formatter.jar

    # JavaScript for monorepo and tooling
    - name: Install Node
      uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: yarn

    - name: Install JavaScript dependencies
      shell: bash
      run: YARN_ENABLE_HARDENED_MODE=0 YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install

    - name: Build scripts
      shell: bash
      run: yarn workspace scripts build:cli

    # JavaScript client deps
    - name: Get yarn js-client cache directory path
      if: ${{ inputs.language == 'javascript' }}
      shell: bash
      id: yarn-cache-dir-client
      run: echo "dir=$(cd clients/algoliasearch-client-javascript && yarn config get cacheFolder)" >> $GITHUB_OUTPUT

    - name: Restore Yarn js-client
      if: ${{ inputs.language == 'javascript' }}
      uses: actions/cache@v4
      with:
        path: ${{ steps.yarn-cache-dir-client.outputs.dir || 'clients/algoliasearch-client-javascript/.yarn/cache' }}
        key: yarn-cache-clients-${{ hashFiles('clients/algoliasearch-client-javascript/yarn.lock') }}

    - name: Cache js-client node modules
      if: ${{ inputs.language == 'javascript' }}
      uses: actions/cache@v4
      with:
        path: clients/algoliasearch-client-javascript/node_modules
        key: node-modules-clients-${{ hashFiles('clients/algoliasearch-client-javascript/yarn.lock') }}

    - name: Install JavaScript client dependencies
      if: ${{ inputs.language == 'javascript' }}
      shell: bash
      run: cd clients/algoliasearch-client-javascript && YARN_ENABLE_HARDENED_MODE=0 YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install

    # PHP
    - name: Install PHP
      if: ${{ inputs.language == 'php' }}
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.version }}
        tools: composer

    - name: Run composer install
      if: ${{ inputs.language == 'php' }}
      shell: bash
      run: |
        composer install --working-dir=clients/algoliasearch-client-php
        composer dump-autoload --working-dir=clients/algoliasearch-client-php

    # Golang
    - name: Install golang
      if: ${{ inputs.language == 'go' }}
      uses: actions/setup-go@v5
      with:
        cache-dependency-path: clients/algoliasearch-client-go/go.sum
        go-version: ${{ inputs.version }}

    - name: Install golangci-lint
      if: ${{ inputs.language == 'go' }}
      shell: bash
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.60.3
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH
        go install golang.org/x/tools/cmd/goimports@latest

    - name: Cache golangci-lint analysis
      if: ${{ inputs.language == 'go' }}
      uses: actions/cache@v4
      with:
        path: ~/.cache/golangci-lint
        key: golangci-lint-${{ inputs.version }}-${{ hashFiles('clients/algoliasearch-client-go/go.sum') }}

    # Kotlin
    - name: Cache spotless
      if: ${{ inputs.language == 'kotlin' }}
      uses: actions/cache@v4
      with:
        path: clients/algoliasearch-client-kotlin/client/build/spotless
        key: spotless-${{ hashFiles('clients/algoliasearch-client-kotlin/build.gradle.kts') }}

    # Dart
    - name: Install dart
      if: ${{ inputs.language == 'dart' }}
      uses: dart-lang/setup-dart@v1
      with:
        sdk: ${{ inputs.version }}

    - name: Setup dart tools
      if: ${{ inputs.language == 'dart' }}
      shell: bash
      run: dart pub global activate melos

    # Python
    - name: Install poetry
      if: ${{ inputs.language == 'python' }}
      shell: bash
      run: pipx install poetry

    - uses: actions/setup-python@v5
      if: ${{ inputs.language == 'python' }}
      with:
        python-version: ${{ inputs.version }}
        cache: 'poetry'

    - run: poetry install
      if: ${{ inputs.language == 'python' }}
      working-directory: clients/algoliasearch-client-python
      shell: bash

    # Ruby
    - name: Install Ruby
      if: ${{ inputs.language == 'ruby' }}
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ inputs.version }}
        bundler-cache: true

    - name: Install Ruby formatter
      if: ${{ inputs.language == 'ruby' }}
      shell: bash
      run: |
        curl --retry 3 -L https://github.com/fables-tales/rubyfmt/releases/download/v0.10.0/rubyfmt-v0.10.0-Linux-x86_64.tar.gz > rubyfmt.tar.gz
        tar -xzf rubyfmt.tar.gz
        mv tmp/releases/v0.10.0-Linux/rubyfmt /usr/local/bin
        rm -rf rubyfmt.tar.gz tmp

    # Csharp
    - name: Install dotnet
      if: ${{ inputs.language == 'csharp' }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.version }}

    # Swift deps
    - name: Install swift
      if: ${{ inputs.language == 'swift' }}
      # WORKAROUND for: https://github.com/swift-actions/setup-swift/issues/591
      # BY GitHub Staff developer: redsun82
      # IN pull request: https://github.com/github/codeql/pull/16153
      # uses: swift-actions/setup-swift@v2
      uses: redsun82/setup-swift@b2b6f77ab14f6a9b136b520dc53ec8eca27d2b99
      with:
        swift-version: ${{ inputs.version }}

    - name: Cache the build folder
      id: cache-swift-build
      if: ${{ inputs.language == 'swift' }}
      uses: actions/cache@v4
      with:
        path: |
          clients/algoliasearch-client-swift/.build
          tests/output/swift/.build
        key: swift-build-${{ inputs.version }}-${{ runner.os }}

    - name: Set swiftformat version
      if: ${{ inputs.language == 'swift' }}
      id: swiftformat-version
      shell: bash
      run: echo "SWIFTFORMAT_VERSION=0.54.5" >> $GITHUB_OUTPUT

    - name: Checkout swiftformat
      if: ${{ inputs.language == 'swift' }}
      uses: actions/checkout@v4
      with:
        repository: nicklockwood/SwiftFormat
        ref: ${{ steps.swiftformat-version.outputs.SWIFTFORMAT_VERSION }}
        path: swiftformat

    - name: Cache the build folder for swiftformat
      id: cache-swiftformat
      if: ${{ inputs.language == 'swift' }}
      uses: actions/cache@v4
      with:
        path: swiftformat/.build
        key: swiftformat-build-${{ steps.swiftformat-version.outputs.SWIFTFORMAT_VERSION }}-${{ runner.os }}

    - name: Build swiftformat
      if: ${{ inputs.language == 'swift' && steps.cache-swiftformat.outputs.cache-hit != 'true' }}
      shell: bash
      run: cd swiftformat && swift build -c release

    - name: Setup the path
      if: ${{ inputs.language == 'swift' }}
      shell: bash
      run: echo "$(pwd)/swiftformat/.build/release" >> $GITHUB_PATH
