<?php
/**
 * RecommendationsBody
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Recommend API
 *
 * API powering the Recommend feature of Algolia.
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * RecommendationsBody Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RecommendationsBody implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = '_recommendations_body';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'index_name' => 'string',
'model' => 'string',
'object_id' => 'string',
'threshold' => 'float',
'max_recommendations' => 'float',
'min_recommendations' => 'float',
'query_parameters' => 'map[string,object]',
'fallback_parameters' => 'map[string,object]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'index_name' => null,
'model' => null,
'object_id' => null,
'threshold' => null,
'max_recommendations' => null,
'min_recommendations' => null,
'query_parameters' => null,
'fallback_parameters' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'index_name' => 'indexName',
'model' => 'model',
'object_id' => 'objectID',
'threshold' => 'threshold',
'max_recommendations' => 'maxRecommendations',
'min_recommendations' => 'minRecommendations',
'query_parameters' => 'queryParameters',
'fallback_parameters' => 'fallbackParameters'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'index_name' => 'setIndexName',
'model' => 'setModel',
'object_id' => 'setObjectId',
'threshold' => 'setThreshold',
'max_recommendations' => 'setMaxRecommendations',
'min_recommendations' => 'setMinRecommendations',
'query_parameters' => 'setQueryParameters',
'fallback_parameters' => 'setFallbackParameters'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'index_name' => 'getIndexName',
'model' => 'getModel',
'object_id' => 'getObjectId',
'threshold' => 'getThreshold',
'max_recommendations' => 'getMaxRecommendations',
'min_recommendations' => 'getMinRecommendations',
'query_parameters' => 'getQueryParameters',
'fallback_parameters' => 'getFallbackParameters'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const MODEL_RELATED_PRODUCTS = 'related-products';
const MODEL_BOUGHT_TOGETHER = 'bought-together';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModelAllowableValues()
    {
        return [
            self::MODEL_RELATED_PRODUCTS,
self::MODEL_BOUGHT_TOGETHER,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['index_name'] = isset($data['index_name']) ? $data['index_name'] : null;
        $this->container['model'] = isset($data['model']) ? $data['model'] : null;
        $this->container['object_id'] = isset($data['object_id']) ? $data['object_id'] : null;
        $this->container['threshold'] = isset($data['threshold']) ? $data['threshold'] : null;
        $this->container['max_recommendations'] = isset($data['max_recommendations']) ? $data['max_recommendations'] : null;
        $this->container['min_recommendations'] = isset($data['min_recommendations']) ? $data['min_recommendations'] : null;
        $this->container['query_parameters'] = isset($data['query_parameters']) ? $data['query_parameters'] : null;
        $this->container['fallback_parameters'] = isset($data['fallback_parameters']) ? $data['fallback_parameters'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['index_name'] === null) {
            $invalidProperties[] = "'index_name' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        $allowedValues = $this->getModelAllowableValues();
        if (!is_null($this->container['model']) && !in_array($this->container['model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'model', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['object_id'] === null) {
            $invalidProperties[] = "'object_id' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets index_name
     *
     * @return string
     */
    public function getIndexName()
    {
        return $this->container['index_name'];
    }

    /**
     * Sets index_name
     *
     * @param string $index_name index_name
     *
     * @return $this
     */
    public function setIndexName($index_name)
    {
        $this->container['index_name'] = $index_name;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return $this
     */
    public function setModel($model)
    {
        $allowedValues = $this->getModelAllowableValues();
        if (!in_array($model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'model', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string $object_id object_id
     *
     * @return $this
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return float
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param float $threshold threshold
     *
     * @return $this
     */
    public function setThreshold($threshold)
    {
        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets max_recommendations
     *
     * @return float
     */
    public function getMaxRecommendations()
    {
        return $this->container['max_recommendations'];
    }

    /**
     * Sets max_recommendations
     *
     * @param float $max_recommendations max_recommendations
     *
     * @return $this
     */
    public function setMaxRecommendations($max_recommendations)
    {
        $this->container['max_recommendations'] = $max_recommendations;

        return $this;
    }

    /**
     * Gets min_recommendations
     *
     * @return float
     */
    public function getMinRecommendations()
    {
        return $this->container['min_recommendations'];
    }

    /**
     * Sets min_recommendations
     *
     * @param float $min_recommendations min_recommendations
     *
     * @return $this
     */
    public function setMinRecommendations($min_recommendations)
    {
        $this->container['min_recommendations'] = $min_recommendations;

        return $this;
    }

    /**
     * Gets query_parameters
     *
     * @return map[string,object]
     */
    public function getQueryParameters()
    {
        return $this->container['query_parameters'];
    }

    /**
     * Sets query_parameters
     *
     * @param map[string,object] $query_parameters A key-value mapping of additional search parameters
     *
     * @return $this
     */
    public function setQueryParameters($query_parameters)
    {
        $this->container['query_parameters'] = $query_parameters;

        return $this;
    }

    /**
     * Gets fallback_parameters
     *
     * @return map[string,object]
     */
    public function getFallbackParameters()
    {
        return $this->container['fallback_parameters'];
    }

    /**
     * Sets fallback_parameters
     *
     * @param map[string,object] $fallback_parameters A key-value mapping of additional search parameters
     *
     * @return $this
     */
    public function setFallbackParameters($fallback_parameters)
    {
        $this->container['fallback_parameters'] = $fallback_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
