<?php
/**
 * InlineObject
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Recommend API
 *
 * API powering the Recommend feature of Algolia.
 *
 * The version of the OpenAPI document: 0.1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InlineObject Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InlineObject implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'InlineObject';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'index_name' => 'string',
        'model' => 'string',
        'object_id' => 'string',
        'threshold' => 'float',
        'max_recommendations' => 'float',
        'min_recommendations' => 'float',
        'query_parameters' => 'array<string,object>',
        'fallback_parameters' => 'array<string,object>'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'index_name' => null,
        'model' => null,
        'object_id' => null,
        'threshold' => null,
        'max_recommendations' => null,
        'min_recommendations' => null,
        'query_parameters' => null,
        'fallback_parameters' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'index_name' => 'indexName',
        'model' => 'model',
        'object_id' => 'objectID',
        'threshold' => 'threshold',
        'max_recommendations' => 'maxRecommendations',
        'min_recommendations' => 'minRecommendations',
        'query_parameters' => 'queryParameters',
        'fallback_parameters' => 'fallbackParameters'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'index_name' => 'setIndexName',
        'model' => 'setModel',
        'object_id' => 'setObjectId',
        'threshold' => 'setThreshold',
        'max_recommendations' => 'setMaxRecommendations',
        'min_recommendations' => 'setMinRecommendations',
        'query_parameters' => 'setQueryParameters',
        'fallback_parameters' => 'setFallbackParameters'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'index_name' => 'getIndexName',
        'model' => 'getModel',
        'object_id' => 'getObjectId',
        'threshold' => 'getThreshold',
        'max_recommendations' => 'getMaxRecommendations',
        'min_recommendations' => 'getMinRecommendations',
        'query_parameters' => 'getQueryParameters',
        'fallback_parameters' => 'getFallbackParameters'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const MODEL_RELATED_PRODUCTS = 'related-products';
    const MODEL_BOUGHT_TOGETHER = 'bought-together';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getModelAllowableValues()
    {
        return [
            self::MODEL_RELATED_PRODUCTS,
            self::MODEL_BOUGHT_TOGETHER,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['index_name'] = $data['index_name'] ?? null;
        $this->container['model'] = $data['model'] ?? null;
        $this->container['object_id'] = $data['object_id'] ?? null;
        $this->container['threshold'] = $data['threshold'] ?? 0;
        $this->container['max_recommendations'] = $data['max_recommendations'] ?? 0;
        $this->container['min_recommendations'] = $data['min_recommendations'] ?? 0;
        $this->container['query_parameters'] = $data['query_parameters'] ?? null;
        $this->container['fallback_parameters'] = $data['fallback_parameters'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['index_name'] === null) {
            $invalidProperties[] = "'index_name' can't be null";
        }
        if ($this->container['model'] === null) {
            $invalidProperties[] = "'model' can't be null";
        }
        $allowedValues = $this->getModelAllowableValues();
        if (!is_null($this->container['model']) && !in_array($this->container['model'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'model', must be one of '%s'",
                $this->container['model'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['object_id'] === null) {
            $invalidProperties[] = "'object_id' can't be null";
        }
        if (!is_null($this->container['threshold']) && ($this->container['threshold'] > 1)) {
            $invalidProperties[] = "invalid value for 'threshold', must be smaller than or equal to 1.";
        }

        if (!is_null($this->container['threshold']) && ($this->container['threshold'] < 0)) {
            $invalidProperties[] = "invalid value for 'threshold', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['max_recommendations']) && ($this->container['max_recommendations'] > 1000)) {
            $invalidProperties[] = "invalid value for 'max_recommendations', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['max_recommendations']) && ($this->container['max_recommendations'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_recommendations', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['min_recommendations']) && ($this->container['min_recommendations'] > 1000)) {
            $invalidProperties[] = "invalid value for 'min_recommendations', must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['min_recommendations']) && ($this->container['min_recommendations'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_recommendations', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets index_name
     *
     * @return string
     */
    public function getIndexName()
    {
        return $this->container['index_name'];
    }

    /**
     * Sets index_name
     *
     * @param string $index_name index_name
     *
     * @return self
     */
    public function setIndexName($index_name)
    {
        $this->container['index_name'] = $index_name;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        $allowedValues = $this->getModelAllowableValues();
        if (!in_array($model, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'model', must be one of '%s'",
                    $model,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets object_id
     *
     * @return string
     */
    public function getObjectId()
    {
        return $this->container['object_id'];
    }

    /**
     * Sets object_id
     *
     * @param string $object_id object_id
     *
     * @return self
     */
    public function setObjectId($object_id)
    {
        $this->container['object_id'] = $object_id;

        return $this;
    }

    /**
     * Gets threshold
     *
     * @return float|null
     */
    public function getThreshold()
    {
        return $this->container['threshold'];
    }

    /**
     * Sets threshold
     *
     * @param float|null $threshold threshold
     *
     * @return self
     */
    public function setThreshold($threshold)
    {

        if (!is_null($threshold) && ($threshold > 1)) {
            throw new \InvalidArgumentException('invalid value for $threshold when calling InlineObject., must be smaller than or equal to 1.');
        }
        if (!is_null($threshold) && ($threshold < 0)) {
            throw new \InvalidArgumentException('invalid value for $threshold when calling InlineObject., must be bigger than or equal to 0.');
        }

        $this->container['threshold'] = $threshold;

        return $this;
    }

    /**
     * Gets max_recommendations
     *
     * @return float|null
     */
    public function getMaxRecommendations()
    {
        return $this->container['max_recommendations'];
    }

    /**
     * Sets max_recommendations
     *
     * @param float|null $max_recommendations max_recommendations
     *
     * @return self
     */
    public function setMaxRecommendations($max_recommendations)
    {

        if (!is_null($max_recommendations) && ($max_recommendations > 1000)) {
            throw new \InvalidArgumentException('invalid value for $max_recommendations when calling InlineObject., must be smaller than or equal to 1000.');
        }
        if (!is_null($max_recommendations) && ($max_recommendations < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_recommendations when calling InlineObject., must be bigger than or equal to 0.');
        }

        $this->container['max_recommendations'] = $max_recommendations;

        return $this;
    }

    /**
     * Gets min_recommendations
     *
     * @return float|null
     */
    public function getMinRecommendations()
    {
        return $this->container['min_recommendations'];
    }

    /**
     * Sets min_recommendations
     *
     * @param float|null $min_recommendations min_recommendations
     *
     * @return self
     */
    public function setMinRecommendations($min_recommendations)
    {

        if (!is_null($min_recommendations) && ($min_recommendations > 1000)) {
            throw new \InvalidArgumentException('invalid value for $min_recommendations when calling InlineObject., must be smaller than or equal to 1000.');
        }
        if (!is_null($min_recommendations) && ($min_recommendations < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_recommendations when calling InlineObject., must be bigger than or equal to 0.');
        }

        $this->container['min_recommendations'] = $min_recommendations;

        return $this;
    }

    /**
     * Gets query_parameters
     *
     * @return array<string,object>|null
     */
    public function getQueryParameters()
    {
        return $this->container['query_parameters'];
    }

    /**
     * Sets query_parameters
     *
     * @param array<string,object>|null $query_parameters A key-value mapping of additional search parameters
     *
     * @return self
     */
    public function setQueryParameters($query_parameters)
    {
        $this->container['query_parameters'] = $query_parameters;

        return $this;
    }

    /**
     * Gets fallback_parameters
     *
     * @return array<string,object>|null
     */
    public function getFallbackParameters()
    {
        return $this->container['fallback_parameters'];
    }

    /**
     * Sets fallback_parameters
     *
     * @param array<string,object>|null $fallback_parameters A key-value mapping of additional search parameters
     *
     * @return self
     */
    public function setFallbackParameters($fallback_parameters)
    {
        $this->container['fallback_parameters'] = $fallback_parameters;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


