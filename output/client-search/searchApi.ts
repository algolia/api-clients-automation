import localVarRequest from 'request';
import http from 'http';

import { InlineResponse200 } from '../model/inlineResponse200';
import { InlineResponse2001 } from '../model/inlineResponse2001';
import { MultipleQueries } from '../model/multipleQueries';
import { MultipleQueriesResponse } from '../model/multipleQueriesResponse';
import { Operation } from '../model/operation';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'https://test-1.algolianet.com';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum SearchApiApiKeys {}

export class SearchApi {
  protected _basePath = defaultBasePath;
  protected _defaultHeaders: any = {};
  protected _useQuerystring: boolean = false;

  protected authentications = {
    default: <Authentication>new VoidAuth(),
  };

  protected interceptors: Interceptor[] = [];

  constructor(basePath?: string);
  constructor(basePathOrUsername: string, password?: string, basePath?: string) {
    if (password) {
      if (basePath) {
        this.basePath = basePath;
      }
    } else {
      if (basePathOrUsername) {
        this.basePath = basePathOrUsername;
      }
    }
  }

  set useQuerystring(value: boolean) {
    this._useQuerystring = value;
  }

  set basePath(basePath: string) {
    this._basePath = basePath;
  }

  set defaultHeaders(defaultHeaders: any) {
    this._defaultHeaders = defaultHeaders;
  }

  get defaultHeaders() {
    return this._defaultHeaders;
  }

  get basePath() {
    return this._basePath;
  }

  public setDefaultAuthentication(auth: Authentication) {
    this.authentications.default = auth;
  }

  public setApiKey(key: SearchApiApiKeys, value: string) {
    (this.authentications as any)[SearchApiApiKeys[key]].apiKey = value;
  }

  public addInterceptor(interceptor: Interceptor) {
    this.interceptors.push(interceptor);
  }

  /**
   *
   * @summary Performs multiple write operations in a single API call
   * @param xAlgoliaApplicationId Algolia appID
   * @param xAlgoliaAPIKey Algolia API key
   * @param indexName The index in which to perform the request
   * @param operation
   */
  public async batch(
    xAlgoliaApplicationId: string,
    xAlgoliaAPIKey: string,
    indexName: string,
    operation: Array<Operation>,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: InlineResponse2001 }> {
    const localVarPath =
      this.basePath +
      '/1/indexes/{indexName}/batch'.replace(
        '{' + 'indexName' + '}',
        encodeURIComponent(String(indexName))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'xAlgoliaApplicationId' is not null or undefined
    if (xAlgoliaApplicationId === null || xAlgoliaApplicationId === undefined) {
      throw new Error(
        'Required parameter xAlgoliaApplicationId was null or undefined when calling batch.'
      );
    }

    // verify required parameter 'xAlgoliaAPIKey' is not null or undefined
    if (xAlgoliaAPIKey === null || xAlgoliaAPIKey === undefined) {
      throw new Error(
        'Required parameter xAlgoliaAPIKey was null or undefined when calling batch.'
      );
    }

    // verify required parameter 'indexName' is not null or undefined
    if (indexName === null || indexName === undefined) {
      throw new Error('Required parameter indexName was null or undefined when calling batch.');
    }

    // verify required parameter 'operation' is not null or undefined
    if (operation === null || operation === undefined) {
      throw new Error('Required parameter operation was null or undefined when calling batch.');
    }

    localVarHeaderParams['X-Algolia-Application-Id'] = ObjectSerializer.serialize(
      xAlgoliaApplicationId,
      'string'
    );
    localVarHeaderParams['X-Algolia-API-Key'] = ObjectSerializer.serialize(
      xAlgoliaAPIKey,
      'string'
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(operation, 'Array<Operation>'),
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: InlineResponse2001 }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, 'InlineResponse2001');
              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   * Add an object to the index, automatically assigning it an object ID
   * @summary Save object
   * @param xAlgoliaApplicationId Algolia appID
   * @param xAlgoliaAPIKey Algolia API key
   * @param indexName The index in which to perform the request
   * @param requestBody
   */
  public async saveObject(
    xAlgoliaApplicationId: string,
    xAlgoliaAPIKey: string,
    indexName: string,
    requestBody: { [key: string]: object },
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: InlineResponse200 }> {
    const localVarPath =
      this.basePath +
      '/1/indexes/{indexName}'.replace(
        '{' + 'indexName' + '}',
        encodeURIComponent(String(indexName))
      );
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'xAlgoliaApplicationId' is not null or undefined
    if (xAlgoliaApplicationId === null || xAlgoliaApplicationId === undefined) {
      throw new Error(
        'Required parameter xAlgoliaApplicationId was null or undefined when calling saveObject.'
      );
    }

    // verify required parameter 'xAlgoliaAPIKey' is not null or undefined
    if (xAlgoliaAPIKey === null || xAlgoliaAPIKey === undefined) {
      throw new Error(
        'Required parameter xAlgoliaAPIKey was null or undefined when calling saveObject.'
      );
    }

    // verify required parameter 'indexName' is not null or undefined
    if (indexName === null || indexName === undefined) {
      throw new Error(
        'Required parameter indexName was null or undefined when calling saveObject.'
      );
    }

    // verify required parameter 'requestBody' is not null or undefined
    if (requestBody === null || requestBody === undefined) {
      throw new Error(
        'Required parameter requestBody was null or undefined when calling saveObject.'
      );
    }

    localVarHeaderParams['X-Algolia-Application-Id'] = ObjectSerializer.serialize(
      xAlgoliaApplicationId,
      'string'
    );
    localVarHeaderParams['X-Algolia-API-Key'] = ObjectSerializer.serialize(
      xAlgoliaAPIKey,
      'string'
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(requestBody, '{ [key: string]: object; }'),
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: InlineResponse200 }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, 'InlineResponse200');
              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
  /**
   *
   * @summary Get search results for the given requests.
   * @param xAlgoliaApplicationId Algolia appID
   * @param xAlgoliaAPIKey Algolia API key
   * @param multipleQueries
   */
  public async searchMulti(
    xAlgoliaApplicationId: string,
    xAlgoliaAPIKey: string,
    multipleQueries: Array<MultipleQueries>,
    options: { headers: { [name: string]: string } } = { headers: {} }
  ): Promise<{ response: http.IncomingMessage; body: MultipleQueriesResponse }> {
    const localVarPath = this.basePath + '/1/indexes/*/queries';
    let localVarQueryParameters: any = {};
    let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
    const produces = ['application/json'];
    // give precedence to 'application/json'
    if (produces.indexOf('application/json') >= 0) {
      localVarHeaderParams.Accept = 'application/json';
    } else {
      localVarHeaderParams.Accept = produces.join(',');
    }
    let localVarFormParams: any = {};

    // verify required parameter 'xAlgoliaApplicationId' is not null or undefined
    if (xAlgoliaApplicationId === null || xAlgoliaApplicationId === undefined) {
      throw new Error(
        'Required parameter xAlgoliaApplicationId was null or undefined when calling searchMulti.'
      );
    }

    // verify required parameter 'xAlgoliaAPIKey' is not null or undefined
    if (xAlgoliaAPIKey === null || xAlgoliaAPIKey === undefined) {
      throw new Error(
        'Required parameter xAlgoliaAPIKey was null or undefined when calling searchMulti.'
      );
    }

    // verify required parameter 'multipleQueries' is not null or undefined
    if (multipleQueries === null || multipleQueries === undefined) {
      throw new Error(
        'Required parameter multipleQueries was null or undefined when calling searchMulti.'
      );
    }

    localVarHeaderParams['X-Algolia-Application-Id'] = ObjectSerializer.serialize(
      xAlgoliaApplicationId,
      'string'
    );
    localVarHeaderParams['X-Algolia-API-Key'] = ObjectSerializer.serialize(
      xAlgoliaAPIKey,
      'string'
    );
    (<any>Object).assign(localVarHeaderParams, options.headers);

    let localVarUseFormData = false;

    let localVarRequestOptions: localVarRequest.Options = {
      method: 'POST',
      qs: localVarQueryParameters,
      headers: localVarHeaderParams,
      uri: localVarPath,
      useQuerystring: this._useQuerystring,
      json: true,
      body: ObjectSerializer.serialize(multipleQueries, 'Array<MultipleQueries>'),
    };

    let authenticationPromise = Promise.resolve();
    authenticationPromise = authenticationPromise.then(() =>
      this.authentications.default.applyToRequest(localVarRequestOptions)
    );

    let interceptorPromise = authenticationPromise;
    for (const interceptor of this.interceptors) {
      interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
    }

    return interceptorPromise.then(() => {
      if (Object.keys(localVarFormParams).length) {
        if (localVarUseFormData) {
          (<any>localVarRequestOptions).formData = localVarFormParams;
        } else {
          localVarRequestOptions.form = localVarFormParams;
        }
      }
      return new Promise<{ response: http.IncomingMessage; body: MultipleQueriesResponse }>(
        (resolve, reject) => {
          localVarRequest(localVarRequestOptions, (error, response, body) => {
            if (error) {
              reject(error);
            } else {
              body = ObjectSerializer.deserialize(body, 'MultipleQueriesResponse');
              if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                resolve({ response: response, body: body });
              } else {
                reject(new HttpError(response, body, response.statusCode));
              }
            }
          });
        }
      );
    });
  }
}
