# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
from json import loads
from algoliasearch.http.transporter import EchoTransporter
from algoliasearch.http.transporter_sync import EchoTransporterSync
from algoliasearch.search.client import SearchClient
from algoliasearch.search.client import SearchClientSync
from algoliasearch.search.config import SearchConfig


class TestSearchClient:
    _config = SearchConfig("test_app_id", "test_api_key")
    _client = SearchClient.create_with_config(
        config=_config, transporter=EchoTransporter(_config)
    )

    async def test_add_api_key_(self):
        """
        addApiKey
        """
        _req = await self._client.add_api_key_with_http_info(
            api_key={
                "acl": [
                    "search",
                    "addObject",
                ],
                "description": "my new api key",
                "validity": 300,
                "maxQueriesPerIPPerHour": 100,
                "maxHitsPerQuery": 20,
            },
        )

        assert _req.path == "/1/keys"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}"""
        )

    async def test_add_or_update_object_(self):
        """
        addOrUpdateObject
        """
        _req = await self._client.add_or_update_object_with_http_info(
            index_name="indexName",
            object_id="uniqueID",
            body={
                "key": "value",
            },
        )

        assert _req.path == "/1/indexes/indexName/uniqueID"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"key":"value"}""")

    async def test_append_source_(self):
        """
        appendSource
        """
        _req = await self._client.append_source_with_http_info(
            source={
                "source": "theSource",
                "description": "theDescription",
            },
        )

        assert _req.path == "/1/security/sources/append"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"source":"theSource","description":"theDescription"}"""
        )

    async def test_assign_user_id_(self):
        """
        simple
        """
        _req = await self._client.assign_user_id_with_http_info(
            x_algolia_user_id="user42",
            assign_user_id_params={
                "cluster": "d4242-eu",
            },
        )

        assert _req.path == "/1/clusters/mapping"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {"x-algolia-user-id": "user42"}.items()
        assert loads(_req.data) == loads("""{"cluster":"d4242-eu"}""")

    async def test_assign_user_id_1(self):
        """
        it should not encode the userID
        """
        _req = await self._client.assign_user_id_with_http_info(
            x_algolia_user_id="user id with spaces",
            assign_user_id_params={
                "cluster": "cluster with spaces",
            },
        )

        assert _req.path == "/1/clusters/mapping"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert (
            _req.headers.items() >= {"x-algolia-user-id": "user id with spaces"}.items()
        )
        assert loads(_req.data) == loads("""{"cluster":"cluster with spaces"}""")

    async def test_batch_(self):
        """
        addObject
        """
        _req = await self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "addObject",
                        "body": {
                            "key": "bar",
                            "foo": "1",
                        },
                    },
                    {
                        "action": "addObject",
                        "body": {
                            "key": "baz",
                            "foo": "2",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"addObject","body":{"key":"bar","foo":"1"}},{"action":"addObject","body":{"key":"baz","foo":"2"}}]}"""
        )

    async def test_batch_1(self):
        """
        clear
        """
        _req = await self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "clear",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"clear","body":{"key":"value"}}]}"""
        )

    async def test_batch_2(self):
        """
        delete
        """
        _req = await self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "delete",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"delete","body":{"key":"value"}}]}"""
        )

    async def test_batch_3(self):
        """
        deleteObject
        """
        _req = await self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "deleteObject",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"deleteObject","body":{"key":"value"}}]}"""
        )

    async def test_batch_4(self):
        """
        partialUpdateObject
        """
        _req = await self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "partialUpdateObject",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"partialUpdateObject","body":{"key":"value"}}]}"""
        )

    async def test_batch_5(self):
        """
        partialUpdateObjectNoCreate
        """
        _req = await self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "partialUpdateObjectNoCreate",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"partialUpdateObjectNoCreate","body":{"key":"value"}}]}"""
        )

    async def test_batch_6(self):
        """
        updateObject
        """
        _req = await self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "updateObject",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"updateObject","body":{"key":"value"}}]}"""
        )

    async def test_batch_assign_user_ids_(self):
        """
        batchAssignUserIds
        """
        _req = await self._client.batch_assign_user_ids_with_http_info(
            x_algolia_user_id="userID",
            batch_assign_user_ids_params={
                "cluster": "theCluster",
                "users": [
                    "user1",
                    "user2",
                ],
            },
        )

        assert _req.path == "/1/clusters/mapping/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {"x-algolia-user-id": "userID"}.items()
        assert loads(_req.data) == loads(
            """{"cluster":"theCluster","users":["user1","user2"]}"""
        )

    async def test_batch_dictionary_entries_(self):
        """
        replace
        """
        _req = await self._client.batch_dictionary_entries_with_http_info(
            dictionary_name="plurals",
            batch_dictionary_entries_params={
                "clearExistingDictionaryEntries": True,
                "requests": [
                    {
                        "action": "addEntry",
                        "body": {
                            "objectID": "1",
                            "language": "en",
                            "word": "fancy",
                            "words": [
                                "believe",
                                "algolia",
                            ],
                            "decomposition": [
                                "trust",
                                "algolia",
                            ],
                            "state": "enabled",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/dictionaries/plurals/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"clearExistingDictionaryEntries":true,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}}]}"""
        )

    async def test_batch_dictionary_entries_1(self):
        """
        delete
        """
        _req = await self._client.batch_dictionary_entries_with_http_info(
            dictionary_name="plurals",
            batch_dictionary_entries_params={
                "clearExistingDictionaryEntries": True,
                "requests": [
                    {
                        "action": "deleteEntry",
                        "body": {
                            "objectID": "1",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/dictionaries/plurals/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"clearExistingDictionaryEntries":true,"requests":[{"action":"deleteEntry","body":{"objectID":"1"}}]}"""
        )

    async def test_batch_dictionary_entries_2(self):
        """
        append
        """
        _req = await self._client.batch_dictionary_entries_with_http_info(
            dictionary_name="stopwords",
            batch_dictionary_entries_params={
                "requests": [
                    {
                        "action": "addEntry",
                        "body": {
                            "objectID": "1",
                            "language": "en",
                            "additional": "try me",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/dictionaries/stopwords/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}"""
        )

    async def test_browse_(self):
        """
        browse with minimal parameters
        """
        _req = await self._client.browse_with_http_info(
            index_name="cts_e2e_browse",
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/browse"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_browse_1(self):
        """
        browse with search parameters
        """
        _req = await self._client.browse_with_http_info(
            index_name="indexName",
            browse_params={
                "query": "myQuery",
                "facetFilters": [
                    "tags:algolia",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/browse"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"myQuery","facetFilters":["tags:algolia"]}"""
        )

    async def test_browse_2(self):
        """
        browse allow a cursor in parameters
        """
        _req = await self._client.browse_with_http_info(
            index_name="indexName",
            browse_params={
                "cursor": "test",
            },
        )

        assert _req.path == "/1/indexes/indexName/browse"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"cursor":"test"}""")

    async def test_clear_objects_(self):
        """
        clearObjects
        """
        _req = await self._client.clear_objects_with_http_info(
            index_name="theIndexName",
        )

        assert _req.path == "/1/indexes/theIndexName/clear"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_clear_rules_(self):
        """
        clearRules
        """
        _req = await self._client.clear_rules_with_http_info(
            index_name="indexName",
        )

        assert _req.path == "/1/indexes/indexName/rules/clear"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_clear_synonyms_(self):
        """
        clearSynonyms
        """
        _req = await self._client.clear_synonyms_with_http_info(
            index_name="indexName",
        )

        assert _req.path == "/1/indexes/indexName/synonyms/clear"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_custom_delete_(self):
        """
        allow del method for a custom path with minimal parameters
        """
        _req = await self._client.custom_delete_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_custom_delete_1(self):
        """
        allow del method for a custom path with all parameters
        """
        _req = await self._client.custom_delete_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_custom_get_(self):
        """
        allow get method for a custom path with minimal parameters
        """
        _req = await self._client.custom_get_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_custom_get_1(self):
        """
        allow get method for a custom path with all parameters
        """
        _req = await self._client.custom_get_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters with space",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters%20with%20space"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_custom_get_2(self):
        """
        requestOptions should be escaped too
        """
        _req = await self._client.custom_get_with_http_info(
            path="test/all",
            parameters={
                "query": "to be overriden",
            },
            request_options={
                "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
                "query_parameters": loads(
                    """{"query":"parameters with space","and an array":["array","with spaces"]}"""
                ),
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {
                "query": "parameters%20with%20space",
                "and%20an%20array": "array%2Cwith%20spaces",
            }.items()
        )
        assert _req.headers.items() >= {"x-header-1": "spaces are left alone"}.items()
        assert _req.data is None

    async def test_custom_post_(self):
        """
        allow post method for a custom path with minimal parameters
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_custom_post_1(self):
        """
        allow post method for a custom path with all parameters
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
            body={
                "body": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"body":"parameters"}""")

    async def test_custom_post_2(self):
        """
        requestOptions can override default query parameters
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"query":"myQueryParameter"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "myQueryParameter"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_3(self):
        """
        requestOptions merges query parameters with default ones
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "query2": "myQueryParameter"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_4(self):
        """
        requestOptions can override default headers
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {"x-algolia-api-key": "ALGOLIA_API_KEY"}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_5(self):
        """
        requestOptions merges headers with default ones
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {"x-algolia-api-key": "ALGOLIA_API_KEY"}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_6(self):
        """
        requestOptions queryParameters accepts booleans
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"isItWorking":true}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "isItWorking": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_7(self):
        """
        requestOptions queryParameters accepts integers
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":2}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_8(self):
        """
        requestOptions queryParameters accepts list of string
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "b%20and%20c%2Cd"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_9(self):
        """
        requestOptions queryParameters accepts list of booleans
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":[true,true,false]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "true%2Ctrue%2Cfalse"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_10(self):
        """
        requestOptions queryParameters accepts list of integers
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":[1,2]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "1%2C2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_put_(self):
        """
        allow put method for a custom path with minimal parameters
        """
        _req = await self._client.custom_put_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_custom_put_1(self):
        """
        allow put method for a custom path with all parameters
        """
        _req = await self._client.custom_put_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
            body={
                "body": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"body":"parameters"}""")

    async def test_delete_api_key_(self):
        """
        deleteApiKey
        """
        _req = await self._client.delete_api_key_with_http_info(
            key="myTestApiKey",
        )

        assert _req.path == "/1/keys/myTestApiKey"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_by_(self):
        """
        deleteBy
        """
        _req = await self._client.delete_by_with_http_info(
            index_name="theIndexName",
            delete_by_params={
                "filters": "brand:brandName",
            },
        )

        assert _req.path == "/1/indexes/theIndexName/deleteByQuery"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"filters":"brand:brandName"}""")

    async def test_delete_index_(self):
        """
        deleteIndex
        """
        _req = await self._client.delete_index_with_http_info(
            index_name="theIndexName",
        )

        assert _req.path == "/1/indexes/theIndexName"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_object_(self):
        """
        deleteObject
        """
        _req = await self._client.delete_object_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            object_id="uniqueID",
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/uniqueID"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_rule_(self):
        """
        delete rule simple case
        """
        _req = await self._client.delete_rule_with_http_info(
            index_name="indexName",
            object_id="id1",
        )

        assert _req.path == "/1/indexes/indexName/rules/id1"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_rule_1(self):
        """
        delete rule with simple characters to encode in objectID
        """
        _req = await self._client.delete_rule_with_http_info(
            index_name="indexName",
            object_id="test/with/slash",
        )

        assert _req.path == "/1/indexes/indexName/rules/test%2Fwith%2Fslash"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_source_(self):
        """
        deleteSource
        """
        _req = await self._client.delete_source_with_http_info(
            source="theSource",
        )

        assert _req.path == "/1/security/sources/theSource"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_synonym_(self):
        """
        deleteSynonym
        """
        _req = await self._client.delete_synonym_with_http_info(
            index_name="indexName",
            object_id="id1",
        )

        assert _req.path == "/1/indexes/indexName/synonyms/id1"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_api_key_(self):
        """
        getApiKey
        """
        _req = await self._client.get_api_key_with_http_info(
            key="myTestApiKey",
        )

        assert _req.path == "/1/keys/myTestApiKey"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_app_task_(self):
        """
        getAppTask
        """
        _req = await self._client.get_app_task_with_http_info(
            task_id=123,
        )

        assert _req.path == "/1/task/123"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_dictionary_languages_(self):
        """
        get getDictionaryLanguages
        """
        _req = await self._client.get_dictionary_languages_with_http_info()

        assert _req.path == "/1/dictionaries/*/languages"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_dictionary_settings_(self):
        """
        get getDictionarySettings results
        """
        _req = await self._client.get_dictionary_settings_with_http_info()

        assert _req.path == "/1/dictionaries/*/settings"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_logs_(self):
        """
        getLogs with minimal parameters
        """
        _req = await self._client.get_logs_with_http_info()

        assert _req.path == "/1/logs"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_logs_1(self):
        """
        getLogs with parameters
        """
        _req = await self._client.get_logs_with_http_info(
            offset=5,
            length=10,
            index_name="theIndexName",
            type="all",
        )

        assert _req.path == "/1/logs"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {
                "offset": "5",
                "length": "10",
                "indexName": "theIndexName",
                "type": "all",
            }.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_object_(self):
        """
        getObject
        """
        _req = await self._client.get_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_retrieve=[
                "attr1",
                "attr2",
            ],
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {"attributesToRetrieve": "attr1%2Cattr2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_object_1(self):
        """
        search with a real object
        """
        _req = await self._client.get_object_with_http_info(
            index_name="cts_e2e_browse",
            object_id="Batman and Robin",
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/Batman%20and%20Robin"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_objects_(self):
        """
        getObjects
        """
        _req = await self._client.get_objects_with_http_info(
            get_objects_params={
                "requests": [
                    {
                        "attributesToRetrieve": [
                            "attr1",
                            "attr2",
                        ],
                        "objectID": "uniqueID",
                        "indexName": "theIndexName",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/objects"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}"""
        )

    async def test_get_rule_(self):
        """
        getRule
        """
        _req = await self._client.get_rule_with_http_info(
            index_name="cts_e2e_browse",
            object_id="qr-1725004648916",
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/rules/qr-1725004648916"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_settings_(self):
        """
        getSettings
        """
        _req = await self._client.get_settings_with_http_info(
            index_name="cts_e2e_settings",
        )

        assert _req.path == "/1/indexes/cts_e2e_settings/settings"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_sources_(self):
        """
        getSources
        """
        _req = await self._client.get_sources_with_http_info()

        assert _req.path == "/1/security/sources"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_synonym_(self):
        """
        getSynonym
        """
        _req = await self._client.get_synonym_with_http_info(
            index_name="indexName",
            object_id="id1",
        )

        assert _req.path == "/1/indexes/indexName/synonyms/id1"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_task_(self):
        """
        getTask
        """
        _req = await self._client.get_task_with_http_info(
            index_name="theIndexName",
            task_id=123,
        )

        assert _req.path == "/1/indexes/theIndexName/task/123"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_top_user_ids_(self):
        """
        getTopUserIds
        """
        _req = await self._client.get_top_user_ids_with_http_info()

        assert _req.path == "/1/clusters/mapping/top"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_user_id_(self):
        """
        getUserId
        """
        _req = await self._client.get_user_id_with_http_info(
            user_id="uniqueID",
        )

        assert _req.path == "/1/clusters/mapping/uniqueID"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_has_pending_mappings_(self):
        """
        hasPendingMappings with minimal parameters
        """
        _req = await self._client.has_pending_mappings_with_http_info()

        assert _req.path == "/1/clusters/mapping/pending"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_has_pending_mappings_1(self):
        """
        hasPendingMappings with parameters
        """
        _req = await self._client.has_pending_mappings_with_http_info(
            get_clusters=True,
        )

        assert _req.path == "/1/clusters/mapping/pending"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {"getClusters": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_api_keys_(self):
        """
        listApiKeys
        """
        _req = await self._client.list_api_keys_with_http_info()

        assert _req.path == "/1/keys"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_clusters_(self):
        """
        listClusters
        """
        _req = await self._client.list_clusters_with_http_info()

        assert _req.path == "/1/clusters"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_indices_(self):
        """
        listIndices with minimal parameters
        """
        _req = await self._client.list_indices_with_http_info()

        assert _req.path == "/1/indexes"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_indices_1(self):
        """
        listIndices with parameters
        """
        _req = await self._client.list_indices_with_http_info(
            page=8,
            hits_per_page=3,
        )

        assert _req.path == "/1/indexes"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items() == {"page": "8", "hitsPerPage": "3"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_user_ids_(self):
        """
        listUserIds with minimal parameters
        """
        _req = await self._client.list_user_ids_with_http_info()

        assert _req.path == "/1/clusters/mapping"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_user_ids_1(self):
        """
        listUserIds with parameters
        """
        _req = await self._client.list_user_ids_with_http_info(
            page=8,
            hits_per_page=100,
        )

        assert _req.path == "/1/clusters/mapping"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items() == {"page": "8", "hitsPerPage": "100"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_multiple_batch_(self):
        """
        multipleBatch
        """
        _req = await self._client.multiple_batch_with_http_info(
            batch_params={
                "requests": [
                    {
                        "action": "addObject",
                        "body": {
                            "key": "value",
                        },
                        "indexName": "theIndexName",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"addObject","body":{"key":"value"},"indexName":"theIndexName"}]}"""
        )

    async def test_operation_index_(self):
        """
        scopes
        """
        _req = await self._client.operation_index_with_http_info(
            index_name="<SOURCE_INDEX_NAME>",
            operation_index_params={
                "operation": "move",
                "destination": "<DESTINATION_INDEX_NAME>",
                "scope": [
                    "rules",
                    "settings",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"operation":"move","destination":"<DESTINATION_INDEX_NAME>","scope":["rules","settings"]}"""
        )

    async def test_operation_index_1(self):
        """
        copy
        """
        _req = await self._client.operation_index_with_http_info(
            index_name="<SOURCE_INDEX_NAME>",
            operation_index_params={
                "operation": "copy",
                "destination": "<DESTINATION_INDEX_NAME>",
            },
        )

        assert _req.path == "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"operation":"copy","destination":"<DESTINATION_INDEX_NAME>"}"""
        )

    async def test_operation_index_2(self):
        """
        move
        """
        _req = await self._client.operation_index_with_http_info(
            index_name="<SOURCE_INDEX_NAME>",
            operation_index_params={
                "operation": "move",
                "destination": "<DESTINATION_INDEX_NAME>",
            },
        )

        assert _req.path == "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"operation":"move","destination":"<DESTINATION_INDEX_NAME>"}"""
        )

    async def test_partial_update_object_(self):
        """
        Partial update with a new value for a string attribute
        """
        _req = await self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": "new value",
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":"new value"}""")

    async def test_partial_update_object_1(self):
        """
        Partial update with a new value for an integer attribute
        """
        _req = await self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": 1,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":1}""")

    async def test_partial_update_object_2(self):
        """
        Partial update with a new value for a boolean attribute
        """
        _req = await self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":true}""")

    async def test_partial_update_object_3(self):
        """
        Partial update with a new value for an array attribute
        """
        _req = await self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": [
                    "one",
                    "two",
                    "three",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":["one","two","three"]}""")

    async def test_partial_update_object_4(self):
        """
        Partial update with a new value for an object attribute
        """
        _req = await self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": {
                    "nested": "value",
                },
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":{"nested":"value"}}""")

    async def test_partial_update_object_5(self):
        """
        with visible_by filter
        """
        _req = await self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "visible_by": [
                    "Angela",
                    "group/Finance",
                    "group/Shareholders",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"visible_by":["Angela","group/Finance","group/Shareholders"]}"""
        )

    async def test_remove_user_id_(self):
        """
        removeUserId
        """
        _req = await self._client.remove_user_id_with_http_info(
            user_id="uniqueID",
        )

        assert _req.path == "/1/clusters/mapping/uniqueID"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_replace_sources_(self):
        """
        replaceSources
        """
        _req = await self._client.replace_sources_with_http_info(
            source=[
                {
                    "source": "theSource",
                    "description": "theDescription",
                },
            ],
        )

        assert _req.path == "/1/security/sources"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"source":"theSource","description":"theDescription"}]"""
        )

    async def test_restore_api_key_(self):
        """
        restoreApiKey
        """
        _req = await self._client.restore_api_key_with_http_info(
            key="ALGOLIA_API_KEY",
        )

        assert _req.path == "/1/keys/ALGOLIA_API_KEY/restore"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_save_object_(self):
        """
        saveObject
        """
        _req = await self._client.save_object_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            body={
                "objectID": "id",
                "test": "val",
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"objectID":"id","test":"val"}""")

    async def test_save_rule_(self):
        """
        saveRule with minimal parameters
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="id1",
            rule={
                "objectID": "id1",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:xiaomi",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/id1"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:xiaomi"}}}"""
        )

    async def test_save_rule_1(self):
        """
        saveRule with all parameters
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="id1",
            rule={
                "objectID": "id1",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "contains",
                        "alternatives": False,
                        "context": "search",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:apple",
                        "query": {
                            "remove": [
                                "algolia",
                            ],
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "abc",
                                    "insert": "cde",
                                },
                                {
                                    "type": "replace",
                                    "delete": "abc",
                                    "insert": "cde",
                                },
                            ],
                        },
                    },
                    "hide": [
                        {
                            "objectID": "321",
                        },
                    ],
                    "filterPromotes": False,
                    "userData": {
                        "algolia": "aloglia",
                    },
                    "promote": [
                        {
                            "objectID": "abc",
                            "position": 3,
                        },
                        {
                            "objectIDs": [
                                "abc",
                                "def",
                            ],
                            "position": 1,
                        },
                    ],
                },
                "description": "test",
                "enabled": True,
                "validity": [
                    {
                        "from": 1656670273,
                        "until": 1656670277,
                    },
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/indexName/rules/id1"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}"""
        )

    async def test_save_rule_2(self):
        """
        b2b catalog
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="article-rule",
            rule={
                "objectID": "article-rule",
                "conditions": [
                    {
                        "pattern": "article",
                        "anchoring": "startsWith",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "article",
                                },
                            ],
                        },
                        "restrictSearchableAttributes": [
                            "title",
                            "book_id",
                        ],
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/article-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}"""
        )

    async def test_save_rule_3(self):
        """
        merchandising and promoting
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="director-rule",
            rule={
                "objectID": "director-rule",
                "conditions": [
                    {
                        "pattern": "{facet:director} director",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "restrictSearchableAttributes": [
                            "title",
                            "book_id",
                        ],
                        "automaticFacetFilters": [
                            {
                                "facet": "director",
                            },
                        ],
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "director",
                                },
                            ],
                        },
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/director-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"director-rule","conditions":[{"pattern":"{facet:director} director","anchoring":"contains"}],"consequence":{"params":{"restrictSearchableAttributes":["title","book_id"],"automaticFacetFilters":[{"facet":"director"}],"query":{"edits":[{"type":"remove","delete":"director"}]}}}}"""
        )

    async def test_save_rule_4(self):
        """
        harry potter
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="harry-potter-rule",
            rule={
                "objectID": "harry-potter-rule",
                "conditions": [
                    {
                        "pattern": "harry potter",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "userData": {
                        "promo_content": "20% OFF on all Harry Potter books!",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/harry-potter-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"harry-potter-rule","conditions":[{"pattern":"harry potter","anchoring":"contains"}],"consequence":{"userData":{"promo_content":"20% OFF on all Harry Potter books!"}}}"""
        )

    async def test_save_rule_5(self):
        """
        merchandising empty query
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="clearance-category-filter",
            rule={
                "objectID": "clearance-category-filter",
                "conditions": [
                    {
                        "pattern": "",
                        "anchoring": "is",
                        "context": "landing",
                    },
                ],
                "consequence": {
                    "params": {
                        "optionalFilters": "clearance:true",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/clearance-category-filter"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"clearance-category-filter","conditions":[{"pattern":"","anchoring":"is","context":"landing"}],"consequence":{"params":{"optionalFilters":"clearance:true"}}}"""
        )

    async def test_save_rule_6(self):
        """
        redirect
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="redirect-help-rule",
            rule={
                "objectID": "redirect-help-rule",
                "conditions": [
                    {
                        "pattern": "help",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "userData": {
                        "redirect": "https://www.algolia.com/support",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/redirect-help-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"redirect-help-rule","conditions":[{"pattern":"help","anchoring":"contains"}],"consequence":{"userData":{"redirect":"https://www.algolia.com/support"}}}"""
        )

    async def test_save_rule_7(self):
        """
        promote some results over others
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="tomato-fruit",
            rule={
                "objectID": "tomato-fruit",
                "conditions": [
                    {
                        "pattern": "tomato",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "optionalFilters": "food_group:fruit",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/tomato-fruit"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"tomato-fruit","conditions":[{"pattern":"tomato","anchoring":"contains"}],"consequence":{"params":{"optionalFilters":"food_group:fruit"}}}"""
        )

    async def test_save_rule_8(self):
        """
        promote several hits
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="Promote-Apple-Newest",
            rule={
                "objectID": "Promote-Apple-Newest",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "is",
                    },
                ],
                "consequence": {
                    "promote": [
                        {
                            "objectIDs": [
                                "iPhone-12345",
                                "watch-123",
                            ],
                            "position": 0,
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/Promote-Apple-Newest"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"Promote-Apple-Newest","conditions":[{"pattern":"apple","anchoring":"is"}],"consequence":{"promote":[{"objectIDs":["iPhone-12345","watch-123"],"position":0}]}}"""
        )

    async def test_save_rule_9(self):
        """
        promote newest release
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="Promote-iPhone-X",
            rule={
                "objectID": "Promote-iPhone-X",
                "conditions": [
                    {
                        "pattern": "iPhone",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "promote": [
                        {
                            "objectID": "iPhone-12345",
                            "position": 0,
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/Promote-iPhone-X"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"Promote-iPhone-X","conditions":[{"pattern":"iPhone","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"iPhone-12345","position":0}]}}"""
        )

    async def test_save_rule_10(self):
        """
        promote single item
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="promote-harry-potter-box-set",
            rule={
                "objectID": "promote-harry-potter-box-set",
                "conditions": [
                    {
                        "pattern": "Harry Potter",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "promote": [
                        {
                            "objectID": "HP-12345",
                            "position": 0,
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/promote-harry-potter-box-set"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"promote-harry-potter-box-set","conditions":[{"pattern":"Harry Potter","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"HP-12345","position":0}]}}"""
        )

    async def test_save_rule_11(self):
        """
        limit search results
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="article-rule",
            rule={
                "objectID": "article-rule",
                "conditions": [
                    {
                        "pattern": "article",
                        "anchoring": "startsWith",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "article",
                                },
                            ],
                        },
                        "restrictSearchableAttributes": [
                            "title",
                            "book_id",
                        ],
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/article-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}"""
        )

    async def test_save_rule_12(self):
        """
        query match
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="tagged-brand-rule",
            rule={
                "conditions": [
                    {
                        "pattern": "brand: {facet:brand}",
                        "anchoring": "contains",
                        "alternatives": False,
                    },
                ],
                "consequence": {
                    "params": {
                        "automaticFacetFilters": [
                            {
                                "facet": "brand",
                            },
                        ],
                        "query": {
                            "remove": [
                                "brand:",
                                "{facet:brand}",
                            ],
                        },
                    },
                },
                "description": "filter on brand: {brand}",
                "objectID": "tagged-brand-rule",
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/tagged-brand-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"conditions":[{"pattern":"brand: {facet:brand}","anchoring":"contains","alternatives":false}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"brand"}],"query":{"remove":["brand:","{facet:brand}"]}}},"description":"filter on brand: {brand}","objectID":"tagged-brand-rule"}"""
        )

    async def test_save_rule_13(self):
        """
        dynamic filtering
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="color-facets",
            rule={
                "objectID": "color-facets",
                "conditions": [
                    {
                        "pattern": "{facet:color}",
                    },
                ],
                "consequence": {
                    "params": {
                        "automaticFacetFilters": [
                            {
                                "facet": "color",
                            },
                        ],
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/color-facets"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"color-facets","conditions":[{"pattern":"{facet:color}"}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"color"}]}}}"""
        )

    async def test_save_rule_14(self):
        """
        hide hits
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="hide-12345",
            rule={
                "objectID": "hide-12345",
                "conditions": [
                    {
                        "pattern": "cheap",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "hide": [
                        {
                            "objectID": "to-hide-12345",
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/hide-12345"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"hide-12345","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"hide":[{"objectID":"to-hide-12345"}]}}"""
        )

    async def test_save_rule_15(self):
        """
        one rule per facet
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="red-color",
            rule={
                "objectID": "red-color",
                "conditions": [
                    {
                        "pattern": "red",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "remove": [
                                "red",
                            ],
                        },
                        "filters": "color:red",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/red-color"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"red-color","conditions":[{"pattern":"red","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["red"]},"filters":"color:red"}}}"""
        )

    async def test_save_rule_16(self):
        """
        numerical filters
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="cheap",
            rule={
                "objectID": "cheap",
                "conditions": [
                    {
                        "pattern": "cheap",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "remove": [
                                "cheap",
                            ],
                        },
                        "filters": "price < 10",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/cheap"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 10"}}}"""
        )

    async def test_save_rule_17(self):
        """
        negative filters
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="gluten-free-rule",
            rule={
                "objectID": "gluten-free-rule",
                "conditions": [
                    {
                        "pattern": "gluten-free",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "NOT allergens:gluten",
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "gluten-free",
                                },
                            ],
                        },
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/gluten-free-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"gluten-free-rule","conditions":[{"pattern":"gluten-free","anchoring":"contains"}],"consequence":{"params":{"filters":"NOT allergens:gluten","query":{"edits":[{"type":"remove","delete":"gluten-free"}]}}}}"""
        )

    async def test_save_rule_18(self):
        """
        positive filters
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="diet-rule",
            rule={
                "objectID": "diet-rule",
                "conditions": [
                    {
                        "pattern": "diet",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "'low-carb' OR 'low-fat'",
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "diet",
                                },
                            ],
                        },
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/diet-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"diet-rule","conditions":[{"pattern":"diet","anchoring":"contains"}],"consequence":{"params":{"filters":"'low-carb' OR 'low-fat'","query":{"edits":[{"type":"remove","delete":"diet"}]}}}}"""
        )

    async def test_save_rule_19(self):
        """
        conditionless
        """
        _req = await self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="diet-rule",
            rule={
                "objectID": "diet-rule",
                "consequence": {
                    "params": {
                        "filters": "'low-carb' OR 'low-fat'",
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "diet",
                                },
                            ],
                        },
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/diet-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"diet-rule","consequence":{"params":{"filters":"'low-carb' OR 'low-fat'","query":{"edits":[{"type":"remove","delete":"diet"}]}}}}"""
        )

    async def test_save_rules_(self):
        """
        saveRules with minimal parameters
        """
        _req = await self._client.save_rules_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            rules=[
                {
                    "objectID": "a-rule-id",
                    "conditions": [
                        {
                            "pattern": "smartphone",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "filters": "brand:apple",
                        },
                    },
                },
                {
                    "objectID": "a-second-rule-id",
                    "conditions": [
                        {
                            "pattern": "apple",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "filters": "brand:samsung",
                        },
                    },
                },
            ],
            forward_to_replicas=False,
            clear_existing_rules=True,
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"forwardToReplicas": "false", "clearExistingRules": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:apple"}}},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:samsung"}}}]"""
        )

    async def test_save_rules_1(self):
        """
        saveRules with all parameters
        """
        _req = await self._client.save_rules_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            rules=[
                {
                    "objectID": "id1",
                    "conditions": [
                        {
                            "pattern": "apple",
                            "anchoring": "contains",
                            "alternatives": False,
                            "context": "search",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "filters": "brand:apple",
                            "query": {
                                "remove": [
                                    "algolia",
                                ],
                                "edits": [
                                    {
                                        "type": "remove",
                                        "delete": "abc",
                                        "insert": "cde",
                                    },
                                    {
                                        "type": "replace",
                                        "delete": "abc",
                                        "insert": "cde",
                                    },
                                ],
                            },
                        },
                        "hide": [
                            {
                                "objectID": "321",
                            },
                        ],
                        "filterPromotes": False,
                        "userData": {
                            "algolia": "aloglia",
                        },
                        "promote": [
                            {
                                "objectID": "abc",
                                "position": 3,
                            },
                            {
                                "objectIDs": [
                                    "abc",
                                    "def",
                                ],
                                "position": 1,
                            },
                        ],
                    },
                    "description": "test",
                    "enabled": True,
                    "validity": [
                        {
                            "from": 1656670273,
                            "until": 1656670277,
                        },
                    ],
                },
            ],
            forward_to_replicas=True,
            clear_existing_rules=True,
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"forwardToReplicas": "true", "clearExistingRules": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]"""
        )

    async def test_save_rules_2(self):
        """
        dynamic filtering
        """
        _req = await self._client.save_rules_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            rules=[
                {
                    "objectID": "toaster",
                    "conditions": [
                        {
                            "pattern": "toaster",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "query": {
                                "remove": [
                                    "toaster",
                                ],
                            },
                            "filters": "product_type:toaster",
                        },
                    },
                },
                {
                    "objectID": "cheap",
                    "conditions": [
                        {
                            "pattern": "cheap",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "query": {
                                "remove": [
                                    "cheap",
                                ],
                            },
                            "filters": "price < 15",
                        },
                    },
                },
            ],
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"toaster","conditions":[{"pattern":"toaster","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["toaster"]},"filters":"product_type:toaster"}}},{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 15"}}}]"""
        )

    async def test_save_rules_3(self):
        """
        enhance search results
        """
        _req = await self._client.save_rules_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            rules=[
                {
                    "objectID": "country",
                    "conditions": [
                        {
                            "pattern": "{facet:country}",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "aroundLatLngViaIP": False,
                        },
                    },
                },
                {
                    "objectID": "city",
                    "conditions": [
                        {
                            "pattern": "{facet:city}",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "aroundLatLngViaIP": False,
                        },
                    },
                },
            ],
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"country","conditions":[{"pattern":"{facet:country}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}},{"objectID":"city","conditions":[{"pattern":"{facet:city}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}}]"""
        )

    async def test_save_synonym_(self):
        """
        saveSynonym
        """
        _req = await self._client.save_synonym_with_http_info(
            index_name="indexName",
            object_id="id1",
            synonym_hit={
                "objectID": "id1",
                "type": "synonym",
                "synonyms": [
                    "car",
                    "vehicule",
                    "auto",
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/indexName/synonyms/id1"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]}"""
        )

    async def test_save_synonyms_(self):
        """
        saveSynonyms
        """
        _req = await self._client.save_synonyms_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            synonym_hit=[
                {
                    "objectID": "id1",
                    "type": "synonym",
                    "synonyms": [
                        "car",
                        "vehicule",
                        "auto",
                    ],
                },
                {
                    "objectID": "id2",
                    "type": "onewaysynonym",
                    "input": "iphone",
                    "synonyms": [
                        "ephone",
                        "aphone",
                        "yphone",
                    ],
                },
            ],
            forward_to_replicas=True,
            replace_existing_synonyms=True,
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/synonyms/batch"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"forwardToReplicas": "true", "replaceExistingSynonyms": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]"""
        )

    async def test_search_(self):
        """
        withHitsPerPage
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "hitsPerPage": 50,
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","hitsPerPage":50}]}"""
        )

    async def test_search_1(self):
        """
        filterOnly
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "filters": "actor:Scarlett Johansson",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Scarlett Johansson"}]}"""
        )

    async def test_search_2(self):
        """
        filterOr
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "filters": "actor:Tom Cruise OR actor:Scarlett Johansson",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Tom Cruise OR actor:Scarlett Johansson"}]}"""
        )

    async def test_search_3(self):
        """
        filterNot
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "filters": "NOT actor:Nicolas Cage",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"NOT actor:Nicolas Cage"}]}"""
        )

    async def test_search_4(self):
        """
        search for a single hits request with minimal parameters
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "cts_e2e_search_empty_index",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"cts_e2e_search_empty_index"}]}"""
        )

    async def test_search_5(self):
        """
        search with highlight and snippet results
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "cts_e2e_highlight_snippet_results",
                        "query": "vim",
                        "attributesToSnippet": [
                            "*:20",
                        ],
                        "attributesToHighlight": [
                            "*",
                        ],
                        "attributesToRetrieve": [
                            "*",
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"cts_e2e_highlight_snippet_results","query":"vim","attributesToSnippet":["*:20"],"attributesToHighlight":["*"],"attributesToRetrieve":["*"]}]}"""
        )

    async def test_search_6(self):
        """
        retrieveFacets
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "facets": [
                            "author",
                            "genre",
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["author","genre"]}]}"""
        )

    async def test_search_7(self):
        """
        retrieveFacetsWildcard
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "facets": [
                            "*",
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["*"]}]}"""
        )

    async def test_search_8(self):
        """
        search for a single facet request with minimal parameters
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "cts_e2e_search_facet",
                        "type": "facet",
                        "facet": "editor",
                    },
                ],
                "strategy": "stopIfEnoughMatches",
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"cts_e2e_search_facet","type":"facet","facet":"editor"}],"strategy":"stopIfEnoughMatches"}"""
        )

    async def test_search_9(self):
        """
        search for a single hits request with all parameters
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                        "query": "myQuery",
                        "hitsPerPage": 50,
                        "type": "default",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}"""
        )

    async def test_search_10(self):
        """
        search for a single facet request with all parameters
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                        "type": "facet",
                        "facet": "theFacet",
                        "facetQuery": "theFacetQuery",
                        "query": "theQuery",
                        "maxFacetHits": 50,
                    },
                ],
                "strategy": "stopIfEnoughMatches",
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}"""
        )

    async def test_search_11(self):
        """
        search for multiple mixed requests in multiple indices with minimal parameters
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                    },
                    {
                        "indexName": "theIndexName2",
                        "type": "facet",
                        "facet": "theFacet",
                    },
                    {
                        "indexName": "theIndexName",
                        "type": "default",
                    },
                ],
                "strategy": "stopIfEnoughMatches",
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}"""
        )

    async def test_search_12(self):
        """
        search for multiple mixed requests in multiple indices with all parameters
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                        "type": "facet",
                        "facet": "theFacet",
                        "facetQuery": "theFacetQuery",
                        "query": "theQuery",
                        "maxFacetHits": 50,
                    },
                    {
                        "indexName": "theIndexName",
                        "query": "myQuery",
                        "hitsPerPage": 50,
                        "type": "default",
                    },
                ],
                "strategy": "stopIfEnoughMatches",
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}"""
        )

    async def test_search_13(self):
        """
        search filters accept all of the possible shapes
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                        "facetFilters": "mySearch:filters",
                        "reRankingApplyFilter": "mySearch:filters",
                        "tagFilters": "mySearch:filters",
                        "numericFilters": "mySearch:filters",
                        "optionalFilters": "mySearch:filters",
                    },
                    {
                        "indexName": "theIndexName",
                        "facetFilters": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                                [
                                    "mySearch:filters",
                                ],
                            ],
                        ],
                        "reRankingApplyFilter": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                        "tagFilters": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                        "numericFilters": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                        "optionalFilters": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters",["mySearch:filters"]]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}"""
        )

    async def test_search_14(self):
        """
        search filters end to end
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "cts_e2e_search_facet",
                        "filters": "editor:'visual studio' OR editor:neovim",
                    },
                    {
                        "indexName": "cts_e2e_search_facet",
                        "facetFilters": [
                            "editor:'visual studio'",
                            "editor:neovim",
                        ],
                    },
                    {
                        "indexName": "cts_e2e_search_facet",
                        "facetFilters": [
                            "editor:'visual studio'",
                            [
                                "editor:neovim",
                            ],
                        ],
                    },
                    {
                        "indexName": "cts_e2e_search_facet",
                        "facetFilters": [
                            "editor:'visual studio'",
                            [
                                "editor:neovim",
                                [
                                    "editor:goland",
                                ],
                            ],
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"cts_e2e_search_facet","filters":"editor:'visual studio' OR editor:neovim"},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'","editor:neovim"]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim"]]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim",["editor:goland"]]]}]}"""
        )

    async def test_search_15(self):
        """
        search with all search parameters
        """
        _req = await self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "advancedSyntax": True,
                        "advancedSyntaxFeatures": [
                            "exactPhrase",
                        ],
                        "allowTyposOnNumericTokens": True,
                        "alternativesAsExact": [
                            "multiWordsSynonym",
                        ],
                        "analytics": True,
                        "analyticsTags": [
                            "",
                        ],
                        "aroundLatLng": "",
                        "aroundLatLngViaIP": True,
                        "aroundPrecision": 0,
                        "aroundRadius": "all",
                        "attributeCriteriaComputedByMinProximity": True,
                        "attributesToHighlight": [
                            "",
                        ],
                        "attributesToRetrieve": [
                            "",
                        ],
                        "attributesToSnippet": [
                            "",
                        ],
                        "clickAnalytics": True,
                        "decompoundQuery": True,
                        "disableExactOnAttributes": [
                            "",
                        ],
                        "disableTypoToleranceOnAttributes": [
                            "",
                        ],
                        "distinct": 0,
                        "enableABTest": True,
                        "enablePersonalization": True,
                        "enableReRanking": True,
                        "enableRules": True,
                        "exactOnSingleWordQuery": "attribute",
                        "facetFilters": [
                            "",
                        ],
                        "facetingAfterDistinct": True,
                        "facets": [
                            "",
                        ],
                        "filters": "",
                        "getRankingInfo": True,
                        "highlightPostTag": "",
                        "highlightPreTag": "",
                        "hitsPerPage": 1,
                        "ignorePlurals": False,
                        "indexName": "theIndexName",
                        "insideBoundingBox": [
                            [
                                47.3165,
                                4.9665,
                                47.3424,
                                5.0201,
                            ],
                            [
                                40.9234,
                                2.1185,
                                38.643,
                                1.9916,
                            ],
                        ],
                        "insidePolygon": [
                            [
                                47.3165,
                                4.9665,
                                47.3424,
                                5.0201,
                                47.32,
                                4.9,
                            ],
                            [
                                40.9234,
                                2.1185,
                                38.643,
                                1.9916,
                                39.2587,
                                2.0104,
                            ],
                        ],
                        "length": 1,
                        "maxValuesPerFacet": 0,
                        "minProximity": 1,
                        "minWordSizefor1Typo": 0,
                        "minWordSizefor2Typos": 0,
                        "minimumAroundRadius": 1,
                        "naturalLanguages": [
                            "fr",
                        ],
                        "numericFilters": [
                            "",
                        ],
                        "offset": 0,
                        "optionalFilters": [
                            "",
                        ],
                        "optionalWords": [
                            "",
                        ],
                        "page": 0,
                        "percentileComputation": True,
                        "personalizationImpact": 0,
                        "query": "",
                        "queryLanguages": [
                            "fr",
                        ],
                        "queryType": "prefixAll",
                        "ranking": [
                            "",
                        ],
                        "reRankingApplyFilter": [
                            "",
                        ],
                        "relevancyStrictness": 0,
                        "removeStopWords": True,
                        "removeWordsIfNoResults": "allOptional",
                        "renderingContent": {
                            "facetOrdering": {
                                "facets": {
                                    "order": [
                                        "a",
                                        "b",
                                    ],
                                },
                                "values": {
                                    "a": {
                                        "order": [
                                            "b",
                                        ],
                                        "sortRemainingBy": "count",
                                    },
                                },
                            },
                        },
                        "replaceSynonymsInHighlight": True,
                        "responseFields": [
                            "",
                        ],
                        "restrictHighlightAndSnippetArrays": True,
                        "restrictSearchableAttributes": [
                            "",
                        ],
                        "ruleContexts": [
                            "",
                        ],
                        "similarQuery": "",
                        "snippetEllipsisText": "",
                        "sortFacetValuesBy": "",
                        "sumOrFiltersScores": True,
                        "synonyms": True,
                        "tagFilters": [
                            "",
                        ],
                        "type": "default",
                        "typoTolerance": "min",
                        "userToken": "",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":1,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"length":1,"maxValuesPerFacet":0,"minProximity":1,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":1,"naturalLanguages":["fr"],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":["fr"],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}"""
        )

    async def test_search_dictionary_entries_(self):
        """
        get searchDictionaryEntries results with minimal parameters
        """
        _req = await self._client.search_dictionary_entries_with_http_info(
            dictionary_name="stopwords",
            search_dictionary_entries_params={
                "query": "about",
            },
        )

        assert _req.path == "/1/dictionaries/stopwords/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"query":"about"}""")

    async def test_search_dictionary_entries_1(self):
        """
        get searchDictionaryEntries results with all parameters
        """
        _req = await self._client.search_dictionary_entries_with_http_info(
            dictionary_name="compounds",
            search_dictionary_entries_params={
                "query": "foo",
                "page": 4,
                "hitsPerPage": 2,
                "language": "fr",
            },
        )

        assert _req.path == "/1/dictionaries/compounds/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"foo","page":4,"hitsPerPage":2,"language":"fr"}"""
        )

    async def test_search_for_facet_values_(self):
        """
        get searchForFacetValues results with minimal parameters
        """
        _req = await self._client.search_for_facet_values_with_http_info(
            index_name="indexName",
            facet_name="facetName",
        )

        assert _req.path == "/1/indexes/indexName/facets/facetName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_search_for_facet_values_1(self):
        """
        get searchForFacetValues results with all parameters
        """
        _req = await self._client.search_for_facet_values_with_http_info(
            index_name="indexName",
            facet_name="facetName",
            search_for_facet_values_request={
                "params": "query=foo&facetFilters=['bar']",
                "facetQuery": "foo",
                "maxFacetHits": 42,
            },
        )

        assert _req.path == "/1/indexes/indexName/facets/facetName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"params":"query=foo&facetFilters=['bar']","facetQuery":"foo","maxFacetHits":42}"""
        )

    async def test_search_rules_(self):
        """
        searchRules
        """
        _req = await self._client.search_rules_with_http_info(
            index_name="cts_e2e_browse",
            search_rules_params={
                "query": "zorro",
            },
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/rules/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"query":"zorro"}""")

    async def test_search_single_index_(self):
        """
        search with minimal parameters
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_search_single_index_1(self):
        """
        search with special characters in indexName
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="cts_e2e_space in index",
        )

        assert _req.path == "/1/indexes/cts_e2e_space%20in%20index/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_search_single_index_2(self):
        """
        search with searchParams
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "query": "myQuery",
                "facetFilters": [
                    "tags:algolia",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"myQuery","facetFilters":["tags:algolia"]}"""
        )

    async def test_search_single_index_3(self):
        """
        single search retrieve snippets
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="cts_e2e_browse",
            search_params={
                "query": "batman mask of the phantasm",
                "attributesToRetrieve": [
                    "*",
                ],
                "attributesToSnippet": [
                    "*:20",
                ],
            },
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"batman mask of the phantasm","attributesToRetrieve":["*"],"attributesToSnippet":["*:20"]}"""
        )

    async def test_search_single_index_4(self):
        """
        query
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "query": "phone",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"query":"phone"}""")

    async def test_search_single_index_5(self):
        """
        filters
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "country:US AND price.gross < 2.0",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"country:US AND price.gross < 2.0"}"""
        )

    async def test_search_single_index_6(self):
        """
        distinct
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"distinct":true}""")

    async def test_search_single_index_7(self):
        """
        filtersNumeric
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "price < 10",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"filters":"price < 10"}""")

    async def test_search_single_index_8(self):
        """
        filtersTimestamp
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "NOT date_timestamp:1514764800 TO 1546300799",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"NOT date_timestamp:1514764800 TO 1546300799"}"""
        )

    async def test_search_single_index_9(self):
        """
        filtersSumOrFiltersScoresFalse
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
                "sumOrFiltersScores": False,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":false}"""
        )

    async def test_search_single_index_10(self):
        """
        filtersSumOrFiltersScoresTrue
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
                "sumOrFiltersScores": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":true}"""
        )

    async def test_search_single_index_11(self):
        """
        filtersStephenKing
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": 'author:"Stephen King"',
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"filters":"author:\\"Stephen King\\""}""")

    async def test_search_single_index_12(self):
        """
        filtersNotTags
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "NOT _tags:non-fiction",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"filters":"NOT _tags:non-fiction"}""")

    async def test_search_single_index_13(self):
        """
        facetFiltersList
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "facetFilters": [
                    "publisher:Penguin",
                    [
                        "author:Stephen King",
                        "genre:Horror",
                    ],
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"facetFilters":["publisher:Penguin",["author:Stephen King","genre:Horror"]]}"""
        )

    async def test_search_single_index_14(self):
        """
        facetFiltersNeg
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "facetFilters": "category:-Ebook",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facetFilters":"category:-Ebook"}""")

    async def test_search_single_index_15(self):
        """
        filtersAndFacetFilters
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": '(author:"Stephen King" OR genre:"Horror")',
                "facetFilters": [
                    "publisher:Penguin",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"(author:\\"Stephen King\\" OR genre:\\"Horror\\")","facetFilters":["publisher:Penguin"]}"""
        )

    async def test_search_single_index_16(self):
        """
        aroundLatLng
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "aroundLatLng": "40.71, -74.01",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"aroundLatLng":"40.71, -74.01"}""")

    async def test_search_single_index_17(self):
        """
        aroundLatLngViaIP
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "aroundLatLngViaIP": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"aroundLatLngViaIP":true}""")

    async def test_search_single_index_18(self):
        """
        aroundRadius
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "aroundLatLng": "40.71, -74.01",
                "aroundRadius": 1000000,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"aroundLatLng":"40.71, -74.01","aroundRadius":1000000}"""
        )

    async def test_search_single_index_19(self):
        """
        insideBoundingBox
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "insideBoundingBox": [
                    [
                        49.067996905313834,
                        65.73828125,
                        25.905859247243498,
                        128.8046875,
                    ],
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"insideBoundingBox":[[49.067996905313834,65.73828125,25.905859247243498,128.8046875]]}"""
        )

    async def test_search_single_index_20(self):
        """
        insidePolygon
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "insidePolygon": [
                    [
                        42.01,
                        -124.31,
                        48.835509470063045,
                        -124.40453125000005,
                        45.01082951668149,
                        -65.95726562500005,
                        31.247243545293433,
                        -81.06578125000004,
                        25.924152577235226,
                        -97.68234374999997,
                        32.300311895879545,
                        -117.54828125,
                    ],
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}"""
        )

    async def test_search_single_index_21(self):
        """
        insidePolygon
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "insidePolygon": [
                    [
                        42.01,
                        -124.31,
                        48.835509470063045,
                        -124.40453125000005,
                        45.01082951668149,
                        -65.95726562500005,
                        31.247243545293433,
                        -81.06578125000004,
                        25.924152577235226,
                        -97.68234374999997,
                        32.300311895879545,
                        -117.54828125,
                    ],
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}"""
        )

    async def test_search_single_index_22(self):
        """
        optionalFilters
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "optionalFilters": [
                    "can_deliver_quickly:true",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"optionalFilters":["can_deliver_quickly:true"]}"""
        )

    async def test_search_single_index_23(self):
        """
        optionalFiltersMany
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "optionalFilters": [
                    "brand:Apple<score=3>",
                    "brand:Samsung<score=2>",
                    "brand:-Huawei",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"optionalFilters":["brand:Apple<score=3>","brand:Samsung<score=2>","brand:-Huawei"]}"""
        )

    async def test_search_single_index_24(self):
        """
        optionalFiltersSimple
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "optionalFilters": [
                    "brand:Apple<score=2>",
                    "type:tablet",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"optionalFilters":["brand:Apple<score=2>","type:tablet"]}"""
        )

    async def test_search_single_index_25(self):
        """
        restrictSearchableAttributes
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "restrictSearchableAttributes": [
                    "title_fr",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"restrictSearchableAttributes":["title_fr"]}"""
        )

    async def test_search_single_index_26(self):
        """
        getRankingInfo
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "getRankingInfo": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"getRankingInfo":true}""")

    async def test_search_single_index_27(self):
        """
        clickAnalytics
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "clickAnalytics": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"clickAnalytics":true}""")

    async def test_search_single_index_28(self):
        """
        clickAnalyticsUserToken
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "clickAnalytics": True,
                "userToken": "user-1",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"clickAnalytics":true,"userToken":"user-1"}"""
        )

    async def test_search_single_index_29(self):
        """
        enablePersonalization
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "enablePersonalization": True,
                "userToken": "user-1",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"enablePersonalization":true,"userToken":"user-1"}"""
        )

    async def test_search_single_index_30(self):
        """
        userToken
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "userToken": "user-1",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"userToken":"user-1"}""")

    async def test_search_single_index_31(self):
        """
        analyticsTag
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "analyticsTags": [
                    "YOUR_ANALYTICS_TAG",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"analyticsTags":["YOUR_ANALYTICS_TAG"]}""")

    async def test_search_single_index_32(self):
        """
        facetFiltersUsers
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "facetFilters": [
                    "user:user42",
                    "user:public",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"facetFilters":["user:user42","user:public"]}"""
        )

    async def test_search_single_index_33(self):
        """
        buildTheQuery
        """
        _req = await self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "categoryPageId: Men's Clothing",
                "hitsPerPage": 50,
                "analyticsTags": [
                    "mens-clothing",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"categoryPageId: Men's Clothing","hitsPerPage":50,"analyticsTags":["mens-clothing"]}"""
        )

    async def test_search_synonyms_(self):
        """
        searchSynonyms with minimal parameters
        """
        _req = await self._client.search_synonyms_with_http_info(
            index_name="indexName",
        )

        assert _req.path == "/1/indexes/indexName/synonyms/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_search_synonyms_1(self):
        """
        searchSynonyms with all parameters
        """
        _req = await self._client.search_synonyms_with_http_info(
            index_name="indexName",
            search_synonyms_params={
                "query": "myQuery",
                "type": "altcorrection1",
                "page": 10,
                "hitsPerPage": 10,
            },
        )

        assert _req.path == "/1/indexes/indexName/synonyms/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"myQuery","type":"altcorrection1","page":10,"hitsPerPage":10}"""
        )

    async def test_search_user_ids_(self):
        """
        searchUserIds
        """
        _req = await self._client.search_user_ids_with_http_info(
            search_user_ids_params={
                "query": "test",
                "clusterName": "theClusterName",
                "page": 5,
                "hitsPerPage": 10,
            },
        )

        assert _req.path == "/1/clusters/mapping/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"test","clusterName":"theClusterName","page":5,"hitsPerPage":10}"""
        )

    async def test_set_dictionary_settings_(self):
        """
        get setDictionarySettings results with minimal parameters
        """
        _req = await self._client.set_dictionary_settings_with_http_info(
            dictionary_settings_params={
                "disableStandardEntries": {
                    "plurals": {
                        "fr": False,
                        "en": False,
                        "ru": True,
                    },
                },
            },
        )

        assert _req.path == "/1/dictionaries/*/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true}}}"""
        )

    async def test_set_dictionary_settings_1(self):
        """
        get setDictionarySettings results with all parameters
        """
        _req = await self._client.set_dictionary_settings_with_http_info(
            dictionary_settings_params={
                "disableStandardEntries": {
                    "plurals": {
                        "fr": False,
                        "en": False,
                        "ru": True,
                    },
                    "stopwords": {
                        "fr": False,
                    },
                    "compounds": {
                        "ru": True,
                    },
                },
            },
        )

        assert _req.path == "/1/dictionaries/*/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}"""
        )

    async def test_set_settings_(self):
        """
        minimal parameters
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="cts_e2e_settings",
            index_settings={
                "paginationLimitedTo": 10,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/cts_e2e_settings/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"paginationLimitedTo":10}""")

    async def test_set_settings_1(self):
        """
        boolean typoTolerance
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "typoTolerance": True,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"typoTolerance":true}""")

    async def test_set_settings_2(self):
        """
        enum typoTolerance
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "typoTolerance": "min",
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"typoTolerance":"min"}""")

    async def test_set_settings_3(self):
        """
        ignorePlurals
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ignorePlurals": True,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"ignorePlurals":true}""")

    async def test_set_settings_4(self):
        """
        list of string ignorePlurals
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ignorePlurals": [
                    "fr",
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"ignorePlurals":["fr"]}""")

    async def test_set_settings_5(self):
        """
        removeStopWords boolean
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "removeStopWords": True,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"removeStopWords":true}""")

    async def test_set_settings_6(self):
        """
        removeStopWords list of string
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "removeStopWords": [
                    "fr",
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"removeStopWords":["fr"]}""")

    async def test_set_settings_7(self):
        """
        boolean distinct
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "distinct": True,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"distinct":true}""")

    async def test_set_settings_8(self):
        """
        integer distinct
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "distinct": 1,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"distinct":1}""")

    async def test_set_settings_9(self):
        """
        distinct company
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "attributeForDistinct": "company",
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributeForDistinct":"company","distinct":true}"""
        )

    async def test_set_settings_10(self):
        """
        distinct design
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "attributeForDistinct": "design",
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributeForDistinct":"design","distinct":true}"""
        )

    async def test_set_settings_11(self):
        """
        distinct true
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"distinct":true}""")

    async def test_set_settings_12(self):
        """
        distinct section
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "attributeForDistinct": "section",
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributeForDistinct":"section","distinct":true}"""
        )

    async def test_set_settings_13(self):
        """
        attributesForFaceting allergens
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "allergens",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributesForFaceting":["allergens"]}""")

    async def test_set_settings_14(self):
        """
        attributesForFaceting categoryPageId
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "searchable(categoryPageId)",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["searchable(categoryPageId)"]}"""
        )

    async def test_set_settings_15(self):
        """
        unretrievableAttributes
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "unretrievableAttributes": [
                    "visible_by",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"unretrievableAttributes":["visible_by"]}"""
        )

    async def test_set_settings_16(self):
        """
        attributesForFaceting user restricted data
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "filterOnly(visible_by)",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["filterOnly(visible_by)"]}"""
        )

    async def test_set_settings_17(self):
        """
        attributesForFaceting optional filters
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "can_deliver_quickly",
                    "restaurant",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["can_deliver_quickly","restaurant"]}"""
        )

    async def test_set_settings_18(self):
        """
        attributesForFaceting redirect index
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "query_terms",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["query_terms"]}"""
        )

    async def test_set_settings_19(self):
        """
        attributesForFaceting multiple consequences
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "director",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributesForFaceting":["director"]}""")

    async def test_set_settings_20(self):
        """
        attributesForFaceting in-depth optional filters
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "filterOnly(brand)",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["filterOnly(brand)"]}"""
        )

    async def test_set_settings_21(self):
        """
        mode neuralSearch
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "mode": "neuralSearch",
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"mode":"neuralSearch"}""")

    async def test_set_settings_22(self):
        """
        mode keywordSearch
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "mode": "keywordSearch",
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"mode":"keywordSearch"}""")

    async def test_set_settings_23(self):
        """
        searchableAttributes same priority
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "title,comments",
                    "ingredients",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["title,comments","ingredients"]}"""
        )

    async def test_set_settings_24(self):
        """
        searchableAttributes higher priority
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "title",
                    "ingredients",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["title","ingredients"]}"""
        )

    async def test_set_settings_25(self):
        """
        customRanking retweets
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(retweets)",
                    "desc(likes)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(retweets)","desc(likes)"]}"""
        )

    async def test_set_settings_26(self):
        """
        customRanking boosted
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(boosted)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"customRanking":["desc(boosted)"]}""")

    async def test_set_settings_27(self):
        """
        customRanking pageviews
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(pageviews)",
                    "desc(comments)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(pageviews)","desc(comments)"]}"""
        )

    async def test_set_settings_28(self):
        """
        customRanking applying search parameters for a specific query
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(nb_airline_liaisons)",
                ],
                "attributesForFaceting": [
                    "city, country",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(nb_airline_liaisons)"],"attributesForFaceting":["city, country"]}"""
        )

    async def test_set_settings_29(self):
        """
        customRanking rounded pageviews
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(rounded_pageviews)",
                    "desc(comments)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(rounded_pageviews)","desc(comments)"]}"""
        )

    async def test_set_settings_30(self):
        """
        customRanking price
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(price)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"customRanking":["desc(price)"]}""")

    async def test_set_settings_31(self):
        """
        ranking exhaustive
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ranking": [
                    "desc(price)",
                    "typo",
                    "geo",
                    "words",
                    "filters",
                    "proximity",
                    "attribute",
                    "exact",
                    "custom",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"ranking":["desc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}"""
        )

    async def test_set_settings_32(self):
        """
        ranking standard replica
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ranking": [
                    "desc(post_date_timestamp)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"ranking":["desc(post_date_timestamp)"]}"""
        )

    async def test_set_settings_33(self):
        """
        ranking virtual replica
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(post_date_timestamp)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(post_date_timestamp)"]}"""
        )

    async def test_set_settings_34(self):
        """
        customRanking and ranking sort alphabetically
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "asc(textual_attribute)",
                ],
                "ranking": [
                    "custom",
                    "typo",
                    "geo",
                    "words",
                    "filters",
                    "proximity",
                    "attribute",
                    "exact",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["asc(textual_attribute)"],"ranking":["custom","typo","geo","words","filters","proximity","attribute","exact"]}"""
        )

    async def test_set_settings_35(self):
        """
        relevancyStrictness
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "asc(textual_attribute)",
                ],
                "relevancyStrictness": 0,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["asc(textual_attribute)"],"relevancyStrictness":0}"""
        )

    async def test_set_settings_36(self):
        """
        create replica index
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "replicas": [
                    "products_price_desc",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"replicas":["products_price_desc"]}""")

    async def test_set_settings_37(self):
        """
        unlink replica index
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "replicas": [
                    "",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"replicas":[""]}""")

    async def test_set_settings_38(self):
        """
        forwardToReplicas
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "name",
                    "description",
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["name","description"]}"""
        )

    async def test_set_settings_39(self):
        """
        maxValuesPerFacet
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "maxValuesPerFacet": 1000,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"maxValuesPerFacet":1000}""")

    async def test_set_settings_40(self):
        """
        maxFacetHits
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "maxFacetHits": 1000,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"maxFacetHits":1000}""")

    async def test_set_settings_41(self):
        """
        attributesForFaceting complex
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "actor",
                    "filterOnly(category)",
                    "searchable(publisher)",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["actor","filterOnly(category)","searchable(publisher)"]}"""
        )

    async def test_set_settings_42(self):
        """
        ranking closest dates
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ranking": [
                    "asc(date_timestamp)",
                    "typo",
                    "geo",
                    "words",
                    "filters",
                    "proximity",
                    "attribute",
                    "exact",
                    "custom",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"ranking":["asc(date_timestamp)","typo","geo","words","filters","proximity","attribute","exact","custom"]}"""
        )

    async def test_set_settings_43(self):
        """
        searchableAttributes item variation
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "design",
                    "type",
                    "color",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["design","type","color"]}"""
        )

    async def test_set_settings_44(self):
        """
        searchableAttributes around location
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "name",
                    "country",
                    "code",
                    "iata_code",
                ],
                "customRanking": [
                    "desc(links_count)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["name","country","code","iata_code"],"customRanking":["desc(links_count)"]}"""
        )

    async def test_set_settings_45(self):
        """
        searchableAttributes around location
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "name",
                    "country",
                    "code",
                    "iata_code",
                ],
                "customRanking": [
                    "desc(links_count)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["name","country","code","iata_code"],"customRanking":["desc(links_count)"]}"""
        )

    async def test_set_settings_46(self):
        """
        disableTypoToleranceOnAttributes
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "disableTypoToleranceOnAttributes": [
                    "serial_number",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disableTypoToleranceOnAttributes":["serial_number"]}"""
        )

    async def test_set_settings_47(self):
        """
        everything
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "advancedSyntax": True,
                "advancedSyntaxFeatures": [
                    "exactPhrase",
                ],
                "allowCompressionOfIntegerArray": True,
                "allowTyposOnNumericTokens": True,
                "alternativesAsExact": [
                    "singleWordSynonym",
                ],
                "attributeCriteriaComputedByMinProximity": True,
                "attributeForDistinct": "test",
                "attributesForFaceting": [
                    "algolia",
                ],
                "attributesToHighlight": [
                    "algolia",
                ],
                "attributesToRetrieve": [
                    "algolia",
                ],
                "attributesToSnippet": [
                    "algolia",
                ],
                "attributesToTransliterate": [
                    "algolia",
                ],
                "camelCaseAttributes": [
                    "algolia",
                ],
                "customNormalization": {
                    "algolia": {
                        "aloglia": "aglolia",
                    },
                },
                "customRanking": [
                    "algolia",
                ],
                "decompoundQuery": False,
                "decompoundedAttributes": {
                    "algolia": "aloglia",
                },
                "disableExactOnAttributes": [
                    "algolia",
                ],
                "disablePrefixOnAttributes": [
                    "algolia",
                ],
                "disableTypoToleranceOnAttributes": [
                    "algolia",
                ],
                "disableTypoToleranceOnWords": [
                    "algolia",
                ],
                "distinct": 3,
                "enablePersonalization": True,
                "enableReRanking": False,
                "enableRules": True,
                "exactOnSingleWordQuery": "attribute",
                "highlightPreTag": "<span>",
                "highlightPostTag": "</span>",
                "hitsPerPage": 10,
                "ignorePlurals": False,
                "indexLanguages": [
                    "fr",
                ],
                "keepDiacriticsOnCharacters": "abc",
                "maxFacetHits": 20,
                "maxValuesPerFacet": 30,
                "minProximity": 6,
                "minWordSizefor1Typo": 5,
                "minWordSizefor2Typos": 11,
                "mode": "neuralSearch",
                "numericAttributesForFiltering": [
                    "algolia",
                ],
                "optionalWords": [
                    "myspace",
                ],
                "paginationLimitedTo": 0,
                "queryLanguages": [
                    "fr",
                ],
                "queryType": "prefixLast",
                "ranking": [
                    "geo",
                ],
                "reRankingApplyFilter": "mySearch:filters",
                "relevancyStrictness": 10,
                "removeStopWords": False,
                "removeWordsIfNoResults": "lastWords",
                "renderingContent": {
                    "facetOrdering": {
                        "facets": {
                            "order": [
                                "a",
                                "b",
                            ],
                        },
                        "values": {
                            "a": {
                                "order": [
                                    "b",
                                ],
                                "sortRemainingBy": "count",
                            },
                        },
                    },
                },
                "replaceSynonymsInHighlight": True,
                "replicas": [
                    "",
                ],
                "responseFields": [
                    "algolia",
                ],
                "restrictHighlightAndSnippetArrays": True,
                "searchableAttributes": [
                    "foo",
                ],
                "semanticSearch": {
                    "eventSources": [
                        "foo",
                    ],
                },
                "separatorsToIndex": "bar",
                "snippetEllipsisText": "---",
                "sortFacetValuesBy": "date",
                "typoTolerance": False,
                "unretrievableAttributes": [
                    "foo",
                ],
                "userData": {
                    "user": "data",
                },
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["fr"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["fr"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}"""
        )

    async def test_set_settings_48(self):
        """
        searchableAttributesWithCustomRankingsAndAttributesForFaceting
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "brand",
                    "name",
                    "categories",
                    "unordered(description)",
                ],
                "customRanking": [
                    "desc(popularity)",
                ],
                "attributesForFaceting": [
                    "searchable(brand)",
                    "type",
                    "categories",
                    "price",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["brand","name","categories","unordered(description)"],"customRanking":["desc(popularity)"],"attributesForFaceting":["searchable(brand)","type","categories","price"]}"""
        )

    async def test_set_settings_49(self):
        """
        searchableAttributesProductReferenceSuffixes
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "name",
                    "product_reference",
                    "product_reference_suffixes",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["name","product_reference","product_reference_suffixes"]}"""
        )

    async def test_set_settings_50(self):
        """
        queryLanguageAndIgnorePlurals
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "queryLanguages": [
                    "en",
                ],
                "ignorePlurals": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"queryLanguages":["en"],"ignorePlurals":true}"""
        )

    async def test_set_settings_51(self):
        """
        searchableAttributesInMovies
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="movies",
            index_settings={
                "searchableAttributes": [
                    "title_eng",
                    "title_fr",
                    "title_es",
                ],
            },
        )

        assert _req.path == "/1/indexes/movies/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["title_eng","title_fr","title_es"]}"""
        )

    async def test_set_settings_52(self):
        """
        disablePrefixOnAttributes
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "disablePrefixOnAttributes": [
                    "serial_number",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disablePrefixOnAttributes":["serial_number"]}"""
        )

    async def test_set_settings_53(self):
        """
        disableTypoToleranceOnAttributes
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "disableTypoToleranceOnAttributes": [
                    "serial_number",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disableTypoToleranceOnAttributes":["serial_number"]}"""
        )

    async def test_set_settings_54(self):
        """
        searchableAttributesSimpleExample
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "serial_number",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["serial_number"]}"""
        )

    async def test_set_settings_55(self):
        """
        searchableAttributesSimpleExampleAlt
        """
        _req = await self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "serial_number",
                    "serial_number_suffixes",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["serial_number","serial_number_suffixes"]}"""
        )

    async def test_update_api_key_(self):
        """
        updateApiKey
        """
        _req = await self._client.update_api_key_with_http_info(
            key="ALGOLIA_API_KEY",
            api_key={
                "acl": [
                    "search",
                    "addObject",
                ],
                "validity": 300,
                "maxQueriesPerIPPerHour": 100,
                "maxHitsPerQuery": 20,
            },
        )

        assert _req.path == "/1/keys/ALGOLIA_API_KEY"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"acl":["search","addObject"],"validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}"""
        )


class TestSearchClientSync:
    _config = SearchConfig("test_app_id", "test_api_key")
    _client = SearchClientSync.create_with_config(
        config=_config, transporter=EchoTransporterSync(_config)
    )

    def test_add_api_key_(self):
        """
        addApiKey
        """
        _req = self._client.add_api_key_with_http_info(
            api_key={
                "acl": [
                    "search",
                    "addObject",
                ],
                "description": "my new api key",
                "validity": 300,
                "maxQueriesPerIPPerHour": 100,
                "maxHitsPerQuery": 20,
            },
        )

        assert _req.path == "/1/keys"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}"""
        )

    def test_add_or_update_object_(self):
        """
        addOrUpdateObject
        """
        _req = self._client.add_or_update_object_with_http_info(
            index_name="indexName",
            object_id="uniqueID",
            body={
                "key": "value",
            },
        )

        assert _req.path == "/1/indexes/indexName/uniqueID"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"key":"value"}""")

    def test_append_source_(self):
        """
        appendSource
        """
        _req = self._client.append_source_with_http_info(
            source={
                "source": "theSource",
                "description": "theDescription",
            },
        )

        assert _req.path == "/1/security/sources/append"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"source":"theSource","description":"theDescription"}"""
        )

    def test_assign_user_id_(self):
        """
        simple
        """
        _req = self._client.assign_user_id_with_http_info(
            x_algolia_user_id="user42",
            assign_user_id_params={
                "cluster": "d4242-eu",
            },
        )

        assert _req.path == "/1/clusters/mapping"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {"x-algolia-user-id": "user42"}.items()
        assert loads(_req.data) == loads("""{"cluster":"d4242-eu"}""")

    def test_assign_user_id_1(self):
        """
        it should not encode the userID
        """
        _req = self._client.assign_user_id_with_http_info(
            x_algolia_user_id="user id with spaces",
            assign_user_id_params={
                "cluster": "cluster with spaces",
            },
        )

        assert _req.path == "/1/clusters/mapping"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert (
            _req.headers.items() >= {"x-algolia-user-id": "user id with spaces"}.items()
        )
        assert loads(_req.data) == loads("""{"cluster":"cluster with spaces"}""")

    def test_batch_(self):
        """
        addObject
        """
        _req = self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "addObject",
                        "body": {
                            "key": "bar",
                            "foo": "1",
                        },
                    },
                    {
                        "action": "addObject",
                        "body": {
                            "key": "baz",
                            "foo": "2",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"addObject","body":{"key":"bar","foo":"1"}},{"action":"addObject","body":{"key":"baz","foo":"2"}}]}"""
        )

    def test_batch_1(self):
        """
        clear
        """
        _req = self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "clear",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"clear","body":{"key":"value"}}]}"""
        )

    def test_batch_2(self):
        """
        delete
        """
        _req = self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "delete",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"delete","body":{"key":"value"}}]}"""
        )

    def test_batch_3(self):
        """
        deleteObject
        """
        _req = self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "deleteObject",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"deleteObject","body":{"key":"value"}}]}"""
        )

    def test_batch_4(self):
        """
        partialUpdateObject
        """
        _req = self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "partialUpdateObject",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"partialUpdateObject","body":{"key":"value"}}]}"""
        )

    def test_batch_5(self):
        """
        partialUpdateObjectNoCreate
        """
        _req = self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "partialUpdateObjectNoCreate",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"partialUpdateObjectNoCreate","body":{"key":"value"}}]}"""
        )

    def test_batch_6(self):
        """
        updateObject
        """
        _req = self._client.batch_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            batch_write_params={
                "requests": [
                    {
                        "action": "updateObject",
                        "body": {
                            "key": "value",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"updateObject","body":{"key":"value"}}]}"""
        )

    def test_batch_assign_user_ids_(self):
        """
        batchAssignUserIds
        """
        _req = self._client.batch_assign_user_ids_with_http_info(
            x_algolia_user_id="userID",
            batch_assign_user_ids_params={
                "cluster": "theCluster",
                "users": [
                    "user1",
                    "user2",
                ],
            },
        )

        assert _req.path == "/1/clusters/mapping/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {"x-algolia-user-id": "userID"}.items()
        assert loads(_req.data) == loads(
            """{"cluster":"theCluster","users":["user1","user2"]}"""
        )

    def test_batch_dictionary_entries_(self):
        """
        replace
        """
        _req = self._client.batch_dictionary_entries_with_http_info(
            dictionary_name="plurals",
            batch_dictionary_entries_params={
                "clearExistingDictionaryEntries": True,
                "requests": [
                    {
                        "action": "addEntry",
                        "body": {
                            "objectID": "1",
                            "language": "en",
                            "word": "fancy",
                            "words": [
                                "believe",
                                "algolia",
                            ],
                            "decomposition": [
                                "trust",
                                "algolia",
                            ],
                            "state": "enabled",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/dictionaries/plurals/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"clearExistingDictionaryEntries":true,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}}]}"""
        )

    def test_batch_dictionary_entries_1(self):
        """
        delete
        """
        _req = self._client.batch_dictionary_entries_with_http_info(
            dictionary_name="plurals",
            batch_dictionary_entries_params={
                "clearExistingDictionaryEntries": True,
                "requests": [
                    {
                        "action": "deleteEntry",
                        "body": {
                            "objectID": "1",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/dictionaries/plurals/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"clearExistingDictionaryEntries":true,"requests":[{"action":"deleteEntry","body":{"objectID":"1"}}]}"""
        )

    def test_batch_dictionary_entries_2(self):
        """
        append
        """
        _req = self._client.batch_dictionary_entries_with_http_info(
            dictionary_name="stopwords",
            batch_dictionary_entries_params={
                "requests": [
                    {
                        "action": "addEntry",
                        "body": {
                            "objectID": "1",
                            "language": "en",
                            "additional": "try me",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/dictionaries/stopwords/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}"""
        )

    def test_browse_(self):
        """
        browse with minimal parameters
        """
        _req = self._client.browse_with_http_info(
            index_name="cts_e2e_browse",
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/browse"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_browse_1(self):
        """
        browse with search parameters
        """
        _req = self._client.browse_with_http_info(
            index_name="indexName",
            browse_params={
                "query": "myQuery",
                "facetFilters": [
                    "tags:algolia",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/browse"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"myQuery","facetFilters":["tags:algolia"]}"""
        )

    def test_browse_2(self):
        """
        browse allow a cursor in parameters
        """
        _req = self._client.browse_with_http_info(
            index_name="indexName",
            browse_params={
                "cursor": "test",
            },
        )

        assert _req.path == "/1/indexes/indexName/browse"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"cursor":"test"}""")

    def test_clear_objects_(self):
        """
        clearObjects
        """
        _req = self._client.clear_objects_with_http_info(
            index_name="theIndexName",
        )

        assert _req.path == "/1/indexes/theIndexName/clear"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_clear_rules_(self):
        """
        clearRules
        """
        _req = self._client.clear_rules_with_http_info(
            index_name="indexName",
        )

        assert _req.path == "/1/indexes/indexName/rules/clear"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_clear_synonyms_(self):
        """
        clearSynonyms
        """
        _req = self._client.clear_synonyms_with_http_info(
            index_name="indexName",
        )

        assert _req.path == "/1/indexes/indexName/synonyms/clear"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_custom_delete_(self):
        """
        allow del method for a custom path with minimal parameters
        """
        _req = self._client.custom_delete_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_custom_delete_1(self):
        """
        allow del method for a custom path with all parameters
        """
        _req = self._client.custom_delete_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_custom_get_(self):
        """
        allow get method for a custom path with minimal parameters
        """
        _req = self._client.custom_get_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_custom_get_1(self):
        """
        allow get method for a custom path with all parameters
        """
        _req = self._client.custom_get_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters with space",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters%20with%20space"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_custom_get_2(self):
        """
        requestOptions should be escaped too
        """
        _req = self._client.custom_get_with_http_info(
            path="test/all",
            parameters={
                "query": "to be overriden",
            },
            request_options={
                "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
                "query_parameters": loads(
                    """{"query":"parameters with space","and an array":["array","with spaces"]}"""
                ),
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {
                "query": "parameters%20with%20space",
                "and%20an%20array": "array%2Cwith%20spaces",
            }.items()
        )
        assert _req.headers.items() >= {"x-header-1": "spaces are left alone"}.items()
        assert _req.data is None

    def test_custom_post_(self):
        """
        allow post method for a custom path with minimal parameters
        """
        _req = self._client.custom_post_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_custom_post_1(self):
        """
        allow post method for a custom path with all parameters
        """
        _req = self._client.custom_post_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
            body={
                "body": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"body":"parameters"}""")

    def test_custom_post_2(self):
        """
        requestOptions can override default query parameters
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"query":"myQueryParameter"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "myQueryParameter"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_3(self):
        """
        requestOptions merges query parameters with default ones
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "query2": "myQueryParameter"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_4(self):
        """
        requestOptions can override default headers
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {"x-algolia-api-key": "ALGOLIA_API_KEY"}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_5(self):
        """
        requestOptions merges headers with default ones
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "headers": loads("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {"x-algolia-api-key": "ALGOLIA_API_KEY"}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_6(self):
        """
        requestOptions queryParameters accepts booleans
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"isItWorking":true}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "isItWorking": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_7(self):
        """
        requestOptions queryParameters accepts integers
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":2}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_8(self):
        """
        requestOptions queryParameters accepts list of string
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "b%20and%20c%2Cd"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_9(self):
        """
        requestOptions queryParameters accepts list of booleans
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":[true,true,false]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "true%2Ctrue%2Cfalse"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_10(self):
        """
        requestOptions queryParameters accepts list of integers
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":[1,2]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "1%2C2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_put_(self):
        """
        allow put method for a custom path with minimal parameters
        """
        _req = self._client.custom_put_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_custom_put_1(self):
        """
        allow put method for a custom path with all parameters
        """
        _req = self._client.custom_put_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
            body={
                "body": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"body":"parameters"}""")

    def test_delete_api_key_(self):
        """
        deleteApiKey
        """
        _req = self._client.delete_api_key_with_http_info(
            key="myTestApiKey",
        )

        assert _req.path == "/1/keys/myTestApiKey"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_by_(self):
        """
        deleteBy
        """
        _req = self._client.delete_by_with_http_info(
            index_name="theIndexName",
            delete_by_params={
                "filters": "brand:brandName",
            },
        )

        assert _req.path == "/1/indexes/theIndexName/deleteByQuery"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"filters":"brand:brandName"}""")

    def test_delete_index_(self):
        """
        deleteIndex
        """
        _req = self._client.delete_index_with_http_info(
            index_name="theIndexName",
        )

        assert _req.path == "/1/indexes/theIndexName"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_object_(self):
        """
        deleteObject
        """
        _req = self._client.delete_object_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            object_id="uniqueID",
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/uniqueID"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_rule_(self):
        """
        delete rule simple case
        """
        _req = self._client.delete_rule_with_http_info(
            index_name="indexName",
            object_id="id1",
        )

        assert _req.path == "/1/indexes/indexName/rules/id1"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_rule_1(self):
        """
        delete rule with simple characters to encode in objectID
        """
        _req = self._client.delete_rule_with_http_info(
            index_name="indexName",
            object_id="test/with/slash",
        )

        assert _req.path == "/1/indexes/indexName/rules/test%2Fwith%2Fslash"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_source_(self):
        """
        deleteSource
        """
        _req = self._client.delete_source_with_http_info(
            source="theSource",
        )

        assert _req.path == "/1/security/sources/theSource"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_synonym_(self):
        """
        deleteSynonym
        """
        _req = self._client.delete_synonym_with_http_info(
            index_name="indexName",
            object_id="id1",
        )

        assert _req.path == "/1/indexes/indexName/synonyms/id1"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_api_key_(self):
        """
        getApiKey
        """
        _req = self._client.get_api_key_with_http_info(
            key="myTestApiKey",
        )

        assert _req.path == "/1/keys/myTestApiKey"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_app_task_(self):
        """
        getAppTask
        """
        _req = self._client.get_app_task_with_http_info(
            task_id=123,
        )

        assert _req.path == "/1/task/123"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_dictionary_languages_(self):
        """
        get getDictionaryLanguages
        """
        _req = self._client.get_dictionary_languages_with_http_info()

        assert _req.path == "/1/dictionaries/*/languages"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_dictionary_settings_(self):
        """
        get getDictionarySettings results
        """
        _req = self._client.get_dictionary_settings_with_http_info()

        assert _req.path == "/1/dictionaries/*/settings"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_logs_(self):
        """
        getLogs with minimal parameters
        """
        _req = self._client.get_logs_with_http_info()

        assert _req.path == "/1/logs"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_logs_1(self):
        """
        getLogs with parameters
        """
        _req = self._client.get_logs_with_http_info(
            offset=5,
            length=10,
            index_name="theIndexName",
            type="all",
        )

        assert _req.path == "/1/logs"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {
                "offset": "5",
                "length": "10",
                "indexName": "theIndexName",
                "type": "all",
            }.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_object_(self):
        """
        getObject
        """
        _req = self._client.get_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_retrieve=[
                "attr1",
                "attr2",
            ],
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {"attributesToRetrieve": "attr1%2Cattr2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_object_1(self):
        """
        search with a real object
        """
        _req = self._client.get_object_with_http_info(
            index_name="cts_e2e_browse",
            object_id="Batman and Robin",
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/Batman%20and%20Robin"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_objects_(self):
        """
        getObjects
        """
        _req = self._client.get_objects_with_http_info(
            get_objects_params={
                "requests": [
                    {
                        "attributesToRetrieve": [
                            "attr1",
                            "attr2",
                        ],
                        "objectID": "uniqueID",
                        "indexName": "theIndexName",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/objects"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}"""
        )

    def test_get_rule_(self):
        """
        getRule
        """
        _req = self._client.get_rule_with_http_info(
            index_name="cts_e2e_browse",
            object_id="qr-1725004648916",
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/rules/qr-1725004648916"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_settings_(self):
        """
        getSettings
        """
        _req = self._client.get_settings_with_http_info(
            index_name="cts_e2e_settings",
        )

        assert _req.path == "/1/indexes/cts_e2e_settings/settings"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_sources_(self):
        """
        getSources
        """
        _req = self._client.get_sources_with_http_info()

        assert _req.path == "/1/security/sources"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_synonym_(self):
        """
        getSynonym
        """
        _req = self._client.get_synonym_with_http_info(
            index_name="indexName",
            object_id="id1",
        )

        assert _req.path == "/1/indexes/indexName/synonyms/id1"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_task_(self):
        """
        getTask
        """
        _req = self._client.get_task_with_http_info(
            index_name="theIndexName",
            task_id=123,
        )

        assert _req.path == "/1/indexes/theIndexName/task/123"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_top_user_ids_(self):
        """
        getTopUserIds
        """
        _req = self._client.get_top_user_ids_with_http_info()

        assert _req.path == "/1/clusters/mapping/top"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_user_id_(self):
        """
        getUserId
        """
        _req = self._client.get_user_id_with_http_info(
            user_id="uniqueID",
        )

        assert _req.path == "/1/clusters/mapping/uniqueID"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_has_pending_mappings_(self):
        """
        hasPendingMappings with minimal parameters
        """
        _req = self._client.has_pending_mappings_with_http_info()

        assert _req.path == "/1/clusters/mapping/pending"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_has_pending_mappings_1(self):
        """
        hasPendingMappings with parameters
        """
        _req = self._client.has_pending_mappings_with_http_info(
            get_clusters=True,
        )

        assert _req.path == "/1/clusters/mapping/pending"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {"getClusters": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_api_keys_(self):
        """
        listApiKeys
        """
        _req = self._client.list_api_keys_with_http_info()

        assert _req.path == "/1/keys"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_clusters_(self):
        """
        listClusters
        """
        _req = self._client.list_clusters_with_http_info()

        assert _req.path == "/1/clusters"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_indices_(self):
        """
        listIndices with minimal parameters
        """
        _req = self._client.list_indices_with_http_info()

        assert _req.path == "/1/indexes"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_indices_1(self):
        """
        listIndices with parameters
        """
        _req = self._client.list_indices_with_http_info(
            page=8,
            hits_per_page=3,
        )

        assert _req.path == "/1/indexes"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items() == {"page": "8", "hitsPerPage": "3"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_user_ids_(self):
        """
        listUserIds with minimal parameters
        """
        _req = self._client.list_user_ids_with_http_info()

        assert _req.path == "/1/clusters/mapping"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_user_ids_1(self):
        """
        listUserIds with parameters
        """
        _req = self._client.list_user_ids_with_http_info(
            page=8,
            hits_per_page=100,
        )

        assert _req.path == "/1/clusters/mapping"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items() == {"page": "8", "hitsPerPage": "100"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_multiple_batch_(self):
        """
        multipleBatch
        """
        _req = self._client.multiple_batch_with_http_info(
            batch_params={
                "requests": [
                    {
                        "action": "addObject",
                        "body": {
                            "key": "value",
                        },
                        "indexName": "theIndexName",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"action":"addObject","body":{"key":"value"},"indexName":"theIndexName"}]}"""
        )

    def test_operation_index_(self):
        """
        scopes
        """
        _req = self._client.operation_index_with_http_info(
            index_name="<SOURCE_INDEX_NAME>",
            operation_index_params={
                "operation": "move",
                "destination": "<DESTINATION_INDEX_NAME>",
                "scope": [
                    "rules",
                    "settings",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"operation":"move","destination":"<DESTINATION_INDEX_NAME>","scope":["rules","settings"]}"""
        )

    def test_operation_index_1(self):
        """
        copy
        """
        _req = self._client.operation_index_with_http_info(
            index_name="<SOURCE_INDEX_NAME>",
            operation_index_params={
                "operation": "copy",
                "destination": "<DESTINATION_INDEX_NAME>",
            },
        )

        assert _req.path == "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"operation":"copy","destination":"<DESTINATION_INDEX_NAME>"}"""
        )

    def test_operation_index_2(self):
        """
        move
        """
        _req = self._client.operation_index_with_http_info(
            index_name="<SOURCE_INDEX_NAME>",
            operation_index_params={
                "operation": "move",
                "destination": "<DESTINATION_INDEX_NAME>",
            },
        )

        assert _req.path == "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"operation":"move","destination":"<DESTINATION_INDEX_NAME>"}"""
        )

    def test_partial_update_object_(self):
        """
        Partial update with a new value for a string attribute
        """
        _req = self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": "new value",
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":"new value"}""")

    def test_partial_update_object_1(self):
        """
        Partial update with a new value for an integer attribute
        """
        _req = self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": 1,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":1}""")

    def test_partial_update_object_2(self):
        """
        Partial update with a new value for a boolean attribute
        """
        _req = self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":true}""")

    def test_partial_update_object_3(self):
        """
        Partial update with a new value for an array attribute
        """
        _req = self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": [
                    "one",
                    "two",
                    "three",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":["one","two","three"]}""")

    def test_partial_update_object_4(self):
        """
        Partial update with a new value for an object attribute
        """
        _req = self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "attributeId": {
                    "nested": "value",
                },
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributeId":{"nested":"value"}}""")

    def test_partial_update_object_5(self):
        """
        with visible_by filter
        """
        _req = self._client.partial_update_object_with_http_info(
            index_name="theIndexName",
            object_id="uniqueID",
            attributes_to_update={
                "visible_by": [
                    "Angela",
                    "group/Finance",
                    "group/Shareholders",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/uniqueID/partial"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"visible_by":["Angela","group/Finance","group/Shareholders"]}"""
        )

    def test_remove_user_id_(self):
        """
        removeUserId
        """
        _req = self._client.remove_user_id_with_http_info(
            user_id="uniqueID",
        )

        assert _req.path == "/1/clusters/mapping/uniqueID"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_replace_sources_(self):
        """
        replaceSources
        """
        _req = self._client.replace_sources_with_http_info(
            source=[
                {
                    "source": "theSource",
                    "description": "theDescription",
                },
            ],
        )

        assert _req.path == "/1/security/sources"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"source":"theSource","description":"theDescription"}]"""
        )

    def test_restore_api_key_(self):
        """
        restoreApiKey
        """
        _req = self._client.restore_api_key_with_http_info(
            key="ALGOLIA_API_KEY",
        )

        assert _req.path == "/1/keys/ALGOLIA_API_KEY/restore"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_save_object_(self):
        """
        saveObject
        """
        _req = self._client.save_object_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            body={
                "objectID": "id",
                "test": "val",
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"objectID":"id","test":"val"}""")

    def test_save_rule_(self):
        """
        saveRule with minimal parameters
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="id1",
            rule={
                "objectID": "id1",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:xiaomi",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/id1"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:xiaomi"}}}"""
        )

    def test_save_rule_1(self):
        """
        saveRule with all parameters
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="id1",
            rule={
                "objectID": "id1",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "contains",
                        "alternatives": False,
                        "context": "search",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "brand:apple",
                        "query": {
                            "remove": [
                                "algolia",
                            ],
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "abc",
                                    "insert": "cde",
                                },
                                {
                                    "type": "replace",
                                    "delete": "abc",
                                    "insert": "cde",
                                },
                            ],
                        },
                    },
                    "hide": [
                        {
                            "objectID": "321",
                        },
                    ],
                    "filterPromotes": False,
                    "userData": {
                        "algolia": "aloglia",
                    },
                    "promote": [
                        {
                            "objectID": "abc",
                            "position": 3,
                        },
                        {
                            "objectIDs": [
                                "abc",
                                "def",
                            ],
                            "position": 1,
                        },
                    ],
                },
                "description": "test",
                "enabled": True,
                "validity": [
                    {
                        "from": 1656670273,
                        "until": 1656670277,
                    },
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/indexName/rules/id1"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}"""
        )

    def test_save_rule_2(self):
        """
        b2b catalog
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="article-rule",
            rule={
                "objectID": "article-rule",
                "conditions": [
                    {
                        "pattern": "article",
                        "anchoring": "startsWith",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "article",
                                },
                            ],
                        },
                        "restrictSearchableAttributes": [
                            "title",
                            "book_id",
                        ],
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/article-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}"""
        )

    def test_save_rule_3(self):
        """
        merchandising and promoting
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="director-rule",
            rule={
                "objectID": "director-rule",
                "conditions": [
                    {
                        "pattern": "{facet:director} director",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "restrictSearchableAttributes": [
                            "title",
                            "book_id",
                        ],
                        "automaticFacetFilters": [
                            {
                                "facet": "director",
                            },
                        ],
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "director",
                                },
                            ],
                        },
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/director-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"director-rule","conditions":[{"pattern":"{facet:director} director","anchoring":"contains"}],"consequence":{"params":{"restrictSearchableAttributes":["title","book_id"],"automaticFacetFilters":[{"facet":"director"}],"query":{"edits":[{"type":"remove","delete":"director"}]}}}}"""
        )

    def test_save_rule_4(self):
        """
        harry potter
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="harry-potter-rule",
            rule={
                "objectID": "harry-potter-rule",
                "conditions": [
                    {
                        "pattern": "harry potter",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "userData": {
                        "promo_content": "20% OFF on all Harry Potter books!",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/harry-potter-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"harry-potter-rule","conditions":[{"pattern":"harry potter","anchoring":"contains"}],"consequence":{"userData":{"promo_content":"20% OFF on all Harry Potter books!"}}}"""
        )

    def test_save_rule_5(self):
        """
        merchandising empty query
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="clearance-category-filter",
            rule={
                "objectID": "clearance-category-filter",
                "conditions": [
                    {
                        "pattern": "",
                        "anchoring": "is",
                        "context": "landing",
                    },
                ],
                "consequence": {
                    "params": {
                        "optionalFilters": "clearance:true",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/clearance-category-filter"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"clearance-category-filter","conditions":[{"pattern":"","anchoring":"is","context":"landing"}],"consequence":{"params":{"optionalFilters":"clearance:true"}}}"""
        )

    def test_save_rule_6(self):
        """
        redirect
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="redirect-help-rule",
            rule={
                "objectID": "redirect-help-rule",
                "conditions": [
                    {
                        "pattern": "help",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "userData": {
                        "redirect": "https://www.algolia.com/support",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/redirect-help-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"redirect-help-rule","conditions":[{"pattern":"help","anchoring":"contains"}],"consequence":{"userData":{"redirect":"https://www.algolia.com/support"}}}"""
        )

    def test_save_rule_7(self):
        """
        promote some results over others
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="tomato-fruit",
            rule={
                "objectID": "tomato-fruit",
                "conditions": [
                    {
                        "pattern": "tomato",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "optionalFilters": "food_group:fruit",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/tomato-fruit"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"tomato-fruit","conditions":[{"pattern":"tomato","anchoring":"contains"}],"consequence":{"params":{"optionalFilters":"food_group:fruit"}}}"""
        )

    def test_save_rule_8(self):
        """
        promote several hits
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="Promote-Apple-Newest",
            rule={
                "objectID": "Promote-Apple-Newest",
                "conditions": [
                    {
                        "pattern": "apple",
                        "anchoring": "is",
                    },
                ],
                "consequence": {
                    "promote": [
                        {
                            "objectIDs": [
                                "iPhone-12345",
                                "watch-123",
                            ],
                            "position": 0,
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/Promote-Apple-Newest"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"Promote-Apple-Newest","conditions":[{"pattern":"apple","anchoring":"is"}],"consequence":{"promote":[{"objectIDs":["iPhone-12345","watch-123"],"position":0}]}}"""
        )

    def test_save_rule_9(self):
        """
        promote newest release
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="Promote-iPhone-X",
            rule={
                "objectID": "Promote-iPhone-X",
                "conditions": [
                    {
                        "pattern": "iPhone",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "promote": [
                        {
                            "objectID": "iPhone-12345",
                            "position": 0,
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/Promote-iPhone-X"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"Promote-iPhone-X","conditions":[{"pattern":"iPhone","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"iPhone-12345","position":0}]}}"""
        )

    def test_save_rule_10(self):
        """
        promote single item
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="promote-harry-potter-box-set",
            rule={
                "objectID": "promote-harry-potter-box-set",
                "conditions": [
                    {
                        "pattern": "Harry Potter",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "promote": [
                        {
                            "objectID": "HP-12345",
                            "position": 0,
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/promote-harry-potter-box-set"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"promote-harry-potter-box-set","conditions":[{"pattern":"Harry Potter","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"HP-12345","position":0}]}}"""
        )

    def test_save_rule_11(self):
        """
        limit search results
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="article-rule",
            rule={
                "objectID": "article-rule",
                "conditions": [
                    {
                        "pattern": "article",
                        "anchoring": "startsWith",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "article",
                                },
                            ],
                        },
                        "restrictSearchableAttributes": [
                            "title",
                            "book_id",
                        ],
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/article-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}"""
        )

    def test_save_rule_12(self):
        """
        query match
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="tagged-brand-rule",
            rule={
                "conditions": [
                    {
                        "pattern": "brand: {facet:brand}",
                        "anchoring": "contains",
                        "alternatives": False,
                    },
                ],
                "consequence": {
                    "params": {
                        "automaticFacetFilters": [
                            {
                                "facet": "brand",
                            },
                        ],
                        "query": {
                            "remove": [
                                "brand:",
                                "{facet:brand}",
                            ],
                        },
                    },
                },
                "description": "filter on brand: {brand}",
                "objectID": "tagged-brand-rule",
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/tagged-brand-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"conditions":[{"pattern":"brand: {facet:brand}","anchoring":"contains","alternatives":false}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"brand"}],"query":{"remove":["brand:","{facet:brand}"]}}},"description":"filter on brand: {brand}","objectID":"tagged-brand-rule"}"""
        )

    def test_save_rule_13(self):
        """
        dynamic filtering
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="color-facets",
            rule={
                "objectID": "color-facets",
                "conditions": [
                    {
                        "pattern": "{facet:color}",
                    },
                ],
                "consequence": {
                    "params": {
                        "automaticFacetFilters": [
                            {
                                "facet": "color",
                            },
                        ],
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/color-facets"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"color-facets","conditions":[{"pattern":"{facet:color}"}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"color"}]}}}"""
        )

    def test_save_rule_14(self):
        """
        hide hits
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="hide-12345",
            rule={
                "objectID": "hide-12345",
                "conditions": [
                    {
                        "pattern": "cheap",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "hide": [
                        {
                            "objectID": "to-hide-12345",
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/hide-12345"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"hide-12345","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"hide":[{"objectID":"to-hide-12345"}]}}"""
        )

    def test_save_rule_15(self):
        """
        one rule per facet
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="red-color",
            rule={
                "objectID": "red-color",
                "conditions": [
                    {
                        "pattern": "red",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "remove": [
                                "red",
                            ],
                        },
                        "filters": "color:red",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/red-color"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"red-color","conditions":[{"pattern":"red","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["red"]},"filters":"color:red"}}}"""
        )

    def test_save_rule_16(self):
        """
        numerical filters
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="cheap",
            rule={
                "objectID": "cheap",
                "conditions": [
                    {
                        "pattern": "cheap",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "query": {
                            "remove": [
                                "cheap",
                            ],
                        },
                        "filters": "price < 10",
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/cheap"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 10"}}}"""
        )

    def test_save_rule_17(self):
        """
        negative filters
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="gluten-free-rule",
            rule={
                "objectID": "gluten-free-rule",
                "conditions": [
                    {
                        "pattern": "gluten-free",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "NOT allergens:gluten",
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "gluten-free",
                                },
                            ],
                        },
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/gluten-free-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"gluten-free-rule","conditions":[{"pattern":"gluten-free","anchoring":"contains"}],"consequence":{"params":{"filters":"NOT allergens:gluten","query":{"edits":[{"type":"remove","delete":"gluten-free"}]}}}}"""
        )

    def test_save_rule_18(self):
        """
        positive filters
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="diet-rule",
            rule={
                "objectID": "diet-rule",
                "conditions": [
                    {
                        "pattern": "diet",
                        "anchoring": "contains",
                    },
                ],
                "consequence": {
                    "params": {
                        "filters": "'low-carb' OR 'low-fat'",
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "diet",
                                },
                            ],
                        },
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/diet-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"diet-rule","conditions":[{"pattern":"diet","anchoring":"contains"}],"consequence":{"params":{"filters":"'low-carb' OR 'low-fat'","query":{"edits":[{"type":"remove","delete":"diet"}]}}}}"""
        )

    def test_save_rule_19(self):
        """
        conditionless
        """
        _req = self._client.save_rule_with_http_info(
            index_name="indexName",
            object_id="diet-rule",
            rule={
                "objectID": "diet-rule",
                "consequence": {
                    "params": {
                        "filters": "'low-carb' OR 'low-fat'",
                        "query": {
                            "edits": [
                                {
                                    "type": "remove",
                                    "delete": "diet",
                                },
                            ],
                        },
                    },
                },
            },
        )

        assert _req.path == "/1/indexes/indexName/rules/diet-rule"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"diet-rule","consequence":{"params":{"filters":"'low-carb' OR 'low-fat'","query":{"edits":[{"type":"remove","delete":"diet"}]}}}}"""
        )

    def test_save_rules_(self):
        """
        saveRules with minimal parameters
        """
        _req = self._client.save_rules_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            rules=[
                {
                    "objectID": "a-rule-id",
                    "conditions": [
                        {
                            "pattern": "smartphone",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "filters": "brand:apple",
                        },
                    },
                },
                {
                    "objectID": "a-second-rule-id",
                    "conditions": [
                        {
                            "pattern": "apple",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "filters": "brand:samsung",
                        },
                    },
                },
            ],
            forward_to_replicas=False,
            clear_existing_rules=True,
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"forwardToReplicas": "false", "clearExistingRules": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:apple"}}},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:samsung"}}}]"""
        )

    def test_save_rules_1(self):
        """
        saveRules with all parameters
        """
        _req = self._client.save_rules_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            rules=[
                {
                    "objectID": "id1",
                    "conditions": [
                        {
                            "pattern": "apple",
                            "anchoring": "contains",
                            "alternatives": False,
                            "context": "search",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "filters": "brand:apple",
                            "query": {
                                "remove": [
                                    "algolia",
                                ],
                                "edits": [
                                    {
                                        "type": "remove",
                                        "delete": "abc",
                                        "insert": "cde",
                                    },
                                    {
                                        "type": "replace",
                                        "delete": "abc",
                                        "insert": "cde",
                                    },
                                ],
                            },
                        },
                        "hide": [
                            {
                                "objectID": "321",
                            },
                        ],
                        "filterPromotes": False,
                        "userData": {
                            "algolia": "aloglia",
                        },
                        "promote": [
                            {
                                "objectID": "abc",
                                "position": 3,
                            },
                            {
                                "objectIDs": [
                                    "abc",
                                    "def",
                                ],
                                "position": 1,
                            },
                        ],
                    },
                    "description": "test",
                    "enabled": True,
                    "validity": [
                        {
                            "from": 1656670273,
                            "until": 1656670277,
                        },
                    ],
                },
            ],
            forward_to_replicas=True,
            clear_existing_rules=True,
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"forwardToReplicas": "true", "clearExistingRules": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]"""
        )

    def test_save_rules_2(self):
        """
        dynamic filtering
        """
        _req = self._client.save_rules_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            rules=[
                {
                    "objectID": "toaster",
                    "conditions": [
                        {
                            "pattern": "toaster",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "query": {
                                "remove": [
                                    "toaster",
                                ],
                            },
                            "filters": "product_type:toaster",
                        },
                    },
                },
                {
                    "objectID": "cheap",
                    "conditions": [
                        {
                            "pattern": "cheap",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "query": {
                                "remove": [
                                    "cheap",
                                ],
                            },
                            "filters": "price < 15",
                        },
                    },
                },
            ],
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"toaster","conditions":[{"pattern":"toaster","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["toaster"]},"filters":"product_type:toaster"}}},{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 15"}}}]"""
        )

    def test_save_rules_3(self):
        """
        enhance search results
        """
        _req = self._client.save_rules_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            rules=[
                {
                    "objectID": "country",
                    "conditions": [
                        {
                            "pattern": "{facet:country}",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "aroundLatLngViaIP": False,
                        },
                    },
                },
                {
                    "objectID": "city",
                    "conditions": [
                        {
                            "pattern": "{facet:city}",
                            "anchoring": "contains",
                        },
                    ],
                    "consequence": {
                        "params": {
                            "aroundLatLngViaIP": False,
                        },
                    },
                },
            ],
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"country","conditions":[{"pattern":"{facet:country}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}},{"objectID":"city","conditions":[{"pattern":"{facet:city}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}}]"""
        )

    def test_save_synonym_(self):
        """
        saveSynonym
        """
        _req = self._client.save_synonym_with_http_info(
            index_name="indexName",
            object_id="id1",
            synonym_hit={
                "objectID": "id1",
                "type": "synonym",
                "synonyms": [
                    "car",
                    "vehicule",
                    "auto",
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/indexName/synonyms/id1"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]}"""
        )

    def test_save_synonyms_(self):
        """
        saveSynonyms
        """
        _req = self._client.save_synonyms_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            synonym_hit=[
                {
                    "objectID": "id1",
                    "type": "synonym",
                    "synonyms": [
                        "car",
                        "vehicule",
                        "auto",
                    ],
                },
                {
                    "objectID": "id2",
                    "type": "onewaysynonym",
                    "input": "iphone",
                    "synonyms": [
                        "ephone",
                        "aphone",
                        "yphone",
                    ],
                },
            ],
            forward_to_replicas=True,
            replace_existing_synonyms=True,
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/synonyms/batch"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"forwardToReplicas": "true", "replaceExistingSynonyms": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """[{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]"""
        )

    def test_search_(self):
        """
        withHitsPerPage
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "hitsPerPage": 50,
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","hitsPerPage":50}]}"""
        )

    def test_search_1(self):
        """
        filterOnly
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "filters": "actor:Scarlett Johansson",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Scarlett Johansson"}]}"""
        )

    def test_search_2(self):
        """
        filterOr
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "filters": "actor:Tom Cruise OR actor:Scarlett Johansson",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Tom Cruise OR actor:Scarlett Johansson"}]}"""
        )

    def test_search_3(self):
        """
        filterNot
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "filters": "NOT actor:Nicolas Cage",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"NOT actor:Nicolas Cage"}]}"""
        )

    def test_search_4(self):
        """
        search for a single hits request with minimal parameters
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "cts_e2e_search_empty_index",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"cts_e2e_search_empty_index"}]}"""
        )

    def test_search_5(self):
        """
        search with highlight and snippet results
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "cts_e2e_highlight_snippet_results",
                        "query": "vim",
                        "attributesToSnippet": [
                            "*:20",
                        ],
                        "attributesToHighlight": [
                            "*",
                        ],
                        "attributesToRetrieve": [
                            "*",
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"cts_e2e_highlight_snippet_results","query":"vim","attributesToSnippet":["*:20"],"attributesToHighlight":["*"],"attributesToRetrieve":["*"]}]}"""
        )

    def test_search_6(self):
        """
        retrieveFacets
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "facets": [
                            "author",
                            "genre",
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["author","genre"]}]}"""
        )

    def test_search_7(self):
        """
        retrieveFacetsWildcard
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "<YOUR_INDEX_NAME>",
                        "query": "<YOUR_QUERY>",
                        "facets": [
                            "*",
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["*"]}]}"""
        )

    def test_search_8(self):
        """
        search for a single facet request with minimal parameters
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "cts_e2e_search_facet",
                        "type": "facet",
                        "facet": "editor",
                    },
                ],
                "strategy": "stopIfEnoughMatches",
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"cts_e2e_search_facet","type":"facet","facet":"editor"}],"strategy":"stopIfEnoughMatches"}"""
        )

    def test_search_9(self):
        """
        search for a single hits request with all parameters
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                        "query": "myQuery",
                        "hitsPerPage": 50,
                        "type": "default",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}"""
        )

    def test_search_10(self):
        """
        search for a single facet request with all parameters
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                        "type": "facet",
                        "facet": "theFacet",
                        "facetQuery": "theFacetQuery",
                        "query": "theQuery",
                        "maxFacetHits": 50,
                    },
                ],
                "strategy": "stopIfEnoughMatches",
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}"""
        )

    def test_search_11(self):
        """
        search for multiple mixed requests in multiple indices with minimal parameters
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                    },
                    {
                        "indexName": "theIndexName2",
                        "type": "facet",
                        "facet": "theFacet",
                    },
                    {
                        "indexName": "theIndexName",
                        "type": "default",
                    },
                ],
                "strategy": "stopIfEnoughMatches",
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}"""
        )

    def test_search_12(self):
        """
        search for multiple mixed requests in multiple indices with all parameters
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                        "type": "facet",
                        "facet": "theFacet",
                        "facetQuery": "theFacetQuery",
                        "query": "theQuery",
                        "maxFacetHits": 50,
                    },
                    {
                        "indexName": "theIndexName",
                        "query": "myQuery",
                        "hitsPerPage": 50,
                        "type": "default",
                    },
                ],
                "strategy": "stopIfEnoughMatches",
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}"""
        )

    def test_search_13(self):
        """
        search filters accept all of the possible shapes
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "theIndexName",
                        "facetFilters": "mySearch:filters",
                        "reRankingApplyFilter": "mySearch:filters",
                        "tagFilters": "mySearch:filters",
                        "numericFilters": "mySearch:filters",
                        "optionalFilters": "mySearch:filters",
                    },
                    {
                        "indexName": "theIndexName",
                        "facetFilters": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                                [
                                    "mySearch:filters",
                                ],
                            ],
                        ],
                        "reRankingApplyFilter": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                        "tagFilters": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                        "numericFilters": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                        "optionalFilters": [
                            "mySearch:filters",
                            [
                                "mySearch:filters",
                            ],
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters",["mySearch:filters"]]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}"""
        )

    def test_search_14(self):
        """
        search filters end to end
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "indexName": "cts_e2e_search_facet",
                        "filters": "editor:'visual studio' OR editor:neovim",
                    },
                    {
                        "indexName": "cts_e2e_search_facet",
                        "facetFilters": [
                            "editor:'visual studio'",
                            "editor:neovim",
                        ],
                    },
                    {
                        "indexName": "cts_e2e_search_facet",
                        "facetFilters": [
                            "editor:'visual studio'",
                            [
                                "editor:neovim",
                            ],
                        ],
                    },
                    {
                        "indexName": "cts_e2e_search_facet",
                        "facetFilters": [
                            "editor:'visual studio'",
                            [
                                "editor:neovim",
                                [
                                    "editor:goland",
                                ],
                            ],
                        ],
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"indexName":"cts_e2e_search_facet","filters":"editor:'visual studio' OR editor:neovim"},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'","editor:neovim"]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim"]]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim",["editor:goland"]]]}]}"""
        )

    def test_search_15(self):
        """
        search with all search parameters
        """
        _req = self._client.search_with_http_info(
            search_method_params={
                "requests": [
                    {
                        "advancedSyntax": True,
                        "advancedSyntaxFeatures": [
                            "exactPhrase",
                        ],
                        "allowTyposOnNumericTokens": True,
                        "alternativesAsExact": [
                            "multiWordsSynonym",
                        ],
                        "analytics": True,
                        "analyticsTags": [
                            "",
                        ],
                        "aroundLatLng": "",
                        "aroundLatLngViaIP": True,
                        "aroundPrecision": 0,
                        "aroundRadius": "all",
                        "attributeCriteriaComputedByMinProximity": True,
                        "attributesToHighlight": [
                            "",
                        ],
                        "attributesToRetrieve": [
                            "",
                        ],
                        "attributesToSnippet": [
                            "",
                        ],
                        "clickAnalytics": True,
                        "decompoundQuery": True,
                        "disableExactOnAttributes": [
                            "",
                        ],
                        "disableTypoToleranceOnAttributes": [
                            "",
                        ],
                        "distinct": 0,
                        "enableABTest": True,
                        "enablePersonalization": True,
                        "enableReRanking": True,
                        "enableRules": True,
                        "exactOnSingleWordQuery": "attribute",
                        "facetFilters": [
                            "",
                        ],
                        "facetingAfterDistinct": True,
                        "facets": [
                            "",
                        ],
                        "filters": "",
                        "getRankingInfo": True,
                        "highlightPostTag": "",
                        "highlightPreTag": "",
                        "hitsPerPage": 1,
                        "ignorePlurals": False,
                        "indexName": "theIndexName",
                        "insideBoundingBox": [
                            [
                                47.3165,
                                4.9665,
                                47.3424,
                                5.0201,
                            ],
                            [
                                40.9234,
                                2.1185,
                                38.643,
                                1.9916,
                            ],
                        ],
                        "insidePolygon": [
                            [
                                47.3165,
                                4.9665,
                                47.3424,
                                5.0201,
                                47.32,
                                4.9,
                            ],
                            [
                                40.9234,
                                2.1185,
                                38.643,
                                1.9916,
                                39.2587,
                                2.0104,
                            ],
                        ],
                        "length": 1,
                        "maxValuesPerFacet": 0,
                        "minProximity": 1,
                        "minWordSizefor1Typo": 0,
                        "minWordSizefor2Typos": 0,
                        "minimumAroundRadius": 1,
                        "naturalLanguages": [
                            "fr",
                        ],
                        "numericFilters": [
                            "",
                        ],
                        "offset": 0,
                        "optionalFilters": [
                            "",
                        ],
                        "optionalWords": [
                            "",
                        ],
                        "page": 0,
                        "percentileComputation": True,
                        "personalizationImpact": 0,
                        "query": "",
                        "queryLanguages": [
                            "fr",
                        ],
                        "queryType": "prefixAll",
                        "ranking": [
                            "",
                        ],
                        "reRankingApplyFilter": [
                            "",
                        ],
                        "relevancyStrictness": 0,
                        "removeStopWords": True,
                        "removeWordsIfNoResults": "allOptional",
                        "renderingContent": {
                            "facetOrdering": {
                                "facets": {
                                    "order": [
                                        "a",
                                        "b",
                                    ],
                                },
                                "values": {
                                    "a": {
                                        "order": [
                                            "b",
                                        ],
                                        "sortRemainingBy": "count",
                                    },
                                },
                            },
                        },
                        "replaceSynonymsInHighlight": True,
                        "responseFields": [
                            "",
                        ],
                        "restrictHighlightAndSnippetArrays": True,
                        "restrictSearchableAttributes": [
                            "",
                        ],
                        "ruleContexts": [
                            "",
                        ],
                        "similarQuery": "",
                        "snippetEllipsisText": "",
                        "sortFacetValuesBy": "",
                        "sumOrFiltersScores": True,
                        "synonyms": True,
                        "tagFilters": [
                            "",
                        ],
                        "type": "default",
                        "typoTolerance": "min",
                        "userToken": "",
                    },
                ],
            },
        )

        assert _req.path == "/1/indexes/*/queries"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":1,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"length":1,"maxValuesPerFacet":0,"minProximity":1,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":1,"naturalLanguages":["fr"],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":["fr"],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}"""
        )

    def test_search_dictionary_entries_(self):
        """
        get searchDictionaryEntries results with minimal parameters
        """
        _req = self._client.search_dictionary_entries_with_http_info(
            dictionary_name="stopwords",
            search_dictionary_entries_params={
                "query": "about",
            },
        )

        assert _req.path == "/1/dictionaries/stopwords/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"query":"about"}""")

    def test_search_dictionary_entries_1(self):
        """
        get searchDictionaryEntries results with all parameters
        """
        _req = self._client.search_dictionary_entries_with_http_info(
            dictionary_name="compounds",
            search_dictionary_entries_params={
                "query": "foo",
                "page": 4,
                "hitsPerPage": 2,
                "language": "fr",
            },
        )

        assert _req.path == "/1/dictionaries/compounds/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"foo","page":4,"hitsPerPage":2,"language":"fr"}"""
        )

    def test_search_for_facet_values_(self):
        """
        get searchForFacetValues results with minimal parameters
        """
        _req = self._client.search_for_facet_values_with_http_info(
            index_name="indexName",
            facet_name="facetName",
        )

        assert _req.path == "/1/indexes/indexName/facets/facetName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_search_for_facet_values_1(self):
        """
        get searchForFacetValues results with all parameters
        """
        _req = self._client.search_for_facet_values_with_http_info(
            index_name="indexName",
            facet_name="facetName",
            search_for_facet_values_request={
                "params": "query=foo&facetFilters=['bar']",
                "facetQuery": "foo",
                "maxFacetHits": 42,
            },
        )

        assert _req.path == "/1/indexes/indexName/facets/facetName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"params":"query=foo&facetFilters=['bar']","facetQuery":"foo","maxFacetHits":42}"""
        )

    def test_search_rules_(self):
        """
        searchRules
        """
        _req = self._client.search_rules_with_http_info(
            index_name="cts_e2e_browse",
            search_rules_params={
                "query": "zorro",
            },
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/rules/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"query":"zorro"}""")

    def test_search_single_index_(self):
        """
        search with minimal parameters
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_search_single_index_1(self):
        """
        search with special characters in indexName
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="cts_e2e_space in index",
        )

        assert _req.path == "/1/indexes/cts_e2e_space%20in%20index/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_search_single_index_2(self):
        """
        search with searchParams
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "query": "myQuery",
                "facetFilters": [
                    "tags:algolia",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"myQuery","facetFilters":["tags:algolia"]}"""
        )

    def test_search_single_index_3(self):
        """
        single search retrieve snippets
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="cts_e2e_browse",
            search_params={
                "query": "batman mask of the phantasm",
                "attributesToRetrieve": [
                    "*",
                ],
                "attributesToSnippet": [
                    "*:20",
                ],
            },
        )

        assert _req.path == "/1/indexes/cts_e2e_browse/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"batman mask of the phantasm","attributesToRetrieve":["*"],"attributesToSnippet":["*:20"]}"""
        )

    def test_search_single_index_4(self):
        """
        query
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "query": "phone",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"query":"phone"}""")

    def test_search_single_index_5(self):
        """
        filters
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "country:US AND price.gross < 2.0",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"country:US AND price.gross < 2.0"}"""
        )

    def test_search_single_index_6(self):
        """
        distinct
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"distinct":true}""")

    def test_search_single_index_7(self):
        """
        filtersNumeric
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "price < 10",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"filters":"price < 10"}""")

    def test_search_single_index_8(self):
        """
        filtersTimestamp
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "NOT date_timestamp:1514764800 TO 1546300799",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"NOT date_timestamp:1514764800 TO 1546300799"}"""
        )

    def test_search_single_index_9(self):
        """
        filtersSumOrFiltersScoresFalse
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
                "sumOrFiltersScores": False,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":false}"""
        )

    def test_search_single_index_10(self):
        """
        filtersSumOrFiltersScoresTrue
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
                "sumOrFiltersScores": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":true}"""
        )

    def test_search_single_index_11(self):
        """
        filtersStephenKing
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": 'author:"Stephen King"',
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"filters":"author:\\"Stephen King\\""}""")

    def test_search_single_index_12(self):
        """
        filtersNotTags
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "NOT _tags:non-fiction",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"filters":"NOT _tags:non-fiction"}""")

    def test_search_single_index_13(self):
        """
        facetFiltersList
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "facetFilters": [
                    "publisher:Penguin",
                    [
                        "author:Stephen King",
                        "genre:Horror",
                    ],
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"facetFilters":["publisher:Penguin",["author:Stephen King","genre:Horror"]]}"""
        )

    def test_search_single_index_14(self):
        """
        facetFiltersNeg
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "facetFilters": "category:-Ebook",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facetFilters":"category:-Ebook"}""")

    def test_search_single_index_15(self):
        """
        filtersAndFacetFilters
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": '(author:"Stephen King" OR genre:"Horror")',
                "facetFilters": [
                    "publisher:Penguin",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"(author:\\"Stephen King\\" OR genre:\\"Horror\\")","facetFilters":["publisher:Penguin"]}"""
        )

    def test_search_single_index_16(self):
        """
        aroundLatLng
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "aroundLatLng": "40.71, -74.01",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"aroundLatLng":"40.71, -74.01"}""")

    def test_search_single_index_17(self):
        """
        aroundLatLngViaIP
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "aroundLatLngViaIP": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"aroundLatLngViaIP":true}""")

    def test_search_single_index_18(self):
        """
        aroundRadius
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "aroundLatLng": "40.71, -74.01",
                "aroundRadius": 1000000,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"aroundLatLng":"40.71, -74.01","aroundRadius":1000000}"""
        )

    def test_search_single_index_19(self):
        """
        insideBoundingBox
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "insideBoundingBox": [
                    [
                        49.067996905313834,
                        65.73828125,
                        25.905859247243498,
                        128.8046875,
                    ],
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"insideBoundingBox":[[49.067996905313834,65.73828125,25.905859247243498,128.8046875]]}"""
        )

    def test_search_single_index_20(self):
        """
        insidePolygon
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "insidePolygon": [
                    [
                        42.01,
                        -124.31,
                        48.835509470063045,
                        -124.40453125000005,
                        45.01082951668149,
                        -65.95726562500005,
                        31.247243545293433,
                        -81.06578125000004,
                        25.924152577235226,
                        -97.68234374999997,
                        32.300311895879545,
                        -117.54828125,
                    ],
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}"""
        )

    def test_search_single_index_21(self):
        """
        insidePolygon
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "insidePolygon": [
                    [
                        42.01,
                        -124.31,
                        48.835509470063045,
                        -124.40453125000005,
                        45.01082951668149,
                        -65.95726562500005,
                        31.247243545293433,
                        -81.06578125000004,
                        25.924152577235226,
                        -97.68234374999997,
                        32.300311895879545,
                        -117.54828125,
                    ],
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}"""
        )

    def test_search_single_index_22(self):
        """
        optionalFilters
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "optionalFilters": [
                    "can_deliver_quickly:true",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"optionalFilters":["can_deliver_quickly:true"]}"""
        )

    def test_search_single_index_23(self):
        """
        optionalFiltersMany
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "optionalFilters": [
                    "brand:Apple<score=3>",
                    "brand:Samsung<score=2>",
                    "brand:-Huawei",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"optionalFilters":["brand:Apple<score=3>","brand:Samsung<score=2>","brand:-Huawei"]}"""
        )

    def test_search_single_index_24(self):
        """
        optionalFiltersSimple
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "optionalFilters": [
                    "brand:Apple<score=2>",
                    "type:tablet",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"optionalFilters":["brand:Apple<score=2>","type:tablet"]}"""
        )

    def test_search_single_index_25(self):
        """
        restrictSearchableAttributes
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "restrictSearchableAttributes": [
                    "title_fr",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"restrictSearchableAttributes":["title_fr"]}"""
        )

    def test_search_single_index_26(self):
        """
        getRankingInfo
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "getRankingInfo": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"getRankingInfo":true}""")

    def test_search_single_index_27(self):
        """
        clickAnalytics
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "clickAnalytics": True,
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"clickAnalytics":true}""")

    def test_search_single_index_28(self):
        """
        clickAnalyticsUserToken
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "clickAnalytics": True,
                "userToken": "user-1",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"clickAnalytics":true,"userToken":"user-1"}"""
        )

    def test_search_single_index_29(self):
        """
        enablePersonalization
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "enablePersonalization": True,
                "userToken": "user-1",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"enablePersonalization":true,"userToken":"user-1"}"""
        )

    def test_search_single_index_30(self):
        """
        userToken
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "userToken": "user-1",
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"userToken":"user-1"}""")

    def test_search_single_index_31(self):
        """
        analyticsTag
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "analyticsTags": [
                    "YOUR_ANALYTICS_TAG",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"analyticsTags":["YOUR_ANALYTICS_TAG"]}""")

    def test_search_single_index_32(self):
        """
        facetFiltersUsers
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "facetFilters": [
                    "user:user42",
                    "user:public",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"facetFilters":["user:user42","user:public"]}"""
        )

    def test_search_single_index_33(self):
        """
        buildTheQuery
        """
        _req = self._client.search_single_index_with_http_info(
            index_name="indexName",
            search_params={
                "filters": "categoryPageId: Men's Clothing",
                "hitsPerPage": 50,
                "analyticsTags": [
                    "mens-clothing",
                ],
            },
        )

        assert _req.path == "/1/indexes/indexName/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"filters":"categoryPageId: Men's Clothing","hitsPerPage":50,"analyticsTags":["mens-clothing"]}"""
        )

    def test_search_synonyms_(self):
        """
        searchSynonyms with minimal parameters
        """
        _req = self._client.search_synonyms_with_http_info(
            index_name="indexName",
        )

        assert _req.path == "/1/indexes/indexName/synonyms/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_search_synonyms_1(self):
        """
        searchSynonyms with all parameters
        """
        _req = self._client.search_synonyms_with_http_info(
            index_name="indexName",
            search_synonyms_params={
                "query": "myQuery",
                "type": "altcorrection1",
                "page": 10,
                "hitsPerPage": 10,
            },
        )

        assert _req.path == "/1/indexes/indexName/synonyms/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"myQuery","type":"altcorrection1","page":10,"hitsPerPage":10}"""
        )

    def test_search_user_ids_(self):
        """
        searchUserIds
        """
        _req = self._client.search_user_ids_with_http_info(
            search_user_ids_params={
                "query": "test",
                "clusterName": "theClusterName",
                "page": 5,
                "hitsPerPage": 10,
            },
        )

        assert _req.path == "/1/clusters/mapping/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"query":"test","clusterName":"theClusterName","page":5,"hitsPerPage":10}"""
        )

    def test_set_dictionary_settings_(self):
        """
        get setDictionarySettings results with minimal parameters
        """
        _req = self._client.set_dictionary_settings_with_http_info(
            dictionary_settings_params={
                "disableStandardEntries": {
                    "plurals": {
                        "fr": False,
                        "en": False,
                        "ru": True,
                    },
                },
            },
        )

        assert _req.path == "/1/dictionaries/*/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true}}}"""
        )

    def test_set_dictionary_settings_1(self):
        """
        get setDictionarySettings results with all parameters
        """
        _req = self._client.set_dictionary_settings_with_http_info(
            dictionary_settings_params={
                "disableStandardEntries": {
                    "plurals": {
                        "fr": False,
                        "en": False,
                        "ru": True,
                    },
                    "stopwords": {
                        "fr": False,
                    },
                    "compounds": {
                        "ru": True,
                    },
                },
            },
        )

        assert _req.path == "/1/dictionaries/*/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}"""
        )

    def test_set_settings_(self):
        """
        minimal parameters
        """
        _req = self._client.set_settings_with_http_info(
            index_name="cts_e2e_settings",
            index_settings={
                "paginationLimitedTo": 10,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/cts_e2e_settings/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"paginationLimitedTo":10}""")

    def test_set_settings_1(self):
        """
        boolean typoTolerance
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "typoTolerance": True,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"typoTolerance":true}""")

    def test_set_settings_2(self):
        """
        enum typoTolerance
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "typoTolerance": "min",
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"typoTolerance":"min"}""")

    def test_set_settings_3(self):
        """
        ignorePlurals
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ignorePlurals": True,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"ignorePlurals":true}""")

    def test_set_settings_4(self):
        """
        list of string ignorePlurals
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ignorePlurals": [
                    "fr",
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"ignorePlurals":["fr"]}""")

    def test_set_settings_5(self):
        """
        removeStopWords boolean
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "removeStopWords": True,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"removeStopWords":true}""")

    def test_set_settings_6(self):
        """
        removeStopWords list of string
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "removeStopWords": [
                    "fr",
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"removeStopWords":["fr"]}""")

    def test_set_settings_7(self):
        """
        boolean distinct
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "distinct": True,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"distinct":true}""")

    def test_set_settings_8(self):
        """
        integer distinct
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "distinct": 1,
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"distinct":1}""")

    def test_set_settings_9(self):
        """
        distinct company
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "attributeForDistinct": "company",
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributeForDistinct":"company","distinct":true}"""
        )

    def test_set_settings_10(self):
        """
        distinct design
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "attributeForDistinct": "design",
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributeForDistinct":"design","distinct":true}"""
        )

    def test_set_settings_11(self):
        """
        distinct true
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"distinct":true}""")

    def test_set_settings_12(self):
        """
        distinct section
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "attributeForDistinct": "section",
                "distinct": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributeForDistinct":"section","distinct":true}"""
        )

    def test_set_settings_13(self):
        """
        attributesForFaceting allergens
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "allergens",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributesForFaceting":["allergens"]}""")

    def test_set_settings_14(self):
        """
        attributesForFaceting categoryPageId
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "searchable(categoryPageId)",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["searchable(categoryPageId)"]}"""
        )

    def test_set_settings_15(self):
        """
        unretrievableAttributes
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "unretrievableAttributes": [
                    "visible_by",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"unretrievableAttributes":["visible_by"]}"""
        )

    def test_set_settings_16(self):
        """
        attributesForFaceting user restricted data
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "filterOnly(visible_by)",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["filterOnly(visible_by)"]}"""
        )

    def test_set_settings_17(self):
        """
        attributesForFaceting optional filters
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "can_deliver_quickly",
                    "restaurant",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["can_deliver_quickly","restaurant"]}"""
        )

    def test_set_settings_18(self):
        """
        attributesForFaceting redirect index
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "query_terms",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["query_terms"]}"""
        )

    def test_set_settings_19(self):
        """
        attributesForFaceting multiple consequences
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "director",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"attributesForFaceting":["director"]}""")

    def test_set_settings_20(self):
        """
        attributesForFaceting in-depth optional filters
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "filterOnly(brand)",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["filterOnly(brand)"]}"""
        )

    def test_set_settings_21(self):
        """
        mode neuralSearch
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "mode": "neuralSearch",
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"mode":"neuralSearch"}""")

    def test_set_settings_22(self):
        """
        mode keywordSearch
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "mode": "keywordSearch",
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"mode":"keywordSearch"}""")

    def test_set_settings_23(self):
        """
        searchableAttributes same priority
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "title,comments",
                    "ingredients",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["title,comments","ingredients"]}"""
        )

    def test_set_settings_24(self):
        """
        searchableAttributes higher priority
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "title",
                    "ingredients",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["title","ingredients"]}"""
        )

    def test_set_settings_25(self):
        """
        customRanking retweets
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(retweets)",
                    "desc(likes)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(retweets)","desc(likes)"]}"""
        )

    def test_set_settings_26(self):
        """
        customRanking boosted
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(boosted)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"customRanking":["desc(boosted)"]}""")

    def test_set_settings_27(self):
        """
        customRanking pageviews
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(pageviews)",
                    "desc(comments)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(pageviews)","desc(comments)"]}"""
        )

    def test_set_settings_28(self):
        """
        customRanking applying search parameters for a specific query
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(nb_airline_liaisons)",
                ],
                "attributesForFaceting": [
                    "city, country",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(nb_airline_liaisons)"],"attributesForFaceting":["city, country"]}"""
        )

    def test_set_settings_29(self):
        """
        customRanking rounded pageviews
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(rounded_pageviews)",
                    "desc(comments)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(rounded_pageviews)","desc(comments)"]}"""
        )

    def test_set_settings_30(self):
        """
        customRanking price
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(price)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"customRanking":["desc(price)"]}""")

    def test_set_settings_31(self):
        """
        ranking exhaustive
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ranking": [
                    "desc(price)",
                    "typo",
                    "geo",
                    "words",
                    "filters",
                    "proximity",
                    "attribute",
                    "exact",
                    "custom",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"ranking":["desc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}"""
        )

    def test_set_settings_32(self):
        """
        ranking standard replica
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ranking": [
                    "desc(post_date_timestamp)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"ranking":["desc(post_date_timestamp)"]}"""
        )

    def test_set_settings_33(self):
        """
        ranking virtual replica
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "desc(post_date_timestamp)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["desc(post_date_timestamp)"]}"""
        )

    def test_set_settings_34(self):
        """
        customRanking and ranking sort alphabetically
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "asc(textual_attribute)",
                ],
                "ranking": [
                    "custom",
                    "typo",
                    "geo",
                    "words",
                    "filters",
                    "proximity",
                    "attribute",
                    "exact",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["asc(textual_attribute)"],"ranking":["custom","typo","geo","words","filters","proximity","attribute","exact"]}"""
        )

    def test_set_settings_35(self):
        """
        relevancyStrictness
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "customRanking": [
                    "asc(textual_attribute)",
                ],
                "relevancyStrictness": 0,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"customRanking":["asc(textual_attribute)"],"relevancyStrictness":0}"""
        )

    def test_set_settings_36(self):
        """
        create replica index
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "replicas": [
                    "products_price_desc",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"replicas":["products_price_desc"]}""")

    def test_set_settings_37(self):
        """
        unlink replica index
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "replicas": [
                    "",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"replicas":[""]}""")

    def test_set_settings_38(self):
        """
        forwardToReplicas
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "name",
                    "description",
                ],
            },
            forward_to_replicas=True,
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"forwardToReplicas": "true"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["name","description"]}"""
        )

    def test_set_settings_39(self):
        """
        maxValuesPerFacet
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "maxValuesPerFacet": 1000,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"maxValuesPerFacet":1000}""")

    def test_set_settings_40(self):
        """
        maxFacetHits
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "maxFacetHits": 1000,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"maxFacetHits":1000}""")

    def test_set_settings_41(self):
        """
        attributesForFaceting complex
        """
        _req = self._client.set_settings_with_http_info(
            index_name="<YOUR_INDEX_NAME>",
            index_settings={
                "attributesForFaceting": [
                    "actor",
                    "filterOnly(category)",
                    "searchable(publisher)",
                ],
            },
        )

        assert _req.path == "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"attributesForFaceting":["actor","filterOnly(category)","searchable(publisher)"]}"""
        )

    def test_set_settings_42(self):
        """
        ranking closest dates
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "ranking": [
                    "asc(date_timestamp)",
                    "typo",
                    "geo",
                    "words",
                    "filters",
                    "proximity",
                    "attribute",
                    "exact",
                    "custom",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"ranking":["asc(date_timestamp)","typo","geo","words","filters","proximity","attribute","exact","custom"]}"""
        )

    def test_set_settings_43(self):
        """
        searchableAttributes item variation
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "design",
                    "type",
                    "color",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["design","type","color"]}"""
        )

    def test_set_settings_44(self):
        """
        searchableAttributes around location
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "name",
                    "country",
                    "code",
                    "iata_code",
                ],
                "customRanking": [
                    "desc(links_count)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["name","country","code","iata_code"],"customRanking":["desc(links_count)"]}"""
        )

    def test_set_settings_45(self):
        """
        searchableAttributes around location
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "name",
                    "country",
                    "code",
                    "iata_code",
                ],
                "customRanking": [
                    "desc(links_count)",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["name","country","code","iata_code"],"customRanking":["desc(links_count)"]}"""
        )

    def test_set_settings_46(self):
        """
        disableTypoToleranceOnAttributes
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "disableTypoToleranceOnAttributes": [
                    "serial_number",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disableTypoToleranceOnAttributes":["serial_number"]}"""
        )

    def test_set_settings_47(self):
        """
        everything
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "advancedSyntax": True,
                "advancedSyntaxFeatures": [
                    "exactPhrase",
                ],
                "allowCompressionOfIntegerArray": True,
                "allowTyposOnNumericTokens": True,
                "alternativesAsExact": [
                    "singleWordSynonym",
                ],
                "attributeCriteriaComputedByMinProximity": True,
                "attributeForDistinct": "test",
                "attributesForFaceting": [
                    "algolia",
                ],
                "attributesToHighlight": [
                    "algolia",
                ],
                "attributesToRetrieve": [
                    "algolia",
                ],
                "attributesToSnippet": [
                    "algolia",
                ],
                "attributesToTransliterate": [
                    "algolia",
                ],
                "camelCaseAttributes": [
                    "algolia",
                ],
                "customNormalization": {
                    "algolia": {
                        "aloglia": "aglolia",
                    },
                },
                "customRanking": [
                    "algolia",
                ],
                "decompoundQuery": False,
                "decompoundedAttributes": {
                    "algolia": "aloglia",
                },
                "disableExactOnAttributes": [
                    "algolia",
                ],
                "disablePrefixOnAttributes": [
                    "algolia",
                ],
                "disableTypoToleranceOnAttributes": [
                    "algolia",
                ],
                "disableTypoToleranceOnWords": [
                    "algolia",
                ],
                "distinct": 3,
                "enablePersonalization": True,
                "enableReRanking": False,
                "enableRules": True,
                "exactOnSingleWordQuery": "attribute",
                "highlightPreTag": "<span>",
                "highlightPostTag": "</span>",
                "hitsPerPage": 10,
                "ignorePlurals": False,
                "indexLanguages": [
                    "fr",
                ],
                "keepDiacriticsOnCharacters": "abc",
                "maxFacetHits": 20,
                "maxValuesPerFacet": 30,
                "minProximity": 6,
                "minWordSizefor1Typo": 5,
                "minWordSizefor2Typos": 11,
                "mode": "neuralSearch",
                "numericAttributesForFiltering": [
                    "algolia",
                ],
                "optionalWords": [
                    "myspace",
                ],
                "paginationLimitedTo": 0,
                "queryLanguages": [
                    "fr",
                ],
                "queryType": "prefixLast",
                "ranking": [
                    "geo",
                ],
                "reRankingApplyFilter": "mySearch:filters",
                "relevancyStrictness": 10,
                "removeStopWords": False,
                "removeWordsIfNoResults": "lastWords",
                "renderingContent": {
                    "facetOrdering": {
                        "facets": {
                            "order": [
                                "a",
                                "b",
                            ],
                        },
                        "values": {
                            "a": {
                                "order": [
                                    "b",
                                ],
                                "sortRemainingBy": "count",
                            },
                        },
                    },
                },
                "replaceSynonymsInHighlight": True,
                "replicas": [
                    "",
                ],
                "responseFields": [
                    "algolia",
                ],
                "restrictHighlightAndSnippetArrays": True,
                "searchableAttributes": [
                    "foo",
                ],
                "semanticSearch": {
                    "eventSources": [
                        "foo",
                    ],
                },
                "separatorsToIndex": "bar",
                "snippetEllipsisText": "---",
                "sortFacetValuesBy": "date",
                "typoTolerance": False,
                "unretrievableAttributes": [
                    "foo",
                ],
                "userData": {
                    "user": "data",
                },
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["fr"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["fr"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}"""
        )

    def test_set_settings_48(self):
        """
        searchableAttributesWithCustomRankingsAndAttributesForFaceting
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "brand",
                    "name",
                    "categories",
                    "unordered(description)",
                ],
                "customRanking": [
                    "desc(popularity)",
                ],
                "attributesForFaceting": [
                    "searchable(brand)",
                    "type",
                    "categories",
                    "price",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["brand","name","categories","unordered(description)"],"customRanking":["desc(popularity)"],"attributesForFaceting":["searchable(brand)","type","categories","price"]}"""
        )

    def test_set_settings_49(self):
        """
        searchableAttributesProductReferenceSuffixes
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "name",
                    "product_reference",
                    "product_reference_suffixes",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["name","product_reference","product_reference_suffixes"]}"""
        )

    def test_set_settings_50(self):
        """
        queryLanguageAndIgnorePlurals
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "queryLanguages": [
                    "en",
                ],
                "ignorePlurals": True,
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"queryLanguages":["en"],"ignorePlurals":true}"""
        )

    def test_set_settings_51(self):
        """
        searchableAttributesInMovies
        """
        _req = self._client.set_settings_with_http_info(
            index_name="movies",
            index_settings={
                "searchableAttributes": [
                    "title_eng",
                    "title_fr",
                    "title_es",
                ],
            },
        )

        assert _req.path == "/1/indexes/movies/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["title_eng","title_fr","title_es"]}"""
        )

    def test_set_settings_52(self):
        """
        disablePrefixOnAttributes
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "disablePrefixOnAttributes": [
                    "serial_number",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disablePrefixOnAttributes":["serial_number"]}"""
        )

    def test_set_settings_53(self):
        """
        disableTypoToleranceOnAttributes
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "disableTypoToleranceOnAttributes": [
                    "serial_number",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"disableTypoToleranceOnAttributes":["serial_number"]}"""
        )

    def test_set_settings_54(self):
        """
        searchableAttributesSimpleExample
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "serial_number",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["serial_number"]}"""
        )

    def test_set_settings_55(self):
        """
        searchableAttributesSimpleExampleAlt
        """
        _req = self._client.set_settings_with_http_info(
            index_name="theIndexName",
            index_settings={
                "searchableAttributes": [
                    "serial_number",
                    "serial_number_suffixes",
                ],
            },
        )

        assert _req.path == "/1/indexes/theIndexName/settings"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"searchableAttributes":["serial_number","serial_number_suffixes"]}"""
        )

    def test_update_api_key_(self):
        """
        updateApiKey
        """
        _req = self._client.update_api_key_with_http_info(
            key="ALGOLIA_API_KEY",
            api_key={
                "acl": [
                    "search",
                    "addObject",
                ],
                "validity": 300,
                "maxQueriesPerIPPerHour": 100,
                "maxHitsPerQuery": 20,
            },
        )

        assert _req.path == "/1/keys/ALGOLIA_API_KEY"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"acl":["search","addObject"],"validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}"""
        )
