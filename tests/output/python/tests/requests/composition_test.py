# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
from json import loads
from algoliasearch.http.transporter import EchoTransporter
from algoliasearch.http.transporter_sync import EchoTransporterSync
from algoliasearch.composition.client import CompositionClient
from algoliasearch.composition.client import CompositionClientSync
from algoliasearch.composition.config import CompositionConfig


class TestCompositionClient:
    _config = CompositionConfig("test_app_id", "test_api_key")
    _client = CompositionClient.create_with_config(
        config=_config, transporter=EchoTransporter(_config)
    )

    async def test_search_(self):
        """
        search
        """
        _req = await self._client.search_with_http_info(
            composition_id="foo",
            request_body={
                "params": {
                    "query": "batman",
                },
            },
        )

        assert _req.path == "/1/compositions/foo/run"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"params":{"query":"batman"}}""")

    async def test_search_for_facet_values_(self):
        """
        searchForFacetValues
        """
        _req = await self._client.search_for_facet_values_with_http_info(
            composition_id="foo",
            facet_name="brand",
            search_for_facet_values_request={
                "params": {
                    "maxFacetHits": 10,
                },
            },
        )

        assert _req.path == "/1/compositions/foo/facets/brand/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"params":{"maxFacetHits":10}}""")


class TestCompositionClientSync:
    _config = CompositionConfig("test_app_id", "test_api_key")
    _client = CompositionClientSync.create_with_config(
        config=_config, transporter=EchoTransporterSync(_config)
    )

    def test_search_(self):
        """
        search
        """
        _req = self._client.search_with_http_info(
            composition_id="foo",
            request_body={
                "params": {
                    "query": "batman",
                },
            },
        )

        assert _req.path == "/1/compositions/foo/run"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"params":{"query":"batman"}}""")

    def test_search_for_facet_values_(self):
        """
        searchForFacetValues
        """
        _req = self._client.search_for_facet_values_with_http_info(
            composition_id="foo",
            facet_name="brand",
            search_for_facet_values_request={
                "params": {
                    "maxFacetHits": 10,
                },
            },
        )

        assert _req.path == "/1/compositions/foo/facets/brand/query"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"params":{"maxFacetHits":10}}""")
