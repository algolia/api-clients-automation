# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
from json import loads
from algoliasearch.http.transporter import EchoTransporter
from algoliasearch.http.transporter_sync import EchoTransporterSync
from algoliasearch.ingestion.client import IngestionClient
from algoliasearch.ingestion.client import IngestionClientSync
from algoliasearch.ingestion.config import IngestionConfig


class TestIngestionClient:
    _config = IngestionConfig("test_app_id", "test_api_key", "us")
    _client = IngestionClient.create_with_config(
        config=_config, transporter=EchoTransporter(_config)
    )

    async def test_create_authentication_(self):
        """
        createAuthenticationOAuth
        """
        _req = await self._client.create_authentication_with_http_info(
            authentication_create={
                "type": "oauth",
                "name": "authName",
                "input": {
                    "url": "http://test.oauth",
                    "client_id": "myID",
                    "client_secret": "mySecret",
                },
            },
        )

        assert _req.path == "/1/authentications"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"oauth","name":"authName","input":{"url":"http://test.oauth","client_id":"myID","client_secret":"mySecret"}}"""
        )

    async def test_create_authentication_1(self):
        """
        createAuthenticationAlgolia
        """
        _req = await self._client.create_authentication_with_http_info(
            authentication_create={
                "type": "algolia",
                "name": "authName",
                "input": {
                    "appID": "myappID",
                    "apiKey": "randomApiKey",
                },
            },
        )

        assert _req.path == "/1/authentications"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"algolia","name":"authName","input":{"appID":"myappID","apiKey":"randomApiKey"}}"""
        )

    async def test_create_destination_(self):
        """
        createDestination
        """
        _req = await self._client.create_destination_with_http_info(
            destination_create={
                "type": "search",
                "name": "destinationName",
                "input": {
                    "indexName": "full_name______",
                },
                "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            },
        )

        assert _req.path == "/1/destinations"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"search","name":"destinationName","input":{"indexName":"full_name______"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}"""
        )

    async def test_create_destination_1(self):
        """
        with transformationIDs
        """
        _req = await self._client.create_destination_with_http_info(
            destination_create={
                "type": "search",
                "name": "destinationName",
                "input": {
                    "indexName": "full_name______",
                },
                "transformationIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                ],
            },
        )

        assert _req.path == "/1/destinations"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"search","name":"destinationName","input":{"indexName":"full_name______"},"transformationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}"""
        )

    async def test_create_source_(self):
        """
        createSource
        """
        _req = await self._client.create_source_with_http_info(
            source_create={
                "type": "commercetools",
                "name": "sourceName",
                "input": {
                    "storeKeys": [
                        "myStore",
                    ],
                    "locales": [
                        "de",
                    ],
                    "url": "http://commercetools.com",
                    "projectKey": "keyID",
                },
                "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            },
        )

        assert _req.path == "/1/sources"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"commercetools","name":"sourceName","input":{"storeKeys":["myStore"],"locales":["de"],"url":"http://commercetools.com","projectKey":"keyID"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}"""
        )

    async def test_create_source_1(self):
        """
        push
        """
        _req = await self._client.create_source_with_http_info(
            source_create={
                "type": "push",
                "name": "pushezpourentrer",
            },
        )

        assert _req.path == "/1/sources"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"push","name":"pushezpourentrer"}"""
        )

    async def test_create_task_(self):
        """
        task without cron
        """
        _req = await self._client.create_task_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "action": "replace",
            },
        )

        assert _req.path == "/2/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","action":"replace"}"""
        )

    async def test_create_task_1(self):
        """
        task with cron
        """
        _req = await self._client.create_task_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "cron": "* * * * *",
                "action": "replace",
            },
        )

        assert _req.path == "/2/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","cron":"* * * * *","action":"replace"}"""
        )

    async def test_create_task_2(self):
        """
        task shopify
        """
        _req = await self._client.create_task_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "cron": "* * * * *",
                "action": "replace",
                "input": {
                    "streams": [
                        {
                            "name": "foo",
                            "syncMode": "incremental",
                        },
                    ],
                },
            },
        )

        assert _req.path == "/2/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","cron":"* * * * *","action":"replace","input":{"streams":[{"name":"foo","syncMode":"incremental"}]}}"""
        )

    async def test_create_task_v1_(self):
        """
        createTaskOnDemand
        """
        _req = await self._client.create_task_v1_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "trigger": {
                    "type": "onDemand",
                },
                "action": "replace",
            },
        )

        assert _req.path == "/1/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"onDemand"},"action":"replace"}"""
        )

    async def test_create_task_v1_1(self):
        """
        createTaskSchedule
        """
        _req = await self._client.create_task_v1_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "trigger": {
                    "type": "schedule",
                    "cron": "* * * * *",
                },
                "action": "replace",
            },
        )

        assert _req.path == "/1/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"schedule","cron":"* * * * *"},"action":"replace"}"""
        )

    async def test_create_task_v1_2(self):
        """
        createTaskSubscription
        """
        _req = await self._client.create_task_v1_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "trigger": {
                    "type": "onDemand",
                },
                "action": "replace",
            },
        )

        assert _req.path == "/1/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"onDemand"},"action":"replace"}"""
        )

    async def test_create_task_v1_3(self):
        """
        task shopify
        """
        _req = await self._client.create_task_v1_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "trigger": {
                    "type": "onDemand",
                },
                "action": "replace",
                "input": {
                    "streams": [
                        {
                            "name": "foo",
                            "syncMode": "incremental",
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"onDemand"},"action":"replace","input":{"streams":[{"name":"foo","syncMode":"incremental"}]}}"""
        )

    async def test_create_transformation_(self):
        """
        createTransformation
        """
        _req = await self._client.create_transformation_with_http_info(
            transformation_create={
                "code": "foo",
                "name": "bar",
                "description": "baz",
            },
        )

        assert _req.path == "/1/transformations"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","name":"bar","description":"baz"}"""
        )

    async def test_custom_delete_(self):
        """
        allow del method for a custom path with minimal parameters
        """
        _req = await self._client.custom_delete_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_custom_delete_1(self):
        """
        allow del method for a custom path with all parameters
        """
        _req = await self._client.custom_delete_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_custom_get_(self):
        """
        allow get method for a custom path with minimal parameters
        """
        _req = await self._client.custom_get_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_custom_get_1(self):
        """
        allow get method for a custom path with all parameters
        """
        _req = await self._client.custom_get_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters with space",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters%20with%20space"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_custom_get_2(self):
        """
        requestOptions should be escaped too
        """
        _req = await self._client.custom_get_with_http_info(
            path="test/all",
            parameters={
                "query": "to be overriden",
            },
            request_options={
                "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
                "query_parameters": loads(
                    """{"query":"parameters with space","and an array":["array","with spaces"]}"""
                ),
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {
                "query": "parameters%20with%20space",
                "and%20an%20array": "array%2Cwith%20spaces",
            }.items()
        )
        assert _req.headers.items() >= {"x-header-1": "spaces are left alone"}.items()
        assert _req.data is None

    async def test_custom_post_(self):
        """
        allow post method for a custom path with minimal parameters
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_custom_post_1(self):
        """
        allow post method for a custom path with all parameters
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
            body={
                "body": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"body":"parameters"}""")

    async def test_custom_post_2(self):
        """
        requestOptions can override default query parameters
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"query":"myQueryParameter"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "myQueryParameter"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_3(self):
        """
        requestOptions merges query parameters with default ones
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "query2": "myQueryParameter"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_4(self):
        """
        requestOptions can override default headers
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "headers": loads("""{"x-algolia-api-key":"myApiKey"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {"x-algolia-api-key": "myApiKey"}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_5(self):
        """
        requestOptions merges headers with default ones
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "headers": loads("""{"x-algolia-api-key":"myApiKey"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {"x-algolia-api-key": "myApiKey"}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_6(self):
        """
        requestOptions queryParameters accepts booleans
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"isItWorking":true}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "isItWorking": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_7(self):
        """
        requestOptions queryParameters accepts integers
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":2}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_8(self):
        """
        requestOptions queryParameters accepts list of string
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "b%20and%20c%2Cd"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_9(self):
        """
        requestOptions queryParameters accepts list of booleans
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":[true,true,false]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "true%2Ctrue%2Cfalse"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_post_10(self):
        """
        requestOptions queryParameters accepts list of integers
        """
        _req = await self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":[1,2]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "1%2C2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    async def test_custom_put_(self):
        """
        allow put method for a custom path with minimal parameters
        """
        _req = await self._client.custom_put_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    async def test_custom_put_1(self):
        """
        allow put method for a custom path with all parameters
        """
        _req = await self._client.custom_put_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
            body={
                "body": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"body":"parameters"}""")

    async def test_delete_authentication_(self):
        """
        deleteAuthentication
        """
        _req = await self._client.delete_authentication_with_http_info(
            authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_destination_(self):
        """
        deleteDestination
        """
        _req = await self._client.delete_destination_with_http_info(
            destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_source_(self):
        """
        deleteSource
        """
        _req = await self._client.delete_source_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_task_(self):
        """
        deleteTask
        """
        _req = await self._client.delete_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_task_v1_(self):
        """
        deleteTaskV1
        """
        _req = await self._client.delete_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_delete_transformation_(self):
        """
        deleteTransformation
        """
        _req = await self._client.delete_transformation_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_disable_task_(self):
        """
        disableTask
        """
        _req = await self._client.disable_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_disable_task_v1_(self):
        """
        disableTaskV1
        """
        _req = await self._client.disable_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_enable_task_(self):
        """
        enableTask
        """
        _req = await self._client.enable_task_with_http_info(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )

        assert _req.path == "/2/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_enable_task_v1_(self):
        """
        enableTaskV1
        """
        _req = await self._client.enable_task_v1_with_http_info(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )

        assert _req.path == "/1/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_get_authentication_(self):
        """
        getAuthentication
        """
        _req = await self._client.get_authentication_with_http_info(
            authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_destination_(self):
        """
        getDestination
        """
        _req = await self._client.get_destination_with_http_info(
            destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_event_(self):
        """
        getEvent
        """
        _req = await self._client.get_event_with_http_info(
            run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            event_id="6c02aeb1-775e-418e-870b-1faccd4b2c0c",
        )

        assert (
            _req.path
            == "/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events/6c02aeb1-775e-418e-870b-1faccd4b2c0c"
        )
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_run_(self):
        """
        getRun
        """
        _req = await self._client.get_run_with_http_info(
            run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_source_(self):
        """
        getSource
        """
        _req = await self._client.get_source_with_http_info(
            source_id="75eeb306-51d3-4e5e-a279-3c92bd8893ac",
        )

        assert _req.path == "/1/sources/75eeb306-51d3-4e5e-a279-3c92bd8893ac"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_task_(self):
        """
        getTask
        """
        _req = await self._client.get_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_task_v1_(self):
        """
        getTaskV1
        """
        _req = await self._client.get_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_get_transformation_(self):
        """
        getTransformation
        """
        _req = await self._client.get_transformation_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_authentications_(self):
        """
        getAuthentications
        """
        _req = await self._client.list_authentications_with_http_info()

        assert _req.path == "/1/authentications"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_authentications_1(self):
        """
        getAuthentications with query params
        """
        _req = await self._client.list_authentications_with_http_info(
            items_per_page=2,
            page=1,
            type=[
                "basic",
                "algolia",
            ],
            platform=[
                "none",
            ],
            sort="createdAt",
            order="asc",
        )

        assert _req.path == "/1/authentications"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {
                "itemsPerPage": "2",
                "page": "1",
                "type": "basic%2Calgolia",
                "platform": "none",
                "sort": "createdAt",
                "order": "asc",
            }.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_destinations_(self):
        """
        getDestinations
        """
        _req = await self._client.list_destinations_with_http_info()

        assert _req.path == "/1/destinations"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_events_(self):
        """
        getEvents
        """
        _req = await self._client.list_events_with_http_info(
            run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_runs_(self):
        """
        listRuns
        """
        _req = await self._client.list_runs_with_http_info()

        assert _req.path == "/1/runs"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_sources_(self):
        """
        listSources
        """
        _req = await self._client.list_sources_with_http_info()

        assert _req.path == "/1/sources"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_tasks_(self):
        """
        listTasks
        """
        _req = await self._client.list_tasks_with_http_info()

        assert _req.path == "/2/tasks"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_tasks_v1_(self):
        """
        listTasksV1
        """
        _req = await self._client.list_tasks_v1_with_http_info()

        assert _req.path == "/1/tasks"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_list_transformations_(self):
        """
        listTransformations
        """
        _req = await self._client.list_transformations_with_http_info()

        assert _req.path == "/1/transformations"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    async def test_push_task_(self):
        """
        pushTask
        """
        _req = await self._client.push_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            push_task_payload={
                "action": "addObject",
                "records": [
                    {
                        "key": "bar",
                        "foo": "1",
                        "objectID": "o",
                    },
                    {
                        "key": "baz",
                        "foo": "2",
                        "objectID": "k",
                    },
                ],
            },
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/push"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"action":"addObject","records":[{"key":"bar","foo":"1","objectID":"o"},{"key":"baz","foo":"2","objectID":"k"}]}"""
        )

    async def test_run_source_(self):
        """
        runSource
        """
        _req = await self._client.run_source_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            run_source_payload={
                "indexToInclude": [
                    "products_us",
                    "products eu",
                ],
                "entityIDs": [
                    "1234",
                    "5678",
                ],
                "entityType": "product",
            },
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"indexToInclude":["products_us","products eu"],"entityIDs":["1234","5678"],"entityType":"product"}"""
        )

    async def test_run_task_(self):
        """
        runTask
        """
        _req = await self._client.run_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_run_task_v1_(self):
        """
        runTaskV1
        """
        _req = await self._client.run_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_search_authentications_(self):
        """
        searchAuthentications
        """
        _req = await self._client.search_authentications_with_http_info(
            authentication_search={
                "authenticationIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                ],
            },
        )

        assert _req.path == "/1/authentications/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"authenticationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}"""
        )

    async def test_search_destinations_(self):
        """
        searchDestinations
        """
        _req = await self._client.search_destinations_with_http_info(
            destination_search={
                "destinationIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                ],
            },
        )

        assert _req.path == "/1/destinations/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"destinationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}"""
        )

    async def test_search_sources_(self):
        """
        searchSources
        """
        _req = await self._client.search_sources_with_http_info(
            source_search={
                "sourceIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                ],
            },
        )

        assert _req.path == "/1/sources/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}"""
        )

    async def test_search_tasks_(self):
        """
        searchTasks
        """
        _req = await self._client.search_tasks_with_http_info(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )

        assert _req.path == "/2/tasks/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"taskIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}"""
        )

    async def test_search_tasks_v1_(self):
        """
        searchTasksV1
        """
        _req = await self._client.search_tasks_v1_with_http_info(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )

        assert _req.path == "/1/tasks/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"taskIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}"""
        )

    async def test_search_transformations_(self):
        """
        searchTransformations
        """
        _req = await self._client.search_transformations_with_http_info(
            transformation_search={
                "transformationIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )

        assert _req.path == "/1/transformations/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"transformationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}"""
        )

    async def test_trigger_docker_source_discover_(self):
        """
        triggerDockerSourceDiscover
        """
        _req = await self._client.trigger_docker_source_discover_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/discover"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    async def test_try_transformation_(self):
        """
        tryTransformation
        """
        _req = await self._client.try_transformation_with_http_info(
            transformation_try={
                "code": "foo",
                "sampleRecord": {
                    "bar": "baz",
                },
            },
        )

        assert _req.path == "/1/transformations/try"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","sampleRecord":{"bar":"baz"}}"""
        )

    async def test_try_transformation_1(self):
        """
        with authentications
        """
        _req = await self._client.try_transformation_with_http_info(
            transformation_try={
                "code": "foo",
                "sampleRecord": {
                    "bar": "baz",
                },
                "authentications": [
                    {
                        "type": "oauth",
                        "name": "authName",
                        "input": {
                            "url": "http://test.oauth",
                            "client_id": "myID",
                            "client_secret": "mySecret",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/transformations/try"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","sampleRecord":{"bar":"baz"},"authentications":[{"type":"oauth","name":"authName","input":{"url":"http://test.oauth","client_id":"myID","client_secret":"mySecret"}}]}"""
        )

    async def test_try_transformation_before_update_(self):
        """
        tryTransformationBeforeUpdate
        """
        _req = await self._client.try_transformation_before_update_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            transformation_try={
                "code": "foo",
                "sampleRecord": {
                    "bar": "baz",
                },
            },
        )

        assert (
            _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f/try"
        )
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","sampleRecord":{"bar":"baz"}}"""
        )

    async def test_try_transformation_before_update_1(self):
        """
        existing with authentications
        """
        _req = await self._client.try_transformation_before_update_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            transformation_try={
                "code": "foo",
                "sampleRecord": {
                    "bar": "baz",
                },
                "authentications": [
                    {
                        "type": "oauth",
                        "name": "authName",
                        "input": {
                            "url": "http://test.oauth",
                            "client_id": "myID",
                            "client_secret": "mySecret",
                        },
                    },
                ],
            },
        )

        assert (
            _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f/try"
        )
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","sampleRecord":{"bar":"baz"},"authentications":[{"type":"oauth","name":"authName","input":{"url":"http://test.oauth","client_id":"myID","client_secret":"mySecret"}}]}"""
        )

    async def test_update_authentication_(self):
        """
        updateAuthentication
        """
        _req = await self._client.update_authentication_with_http_info(
            authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            authentication_update={
                "name": "newName",
            },
        )

        assert _req.path == "/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"name":"newName"}""")

    async def test_update_destination_(self):
        """
        updateDestination
        """
        _req = await self._client.update_destination_with_http_info(
            destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            destination_update={
                "name": "newName",
            },
        )

        assert _req.path == "/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"name":"newName"}""")

    async def test_update_source_(self):
        """
        updateSource
        """
        _req = await self._client.update_source_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            source_update={
                "name": "newName",
            },
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"name":"newName"}""")

    async def test_update_task_(self):
        """
        updateTask
        """
        _req = await self._client.update_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            task_update={
                "enabled": False,
                "cron": "* * * * *",
            },
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"enabled":false,"cron":"* * * * *"}""")

    async def test_update_task_v1_(self):
        """
        updateTaskV1
        """
        _req = await self._client.update_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            task_update={
                "enabled": False,
            },
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"enabled":false}""")

    async def test_update_transformation_(self):
        """
        updateTransformation
        """
        _req = await self._client.update_transformation_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            transformation_create={
                "code": "foo",
                "name": "bar",
                "description": "baz",
            },
        )

        assert _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","name":"bar","description":"baz"}"""
        )

    async def test_validate_source_(self):
        """
        validateSource
        """
        _req = await self._client.validate_source_with_http_info(
            source_create={
                "type": "commercetools",
                "name": "sourceName",
                "input": {
                    "storeKeys": [
                        "myStore",
                    ],
                    "locales": [
                        "de",
                    ],
                    "url": "http://commercetools.com",
                    "projectKey": "keyID",
                },
                "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            },
        )

        assert _req.path == "/1/sources/validate"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"commercetools","name":"sourceName","input":{"storeKeys":["myStore"],"locales":["de"],"url":"http://commercetools.com","projectKey":"keyID"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}"""
        )

    async def test_validate_source_before_update_(self):
        """
        validateSourceBeforeUpdate
        """
        _req = await self._client.validate_source_before_update_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            source_update={
                "name": "newName",
            },
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/validate"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"name":"newName"}""")


class TestIngestionClientSync:
    _config = IngestionConfig("test_app_id", "test_api_key", "us")
    _client = IngestionClientSync.create_with_config(
        config=_config, transporter=EchoTransporterSync(_config)
    )

    def test_create_authentication_(self):
        """
        createAuthenticationOAuth
        """
        _req = self._client.create_authentication_with_http_info(
            authentication_create={
                "type": "oauth",
                "name": "authName",
                "input": {
                    "url": "http://test.oauth",
                    "client_id": "myID",
                    "client_secret": "mySecret",
                },
            },
        )

        assert _req.path == "/1/authentications"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"oauth","name":"authName","input":{"url":"http://test.oauth","client_id":"myID","client_secret":"mySecret"}}"""
        )

    def test_create_authentication_1(self):
        """
        createAuthenticationAlgolia
        """
        _req = self._client.create_authentication_with_http_info(
            authentication_create={
                "type": "algolia",
                "name": "authName",
                "input": {
                    "appID": "myappID",
                    "apiKey": "randomApiKey",
                },
            },
        )

        assert _req.path == "/1/authentications"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"algolia","name":"authName","input":{"appID":"myappID","apiKey":"randomApiKey"}}"""
        )

    def test_create_destination_(self):
        """
        createDestination
        """
        _req = self._client.create_destination_with_http_info(
            destination_create={
                "type": "search",
                "name": "destinationName",
                "input": {
                    "indexName": "full_name______",
                },
                "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            },
        )

        assert _req.path == "/1/destinations"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"search","name":"destinationName","input":{"indexName":"full_name______"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}"""
        )

    def test_create_destination_1(self):
        """
        with transformationIDs
        """
        _req = self._client.create_destination_with_http_info(
            destination_create={
                "type": "search",
                "name": "destinationName",
                "input": {
                    "indexName": "full_name______",
                },
                "transformationIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                ],
            },
        )

        assert _req.path == "/1/destinations"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"search","name":"destinationName","input":{"indexName":"full_name______"},"transformationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]}"""
        )

    def test_create_source_(self):
        """
        createSource
        """
        _req = self._client.create_source_with_http_info(
            source_create={
                "type": "commercetools",
                "name": "sourceName",
                "input": {
                    "storeKeys": [
                        "myStore",
                    ],
                    "locales": [
                        "de",
                    ],
                    "url": "http://commercetools.com",
                    "projectKey": "keyID",
                },
                "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            },
        )

        assert _req.path == "/1/sources"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"commercetools","name":"sourceName","input":{"storeKeys":["myStore"],"locales":["de"],"url":"http://commercetools.com","projectKey":"keyID"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}"""
        )

    def test_create_source_1(self):
        """
        push
        """
        _req = self._client.create_source_with_http_info(
            source_create={
                "type": "push",
                "name": "pushezpourentrer",
            },
        )

        assert _req.path == "/1/sources"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"push","name":"pushezpourentrer"}"""
        )

    def test_create_task_(self):
        """
        task without cron
        """
        _req = self._client.create_task_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "action": "replace",
            },
        )

        assert _req.path == "/2/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","action":"replace"}"""
        )

    def test_create_task_1(self):
        """
        task with cron
        """
        _req = self._client.create_task_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "cron": "* * * * *",
                "action": "replace",
            },
        )

        assert _req.path == "/2/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","cron":"* * * * *","action":"replace"}"""
        )

    def test_create_task_2(self):
        """
        task shopify
        """
        _req = self._client.create_task_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "cron": "* * * * *",
                "action": "replace",
                "input": {
                    "streams": [
                        {
                            "name": "foo",
                            "syncMode": "incremental",
                        },
                    ],
                },
            },
        )

        assert _req.path == "/2/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","cron":"* * * * *","action":"replace","input":{"streams":[{"name":"foo","syncMode":"incremental"}]}}"""
        )

    def test_create_task_v1_(self):
        """
        createTaskOnDemand
        """
        _req = self._client.create_task_v1_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "trigger": {
                    "type": "onDemand",
                },
                "action": "replace",
            },
        )

        assert _req.path == "/1/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"onDemand"},"action":"replace"}"""
        )

    def test_create_task_v1_1(self):
        """
        createTaskSchedule
        """
        _req = self._client.create_task_v1_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "trigger": {
                    "type": "schedule",
                    "cron": "* * * * *",
                },
                "action": "replace",
            },
        )

        assert _req.path == "/1/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"schedule","cron":"* * * * *"},"action":"replace"}"""
        )

    def test_create_task_v1_2(self):
        """
        createTaskSubscription
        """
        _req = self._client.create_task_v1_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "trigger": {
                    "type": "onDemand",
                },
                "action": "replace",
            },
        )

        assert _req.path == "/1/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"onDemand"},"action":"replace"}"""
        )

    def test_create_task_v1_3(self):
        """
        task shopify
        """
        _req = self._client.create_task_v1_with_http_info(
            task_create={
                "sourceID": "search",
                "destinationID": "destinationName",
                "trigger": {
                    "type": "onDemand",
                },
                "action": "replace",
                "input": {
                    "streams": [
                        {
                            "name": "foo",
                            "syncMode": "incremental",
                        },
                    ],
                },
            },
        )

        assert _req.path == "/1/tasks"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"onDemand"},"action":"replace","input":{"streams":[{"name":"foo","syncMode":"incremental"}]}}"""
        )

    def test_create_transformation_(self):
        """
        createTransformation
        """
        _req = self._client.create_transformation_with_http_info(
            transformation_create={
                "code": "foo",
                "name": "bar",
                "description": "baz",
            },
        )

        assert _req.path == "/1/transformations"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","name":"bar","description":"baz"}"""
        )

    def test_custom_delete_(self):
        """
        allow del method for a custom path with minimal parameters
        """
        _req = self._client.custom_delete_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_custom_delete_1(self):
        """
        allow del method for a custom path with all parameters
        """
        _req = self._client.custom_delete_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_custom_get_(self):
        """
        allow get method for a custom path with minimal parameters
        """
        _req = self._client.custom_get_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_custom_get_1(self):
        """
        allow get method for a custom path with all parameters
        """
        _req = self._client.custom_get_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters with space",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters%20with%20space"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_custom_get_2(self):
        """
        requestOptions should be escaped too
        """
        _req = self._client.custom_get_with_http_info(
            path="test/all",
            parameters={
                "query": "to be overriden",
            },
            request_options={
                "headers": loads("""{"x-header-1":"spaces are left alone"}"""),
                "query_parameters": loads(
                    """{"query":"parameters with space","and an array":["array","with spaces"]}"""
                ),
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {
                "query": "parameters%20with%20space",
                "and%20an%20array": "array%2Cwith%20spaces",
            }.items()
        )
        assert _req.headers.items() >= {"x-header-1": "spaces are left alone"}.items()
        assert _req.data is None

    def test_custom_post_(self):
        """
        allow post method for a custom path with minimal parameters
        """
        _req = self._client.custom_post_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_custom_post_1(self):
        """
        allow post method for a custom path with all parameters
        """
        _req = self._client.custom_post_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
            body={
                "body": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"body":"parameters"}""")

    def test_custom_post_2(self):
        """
        requestOptions can override default query parameters
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"query":"myQueryParameter"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "myQueryParameter"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_3(self):
        """
        requestOptions merges query parameters with default ones
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"query2":"myQueryParameter"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "query2": "myQueryParameter"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_4(self):
        """
        requestOptions can override default headers
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "headers": loads("""{"x-algolia-api-key":"myApiKey"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {"x-algolia-api-key": "myApiKey"}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_5(self):
        """
        requestOptions merges headers with default ones
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "headers": loads("""{"x-algolia-api-key":"myApiKey"}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {"x-algolia-api-key": "myApiKey"}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_6(self):
        """
        requestOptions queryParameters accepts booleans
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"isItWorking":true}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "isItWorking": "true"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_7(self):
        """
        requestOptions queryParameters accepts integers
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":2}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_8(self):
        """
        requestOptions queryParameters accepts list of string
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":["b and c","d"]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "b%20and%20c%2Cd"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_9(self):
        """
        requestOptions queryParameters accepts list of booleans
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":[true,true,false]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "true%2Ctrue%2Cfalse"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_post_10(self):
        """
        requestOptions queryParameters accepts list of integers
        """
        _req = self._client.custom_post_with_http_info(
            path="test/requestOptions",
            parameters={
                "query": "parameters",
            },
            body={
                "facet": "filters",
            },
            request_options={
                "query_parameters": loads("""{"myParam":[1,2]}"""),
            },
        )

        assert _req.path == "/test/requestOptions"
        assert _req.verb == "POST"
        assert (
            _req.query_parameters.items()
            == {"query": "parameters", "myParam": "1%2C2"}.items()
        )
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"facet":"filters"}""")

    def test_custom_put_(self):
        """
        allow put method for a custom path with minimal parameters
        """
        _req = self._client.custom_put_with_http_info(
            path="test/minimal",
        )

        assert _req.path == "/test/minimal"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{}""")

    def test_custom_put_1(self):
        """
        allow put method for a custom path with all parameters
        """
        _req = self._client.custom_put_with_http_info(
            path="test/all",
            parameters={
                "query": "parameters",
            },
            body={
                "body": "parameters",
            },
        )

        assert _req.path == "/test/all"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {"query": "parameters"}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"body":"parameters"}""")

    def test_delete_authentication_(self):
        """
        deleteAuthentication
        """
        _req = self._client.delete_authentication_with_http_info(
            authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_destination_(self):
        """
        deleteDestination
        """
        _req = self._client.delete_destination_with_http_info(
            destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_source_(self):
        """
        deleteSource
        """
        _req = self._client.delete_source_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_task_(self):
        """
        deleteTask
        """
        _req = self._client.delete_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_task_v1_(self):
        """
        deleteTaskV1
        """
        _req = self._client.delete_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_delete_transformation_(self):
        """
        deleteTransformation
        """
        _req = self._client.delete_transformation_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "DELETE"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_disable_task_(self):
        """
        disableTask
        """
        _req = self._client.disable_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_disable_task_v1_(self):
        """
        disableTaskV1
        """
        _req = self._client.disable_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_enable_task_(self):
        """
        enableTask
        """
        _req = self._client.enable_task_with_http_info(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )

        assert _req.path == "/2/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_enable_task_v1_(self):
        """
        enableTaskV1
        """
        _req = self._client.enable_task_v1_with_http_info(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )

        assert _req.path == "/1/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_get_authentication_(self):
        """
        getAuthentication
        """
        _req = self._client.get_authentication_with_http_info(
            authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_destination_(self):
        """
        getDestination
        """
        _req = self._client.get_destination_with_http_info(
            destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_event_(self):
        """
        getEvent
        """
        _req = self._client.get_event_with_http_info(
            run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            event_id="6c02aeb1-775e-418e-870b-1faccd4b2c0c",
        )

        assert (
            _req.path
            == "/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events/6c02aeb1-775e-418e-870b-1faccd4b2c0c"
        )
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_run_(self):
        """
        getRun
        """
        _req = self._client.get_run_with_http_info(
            run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_source_(self):
        """
        getSource
        """
        _req = self._client.get_source_with_http_info(
            source_id="75eeb306-51d3-4e5e-a279-3c92bd8893ac",
        )

        assert _req.path == "/1/sources/75eeb306-51d3-4e5e-a279-3c92bd8893ac"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_task_(self):
        """
        getTask
        """
        _req = self._client.get_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_task_v1_(self):
        """
        getTaskV1
        """
        _req = self._client.get_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_get_transformation_(self):
        """
        getTransformation
        """
        _req = self._client.get_transformation_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_authentications_(self):
        """
        getAuthentications
        """
        _req = self._client.list_authentications_with_http_info()

        assert _req.path == "/1/authentications"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_authentications_1(self):
        """
        getAuthentications with query params
        """
        _req = self._client.list_authentications_with_http_info(
            items_per_page=2,
            page=1,
            type=[
                "basic",
                "algolia",
            ],
            platform=[
                "none",
            ],
            sort="createdAt",
            order="asc",
        )

        assert _req.path == "/1/authentications"
        assert _req.verb == "GET"
        assert (
            _req.query_parameters.items()
            == {
                "itemsPerPage": "2",
                "page": "1",
                "type": "basic%2Calgolia",
                "platform": "none",
                "sort": "createdAt",
                "order": "asc",
            }.items()
        )
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_destinations_(self):
        """
        getDestinations
        """
        _req = self._client.list_destinations_with_http_info()

        assert _req.path == "/1/destinations"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_events_(self):
        """
        getEvents
        """
        _req = self._client.list_events_with_http_info(
            run_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_runs_(self):
        """
        listRuns
        """
        _req = self._client.list_runs_with_http_info()

        assert _req.path == "/1/runs"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_sources_(self):
        """
        listSources
        """
        _req = self._client.list_sources_with_http_info()

        assert _req.path == "/1/sources"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_tasks_(self):
        """
        listTasks
        """
        _req = self._client.list_tasks_with_http_info()

        assert _req.path == "/2/tasks"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_tasks_v1_(self):
        """
        listTasksV1
        """
        _req = self._client.list_tasks_v1_with_http_info()

        assert _req.path == "/1/tasks"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_list_transformations_(self):
        """
        listTransformations
        """
        _req = self._client.list_transformations_with_http_info()

        assert _req.path == "/1/transformations"
        assert _req.verb == "GET"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert _req.data is None

    def test_push_task_(self):
        """
        pushTask
        """
        _req = self._client.push_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            push_task_payload={
                "action": "addObject",
                "records": [
                    {
                        "key": "bar",
                        "foo": "1",
                        "objectID": "o",
                    },
                    {
                        "key": "baz",
                        "foo": "2",
                        "objectID": "k",
                    },
                ],
            },
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/push"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"action":"addObject","records":[{"key":"bar","foo":"1","objectID":"o"},{"key":"baz","foo":"2","objectID":"k"}]}"""
        )

    def test_run_source_(self):
        """
        runSource
        """
        _req = self._client.run_source_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            run_source_payload={
                "indexToInclude": [
                    "products_us",
                    "products eu",
                ],
                "entityIDs": [
                    "1234",
                    "5678",
                ],
                "entityType": "product",
            },
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"indexToInclude":["products_us","products eu"],"entityIDs":["1234","5678"],"entityType":"product"}"""
        )

    def test_run_task_(self):
        """
        runTask
        """
        _req = self._client.run_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_run_task_v1_(self):
        """
        runTaskV1
        """
        _req = self._client.run_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_search_authentications_(self):
        """
        searchAuthentications
        """
        _req = self._client.search_authentications_with_http_info(
            authentication_search={
                "authenticationIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                ],
            },
        )

        assert _req.path == "/1/authentications/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"authenticationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}"""
        )

    def test_search_destinations_(self):
        """
        searchDestinations
        """
        _req = self._client.search_destinations_with_http_info(
            destination_search={
                "destinationIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                ],
            },
        )

        assert _req.path == "/1/destinations/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"destinationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}"""
        )

    def test_search_sources_(self):
        """
        searchSources
        """
        _req = self._client.search_sources_with_http_info(
            source_search={
                "sourceIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                ],
            },
        )

        assert _req.path == "/1/sources/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"sourceIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}"""
        )

    def test_search_tasks_(self):
        """
        searchTasks
        """
        _req = self._client.search_tasks_with_http_info(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )

        assert _req.path == "/2/tasks/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"taskIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}"""
        )

    def test_search_tasks_v1_(self):
        """
        searchTasksV1
        """
        _req = self._client.search_tasks_v1_with_http_info(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )

        assert _req.path == "/1/tasks/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"taskIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}"""
        )

    def test_search_transformations_(self):
        """
        searchTransformations
        """
        _req = self._client.search_transformations_with_http_info(
            transformation_search={
                "transformationIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )

        assert _req.path == "/1/transformations/search"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"transformationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}"""
        )

    def test_trigger_docker_source_discover_(self):
        """
        triggerDockerSourceDiscover
        """
        _req = self._client.trigger_docker_source_discover_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/discover"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()

    def test_try_transformation_(self):
        """
        tryTransformation
        """
        _req = self._client.try_transformation_with_http_info(
            transformation_try={
                "code": "foo",
                "sampleRecord": {
                    "bar": "baz",
                },
            },
        )

        assert _req.path == "/1/transformations/try"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","sampleRecord":{"bar":"baz"}}"""
        )

    def test_try_transformation_1(self):
        """
        with authentications
        """
        _req = self._client.try_transformation_with_http_info(
            transformation_try={
                "code": "foo",
                "sampleRecord": {
                    "bar": "baz",
                },
                "authentications": [
                    {
                        "type": "oauth",
                        "name": "authName",
                        "input": {
                            "url": "http://test.oauth",
                            "client_id": "myID",
                            "client_secret": "mySecret",
                        },
                    },
                ],
            },
        )

        assert _req.path == "/1/transformations/try"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","sampleRecord":{"bar":"baz"},"authentications":[{"type":"oauth","name":"authName","input":{"url":"http://test.oauth","client_id":"myID","client_secret":"mySecret"}}]}"""
        )

    def test_try_transformation_before_update_(self):
        """
        tryTransformationBeforeUpdate
        """
        _req = self._client.try_transformation_before_update_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            transformation_try={
                "code": "foo",
                "sampleRecord": {
                    "bar": "baz",
                },
            },
        )

        assert (
            _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f/try"
        )
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","sampleRecord":{"bar":"baz"}}"""
        )

    def test_try_transformation_before_update_1(self):
        """
        existing with authentications
        """
        _req = self._client.try_transformation_before_update_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            transformation_try={
                "code": "foo",
                "sampleRecord": {
                    "bar": "baz",
                },
                "authentications": [
                    {
                        "type": "oauth",
                        "name": "authName",
                        "input": {
                            "url": "http://test.oauth",
                            "client_id": "myID",
                            "client_secret": "mySecret",
                        },
                    },
                ],
            },
        )

        assert (
            _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f/try"
        )
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","sampleRecord":{"bar":"baz"},"authentications":[{"type":"oauth","name":"authName","input":{"url":"http://test.oauth","client_id":"myID","client_secret":"mySecret"}}]}"""
        )

    def test_update_authentication_(self):
        """
        updateAuthentication
        """
        _req = self._client.update_authentication_with_http_info(
            authentication_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            authentication_update={
                "name": "newName",
            },
        )

        assert _req.path == "/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"name":"newName"}""")

    def test_update_destination_(self):
        """
        updateDestination
        """
        _req = self._client.update_destination_with_http_info(
            destination_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            destination_update={
                "name": "newName",
            },
        )

        assert _req.path == "/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"name":"newName"}""")

    def test_update_source_(self):
        """
        updateSource
        """
        _req = self._client.update_source_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            source_update={
                "name": "newName",
            },
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"name":"newName"}""")

    def test_update_task_(self):
        """
        updateTask
        """
        _req = self._client.update_task_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            task_update={
                "enabled": False,
                "cron": "* * * * *",
            },
        )

        assert _req.path == "/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"enabled":false,"cron":"* * * * *"}""")

    def test_update_task_v1_(self):
        """
        updateTaskV1
        """
        _req = self._client.update_task_v1_with_http_info(
            task_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            task_update={
                "enabled": False,
            },
        )

        assert _req.path == "/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PATCH"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"enabled":false}""")

    def test_update_transformation_(self):
        """
        updateTransformation
        """
        _req = self._client.update_transformation_with_http_info(
            transformation_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            transformation_create={
                "code": "foo",
                "name": "bar",
                "description": "baz",
            },
        )

        assert _req.path == "/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f"
        assert _req.verb == "PUT"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"code":"foo","name":"bar","description":"baz"}"""
        )

    def test_validate_source_(self):
        """
        validateSource
        """
        _req = self._client.validate_source_with_http_info(
            source_create={
                "type": "commercetools",
                "name": "sourceName",
                "input": {
                    "storeKeys": [
                        "myStore",
                    ],
                    "locales": [
                        "de",
                    ],
                    "url": "http://commercetools.com",
                    "projectKey": "keyID",
                },
                "authenticationID": "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            },
        )

        assert _req.path == "/1/sources/validate"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads(
            """{"type":"commercetools","name":"sourceName","input":{"storeKeys":["myStore"],"locales":["de"],"url":"http://commercetools.com","projectKey":"keyID"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}"""
        )

    def test_validate_source_before_update_(self):
        """
        validateSourceBeforeUpdate
        """
        _req = self._client.validate_source_before_update_with_http_info(
            source_id="6c02aeb1-775e-418e-870b-1faccd4b2c0f",
            source_update={
                "name": "newName",
            },
        )

        assert _req.path == "/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/validate"
        assert _req.verb == "POST"
        assert _req.query_parameters.items() == {}.items()
        assert _req.headers.items() >= {}.items()
        assert loads(_req.data) == loads("""{"name":"newName"}""")
