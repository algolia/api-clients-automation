# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
from os import environ
from json import loads
from algoliasearch.composition.client import CompositionClient
from algoliasearch.composition.client import CompositionClientSync
from ..helpers import Helpers
from dotenv import load_dotenv

load_dotenv("../../.env")


class TestCompositionClientE2E:
    _helpers = Helpers()
    _e2e_app_id = environ.get("METIS_APPLICATION_ID")
    if _e2e_app_id is None:
        raise Exception(
            "please provide an `METIS_APPLICATION_ID` env var for e2e tests"
        )

    _e2e_api_key = environ.get("METIS_API_KEY")
    if _e2e_api_key is None:
        raise Exception("please provide an `METIS_API_KEY` env var for e2e tests")

    async def test_list_compositions_1(self):
        """
        listCompositions
        """
        raw_resp = await CompositionClient(
            self._e2e_app_id, self._e2e_api_key
        ).list_compositions_with_http_info()
        assert raw_resp.status_code == 200

        resp = await CompositionClient(
            self._e2e_app_id, self._e2e_api_key
        ).list_compositions()
        _expected_body = loads(
            """{"items":[{"objectID":"id1","name":"my first composition","description":"the first ever composition from the client","behavior":{"injection":{"main":{"source":{"search":{"index":"cts_e2e_small"}}}}}}],"nbPages":1}"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )


class TestCompositionClientSyncE2E:
    _helpers = Helpers()
    _e2e_app_id = environ.get("METIS_APPLICATION_ID")
    if _e2e_app_id is None:
        raise Exception(
            "please provide an `METIS_APPLICATION_ID` env var for e2e tests"
        )

    _e2e_api_key = environ.get("METIS_API_KEY")
    if _e2e_api_key is None:
        raise Exception("please provide an `METIS_API_KEY` env var for e2e tests")

    def test_list_compositions_1(self):
        """
        listCompositions
        """
        raw_resp = CompositionClientSync(
            self._e2e_app_id, self._e2e_api_key
        ).list_compositions_with_http_info()
        assert raw_resp.status_code == 200

        resp = CompositionClientSync(
            self._e2e_app_id, self._e2e_api_key
        ).list_compositions()
        _expected_body = loads(
            """{"items":[{"objectID":"id1","name":"my first composition","description":"the first ever composition from the client","behavior":{"injection":{"main":{"source":{"search":{"index":"cts_e2e_small"}}}}}}],"nbPages":1}"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )
