# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
from os import environ
from json import loads
from algoliasearch.ingestion.client import IngestionClient
from algoliasearch.ingestion.client import IngestionClientSync
from ..helpers import Helpers
from dotenv import load_dotenv

load_dotenv("../../.env")


class TestIngestionClientE2E:
    _helpers = Helpers()
    _e2e_app_id = environ.get("ALGOLIA_APPLICATION_ID")
    if _e2e_app_id is None:
        raise Exception(
            "please provide an `ALGOLIA_APPLICATION_ID` env var for e2e tests"
        )

    _e2e_api_key = environ.get("ALGOLIA_ADMIN_KEY")
    if _e2e_api_key is None:
        raise Exception("please provide an `ALGOLIA_ADMIN_KEY` env var for e2e tests")

    async def test_enable_task_(self):
        """
        enableTask
        """
        raw_resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).enable_task_with_http_info(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )
        assert raw_resp.status_code == 200

        resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).enable_task(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )
        _expected_body = loads("""{"taskID":"76ab4c2a-ce17-496f-b7a6-506dc59ee498"}""")
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    async def test_enable_task_v1_(self):
        """
        enableTaskV1
        """
        raw_resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).enable_task_v1_with_http_info(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )
        assert raw_resp.status_code == 200

        resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).enable_task_v1(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )
        _expected_body = loads("""{"taskID":"76ab4c2a-ce17-496f-b7a6-506dc59ee498"}""")
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    async def test_get_source_(self):
        """
        getSource
        """
        raw_resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).get_source_with_http_info(
            source_id="75eeb306-51d3-4e5e-a279-3c92bd8893ac",
        )
        assert raw_resp.status_code == 200

        resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).get_source(
            source_id="75eeb306-51d3-4e5e-a279-3c92bd8893ac",
        )
        _expected_body = loads(
            """{"sourceID":"75eeb306-51d3-4e5e-a279-3c92bd8893ac","name":"cts_e2e_browse","type":"json","input":{"url":"https://raw.githubusercontent.com/prust/wikipedia-movie-data/master/movies.json"}}"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    async def test_list_authentications_1(self):
        """
        getAuthentications with query params
        """
        raw_resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).list_authentications_with_http_info(
            items_per_page=2,
            page=1,
            type=[
                "basic",
                "algolia",
            ],
            platform=[
                "none",
            ],
            sort="createdAt",
            order="asc",
        )
        assert raw_resp.status_code == 200

        resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).list_authentications(
            items_per_page=2,
            page=1,
            type=[
                "basic",
                "algolia",
            ],
            platform=[
                "none",
            ],
            sort="createdAt",
            order="asc",
        )
        _expected_body = loads(
            """{"pagination":{"page":1,"itemsPerPage":2},"authentications":[{"authenticationID":"474f050f-a771-464c-a016-323538029f5f","type":"algolia","name":"algolia-auth-1677060483885","input":{},"createdAt":"2023-02-22T10:08:04Z","updatedAt":"2023-10-25T08:41:56Z"},{}]}"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    async def test_search_tasks_(self):
        """
        searchTasks
        """
        raw_resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).search_tasks_with_http_info(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )
        assert raw_resp.status_code == 200

        resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).search_tasks(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )
        _expected_body = loads(
            """[{"taskID":"76ab4c2a-ce17-496f-b7a6-506dc59ee498","sourceID":"75eeb306-51d3-4e5e-a279-3c92bd8893ac","destinationID":"506d79fa-e29d-4bcf-907c-6b6a41172153","enabled":true,"failureThreshold":0,"action":"replace","createdAt":"2024-01-08T16:47:41Z"}]"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    async def test_search_tasks_v1_(self):
        """
        searchTasksV1
        """
        raw_resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).search_tasks_v1_with_http_info(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )
        assert raw_resp.status_code == 200

        resp = await IngestionClient(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).search_tasks_v1(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )
        _expected_body = loads(
            """[{"taskID":"76ab4c2a-ce17-496f-b7a6-506dc59ee498","sourceID":"75eeb306-51d3-4e5e-a279-3c92bd8893ac","destinationID":"506d79fa-e29d-4bcf-907c-6b6a41172153","trigger":{"type":"onDemand"},"enabled":true,"failureThreshold":0,"action":"replace","createdAt":"2024-01-08T16:47:41Z"}]"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )


class TestIngestionClientSyncE2E:
    _helpers = Helpers()
    _e2e_app_id = environ.get("ALGOLIA_APPLICATION_ID")
    if _e2e_app_id is None:
        raise Exception(
            "please provide an `ALGOLIA_APPLICATION_ID` env var for e2e tests"
        )

    _e2e_api_key = environ.get("ALGOLIA_ADMIN_KEY")
    if _e2e_api_key is None:
        raise Exception("please provide an `ALGOLIA_ADMIN_KEY` env var for e2e tests")

    def test_enable_task_(self):
        """
        enableTask
        """
        raw_resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).enable_task_with_http_info(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )
        assert raw_resp.status_code == 200

        resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).enable_task(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )
        _expected_body = loads("""{"taskID":"76ab4c2a-ce17-496f-b7a6-506dc59ee498"}""")
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    def test_enable_task_v1_(self):
        """
        enableTaskV1
        """
        raw_resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).enable_task_v1_with_http_info(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )
        assert raw_resp.status_code == 200

        resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).enable_task_v1(
            task_id="76ab4c2a-ce17-496f-b7a6-506dc59ee498",
        )
        _expected_body = loads("""{"taskID":"76ab4c2a-ce17-496f-b7a6-506dc59ee498"}""")
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    def test_get_source_(self):
        """
        getSource
        """
        raw_resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).get_source_with_http_info(
            source_id="75eeb306-51d3-4e5e-a279-3c92bd8893ac",
        )
        assert raw_resp.status_code == 200

        resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).get_source(
            source_id="75eeb306-51d3-4e5e-a279-3c92bd8893ac",
        )
        _expected_body = loads(
            """{"sourceID":"75eeb306-51d3-4e5e-a279-3c92bd8893ac","name":"cts_e2e_browse","type":"json","input":{"url":"https://raw.githubusercontent.com/prust/wikipedia-movie-data/master/movies.json"}}"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    def test_list_authentications_1(self):
        """
        getAuthentications with query params
        """
        raw_resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).list_authentications_with_http_info(
            items_per_page=2,
            page=1,
            type=[
                "basic",
                "algolia",
            ],
            platform=[
                "none",
            ],
            sort="createdAt",
            order="asc",
        )
        assert raw_resp.status_code == 200

        resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).list_authentications(
            items_per_page=2,
            page=1,
            type=[
                "basic",
                "algolia",
            ],
            platform=[
                "none",
            ],
            sort="createdAt",
            order="asc",
        )
        _expected_body = loads(
            """{"pagination":{"page":1,"itemsPerPage":2},"authentications":[{"authenticationID":"474f050f-a771-464c-a016-323538029f5f","type":"algolia","name":"algolia-auth-1677060483885","input":{},"createdAt":"2023-02-22T10:08:04Z","updatedAt":"2023-10-25T08:41:56Z"},{}]}"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    def test_search_tasks_(self):
        """
        searchTasks
        """
        raw_resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).search_tasks_with_http_info(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )
        assert raw_resp.status_code == 200

        resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).search_tasks(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )
        _expected_body = loads(
            """[{"taskID":"76ab4c2a-ce17-496f-b7a6-506dc59ee498","sourceID":"75eeb306-51d3-4e5e-a279-3c92bd8893ac","destinationID":"506d79fa-e29d-4bcf-907c-6b6a41172153","enabled":true,"failureThreshold":0,"action":"replace","createdAt":"2024-01-08T16:47:41Z"}]"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )

    def test_search_tasks_v1_(self):
        """
        searchTasksV1
        """
        raw_resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).search_tasks_v1_with_http_info(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )
        assert raw_resp.status_code == 200

        resp = IngestionClientSync(
            self._e2e_app_id, self._e2e_api_key, "us"
        ).search_tasks_v1(
            task_search={
                "taskIDs": [
                    "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
                    "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
                    "76ab4c2a-ce17-496f-b7a6-506dc59ee498",
                ],
            },
        )
        _expected_body = loads(
            """[{"taskID":"76ab4c2a-ce17-496f-b7a6-506dc59ee498","sourceID":"75eeb306-51d3-4e5e-a279-3c92bd8893ac","destinationID":"506d79fa-e29d-4bcf-907c-6b6a41172153","trigger":{"type":"onDemand"},"enabled":true,"failureThreshold":0,"action":"replace","createdAt":"2024-01-08T16:47:41Z"}]"""
        )
        assert (
            self._helpers.union(_expected_body, self._helpers.unwrap(resp))
            == _expected_body
        )
