// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package algoliasearch.e2e

import algoliasearch.api.QuerySuggestionsClient
import algoliasearch.config.*
import algoliasearch.querysuggestions.*
import org.json4s.*
import org.json4s.native.JsonParser.*
import org.scalatest.funsuite.AnyFunSuite
import io.github.cdimascio.dotenv.Dotenv
import org.json4s.native.Serialization
import org.json4s.native.Serialization.write

import java.util.concurrent.TimeUnit
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContextExecutor}

class QuerySuggestionsTest extends AnyFunSuite {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = JsonSupport.format

  def testClient(): QuerySuggestionsClient = {
    val region = "us"
    if (System.getenv("CI") == "true") {
      QuerySuggestionsClient(
        appId = System.getenv("ALGOLIA_APPLICATION_ID"),
        apiKey = System.getenv("ALGOLIA_ADMIN_KEY"),
        region = region
      )
    } else {
      val dotenv = Dotenv.configure.directory("../../").load
      QuerySuggestionsClient(
        appId = dotenv.get("ALGOLIA_APPLICATION_ID"),
        apiKey = dotenv.get("ALGOLIA_ADMIN_KEY"),
        region = region
      )
    }
  }

  test("Retrieve QS config e2e") {
    val client = testClient()
    val future = client.getConfig(
      indexName = "cts_e2e_browse_query_suggestions"
    )

    val response = Await.result(future, Duration.Inf)
    val expected = parse(
      """{"appID":"T8JK9S7I7X","allowSpecialCharacters":true,"enablePersonalization":false,"exclude":["^cocaines$"],"indexName":"cts_e2e_browse_query_suggestions","languages":[],"sourceIndices":[{"facets":[{"amount":1,"attribute":"title"}],"generate":[["year"]],"indexName":"cts_e2e_browse","minHits":5,"minLetters":4,"replicas":false}]}"""
    )
    val extracted = Extraction.decompose(response)
    val diffRes = expected.diff(extracted)
    if (diffRes.deleted != JNothing) {
      println(s"This was expected and not found in the deserialized response: ${write(diffRes.deleted)}")
    }
    if (diffRes.changed != JNothing) {
      println(
        s"The expectation was different than what was found in the deserialized response: ${write(diffRes.changed)}"
      )
    }
    if (diffRes.deleted != JNothing || diffRes.changed != JNothing) {
      fail("there is a difference between received and expected")
    }
  }

}
