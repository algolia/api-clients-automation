// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package algoliasearch.benchmark

import algoliasearch.api.SearchClient
import algoliasearch.config.*
import algoliasearch.{EchoInterceptor, assertError}
import algoliasearch.search.*
import algoliasearch.exception.*
import algoliasearch.extension.SearchClientExtensions
import org.json4s.*
import org.json4s.native.JsonParser.*
import org.json4s.native.Serialization
import org.json4s.native.Serialization.write
import org.scalatest.funsuite.AnyFunSuite

import java.util.concurrent.TimeUnit
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContextExecutor}

class SearchTest extends AnyFunSuite {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = JsonSupport.format

  test("benchmark the search method") {

    val client = SearchClient(
      appId = "test-app-id",
      apiKey = "test-api-key",
      clientOptions = ClientOptions
        .builder()
        .withHosts(
          List(
            Host(
              if (System.getenv("CI") == "true") "localhost" else "host.docker.internal",
              Set(CallType.Read, CallType.Write),
              "http",
              Option(6682)
            )
          )
        )
        .build()
    )

    for (i <- 1 to 2000) {
      var res = Await.result(
        client.search(
          searchMethodParams = SearchMethodParams(
            requests = Seq(
              SearchForHits(
                indexName = "cts_e2e_benchmark_search_scala",
                query = Some("iphone 15 pro max 512gb"),
                hitsPerPage = Some(50)
              )
            )
          )
        ),
        Duration.Inf
      )
    }
  }

}
