// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package algoliasearch.requests

import algoliasearch.EchoInterceptor
import algoliasearch.api.CompositionClient
import algoliasearch.config.*
import algoliasearch.composition.*
import org.json4s.*
import org.json4s.native.JsonParser.*
import org.scalatest.funsuite.AnyFunSuite

import java.util.concurrent.TimeUnit
import scala.concurrent.duration.Duration
import scala.concurrent.{Await, ExecutionContextExecutor}

class CompositionTest extends AnyFunSuite {
  implicit val ec: ExecutionContextExecutor = scala.concurrent.ExecutionContext.global
  implicit val formats: Formats = org.json4s.DefaultFormats

  def testClient(): (CompositionClient, EchoInterceptor) = {
    val echo = EchoInterceptor()
    (
      CompositionClient(
        appId = "appId",
        apiKey = "apiKey",
        clientOptions = ClientOptions
          .builder()
          .withRequesterConfig(requester => requester.withInterceptor(echo))
          .build()
      ),
      echo
    )
  }

  test("search") {
    val (client, echo) = testClient()
    val future = client.search(
      compositionID = "foo",
      requestBody = RequestBody(
        params = Some(
          Params(
            query = Some("batman")
          )
        )
      )
    )

    Await.ready(future, Duration.Inf)
    val res = echo.lastResponse.get

    assert(res.path == "/1/compositions/foo/run")
    assert(res.method == "POST")
    val expectedBody = parse("""{"params":{"query":"batman"}}""")
    val actualBody = parse(res.body.get)
    assert(actualBody == expectedBody)
  }

  test("searchForFacetValues") {
    val (client, echo) = testClient()
    val future = client.searchForFacetValues(
      compositionID = "foo",
      facetName = "brand",
      searchForFacetValuesRequest = Some(
        SearchForFacetValuesRequest(
          params = Some(
            SearchForFacetValuesParams(
              maxFacetHits = Some(10)
            )
          )
        )
      )
    )

    Await.ready(future, Duration.Inf)
    val res = echo.lastResponse.get

    assert(res.path == "/1/compositions/foo/facets/brand/query")
    assert(res.method == "POST")
    val expectedBody = parse("""{"params":{"maxFacetHits":10}}""")
    val actualBody = parse(res.body.get)
    assert(actualBody == expectedBody)
  }

}
