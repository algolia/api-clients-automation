<?php

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

namespace Algolia\AlgoliaSearch\Test\Request;

use Algolia\AlgoliaSearch\Api\SearchClient;
use Algolia\AlgoliaSearch\Configuration\SearchConfig;
use Algolia\AlgoliaSearch\Http\HttpClientInterface;
use Algolia\AlgoliaSearch\Http\Psr7\Response;
use Algolia\AlgoliaSearch\RetryStrategy\ApiWrapper;
use Algolia\AlgoliaSearch\RetryStrategy\ClusterHosts;
use GuzzleHttp\Psr7\Query;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\TestDox;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

/**
 * @internal
 */
#[CoversClass(SearchClient::class)]
class SearchTest extends TestCase implements HttpClientInterface
{
    private $recordedRequests = [];

    public function sendRequest(RequestInterface $request, $timeout, $connectTimeout): Response
    {
        $this->recordedRequests[] = $request;

        return new Response(200, [], '{}');
    }

    #[TestDox('addApiKey')]
    public function testAddApiKey(): void
    {
        $client = $this->getClient();
        $client->addApiKey(
            ['acl' => [
                'search',

                'addObject',
            ],
                'description' => 'my new api key',
                'validity' => 300,
                'maxQueriesPerIPPerHour' => 100,
                'maxHitsPerQuery' => 20,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/keys',
                'method' => 'POST',
                'body' => json_decode('{"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}'),
            ],
        ]);
    }

    #[TestDox('addOrUpdateObject')]
    public function testAddOrUpdateObject(): void
    {
        $client = $this->getClient();
        $client->addOrUpdateObject(
            'indexName',
            'uniqueID',
            ['key' => 'value',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/uniqueID',
                'method' => 'PUT',
                'body' => json_decode('{"key":"value"}'),
            ],
        ]);
    }

    #[TestDox('appendSource')]
    public function testAppendSource(): void
    {
        $client = $this->getClient();
        $client->appendSource(
            ['source' => 'theSource',
                'description' => 'theDescription',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/security/sources/append',
                'method' => 'POST',
                'body' => json_decode('{"source":"theSource","description":"theDescription"}'),
            ],
        ]);
    }

    #[TestDox('simple')]
    public function testAssignUserId(): void
    {
        $client = $this->getClient();
        $client->assignUserId(
            'user42',
            ['cluster' => 'd4242-eu',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping',
                'method' => 'POST',
                'body' => json_decode('{"cluster":"d4242-eu"}'),
                'headers' => json_decode('{"x-algolia-user-id":"user42"}', true),
            ],
        ]);
    }

    #[TestDox('it should not encode the userID')]
    public function testAssignUserId1(): void
    {
        $client = $this->getClient();
        $client->assignUserId(
            'user id with spaces',
            ['cluster' => 'cluster with spaces',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping',
                'method' => 'POST',
                'body' => json_decode('{"cluster":"cluster with spaces"}'),
                'headers' => json_decode('{"x-algolia-user-id":"user id with spaces"}', true),
            ],
        ]);
    }

    #[TestDox('addObject')]
    public function testBatch(): void
    {
        $client = $this->getClient();
        $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'addObject',
                    'body' => ['key' => 'bar',
                        'foo' => '1',
                    ],
                ],

                ['action' => 'addObject',
                    'body' => ['key' => 'baz',
                        'foo' => '2',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"addObject","body":{"key":"bar","foo":"1"}},{"action":"addObject","body":{"key":"baz","foo":"2"}}]}'),
            ],
        ]);
    }

    #[TestDox('clear')]
    public function testBatch1(): void
    {
        $client = $this->getClient();
        $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'clear',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"clear","body":{"key":"value"}}]}'),
            ],
        ]);
    }

    #[TestDox('delete')]
    public function testBatch2(): void
    {
        $client = $this->getClient();
        $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'delete',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"delete","body":{"key":"value"}}]}'),
            ],
        ]);
    }

    #[TestDox('deleteObject')]
    public function testBatch3(): void
    {
        $client = $this->getClient();
        $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'deleteObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"deleteObject","body":{"key":"value"}}]}'),
            ],
        ]);
    }

    #[TestDox('partialUpdateObject')]
    public function testBatch4(): void
    {
        $client = $this->getClient();
        $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'partialUpdateObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"partialUpdateObject","body":{"key":"value"}}]}'),
            ],
        ]);
    }

    #[TestDox('partialUpdateObjectNoCreate')]
    public function testBatch5(): void
    {
        $client = $this->getClient();
        $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'partialUpdateObjectNoCreate',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"partialUpdateObjectNoCreate","body":{"key":"value"}}]}'),
            ],
        ]);
    }

    #[TestDox('updateObject')]
    public function testBatch6(): void
    {
        $client = $this->getClient();
        $client->batch(
            '<YOUR_INDEX_NAME>',
            ['requests' => [
                ['action' => 'updateObject',
                    'body' => ['key' => 'value',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"updateObject","body":{"key":"value"}}]}'),
            ],
        ]);
    }

    #[TestDox('batchAssignUserIds')]
    public function testBatchAssignUserIds(): void
    {
        $client = $this->getClient();
        $client->batchAssignUserIds(
            'userID',
            ['cluster' => 'theCluster',
                'users' => [
                    'user1',

                    'user2',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping/batch',
                'method' => 'POST',
                'body' => json_decode('{"cluster":"theCluster","users":["user1","user2"]}'),
                'headers' => json_decode('{"x-algolia-user-id":"userID"}', true),
            ],
        ]);
    }

    #[TestDox('replace')]
    public function testBatchDictionaryEntries(): void
    {
        $client = $this->getClient();
        $client->batchDictionaryEntries(
            'plurals',
            ['clearExistingDictionaryEntries' => true,
                'requests' => [
                    ['action' => 'addEntry',
                        'body' => ['objectID' => '1',
                            'language' => 'en',
                            'word' => 'fancy',
                            'words' => [
                                'believe',

                                'algolia',
                            ],
                            'decomposition' => [
                                'trust',

                                'algolia',
                            ],
                            'state' => 'enabled',
                        ],
                    ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/plurals/batch',
                'method' => 'POST',
                'body' => json_decode('{"clearExistingDictionaryEntries":true,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}}]}'),
            ],
        ]);
    }

    #[TestDox('delete')]
    public function testBatchDictionaryEntries1(): void
    {
        $client = $this->getClient();
        $client->batchDictionaryEntries(
            'plurals',
            ['clearExistingDictionaryEntries' => true,
                'requests' => [
                    ['action' => 'deleteEntry',
                        'body' => ['objectID' => '1',
                        ],
                    ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/plurals/batch',
                'method' => 'POST',
                'body' => json_decode('{"clearExistingDictionaryEntries":true,"requests":[{"action":"deleteEntry","body":{"objectID":"1"}}]}'),
            ],
        ]);
    }

    #[TestDox('append')]
    public function testBatchDictionaryEntries2(): void
    {
        $client = $this->getClient();
        $client->batchDictionaryEntries(
            'stopwords',
            ['requests' => [
                ['action' => 'addEntry',
                    'body' => ['objectID' => '1',
                        'language' => 'en',
                        'additional' => 'try me',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/stopwords/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}'),
            ],
        ]);
    }

    #[TestDox('browse with minimal parameters')]
    public function testBrowse(): void
    {
        $client = $this->getClient();
        $client->browse(
            'cts_e2e_browse',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/cts_e2e_browse/browse',
                'method' => 'POST',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('browse with search parameters')]
    public function testBrowse1(): void
    {
        $client = $this->getClient();
        $client->browse(
            'indexName',
            ['query' => 'myQuery',
                'facetFilters' => [
                    'tags:algolia',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/browse',
                'method' => 'POST',
                'body' => json_decode('{"query":"myQuery","facetFilters":["tags:algolia"]}'),
            ],
        ]);
    }

    #[TestDox('browse allow a cursor in parameters')]
    public function testBrowse2(): void
    {
        $client = $this->getClient();
        $client->browse(
            'indexName',
            ['cursor' => 'test',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/browse',
                'method' => 'POST',
                'body' => json_decode('{"cursor":"test"}'),
            ],
        ]);
    }

    #[TestDox('clearObjects')]
    public function testClearObjects(): void
    {
        $client = $this->getClient();
        $client->clearObjects(
            'theIndexName',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/clear',
                'method' => 'POST',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('clearRules')]
    public function testClearRules(): void
    {
        $client = $this->getClient();
        $client->clearRules(
            'indexName',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/clear',
                'method' => 'POST',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('clearSynonyms')]
    public function testClearSynonyms(): void
    {
        $client = $this->getClient();
        $client->clearSynonyms(
            'indexName',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/synonyms/clear',
                'method' => 'POST',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('allow del method for a custom path with minimal parameters')]
    public function testCustomDelete(): void
    {
        $client = $this->getClient();
        $client->customDelete(
            'test/minimal',
        );

        $this->assertRequests([
            [
                'path' => '/test/minimal',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('allow del method for a custom path with all parameters')]
    public function testCustomDelete1(): void
    {
        $client = $this->getClient();
        $client->customDelete(
            'test/all',
            ['query' => 'parameters',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'DELETE',
                'body' => null,
                'queryParameters' => json_decode('{"query":"parameters"}', true),
            ],
        ]);
    }

    #[TestDox('allow get method for a custom path with minimal parameters')]
    public function testCustomGet(): void
    {
        $client = $this->getClient();
        $client->customGet(
            'test/minimal',
        );

        $this->assertRequests([
            [
                'path' => '/test/minimal',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('allow get method for a custom path with all parameters')]
    public function testCustomGet1(): void
    {
        $client = $this->getClient();
        $client->customGet(
            'test/all',
            ['query' => 'parameters with space',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"query":"parameters%20with%20space"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions should be escaped too')]
    public function testCustomGet2(): void
    {
        $client = $this->getClient();
        $client->customGet(
            'test/all',
            ['query' => 'to be overriden',
            ],
            [
                'queryParameters' => [
                    'query' => 'parameters with space',
                    'and an array' => ['array', 'with spaces',
                    ],
                ],
                'headers' => [
                    'x-header-1' => 'spaces are left alone',
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"query":"parameters%20with%20space","and%20an%20array":"array%2Cwith%20spaces"}', true),
                'headers' => json_decode('{"x-header-1":"spaces are left alone"}', true),
            ],
        ]);
    }

    #[TestDox('allow post method for a custom path with minimal parameters')]
    public function testCustomPost(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/minimal',
        );

        $this->assertRequests([
            [
                'path' => '/test/minimal',
                'method' => 'POST',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('allow post method for a custom path with all parameters')]
    public function testCustomPost1(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/all',
            ['query' => 'parameters',
            ],
            ['body' => 'parameters',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'POST',
                'body' => json_decode('{"body":"parameters"}'),
                'queryParameters' => json_decode('{"query":"parameters"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions can override default query parameters')]
    public function testCustomPost2(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'query' => 'myQueryParameter',
                ], ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"myQueryParameter"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions merges query parameters with default ones')]
    public function testCustomPost3(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'query2' => 'myQueryParameter',
                ], ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","query2":"myQueryParameter"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions can override default headers')]
    public function testCustomPost4(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'headers' => [
                    'x-algolia-api-key' => 'ALGOLIA_API_KEY',
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters"}', true),
                'headers' => json_decode('{"x-algolia-api-key":"ALGOLIA_API_KEY"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions merges headers with default ones')]
    public function testCustomPost5(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'headers' => [
                    'x-algolia-api-key' => 'ALGOLIA_API_KEY',
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters"}', true),
                'headers' => json_decode('{"x-algolia-api-key":"ALGOLIA_API_KEY"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts booleans')]
    public function testCustomPost6(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'isItWorking' => true,
                ], ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","isItWorking":"true"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts integers')]
    public function testCustomPost7(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => 2,
                ], ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","myParam":"2"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts list of string')]
    public function testCustomPost8(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => ['b and c', 'd',
                    ],
                ], ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","myParam":"b%20and%20c%2Cd"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts list of booleans')]
    public function testCustomPost9(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => [true, true, false,
                    ],
                ], ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts list of integers')]
    public function testCustomPost10(): void
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => [1, 2,
                    ],
                ], ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","myParam":"1%2C2"}', true),
            ],
        ]);
    }

    #[TestDox('allow put method for a custom path with minimal parameters')]
    public function testCustomPut(): void
    {
        $client = $this->getClient();
        $client->customPut(
            'test/minimal',
        );

        $this->assertRequests([
            [
                'path' => '/test/minimal',
                'method' => 'PUT',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('allow put method for a custom path with all parameters')]
    public function testCustomPut1(): void
    {
        $client = $this->getClient();
        $client->customPut(
            'test/all',
            ['query' => 'parameters',
            ],
            ['body' => 'parameters',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'PUT',
                'body' => json_decode('{"body":"parameters"}'),
                'queryParameters' => json_decode('{"query":"parameters"}', true),
            ],
        ]);
    }

    #[TestDox('deleteApiKey')]
    public function testDeleteApiKey(): void
    {
        $client = $this->getClient();
        $client->deleteApiKey(
            'myTestApiKey',
        );

        $this->assertRequests([
            [
                'path' => '/1/keys/myTestApiKey',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteBy')]
    public function testDeleteBy(): void
    {
        $client = $this->getClient();
        $client->deleteBy(
            'theIndexName',
            ['filters' => 'brand:brandName',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/deleteByQuery',
                'method' => 'POST',
                'body' => json_decode('{"filters":"brand:brandName"}'),
            ],
        ]);
    }

    #[TestDox('deleteIndex')]
    public function testDeleteIndex(): void
    {
        $client = $this->getClient();
        $client->deleteIndex(
            'theIndexName',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteObject')]
    public function testDeleteObject(): void
    {
        $client = $this->getClient();
        $client->deleteObject(
            '<YOUR_INDEX_NAME>',
            'uniqueID',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/uniqueID',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('delete rule simple case')]
    public function testDeleteRule(): void
    {
        $client = $this->getClient();
        $client->deleteRule(
            'indexName',
            'id1',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/id1',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('delete rule with simple characters to encode in objectID')]
    public function testDeleteRule1(): void
    {
        $client = $this->getClient();
        $client->deleteRule(
            'indexName',
            'test/with/slash',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/test%2Fwith%2Fslash',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteSource')]
    public function testDeleteSource(): void
    {
        $client = $this->getClient();
        $client->deleteSource(
            'theSource',
        );

        $this->assertRequests([
            [
                'path' => '/1/security/sources/theSource',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteSynonym')]
    public function testDeleteSynonym(): void
    {
        $client = $this->getClient();
        $client->deleteSynonym(
            'indexName',
            'id1',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/synonyms/id1',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getApiKey')]
    public function testGetApiKey(): void
    {
        $client = $this->getClient();
        $client->getApiKey(
            'myTestApiKey',
        );

        $this->assertRequests([
            [
                'path' => '/1/keys/myTestApiKey',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getAppTask')]
    public function testGetAppTask(): void
    {
        $client = $this->getClient();
        $client->getAppTask(
            123,
        );

        $this->assertRequests([
            [
                'path' => '/1/task/123',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('get getDictionaryLanguages')]
    public function testGetDictionaryLanguages(): void
    {
        $client = $this->getClient();
        $client->getDictionaryLanguages();

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/*/languages',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('get getDictionarySettings results')]
    public function testGetDictionarySettings(): void
    {
        $client = $this->getClient();
        $client->getDictionarySettings();

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/*/settings',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getLogs with minimal parameters')]
    public function testGetLogs(): void
    {
        $client = $this->getClient();
        $client->getLogs();

        $this->assertRequests([
            [
                'path' => '/1/logs',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getLogs with parameters')]
    public function testGetLogs1(): void
    {
        $client = $this->getClient();
        $client->getLogs(
            5,
            10,
            'theIndexName',
            'all',
        );

        $this->assertRequests([
            [
                'path' => '/1/logs',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"offset":"5","length":"10","indexName":"theIndexName","type":"all"}', true),
            ],
        ]);
    }

    #[TestDox('getObject')]
    public function testGetObject(): void
    {
        $client = $this->getClient();
        $client->getObject(
            'theIndexName',
            'uniqueID',
            [
                'attr1',

                'attr2',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/uniqueID',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"attributesToRetrieve":"attr1%2Cattr2"}', true),
            ],
        ]);
    }

    #[TestDox('search with a real object')]
    public function testGetObject1(): void
    {
        $client = $this->getClient();
        $client->getObject(
            'cts_e2e_browse',
            'Batman and Robin',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/cts_e2e_browse/Batman%20and%20Robin',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getObjects')]
    public function testGetObjects(): void
    {
        $client = $this->getClient();
        $client->getObjects(
            ['requests' => [
                ['attributesToRetrieve' => [
                    'attr1',

                    'attr2',
                ],
                    'objectID' => 'uniqueID',
                    'indexName' => 'theIndexName',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/objects',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}'),
            ],
        ]);
    }

    #[TestDox('getRule')]
    public function testGetRule(): void
    {
        $client = $this->getClient();
        $client->getRule(
            'cts_e2e_browse',
            'qr-1725004648916',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/cts_e2e_browse/rules/qr-1725004648916',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getSettings')]
    public function testGetSettings(): void
    {
        $client = $this->getClient();
        $client->getSettings(
            'cts_e2e_settings',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/cts_e2e_settings/settings',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getSources')]
    public function testGetSources(): void
    {
        $client = $this->getClient();
        $client->getSources();

        $this->assertRequests([
            [
                'path' => '/1/security/sources',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getSynonym')]
    public function testGetSynonym(): void
    {
        $client = $this->getClient();
        $client->getSynonym(
            'indexName',
            'id1',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/synonyms/id1',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getTask')]
    public function testGetTask(): void
    {
        $client = $this->getClient();
        $client->getTask(
            'theIndexName',
            123,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/task/123',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getTopUserIds')]
    public function testGetTopUserIds(): void
    {
        $client = $this->getClient();
        $client->getTopUserIds();

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping/top',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getUserId')]
    public function testGetUserId(): void
    {
        $client = $this->getClient();
        $client->getUserId(
            'uniqueID',
        );

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping/uniqueID',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('hasPendingMappings with minimal parameters')]
    public function testHasPendingMappings(): void
    {
        $client = $this->getClient();
        $client->hasPendingMappings();

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping/pending',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('hasPendingMappings with parameters')]
    public function testHasPendingMappings1(): void
    {
        $client = $this->getClient();
        $client->hasPendingMappings(
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping/pending',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"getClusters":"true"}', true),
            ],
        ]);
    }

    #[TestDox('listApiKeys')]
    public function testListApiKeys(): void
    {
        $client = $this->getClient();
        $client->listApiKeys();

        $this->assertRequests([
            [
                'path' => '/1/keys',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('listClusters')]
    public function testListClusters(): void
    {
        $client = $this->getClient();
        $client->listClusters();

        $this->assertRequests([
            [
                'path' => '/1/clusters',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('listIndices with minimal parameters')]
    public function testListIndices(): void
    {
        $client = $this->getClient();
        $client->listIndices();

        $this->assertRequests([
            [
                'path' => '/1/indexes',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('listIndices with parameters')]
    public function testListIndices1(): void
    {
        $client = $this->getClient();
        $client->listIndices(
            8,
            3,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"page":"8","hitsPerPage":"3"}', true),
            ],
        ]);
    }

    #[TestDox('listUserIds with minimal parameters')]
    public function testListUserIds(): void
    {
        $client = $this->getClient();
        $client->listUserIds();

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('listUserIds with parameters')]
    public function testListUserIds1(): void
    {
        $client = $this->getClient();
        $client->listUserIds(
            8,
            100,
        );

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"page":"8","hitsPerPage":"100"}', true),
            ],
        ]);
    }

    #[TestDox('multipleBatch')]
    public function testMultipleBatch(): void
    {
        $client = $this->getClient();
        $client->multipleBatch(
            ['requests' => [
                ['action' => 'addObject',
                    'body' => ['key' => 'value',
                    ],
                    'indexName' => 'theIndexName',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/batch',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"addObject","body":{"key":"value"},"indexName":"theIndexName"}]}'),
            ],
        ]);
    }

    #[TestDox('scopes')]
    public function testOperationIndex(): void
    {
        $client = $this->getClient();
        $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'move',
                'destination' => '<DESTINATION_INDEX_NAME>',
                'scope' => [
                    'rules',

                    'settings',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation',
                'method' => 'POST',
                'body' => json_decode('{"operation":"move","destination":"<DESTINATION_INDEX_NAME>","scope":["rules","settings"]}'),
            ],
        ]);
    }

    #[TestDox('copy')]
    public function testOperationIndex1(): void
    {
        $client = $this->getClient();
        $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'copy',
                'destination' => '<DESTINATION_INDEX_NAME>',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation',
                'method' => 'POST',
                'body' => json_decode('{"operation":"copy","destination":"<DESTINATION_INDEX_NAME>"}'),
            ],
        ]);
    }

    #[TestDox('move')]
    public function testOperationIndex2(): void
    {
        $client = $this->getClient();
        $client->operationIndex(
            '<SOURCE_INDEX_NAME>',
            ['operation' => 'move',
                'destination' => '<DESTINATION_INDEX_NAME>',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation',
                'method' => 'POST',
                'body' => json_decode('{"operation":"move","destination":"<DESTINATION_INDEX_NAME>"}'),
            ],
        ]);
    }

    #[TestDox('Partial update with a new value for a string attribute')]
    public function testPartialUpdateObject(): void
    {
        $client = $this->getClient();
        $client->partialUpdateObject(
            'theIndexName',
            'uniqueID',
            ['attributeId' => 'new value',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/uniqueID/partial',
                'method' => 'POST',
                'body' => json_decode('{"attributeId":"new value"}'),
            ],
        ]);
    }

    #[TestDox('Partial update with a new value for an integer attribute')]
    public function testPartialUpdateObject1(): void
    {
        $client = $this->getClient();
        $client->partialUpdateObject(
            'theIndexName',
            'uniqueID',
            ['attributeId' => 1,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/uniqueID/partial',
                'method' => 'POST',
                'body' => json_decode('{"attributeId":1}'),
            ],
        ]);
    }

    #[TestDox('Partial update with a new value for a boolean attribute')]
    public function testPartialUpdateObject2(): void
    {
        $client = $this->getClient();
        $client->partialUpdateObject(
            'theIndexName',
            'uniqueID',
            ['attributeId' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/uniqueID/partial',
                'method' => 'POST',
                'body' => json_decode('{"attributeId":true}'),
            ],
        ]);
    }

    #[TestDox('Partial update with a new value for an array attribute')]
    public function testPartialUpdateObject3(): void
    {
        $client = $this->getClient();
        $client->partialUpdateObject(
            'theIndexName',
            'uniqueID',
            ['attributeId' => [
                'one',

                'two',

                'three',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/uniqueID/partial',
                'method' => 'POST',
                'body' => json_decode('{"attributeId":["one","two","three"]}'),
            ],
        ]);
    }

    #[TestDox('Partial update with a new value for an object attribute')]
    public function testPartialUpdateObject4(): void
    {
        $client = $this->getClient();
        $client->partialUpdateObject(
            'theIndexName',
            'uniqueID',
            ['attributeId' => ['nested' => 'value',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/uniqueID/partial',
                'method' => 'POST',
                'body' => json_decode('{"attributeId":{"nested":"value"}}'),
            ],
        ]);
    }

    #[TestDox('with visible_by filter')]
    public function testPartialUpdateObject5(): void
    {
        $client = $this->getClient();
        $client->partialUpdateObject(
            'theIndexName',
            'uniqueID',
            ['visible_by' => [
                'Angela',

                'group/Finance',

                'group/Shareholders',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/uniqueID/partial',
                'method' => 'POST',
                'body' => json_decode('{"visible_by":["Angela","group/Finance","group/Shareholders"]}'),
            ],
        ]);
    }

    #[TestDox('removeUserId')]
    public function testRemoveUserId(): void
    {
        $client = $this->getClient();
        $client->removeUserId(
            'uniqueID',
        );

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping/uniqueID',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('replaceSources')]
    public function testReplaceSources(): void
    {
        $client = $this->getClient();
        $client->replaceSources(
            [
                ['source' => 'theSource',
                    'description' => 'theDescription',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/security/sources',
                'method' => 'PUT',
                'body' => json_decode('[{"source":"theSource","description":"theDescription"}]'),
            ],
        ]);
    }

    #[TestDox('restoreApiKey')]
    public function testRestoreApiKey(): void
    {
        $client = $this->getClient();
        $client->restoreApiKey(
            'ALGOLIA_API_KEY',
        );

        $this->assertRequests([
            [
                'path' => '/1/keys/ALGOLIA_API_KEY/restore',
                'method' => 'POST',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('saveObject')]
    public function testSaveObject(): void
    {
        $client = $this->getClient();
        $client->saveObject(
            '<YOUR_INDEX_NAME>',
            ['objectID' => 'id',
                'test' => 'val',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E',
                'method' => 'POST',
                'body' => json_decode('{"objectID":"id","test":"val"}'),
            ],
        ]);
    }

    #[TestDox('saveRule with minimal parameters')]
    public function testSaveRule(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'id1',
            ['objectID' => 'id1',
                'conditions' => [
                    ['pattern' => 'apple',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['filters' => 'brand:xiaomi',
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/id1',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:xiaomi"}}}'),
            ],
        ]);
    }

    #[TestDox('saveRule with all parameters')]
    public function testSaveRule1(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'id1',
            ['objectID' => 'id1',
                'conditions' => [
                    ['pattern' => 'apple',
                        'anchoring' => 'contains',
                        'alternatives' => false,
                        'context' => 'search',
                    ],
                ],
                'consequence' => ['params' => ['filters' => 'brand:apple',
                    'query' => ['remove' => [
                        'algolia',
                    ],
                        'edits' => [
                            ['type' => 'remove',
                                'delete' => 'abc',
                                'insert' => 'cde',
                            ],

                            ['type' => 'replace',
                                'delete' => 'abc',
                                'insert' => 'cde',
                            ],
                        ],
                    ],
                ],
                    'hide' => [
                        ['objectID' => '321',
                        ],
                    ],
                    'filterPromotes' => false,
                    'userData' => ['algolia' => 'aloglia',
                    ],
                    'promote' => [
                        ['objectID' => 'abc',
                            'position' => 3,
                        ],

                        ['objectIDs' => [
                            'abc',

                            'def',
                        ],
                            'position' => 1,
                        ],
                    ],
                ],
                'description' => 'test',
                'enabled' => true,
                'validity' => [
                    ['from' => 1656670273,
                        'until' => 1656670277,
                    ],
                ],
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/id1',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('b2b catalog')]
    public function testSaveRule2(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'article-rule',
            ['objectID' => 'article-rule',
                'conditions' => [
                    ['pattern' => 'article',
                        'anchoring' => 'startsWith',
                    ],
                ],
                'consequence' => ['params' => ['query' => ['edits' => [
                    ['type' => 'remove',
                        'delete' => 'article',
                    ],
                ],
                ],
                    'restrictSearchableAttributes' => [
                        'title',

                        'book_id',
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/article-rule',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}'),
            ],
        ]);
    }

    #[TestDox('merchandising and promoting')]
    public function testSaveRule3(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'director-rule',
            ['objectID' => 'director-rule',
                'conditions' => [
                    ['pattern' => '{facet:director} director',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['restrictSearchableAttributes' => [
                    'title',

                    'book_id',
                ],
                    'automaticFacetFilters' => [
                        ['facet' => 'director',
                        ],
                    ],
                    'query' => ['edits' => [
                        ['type' => 'remove',
                            'delete' => 'director',
                        ],
                    ],
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/director-rule',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"director-rule","conditions":[{"pattern":"{facet:director} director","anchoring":"contains"}],"consequence":{"params":{"restrictSearchableAttributes":["title","book_id"],"automaticFacetFilters":[{"facet":"director"}],"query":{"edits":[{"type":"remove","delete":"director"}]}}}}'),
            ],
        ]);
    }

    #[TestDox('harry potter')]
    public function testSaveRule4(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'harry-potter-rule',
            ['objectID' => 'harry-potter-rule',
                'conditions' => [
                    ['pattern' => 'harry potter',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['userData' => ['promo_content' => '20% OFF on all Harry Potter books!',
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/harry-potter-rule',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"harry-potter-rule","conditions":[{"pattern":"harry potter","anchoring":"contains"}],"consequence":{"userData":{"promo_content":"20% OFF on all Harry Potter books!"}}}'),
            ],
        ]);
    }

    #[TestDox('merchandising empty query')]
    public function testSaveRule5(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'clearance-category-filter',
            ['objectID' => 'clearance-category-filter',
                'conditions' => [
                    ['pattern' => '',
                        'anchoring' => 'is',
                        'context' => 'landing',
                    ],
                ],
                'consequence' => ['params' => ['optionalFilters' => 'clearance:true',
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/clearance-category-filter',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"clearance-category-filter","conditions":[{"pattern":"","anchoring":"is","context":"landing"}],"consequence":{"params":{"optionalFilters":"clearance:true"}}}'),
            ],
        ]);
    }

    #[TestDox('redirect')]
    public function testSaveRule6(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'redirect-help-rule',
            ['objectID' => 'redirect-help-rule',
                'conditions' => [
                    ['pattern' => 'help',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['userData' => ['redirect' => 'https://www.algolia.com/support',
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/redirect-help-rule',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"redirect-help-rule","conditions":[{"pattern":"help","anchoring":"contains"}],"consequence":{"userData":{"redirect":"https://www.algolia.com/support"}}}'),
            ],
        ]);
    }

    #[TestDox('promote some results over others')]
    public function testSaveRule7(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'tomato-fruit',
            ['objectID' => 'tomato-fruit',
                'conditions' => [
                    ['pattern' => 'tomato',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['optionalFilters' => 'food_group:fruit',
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/tomato-fruit',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"tomato-fruit","conditions":[{"pattern":"tomato","anchoring":"contains"}],"consequence":{"params":{"optionalFilters":"food_group:fruit"}}}'),
            ],
        ]);
    }

    #[TestDox('promote several hits')]
    public function testSaveRule8(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'Promote-Apple-Newest',
            ['objectID' => 'Promote-Apple-Newest',
                'conditions' => [
                    ['pattern' => 'apple',
                        'anchoring' => 'is',
                    ],
                ],
                'consequence' => ['promote' => [
                    ['objectIDs' => [
                        'iPhone-12345',

                        'watch-123',
                    ],
                        'position' => 0,
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/Promote-Apple-Newest',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"Promote-Apple-Newest","conditions":[{"pattern":"apple","anchoring":"is"}],"consequence":{"promote":[{"objectIDs":["iPhone-12345","watch-123"],"position":0}]}}'),
            ],
        ]);
    }

    #[TestDox('promote newest release')]
    public function testSaveRule9(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'Promote-iPhone-X',
            ['objectID' => 'Promote-iPhone-X',
                'conditions' => [
                    ['pattern' => 'iPhone',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['promote' => [
                    ['objectID' => 'iPhone-12345',
                        'position' => 0,
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/Promote-iPhone-X',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"Promote-iPhone-X","conditions":[{"pattern":"iPhone","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"iPhone-12345","position":0}]}}'),
            ],
        ]);
    }

    #[TestDox('promote single item')]
    public function testSaveRule10(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'promote-harry-potter-box-set',
            ['objectID' => 'promote-harry-potter-box-set',
                'conditions' => [
                    ['pattern' => 'Harry Potter',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['promote' => [
                    ['objectID' => 'HP-12345',
                        'position' => 0,
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/promote-harry-potter-box-set',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"promote-harry-potter-box-set","conditions":[{"pattern":"Harry Potter","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"HP-12345","position":0}]}}'),
            ],
        ]);
    }

    #[TestDox('limit search results')]
    public function testSaveRule11(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'article-rule',
            ['objectID' => 'article-rule',
                'conditions' => [
                    ['pattern' => 'article',
                        'anchoring' => 'startsWith',
                    ],
                ],
                'consequence' => ['params' => ['query' => ['edits' => [
                    ['type' => 'remove',
                        'delete' => 'article',
                    ],
                ],
                ],
                    'restrictSearchableAttributes' => [
                        'title',

                        'book_id',
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/article-rule',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}'),
            ],
        ]);
    }

    #[TestDox('query match')]
    public function testSaveRule12(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'tagged-brand-rule',
            ['conditions' => [
                ['pattern' => 'brand: {facet:brand}',
                    'anchoring' => 'contains',
                    'alternatives' => false,
                ],
            ],
                'consequence' => ['params' => ['automaticFacetFilters' => [
                    ['facet' => 'brand',
                    ],
                ],
                    'query' => ['remove' => [
                        'brand:',

                        '{facet:brand}',
                    ],
                    ],
                ],
                ],
                'description' => 'filter on brand: {brand}',
                'objectID' => 'tagged-brand-rule',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/tagged-brand-rule',
                'method' => 'PUT',
                'body' => json_decode('{"conditions":[{"pattern":"brand: {facet:brand}","anchoring":"contains","alternatives":false}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"brand"}],"query":{"remove":["brand:","{facet:brand}"]}}},"description":"filter on brand: {brand}","objectID":"tagged-brand-rule"}'),
            ],
        ]);
    }

    #[TestDox('dynamic filtering')]
    public function testSaveRule13(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'color-facets',
            ['objectID' => 'color-facets',
                'conditions' => [
                    ['pattern' => '{facet:color}',
                    ],
                ],
                'consequence' => ['params' => ['automaticFacetFilters' => [
                    ['facet' => 'color',
                    ],
                ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/color-facets',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"color-facets","conditions":[{"pattern":"{facet:color}"}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"color"}]}}}'),
            ],
        ]);
    }

    #[TestDox('hide hits')]
    public function testSaveRule14(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'hide-12345',
            ['objectID' => 'hide-12345',
                'conditions' => [
                    ['pattern' => 'cheap',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['hide' => [
                    ['objectID' => 'to-hide-12345',
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/hide-12345',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"hide-12345","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"hide":[{"objectID":"to-hide-12345"}]}}'),
            ],
        ]);
    }

    #[TestDox('one rule per facet')]
    public function testSaveRule15(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'red-color',
            ['objectID' => 'red-color',
                'conditions' => [
                    ['pattern' => 'red',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['query' => ['remove' => [
                    'red',
                ],
                ],
                    'filters' => 'color:red',
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/red-color',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"red-color","conditions":[{"pattern":"red","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["red"]},"filters":"color:red"}}}'),
            ],
        ]);
    }

    #[TestDox('numerical filters')]
    public function testSaveRule16(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'cheap',
            ['objectID' => 'cheap',
                'conditions' => [
                    ['pattern' => 'cheap',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['query' => ['remove' => [
                    'cheap',
                ],
                ],
                    'filters' => 'price < 10',
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/cheap',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 10"}}}'),
            ],
        ]);
    }

    #[TestDox('negative filters')]
    public function testSaveRule17(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'gluten-free-rule',
            ['objectID' => 'gluten-free-rule',
                'conditions' => [
                    ['pattern' => 'gluten-free',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['filters' => 'NOT allergens:gluten',
                    'query' => ['edits' => [
                        ['type' => 'remove',
                            'delete' => 'gluten-free',
                        ],
                    ],
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/gluten-free-rule',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"gluten-free-rule","conditions":[{"pattern":"gluten-free","anchoring":"contains"}],"consequence":{"params":{"filters":"NOT allergens:gluten","query":{"edits":[{"type":"remove","delete":"gluten-free"}]}}}}'),
            ],
        ]);
    }

    #[TestDox('positive filters')]
    public function testSaveRule18(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'diet-rule',
            ['objectID' => 'diet-rule',
                'conditions' => [
                    ['pattern' => 'diet',
                        'anchoring' => 'contains',
                    ],
                ],
                'consequence' => ['params' => ['filters' => "'low-carb' OR 'low-fat'",
                    'query' => ['edits' => [
                        ['type' => 'remove',
                            'delete' => 'diet',
                        ],
                    ],
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/diet-rule',
                'method' => 'PUT',
                'body' => json_decode("{\"objectID\":\"diet-rule\",\"conditions\":[{\"pattern\":\"diet\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"filters\":\"'low-carb' OR 'low-fat'\",\"query\":{\"edits\":[{\"type\":\"remove\",\"delete\":\"diet\"}]}}}}"),
            ],
        ]);
    }

    #[TestDox('conditionless')]
    public function testSaveRule19(): void
    {
        $client = $this->getClient();
        $client->saveRule(
            'indexName',
            'diet-rule',
            ['objectID' => 'diet-rule',
                'consequence' => ['params' => ['filters' => "'low-carb' OR 'low-fat'",
                    'query' => ['edits' => [
                        ['type' => 'remove',
                            'delete' => 'diet',
                        ],
                    ],
                    ],
                ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/rules/diet-rule',
                'method' => 'PUT',
                'body' => json_decode("{\"objectID\":\"diet-rule\",\"consequence\":{\"params\":{\"filters\":\"'low-carb' OR 'low-fat'\",\"query\":{\"edits\":[{\"type\":\"remove\",\"delete\":\"diet\"}]}}}}"),
            ],
        ]);
    }

    #[TestDox('saveRules with minimal parameters')]
    public function testSaveRules(): void
    {
        $client = $this->getClient();
        $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'a-rule-id',
                    'conditions' => [
                        ['pattern' => 'smartphone',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['filters' => 'brand:apple',
                    ],
                    ],
                ],

                ['objectID' => 'a-second-rule-id',
                    'conditions' => [
                        ['pattern' => 'apple',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['filters' => 'brand:samsung',
                    ],
                    ],
                ],
            ],
            false,
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch',
                'method' => 'POST',
                'body' => json_decode('[{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:apple"}}},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:samsung"}}}]'),
                'queryParameters' => json_decode('{"forwardToReplicas":"false","clearExistingRules":"true"}', true),
            ],
        ]);
    }

    #[TestDox('saveRules with all parameters')]
    public function testSaveRules1(): void
    {
        $client = $this->getClient();
        $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'id1',
                    'conditions' => [
                        ['pattern' => 'apple',
                            'anchoring' => 'contains',
                            'alternatives' => false,
                            'context' => 'search',
                        ],
                    ],
                    'consequence' => ['params' => ['filters' => 'brand:apple',
                        'query' => ['remove' => [
                            'algolia',
                        ],
                            'edits' => [
                                ['type' => 'remove',
                                    'delete' => 'abc',
                                    'insert' => 'cde',
                                ],

                                ['type' => 'replace',
                                    'delete' => 'abc',
                                    'insert' => 'cde',
                                ],
                            ],
                        ],
                    ],
                        'hide' => [
                            ['objectID' => '321',
                            ],
                        ],
                        'filterPromotes' => false,
                        'userData' => ['algolia' => 'aloglia',
                        ],
                        'promote' => [
                            ['objectID' => 'abc',
                                'position' => 3,
                            ],

                            ['objectIDs' => [
                                'abc',

                                'def',
                            ],
                                'position' => 1,
                            ],
                        ],
                    ],
                    'description' => 'test',
                    'enabled' => true,
                    'validity' => [
                        ['from' => 1656670273,
                            'until' => 1656670277,
                        ],
                    ],
                ],
            ],
            true,
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch',
                'method' => 'POST',
                'body' => json_decode('[{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true","clearExistingRules":"true"}', true),
            ],
        ]);
    }

    #[TestDox('dynamic filtering')]
    public function testSaveRules2(): void
    {
        $client = $this->getClient();
        $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'toaster',
                    'conditions' => [
                        ['pattern' => 'toaster',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['query' => ['remove' => [
                        'toaster',
                    ],
                    ],
                        'filters' => 'product_type:toaster',
                    ],
                    ],
                ],

                ['objectID' => 'cheap',
                    'conditions' => [
                        ['pattern' => 'cheap',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['query' => ['remove' => [
                        'cheap',
                    ],
                    ],
                        'filters' => 'price < 15',
                    ],
                    ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch',
                'method' => 'POST',
                'body' => json_decode('[{"objectID":"toaster","conditions":[{"pattern":"toaster","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["toaster"]},"filters":"product_type:toaster"}}},{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 15"}}}]'),
            ],
        ]);
    }

    #[TestDox('enhance search results')]
    public function testSaveRules3(): void
    {
        $client = $this->getClient();
        $client->saveRules(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'country',
                    'conditions' => [
                        ['pattern' => '{facet:country}',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['aroundLatLngViaIP' => false,
                    ],
                    ],
                ],

                ['objectID' => 'city',
                    'conditions' => [
                        ['pattern' => '{facet:city}',
                            'anchoring' => 'contains',
                        ],
                    ],
                    'consequence' => ['params' => ['aroundLatLngViaIP' => false,
                    ],
                    ],
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch',
                'method' => 'POST',
                'body' => json_decode('[{"objectID":"country","conditions":[{"pattern":"{facet:country}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}},{"objectID":"city","conditions":[{"pattern":"{facet:city}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}}]'),
            ],
        ]);
    }

    #[TestDox('saveSynonym')]
    public function testSaveSynonym(): void
    {
        $client = $this->getClient();
        $client->saveSynonym(
            'indexName',
            'id1',
            ['objectID' => 'id1',
                'type' => 'synonym',
                'synonyms' => [
                    'car',

                    'vehicule',

                    'auto',
                ],
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/synonyms/id1',
                'method' => 'PUT',
                'body' => json_decode('{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('saveSynonyms')]
    public function testSaveSynonyms(): void
    {
        $client = $this->getClient();
        $client->saveSynonyms(
            '<YOUR_INDEX_NAME>',
            [
                ['objectID' => 'id1',
                    'type' => 'synonym',
                    'synonyms' => [
                        'car',

                        'vehicule',

                        'auto',
                    ],
                ],

                ['objectID' => 'id2',
                    'type' => 'onewaysynonym',
                    'input' => 'iphone',
                    'synonyms' => [
                        'ephone',

                        'aphone',

                        'yphone',
                    ],
                ],
            ],
            true,
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/synonyms/batch',
                'method' => 'POST',
                'body' => json_decode('[{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true","replaceExistingSynonyms":"true"}', true),
            ],
        ]);
    }

    #[TestDox('withHitsPerPage')]
    public function testSearch(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'hitsPerPage' => 50,
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","hitsPerPage":50}]}'),
            ],
        ]);
    }

    #[TestDox('filterOnly')]
    public function testSearch1(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'actor:Scarlett Johansson',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Scarlett Johansson"}]}'),
            ],
        ]);
    }

    #[TestDox('filterOr')]
    public function testSearch2(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'actor:Tom Cruise OR actor:Scarlett Johansson',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Tom Cruise OR actor:Scarlett Johansson"}]}'),
            ],
        ]);
    }

    #[TestDox('filterNot')]
    public function testSearch3(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'filters' => 'NOT actor:Nicolas Cage',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"NOT actor:Nicolas Cage"}]}'),
            ],
        ]);
    }

    #[TestDox('search for a single hits request with minimal parameters')]
    public function testSearch4(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'cts_e2e_search_empty_index',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"cts_e2e_search_empty_index"}]}'),
            ],
        ]);
    }

    #[TestDox('search with highlight and snippet results')]
    public function testSearch5(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'cts_e2e_highlight_snippet_results',
                    'query' => 'vim',
                    'attributesToSnippet' => [
                        '*:20',
                    ],
                    'attributesToHighlight' => [
                        '*',
                    ],
                    'attributesToRetrieve' => [
                        '*',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"cts_e2e_highlight_snippet_results","query":"vim","attributesToSnippet":["*:20"],"attributesToHighlight":["*"],"attributesToRetrieve":["*"]}]}'),
            ],
        ]);
    }

    #[TestDox('retrieveFacets')]
    public function testSearch6(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'facets' => [
                        'author',

                        'genre',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["author","genre"]}]}'),
            ],
        ]);
    }

    #[TestDox('retrieveFacetsWildcard')]
    public function testSearch7(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => '<YOUR_INDEX_NAME>',
                    'query' => '<YOUR_QUERY>',
                    'facets' => [
                        '*',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["*"]}]}'),
            ],
        ]);
    }

    #[TestDox('search for a single facet request with minimal parameters')]
    public function testSearch8(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'cts_e2e_search_facet',
                    'type' => 'facet',
                    'facet' => 'editor',
                ],
            ],
                'strategy' => 'stopIfEnoughMatches',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"cts_e2e_search_facet","type":"facet","facet":"editor"}],"strategy":"stopIfEnoughMatches"}'),
            ],
        ]);
    }

    #[TestDox('search for a single hits request with all parameters')]
    public function testSearch9(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'theIndexName',
                    'query' => 'myQuery',
                    'hitsPerPage' => 50,
                    'type' => 'default',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}'),
            ],
        ]);
    }

    #[TestDox('search for a single facet request with all parameters')]
    public function testSearch10(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'theIndexName',
                    'type' => 'facet',
                    'facet' => 'theFacet',
                    'facetQuery' => 'theFacetQuery',
                    'query' => 'theQuery',
                    'maxFacetHits' => 50,
                ],
            ],
                'strategy' => 'stopIfEnoughMatches',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}'),
            ],
        ]);
    }

    #[TestDox('search for multiple mixed requests in multiple indices with minimal parameters')]
    public function testSearch11(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'theIndexName',
                ],

                ['indexName' => 'theIndexName2',
                    'type' => 'facet',
                    'facet' => 'theFacet',
                ],

                ['indexName' => 'theIndexName',
                    'type' => 'default',
                ],
            ],
                'strategy' => 'stopIfEnoughMatches',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}'),
            ],
        ]);
    }

    #[TestDox('search for multiple mixed requests in multiple indices with all parameters')]
    public function testSearch12(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'theIndexName',
                    'type' => 'facet',
                    'facet' => 'theFacet',
                    'facetQuery' => 'theFacetQuery',
                    'query' => 'theQuery',
                    'maxFacetHits' => 50,
                ],

                ['indexName' => 'theIndexName',
                    'query' => 'myQuery',
                    'hitsPerPage' => 50,
                    'type' => 'default',
                ],
            ],
                'strategy' => 'stopIfEnoughMatches',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}'),
            ],
        ]);
    }

    #[TestDox('search filters accept all of the possible shapes')]
    public function testSearch13(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'theIndexName',
                    'facetFilters' => 'mySearch:filters',
                    'reRankingApplyFilter' => 'mySearch:filters',
                    'tagFilters' => 'mySearch:filters',
                    'numericFilters' => 'mySearch:filters',
                    'optionalFilters' => 'mySearch:filters',
                ],

                ['indexName' => 'theIndexName',
                    'facetFilters' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',

                            [
                                'mySearch:filters',
                            ],
                        ],
                    ],
                    'reRankingApplyFilter' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',
                        ],
                    ],
                    'tagFilters' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',
                        ],
                    ],
                    'numericFilters' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',
                        ],
                    ],
                    'optionalFilters' => [
                        'mySearch:filters',

                        [
                            'mySearch:filters',
                        ],
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters",["mySearch:filters"]]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}'),
            ],
        ]);
    }

    #[TestDox('search filters end to end')]
    public function testSearch14(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['indexName' => 'cts_e2e_search_facet',
                    'filters' => "editor:'visual studio' OR editor:neovim",
                ],

                ['indexName' => 'cts_e2e_search_facet',
                    'facetFilters' => [
                        "editor:'visual studio'",

                        'editor:neovim',
                    ],
                ],

                ['indexName' => 'cts_e2e_search_facet',
                    'facetFilters' => [
                        "editor:'visual studio'",

                        [
                            'editor:neovim',
                        ],
                    ],
                ],

                ['indexName' => 'cts_e2e_search_facet',
                    'facetFilters' => [
                        "editor:'visual studio'",

                        [
                            'editor:neovim',

                            [
                                'editor:goland',
                            ],
                        ],
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode("{\"requests\":[{\"indexName\":\"cts_e2e_search_facet\",\"filters\":\"editor:'visual studio' OR editor:neovim\"},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",\"editor:neovim\"]},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",[\"editor:neovim\"]]},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",[\"editor:neovim\",[\"editor:goland\"]]]}]}"),
            ],
        ]);
    }

    #[TestDox('search with all search parameters')]
    public function testSearch15(): void
    {
        $client = $this->getClient();
        $client->search(
            ['requests' => [
                ['advancedSyntax' => true,
                    'advancedSyntaxFeatures' => [
                        'exactPhrase',
                    ],
                    'allowTyposOnNumericTokens' => true,
                    'alternativesAsExact' => [
                        'multiWordsSynonym',
                    ],
                    'analytics' => true,
                    'analyticsTags' => [
                        '',
                    ],
                    'aroundLatLng' => '',
                    'aroundLatLngViaIP' => true,
                    'aroundPrecision' => 0,
                    'aroundRadius' => 'all',
                    'attributeCriteriaComputedByMinProximity' => true,
                    'attributesToHighlight' => [
                        '',
                    ],
                    'attributesToRetrieve' => [
                        '',
                    ],
                    'attributesToSnippet' => [
                        '',
                    ],
                    'clickAnalytics' => true,
                    'decompoundQuery' => true,
                    'disableExactOnAttributes' => [
                        '',
                    ],
                    'disableTypoToleranceOnAttributes' => [
                        '',
                    ],
                    'distinct' => 0,
                    'enableABTest' => true,
                    'enablePersonalization' => true,
                    'enableReRanking' => true,
                    'enableRules' => true,
                    'exactOnSingleWordQuery' => 'attribute',
                    'facetFilters' => [
                        '',
                    ],
                    'facetingAfterDistinct' => true,
                    'facets' => [
                        '',
                    ],
                    'filters' => '',
                    'getRankingInfo' => true,
                    'highlightPostTag' => '',
                    'highlightPreTag' => '',
                    'hitsPerPage' => 1,
                    'ignorePlurals' => false,
                    'indexName' => 'theIndexName',
                    'insideBoundingBox' => [
                        [
                            47.3165,

                            4.9665,

                            47.3424,

                            5.0201,
                        ],

                        [
                            40.9234,

                            2.1185,

                            38.643,

                            1.9916,
                        ],
                    ],
                    'insidePolygon' => [
                        [
                            47.3165,

                            4.9665,

                            47.3424,

                            5.0201,

                            47.32,

                            4.9,
                        ],

                        [
                            40.9234,

                            2.1185,

                            38.643,

                            1.9916,

                            39.2587,

                            2.0104,
                        ],
                    ],
                    'length' => 1,
                    'maxValuesPerFacet' => 0,
                    'minProximity' => 1,
                    'minWordSizefor1Typo' => 0,
                    'minWordSizefor2Typos' => 0,
                    'minimumAroundRadius' => 1,
                    'naturalLanguages' => [
                        'fr',
                    ],
                    'numericFilters' => [
                        '',
                    ],
                    'offset' => 0,
                    'optionalFilters' => [
                        '',
                    ],
                    'optionalWords' => [
                        '',
                    ],
                    'page' => 0,
                    'percentileComputation' => true,
                    'personalizationImpact' => 0,
                    'query' => '',
                    'queryLanguages' => [
                        'fr',
                    ],
                    'queryType' => 'prefixAll',
                    'ranking' => [
                        '',
                    ],
                    'reRankingApplyFilter' => [
                        '',
                    ],
                    'relevancyStrictness' => 0,
                    'removeStopWords' => true,
                    'removeWordsIfNoResults' => 'allOptional',
                    'renderingContent' => ['facetOrdering' => ['facets' => ['order' => [
                        'a',

                        'b',
                    ],
                    ],
                        'values' => ['a' => ['order' => [
                            'b',
                        ],
                            'sortRemainingBy' => 'count',
                        ],
                        ],
                    ],
                    ],
                    'replaceSynonymsInHighlight' => true,
                    'responseFields' => [
                        '',
                    ],
                    'restrictHighlightAndSnippetArrays' => true,
                    'restrictSearchableAttributes' => [
                        '',
                    ],
                    'ruleContexts' => [
                        '',
                    ],
                    'similarQuery' => '',
                    'snippetEllipsisText' => '',
                    'sortFacetValuesBy' => '',
                    'sumOrFiltersScores' => true,
                    'synonyms' => true,
                    'tagFilters' => [
                        '',
                    ],
                    'type' => 'default',
                    'typoTolerance' => 'min',
                    'userToken' => '',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/*/queries',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":1,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"length":1,"maxValuesPerFacet":0,"minProximity":1,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":1,"naturalLanguages":["fr"],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":["fr"],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}'),
            ],
        ]);
    }

    #[TestDox('get searchDictionaryEntries results with minimal parameters')]
    public function testSearchDictionaryEntries(): void
    {
        $client = $this->getClient();
        $client->searchDictionaryEntries(
            'stopwords',
            ['query' => 'about',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/stopwords/search',
                'method' => 'POST',
                'body' => json_decode('{"query":"about"}'),
            ],
        ]);
    }

    #[TestDox('get searchDictionaryEntries results with all parameters')]
    public function testSearchDictionaryEntries1(): void
    {
        $client = $this->getClient();
        $client->searchDictionaryEntries(
            'compounds',
            ['query' => 'foo',
                'page' => 4,
                'hitsPerPage' => 2,
                'language' => 'fr',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/compounds/search',
                'method' => 'POST',
                'body' => json_decode('{"query":"foo","page":4,"hitsPerPage":2,"language":"fr"}'),
            ],
        ]);
    }

    #[TestDox('get searchForFacetValues results with minimal parameters')]
    public function testSearchForFacetValues(): void
    {
        $client = $this->getClient();
        $client->searchForFacetValues(
            'indexName',
            'facetName',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/facets/facetName/query',
                'method' => 'POST',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('get searchForFacetValues results with all parameters')]
    public function testSearchForFacetValues1(): void
    {
        $client = $this->getClient();
        $client->searchForFacetValues(
            'indexName',
            'facetName',
            ['params' => "query=foo&facetFilters=['bar']",
                'facetQuery' => 'foo',
                'maxFacetHits' => 42,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/facets/facetName/query',
                'method' => 'POST',
                'body' => json_decode("{\"params\":\"query=foo&facetFilters=['bar']\",\"facetQuery\":\"foo\",\"maxFacetHits\":42}"),
            ],
        ]);
    }

    #[TestDox('facetName and facetQuery')]
    public function testSearchForFacetValues2(): void
    {
        $client = $this->getClient();
        $client->searchForFacetValues(
            'indexName',
            'author',
            ['facetQuery' => 'stephen king',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/facets/author/query',
                'method' => 'POST',
                'body' => json_decode('{"facetQuery":"stephen king"}'),
            ],
        ]);
    }

    #[TestDox('searchRules')]
    public function testSearchRules(): void
    {
        $client = $this->getClient();
        $client->searchRules(
            'cts_e2e_browse',
            ['query' => 'zorro',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/cts_e2e_browse/rules/search',
                'method' => 'POST',
                'body' => json_decode('{"query":"zorro"}'),
            ],
        ]);
    }

    #[TestDox('search with minimal parameters')]
    public function testSearchSingleIndex(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('search with special characters in indexName')]
    public function testSearchSingleIndex1(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'cts_e2e_space in index',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/cts_e2e_space%20in%20index/query',
                'method' => 'POST',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('search with searchParams')]
    public function testSearchSingleIndex2(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['query' => 'myQuery',
                'facetFilters' => [
                    'tags:algolia',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"query":"myQuery","facetFilters":["tags:algolia"]}'),
            ],
        ]);
    }

    #[TestDox('single search retrieve snippets')]
    public function testSearchSingleIndex3(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'cts_e2e_browse',
            ['query' => 'batman mask of the phantasm',
                'attributesToRetrieve' => [
                    '*',
                ],
                'attributesToSnippet' => [
                    '*:20',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/cts_e2e_browse/query',
                'method' => 'POST',
                'body' => json_decode('{"query":"batman mask of the phantasm","attributesToRetrieve":["*"],"attributesToSnippet":["*:20"]}'),
            ],
        ]);
    }

    #[TestDox('query')]
    public function testSearchSingleIndex4(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['query' => 'phone',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"query":"phone"}'),
            ],
        ]);
    }

    #[TestDox('filters')]
    public function testSearchSingleIndex5(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => 'country:US AND price.gross < 2.0',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"filters":"country:US AND price.gross < 2.0"}'),
            ],
        ]);
    }

    #[TestDox('distinct')]
    public function testSearchSingleIndex6(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['distinct' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"distinct":true}'),
            ],
        ]);
    }

    #[TestDox('filtersNumeric')]
    public function testSearchSingleIndex7(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => 'price < 10',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"filters":"price < 10"}'),
            ],
        ]);
    }

    #[TestDox('filtersTimestamp')]
    public function testSearchSingleIndex8(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => 'NOT date_timestamp:1514764800 TO 1546300799',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"filters":"NOT date_timestamp:1514764800 TO 1546300799"}'),
            ],
        ]);
    }

    #[TestDox('filtersSumOrFiltersScoresFalse')]
    public function testSearchSingleIndex9(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
                'sumOrFiltersScores' => false,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":false}'),
            ],
        ]);
    }

    #[TestDox('filtersSumOrFiltersScoresTrue')]
    public function testSearchSingleIndex10(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
                'sumOrFiltersScores' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":true}'),
            ],
        ]);
    }

    #[TestDox('filtersStephenKing')]
    public function testSearchSingleIndex11(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => 'author:"Stephen King"',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"filters":"author:"Stephen King""}'),
            ],
        ]);
    }

    #[TestDox('filtersNotTags')]
    public function testSearchSingleIndex12(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => 'NOT _tags:non-fiction',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"filters":"NOT _tags:non-fiction"}'),
            ],
        ]);
    }

    #[TestDox('facetFiltersList')]
    public function testSearchSingleIndex13(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['facetFilters' => [
                'publisher:Penguin',

                [
                    'author:Stephen King',

                    'genre:Horror',
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"facetFilters":["publisher:Penguin",["author:Stephen King","genre:Horror"]]}'),
            ],
        ]);
    }

    #[TestDox('facetFiltersNeg')]
    public function testSearchSingleIndex14(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['facetFilters' => 'category:-Ebook',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"facetFilters":"category:-Ebook"}'),
            ],
        ]);
    }

    #[TestDox('filtersAndFacetFilters')]
    public function testSearchSingleIndex15(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => '(author:"Stephen King" OR genre:"Horror")',
                'facetFilters' => [
                    'publisher:Penguin',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"filters":"(author:"Stephen King" OR genre:"Horror")","facetFilters":["publisher:Penguin"]}'),
            ],
        ]);
    }

    #[TestDox('facet author genre')]
    public function testSearchSingleIndex16(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['facets' => [
                'author',

                'genre',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"facets":["author","genre"]}'),
            ],
        ]);
    }

    #[TestDox('facet wildcard')]
    public function testSearchSingleIndex17(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['facets' => [
                '*',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"facets":["*"]}'),
            ],
        ]);
    }

    #[TestDox('maxValuesPerFacet')]
    public function testSearchSingleIndex18(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['maxValuesPerFacet' => 1000,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"maxValuesPerFacet":1000}'),
            ],
        ]);
    }

    #[TestDox('aroundLatLng')]
    public function testSearchSingleIndex19(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['aroundLatLng' => '40.71, -74.01',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"aroundLatLng":"40.71, -74.01"}'),
            ],
        ]);
    }

    #[TestDox('aroundLatLngViaIP')]
    public function testSearchSingleIndex20(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['aroundLatLngViaIP' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"aroundLatLngViaIP":true}'),
            ],
        ]);
    }

    #[TestDox('aroundRadius')]
    public function testSearchSingleIndex21(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['aroundLatLng' => '40.71, -74.01',
                'aroundRadius' => 1000000,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"aroundLatLng":"40.71, -74.01","aroundRadius":1000000}'),
            ],
        ]);
    }

    #[TestDox('insideBoundingBox')]
    public function testSearchSingleIndex22(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['insideBoundingBox' => [
                [
                    49.067996905313834,

                    65.73828125,

                    25.905859247243498,

                    128.8046875,
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"insideBoundingBox":[[49.067996905313834,65.73828125,25.905859247243498,128.8046875]]}'),
            ],
        ]);
    }

    #[TestDox('insidePolygon')]
    public function testSearchSingleIndex23(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['insidePolygon' => [
                [
                    42.01,

                    -124.31,

                    48.835509470063045,

                    -124.40453125000005,

                    45.01082951668149,

                    -65.95726562500005,

                    31.247243545293433,

                    -81.06578125000004,

                    25.924152577235226,

                    -97.68234374999997,

                    32.300311895879545,

                    -117.54828125,
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}'),
            ],
        ]);
    }

    #[TestDox('insidePolygon')]
    public function testSearchSingleIndex24(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['insidePolygon' => [
                [
                    42.01,

                    -124.31,

                    48.835509470063045,

                    -124.40453125000005,

                    45.01082951668149,

                    -65.95726562500005,

                    31.247243545293433,

                    -81.06578125000004,

                    25.924152577235226,

                    -97.68234374999997,

                    32.300311895879545,

                    -117.54828125,
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}'),
            ],
        ]);
    }

    #[TestDox('optionalFilters')]
    public function testSearchSingleIndex25(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['optionalFilters' => [
                'can_deliver_quickly:true',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"optionalFilters":["can_deliver_quickly:true"]}'),
            ],
        ]);
    }

    #[TestDox('optionalFiltersMany')]
    public function testSearchSingleIndex26(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['optionalFilters' => [
                'brand:Apple<score=3>',

                'brand:Samsung<score=2>',

                'brand:-Huawei',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"optionalFilters":["brand:Apple<score=3>","brand:Samsung<score=2>","brand:-Huawei"]}'),
            ],
        ]);
    }

    #[TestDox('optionalFiltersSimple')]
    public function testSearchSingleIndex27(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['optionalFilters' => [
                'brand:Apple<score=2>',

                'type:tablet',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"optionalFilters":["brand:Apple<score=2>","type:tablet"]}'),
            ],
        ]);
    }

    #[TestDox('restrictSearchableAttributes')]
    public function testSearchSingleIndex28(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['restrictSearchableAttributes' => [
                'title_fr',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"restrictSearchableAttributes":["title_fr"]}'),
            ],
        ]);
    }

    #[TestDox('getRankingInfo')]
    public function testSearchSingleIndex29(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['getRankingInfo' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"getRankingInfo":true}'),
            ],
        ]);
    }

    #[TestDox('clickAnalytics')]
    public function testSearchSingleIndex30(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['clickAnalytics' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"clickAnalytics":true}'),
            ],
        ]);
    }

    #[TestDox('clickAnalyticsUserToken')]
    public function testSearchSingleIndex31(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['clickAnalytics' => true,
                'userToken' => 'user-1',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"clickAnalytics":true,"userToken":"user-1"}'),
            ],
        ]);
    }

    #[TestDox('enablePersonalization')]
    public function testSearchSingleIndex32(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['enablePersonalization' => true,
                'userToken' => 'user-1',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"enablePersonalization":true,"userToken":"user-1"}'),
            ],
        ]);
    }

    #[TestDox('userToken')]
    public function testSearchSingleIndex33(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['userToken' => 'user-1',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"userToken":"user-1"}'),
            ],
        ]);
    }

    #[TestDox('analyticsTag')]
    public function testSearchSingleIndex34(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['analyticsTags' => [
                'YOUR_ANALYTICS_TAG',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"analyticsTags":["YOUR_ANALYTICS_TAG"]}'),
            ],
        ]);
    }

    #[TestDox('facetFiltersUsers')]
    public function testSearchSingleIndex35(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['facetFilters' => [
                'user:user42',

                'user:public',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode('{"facetFilters":["user:user42","user:public"]}'),
            ],
        ]);
    }

    #[TestDox('buildTheQuery')]
    public function testSearchSingleIndex36(): void
    {
        $client = $this->getClient();
        $client->searchSingleIndex(
            'indexName',
            ['filters' => "categoryPageId: Men's Clothing",
                'hitsPerPage' => 50,
                'analyticsTags' => [
                    'mens-clothing',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/query',
                'method' => 'POST',
                'body' => json_decode("{\"filters\":\"categoryPageId: Men's Clothing\",\"hitsPerPage\":50,\"analyticsTags\":[\"mens-clothing\"]}"),
            ],
        ]);
    }

    #[TestDox('searchSynonyms with minimal parameters')]
    public function testSearchSynonyms(): void
    {
        $client = $this->getClient();
        $client->searchSynonyms(
            'indexName',
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/synonyms/search',
                'method' => 'POST',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('searchSynonyms with all parameters')]
    public function testSearchSynonyms1(): void
    {
        $client = $this->getClient();
        $client->searchSynonyms(
            'indexName',
            ['query' => 'myQuery',
                'type' => 'altcorrection1',
                'page' => 10,
                'hitsPerPage' => 10,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/indexName/synonyms/search',
                'method' => 'POST',
                'body' => json_decode('{"query":"myQuery","type":"altcorrection1","page":10,"hitsPerPage":10}'),
            ],
        ]);
    }

    #[TestDox('searchUserIds')]
    public function testSearchUserIds(): void
    {
        $client = $this->getClient();
        $client->searchUserIds(
            ['query' => 'test',
                'clusterName' => 'theClusterName',
                'page' => 5,
                'hitsPerPage' => 10,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/clusters/mapping/search',
                'method' => 'POST',
                'body' => json_decode('{"query":"test","clusterName":"theClusterName","page":5,"hitsPerPage":10}'),
            ],
        ]);
    }

    #[TestDox('get setDictionarySettings results with minimal parameters')]
    public function testSetDictionarySettings(): void
    {
        $client = $this->getClient();
        $client->setDictionarySettings(
            ['disableStandardEntries' => ['plurals' => ['fr' => false,
                'en' => false,
                'ru' => true,
            ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/*/settings',
                'method' => 'PUT',
                'body' => json_decode('{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true}}}'),
            ],
        ]);
    }

    #[TestDox('get setDictionarySettings results with all parameters')]
    public function testSetDictionarySettings1(): void
    {
        $client = $this->getClient();
        $client->setDictionarySettings(
            ['disableStandardEntries' => ['plurals' => ['fr' => false,
                'en' => false,
                'ru' => true,
            ],
                'stopwords' => ['fr' => false,
                ],
                'compounds' => ['ru' => true,
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/dictionaries/*/settings',
                'method' => 'PUT',
                'body' => json_decode('{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}'),
            ],
        ]);
    }

    #[TestDox('minimal parameters')]
    public function testSetSettings(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'cts_e2e_settings',
            ['paginationLimitedTo' => 10,
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/cts_e2e_settings/settings',
                'method' => 'PUT',
                'body' => json_decode('{"paginationLimitedTo":10}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('boolean typoTolerance')]
    public function testSetSettings1(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['typoTolerance' => true,
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"typoTolerance":true}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('enum typoTolerance')]
    public function testSetSettings2(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['typoTolerance' => 'min',
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"typoTolerance":"min"}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('ignorePlurals')]
    public function testSetSettings3(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['ignorePlurals' => true,
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"ignorePlurals":true}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('list of string ignorePlurals')]
    public function testSetSettings4(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['ignorePlurals' => [
                'fr',
            ],
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"ignorePlurals":["fr"]}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('removeStopWords boolean')]
    public function testSetSettings5(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['removeStopWords' => true,
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"removeStopWords":true}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('removeStopWords list of string')]
    public function testSetSettings6(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['removeStopWords' => [
                'fr',
            ],
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"removeStopWords":["fr"]}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('boolean distinct')]
    public function testSetSettings7(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['distinct' => true,
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"distinct":true}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('integer distinct')]
    public function testSetSettings8(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['distinct' => 1,
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"distinct":1}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('distinct company')]
    public function testSetSettings9(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['attributeForDistinct' => 'company',
                'distinct' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributeForDistinct":"company","distinct":true}'),
            ],
        ]);
    }

    #[TestDox('distinct design')]
    public function testSetSettings10(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['attributeForDistinct' => 'design',
                'distinct' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributeForDistinct":"design","distinct":true}'),
            ],
        ]);
    }

    #[TestDox('distinct true')]
    public function testSetSettings11(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['distinct' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"distinct":true}'),
            ],
        ]);
    }

    #[TestDox('distinct section')]
    public function testSetSettings12(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['attributeForDistinct' => 'section',
                'distinct' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributeForDistinct":"section","distinct":true}'),
            ],
        ]);
    }

    #[TestDox('attributesForFaceting allergens')]
    public function testSetSettings13(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'allergens',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributesForFaceting":["allergens"]}'),
            ],
        ]);
    }

    #[TestDox('attributesForFaceting categoryPageId')]
    public function testSetSettings14(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'searchable(categoryPageId)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributesForFaceting":["searchable(categoryPageId)"]}'),
            ],
        ]);
    }

    #[TestDox('unretrievableAttributes')]
    public function testSetSettings15(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['unretrievableAttributes' => [
                'visible_by',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"unretrievableAttributes":["visible_by"]}'),
            ],
        ]);
    }

    #[TestDox('attributesForFaceting user restricted data')]
    public function testSetSettings16(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'filterOnly(visible_by)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributesForFaceting":["filterOnly(visible_by)"]}'),
            ],
        ]);
    }

    #[TestDox('attributesForFaceting optional filters')]
    public function testSetSettings17(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'can_deliver_quickly',

                'restaurant',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributesForFaceting":["can_deliver_quickly","restaurant"]}'),
            ],
        ]);
    }

    #[TestDox('attributesForFaceting redirect index')]
    public function testSetSettings18(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'query_terms',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributesForFaceting":["query_terms"]}'),
            ],
        ]);
    }

    #[TestDox('attributesForFaceting multiple consequences')]
    public function testSetSettings19(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'director',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributesForFaceting":["director"]}'),
            ],
        ]);
    }

    #[TestDox('attributesForFaceting in-depth optional filters')]
    public function testSetSettings20(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'filterOnly(brand)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributesForFaceting":["filterOnly(brand)"]}'),
            ],
        ]);
    }

    #[TestDox('mode neuralSearch')]
    public function testSetSettings21(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['mode' => 'neuralSearch',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"mode":"neuralSearch"}'),
            ],
        ]);
    }

    #[TestDox('mode keywordSearch')]
    public function testSetSettings22(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['mode' => 'keywordSearch',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"mode":"keywordSearch"}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributes same priority')]
    public function testSetSettings23(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'title,comments',

                'ingredients',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["title,comments","ingredients"]}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributes higher priority')]
    public function testSetSettings24(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'title',

                'ingredients',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["title","ingredients"]}'),
            ],
        ]);
    }

    #[TestDox('customRanking retweets')]
    public function testSetSettings25(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'desc(retweets)',

                'desc(likes)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["desc(retweets)","desc(likes)"]}'),
            ],
        ]);
    }

    #[TestDox('customRanking boosted')]
    public function testSetSettings26(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'desc(boosted)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["desc(boosted)"]}'),
            ],
        ]);
    }

    #[TestDox('customRanking pageviews')]
    public function testSetSettings27(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'desc(pageviews)',

                'desc(comments)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["desc(pageviews)","desc(comments)"]}'),
            ],
        ]);
    }

    #[TestDox('customRanking applying search parameters for a specific query')]
    public function testSetSettings28(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'desc(nb_airline_liaisons)',
            ],
                'attributesForFaceting' => [
                    'city, country',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["desc(nb_airline_liaisons)"],"attributesForFaceting":["city, country"]}'),
            ],
        ]);
    }

    #[TestDox('customRanking rounded pageviews')]
    public function testSetSettings29(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'desc(rounded_pageviews)',

                'desc(comments)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["desc(rounded_pageviews)","desc(comments)"]}'),
            ],
        ]);
    }

    #[TestDox('customRanking price')]
    public function testSetSettings30(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'desc(price)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["desc(price)"]}'),
            ],
        ]);
    }

    #[TestDox('ranking exhaustive')]
    public function testSetSettings31(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['ranking' => [
                'desc(price)',

                'typo',

                'geo',

                'words',

                'filters',

                'proximity',

                'attribute',

                'exact',

                'custom',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"ranking":["desc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}'),
            ],
        ]);
    }

    #[TestDox('ranking standard replica')]
    public function testSetSettings32(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['ranking' => [
                'desc(post_date_timestamp)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"ranking":["desc(post_date_timestamp)"]}'),
            ],
        ]);
    }

    #[TestDox('ranking virtual replica')]
    public function testSetSettings33(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'desc(post_date_timestamp)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["desc(post_date_timestamp)"]}'),
            ],
        ]);
    }

    #[TestDox('customRanking and ranking sort alphabetically')]
    public function testSetSettings34(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'asc(textual_attribute)',
            ],
                'ranking' => [
                    'custom',

                    'typo',

                    'geo',

                    'words',

                    'filters',

                    'proximity',

                    'attribute',

                    'exact',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["asc(textual_attribute)"],"ranking":["custom","typo","geo","words","filters","proximity","attribute","exact"]}'),
            ],
        ]);
    }

    #[TestDox('relevancyStrictness')]
    public function testSetSettings35(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['customRanking' => [
                'asc(textual_attribute)',
            ],
                'relevancyStrictness' => 0,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"customRanking":["asc(textual_attribute)"],"relevancyStrictness":0}'),
            ],
        ]);
    }

    #[TestDox('create replica index')]
    public function testSetSettings36(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['replicas' => [
                'products_price_desc',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"replicas":["products_price_desc"]}'),
            ],
        ]);
    }

    #[TestDox('create virtual replica index')]
    public function testSetSettings37(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['replicas' => [
                'virtual(products_price_desc)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"replicas":["virtual(products_price_desc)"]}'),
            ],
        ]);
    }

    #[TestDox('unlink replica index')]
    public function testSetSettings38(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['replicas' => [
                '',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"replicas":[""]}'),
            ],
        ]);
    }

    #[TestDox('forwardToReplicas')]
    public function testSetSettings39(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'name',

                'description',
            ],
            ],
            true,
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["name","description"]}'),
                'queryParameters' => json_decode('{"forwardToReplicas":"true"}', true),
            ],
        ]);
    }

    #[TestDox('maxValuesPerFacet')]
    public function testSetSettings40(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['maxValuesPerFacet' => 1000,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"maxValuesPerFacet":1000}'),
            ],
        ]);
    }

    #[TestDox('maxFacetHits')]
    public function testSetSettings41(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['maxFacetHits' => 1000,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"maxFacetHits":1000}'),
            ],
        ]);
    }

    #[TestDox('attributesForFaceting complex')]
    public function testSetSettings42(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            '<YOUR_INDEX_NAME>',
            ['attributesForFaceting' => [
                'actor',

                'filterOnly(category)',

                'searchable(publisher)',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/%3CYOUR_INDEX_NAME%3E/settings',
                'method' => 'PUT',
                'body' => json_decode('{"attributesForFaceting":["actor","filterOnly(category)","searchable(publisher)"]}'),
            ],
        ]);
    }

    #[TestDox('ranking closest dates')]
    public function testSetSettings43(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['ranking' => [
                'asc(date_timestamp)',

                'typo',

                'geo',

                'words',

                'filters',

                'proximity',

                'attribute',

                'exact',

                'custom',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"ranking":["asc(date_timestamp)","typo","geo","words","filters","proximity","attribute","exact","custom"]}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributes item variation')]
    public function testSetSettings44(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'design',

                'type',

                'color',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["design","type","color"]}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributes around location')]
    public function testSetSettings45(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'name',

                'country',

                'code',

                'iata_code',
            ],
                'customRanking' => [
                    'desc(links_count)',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["name","country","code","iata_code"],"customRanking":["desc(links_count)"]}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributes around location')]
    public function testSetSettings46(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'name',

                'country',

                'code',

                'iata_code',
            ],
                'customRanking' => [
                    'desc(links_count)',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["name","country","code","iata_code"],"customRanking":["desc(links_count)"]}'),
            ],
        ]);
    }

    #[TestDox('disableTypoToleranceOnAttributes')]
    public function testSetSettings47(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['disableTypoToleranceOnAttributes' => [
                'serial_number',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"disableTypoToleranceOnAttributes":["serial_number"]}'),
            ],
        ]);
    }

    #[TestDox('everything')]
    public function testSetSettings48(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['advancedSyntax' => true,
                'advancedSyntaxFeatures' => [
                    'exactPhrase',
                ],
                'allowCompressionOfIntegerArray' => true,
                'allowTyposOnNumericTokens' => true,
                'alternativesAsExact' => [
                    'singleWordSynonym',
                ],
                'attributeCriteriaComputedByMinProximity' => true,
                'attributeForDistinct' => 'test',
                'attributesForFaceting' => [
                    'algolia',
                ],
                'attributesToHighlight' => [
                    'algolia',
                ],
                'attributesToRetrieve' => [
                    'algolia',
                ],
                'attributesToSnippet' => [
                    'algolia',
                ],
                'attributesToTransliterate' => [
                    'algolia',
                ],
                'camelCaseAttributes' => [
                    'algolia',
                ],
                'customNormalization' => ['algolia' => ['aloglia' => 'aglolia',
                ],
                ],
                'customRanking' => [
                    'algolia',
                ],
                'decompoundQuery' => false,
                'decompoundedAttributes' => ['algolia' => 'aloglia',
                ],
                'disableExactOnAttributes' => [
                    'algolia',
                ],
                'disablePrefixOnAttributes' => [
                    'algolia',
                ],
                'disableTypoToleranceOnAttributes' => [
                    'algolia',
                ],
                'disableTypoToleranceOnWords' => [
                    'algolia',
                ],
                'distinct' => 3,
                'enablePersonalization' => true,
                'enableReRanking' => false,
                'enableRules' => true,
                'exactOnSingleWordQuery' => 'attribute',
                'highlightPreTag' => '<span>',
                'highlightPostTag' => '</span>',
                'hitsPerPage' => 10,
                'ignorePlurals' => false,
                'indexLanguages' => [
                    'fr',
                ],
                'keepDiacriticsOnCharacters' => 'abc',
                'maxFacetHits' => 20,
                'maxValuesPerFacet' => 30,
                'minProximity' => 6,
                'minWordSizefor1Typo' => 5,
                'minWordSizefor2Typos' => 11,
                'mode' => 'neuralSearch',
                'numericAttributesForFiltering' => [
                    'algolia',
                ],
                'optionalWords' => [
                    'myspace',
                ],
                'paginationLimitedTo' => 0,
                'queryLanguages' => [
                    'fr',
                ],
                'queryType' => 'prefixLast',
                'ranking' => [
                    'geo',
                ],
                'reRankingApplyFilter' => 'mySearch:filters',
                'relevancyStrictness' => 10,
                'removeStopWords' => false,
                'removeWordsIfNoResults' => 'lastWords',
                'renderingContent' => ['facetOrdering' => ['facets' => ['order' => [
                    'a',

                    'b',
                ],
                ],
                    'values' => ['a' => ['order' => [
                        'b',
                    ],
                        'sortRemainingBy' => 'count',
                    ],
                    ],
                ],
                ],
                'replaceSynonymsInHighlight' => true,
                'replicas' => [
                    '',
                ],
                'responseFields' => [
                    'algolia',
                ],
                'restrictHighlightAndSnippetArrays' => true,
                'searchableAttributes' => [
                    'foo',
                ],
                'semanticSearch' => ['eventSources' => [
                    'foo',
                ],
                ],
                'separatorsToIndex' => 'bar',
                'snippetEllipsisText' => '---',
                'sortFacetValuesBy' => 'date',
                'typoTolerance' => false,
                'unretrievableAttributes' => [
                    'foo',
                ],
                'userData' => ['user' => 'data',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["fr"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["fr"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributesWithCustomRankingsAndAttributesForFaceting')]
    public function testSetSettings49(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'brand',

                'name',

                'categories',

                'unordered(description)',
            ],
                'customRanking' => [
                    'desc(popularity)',
                ],
                'attributesForFaceting' => [
                    'searchable(brand)',

                    'type',

                    'categories',

                    'price',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["brand","name","categories","unordered(description)"],"customRanking":["desc(popularity)"],"attributesForFaceting":["searchable(brand)","type","categories","price"]}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributesProductReferenceSuffixes')]
    public function testSetSettings50(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'name',

                'product_reference',

                'product_reference_suffixes',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["name","product_reference","product_reference_suffixes"]}'),
            ],
        ]);
    }

    #[TestDox('queryLanguageAndIgnorePlurals')]
    public function testSetSettings51(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['queryLanguages' => [
                'en',
            ],
                'ignorePlurals' => true,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"queryLanguages":["en"],"ignorePlurals":true}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributesInMovies')]
    public function testSetSettings52(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'movies',
            ['searchableAttributes' => [
                'title_eng',

                'title_fr',

                'title_es',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/movies/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["title_eng","title_fr","title_es"]}'),
            ],
        ]);
    }

    #[TestDox('disablePrefixOnAttributes')]
    public function testSetSettings53(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['disablePrefixOnAttributes' => [
                'serial_number',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"disablePrefixOnAttributes":["serial_number"]}'),
            ],
        ]);
    }

    #[TestDox('disableTypoToleranceOnAttributes')]
    public function testSetSettings54(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['disableTypoToleranceOnAttributes' => [
                'serial_number',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"disableTypoToleranceOnAttributes":["serial_number"]}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributesSimpleExample')]
    public function testSetSettings55(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'serial_number',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["serial_number"]}'),
            ],
        ]);
    }

    #[TestDox('searchableAttributesSimpleExampleAlt')]
    public function testSetSettings56(): void
    {
        $client = $this->getClient();
        $client->setSettings(
            'theIndexName',
            ['searchableAttributes' => [
                'serial_number',

                'serial_number_suffixes',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/indexes/theIndexName/settings',
                'method' => 'PUT',
                'body' => json_decode('{"searchableAttributes":["serial_number","serial_number_suffixes"]}'),
            ],
        ]);
    }

    #[TestDox('updateApiKey')]
    public function testUpdateApiKey(): void
    {
        $client = $this->getClient();
        $client->updateApiKey(
            'ALGOLIA_API_KEY',
            ['acl' => [
                'search',

                'addObject',
            ],
                'validity' => 300,
                'maxQueriesPerIPPerHour' => 100,
                'maxHitsPerQuery' => 20,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/keys/ALGOLIA_API_KEY',
                'method' => 'PUT',
                'body' => json_decode('{"acl":["search","addObject"],"validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}'),
            ],
        ]);
    }

    protected function assertRequests(array $requests): void
    {
        $this->assertGreaterThan(0, count($requests));
        $this->assertEquals(count($requests), count($this->recordedRequests));

        foreach ($requests as $i => $request) {
            $recordedRequest = $this->recordedRequests[$i];

            $this->assertEquals($request['method'], $recordedRequest->getMethod());

            $this->assertEquals($request['path'], $recordedRequest->getUri()->getPath());

            if (isset($request['body'])) {
                $this->assertEquals(
                    json_encode($request['body'], JSON_UNESCAPED_UNICODE),
                    $recordedRequest->getBody()->getContents()
                );
            }

            if (isset($request['queryParameters'])) {
                $this->assertEquals(
                    Query::build($request['queryParameters'], false),
                    $recordedRequest->getUri()->getQuery()
                );
            }

            if (isset($request['headers'])) {
                foreach ($request['headers'] as $key => $value) {
                    $this->assertArrayHasKey(
                        $key,
                        $recordedRequest->getHeaders()
                    );
                    $this->assertEquals(
                        $recordedRequest->getHeaderLine($key),
                        $value
                    );
                }
            }
        }
    }

    protected function getClient(): SearchClient
    {
        $config = SearchConfig::create('appID', 'apiKey');
        $api = new ApiWrapper($this, $config, ClusterHosts::create('127.0.0.1'));

        return new SearchClient($api, $config);
    }
}
