<?php

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

namespace Algolia\AlgoliaSearch\Test\Request;

use Algolia\AlgoliaSearch\Api\IngestionClient;
use Algolia\AlgoliaSearch\Configuration\IngestionConfig;
use Algolia\AlgoliaSearch\Http\HttpClientInterface;
use Algolia\AlgoliaSearch\Http\Psr7\Response;
use Algolia\AlgoliaSearch\RetryStrategy\ApiWrapper;
use Algolia\AlgoliaSearch\RetryStrategy\ClusterHosts;
use GuzzleHttp\Psr7\Query;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\TestDox;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

/**
 * @internal
 */
#[CoversClass(IngestionClient::class)]
class IngestionTest extends TestCase implements HttpClientInterface
{
    private $recordedRequests = [];

    public function sendRequest(RequestInterface $request, $timeout, $connectTimeout)
    {
        $this->recordedRequests[] = $request;

        return new Response(200, [], '{}');
    }

    #[TestDox('createAuthenticationOAuth')]
    public function testCreateAuthentication()
    {
        $client = $this->getClient();
        $client->createAuthentication(
            ['type' => 'oauth',
                'name' => 'authName',
                'input' => ['url' => 'http://test.oauth',
                    'client_id' => 'myID',
                    'client_secret' => 'mySecret',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/authentications',
                'method' => 'POST',
                'body' => json_decode('{"type":"oauth","name":"authName","input":{"url":"http://test.oauth","client_id":"myID","client_secret":"mySecret"}}'),
            ],
        ]);
    }

    #[TestDox('createAuthenticationAlgolia')]
    public function testCreateAuthentication1()
    {
        $client = $this->getClient();
        $client->createAuthentication(
            ['type' => 'algolia',
                'name' => 'authName',
                'input' => ['appID' => 'myappID',
                    'apiKey' => 'randomApiKey',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/authentications',
                'method' => 'POST',
                'body' => json_decode('{"type":"algolia","name":"authName","input":{"appID":"myappID","apiKey":"randomApiKey"}}'),
            ],
        ]);
    }

    #[TestDox('createDestination')]
    public function testCreateDestination()
    {
        $client = $this->getClient();
        $client->createDestination(
            ['type' => 'search',
                'name' => 'destinationName',
                'input' => ['indexPrefix' => 'prefix_',
                ],
                'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/destinations',
                'method' => 'POST',
                'body' => json_decode('{"type":"search","name":"destinationName","input":{"indexPrefix":"prefix_"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}'),
            ],
        ]);
    }

    #[TestDox('createSource')]
    public function testCreateSource()
    {
        $client = $this->getClient();
        $client->createSource(
            ['type' => 'commercetools',
                'name' => 'sourceName',
                'input' => ['storeKeys' => [
                    'myStore',
                ],
                    'locales' => [
                        'de',
                    ],
                    'url' => 'http://commercetools.com',
                    'projectKey' => 'keyID',
                ],
                'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/sources',
                'method' => 'POST',
                'body' => json_decode('{"type":"commercetools","name":"sourceName","input":{"storeKeys":["myStore"],"locales":["de"],"url":"http://commercetools.com","projectKey":"keyID"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}'),
            ],
        ]);
    }

    #[TestDox('task without cron')]
    public function testCreateTask()
    {
        $client = $this->getClient();
        $client->createTask(
            ['sourceID' => 'search',
                'destinationID' => 'destinationName',
                'action' => 'replace',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks',
                'method' => 'POST',
                'body' => json_decode('{"sourceID":"search","destinationID":"destinationName","action":"replace"}'),
            ],
        ]);
    }

    #[TestDox('task with cron')]
    public function testCreateTask1()
    {
        $client = $this->getClient();
        $client->createTask(
            ['sourceID' => 'search',
                'destinationID' => 'destinationName',
                'cron' => '* * * * *',
                'action' => 'replace',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks',
                'method' => 'POST',
                'body' => json_decode('{"sourceID":"search","destinationID":"destinationName","cron":"* * * * *","action":"replace"}'),
            ],
        ]);
    }

    #[TestDox('createTaskOnDemand')]
    public function testCreateTaskV1()
    {
        $client = $this->getClient();
        $client->createTaskV1(
            ['sourceID' => 'search',
                'destinationID' => 'destinationName',
                'trigger' => ['type' => 'onDemand',
                ],
                'action' => 'replace',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks',
                'method' => 'POST',
                'body' => json_decode('{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"onDemand"},"action":"replace"}'),
            ],
        ]);
    }

    #[TestDox('createTaskSchedule')]
    public function testCreateTaskV11()
    {
        $client = $this->getClient();
        $client->createTaskV1(
            ['sourceID' => 'search',
                'destinationID' => 'destinationName',
                'trigger' => ['type' => 'schedule',
                    'cron' => '* * * * *',
                ],
                'action' => 'replace',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks',
                'method' => 'POST',
                'body' => json_decode('{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"schedule","cron":"* * * * *"},"action":"replace"}'),
            ],
        ]);
    }

    #[TestDox('createTaskSubscription')]
    public function testCreateTaskV12()
    {
        $client = $this->getClient();
        $client->createTaskV1(
            ['sourceID' => 'search',
                'destinationID' => 'destinationName',
                'trigger' => ['type' => 'onDemand',
                ],
                'action' => 'replace',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks',
                'method' => 'POST',
                'body' => json_decode('{"sourceID":"search","destinationID":"destinationName","trigger":{"type":"onDemand"},"action":"replace"}'),
            ],
        ]);
    }

    #[TestDox('createTransformation')]
    public function testCreateTransformation()
    {
        $client = $this->getClient();
        $client->createTransformation(
            ['code' => 'foo',
                'name' => 'bar',
                'description' => 'baz',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/transformations',
                'method' => 'POST',
                'body' => json_decode('{"code":"foo","name":"bar","description":"baz"}'),
            ],
        ]);
    }

    #[TestDox('allow del method for a custom path with minimal parameters')]
    public function testCustomDelete()
    {
        $client = $this->getClient();
        $client->customDelete(
            'test/minimal',
        );

        $this->assertRequests([
            [
                'path' => '/test/minimal',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('allow del method for a custom path with all parameters')]
    public function testCustomDelete1()
    {
        $client = $this->getClient();
        $client->customDelete(
            'test/all',
            ['query' => 'parameters',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'DELETE',
                'body' => null,
                'queryParameters' => json_decode('{"query":"parameters"}', true),
            ],
        ]);
    }

    #[TestDox('allow get method for a custom path with minimal parameters')]
    public function testCustomGet()
    {
        $client = $this->getClient();
        $client->customGet(
            'test/minimal',
        );

        $this->assertRequests([
            [
                'path' => '/test/minimal',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('allow get method for a custom path with all parameters')]
    public function testCustomGet1()
    {
        $client = $this->getClient();
        $client->customGet(
            'test/all',
            ['query' => 'parameters with space',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"query":"parameters%20with%20space"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions should be escaped too')]
    public function testCustomGet2()
    {
        $client = $this->getClient();
        $client->customGet(
            'test/all',
            ['query' => 'to be overriden',
            ],
            [
                'queryParameters' => [
                    'query' => 'parameters with space',
                    'and an array' => ['array', 'with spaces',
                    ],
                ],
                'headers' => [
                    'x-header-1' => 'spaces are left alone',
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"query":"parameters%20with%20space","and%20an%20array":"array%2Cwith%20spaces"}', true),
                'headers' => json_decode('{"x-header-1":"spaces are left alone"}', true),
            ],
        ]);
    }

    #[TestDox('allow post method for a custom path with minimal parameters')]
    public function testCustomPost()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/minimal',
        );

        $this->assertRequests([
            [
                'path' => '/test/minimal',
                'method' => 'POST',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('allow post method for a custom path with all parameters')]
    public function testCustomPost1()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/all',
            ['query' => 'parameters',
            ],
            ['body' => 'parameters',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'POST',
                'body' => json_decode('{"body":"parameters"}'),
                'queryParameters' => json_decode('{"query":"parameters"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions can override default query parameters')]
    public function testCustomPost2()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'query' => 'myQueryParameter',
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"myQueryParameter"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions merges query parameters with default ones')]
    public function testCustomPost3()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'query2' => 'myQueryParameter',
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","query2":"myQueryParameter"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions can override default headers')]
    public function testCustomPost4()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'headers' => [
                    'x-algolia-api-key' => 'myApiKey',
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters"}', true),
                'headers' => json_decode('{"x-algolia-api-key":"myApiKey"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions merges headers with default ones')]
    public function testCustomPost5()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'headers' => [
                    'x-algolia-api-key' => 'myApiKey',
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters"}', true),
                'headers' => json_decode('{"x-algolia-api-key":"myApiKey"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts booleans')]
    public function testCustomPost6()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'isItWorking' => true,
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","isItWorking":"true"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts integers')]
    public function testCustomPost7()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => 2,
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","myParam":"2"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts list of string')]
    public function testCustomPost8()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => ['b and c', 'd',
                    ],
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","myParam":"b%20and%20c%2Cd"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts list of booleans')]
    public function testCustomPost9()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => [true, true, false,
                    ],
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}', true),
            ],
        ]);
    }

    #[TestDox('requestOptions queryParameters accepts list of integers')]
    public function testCustomPost10()
    {
        $client = $this->getClient();
        $client->customPost(
            'test/requestOptions',
            ['query' => 'parameters',
            ],
            ['facet' => 'filters',
            ],
            [
                'queryParameters' => [
                    'myParam' => [1, 2,
                    ],
                ],
            ]
        );

        $this->assertRequests([
            [
                'path' => '/test/requestOptions',
                'method' => 'POST',
                'body' => json_decode('{"facet":"filters"}'),
                'queryParameters' => json_decode('{"query":"parameters","myParam":"1%2C2"}', true),
            ],
        ]);
    }

    #[TestDox('allow put method for a custom path with minimal parameters')]
    public function testCustomPut()
    {
        $client = $this->getClient();
        $client->customPut(
            'test/minimal',
        );

        $this->assertRequests([
            [
                'path' => '/test/minimal',
                'method' => 'PUT',
                'body' => json_decode('{}'),
            ],
        ]);
    }

    #[TestDox('allow put method for a custom path with all parameters')]
    public function testCustomPut1()
    {
        $client = $this->getClient();
        $client->customPut(
            'test/all',
            ['query' => 'parameters',
            ],
            ['body' => 'parameters',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/test/all',
                'method' => 'PUT',
                'body' => json_decode('{"body":"parameters"}'),
                'queryParameters' => json_decode('{"query":"parameters"}', true),
            ],
        ]);
    }

    #[TestDox('deleteAuthentication')]
    public function testDeleteAuthentication()
    {
        $client = $this->getClient();
        $client->deleteAuthentication(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteDestination')]
    public function testDeleteDestination()
    {
        $client = $this->getClient();
        $client->deleteDestination(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteSource')]
    public function testDeleteSource()
    {
        $client = $this->getClient();
        $client->deleteSource(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteTask')]
    public function testDeleteTask()
    {
        $client = $this->getClient();
        $client->deleteTask(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteTaskV1')]
    public function testDeleteTaskV1()
    {
        $client = $this->getClient();
        $client->deleteTaskV1(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('deleteTransformation')]
    public function testDeleteTransformation()
    {
        $client = $this->getClient();
        $client->deleteTransformation(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'DELETE',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('disableTask')]
    public function testDisableTask()
    {
        $client = $this->getClient();
        $client->disableTask(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable',
                'method' => 'PUT',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('disableTaskV1')]
    public function testDisableTaskV1()
    {
        $client = $this->getClient();
        $client->disableTaskV1(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable',
                'method' => 'PUT',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('enableTask')]
    public function testEnableTask()
    {
        $client = $this->getClient();
        $client->enableTask(
            '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable',
                'method' => 'PUT',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('enableTaskV1')]
    public function testEnableTaskV1()
    {
        $client = $this->getClient();
        $client->enableTaskV1(
            '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable',
                'method' => 'PUT',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('getAuthentication')]
    public function testGetAuthentication()
    {
        $client = $this->getClient();
        $client->getAuthentication(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getDestination')]
    public function testGetDestination()
    {
        $client = $this->getClient();
        $client->getDestination(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getEvent')]
    public function testGetEvent()
    {
        $client = $this->getClient();
        $client->getEvent(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            '6c02aeb1-775e-418e-870b-1faccd4b2c0c',
        );

        $this->assertRequests([
            [
                'path' => '/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events/6c02aeb1-775e-418e-870b-1faccd4b2c0c',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getRun')]
    public function testGetRun()
    {
        $client = $this->getClient();
        $client->getRun(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getSource')]
    public function testGetSource()
    {
        $client = $this->getClient();
        $client->getSource(
            '75eeb306-51d3-4e5e-a279-3c92bd8893ac',
        );

        $this->assertRequests([
            [
                'path' => '/1/sources/75eeb306-51d3-4e5e-a279-3c92bd8893ac',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getTask')]
    public function testGetTask()
    {
        $client = $this->getClient();
        $client->getTask(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getTaskV1')]
    public function testGetTaskV1()
    {
        $client = $this->getClient();
        $client->getTaskV1(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getTransformation')]
    public function testGetTransformation()
    {
        $client = $this->getClient();
        $client->getTransformation(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getAuthentications')]
    public function testListAuthentications()
    {
        $client = $this->getClient();
        $client->listAuthentications();

        $this->assertRequests([
            [
                'path' => '/1/authentications',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getAuthentications with query params')]
    public function testListAuthentications1()
    {
        $client = $this->getClient();
        $client->listAuthentications(
            2,
            1,
            [
                'basic',

                'algolia',
            ],
            [
                'none',
            ],
            'createdAt',
            'asc',
        );

        $this->assertRequests([
            [
                'path' => '/1/authentications',
                'method' => 'GET',
                'body' => null,
                'queryParameters' => json_decode('{"itemsPerPage":"2","page":"1","type":"basic%2Calgolia","platform":"none","sort":"createdAt","order":"asc"}', true),
            ],
        ]);
    }

    #[TestDox('getDestinations')]
    public function testListDestinations()
    {
        $client = $this->getClient();
        $client->listDestinations();

        $this->assertRequests([
            [
                'path' => '/1/destinations',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getEvents')]
    public function testListEvents()
    {
        $client = $this->getClient();
        $client->listEvents(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getRuns')]
    public function testListRuns()
    {
        $client = $this->getClient();
        $client->listRuns();

        $this->assertRequests([
            [
                'path' => '/1/runs',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getSources')]
    public function testListSources()
    {
        $client = $this->getClient();
        $client->listSources();

        $this->assertRequests([
            [
                'path' => '/1/sources',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('listTasks')]
    public function testListTasks()
    {
        $client = $this->getClient();
        $client->listTasks();

        $this->assertRequests([
            [
                'path' => '/2/tasks',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('listTasksV1')]
    public function testListTasksV1()
    {
        $client = $this->getClient();
        $client->listTasksV1();

        $this->assertRequests([
            [
                'path' => '/1/tasks',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('getTransformations')]
    public function testListTransformations()
    {
        $client = $this->getClient();
        $client->listTransformations();

        $this->assertRequests([
            [
                'path' => '/1/transformations',
                'method' => 'GET',
                'body' => null,
            ],
        ]);
    }

    #[TestDox('pushTask')]
    public function testPushTask()
    {
        $client = $this->getClient();
        $client->pushTask(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['requests' => [
                ['action' => 'addObject',
                    'body' => ['key' => 'bar',
                        'foo' => '1',
                    ],
                ],

                ['action' => 'addObject',
                    'body' => ['key' => 'baz',
                        'foo' => '2',
                    ],
                ],
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/push',
                'method' => 'POST',
                'body' => json_decode('{"requests":[{"action":"addObject","body":{"key":"bar","foo":"1"}},{"action":"addObject","body":{"key":"baz","foo":"2"}}]}'),
            ],
        ]);
    }

    #[TestDox('runSource')]
    public function testRunSource()
    {
        $client = $this->getClient();
        $client->runSource(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['indexToInclude' => [
                'products_us',

                'products eu',
            ],
                'entityIDs' => [
                    '1234',

                    '5678',
                ],
                'entityType' => 'product',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run',
                'method' => 'POST',
                'body' => json_decode('{"indexToInclude":["products_us","products eu"],"entityIDs":["1234","5678"],"entityType":"product"}'),
            ],
        ]);
    }

    #[TestDox('runTask')]
    public function testRunTask()
    {
        $client = $this->getClient();
        $client->runTask(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run',
                'method' => 'POST',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('runTaskV1')]
    public function testRunTaskV1()
    {
        $client = $this->getClient();
        $client->runTaskV1(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run',
                'method' => 'POST',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('searchAuthentications')]
    public function testSearchAuthentications()
    {
        $client = $this->getClient();
        $client->searchAuthentications(
            ['authenticationIDs' => [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/authentications/search',
                'method' => 'POST',
                'body' => json_decode('{"authenticationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}'),
            ],
        ]);
    }

    #[TestDox('searchDestinations')]
    public function testSearchDestinations()
    {
        $client = $this->getClient();
        $client->searchDestinations(
            ['destinationIDs' => [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/destinations/search',
                'method' => 'POST',
                'body' => json_decode('{"destinationIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}'),
            ],
        ]);
    }

    #[TestDox('searchSources')]
    public function testSearchSources()
    {
        $client = $this->getClient();
        $client->searchSources(
            ['sourceIDs' => [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/sources/search',
                'method' => 'POST',
                'body' => json_decode('{"sourceIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a"]}'),
            ],
        ]);
    }

    #[TestDox('searchTasks')]
    public function testSearchTasks()
    {
        $client = $this->getClient();
        $client->searchTasks(
            ['taskIDs' => [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',

                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks/search',
                'method' => 'POST',
                'body' => json_decode('{"taskIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}'),
            ],
        ]);
    }

    #[TestDox('searchTasksV1')]
    public function testSearchTasksV1()
    {
        $client = $this->getClient();
        $client->searchTasksV1(
            ['taskIDs' => [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',

                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks/search',
                'method' => 'POST',
                'body' => json_decode('{"taskIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}'),
            ],
        ]);
    }

    #[TestDox('searchTransformations')]
    public function testSearchTransformations()
    {
        $client = $this->getClient();
        $client->searchTransformations(
            ['transformationsIDs' => [
                '6c02aeb1-775e-418e-870b-1faccd4b2c0f',

                '947ac9c4-7e58-4c87-b1e7-14a68e99699a',

                '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/transformations/search',
                'method' => 'POST',
                'body' => json_decode('{"transformationsIDs":["6c02aeb1-775e-418e-870b-1faccd4b2c0f","947ac9c4-7e58-4c87-b1e7-14a68e99699a","76ab4c2a-ce17-496f-b7a6-506dc59ee498"]}'),
            ],
        ]);
    }

    #[TestDox('triggerDockerSourceDiscover')]
    public function testTriggerDockerSourceDiscover()
    {
        $client = $this->getClient();
        $client->triggerDockerSourceDiscover(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        );

        $this->assertRequests([
            [
                'path' => '/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/discover',
                'method' => 'POST',
                'body' => json_decode(''),
            ],
        ]);
    }

    #[TestDox('tryTransformations')]
    public function testTryTransformations()
    {
        $client = $this->getClient();
        $client->tryTransformations(
            ['code' => 'foo',
                'sampleRecord' => ['bar' => 'baz',
                ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/transformations/try',
                'method' => 'POST',
                'body' => json_decode('{"code":"foo","sampleRecord":{"bar":"baz"}}'),
            ],
        ]);
    }

    #[TestDox('updateAuthentication')]
    public function testUpdateAuthentication()
    {
        $client = $this->getClient();
        $client->updateAuthentication(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['name' => 'newName',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'PATCH',
                'body' => json_decode('{"name":"newName"}'),
            ],
        ]);
    }

    #[TestDox('updateDestination')]
    public function testUpdateDestination()
    {
        $client = $this->getClient();
        $client->updateDestination(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['name' => 'newName',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'PATCH',
                'body' => json_decode('{"name":"newName"}'),
            ],
        ]);
    }

    #[TestDox('updateSource')]
    public function testUpdateSource()
    {
        $client = $this->getClient();
        $client->updateSource(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['name' => 'newName',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'PATCH',
                'body' => json_decode('{"name":"newName"}'),
            ],
        ]);
    }

    #[TestDox('updateTask')]
    public function testUpdateTask()
    {
        $client = $this->getClient();
        $client->updateTask(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['enabled' => false,
                'cron' => '* * * * *',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'PATCH',
                'body' => json_decode('{"enabled":false,"cron":"* * * * *"}'),
            ],
        ]);
    }

    #[TestDox('updateTaskV1')]
    public function testUpdateTaskV1()
    {
        $client = $this->getClient();
        $client->updateTaskV1(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['enabled' => false,
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'PATCH',
                'body' => json_decode('{"enabled":false}'),
            ],
        ]);
    }

    #[TestDox('updateTransformation')]
    public function testUpdateTransformation()
    {
        $client = $this->getClient();
        $client->updateTransformation(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['code' => 'foo',
                'name' => 'bar',
                'description' => 'baz',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f',
                'method' => 'PUT',
                'body' => json_decode('{"code":"foo","name":"bar","description":"baz"}'),
            ],
        ]);
    }

    #[TestDox('validateSource')]
    public function testValidateSource()
    {
        $client = $this->getClient();
        $client->validateSource(
            ['type' => 'commercetools',
                'name' => 'sourceName',
                'input' => ['storeKeys' => [
                    'myStore',
                ],
                    'locales' => [
                        'de',
                    ],
                    'url' => 'http://commercetools.com',
                    'projectKey' => 'keyID',
                ],
                'authenticationID' => '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/sources/validate',
                'method' => 'POST',
                'body' => json_decode('{"type":"commercetools","name":"sourceName","input":{"storeKeys":["myStore"],"locales":["de"],"url":"http://commercetools.com","projectKey":"keyID"},"authenticationID":"6c02aeb1-775e-418e-870b-1faccd4b2c0f"}'),
            ],
        ]);
    }

    #[TestDox('validateSourceBeforeUpdate')]
    public function testValidateSourceBeforeUpdate()
    {
        $client = $this->getClient();
        $client->validateSourceBeforeUpdate(
            '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
            ['name' => 'newName',
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/validate',
                'method' => 'POST',
                'body' => json_decode('{"name":"newName"}'),
            ],
        ]);
    }

    protected function assertRequests(array $requests)
    {
        $this->assertGreaterThan(0, count($requests));
        $this->assertEquals(count($requests), count($this->recordedRequests));

        foreach ($requests as $i => $request) {
            $recordedRequest = $this->recordedRequests[$i];

            $this->assertEquals($request['method'], $recordedRequest->getMethod());

            $this->assertEquals($request['path'], $recordedRequest->getUri()->getPath());

            if (isset($request['body'])) {
                $this->assertEquals(
                    json_encode($request['body']),
                    $recordedRequest->getBody()->getContents()
                );
            }

            if (isset($request['queryParameters'])) {
                $this->assertEquals(
                    Query::build($request['queryParameters'], false),
                    $recordedRequest->getUri()->getQuery()
                );
            }

            if (isset($request['headers'])) {
                foreach ($request['headers'] as $key => $value) {
                    $this->assertArrayHasKey(
                        $key,
                        $recordedRequest->getHeaders()
                    );
                    $this->assertEquals(
                        $recordedRequest->getHeaderLine($key),
                        $value
                    );
                }
            }
        }
    }

    protected function getClient()
    {
        $config = IngestionConfig::create('appID', 'apiKey', 'us');
        $api = new ApiWrapper($this, $config, ClusterHosts::create('127.0.0.1'));

        return new IngestionClient($api, $config);
    }
}
