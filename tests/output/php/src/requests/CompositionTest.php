<?php

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

namespace Algolia\AlgoliaSearch\Test\Request;

use Algolia\AlgoliaSearch\Api\CompositionClient;
use Algolia\AlgoliaSearch\Configuration\CompositionConfig;
use Algolia\AlgoliaSearch\Http\HttpClientInterface;
use Algolia\AlgoliaSearch\Http\Psr7\Response;
use Algolia\AlgoliaSearch\RetryStrategy\ApiWrapper;
use Algolia\AlgoliaSearch\RetryStrategy\ClusterHosts;
use GuzzleHttp\Psr7\Query;
use PHPUnit\Framework\Attributes\CoversClass;
use PHPUnit\Framework\Attributes\TestDox;
use PHPUnit\Framework\TestCase;
use Psr\Http\Message\RequestInterface;

/**
 * @internal
 */
#[CoversClass(CompositionClient::class)]
class CompositionTest extends TestCase implements HttpClientInterface
{
    private $recordedRequests = [];

    public function sendRequest(RequestInterface $request, $timeout, $connectTimeout): Response
    {
        $this->recordedRequests[] = $request;

        return new Response(200, [], '{}');
    }

    #[TestDox('search')]
    public function testSearch(): void
    {
        $client = $this->getClient();
        $client->search(
            'foo',
            ['params' => ['query' => 'batman',
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/compositions/foo/run',
                'method' => 'POST',
                'body' => json_decode('{"params":{"query":"batman"}}'),
            ],
        ]);
    }

    #[TestDox('searchForFacetValues')]
    public function testSearchForFacetValues(): void
    {
        $client = $this->getClient();
        $client->searchForFacetValues(
            'foo',
            'brand',
            ['params' => ['maxFacetHits' => 10,
            ],
            ],
        );

        $this->assertRequests([
            [
                'path' => '/1/compositions/foo/facets/brand/query',
                'method' => 'POST',
                'body' => json_decode('{"params":{"maxFacetHits":10}}'),
            ],
        ]);
    }

    protected function assertRequests(array $requests): void
    {
        $this->assertGreaterThan(0, count($requests));
        $this->assertEquals(count($requests), count($this->recordedRequests));

        foreach ($requests as $i => $request) {
            $recordedRequest = $this->recordedRequests[$i];

            $this->assertEquals($request['method'], $recordedRequest->getMethod());

            $this->assertEquals($request['path'], $recordedRequest->getUri()->getPath());

            if (isset($request['body'])) {
                $this->assertEquals(
                    json_encode($request['body'], JSON_UNESCAPED_UNICODE),
                    $recordedRequest->getBody()->getContents()
                );
            }

            if (isset($request['queryParameters'])) {
                $this->assertEquals(
                    Query::build($request['queryParameters'], false),
                    $recordedRequest->getUri()->getQuery()
                );
            }

            if (isset($request['headers'])) {
                foreach ($request['headers'] as $key => $value) {
                    $this->assertArrayHasKey(
                        $key,
                        $recordedRequest->getHeaders()
                    );
                    $this->assertEquals(
                        $recordedRequest->getHeaderLine($key),
                        $value
                    );
                }
            }
        }
    }

    protected function getClient(): CompositionClient
    {
        $config = CompositionConfig::create('appID', 'apiKey');
        $api = new ApiWrapper($this, $config, ClusterHosts::create('127.0.0.1'));

        return new CompositionClient($api, $config);
    }
}
