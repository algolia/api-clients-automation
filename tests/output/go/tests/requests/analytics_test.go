// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package requests

import (
	"context"
	"encoding/json"
	"gotests/tests"
	"testing"

	"github.com/kinbiko/jsonassert"
	"github.com/stretchr/testify/require"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/next/analytics"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
)

func createAnalyticsClient(t *testing.T) (*analytics.APIClient, *tests.EchoRequester) {
	t.Helper()

	echo := &tests.EchoRequester{}
	cfg := analytics.AnalyticsConfiguration{
		Configuration: transport.Configuration{
			AppID:     "appID",
			ApiKey:    "apiKey",
			Requester: echo,
		},
		Region: analytics.US,
	}
	client, err := analytics.NewClientWithConfig(cfg)
	require.NoError(t, err)

	return client, echo
}

func TestAnalytics_CustomDelete(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("allow del method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomDelete(context.Background(), "test/minimal", nil)
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("allow del method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomDelete(context.Background(), "test/all", map[string]any{"query": "parameters"})
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_CustomGet(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("allow get method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomGet(context.Background(), "test/minimal", nil)
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("allow get method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomGet(context.Background(), "test/all", map[string]any{"query": "parameters with space"})
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters%20with%20space"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions should be escaped too", func(t *testing.T) {
		_, err := client.CustomGet(
			context.Background(),
			"test/all",
			map[string]any{"query": "to be overridden"},
			analytics.WithQueryParam("query", "parameters with space"),
			analytics.WithQueryParam("and an array",
				[]string{"array", "with spaces"}),
			analytics.WithHeaderParam("x-header-1", "spaces are left alone"),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-header-1":"spaces are left alone"}`), &headers))

		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters%20with%20space","and%20an%20array":"array%2Cwith%20spaces"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_CustomPost(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("allow post method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomPost(context.Background(), "test/minimal", nil)
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("allow post method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/all",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"body":"parameters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions can override default query parameters", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithQueryParam("query", "myQueryParameter"),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"myQueryParameter"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions merges query parameters with default ones", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithQueryParam("query2", "myQueryParameter"),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","query2":"myQueryParameter"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions can override default headers", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-api-key":"ALGOLIA_API_KEY"}`), &headers))

		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions merges headers with default ones", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-api-key":"ALGOLIA_API_KEY"}`), &headers))

		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts booleans", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithQueryParam("isItWorking", true),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","isItWorking":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts integers", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithQueryParam("myParam", 2),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"2"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of string", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithQueryParam("myParam",
				[]string{"b and c", "d"}),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"b%20and%20c%2Cd"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of booleans", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithQueryParam("myParam",
				[]bool{true, true, false}),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of integers", func(t *testing.T) {
		_, err := client.CustomPost(
			context.Background(),
			"test/requestOptions",
			analytics.NewCustomPostOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}),
			analytics.WithQueryParam("myParam",
				[]int{1, 2}),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"1%2C2"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_CustomPut(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("allow put method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomPut(context.Background(), "test/minimal", nil)
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("allow put method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomPut(
			context.Background(),
			"test/all",
			analytics.NewCustomPutOptions().WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}),
		)
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"body":"parameters"}`)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetAddToCartRate(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getAddToCartRate with minimal parameters", func(t *testing.T) {
		_, err := client.GetAddToCartRate(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/conversions/addToCartRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getAddToCartRate with all parameters", func(t *testing.T) {
		_, err := client.GetAddToCartRate(
			context.Background(),
			"index",
			analytics.NewGetAddToCartRateOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/conversions/addToCartRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetAverageClickPosition(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getAverageClickPosition with minimal parameters", func(t *testing.T) {
		_, err := client.GetAverageClickPosition(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/clicks/averageClickPosition", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getAverageClickPosition with all parameters", func(t *testing.T) {
		_, err := client.GetAverageClickPosition(
			context.Background(),
			"index",
			analytics.NewGetAverageClickPositionOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/clicks/averageClickPosition", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetClickPositions(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getClickPositions with minimal parameters", func(t *testing.T) {
		_, err := client.GetClickPositions(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/clicks/positions", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getClickPositions with all parameters", func(t *testing.T) {
		_, err := client.GetClickPositions(
			context.Background(),
			"index",
			analytics.NewGetClickPositionsOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/clicks/positions", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetClickThroughRate(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getClickThroughRate with minimal parameters", func(t *testing.T) {
		_, err := client.GetClickThroughRate(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/clicks/clickThroughRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getClickThroughRate with all parameters", func(t *testing.T) {
		_, err := client.GetClickThroughRate(
			context.Background(),
			"index",
			analytics.NewGetClickThroughRateOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/clicks/clickThroughRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetConversionRate(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getConversationRate with minimal parameters", func(t *testing.T) {
		_, err := client.GetConversionRate(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/conversions/conversionRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getConversationRate with all parameters", func(t *testing.T) {
		_, err := client.GetConversionRate(
			context.Background(),
			"index",
			analytics.NewGetConversionRateOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/conversions/conversionRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetNoClickRate(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getNoClickRate with minimal parameters", func(t *testing.T) {
		_, err := client.GetNoClickRate(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/noClickRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getNoClickRate with all parameters", func(t *testing.T) {
		_, err := client.GetNoClickRate(
			context.Background(),
			"index",
			analytics.NewGetNoClickRateOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/noClickRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetNoResultsRate(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getNoResultsRate with minimal parameters", func(t *testing.T) {
		_, err := client.GetNoResultsRate(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/noResultRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getNoResultsRate with all parameters", func(t *testing.T) {
		_, err := client.GetNoResultsRate(
			context.Background(),
			"index",
			analytics.NewGetNoResultsRateOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/noResultRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetPurchaseRate(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getPurchaseRate with minimal parameters", func(t *testing.T) {
		_, err := client.GetPurchaseRate(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/conversions/purchaseRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getPurchaseRate with all parameters", func(t *testing.T) {
		_, err := client.GetPurchaseRate(
			context.Background(),
			"index",
			analytics.NewGetPurchaseRateOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/conversions/purchaseRate", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetRevenue(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getRevenue with minimal parameters", func(t *testing.T) {
		_, err := client.GetRevenue(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/conversions/revenue", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getRevenue with all parameters", func(t *testing.T) {
		_, err := client.GetRevenue(
			context.Background(),
			"index",
			analytics.NewGetRevenueOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/conversions/revenue", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetSearchesCount(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getSearchesCount with minimal parameters", func(t *testing.T) {
		_, err := client.GetSearchesCount(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/count", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getSearchesCount with all parameters", func(t *testing.T) {
		_, err := client.GetSearchesCount(
			context.Background(),
			"index",
			analytics.NewGetSearchesCountOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/count", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetSearchesNoClicks(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getSearchesNoClicks with minimal parameters", func(t *testing.T) {
		_, err := client.GetSearchesNoClicks(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/noClicks", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getSearchesNoClicks with all parameters", func(t *testing.T) {
		_, err := client.GetSearchesNoClicks(
			context.Background(),
			"index",
			analytics.NewGetSearchesNoClicksOptions().
				WithStartDate("1999-09-19").
				WithEndDate("2001-01-01").
				WithLimit(21).
				WithOffset(42).
				WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/noClicks", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}`),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetSearchesNoResults(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getSearchesNoResults with minimal parameters", func(t *testing.T) {
		_, err := client.GetSearchesNoResults(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/noResults", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getSearchesNoResults with all parameters", func(t *testing.T) {
		_, err := client.GetSearchesNoResults(
			context.Background(),
			"index",
			analytics.NewGetSearchesNoResultsOptions().
				WithStartDate("1999-09-19").
				WithEndDate("2001-01-01").
				WithLimit(21).
				WithOffset(42).
				WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/searches/noResults", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}`),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetStatus(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getStatus with minimal parameters", func(t *testing.T) {
		_, err := client.GetStatus(context.Background(), "index")
		require.NoError(t, err)

		require.Equal(t, "/2/status", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetTopCountries(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getTopCountries with minimal parameters", func(t *testing.T) {
		_, err := client.GetTopCountries(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/countries", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getTopCountries with all parameters", func(t *testing.T) {
		_, err := client.GetTopCountries(
			context.Background(),
			"index",
			analytics.NewGetTopCountriesOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithLimit(21).WithOffset(42).WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/countries", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}`),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetTopFilterAttributes(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getTopFilterAttributes with minimal parameters", func(t *testing.T) {
		_, err := client.GetTopFilterAttributes(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/filters", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getTopFilterAttributes with all parameters", func(t *testing.T) {
		_, err := client.GetTopFilterAttributes(
			context.Background(),
			"index",
			analytics.NewGetTopFilterAttributesOptions().
				WithSearch("mySearch").
				WithStartDate("1999-09-19").
				WithEndDate("2001-01-01").
				WithLimit(21).
				WithOffset(42).
				WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/filters", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(
					`{"index":"index","search":"mySearch","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}`,
				),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetTopFilterForAttribute(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getTopFilterForAttribute with minimal parameters", func(t *testing.T) {
		_, err := client.GetTopFilterForAttribute(context.Background(), "myAttribute", "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/filters/myAttribute", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getTopFilterForAttribute with minimal parameters and multiple attributes", func(t *testing.T) {
		_, err := client.GetTopFilterForAttribute(context.Background(), "myAttribute1,myAttribute2", "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/filters/myAttribute1%2CmyAttribute2", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getTopFilterForAttribute with all parameters", func(t *testing.T) {
		_, err := client.GetTopFilterForAttribute(
			context.Background(),
			"myAttribute",
			"index",
			analytics.NewGetTopFilterForAttributeOptions().
				WithSearch("mySearch").
				WithStartDate("1999-09-19").
				WithEndDate("2001-01-01").
				WithLimit(21).
				WithOffset(42).
				WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/filters/myAttribute", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(
					`{"index":"index","search":"mySearch","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}`,
				),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getTopFilterForAttribute with all parameters and multiple attributes", func(t *testing.T) {
		_, err := client.GetTopFilterForAttribute(
			context.Background(),
			"myAttribute1,myAttribute2",
			"index",
			analytics.NewGetTopFilterForAttributeOptions().
				WithSearch("mySearch").
				WithStartDate("1999-09-19").
				WithEndDate("2001-01-01").
				WithLimit(21).
				WithOffset(42).
				WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/filters/myAttribute1%2CmyAttribute2", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(
					`{"index":"index","search":"mySearch","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}`,
				),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetTopFiltersNoResults(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getTopFiltersNoResults with minimal parameters", func(t *testing.T) {
		_, err := client.GetTopFiltersNoResults(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/filters/noResults", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getTopFiltersNoResults with all parameters", func(t *testing.T) {
		_, err := client.GetTopFiltersNoResults(
			context.Background(),
			"index",
			analytics.NewGetTopFiltersNoResultsOptions().
				WithSearch("mySearch").
				WithStartDate("1999-09-19").
				WithEndDate("2001-01-01").
				WithLimit(21).
				WithOffset(42).
				WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/filters/noResults", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(
					`{"index":"index","search":"mySearch","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}`,
				),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetTopHits(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getTopHits with minimal parameters", func(t *testing.T) {
		_, err := client.GetTopHits(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/hits", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getTopHits with all parameters", func(t *testing.T) {
		_, err := client.GetTopHits(
			context.Background(),
			"index",
			analytics.NewGetTopHitsOptions().
				WithSearch("mySearch").
				WithClickAnalytics(true).
				WithRevenueAnalytics(true).
				WithStartDate("1999-09-19").
				WithEndDate("2001-01-01").
				WithLimit(21).
				WithOffset(42).
				WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/hits", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(
					`{"index":"index","search":"mySearch","clickAnalytics":"true","revenueAnalytics":"true","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}`,
				),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetTopSearches(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getTopSearches with minimal parameters", func(t *testing.T) {
		_, err := client.GetTopSearches(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/searches", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getTopSearches with all parameters", func(t *testing.T) {
		_, err := client.GetTopSearches(
			context.Background(),
			"index",
			analytics.NewGetTopSearchesOptions().
				WithClickAnalytics(true).
				WithRevenueAnalytics(true).
				WithStartDate("1999-09-19").
				WithEndDate("2001-01-01").
				WithOrderBy(analytics.ORDER_BY_SEARCH_COUNT).
				WithDirection(analytics.DIRECTION_ASC).
				WithLimit(21).
				WithOffset(42).
				WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/searches", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(
			t,
			json.Unmarshal(
				[]byte(
					`{"index":"index","clickAnalytics":"true","revenueAnalytics":"true","startDate":"1999-09-19","endDate":"2001-01-01","orderBy":"searchCount","direction":"asc","limit":"21","offset":"42","tags":"tag"}`,
				),
				&queryParams,
			),
		)
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestAnalytics_GetUsersCount(t *testing.T) {
	t.Parallel()

	client, echo := createAnalyticsClient(t)
	_ = echo

	t.Run("get getUsersCount with minimal parameters", func(t *testing.T) {
		_, err := client.GetUsersCount(context.Background(), "index", nil)
		require.NoError(t, err)

		require.Equal(t, "/2/users/count", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("get getUsersCount with all parameters", func(t *testing.T) {
		_, err := client.GetUsersCount(
			context.Background(),
			"index",
			analytics.NewGetUsersCountOptions().WithStartDate("1999-09-19").WithEndDate("2001-01-01").WithTags("tag"),
		)
		require.NoError(t, err)

		require.Equal(t, "/2/users/count", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)

		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))

		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}
