// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package requests

import (
	"testing"

	"github.com/kinbiko/jsonassert"
	"github.com/stretchr/testify/require"

	"gotests/tests"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/composition"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
)

func createCompositionClient(t *testing.T) (*composition.APIClient, *tests.EchoRequester) {
	t.Helper()

	echo := &tests.EchoRequester{}
	cfg := composition.CompositionConfiguration{
		Configuration: transport.Configuration{
			AppID:     "appID",
			ApiKey:    "apiKey",
			Requester: echo,
		},
	}
	client, err := composition.NewClientWithConfig(cfg)
	require.NoError(t, err)

	return client, echo
}

func TestComposition_Search(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("search", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(
			"foo",
			composition.NewEmptyRequestBody().SetParams(
				composition.NewEmptyParams().SetQuery("batman")),
		))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/run", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"params":{"query":"batman"}}`)
	})
}

func TestComposition_SearchForFacetValues(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("searchForFacetValues", func(t *testing.T) {
		_, err := client.SearchForFacetValues(client.NewApiSearchForFacetValuesRequest(
			"foo", "brand",
		).WithSearchForFacetValuesRequest(
			composition.NewEmptySearchForFacetValuesRequest().SetParams(
				composition.NewEmptySearchForFacetValuesParams().SetMaxFacetHits(10))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/facets/brand/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"params":{"maxFacetHits":10}}`)
	})
}
