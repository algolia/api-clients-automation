// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package requests

import (
	"encoding/json"
	"testing"

	"github.com/kinbiko/jsonassert"
	"github.com/stretchr/testify/require"

	"gotests/tests"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/composition"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
)

func createCompositionClient(t *testing.T) (*composition.APIClient, *tests.EchoRequester) {
	t.Helper()

	echo := &tests.EchoRequester{}
	cfg := composition.CompositionConfiguration{
		Configuration: transport.Configuration{
			AppID:     "appID",
			ApiKey:    "apiKey",
			Requester: echo,
		},
	}
	client, err := composition.NewClientWithConfig(cfg)
	require.NoError(t, err)

	return client, echo
}

func TestComposition_CustomDelete(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("allow del method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
			"test/minimal"))
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("allow del method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
			"test/all").WithParameters(map[string]any{"query": "parameters"}))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestComposition_CustomGet(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("allow get method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomGet(client.NewApiCustomGetRequest(
			"test/minimal"))
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("allow get method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomGet(client.NewApiCustomGetRequest(
			"test/all").WithParameters(map[string]any{"query": "parameters with space"}))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters%20with%20space"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions should be escaped too", func(t *testing.T) {
		_, err := client.CustomGet(client.NewApiCustomGetRequest(
			"test/all").WithParameters(map[string]any{"query": "to be overriden"}), composition.WithQueryParam("query", "parameters with space"), composition.WithQueryParam("and an array",
			[]string{"array", "with spaces"}), composition.WithHeaderParam("x-header-1", "spaces are left alone"))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-header-1":"spaces are left alone"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters%20with%20space","and%20an%20array":"array%2Cwith%20spaces"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestComposition_CustomPost(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("allow post method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/minimal"))
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("allow post method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/all").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"body":"parameters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions can override default query parameters", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithQueryParam("query", "myQueryParameter"))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"myQueryParameter"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions merges query parameters with default ones", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithQueryParam("query2", "myQueryParameter"))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","query2":"myQueryParameter"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions can override default headers", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-api-key":"ALGOLIA_API_KEY"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions merges headers with default ones", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-api-key":"ALGOLIA_API_KEY"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts booleans", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithQueryParam("isItWorking", true))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","isItWorking":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts integers", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithQueryParam("myParam", 2))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"2"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of string", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithQueryParam("myParam",
			[]string{"b and c", "d"}))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"b%20and%20c%2Cd"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of booleans", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithQueryParam("myParam",
			[]bool{true, true, false}))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of integers", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), composition.WithQueryParam("myParam",
			[]int32{1, 2}))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"1%2C2"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestComposition_CustomPut(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("allow put method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomPut(client.NewApiCustomPutRequest(
			"test/minimal"))
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("allow put method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomPut(client.NewApiCustomPutRequest(
			"test/all").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"body":"parameters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestComposition_DeleteComposition(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("deleteComposition", func(t *testing.T) {
		_, err := client.DeleteComposition(client.NewApiDeleteCompositionRequest(
			"1234"))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/1234", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestComposition_DeleteCompositionRule(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("deleteCompositionRule", func(t *testing.T) {
		_, err := client.DeleteCompositionRule(client.NewApiDeleteCompositionRuleRequest(
			"1234", "5678"))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/1234/rules/5678", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestComposition_GetComposition(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("getComposition", func(t *testing.T) {
		_, err := client.GetComposition(client.NewApiGetCompositionRequest(
			"foo"))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestComposition_GetRule(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("getRule", func(t *testing.T) {
		_, err := client.GetRule(client.NewApiGetRuleRequest(
			"foo", "123"))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/rules/123", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestComposition_GetTask(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("getTask", func(t *testing.T) {
		_, err := client.GetTask(client.NewApiGetTaskRequest(
			"foo", 42))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/task/42", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestComposition_ListCompositions(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("listCompositions", func(t *testing.T) {
		_, err := client.ListCompositions(client.NewApiListCompositionsRequest())
		require.NoError(t, err)

		require.Equal(t, "/1/compositions", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("listCompositions", func(t *testing.T) {
		_, err := client.ListCompositions(client.NewApiListCompositionsRequest())
		require.NoError(t, err)

		require.Equal(t, "/1/compositions", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestComposition_MultipleBatch(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("multipleBatch", func(t *testing.T) {
		_, err := client.MultipleBatch(client.NewApiMultipleBatchRequest(

			composition.NewEmptyBatchParams().SetRequests(
				[]composition.MultipleBatchRequest{*composition.NewEmptyMultipleBatchRequest().SetAction(composition.Action("upsert")).SetBody(composition.CompositionAsBatchCompositionAction(
					composition.NewEmptyComposition().SetObjectID("foo").SetName("my first composition").SetBehavior(
						composition.NewEmptyCompositionBehavior().SetInjection(
							composition.NewEmptyInjection().SetMain(
								composition.NewEmptyMain().SetSource(
									composition.NewEmptyCompositionSource().SetSearch(
										composition.NewEmptyCompositionSourceSearch().SetIndex("bar")))))))), *composition.NewEmptyMultipleBatchRequest().SetAction(composition.Action("delete")).SetBody(composition.DeleteCompositionActionAsBatchCompositionAction(
					composition.NewEmptyDeleteCompositionAction().SetObjectID("baz")))})))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/*/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"upsert","body":{"objectID":"foo","name":"my first composition","behavior":{"injection":{"main":{"source":{"search":{"index":"bar"}}}}}}},{"action":"delete","body":{"objectID":"baz"}}]}`)
	})
	t.Run("multipleBatch", func(t *testing.T) {
		_, err := client.MultipleBatch(client.NewApiMultipleBatchRequest(

			composition.NewEmptyBatchParams().SetRequests(
				[]composition.MultipleBatchRequest{*composition.NewEmptyMultipleBatchRequest().SetAction(composition.Action("upsert")).SetBody(composition.CompositionAsBatchCompositionAction(
					composition.NewEmptyComposition().SetObjectID("my-external-injection-compo").SetName("my first composition").SetBehavior(
						composition.NewEmptyCompositionBehavior().SetInjection(
							composition.NewEmptyInjection().SetMain(
								composition.NewEmptyMain().SetSource(
									composition.NewEmptyCompositionSource().SetSearch(
										composition.NewEmptyCompositionSourceSearch().SetIndex("foo")))).SetInjectedItems(
								[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem1").SetSource(composition.ExternalSourceAsInjectedItemSource(
									composition.NewEmptyExternalSource().SetExternal(
										composition.NewEmptyExternal().SetIndex("foo").SetOrdering(composition.ExternalOrdering("userDefined")).SetParams(
											composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:adidas"))))).SetPosition(2).SetLength(1)})))))})))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/*/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"upsert","body":{"objectID":"my-external-injection-compo","name":"my first composition","behavior":{"injection":{"main":{"source":{"search":{"index":"foo"}}},"injectedItems":[{"key":"injectedItem1","source":{"external":{"index":"foo","ordering":"userDefined","params":{"filters":"brand:adidas"}}},"position":2,"length":1}]}}}}]}`)
	})
	t.Run("multipleBatch", func(t *testing.T) {
		_, err := client.MultipleBatch(client.NewApiMultipleBatchRequest(

			composition.NewEmptyBatchParams().SetRequests(
				[]composition.MultipleBatchRequest{*composition.NewEmptyMultipleBatchRequest().SetAction(composition.Action("upsert")).SetBody(composition.CompositionAsBatchCompositionAction(
					composition.NewEmptyComposition().SetObjectID("my-metadata-compo").SetName("my composition").SetBehavior(
						composition.NewEmptyCompositionBehavior().SetInjection(
							composition.NewEmptyInjection().SetMain(
								composition.NewEmptyMain().SetSource(
									composition.NewEmptyCompositionSource().SetSearch(
										composition.NewEmptyCompositionSourceSearch().SetIndex("foo").SetParams(
											composition.NewEmptyMainInjectionQueryParameters().SetFilters("brand:adidas"))))).SetInjectedItems(
								[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem1").SetSource(composition.SearchSourceAsInjectedItemSource(
									composition.NewEmptySearchSource().SetSearch(
										composition.NewEmptySearch().SetIndex("foo").SetParams(
											composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:adidas"))))).SetPosition(2).SetLength(1).SetMetadata(
									composition.NewEmptyInjectedItemMetadata().SetHits(
										composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{"my-string": "string", "my-bool": true, "my-number": 42, "my-object": map[string]any{"sub-key": "sub-value"}}))), *composition.NewEmptyInjectedItem().SetKey("externalItem").SetSource(composition.SearchSourceAsInjectedItemSource(
									composition.NewEmptySearchSource().SetSearch(
										composition.NewEmptySearch().SetIndex("foo").SetParams(
											composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:puma"))))).SetPosition(5).SetLength(5).SetMetadata(
									composition.NewEmptyInjectedItemMetadata().SetHits(
										composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{"my-string": "string", "my-bool": true, "my-number": 42, "my-object": map[string]any{"sub-key": "sub-value"}})))})))))})))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/*/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"upsert","body":{"objectID":"my-metadata-compo","name":"my composition","behavior":{"injection":{"main":{"source":{"search":{"index":"foo","params":{"filters":"brand:adidas"}}}},"injectedItems":[{"key":"injectedItem1","source":{"search":{"index":"foo","params":{"filters":"brand:adidas"}}},"position":2,"length":1,"metadata":{"hits":{"addItemKey":true,"extra":{"my-string":"string","my-bool":true,"my-number":42,"my-object":{"sub-key":"sub-value"}}}}},{"key":"externalItem","source":{"search":{"index":"foo","params":{"filters":"brand:puma"}}},"position":5,"length":5,"metadata":{"hits":{"addItemKey":true,"extra":{"my-string":"string","my-bool":true,"my-number":42,"my-object":{"sub-key":"sub-value"}}}}}]}}}}]}`)
	})
	t.Run("multipleBatch", func(t *testing.T) {
		_, err := client.MultipleBatch(client.NewApiMultipleBatchRequest(

			composition.NewEmptyBatchParams().SetRequests(
				[]composition.MultipleBatchRequest{*composition.NewEmptyMultipleBatchRequest().SetAction(composition.Action("upsert")).SetBody(composition.CompositionAsBatchCompositionAction(
					composition.NewEmptyComposition().SetObjectID("my-compo").SetName("my composition").SetBehavior(
						composition.NewEmptyCompositionBehavior().SetInjection(
							composition.NewEmptyInjection().SetMain(
								composition.NewEmptyMain().SetSource(
									composition.NewEmptyCompositionSource().SetSearch(
										composition.NewEmptyCompositionSourceSearch().SetIndex("foo")))).SetInjectedItems(
								[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("my-unique-injected-item-key").SetSource(composition.SearchSourceAsInjectedItemSource(
									composition.NewEmptySearchSource().SetSearch(
										composition.NewEmptySearch().SetIndex("foo")))).SetPosition(2).SetLength(1)}).SetDeduplication(
								composition.NewEmptyDeduplication().SetPositioning(composition.DedupPositioning("highest")))))))})))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/*/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"upsert","body":{"objectID":"my-compo","name":"my composition","behavior":{"injection":{"main":{"source":{"search":{"index":"foo"}}},"injectedItems":[{"key":"my-unique-injected-item-key","source":{"search":{"index":"foo"}},"position":2,"length":1}],"deduplication":{"positioning":"highest"}}}}}]}`)
	})
}

func TestComposition_PutComposition(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("putComposition", func(t *testing.T) {
		_, err := client.PutComposition(client.NewApiPutCompositionRequest(
			"1234",
			composition.NewEmptyComposition().SetObjectID("1234").SetName("my first composition").SetBehavior(
				composition.NewEmptyCompositionBehavior().SetInjection(
					composition.NewEmptyInjection().SetMain(
						composition.NewEmptyMain().SetSource(
							composition.NewEmptyCompositionSource().SetSearch(
								composition.NewEmptyCompositionSourceSearch().SetIndex("foo")))).SetInjectedItems(
						[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem1").SetSource(composition.SearchSourceAsInjectedItemSource(
							composition.NewEmptySearchSource().SetSearch(
								composition.NewEmptySearch().SetIndex("foo")))).SetPosition(2).SetLength(1)})))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/1234", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"1234","name":"my first composition","behavior":{"injection":{"main":{"source":{"search":{"index":"foo"}}},"injectedItems":[{"key":"injectedItem1","source":{"search":{"index":"foo"}},"position":2,"length":1}]}}}`)
	})
	t.Run("putComposition", func(t *testing.T) {
		_, err := client.PutComposition(client.NewApiPutCompositionRequest(
			"my-external-injection-compo",
			composition.NewEmptyComposition().SetObjectID("my-external-injection-compo").SetName("my first composition").SetBehavior(
				composition.NewEmptyCompositionBehavior().SetInjection(
					composition.NewEmptyInjection().SetMain(
						composition.NewEmptyMain().SetSource(
							composition.NewEmptyCompositionSource().SetSearch(
								composition.NewEmptyCompositionSourceSearch().SetIndex("foo")))).SetInjectedItems(
						[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem1").SetSource(composition.ExternalSourceAsInjectedItemSource(
							composition.NewEmptyExternalSource().SetExternal(
								composition.NewEmptyExternal().SetIndex("foo").SetOrdering(composition.ExternalOrdering("userDefined")).SetParams(
									composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:adidas"))))).SetPosition(2).SetLength(1)})))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/my-external-injection-compo", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"my-external-injection-compo","name":"my first composition","behavior":{"injection":{"main":{"source":{"search":{"index":"foo"}}},"injectedItems":[{"key":"injectedItem1","source":{"external":{"index":"foo","ordering":"userDefined","params":{"filters":"brand:adidas"}}},"position":2,"length":1}]}}}`)
	})
	t.Run("putComposition", func(t *testing.T) {
		_, err := client.PutComposition(client.NewApiPutCompositionRequest(
			"my-metadata-compo",
			composition.NewEmptyComposition().SetObjectID("my-metadata-compo").SetName("my composition").SetBehavior(
				composition.NewEmptyCompositionBehavior().SetInjection(
					composition.NewEmptyInjection().SetMain(
						composition.NewEmptyMain().SetSource(
							composition.NewEmptyCompositionSource().SetSearch(
								composition.NewEmptyCompositionSourceSearch().SetIndex("foo").SetParams(
									composition.NewEmptyMainInjectionQueryParameters().SetFilters("brand:adidas"))))).SetInjectedItems(
						[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem1").SetSource(composition.SearchSourceAsInjectedItemSource(
							composition.NewEmptySearchSource().SetSearch(
								composition.NewEmptySearch().SetIndex("foo").SetParams(
									composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:adidas"))))).SetPosition(2).SetLength(1).SetMetadata(
							composition.NewEmptyInjectedItemMetadata().SetHits(
								composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{"my-string": "string", "my-bool": true, "my-number": 42, "my-object": map[string]any{"sub-key": "sub-value"}}))), *composition.NewEmptyInjectedItem().SetKey("externalItem").SetSource(composition.SearchSourceAsInjectedItemSource(
							composition.NewEmptySearchSource().SetSearch(
								composition.NewEmptySearch().SetIndex("foo").SetParams(
									composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:puma"))))).SetPosition(5).SetLength(5).SetMetadata(
							composition.NewEmptyInjectedItemMetadata().SetHits(
								composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{"my-string": "string", "my-bool": true, "my-number": 42, "my-object": map[string]any{"sub-key": "sub-value"}})))})))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/my-metadata-compo", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"my-metadata-compo","name":"my composition","behavior":{"injection":{"main":{"source":{"search":{"index":"foo","params":{"filters":"brand:adidas"}}}},"injectedItems":[{"key":"injectedItem1","source":{"search":{"index":"foo","params":{"filters":"brand:adidas"}}},"position":2,"length":1,"metadata":{"hits":{"addItemKey":true,"extra":{"my-string":"string","my-bool":true,"my-number":42,"my-object":{"sub-key":"sub-value"}}}}},{"key":"externalItem","source":{"search":{"index":"foo","params":{"filters":"brand:puma"}}},"position":5,"length":5,"metadata":{"hits":{"addItemKey":true,"extra":{"my-string":"string","my-bool":true,"my-number":42,"my-object":{"sub-key":"sub-value"}}}}}]}}}`)
	})
	t.Run("putComposition", func(t *testing.T) {
		_, err := client.PutComposition(client.NewApiPutCompositionRequest(
			"my-compo",
			composition.NewEmptyComposition().SetObjectID("my-compo").SetName("my composition").SetBehavior(
				composition.NewEmptyCompositionBehavior().SetInjection(
					composition.NewEmptyInjection().SetMain(
						composition.NewEmptyMain().SetSource(
							composition.NewEmptyCompositionSource().SetSearch(
								composition.NewEmptyCompositionSourceSearch().SetIndex("foo").SetParams(
									composition.NewEmptyMainInjectionQueryParameters().SetFilters("brand:adidas"))))).SetInjectedItems(
						[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("my-unique-injected-item-key").SetSource(composition.SearchSourceAsInjectedItemSource(
							composition.NewEmptySearchSource().SetSearch(
								composition.NewEmptySearch().SetIndex("foo")))).SetPosition(2).SetLength(1)}).SetDeduplication(
						composition.NewEmptyDeduplication().SetPositioning(composition.DedupPositioning("highest")))))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/my-compo", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"my-compo","name":"my composition","behavior":{"injection":{"main":{"source":{"search":{"index":"foo","params":{"filters":"brand:adidas"}}}},"injectedItems":[{"key":"my-unique-injected-item-key","source":{"search":{"index":"foo"}},"position":2,"length":1}],"deduplication":{"positioning":"highest"}}}}`)
	})
}

func TestComposition_PutCompositionRule(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("putCompositionRule", func(t *testing.T) {
		_, err := client.PutCompositionRule(client.NewApiPutCompositionRuleRequest(
			"compositionID", "ruleID",
			composition.NewEmptyCompositionRule().SetObjectID("ruleID").SetConditions(
				[]composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("is")).SetPattern("test")}).SetConsequence(
				composition.NewEmptyCompositionRuleConsequence().SetBehavior(
					composition.NewEmptyCompositionBehavior().SetInjection(
						composition.NewEmptyInjection().SetMain(
							composition.NewEmptyMain().SetSource(
								composition.NewEmptyCompositionSource().SetSearch(
									composition.NewEmptyCompositionSourceSearch().SetIndex("foo")))).SetInjectedItems(
							[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem1").SetSource(composition.SearchSourceAsInjectedItemSource(
								composition.NewEmptySearchSource().SetSearch(
									composition.NewEmptySearch().SetIndex("foo")))).SetPosition(2).SetLength(1)}))))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/compositionID/rules/ruleID", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"ruleID","conditions":[{"anchoring":"is","pattern":"test"}],"consequence":{"behavior":{"injection":{"main":{"source":{"search":{"index":"foo"}}},"injectedItems":[{"key":"injectedItem1","source":{"search":{"index":"foo"}},"position":2,"length":1}]}}}}`)
	})
	t.Run("putCompositionRule", func(t *testing.T) {
		_, err := client.PutCompositionRule(client.NewApiPutCompositionRuleRequest(
			"compositionID", "rule-with-metadata",
			composition.NewEmptyCompositionRule().SetObjectID("rule-with-metadata").SetConditions(
				[]composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("is")).SetPattern("test")}).SetConsequence(
				composition.NewEmptyCompositionRuleConsequence().SetBehavior(
					composition.NewEmptyCompositionBehavior().SetInjection(
						composition.NewEmptyInjection().SetMain(
							composition.NewEmptyMain().SetSource(
								composition.NewEmptyCompositionSource().SetSearch(
									composition.NewEmptyCompositionSourceSearch().SetIndex("foo")))).SetInjectedItems(
							[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem1").SetSource(composition.SearchSourceAsInjectedItemSource(
								composition.NewEmptySearchSource().SetSearch(
									composition.NewEmptySearch().SetIndex("foo").SetParams(
										composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:adidas"))))).SetPosition(2).SetLength(1).SetMetadata(
								composition.NewEmptyInjectedItemMetadata().SetHits(
									composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{"my-string": "string", "my-bool": true, "my-number": 42, "my-object": map[string]any{"sub-key": "sub-value"}})))}))))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/compositionID/rules/rule-with-metadata", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"rule-with-metadata","conditions":[{"anchoring":"is","pattern":"test"}],"consequence":{"behavior":{"injection":{"main":{"source":{"search":{"index":"foo"}}},"injectedItems":[{"key":"injectedItem1","source":{"search":{"index":"foo","params":{"filters":"brand:adidas"}}},"position":2,"length":1,"metadata":{"hits":{"addItemKey":true,"extra":{"my-string":"string","my-bool":true,"my-number":42,"my-object":{"sub-key":"sub-value"}}}}}]}}}}`)
	})
	t.Run("putCompositionRule", func(t *testing.T) {
		_, err := client.PutCompositionRule(client.NewApiPutCompositionRuleRequest(
			"compositionID", "rule-with-exernal-source",
			composition.NewEmptyCompositionRule().SetObjectID("rule-with-exernal-source").SetDescription("my description").SetTags(
				[]string{"tag1", "tag2"}).SetEnabled(true).SetValidity(
				[]composition.TimeRange{*composition.NewEmptyTimeRange().SetFrom(1704063600).SetUntil(1704083600)}).SetConditions(
				[]composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("contains")).SetPattern("harry"), *composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("contains")).SetPattern("potter")}).SetConsequence(
				composition.NewEmptyCompositionRuleConsequence().SetBehavior(
					composition.NewEmptyCompositionBehavior().SetInjection(
						composition.NewEmptyInjection().SetMain(
							composition.NewEmptyMain().SetSource(
								composition.NewEmptyCompositionSource().SetSearch(
									composition.NewEmptyCompositionSourceSearch().SetIndex("my-index").SetParams(
										composition.NewEmptyMainInjectionQueryParameters().SetFilters("brand:adidas"))))).SetInjectedItems(
							[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem").SetSource(composition.ExternalSourceAsInjectedItemSource(
								composition.NewEmptyExternalSource().SetExternal(
									composition.NewEmptyExternal().SetIndex("my-index").SetParams(
										composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:adidas")).SetOrdering(composition.ExternalOrdering("userDefined"))))).SetPosition(0).SetLength(3)}))))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/compositionID/rules/rule-with-exernal-source", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"rule-with-exernal-source","description":"my description","tags":["tag1","tag2"],"enabled":true,"validity":[{"from":1704063600,"until":1704083600}],"conditions":[{"anchoring":"contains","pattern":"harry"},{"anchoring":"contains","pattern":"potter"}],"consequence":{"behavior":{"injection":{"main":{"source":{"search":{"index":"my-index","params":{"filters":"brand:adidas"}}}},"injectedItems":[{"key":"injectedItem","source":{"external":{"index":"my-index","params":{"filters":"brand:adidas"},"ordering":"userDefined"}},"position":0,"length":3}]}}}}`)
	})
	t.Run("putCompositionRule", func(t *testing.T) {
		_, err := client.PutCompositionRule(client.NewApiPutCompositionRuleRequest(
			"compositionID", "rule-with-deduplication",
			composition.NewEmptyCompositionRule().SetObjectID("rule-with-deduplication").SetDescription("my description").SetEnabled(true).SetConditions(
				[]composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("contains")).SetPattern("harry")}).SetConsequence(
				composition.NewEmptyCompositionRuleConsequence().SetBehavior(
					composition.NewEmptyCompositionBehavior().SetInjection(
						composition.NewEmptyInjection().SetMain(
							composition.NewEmptyMain().SetSource(
								composition.NewEmptyCompositionSource().SetSearch(
									composition.NewEmptyCompositionSourceSearch().SetIndex("my-index")))).SetInjectedItems(
							[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("my-unique-injected-item-key").SetSource(composition.SearchSourceAsInjectedItemSource(
								composition.NewEmptySearchSource().SetSearch(
									composition.NewEmptySearch().SetIndex("my-index")))).SetPosition(0).SetLength(3)}).SetDeduplication(
							composition.NewEmptyDeduplication().SetPositioning(composition.DedupPositioning("highestInjected"))))))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/compositionID/rules/rule-with-deduplication", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"rule-with-deduplication","description":"my description","enabled":true,"conditions":[{"anchoring":"contains","pattern":"harry"}],"consequence":{"behavior":{"injection":{"main":{"source":{"search":{"index":"my-index"}}},"injectedItems":[{"key":"my-unique-injected-item-key","source":{"search":{"index":"my-index"}},"position":0,"length":3}],"deduplication":{"positioning":"highestInjected"}}}}}`)
	})
}

func TestComposition_SaveRules(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("saveRules", func(t *testing.T) {
		_, err := client.SaveRules(client.NewApiSaveRulesRequest(
			"foo",
			composition.NewEmptyCompositionRulesBatchParams().SetRequests(
				[]composition.RulesMultipleBatchRequest{*composition.NewEmptyRulesMultipleBatchRequest().SetAction(composition.Action("upsert")).SetBody(composition.CompositionRuleAsRulesBatchCompositionAction(
					composition.NewEmptyCompositionRule().SetObjectID("123").SetConditions(
						[]composition.Condition{*composition.NewEmptyCondition().SetPattern("a")}).SetConsequence(
						composition.NewEmptyCompositionRuleConsequence().SetBehavior(
							composition.NewEmptyCompositionBehavior().SetInjection(
								composition.NewEmptyInjection().SetMain(
									composition.NewEmptyMain().SetSource(
										composition.NewEmptyCompositionSource().SetSearch(
											composition.NewEmptyCompositionSourceSearch().SetIndex("<YOUR_INDEX_NAME>")))))))))})))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/rules/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"upsert","body":{"objectID":"123","conditions":[{"pattern":"a"}],"consequence":{"behavior":{"injection":{"main":{"source":{"search":{"index":"<YOUR_INDEX_NAME>"}}}}}}}}]}`)
	})
	t.Run("saveRules", func(t *testing.T) {
		_, err := client.SaveRules(client.NewApiSaveRulesRequest(
			"rule-with-metadata",
			composition.NewEmptyCompositionRulesBatchParams().SetRequests(
				[]composition.RulesMultipleBatchRequest{*composition.NewEmptyRulesMultipleBatchRequest().SetAction(composition.Action("upsert")).SetBody(composition.CompositionRuleAsRulesBatchCompositionAction(
					composition.NewEmptyCompositionRule().SetObjectID("rule-with-metadata").SetConditions(
						[]composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("is")).SetPattern("test")}).SetConsequence(
						composition.NewEmptyCompositionRuleConsequence().SetBehavior(
							composition.NewEmptyCompositionBehavior().SetInjection(
								composition.NewEmptyInjection().SetMain(
									composition.NewEmptyMain().SetSource(
										composition.NewEmptyCompositionSource().SetSearch(
											composition.NewEmptyCompositionSourceSearch().SetIndex("foo")))).SetInjectedItems(
									[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem1").SetSource(composition.SearchSourceAsInjectedItemSource(
										composition.NewEmptySearchSource().SetSearch(
											composition.NewEmptySearch().SetIndex("foo").SetParams(
												composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:adidas"))))).SetPosition(2).SetLength(1).SetMetadata(
										composition.NewEmptyInjectedItemMetadata().SetHits(
											composition.NewEmptyInjectedItemHitsMetadata().SetAddItemKey(true).SetExtra(map[string]any{"my-string": "string", "my-bool": true, "my-number": 42, "my-object": map[string]any{"sub-key": "sub-value"}})))}))))))})))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/rule-with-metadata/rules/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"upsert","body":{"objectID":"rule-with-metadata","conditions":[{"anchoring":"is","pattern":"test"}],"consequence":{"behavior":{"injection":{"main":{"source":{"search":{"index":"foo"}}},"injectedItems":[{"key":"injectedItem1","source":{"search":{"index":"foo","params":{"filters":"brand:adidas"}}},"position":2,"length":1,"metadata":{"hits":{"addItemKey":true,"extra":{"my-string":"string","my-bool":true,"my-number":42,"my-object":{"sub-key":"sub-value"}}}}}]}}}}}]}`)
	})
	t.Run("saveRules", func(t *testing.T) {
		_, err := client.SaveRules(client.NewApiSaveRulesRequest(
			"rule-with-exernal-source",
			composition.NewEmptyCompositionRulesBatchParams().SetRequests(
				[]composition.RulesMultipleBatchRequest{*composition.NewEmptyRulesMultipleBatchRequest().SetAction(composition.Action("upsert")).SetBody(composition.CompositionRuleAsRulesBatchCompositionAction(
					composition.NewEmptyCompositionRule().SetObjectID("rule-with-exernal-source").SetDescription("my description").SetTags(
						[]string{"tag1", "tag2"}).SetEnabled(true).SetValidity(
						[]composition.TimeRange{*composition.NewEmptyTimeRange().SetFrom(1704063600).SetUntil(1704083600)}).SetConditions(
						[]composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("contains")).SetPattern("harry"), *composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("contains")).SetPattern("potter")}).SetConsequence(
						composition.NewEmptyCompositionRuleConsequence().SetBehavior(
							composition.NewEmptyCompositionBehavior().SetInjection(
								composition.NewEmptyInjection().SetMain(
									composition.NewEmptyMain().SetSource(
										composition.NewEmptyCompositionSource().SetSearch(
											composition.NewEmptyCompositionSourceSearch().SetIndex("my-index").SetParams(
												composition.NewEmptyMainInjectionQueryParameters().SetFilters("brand:adidas"))))).SetInjectedItems(
									[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("injectedItem").SetSource(composition.ExternalSourceAsInjectedItemSource(
										composition.NewEmptyExternalSource().SetExternal(
											composition.NewEmptyExternal().SetIndex("my-index").SetParams(
												composition.NewEmptyBaseInjectionQueryParameters().SetFilters("brand:adidas")).SetOrdering(composition.ExternalOrdering("userDefined"))))).SetPosition(0).SetLength(3)}))))))})))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/rule-with-exernal-source/rules/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"upsert","body":{"objectID":"rule-with-exernal-source","description":"my description","tags":["tag1","tag2"],"enabled":true,"validity":[{"from":1704063600,"until":1704083600}],"conditions":[{"anchoring":"contains","pattern":"harry"},{"anchoring":"contains","pattern":"potter"}],"consequence":{"behavior":{"injection":{"main":{"source":{"search":{"index":"my-index","params":{"filters":"brand:adidas"}}}},"injectedItems":[{"key":"injectedItem","source":{"external":{"index":"my-index","params":{"filters":"brand:adidas"},"ordering":"userDefined"}},"position":0,"length":3}]}}}}}]}`)
	})
	t.Run("saveRules", func(t *testing.T) {
		_, err := client.SaveRules(client.NewApiSaveRulesRequest(
			"my-compo",
			composition.NewEmptyCompositionRulesBatchParams().SetRequests(
				[]composition.RulesMultipleBatchRequest{*composition.NewEmptyRulesMultipleBatchRequest().SetAction(composition.Action("upsert")).SetBody(composition.CompositionRuleAsRulesBatchCompositionAction(
					composition.NewEmptyCompositionRule().SetObjectID("rule-with-deduplication").SetDescription("my description").SetEnabled(true).SetConditions(
						[]composition.Condition{*composition.NewEmptyCondition().SetAnchoring(composition.Anchoring("contains")).SetPattern("harry")}).SetConsequence(
						composition.NewEmptyCompositionRuleConsequence().SetBehavior(
							composition.NewEmptyCompositionBehavior().SetInjection(
								composition.NewEmptyInjection().SetMain(
									composition.NewEmptyMain().SetSource(
										composition.NewEmptyCompositionSource().SetSearch(
											composition.NewEmptyCompositionSourceSearch().SetIndex("my-index")))).SetInjectedItems(
									[]composition.InjectedItem{*composition.NewEmptyInjectedItem().SetKey("my-unique-injected-item-key").SetSource(composition.SearchSourceAsInjectedItemSource(
										composition.NewEmptySearchSource().SetSearch(
											composition.NewEmptySearch().SetIndex("my-index")))).SetPosition(0).SetLength(3)}).SetDeduplication(
									composition.NewEmptyDeduplication().SetPositioning(composition.DedupPositioning("highestInjected"))))))))})))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/my-compo/rules/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"upsert","body":{"objectID":"rule-with-deduplication","description":"my description","enabled":true,"conditions":[{"anchoring":"contains","pattern":"harry"}],"consequence":{"behavior":{"injection":{"main":{"source":{"search":{"index":"my-index"}}},"injectedItems":[{"key":"my-unique-injected-item-key","source":{"search":{"index":"my-index"}},"position":0,"length":3}],"deduplication":{"positioning":"highestInjected"}}}}}}]}`)
	})
}

func TestComposition_Search(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("search", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(
			"foo",
			composition.NewEmptyRequestBody().SetParams(
				composition.NewEmptyParams().SetQuery("batman"))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/run", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"params":{"query":"batman"}}`)
	})
	t.Run("search", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(
			"foo",
			composition.NewEmptyRequestBody().SetParams(
				composition.NewEmptyParams().SetQuery("batman").SetInjectedItems(map[string]composition.ExternalInjectedItem{"injectedItem1": *composition.NewEmptyExternalInjectedItem().SetItems(
					[]composition.ExternalInjection{*composition.NewEmptyExternalInjection().SetObjectID("my-object-1"), *composition.NewEmptyExternalInjection().SetObjectID("my-object-2").SetMetadata(map[string]any{"my-string": "string", "my-bool": true, "my-number": 42, "my-object": map[string]any{"sub-key": "sub-value"}})})}))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/run", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"params":{"query":"batman","injectedItems":{"injectedItem1":{"items":[{"objectID":"my-object-1"},{"objectID":"my-object-2","metadata":{"my-string":"string","my-bool":true,"my-number":42,"my-object":{"sub-key":"sub-value"}}}]}}}}`)
	})
}

func TestComposition_SearchCompositionRules(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("searchCompositionRules", func(t *testing.T) {
		_, err := client.SearchCompositionRules(client.NewApiSearchCompositionRulesRequest(
			"foo").WithSearchCompositionRulesParams(
			composition.NewEmptySearchCompositionRulesParams().SetQuery("batman")))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/rules/search", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"batman"}`)
	})
}

func TestComposition_SearchForFacetValues(t *testing.T) {
	client, echo := createCompositionClient(t)
	_ = echo

	t.Run("searchForFacetValues", func(t *testing.T) {
		_, err := client.SearchForFacetValues(client.NewApiSearchForFacetValuesRequest(
			"foo", "brand").WithSearchForFacetValuesRequest(
			composition.NewEmptySearchForFacetValuesRequest().SetParams(
				composition.NewEmptySearchForFacetValuesParams().SetMaxFacetHits(10))))
		require.NoError(t, err)

		require.Equal(t, "/1/compositions/foo/facets/brand/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"params":{"maxFacetHits":10}}`)
	})
}
