// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package requests

import (
	"encoding/json"
	"testing"
	"time"

	"github.com/kinbiko/jsonassert"
	"github.com/stretchr/testify/require"

	"gotests/tests"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/search"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
)

func createSearchClient(t *testing.T) (*search.APIClient, *tests.EchoRequester) {
	t.Helper()

	echo := &tests.EchoRequester{}
	cfg := search.SearchConfiguration{
		Configuration: transport.Configuration{
			AppID:     "appID",
			ApiKey:    "apiKey",
			Requester: echo,
		},
	}
	client, err := search.NewClientWithConfig(cfg)
	require.NoError(t, err)

	return client, echo
}

func TestSearch_AddApiKey(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("addApiKey", func(t *testing.T) {
		_, err := client.AddApiKey(client.NewApiAddApiKeyRequest(

			search.NewEmptyApiKey().SetAcl(
				[]search.Acl{search.Acl("search"), search.Acl("addObject")}).SetDescription("my new api key").SetValidity(300).SetMaxQueriesPerIPPerHour(100).SetMaxHitsPerQuery(20)))
		require.NoError(t, err)

		require.Equal(t, "/1/keys", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}`)
	})
}

func TestSearch_AddOrUpdateObject(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("addOrUpdateObject", func(t *testing.T) {
		_, err := client.AddOrUpdateObject(client.NewApiAddOrUpdateObjectRequest(
			"indexName", "uniqueID", map[string]any{"key": "value"}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/uniqueID", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"key":"value"}`)
	})
}

func TestSearch_AppendSource(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("appendSource", func(t *testing.T) {
		_, err := client.AppendSource(client.NewApiAppendSourceRequest(

			search.NewEmptySource().SetSource("theSource").SetDescription("theDescription")))
		require.NoError(t, err)

		require.Equal(t, "/1/security/sources/append", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"source":"theSource","description":"theDescription"}`)
	})
}

func TestSearch_AssignUserId(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("simple", func(t *testing.T) {
		_, err := client.AssignUserId(client.NewApiAssignUserIdRequest(
			"user42",
			search.NewEmptyAssignUserIdParams().SetCluster("d4242-eu")))
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"cluster":"d4242-eu"}`)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-user-id":"user42"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
	})
	t.Run("it should not encode the userID", func(t *testing.T) {
		_, err := client.AssignUserId(client.NewApiAssignUserIdRequest(
			"user id with spaces",
			search.NewEmptyAssignUserIdParams().SetCluster("cluster with spaces")))
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"cluster":"cluster with spaces"}`)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-user-id":"user id with spaces"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
	})
}

func TestSearch_Batch(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("addObject", func(t *testing.T) {
		_, err := client.Batch(client.NewApiBatchRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyBatchWriteParams().SetRequests(
				[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("addObject")).SetBody(map[string]any{"key": "bar", "foo": "1"}), *search.NewEmptyBatchRequest().SetAction(search.Action("addObject")).SetBody(map[string]any{"key": "baz", "foo": "2"})})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"addObject","body":{"key":"bar","foo":"1"}},{"action":"addObject","body":{"key":"baz","foo":"2"}}]}`)
	})
	t.Run("clear", func(t *testing.T) {
		_, err := client.Batch(client.NewApiBatchRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyBatchWriteParams().SetRequests(
				[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("clear")).SetBody(map[string]any{"key": "value"})})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"clear","body":{"key":"value"}}]}`)
	})
	t.Run("delete", func(t *testing.T) {
		_, err := client.Batch(client.NewApiBatchRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyBatchWriteParams().SetRequests(
				[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("delete")).SetBody(map[string]any{"key": "value"})})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"delete","body":{"key":"value"}}]}`)
	})
	t.Run("deleteObject", func(t *testing.T) {
		_, err := client.Batch(client.NewApiBatchRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyBatchWriteParams().SetRequests(
				[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("deleteObject")).SetBody(map[string]any{"key": "value"})})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"deleteObject","body":{"key":"value"}}]}`)
	})
	t.Run("partialUpdateObject", func(t *testing.T) {
		_, err := client.Batch(client.NewApiBatchRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyBatchWriteParams().SetRequests(
				[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("partialUpdateObject")).SetBody(map[string]any{"key": "value"})})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"partialUpdateObject","body":{"key":"value"}}]}`)
	})
	t.Run("partialUpdateObjectNoCreate", func(t *testing.T) {
		_, err := client.Batch(client.NewApiBatchRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyBatchWriteParams().SetRequests(
				[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("partialUpdateObjectNoCreate")).SetBody(map[string]any{"key": "value"})})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"partialUpdateObjectNoCreate","body":{"key":"value"}}]}`)
	})
	t.Run("updateObject", func(t *testing.T) {
		_, err := client.Batch(client.NewApiBatchRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyBatchWriteParams().SetRequests(
				[]search.BatchRequest{*search.NewEmptyBatchRequest().SetAction(search.Action("updateObject")).SetBody(map[string]any{"key": "value"})})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"updateObject","body":{"key":"value"}}]}`)
	})
}

func TestSearch_BatchAssignUserIds(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("batchAssignUserIds", func(t *testing.T) {
		_, err := client.BatchAssignUserIds(client.NewApiBatchAssignUserIdsRequest(
			"userID",
			search.NewEmptyBatchAssignUserIdsParams().SetCluster("theCluster").SetUsers(
				[]string{"user1", "user2"})))
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"cluster":"theCluster","users":["user1","user2"]}`)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-user-id":"userID"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
	})
}

func TestSearch_BatchDictionaryEntries(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("replace", func(t *testing.T) {
		_, err := client.BatchDictionaryEntries(client.NewApiBatchDictionaryEntriesRequest(
			search.DictionaryType("plurals"),
			search.NewEmptyBatchDictionaryEntriesParams().SetClearExistingDictionaryEntries(true).SetRequests(
				[]search.BatchDictionaryEntriesRequest{*search.NewEmptyBatchDictionaryEntriesRequest().SetAction(search.DictionaryAction("addEntry")).SetBody(
					search.NewEmptyDictionaryEntry().SetObjectID("1").SetLanguage(search.SupportedLanguage("en")).SetWord("fancy").SetWords(
						[]string{"believe", "algolia"}).SetDecomposition(
						[]string{"trust", "algolia"}).SetState(search.DictionaryEntryState("enabled")))})))
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/plurals/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"clearExistingDictionaryEntries":true,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}}]}`)
	})
	t.Run("delete", func(t *testing.T) {
		_, err := client.BatchDictionaryEntries(client.NewApiBatchDictionaryEntriesRequest(
			search.DictionaryType("plurals"),
			search.NewEmptyBatchDictionaryEntriesParams().SetClearExistingDictionaryEntries(true).SetRequests(
				[]search.BatchDictionaryEntriesRequest{*search.NewEmptyBatchDictionaryEntriesRequest().SetAction(search.DictionaryAction("deleteEntry")).SetBody(
					search.NewEmptyDictionaryEntry().SetObjectID("1"))})))
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/plurals/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"clearExistingDictionaryEntries":true,"requests":[{"action":"deleteEntry","body":{"objectID":"1"}}]}`)
	})
	t.Run("append", func(t *testing.T) {
		_, err := client.BatchDictionaryEntries(client.NewApiBatchDictionaryEntriesRequest(
			search.DictionaryType("stopwords"),
			search.NewEmptyBatchDictionaryEntriesParams().SetRequests(
				[]search.BatchDictionaryEntriesRequest{*search.NewEmptyBatchDictionaryEntriesRequest().SetAction(search.DictionaryAction("addEntry")).SetBody(
					search.NewEmptyDictionaryEntry().SetObjectID("1").SetLanguage(search.SupportedLanguage("en")).SetAdditionalProperty("additional", "try me"))})))
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/stopwords/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}`)
	})
}

func TestSearch_Browse(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("browse with minimal parameters", func(t *testing.T) {
		_, err := client.Browse(client.NewApiBrowseRequest(
			"cts_e2e_browse"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/cts_e2e_browse/browse", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("browse with search parameters", func(t *testing.T) {
		_, err := client.Browse(client.NewApiBrowseRequest(
			"indexName").WithBrowseParams(search.BrowseParamsObjectAsBrowseParams(
			search.NewEmptyBrowseParamsObject().SetQuery("myQuery").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.StringAsFacetFilters("tags:algolia")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/browse", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"myQuery","facetFilters":["tags:algolia"]}`)
	})
	t.Run("browse allow a cursor in parameters", func(t *testing.T) {
		_, err := client.Browse(client.NewApiBrowseRequest(
			"indexName").WithBrowseParams(search.BrowseParamsObjectAsBrowseParams(
			search.NewEmptyBrowseParamsObject().SetCursor("test"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/browse", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"cursor":"test"}`)
	})
}

func TestSearch_ClearObjects(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("clearObjects", func(t *testing.T) {
		_, err := client.ClearObjects(client.NewApiClearObjectsRequest(
			"theIndexName"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/clear", echo.Path)
		require.Equal(t, "POST", echo.Method)

		require.Empty(t, echo.Body)
	})
}

func TestSearch_ClearRules(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("clearRules", func(t *testing.T) {
		_, err := client.ClearRules(client.NewApiClearRulesRequest(
			"indexName"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/clear", echo.Path)
		require.Equal(t, "POST", echo.Method)

		require.Empty(t, echo.Body)
	})
}

func TestSearch_ClearSynonyms(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("clearSynonyms", func(t *testing.T) {
		_, err := client.ClearSynonyms(client.NewApiClearSynonymsRequest(
			"indexName"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/synonyms/clear", echo.Path)
		require.Equal(t, "POST", echo.Method)

		require.Empty(t, echo.Body)
	})
}

func TestSearch_CustomDelete(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("allow del method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
			"test/minimal"))
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("allow del method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomDelete(client.NewApiCustomDeleteRequest(
			"test/all").WithParameters(map[string]any{"query": "parameters"}))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_CustomGet(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("allow get method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomGet(client.NewApiCustomGetRequest(
			"test/minimal"))
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("allow get method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomGet(client.NewApiCustomGetRequest(
			"test/all").WithParameters(map[string]any{"query": "parameters with space"}))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters%20with%20space"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions should be escaped too", func(t *testing.T) {
		_, err := client.CustomGet(client.NewApiCustomGetRequest(
			"test/all").WithParameters(map[string]any{"query": "to be overriden"}), search.WithQueryParam("query", "parameters with space"), search.WithQueryParam("and an array",
			[]string{"array", "with spaces"}), search.WithHeaderParam("x-header-1", "spaces are left alone"))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-header-1":"spaces are left alone"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters%20with%20space","and%20an%20array":"array%2Cwith%20spaces"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_CustomPost(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("allow post method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/minimal"))
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("allow post method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/all").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"body":"parameters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions can override default query parameters", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithQueryParam("query", "myQueryParameter"))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"myQueryParameter"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions merges query parameters with default ones", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithQueryParam("query2", "myQueryParameter"))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","query2":"myQueryParameter"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions can override default headers", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-api-key":"ALGOLIA_API_KEY"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions merges headers with default ones", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithHeaderParam("x-algolia-api-key", "ALGOLIA_API_KEY"))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-algolia-api-key":"ALGOLIA_API_KEY"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts booleans", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithQueryParam("isItWorking", true))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","isItWorking":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts integers", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithQueryParam("myParam", 2))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"2"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of string", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithQueryParam("myParam",
			[]string{"b and c", "d"}))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"b%20and%20c%2Cd"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of booleans", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithQueryParam("myParam",
			[]bool{true, true, false}))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("requestOptions queryParameters accepts list of integers", func(t *testing.T) {
		_, err := client.CustomPost(client.NewApiCustomPostRequest(
			"test/requestOptions").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"facet": "filters"}), search.WithQueryParam("myParam",
			[]int32{1, 2}))
		require.NoError(t, err)

		require.Equal(t, "/test/requestOptions", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facet":"filters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters","myParam":"1%2C2"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_CustomPut(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("allow put method for a custom path with minimal parameters", func(t *testing.T) {
		_, err := client.CustomPut(client.NewApiCustomPutRequest(
			"test/minimal"))
		require.NoError(t, err)

		require.Equal(t, "/test/minimal", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("allow put method for a custom path with all parameters", func(t *testing.T) {
		_, err := client.CustomPut(client.NewApiCustomPutRequest(
			"test/all").WithParameters(map[string]any{"query": "parameters"}).WithBody(map[string]any{"body": "parameters"}))
		require.NoError(t, err)

		require.Equal(t, "/test/all", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"body":"parameters"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"query":"parameters"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_DeleteApiKey(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("deleteApiKey", func(t *testing.T) {
		_, err := client.DeleteApiKey(client.NewApiDeleteApiKeyRequest(
			"myTestApiKey"))
		require.NoError(t, err)

		require.Equal(t, "/1/keys/myTestApiKey", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_DeleteBy(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("deleteBy", func(t *testing.T) {
		_, err := client.DeleteBy(client.NewApiDeleteByRequest(
			"theIndexName",
			search.NewEmptyDeleteByParams().SetFilters("brand:brandName")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/deleteByQuery", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"brand:brandName"}`)
	})
}

func TestSearch_DeleteIndex(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("deleteIndex", func(t *testing.T) {
		_, err := client.DeleteIndex(client.NewApiDeleteIndexRequest(
			"theIndexName"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_DeleteObject(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("deleteObject", func(t *testing.T) {
		_, err := client.DeleteObject(client.NewApiDeleteObjectRequest(
			"<YOUR_INDEX_NAME>", "uniqueID"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/uniqueID", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_DeleteRule(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("delete rule simple case", func(t *testing.T) {
		_, err := client.DeleteRule(client.NewApiDeleteRuleRequest(
			"indexName", "id1"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/id1", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("delete rule with simple characters to encode in objectID", func(t *testing.T) {
		_, err := client.DeleteRule(client.NewApiDeleteRuleRequest(
			"indexName", "test/with/slash"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/test%2Fwith%2Fslash", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_DeleteSource(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("deleteSource", func(t *testing.T) {
		_, err := client.DeleteSource(client.NewApiDeleteSourceRequest(
			"theSource"))
		require.NoError(t, err)

		require.Equal(t, "/1/security/sources/theSource", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_DeleteSynonym(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("deleteSynonym", func(t *testing.T) {
		_, err := client.DeleteSynonym(client.NewApiDeleteSynonymRequest(
			"indexName", "id1"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/synonyms/id1", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetApiKey(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getApiKey", func(t *testing.T) {
		_, err := client.GetApiKey(client.NewApiGetApiKeyRequest(
			"myTestApiKey"))
		require.NoError(t, err)

		require.Equal(t, "/1/keys/myTestApiKey", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetAppTask(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getAppTask", func(t *testing.T) {
		_, err := client.GetAppTask(client.NewApiGetAppTaskRequest(
			123))
		require.NoError(t, err)

		require.Equal(t, "/1/task/123", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetDictionaryLanguages(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("get getDictionaryLanguages", func(t *testing.T) {
		_, err := client.GetDictionaryLanguages()
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/*/languages", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetDictionarySettings(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("get getDictionarySettings results", func(t *testing.T) {
		_, err := client.GetDictionarySettings()
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/*/settings", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetLogs(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getLogs with minimal parameters", func(t *testing.T) {
		_, err := client.GetLogs(client.NewApiGetLogsRequest())
		require.NoError(t, err)

		require.Equal(t, "/1/logs", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("getLogs with parameters", func(t *testing.T) {
		_, err := client.GetLogs(client.NewApiGetLogsRequest().WithOffset(5).WithLength(10).WithIndexName("theIndexName").WithType(search.LogType("all")))
		require.NoError(t, err)

		require.Equal(t, "/1/logs", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"offset":"5","length":"10","indexName":"theIndexName","type":"all"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_GetObject(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getObject", func(t *testing.T) {
		_, err := client.GetObject(client.NewApiGetObjectRequest(
			"theIndexName", "uniqueID").WithAttributesToRetrieve(
			[]string{"attr1", "attr2"}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/uniqueID", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"attributesToRetrieve":"attr1%2Cattr2"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("search with a real object", func(t *testing.T) {
		_, err := client.GetObject(client.NewApiGetObjectRequest(
			"cts_e2e_browse", "Batman and Robin"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/cts_e2e_browse/Batman%20and%20Robin", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetObjects(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getObjects", func(t *testing.T) {
		_, err := client.GetObjects(client.NewApiGetObjectsRequest(

			search.NewEmptyGetObjectsParams().SetRequests(
				[]search.GetObjectsRequest{*search.NewEmptyGetObjectsRequest().SetAttributesToRetrieve(
					[]string{"attr1", "attr2"}).SetObjectID("uniqueID").SetIndexName("theIndexName")})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/objects", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}`)
	})
}

func TestSearch_GetRule(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getRule", func(t *testing.T) {
		_, err := client.GetRule(client.NewApiGetRuleRequest(
			"cts_e2e_browse", "qr-1725004648916"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/cts_e2e_browse/rules/qr-1725004648916", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetSettings(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getSettings", func(t *testing.T) {
		_, err := client.GetSettings(client.NewApiGetSettingsRequest(
			"cts_e2e_settings"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/cts_e2e_settings/settings", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetSources(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getSources", func(t *testing.T) {
		_, err := client.GetSources()
		require.NoError(t, err)

		require.Equal(t, "/1/security/sources", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetSynonym(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getSynonym", func(t *testing.T) {
		_, err := client.GetSynonym(client.NewApiGetSynonymRequest(
			"indexName", "id1"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/synonyms/id1", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetTask(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getTask", func(t *testing.T) {
		_, err := client.GetTask(client.NewApiGetTaskRequest(
			"theIndexName", 123))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/task/123", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetTopUserIds(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getTopUserIds", func(t *testing.T) {
		_, err := client.GetTopUserIds()
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping/top", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_GetUserId(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("getUserId", func(t *testing.T) {
		_, err := client.GetUserId(client.NewApiGetUserIdRequest(
			"uniqueID"))
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping/uniqueID", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_HasPendingMappings(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("hasPendingMappings with minimal parameters", func(t *testing.T) {
		_, err := client.HasPendingMappings(client.NewApiHasPendingMappingsRequest())
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping/pending", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("hasPendingMappings with parameters", func(t *testing.T) {
		_, err := client.HasPendingMappings(client.NewApiHasPendingMappingsRequest().WithGetClusters(true))
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping/pending", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"getClusters":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_ListApiKeys(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("listApiKeys", func(t *testing.T) {
		_, err := client.ListApiKeys()
		require.NoError(t, err)

		require.Equal(t, "/1/keys", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_ListClusters(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("listClusters", func(t *testing.T) {
		_, err := client.ListClusters()
		require.NoError(t, err)

		require.Equal(t, "/1/clusters", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_ListIndices(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("listIndices with minimal parameters", func(t *testing.T) {
		_, err := client.ListIndices(client.NewApiListIndicesRequest())
		require.NoError(t, err)

		require.Equal(t, "/1/indexes", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("listIndices with parameters", func(t *testing.T) {
		_, err := client.ListIndices(client.NewApiListIndicesRequest().WithPage(8).WithHitsPerPage(3))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"page":"8","hitsPerPage":"3"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_ListUserIds(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("listUserIds with minimal parameters", func(t *testing.T) {
		_, err := client.ListUserIds(client.NewApiListUserIdsRequest())
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
	})
	t.Run("listUserIds with parameters", func(t *testing.T) {
		_, err := client.ListUserIds(client.NewApiListUserIdsRequest().WithPage(8).WithHitsPerPage(100))
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping", echo.Path)
		require.Equal(t, "GET", echo.Method)

		require.Nil(t, echo.Body)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"page":"8","hitsPerPage":"100"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_MultipleBatch(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("multipleBatch", func(t *testing.T) {
		_, err := client.MultipleBatch(client.NewApiMultipleBatchRequest(

			search.NewEmptyBatchParams().SetRequests(
				[]search.MultipleBatchRequest{*search.NewEmptyMultipleBatchRequest().SetAction(search.Action("addObject")).SetBody(map[string]any{"key": "value"}).SetIndexName("theIndexName")})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"action":"addObject","body":{"key":"value"},"indexName":"theIndexName"}]}`)
	})
}

func TestSearch_OperationIndex(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("scopes", func(t *testing.T) {
		_, err := client.OperationIndex(client.NewApiOperationIndexRequest(
			"<SOURCE_INDEX_NAME>",
			search.NewEmptyOperationIndexParams().SetOperation(search.OperationType("move")).SetDestination("<DESTINATION_INDEX_NAME>").SetScope(
				[]search.ScopeType{search.ScopeType("rules"), search.ScopeType("settings")})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"operation":"move","destination":"<DESTINATION_INDEX_NAME>","scope":["rules","settings"]}`)
	})
	t.Run("copy", func(t *testing.T) {
		_, err := client.OperationIndex(client.NewApiOperationIndexRequest(
			"<SOURCE_INDEX_NAME>",
			search.NewEmptyOperationIndexParams().SetOperation(search.OperationType("copy")).SetDestination("<DESTINATION_INDEX_NAME>")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"operation":"copy","destination":"<DESTINATION_INDEX_NAME>"}`)
	})
	t.Run("move", func(t *testing.T) {
		_, err := client.OperationIndex(client.NewApiOperationIndexRequest(
			"<SOURCE_INDEX_NAME>",
			search.NewEmptyOperationIndexParams().SetOperation(search.OperationType("move")).SetDestination("<DESTINATION_INDEX_NAME>")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"operation":"move","destination":"<DESTINATION_INDEX_NAME>"}`)
	})
}

func TestSearch_PartialUpdateObject(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("Partial update with a new value for a string attribute", func(t *testing.T) {
		_, err := client.PartialUpdateObject(client.NewApiPartialUpdateObjectRequest(
			"theIndexName", "uniqueID", map[string]any{"attributeId": "new value"}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/uniqueID/partial", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeId":"new value"}`)
	})
	t.Run("Partial update with a new value for an integer attribute", func(t *testing.T) {
		_, err := client.PartialUpdateObject(client.NewApiPartialUpdateObjectRequest(
			"theIndexName", "uniqueID", map[string]any{"attributeId": 1}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/uniqueID/partial", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeId":1}`)
	})
	t.Run("Partial update with a new value for a boolean attribute", func(t *testing.T) {
		_, err := client.PartialUpdateObject(client.NewApiPartialUpdateObjectRequest(
			"theIndexName", "uniqueID", map[string]any{"attributeId": true}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/uniqueID/partial", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeId":true}`)
	})
	t.Run("Partial update with a new value for an array attribute", func(t *testing.T) {
		_, err := client.PartialUpdateObject(client.NewApiPartialUpdateObjectRequest(
			"theIndexName", "uniqueID", map[string]any{"attributeId": []string{"one", "two", "three"}}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/uniqueID/partial", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeId":["one","two","three"]}`)
	})
	t.Run("Partial update with a new value for an object attribute", func(t *testing.T) {
		_, err := client.PartialUpdateObject(client.NewApiPartialUpdateObjectRequest(
			"theIndexName", "uniqueID", map[string]any{"attributeId": map[string]any{"nested": "value"}}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/uniqueID/partial", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeId":{"nested":"value"}}`)
	})
	t.Run("with visible_by filter", func(t *testing.T) {
		_, err := client.PartialUpdateObject(client.NewApiPartialUpdateObjectRequest(
			"theIndexName", "uniqueID", map[string]any{"visible_by": []string{"Angela", "group/Finance", "group/Shareholders"}}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/uniqueID/partial", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"visible_by":["Angela","group/Finance","group/Shareholders"]}`)
	})
}

func TestSearch_RemoveUserId(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("removeUserId", func(t *testing.T) {
		_, err := client.RemoveUserId(client.NewApiRemoveUserIdRequest(
			"uniqueID"))
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping/uniqueID", echo.Path)
		require.Equal(t, "DELETE", echo.Method)

		require.Nil(t, echo.Body)
	})
}

func TestSearch_ReplaceSources(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("replaceSources", func(t *testing.T) {
		_, err := client.ReplaceSources(client.NewApiReplaceSourcesRequest(

			[]search.Source{*search.NewEmptySource().SetSource("theSource").SetDescription("theDescription")}))
		require.NoError(t, err)

		require.Equal(t, "/1/security/sources", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `[{"source":"theSource","description":"theDescription"}]`)
	})
}

func TestSearch_RestoreApiKey(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("restoreApiKey", func(t *testing.T) {
		_, err := client.RestoreApiKey(client.NewApiRestoreApiKeyRequest(
			"ALGOLIA_API_KEY"))
		require.NoError(t, err)

		require.Equal(t, "/1/keys/ALGOLIA_API_KEY/restore", echo.Path)
		require.Equal(t, "POST", echo.Method)

		require.Empty(t, echo.Body)
	})
}

func TestSearch_SaveObject(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("saveObject", func(t *testing.T) {
		_, err := client.SaveObject(client.NewApiSaveObjectRequest(
			"<YOUR_INDEX_NAME>", map[string]any{"objectID": "id", "test": "val"}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"id","test":"val"}`)
	})
}

func TestSearch_SaveRule(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("saveRule with minimal parameters", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "id1",
			search.NewEmptyRule().SetObjectID("id1").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("apple").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetFilters("brand:xiaomi")))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/id1", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:xiaomi"}}}`)
	})
	t.Run("saveRule with all parameters", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "id1",
			search.NewEmptyRule().SetObjectID("id1").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("apple").SetAnchoring(search.Anchoring("contains")).SetAlternatives(false).SetContext("search")}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetFilters("brand:apple").SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetRemove(
							[]string{"algolia"}).SetEdits(
							[]search.Edit{*search.NewEmptyEdit().SetType(search.EditType("remove")).SetDelete("abc").SetInsert("cde"), *search.NewEmptyEdit().SetType(search.EditType("replace")).SetDelete("abc").SetInsert("cde")})))).SetHide(
					[]search.ConsequenceHide{*search.NewEmptyConsequenceHide().SetObjectID("321")}).SetFilterPromotes(false).SetUserData(map[string]any{"algolia": "aloglia"}).SetPromote(
					[]search.Promote{*search.PromoteObjectIDAsPromote(
						search.NewEmptyPromoteObjectID().SetObjectID("abc").SetPosition(3)), *search.PromoteObjectIDsAsPromote(
						search.NewEmptyPromoteObjectIDs().SetObjectIDs(
							[]string{"abc", "def"}).SetPosition(1))})).SetDescription("test").SetEnabled(true).SetValidity(
				[]search.TimeRange{*search.NewEmptyTimeRange().SetFrom(1656670273).SetUntil(1656670277)})).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/id1", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("b2b catalog", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "article-rule",
			search.NewEmptyRule().SetObjectID("article-rule").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("article").SetAnchoring(search.Anchoring("startsWith"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetEdits(
							[]search.Edit{*search.NewEmptyEdit().SetType(search.EditType("remove")).SetDelete("article")}))).SetRestrictSearchableAttributes(
						[]string{"title", "book_id"})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/article-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}`)
	})
	t.Run("merchandising and promoting", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "director-rule",
			search.NewEmptyRule().SetObjectID("director-rule").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("{facet:director} director").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetRestrictSearchableAttributes(
						[]string{"title", "book_id"}).SetAutomaticFacetFilters(search.ArrayOfAutomaticFacetFilterAsAutomaticFacetFilters(
						[]search.AutomaticFacetFilter{*search.NewEmptyAutomaticFacetFilter().SetFacet("director")})).SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetEdits(
							[]search.Edit{*search.NewEmptyEdit().SetType(search.EditType("remove")).SetDelete("director")})))))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/director-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"director-rule","conditions":[{"pattern":"{facet:director} director","anchoring":"contains"}],"consequence":{"params":{"restrictSearchableAttributes":["title","book_id"],"automaticFacetFilters":[{"facet":"director"}],"query":{"edits":[{"type":"remove","delete":"director"}]}}}}`)
	})
	t.Run("harry potter", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "harry-potter-rule",
			search.NewEmptyRule().SetObjectID("harry-potter-rule").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("harry potter").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetUserData(map[string]any{"promo_content": "20% OFF on all Harry Potter books!"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/harry-potter-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"harry-potter-rule","conditions":[{"pattern":"harry potter","anchoring":"contains"}],"consequence":{"userData":{"promo_content":"20%% OFF on all Harry Potter books!"}}}`)
	})
	t.Run("merchandising empty query", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "clearance-category-filter",
			search.NewEmptyRule().SetObjectID("clearance-category-filter").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("").SetAnchoring(search.Anchoring("is")).SetContext("landing")}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetOptionalFilters(search.StringAsOptionalFilters("clearance:true"))))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/clearance-category-filter", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"clearance-category-filter","conditions":[{"pattern":"","anchoring":"is","context":"landing"}],"consequence":{"params":{"optionalFilters":"clearance:true"}}}`)
	})
	t.Run("redirect", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "redirect-help-rule",
			search.NewEmptyRule().SetObjectID("redirect-help-rule").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("help").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetUserData(map[string]any{"redirect": "https://www.algolia.com/support"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/redirect-help-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"redirect-help-rule","conditions":[{"pattern":"help","anchoring":"contains"}],"consequence":{"userData":{"redirect":"https://www.algolia.com/support"}}}`)
	})
	t.Run("promote some results over others", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "tomato-fruit",
			search.NewEmptyRule().SetObjectID("tomato-fruit").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("tomato").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetOptionalFilters(search.StringAsOptionalFilters("food_group:fruit"))))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/tomato-fruit", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"tomato-fruit","conditions":[{"pattern":"tomato","anchoring":"contains"}],"consequence":{"params":{"optionalFilters":"food_group:fruit"}}}`)
	})
	t.Run("promote several hits", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "Promote-Apple-Newest",
			search.NewEmptyRule().SetObjectID("Promote-Apple-Newest").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("apple").SetAnchoring(search.Anchoring("is"))}).SetConsequence(
				search.NewEmptyConsequence().SetPromote(
					[]search.Promote{*search.PromoteObjectIDsAsPromote(
						search.NewEmptyPromoteObjectIDs().SetObjectIDs(
							[]string{"iPhone-12345", "watch-123"}).SetPosition(0))}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/Promote-Apple-Newest", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"Promote-Apple-Newest","conditions":[{"pattern":"apple","anchoring":"is"}],"consequence":{"promote":[{"objectIDs":["iPhone-12345","watch-123"],"position":0}]}}`)
	})
	t.Run("promote newest release", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "Promote-iPhone-X",
			search.NewEmptyRule().SetObjectID("Promote-iPhone-X").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("iPhone").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetPromote(
					[]search.Promote{*search.PromoteObjectIDAsPromote(
						search.NewEmptyPromoteObjectID().SetObjectID("iPhone-12345").SetPosition(0))}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/Promote-iPhone-X", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"Promote-iPhone-X","conditions":[{"pattern":"iPhone","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"iPhone-12345","position":0}]}}`)
	})
	t.Run("promote single item", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "promote-harry-potter-box-set",
			search.NewEmptyRule().SetObjectID("promote-harry-potter-box-set").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("Harry Potter").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetPromote(
					[]search.Promote{*search.PromoteObjectIDAsPromote(
						search.NewEmptyPromoteObjectID().SetObjectID("HP-12345").SetPosition(0))}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/promote-harry-potter-box-set", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"promote-harry-potter-box-set","conditions":[{"pattern":"Harry Potter","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"HP-12345","position":0}]}}`)
	})
	t.Run("limit search results", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "article-rule",
			search.NewEmptyRule().SetObjectID("article-rule").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("article").SetAnchoring(search.Anchoring("startsWith"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetEdits(
							[]search.Edit{*search.NewEmptyEdit().SetType(search.EditType("remove")).SetDelete("article")}))).SetRestrictSearchableAttributes(
						[]string{"title", "book_id"})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/article-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}`)
	})
	t.Run("query match", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "tagged-brand-rule",
			search.NewEmptyRule().SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("brand: {facet:brand}").SetAnchoring(search.Anchoring("contains")).SetAlternatives(false)}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetAutomaticFacetFilters(search.ArrayOfAutomaticFacetFilterAsAutomaticFacetFilters(
						[]search.AutomaticFacetFilter{*search.NewEmptyAutomaticFacetFilter().SetFacet("brand")})).SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetRemove(
							[]string{"brand:", "{facet:brand}"}))))).SetDescription("filter on brand: {brand}").SetObjectID("tagged-brand-rule")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/tagged-brand-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"conditions":[{"pattern":"brand: {facet:brand}","anchoring":"contains","alternatives":false}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"brand"}],"query":{"remove":["brand:","{facet:brand}"]}}},"description":"filter on brand: {brand}","objectID":"tagged-brand-rule"}`)
	})
	t.Run("dynamic filtering", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "color-facets",
			search.NewEmptyRule().SetObjectID("color-facets").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("{facet:color}")}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetAutomaticFacetFilters(search.ArrayOfAutomaticFacetFilterAsAutomaticFacetFilters(
						[]search.AutomaticFacetFilter{*search.NewEmptyAutomaticFacetFilter().SetFacet("color")}))))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/color-facets", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"color-facets","conditions":[{"pattern":"{facet:color}"}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"color"}]}}}`)
	})
	t.Run("hide hits", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "hide-12345",
			search.NewEmptyRule().SetObjectID("hide-12345").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("cheap").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetHide(
					[]search.ConsequenceHide{*search.NewEmptyConsequenceHide().SetObjectID("to-hide-12345")}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/hide-12345", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"hide-12345","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"hide":[{"objectID":"to-hide-12345"}]}}`)
	})
	t.Run("one rule per facet", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "red-color",
			search.NewEmptyRule().SetObjectID("red-color").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("red").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetRemove(
							[]string{"red"}))).SetFilters("color:red")))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/red-color", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"red-color","conditions":[{"pattern":"red","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["red"]},"filters":"color:red"}}}`)
	})
	t.Run("numerical filters", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "cheap",
			search.NewEmptyRule().SetObjectID("cheap").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("cheap").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetRemove(
							[]string{"cheap"}))).SetFilters("price < 10")))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/cheap", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 10"}}}`)
	})
	t.Run("negative filters", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "gluten-free-rule",
			search.NewEmptyRule().SetObjectID("gluten-free-rule").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("gluten-free").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetFilters("NOT allergens:gluten").SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetEdits(
							[]search.Edit{*search.NewEmptyEdit().SetType(search.EditType("remove")).SetDelete("gluten-free")})))))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/gluten-free-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"gluten-free-rule","conditions":[{"pattern":"gluten-free","anchoring":"contains"}],"consequence":{"params":{"filters":"NOT allergens:gluten","query":{"edits":[{"type":"remove","delete":"gluten-free"}]}}}}`)
	})
	t.Run("positive filters", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "diet-rule",
			search.NewEmptyRule().SetObjectID("diet-rule").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("diet").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetFilters("'low-carb' OR 'low-fat'").SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetEdits(
							[]search.Edit{*search.NewEmptyEdit().SetType(search.EditType("remove")).SetDelete("diet")})))))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/diet-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"diet-rule","conditions":[{"pattern":"diet","anchoring":"contains"}],"consequence":{"params":{"filters":"'low-carb' OR 'low-fat'","query":{"edits":[{"type":"remove","delete":"diet"}]}}}}`)
	})
	t.Run("conditionless", func(t *testing.T) {
		_, err := client.SaveRule(client.NewApiSaveRuleRequest(
			"indexName", "diet-rule",
			search.NewEmptyRule().SetObjectID("diet-rule").SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetFilters("'low-carb' OR 'low-fat'").SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetEdits(
							[]search.Edit{*search.NewEmptyEdit().SetType(search.EditType("remove")).SetDelete("diet")})))))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/rules/diet-rule", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"diet-rule","consequence":{"params":{"filters":"'low-carb' OR 'low-fat'","query":{"edits":[{"type":"remove","delete":"diet"}]}}}}`)
	})
}

func TestSearch_SaveRules(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("saveRules with minimal parameters", func(t *testing.T) {
		_, err := client.SaveRules(client.NewApiSaveRulesRequest(
			"<YOUR_INDEX_NAME>",
			[]search.Rule{*search.NewEmptyRule().SetObjectID("a-rule-id").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("smartphone").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetFilters("brand:apple"))), *search.NewEmptyRule().SetObjectID("a-second-rule-id").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("apple").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetFilters("brand:samsung")))}).WithForwardToReplicas(false).WithClearExistingRules(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `[{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:apple"}}},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:samsung"}}}]`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"false","clearExistingRules":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("saveRules with all parameters", func(t *testing.T) {
		_, err := client.SaveRules(client.NewApiSaveRulesRequest(
			"<YOUR_INDEX_NAME>",
			[]search.Rule{*search.NewEmptyRule().SetObjectID("id1").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("apple").SetAnchoring(search.Anchoring("contains")).SetAlternatives(false).SetContext("search")}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetFilters("brand:apple").SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetRemove(
							[]string{"algolia"}).SetEdits(
							[]search.Edit{*search.NewEmptyEdit().SetType(search.EditType("remove")).SetDelete("abc").SetInsert("cde"), *search.NewEmptyEdit().SetType(search.EditType("replace")).SetDelete("abc").SetInsert("cde")})))).SetHide(
					[]search.ConsequenceHide{*search.NewEmptyConsequenceHide().SetObjectID("321")}).SetFilterPromotes(false).SetUserData(map[string]any{"algolia": "aloglia"}).SetPromote(
					[]search.Promote{*search.PromoteObjectIDAsPromote(
						search.NewEmptyPromoteObjectID().SetObjectID("abc").SetPosition(3)), *search.PromoteObjectIDsAsPromote(
						search.NewEmptyPromoteObjectIDs().SetObjectIDs(
							[]string{"abc", "def"}).SetPosition(1))})).SetDescription("test").SetEnabled(true).SetValidity(
				[]search.TimeRange{*search.NewEmptyTimeRange().SetFrom(1656670273).SetUntil(1656670277)})}).WithForwardToReplicas(true).WithClearExistingRules(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `[{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true","clearExistingRules":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("dynamic filtering", func(t *testing.T) {
		_, err := client.SaveRules(client.NewApiSaveRulesRequest(
			"<YOUR_INDEX_NAME>",
			[]search.Rule{*search.NewEmptyRule().SetObjectID("toaster").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("toaster").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetRemove(
							[]string{"toaster"}))).SetFilters("product_type:toaster"))), *search.NewEmptyRule().SetObjectID("cheap").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("cheap").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetQuery(search.ConsequenceQueryObjectAsConsequenceQuery(
						search.NewEmptyConsequenceQueryObject().SetRemove(
							[]string{"cheap"}))).SetFilters("price < 15")))}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `[{"objectID":"toaster","conditions":[{"pattern":"toaster","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["toaster"]},"filters":"product_type:toaster"}}},{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 15"}}}]`)
	})
	t.Run("enhance search results", func(t *testing.T) {
		_, err := client.SaveRules(client.NewApiSaveRulesRequest(
			"<YOUR_INDEX_NAME>",
			[]search.Rule{*search.NewEmptyRule().SetObjectID("country").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("{facet:country}").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetAroundLatLngViaIP(false))), *search.NewEmptyRule().SetObjectID("city").SetConditions(
				[]search.Condition{*search.NewEmptyCondition().SetPattern("{facet:city}").SetAnchoring(search.Anchoring("contains"))}).SetConsequence(
				search.NewEmptyConsequence().SetParams(
					search.NewEmptyConsequenceParams().SetAroundLatLngViaIP(false)))}))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `[{"objectID":"country","conditions":[{"pattern":"{facet:country}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}},{"objectID":"city","conditions":[{"pattern":"{facet:city}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}}]`)
	})
}

func TestSearch_SaveSynonym(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("saveSynonym", func(t *testing.T) {
		_, err := client.SaveSynonym(client.NewApiSaveSynonymRequest(
			"indexName", "id1",
			search.NewEmptySynonymHit().SetObjectID("id1").SetType(search.SynonymType("synonym")).SetSynonyms(
				[]string{"car", "vehicule", "auto"})).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/synonyms/id1", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_SaveSynonyms(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("saveSynonyms", func(t *testing.T) {
		_, err := client.SaveSynonyms(client.NewApiSaveSynonymsRequest(
			"<YOUR_INDEX_NAME>",
			[]search.SynonymHit{*search.NewEmptySynonymHit().SetObjectID("id1").SetType(search.SynonymType("synonym")).SetSynonyms(
				[]string{"car", "vehicule", "auto"}), *search.NewEmptySynonymHit().SetObjectID("id2").SetType(search.SynonymType("onewaysynonym")).SetInput("iphone").SetSynonyms(
				[]string{"ephone", "aphone", "yphone"})}).WithForwardToReplicas(true).WithReplaceExistingSynonyms(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/synonyms/batch", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `[{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true","replaceExistingSynonyms":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
}

func TestSearch_Search(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("withHitsPerPage", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetHitsPerPage(50))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","hitsPerPage":50}]}`)
	})
	t.Run("filterOnly", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFilters("actor:Scarlett Johansson"))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Scarlett Johansson"}]}`)
	})
	t.Run("filterOr", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFilters("actor:Tom Cruise OR actor:Scarlett Johansson"))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Tom Cruise OR actor:Scarlett Johansson"}]}`)
	})
	t.Run("filterNot", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFilters("NOT actor:Nicolas Cage"))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"NOT actor:Nicolas Cage"}]}`)
	})
	t.Run("search for a single hits request with minimal parameters", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("cts_e2e_search_empty_index"))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"cts_e2e_search_empty_index"}]}`)
	})
	t.Run("search with highlight and snippet results", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("cts_e2e_highlight_snippet_results").SetQuery("vim").SetAttributesToSnippet(
						[]string{"*:20"}).SetAttributesToHighlight(
						[]string{"*"}).SetAttributesToRetrieve(
						[]string{"*"}))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"cts_e2e_highlight_snippet_results","query":"vim","attributesToSnippet":["*:20"],"attributesToHighlight":["*"],"attributesToRetrieve":["*"]}]}`)
	})
	t.Run("retrieveFacets", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFacets(
						[]string{"author", "genre"}))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["author","genre"]}]}`)
	})
	t.Run("retrieveFacetsWildcard", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("<YOUR_INDEX_NAME>").SetQuery("<YOUR_QUERY>").SetFacets(
						[]string{"*"}))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["*"]}]}`)
	})
	t.Run("search for a single facet request with minimal parameters", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForFacetsAsSearchQuery(
					search.NewEmptySearchForFacets().SetIndexName("cts_e2e_search_facet").SetType(search.SearchTypeFacet("facet")).SetFacet("editor"))}).SetStrategy(search.SearchStrategy("stopIfEnoughMatches"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"cts_e2e_search_facet","type":"facet","facet":"editor"}],"strategy":"stopIfEnoughMatches"}`)
	})
	t.Run("search for a single hits request with all parameters", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("theIndexName").SetQuery("myQuery").SetHitsPerPage(50).SetType(search.SearchTypeDefault("default")))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}`)
	})
	t.Run("search for a single facet request with all parameters", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForFacetsAsSearchQuery(
					search.NewEmptySearchForFacets().SetIndexName("theIndexName").SetType(search.SearchTypeFacet("facet")).SetFacet("theFacet").SetFacetQuery("theFacetQuery").SetQuery("theQuery").SetMaxFacetHits(50))}).SetStrategy(search.SearchStrategy("stopIfEnoughMatches"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}`)
	})
	t.Run("search for multiple mixed requests in multiple indices with minimal parameters", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("theIndexName")), *search.SearchForFacetsAsSearchQuery(
					search.NewEmptySearchForFacets().SetIndexName("theIndexName2").SetType(search.SearchTypeFacet("facet")).SetFacet("theFacet")), *search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("theIndexName").SetType(search.SearchTypeDefault("default")))}).SetStrategy(search.SearchStrategy("stopIfEnoughMatches"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}`)
	})
	t.Run("search for multiple mixed requests in multiple indices with all parameters", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForFacetsAsSearchQuery(
					search.NewEmptySearchForFacets().SetIndexName("theIndexName").SetType(search.SearchTypeFacet("facet")).SetFacet("theFacet").SetFacetQuery("theFacetQuery").SetQuery("theQuery").SetMaxFacetHits(50)), *search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("theIndexName").SetQuery("myQuery").SetHitsPerPage(50).SetType(search.SearchTypeDefault("default")))}).SetStrategy(search.SearchStrategy("stopIfEnoughMatches"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}`)
	})
	t.Run("search filters accept all of the possible shapes", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("theIndexName").SetFacetFilters(search.StringAsFacetFilters("mySearch:filters")).SetReRankingApplyFilter(search.StringAsReRankingApplyFilter("mySearch:filters")).SetTagFilters(search.StringAsTagFilters("mySearch:filters")).SetNumericFilters(search.StringAsNumericFilters("mySearch:filters")).SetOptionalFilters(search.StringAsOptionalFilters("mySearch:filters"))), *search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("theIndexName").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
						[]search.FacetFilters{*search.StringAsFacetFilters("mySearch:filters"), *search.ArrayOfFacetFiltersAsFacetFilters(
							[]search.FacetFilters{*search.StringAsFacetFilters("mySearch:filters"), *search.ArrayOfFacetFiltersAsFacetFilters(
								[]search.FacetFilters{*search.StringAsFacetFilters("mySearch:filters")})})})).SetReRankingApplyFilter(search.ArrayOfReRankingApplyFilterAsReRankingApplyFilter(
						[]search.ReRankingApplyFilter{*search.StringAsReRankingApplyFilter("mySearch:filters"), *search.ArrayOfReRankingApplyFilterAsReRankingApplyFilter(
							[]search.ReRankingApplyFilter{*search.StringAsReRankingApplyFilter("mySearch:filters")})})).SetTagFilters(search.ArrayOfTagFiltersAsTagFilters(
						[]search.TagFilters{*search.StringAsTagFilters("mySearch:filters"), *search.ArrayOfTagFiltersAsTagFilters(
							[]search.TagFilters{*search.StringAsTagFilters("mySearch:filters")})})).SetNumericFilters(search.ArrayOfNumericFiltersAsNumericFilters(
						[]search.NumericFilters{*search.StringAsNumericFilters("mySearch:filters"), *search.ArrayOfNumericFiltersAsNumericFilters(
							[]search.NumericFilters{*search.StringAsNumericFilters("mySearch:filters")})})).SetOptionalFilters(search.ArrayOfOptionalFiltersAsOptionalFilters(
						[]search.OptionalFilters{*search.StringAsOptionalFilters("mySearch:filters"), *search.ArrayOfOptionalFiltersAsOptionalFilters(
							[]search.OptionalFilters{*search.StringAsOptionalFilters("mySearch:filters")})})))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters",["mySearch:filters"]]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}`)
	})
	t.Run("search filters end to end", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("cts_e2e_search_facet").SetFilters("editor:'visual studio' OR editor:neovim")), *search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("cts_e2e_search_facet").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
						[]search.FacetFilters{*search.StringAsFacetFilters("editor:'visual studio'"), *search.StringAsFacetFilters("editor:neovim")}))), *search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("cts_e2e_search_facet").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
						[]search.FacetFilters{*search.StringAsFacetFilters("editor:'visual studio'"), *search.ArrayOfFacetFiltersAsFacetFilters(
							[]search.FacetFilters{*search.StringAsFacetFilters("editor:neovim")})}))), *search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetIndexName("cts_e2e_search_facet").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
						[]search.FacetFilters{*search.StringAsFacetFilters("editor:'visual studio'"), *search.ArrayOfFacetFiltersAsFacetFilters(
							[]search.FacetFilters{*search.StringAsFacetFilters("editor:neovim"), *search.ArrayOfFacetFiltersAsFacetFilters(
								[]search.FacetFilters{*search.StringAsFacetFilters("editor:goland")})})})))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"indexName":"cts_e2e_search_facet","filters":"editor:'visual studio' OR editor:neovim"},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'","editor:neovim"]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim"]]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim",["editor:goland"]]]}]}`)
	})
	t.Run("search with all search parameters", func(t *testing.T) {
		_, err := client.Search(client.NewApiSearchRequest(

			search.NewEmptySearchMethodParams().SetRequests(
				[]search.SearchQuery{*search.SearchForHitsAsSearchQuery(
					search.NewEmptySearchForHits().SetAdvancedSyntax(true).SetAdvancedSyntaxFeatures(
						[]search.AdvancedSyntaxFeatures{search.AdvancedSyntaxFeatures("exactPhrase")}).SetAllowTyposOnNumericTokens(true).SetAlternativesAsExact(
						[]search.AlternativesAsExact{search.AlternativesAsExact("multiWordsSynonym")}).SetAnalytics(true).SetAnalyticsTags(
						[]string{""}).SetAroundLatLng("").SetAroundLatLngViaIP(true).SetAroundPrecision(search.Int32AsAroundPrecision(0)).SetAroundRadius(search.AroundRadiusAllAsAroundRadius(search.AroundRadiusAll("all"))).SetAttributeCriteriaComputedByMinProximity(true).SetAttributesToHighlight(
						[]string{""}).SetAttributesToRetrieve(
						[]string{""}).SetAttributesToSnippet(
						[]string{""}).SetClickAnalytics(true).SetDecompoundQuery(true).SetDisableExactOnAttributes(
						[]string{""}).SetDisableTypoToleranceOnAttributes(
						[]string{""}).SetDistinct(search.Int32AsDistinct(0)).SetEnableABTest(true).SetEnablePersonalization(true).SetEnableReRanking(true).SetEnableRules(true).SetExactOnSingleWordQuery(search.ExactOnSingleWordQuery("attribute")).SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
						[]search.FacetFilters{*search.StringAsFacetFilters("")})).SetFacetingAfterDistinct(true).SetFacets(
						[]string{""}).SetFilters("").SetGetRankingInfo(true).SetHighlightPostTag("").SetHighlightPreTag("").SetHitsPerPage(1).SetIgnorePlurals(search.BoolAsIgnorePlurals(false)).SetIndexName("theIndexName").SetInsideBoundingBox(search.ArrayOfArrayOfFloat64AsInsideBoundingBox(
						[][]float64{
							[]float64{47.3165, 4.9665, 47.3424, 5.0201},
							[]float64{40.9234, 2.1185, 38.643, 1.9916}})).SetInsidePolygon(
						[][]float64{
							[]float64{47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9},
							[]float64{40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104}}).SetLength(1).SetMaxValuesPerFacet(0).SetMinProximity(1).SetMinWordSizefor1Typo(0).SetMinWordSizefor2Typos(0).SetMinimumAroundRadius(1).SetNaturalLanguages(
						[]search.SupportedLanguage{search.SupportedLanguage("fr")}).SetNumericFilters(search.ArrayOfNumericFiltersAsNumericFilters(
						[]search.NumericFilters{*search.StringAsNumericFilters("")})).SetOffset(0).SetOptionalFilters(search.ArrayOfOptionalFiltersAsOptionalFilters(
						[]search.OptionalFilters{*search.StringAsOptionalFilters("")})).SetOptionalWords(search.ArrayOfStringAsOptionalWords(
						[]string{""})).SetPage(0).SetPercentileComputation(true).SetPersonalizationImpact(0).SetQuery("").SetQueryLanguages(
						[]search.SupportedLanguage{search.SupportedLanguage("fr")}).SetQueryType(search.QueryType("prefixAll")).SetRanking(
						[]string{""}).SetReRankingApplyFilter(search.ArrayOfReRankingApplyFilterAsReRankingApplyFilter(
						[]search.ReRankingApplyFilter{*search.StringAsReRankingApplyFilter("")})).SetRelevancyStrictness(0).SetRemoveStopWords(search.BoolAsRemoveStopWords(true)).SetRemoveWordsIfNoResults(search.RemoveWordsIfNoResults("allOptional")).SetRenderingContent(
						search.NewEmptyRenderingContent().SetFacetOrdering(
							search.NewEmptyFacetOrdering().SetFacets(
								search.NewEmptyFacets().SetOrder(
									[]string{"a", "b"})).SetValues(map[string]search.Value{"a": *search.NewEmptyValue().SetOrder(
								[]string{"b"}).SetSortRemainingBy(search.SortRemainingBy("count"))}))).SetReplaceSynonymsInHighlight(true).SetResponseFields(
						[]string{""}).SetRestrictHighlightAndSnippetArrays(true).SetRestrictSearchableAttributes(
						[]string{""}).SetRuleContexts(
						[]string{""}).SetSimilarQuery("").SetSnippetEllipsisText("").SetSortFacetValuesBy("").SetSumOrFiltersScores(true).SetSynonyms(true).SetTagFilters(search.ArrayOfTagFiltersAsTagFilters(
						[]search.TagFilters{*search.StringAsTagFilters("")})).SetType(search.SearchTypeDefault("default")).SetTypoTolerance(search.TypoToleranceEnumAsTypoTolerance(search.TypoToleranceEnum("min"))).SetUserToken(""))})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/*/queries", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":1,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"length":1,"maxValuesPerFacet":0,"minProximity":1,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":1,"naturalLanguages":["fr"],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":["fr"],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}`)
	})
}

func TestSearch_SearchDictionaryEntries(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("get searchDictionaryEntries results with minimal parameters", func(t *testing.T) {
		_, err := client.SearchDictionaryEntries(client.NewApiSearchDictionaryEntriesRequest(
			search.DictionaryType("stopwords"),
			search.NewEmptySearchDictionaryEntriesParams().SetQuery("about")))
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/stopwords/search", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"about"}`)
	})
	t.Run("get searchDictionaryEntries results with all parameters", func(t *testing.T) {
		_, err := client.SearchDictionaryEntries(client.NewApiSearchDictionaryEntriesRequest(
			search.DictionaryType("compounds"),
			search.NewEmptySearchDictionaryEntriesParams().SetQuery("foo").SetPage(4).SetHitsPerPage(2).SetLanguage(search.SupportedLanguage("fr"))))
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/compounds/search", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"foo","page":4,"hitsPerPage":2,"language":"fr"}`)
	})
}

func TestSearch_SearchForFacetValues(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("get searchForFacetValues results with minimal parameters", func(t *testing.T) {
		_, err := client.SearchForFacetValues(client.NewApiSearchForFacetValuesRequest(
			"indexName", "facetName"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/facets/facetName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("get searchForFacetValues results with all parameters", func(t *testing.T) {
		_, err := client.SearchForFacetValues(client.NewApiSearchForFacetValuesRequest(
			"indexName", "facetName").WithSearchForFacetValuesRequest(
			search.NewEmptySearchForFacetValuesRequest().SetParams("query=foo&facetFilters=['bar']").SetFacetQuery("foo").SetMaxFacetHits(42)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/facets/facetName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"params":"query=foo&facetFilters=['bar']","facetQuery":"foo","maxFacetHits":42}`)
	})
	t.Run("facetName and facetQuery", func(t *testing.T) {
		_, err := client.SearchForFacetValues(client.NewApiSearchForFacetValuesRequest(
			"indexName", "author").WithSearchForFacetValuesRequest(
			search.NewEmptySearchForFacetValuesRequest().SetFacetQuery("stephen king")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/facets/author/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facetQuery":"stephen king"}`)
	})
}

func TestSearch_SearchRules(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("searchRules", func(t *testing.T) {
		_, err := client.SearchRules(client.NewApiSearchRulesRequest(
			"cts_e2e_browse").WithSearchRulesParams(
			search.NewEmptySearchRulesParams().SetQuery("zorro")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/cts_e2e_browse/rules/search", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"zorro"}`)
	})
}

func TestSearch_SearchSingleIndex(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("search with minimal parameters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("search with special characters in indexName", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"cts_e2e_space in index"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/cts_e2e_space%20in%20index/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("search with searchParams", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("myQuery").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.StringAsFacetFilters("tags:algolia")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"myQuery","facetFilters":["tags:algolia"]}`)
	})
	t.Run("single search retrieve snippets", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"cts_e2e_browse").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("batman mask of the phantasm").SetAttributesToRetrieve(
				[]string{"*"}).SetAttributesToSnippet(
				[]string{"*:20"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/cts_e2e_browse/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"batman mask of the phantasm","attributesToRetrieve":["*"],"attributesToSnippet":["*:20"]}`)
	})
	t.Run("query", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("phone"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"phone"}`)
	})
	t.Run("filters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("country:US AND price.gross < 2.0"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"country:US AND price.gross < 2.0"}`)
	})
	t.Run("distinct", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetDistinct(search.BoolAsDistinct(true)))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"distinct":true}`)
	})
	t.Run("filtersNumeric", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("price < 10"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"price < 10"}`)
	})
	t.Run("filtersTimestamp", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("NOT date_timestamp:1514764800 TO 1546300799"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"NOT date_timestamp:1514764800 TO 1546300799"}`)
	})
	t.Run("filtersSumOrFiltersScoresFalse", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)").SetSumOrFiltersScores(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":false}`)
	})
	t.Run("filtersSumOrFiltersScoresTrue", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)").SetSumOrFiltersScores(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":true}`)
	})
	t.Run("filtersStephenKing", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("author:\"Stephen King\""))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"author:\"Stephen King\""}`)
	})
	t.Run("filtersNotTags", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("NOT _tags:non-fiction"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"NOT _tags:non-fiction"}`)
	})
	t.Run("facetFiltersList", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.StringAsFacetFilters("publisher:Penguin"), *search.ArrayOfFacetFiltersAsFacetFilters(
					[]search.FacetFilters{*search.StringAsFacetFilters("author:Stephen King"), *search.StringAsFacetFilters("genre:Horror")})})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facetFilters":["publisher:Penguin",["author:Stephen King","genre:Horror"]]}`)
	})
	t.Run("facetFiltersBook", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.StringAsFacetFilters("category:Book")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","facetFilters":["category:Book"]}`)
	})
	t.Run("facetFiltersAND", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.StringAsFacetFilters("category:Book"), *search.StringAsFacetFilters("author:John Doe")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","facetFilters":["category:Book","author:John Doe"]}`)
	})
	t.Run("facetFiltersOR", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.ArrayOfFacetFiltersAsFacetFilters(
					[]search.FacetFilters{*search.StringAsFacetFilters("category:Book"), *search.StringAsFacetFilters("author:John Doe")})})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","facetFilters":[["category:Book","author:John Doe"]]}`)
	})
	t.Run("facetFiltersCombined", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.StringAsFacetFilters("author:John Doe"), *search.ArrayOfFacetFiltersAsFacetFilters(
					[]search.FacetFilters{*search.StringAsFacetFilters("category:Book"), *search.StringAsFacetFilters("category:Movie")})})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","facetFilters":["author:John Doe",["category:Book","category:Movie"]]}`)
	})
	t.Run("facetFiltersNeg", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFacetFilters(search.StringAsFacetFilters("category:-Ebook")))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facetFilters":"category:-Ebook"}`)
	})
	t.Run("filtersAndFacetFilters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("(author:\"Stephen King\" OR genre:\"Horror\")").SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.StringAsFacetFilters("publisher:Penguin")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"(author:\"Stephen King\" OR genre:\"Horror\")","facetFilters":["publisher:Penguin"]}`)
	})
	t.Run("facet author genre", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFacets(
				[]string{"author", "genre"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facets":["author","genre"]}`)
	})
	t.Run("facet wildcard", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFacets(
				[]string{"*"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facets":["*"]}`)
	})
	t.Run("maxValuesPerFacet", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetMaxValuesPerFacet(1000))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"maxValuesPerFacet":1000}`)
	})
	t.Run("aroundLatLng", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetAroundLatLng("40.71, -74.01"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"aroundLatLng":"40.71, -74.01"}`)
	})
	t.Run("aroundLatLngViaIP", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetAroundLatLngViaIP(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"aroundLatLngViaIP":true}`)
	})
	t.Run("aroundRadius", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetAroundLatLng("40.71, -74.01").SetAroundRadius(search.Int32AsAroundRadius(1000000)))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"aroundLatLng":"40.71, -74.01","aroundRadius":1000000}`)
	})
	t.Run("insideBoundingBox", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetInsideBoundingBox(search.ArrayOfArrayOfFloat64AsInsideBoundingBox(
				[][]float64{
					[]float64{49.067996905313834, 65.73828125, 25.905859247243498, 128.8046875}})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"insideBoundingBox":[[49.067996905313834,65.73828125,25.905859247243498,128.8046875]]}`)
	})
	t.Run("insidePolygon", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetInsidePolygon(
				[][]float64{
					[]float64{42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005, 31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545, -117.54828125}}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}`)
	})
	t.Run("insidePolygon", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetInsidePolygon(
				[][]float64{
					[]float64{42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005, 31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545, -117.54828125}}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}`)
	})
	t.Run("optionalFilters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetOptionalFilters(search.ArrayOfOptionalFiltersAsOptionalFilters(
				[]search.OptionalFilters{*search.StringAsOptionalFilters("can_deliver_quickly:true")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"optionalFilters":["can_deliver_quickly:true"]}`)
	})
	t.Run("optionalFiltersMany", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetOptionalFilters(search.ArrayOfOptionalFiltersAsOptionalFilters(
				[]search.OptionalFilters{*search.StringAsOptionalFilters("brand:Apple<score=3>"), *search.StringAsOptionalFilters("brand:Samsung<score=2>"), *search.StringAsOptionalFilters("brand:-Huawei")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"optionalFilters":["brand:Apple<score=3>","brand:Samsung<score=2>","brand:-Huawei"]}`)
	})
	t.Run("optionalFiltersSimple", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetOptionalFilters(search.ArrayOfOptionalFiltersAsOptionalFilters(
				[]search.OptionalFilters{*search.StringAsOptionalFilters("brand:Apple<score=2>"), *search.StringAsOptionalFilters("type:tablet")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"optionalFilters":["brand:Apple<score=2>","type:tablet"]}`)
	})
	t.Run("restrictSearchableAttributes", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetRestrictSearchableAttributes(
				[]string{"title_fr"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"restrictSearchableAttributes":["title_fr"]}`)
	})
	t.Run("getRankingInfo", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetGetRankingInfo(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"getRankingInfo":true}`)
	})
	t.Run("clickAnalytics", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetClickAnalytics(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"clickAnalytics":true}`)
	})
	t.Run("clickAnalyticsUserToken", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetClickAnalytics(true).SetUserToken("user-1"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"clickAnalytics":true,"userToken":"user-1"}`)
	})
	t.Run("enablePersonalization", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetEnablePersonalization(true).SetUserToken("user-1"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"enablePersonalization":true,"userToken":"user-1"}`)
	})
	t.Run("userToken", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetUserToken("user-1"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"userToken":"user-1"}`)
	})
	t.Run("userToken1234", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetUserToken("user-1234"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","userToken":"user-1234"}`)
	})
	t.Run("analyticsTag", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetAnalyticsTags(
				[]string{"YOUR_ANALYTICS_TAG"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"analyticsTags":["YOUR_ANALYTICS_TAG"]}`)
	})
	t.Run("facetFiltersUsers", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFacetFilters(search.ArrayOfFacetFiltersAsFacetFilters(
				[]search.FacetFilters{*search.StringAsFacetFilters("user:user42"), *search.StringAsFacetFilters("user:public")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"facetFilters":["user:user42","user:public"]}`)
	})
	t.Run("buildTheQuery", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetFilters("categoryPageId: Men's Clothing").SetHitsPerPage(50).SetAnalyticsTags(
				[]string{"mens-clothing"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"filters":"categoryPageId: Men's Clothing","hitsPerPage":50,"analyticsTags":["mens-clothing"]}`)
	})
	t.Run("attributesToHighlightOverride", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAttributesToHighlight(
				[]string{"title", "content"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","attributesToHighlight":["title","content"]}`)
	})
	t.Run("disableTypoToleranceOnAttributes", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetDisableTypoToleranceOnAttributes(
				[]string{"serial_number"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","disableTypoToleranceOnAttributes":["serial_number"]}`)
	})
	t.Run("search_a_query", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("shirt"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"shirt"}`)
	})
	t.Run("search_everything", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery(""))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":""}`)
	})
	t.Run("api_filtering_range_example", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("books").SetFilters("price:10 TO 20"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"books","filters":"price:10 TO 20"}`)
	})
	t.Run("search_a_query", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("").SetSimilarQuery("Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen").SetFilters("year:1991 TO 2001"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"","similarQuery":"Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen","filters":"year:1991 TO 2001"}`)
	})
	t.Run("override_retrievable_attributes", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAttributesToRetrieve(
				[]string{"title", "content"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","attributesToRetrieve":["title","content"]}`)
	})
	t.Run("restrict_searchable_attributes", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetRestrictSearchableAttributes(
				[]string{"title", "author"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","restrictSearchableAttributes":["title","author"]}`)
	})
	t.Run("override_default_relevancy", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetRelevancyStrictness(70))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","relevancyStrictness":70}`)
	})
	t.Run("apply_filters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFilters("(category:Book OR category:Ebook) AND _tags:published"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","filters":"(category:Book OR category:Ebook) AND _tags:published"}`)
	})
	t.Run("apply_all_filters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFilters("available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:\"John Doe\""))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","filters":"available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:\"John Doe\""}`)
	})
	t.Run("escape_spaces", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFilters("category:\"Books and Comics\""))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","filters":"category:\"Books and Comics\""}`)
	})
	t.Run("escape_keywords", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFilters("keyword:\"OR\""))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","filters":"keyword:\"OR\""}`)
	})
	t.Run("escape_single_quotes", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFilters("content:\"It's a wonderful day\""))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","filters":"content:\"It's a wonderful day\""}`)
	})
	t.Run("escape_double_quotes", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFilters("content:\"She said \"Hello World\""))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","filters":"content:\"She said \"Hello World\""}`)
	})
	t.Run("apply_filters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetOptionalFilters(search.ArrayOfOptionalFiltersAsOptionalFilters(
				[]search.OptionalFilters{*search.StringAsOptionalFilters("category:Book"), *search.StringAsOptionalFilters("author:John Doe")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","optionalFilters":["category:Book","author:John Doe"]}`)
	})
	t.Run("apply_negative_filters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetOptionalFilters(search.ArrayOfOptionalFiltersAsOptionalFilters(
				[]search.OptionalFilters{*search.StringAsOptionalFilters("category:Book"), *search.StringAsOptionalFilters("author:-John Doe")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","optionalFilters":["category:Book","author:-John Doe"]}`)
	})
	t.Run("apply_numeric_filters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetNumericFilters(search.ArrayOfNumericFiltersAsNumericFilters(
				[]search.NumericFilters{*search.StringAsNumericFilters("price < 1000"), *search.ArrayOfNumericFiltersAsNumericFilters(
					[]search.NumericFilters{*search.StringAsNumericFilters("inStock = 1"), *search.StringAsNumericFilters("deliveryDate < 1441755506")})})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","numericFilters":["price < 1000",["inStock = 1","deliveryDate < 1441755506"]]}`)
	})
	t.Run("apply_tag_filters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetTagFilters(search.ArrayOfTagFiltersAsTagFilters(
				[]search.TagFilters{*search.StringAsTagFilters("SciFi"), *search.ArrayOfTagFiltersAsTagFilters(
					[]search.TagFilters{*search.StringAsTagFilters("Book"), *search.StringAsTagFilters("Movie")})})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","tagFilters":["SciFi",["Book","Movie"]]}`)
	})
	t.Run("apply_filters", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetSumOrFiltersScores(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","sumOrFiltersScores":true}`)
	})
	t.Run("facets_all", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFacets(
				[]string{"*"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","facets":["*"]}`)
	})
	t.Run("retrieve_only_some_facets", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFacets(
				[]string{"category", "author"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","facets":["category","author"]}`)
	})
	t.Run("override_default_max_values_per_facet", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetMaxValuesPerFacet(20))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","maxValuesPerFacet":20}`)
	})
	t.Run("enable_faceting_after_distinct", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetFacetingAfterDistinct(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","facetingAfterDistinct":true}`)
	})
	t.Run("sort_facet_values_alphabetically", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetSortFacetValuesBy("count"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","sortFacetValuesBy":"count"}`)
	})
	t.Run("override_attributes_to_snippet", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAttributesToSnippet(
				[]string{"title", "content:80"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","attributesToSnippet":["title","content:80"]}`)
	})
	t.Run("override_default_highlight_pre_tag", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetHighlightPreTag("<strong>"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","highlightPreTag":"<strong>"}`)
	})
	t.Run("override_default_highlight_post_tag", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetHighlightPostTag("</strong>"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","highlightPostTag":"</strong>"}`)
	})
	t.Run("override_default_snippet_ellipsis_text", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetSnippetEllipsisText(""))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","snippetEllipsisText":""}`)
	})
	t.Run("enable_restrict_highlight_and_snippet_arrays", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetRestrictHighlightAndSnippetArrays(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","restrictHighlightAndSnippetArrays":false}`)
	})
	t.Run("access_page", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetPage(0))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","page":0}`)
	})
	t.Run("override_default_hits_per_page", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetHitsPerPage(10))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","hitsPerPage":10}`)
	})
	t.Run("get_nth_hit", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetOffset(4))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","offset":4}`)
	})
	t.Run("get_n_results", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetLength(4))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","length":4}`)
	})
	t.Run("override_default_min_word_size_for_one_typo", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetMinWordSizefor1Typo(2))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","minWordSizefor1Typo":2}`)
	})
	t.Run("override_default_min_word_size_for_two_typos", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetMinWordSizefor2Typos(2))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","minWordSizefor2Typos":2}`)
	})
	t.Run("override_default_typo_tolerance_mode", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetTypoTolerance(search.BoolAsTypoTolerance(false)))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","typoTolerance":false}`)
	})
	t.Run("disable_typos_on_numeric_tokens_at_search_time", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAllowTyposOnNumericTokens(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","allowTyposOnNumericTokens":false}`)
	})
	t.Run("search_around_a_position", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAroundLatLng("40.71, -74.01"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","aroundLatLng":"40.71, -74.01"}`)
	})
	t.Run("search_around_server_ip", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAroundLatLngViaIP(true))), search.WithHeaderParam("x-forwarded-for", "94.228.178.246 // should be replaced with the actual IP you would like to search around"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","aroundLatLngViaIP":true}`)
		headers := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"x-forwarded-for":"94.228.178.246 // should be replaced with the actual IP you would like to search around"}`), &headers))
		for k, v := range headers {
			require.Equal(t, v, echo.Header.Get(k))
		}
	})
	t.Run("set_around_radius", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAroundRadius(search.Int32AsAroundRadius(1000)))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","aroundRadius":1000}`)
	})
	t.Run("disable_automatic_radius", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAroundRadius(search.AroundRadiusAllAsAroundRadius(search.AroundRadiusAll("all"))))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","aroundRadius":"all"}`)
	})
	t.Run("set_geo_search_precision", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAroundPrecision(search.Int32AsAroundPrecision(100)))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","aroundPrecision":100}`)
	})
	t.Run("set_geo_search_precision_non_linear", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAroundPrecision(search.ArrayOfModelRangeAsAroundPrecision(
				[]search.ModelRange{*search.NewEmptyModelRange().SetFrom(0).SetValue(25), *search.NewEmptyModelRange().SetFrom(2000).SetValue(1000)})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","aroundPrecision":[{"from":0,"value":25},{"from":2000,"value":1000}]}`)
	})
	t.Run("set_minimum_geo_search_radius", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetMinimumAroundRadius(1000))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","minimumAroundRadius":1000}`)
	})
	t.Run("search_inside_rectangular_area", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetInsideBoundingBox(search.ArrayOfArrayOfFloat64AsInsideBoundingBox(
				[][]float64{
					[]float64{46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625}})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","insideBoundingBox":[[46.650828100116044,7.123046875,45.17210966999772,1.009765625]]}`)
	})
	t.Run("search_inside_multiple_rectangular_areas", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetInsideBoundingBox(search.ArrayOfArrayOfFloat64AsInsideBoundingBox(
				[][]float64{
					[]float64{46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625},
					[]float64{49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875}})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","insideBoundingBox":[[46.650828100116044,7.123046875,45.17210966999772,1.009765625],[49.62625916704081,4.6181640625,47.715070300900194,0.482421875]]}`)
	})
	t.Run("search_inside_polygon_area", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetInsidePolygon(
				[][]float64{
					[]float64{46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625, 49.62625916704081, 4.6181640625}}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","insidePolygon":[[46.650828100116044,7.123046875,45.17210966999772,1.009765625,49.62625916704081,4.6181640625]]}`)
	})
	t.Run("search_inside_multiple_polygon_areas", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetInsidePolygon(
				[][]float64{
					[]float64{46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625, 49.62625916704081, 4.6181640625},
					[]float64{49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875, 45.17210966999772, 1.009765625, 50.62626704081, 4.6181640625}}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","insidePolygon":[[46.650828100116044,7.123046875,45.17210966999772,1.009765625,49.62625916704081,4.6181640625],[49.62625916704081,4.6181640625,47.715070300900194,0.482421875,45.17210966999772,1.009765625,50.62626704081,4.6181640625]]}`)
	})
	t.Run("set_querylanguages_override", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetIgnorePlurals(search.ArrayOfSupportedLanguageAsIgnorePlurals(
				[]search.SupportedLanguage{search.SupportedLanguage("ca"), search.SupportedLanguage("es")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","ignorePlurals":["ca","es"]}`)
	})
	t.Run("set_querylanguages_override", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetRemoveStopWords(search.ArrayOfSupportedLanguageAsRemoveStopWords(
				[]search.SupportedLanguage{search.SupportedLanguage("ca"), search.SupportedLanguage("es")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","removeStopWords":["ca","es"]}`)
	})
	t.Run("set_querylanguages_override", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetRemoveStopWords(search.ArrayOfSupportedLanguageAsRemoveStopWords(
				[]search.SupportedLanguage{search.SupportedLanguage("ca"), search.SupportedLanguage("es")})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","removeStopWords":["ca","es"]}`)
	})
	t.Run("set_querylanguages_with_japanese_query", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetQueryLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("ja"), search.SupportedLanguage("en")}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","queryLanguages":["ja","en"]}`)
	})
	t.Run("set_natural_languages", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("").SetNaturalLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("fr")}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"","naturalLanguages":["fr"]}`)
	})
	t.Run("override_natural_languages_with_query", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("").SetNaturalLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("fr")}).SetRemoveWordsIfNoResults(search.RemoveWordsIfNoResults("firstWords")))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"","naturalLanguages":["fr"],"removeWordsIfNoResults":"firstWords"}`)
	})
	t.Run("enable_decompound_query_search_time", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetDecompoundQuery(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","decompoundQuery":true}`)
	})
	t.Run("enable_rules_search_time", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetEnableRules(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","enableRules":true}`)
	})
	t.Run("set_rule_contexts", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetRuleContexts(
				[]string{"front_end", "website2"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","ruleContexts":["front_end","website2"]}`)
	})
	t.Run("enable_personalization", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetEnablePersonalization(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","enablePersonalization":true}`)
	})
	t.Run("enable_personalization_with_user_token", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetEnablePersonalization(true).SetUserToken("123456"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","enablePersonalization":true,"userToken":"123456"}`)
	})
	t.Run("personalization_impact", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetPersonalizationImpact(20))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","personalizationImpact":20}`)
	})
	t.Run("set_user_token", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetUserToken("123456"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","userToken":"123456"}`)
	})
	t.Run("set_user_token_with_personalization", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetEnablePersonalization(true).SetUserToken("123456"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","enablePersonalization":true,"userToken":"123456"}`)
	})
	t.Run("override_default_query_type", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetQueryType(search.QueryType("prefixAll")))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","queryType":"prefixAll"}`)
	})
	t.Run("override_default_remove_words_if_no_results", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetRemoveWordsIfNoResults(search.RemoveWordsIfNoResults("lastWords")))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","removeWordsIfNoResults":"lastWords"}`)
	})
	t.Run("enable_advanced_syntax_search_time", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAdvancedSyntax(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","advancedSyntax":true}`)
	})
	t.Run("overide_default_optional_words", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetOptionalWords(search.ArrayOfStringAsOptionalWords(
				[]string{"toyota", "2020 2021"})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","optionalWords":["toyota","2020 2021"]}`)
	})
	t.Run("disabling_exact_for_some_attributes_search_time", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetDisableExactOnAttributes(
				[]string{"description"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","disableExactOnAttributes":["description"]}`)
	})
	t.Run("override_default_exact_single_word_query", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetExactOnSingleWordQuery(search.ExactOnSingleWordQuery("none")))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","exactOnSingleWordQuery":"none"}`)
	})
	t.Run("override_default_aternative_as_exact", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAlternativesAsExact(
				[]search.AlternativesAsExact{search.AlternativesAsExact("multiWordsSynonym")}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","alternativesAsExact":["multiWordsSynonym"]}`)
	})
	t.Run("enable_advanced_syntax_exact_phrase", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAdvancedSyntax(true).SetAdvancedSyntaxFeatures(
				[]search.AdvancedSyntaxFeatures{search.AdvancedSyntaxFeatures("exactPhrase")}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"]}`)
	})
	t.Run("enable_advanced_syntax_exclude_words", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAdvancedSyntax(true).SetAdvancedSyntaxFeatures(
				[]search.AdvancedSyntaxFeatures{search.AdvancedSyntaxFeatures("excludeWords")}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","advancedSyntax":true,"advancedSyntaxFeatures":["excludeWords"]}`)
	})
	t.Run("override_distinct", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetDistinct(search.Int32AsDistinct(0)))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","distinct":0}`)
	})
	t.Run("get_ranking_info", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetGetRankingInfo(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","getRankingInfo":true}`)
	})
	t.Run("disable_click_analytics", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetClickAnalytics(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","clickAnalytics":false}`)
	})
	t.Run("enable_click_analytics", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetClickAnalytics(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","clickAnalytics":true}`)
	})
	t.Run("disable_analytics", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAnalytics(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","analytics":false}`)
	})
	t.Run("add_analytics_tags", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetAnalyticsTags(
				[]string{"front_end", "website2"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","analyticsTags":["front_end","website2"]}`)
	})
	t.Run("disable_synonyms", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetSynonyms(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","synonyms":false}`)
	})
	t.Run("override_replace_synonyms_in_highlights", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetReplaceSynonymsInHighlight(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","replaceSynonymsInHighlight":true}`)
	})
	t.Run("override_min_proximity", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetMinProximity(2))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","minProximity":2}`)
	})
	t.Run("override_default_field", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetResponseFields(
				[]string{"hits", "facets"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","responseFields":["hits","facets"]}`)
	})
	t.Run("override_percentile_computation", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetPercentileComputation(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","percentileComputation":false}`)
	})
	t.Run("set_ab_test", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetEnableABTest(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","enableABTest":false}`)
	})
	t.Run("set_enable_re_ranking", func(t *testing.T) {
		_, err := client.SearchSingleIndex(client.NewApiSearchSingleIndexRequest(
			"indexName").WithSearchParams(search.SearchParamsObjectAsSearchParams(
			search.NewEmptySearchParamsObject().SetQuery("query").SetEnableReRanking(false))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/query", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"query","enableReRanking":false}`)
	})
}

func TestSearch_SearchSynonyms(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("searchSynonyms with minimal parameters", func(t *testing.T) {
		_, err := client.SearchSynonyms(client.NewApiSearchSynonymsRequest(
			"indexName"))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/synonyms/search", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{}`)
	})
	t.Run("searchSynonyms with all parameters", func(t *testing.T) {
		_, err := client.SearchSynonyms(client.NewApiSearchSynonymsRequest(
			"indexName").WithSearchSynonymsParams(
			search.NewEmptySearchSynonymsParams().SetQuery("myQuery").SetType(search.SynonymType("altcorrection1")).SetPage(10).SetHitsPerPage(10)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/indexName/synonyms/search", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"myQuery","type":"altcorrection1","page":10,"hitsPerPage":10}`)
	})
}

func TestSearch_SearchUserIds(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("searchUserIds", func(t *testing.T) {
		_, err := client.SearchUserIds(client.NewApiSearchUserIdsRequest(

			search.NewEmptySearchUserIdsParams().SetQuery("test").SetClusterName("theClusterName").SetPage(5).SetHitsPerPage(10)))
		require.NoError(t, err)

		require.Equal(t, "/1/clusters/mapping/search", echo.Path)
		require.Equal(t, "POST", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"query":"test","clusterName":"theClusterName","page":5,"hitsPerPage":10}`)
	})
}

func TestSearch_SetDictionarySettings(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("get setDictionarySettings results with minimal parameters", func(t *testing.T) {
		_, err := client.SetDictionarySettings(client.NewApiSetDictionarySettingsRequest(

			search.NewEmptyDictionarySettingsParams().SetDisableStandardEntries(
				search.NewEmptyStandardEntries().SetPlurals(map[string]bool{"fr": false, "en": false, "ru": true}))))
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/*/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true}}}`)
	})
	t.Run("get setDictionarySettings results with all parameters", func(t *testing.T) {
		_, err := client.SetDictionarySettings(client.NewApiSetDictionarySettingsRequest(

			search.NewEmptyDictionarySettingsParams().SetDisableStandardEntries(
				search.NewEmptyStandardEntries().SetPlurals(map[string]bool{"fr": false, "en": false, "ru": true}).SetStopwords(map[string]bool{"fr": false}).SetCompounds(map[string]bool{"ru": true}))))
		require.NoError(t, err)

		require.Equal(t, "/1/dictionaries/*/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}`)
	})
}

func TestSearch_SetSettings(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("minimal parameters", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"cts_e2e_settings",
			search.NewEmptyIndexSettings().SetPaginationLimitedTo(10)).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/cts_e2e_settings/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"paginationLimitedTo":10}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("boolean typoTolerance", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetTypoTolerance(search.BoolAsTypoTolerance(true))).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"typoTolerance":true}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("enum typoTolerance", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetTypoTolerance(search.TypoToleranceEnumAsTypoTolerance(search.TypoToleranceEnum("min")))).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"typoTolerance":"min"}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("ignorePlurals", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetIgnorePlurals(search.BoolAsIgnorePlurals(true))).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"ignorePlurals":true}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("list of string ignorePlurals", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetIgnorePlurals(search.ArrayOfSupportedLanguageAsIgnorePlurals(
				[]search.SupportedLanguage{search.SupportedLanguage("fr")}))).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"ignorePlurals":["fr"]}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("removeStopWords boolean", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRemoveStopWords(search.BoolAsRemoveStopWords(true))).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"removeStopWords":true}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("removeStopWords list of string", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRemoveStopWords(search.ArrayOfSupportedLanguageAsRemoveStopWords(
				[]search.SupportedLanguage{search.SupportedLanguage("fr")}))).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"removeStopWords":["fr"]}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("boolean distinct", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDistinct(search.BoolAsDistinct(true))).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"distinct":true}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("integer distinct", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDistinct(search.Int32AsDistinct(1))).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"distinct":1}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("distinct company", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributeForDistinct("company").SetDistinct(search.BoolAsDistinct(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeForDistinct":"company","distinct":true}`)
	})
	t.Run("distinct design", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributeForDistinct("design").SetDistinct(search.BoolAsDistinct(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeForDistinct":"design","distinct":true}`)
	})
	t.Run("distinct true", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDistinct(search.BoolAsDistinct(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"distinct":true}`)
	})
	t.Run("distinct section", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributeForDistinct("section").SetDistinct(search.BoolAsDistinct(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeForDistinct":"section","distinct":true}`)
	})
	t.Run("attributesForFaceting allergens", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"allergens"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["allergens"]}`)
	})
	t.Run("api_attributes_for_faceting", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"genre", "author"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["genre","author"]}`)
	})
	t.Run("api_attributes_for_faceting_searchable", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"genre", "searchable(author)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["genre","searchable(author)"]}`)
	})
	t.Run("api_attributes_for_filter_only", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"filterOnly(genre)", "author"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["filterOnly(genre)","author"]}`)
	})
	t.Run("attributesForFaceting categoryPageId", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"searchable(categoryPageId)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["searchable(categoryPageId)"]}`)
	})
	t.Run("unretrievableAttributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetUnretrievableAttributes(
				[]string{"visible_by"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"unretrievableAttributes":["visible_by"]}`)
	})
	t.Run("attributesForFaceting user restricted data", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"filterOnly(visible_by)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["filterOnly(visible_by)"]}`)
	})
	t.Run("attributesForFaceting optional filters", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"can_deliver_quickly", "restaurant"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["can_deliver_quickly","restaurant"]}`)
	})
	t.Run("attributesForFaceting redirect index", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"query_terms"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["query_terms"]}`)
	})
	t.Run("attributesForFaceting multiple consequences", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"director"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["director"]}`)
	})
	t.Run("attributesForFaceting in-depth optional filters", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"filterOnly(brand)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["filterOnly(brand)"]}`)
	})
	t.Run("mode neuralSearch", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMode(search.Mode("neuralSearch"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"mode":"neuralSearch"}`)
	})
	t.Run("mode keywordSearch", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMode(search.Mode("keywordSearch"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"mode":"keywordSearch"}`)
	})
	t.Run("searchableAttributes same priority", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"title,comments", "ingredients"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["title,comments","ingredients"]}`)
	})
	t.Run("searchableAttributes higher priority", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"title", "ingredients"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["title","ingredients"]}`)
	})
	t.Run("customRanking retweets", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"desc(retweets)", "desc(likes)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["desc(retweets)","desc(likes)"]}`)
	})
	t.Run("customRanking boosted", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"desc(boosted)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["desc(boosted)"]}`)
	})
	t.Run("customRanking pageviews", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"desc(pageviews)", "desc(comments)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["desc(pageviews)","desc(comments)"]}`)
	})
	t.Run("customRanking applying search parameters for a specific query", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"desc(nb_airline_liaisons)"}).SetAttributesForFaceting(
				[]string{"city, country"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["desc(nb_airline_liaisons)"],"attributesForFaceting":["city, country"]}`)
	})
	t.Run("customRanking rounded pageviews", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"desc(rounded_pageviews)", "desc(comments)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["desc(rounded_pageviews)","desc(comments)"]}`)
	})
	t.Run("customRanking price", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"desc(price)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["desc(price)"]}`)
	})
	t.Run("ranking exhaustive", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRanking(
				[]string{"desc(price)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"ranking":["desc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}`)
	})
	t.Run("ranking standard replica", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRanking(
				[]string{"desc(post_date_timestamp)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"ranking":["desc(post_date_timestamp)"]}`)
	})
	t.Run("ranking virtual replica", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"desc(post_date_timestamp)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["desc(post_date_timestamp)"]}`)
	})
	t.Run("customRanking and ranking sort alphabetically", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"asc(textual_attribute)"}).SetRanking(
				[]string{"custom", "typo", "geo", "words", "filters", "proximity", "attribute", "exact"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["asc(textual_attribute)"],"ranking":["custom","typo","geo","words","filters","proximity","attribute","exact"]}`)
	})
	t.Run("relevancyStrictness", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"asc(textual_attribute)"}).SetRelevancyStrictness(0)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["asc(textual_attribute)"],"relevancyStrictness":0}`)
	})
	t.Run("create replica index", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetReplicas(
				[]string{"products_price_desc"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"replicas":["products_price_desc"]}`)
	})
	t.Run("create replica index articles", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetReplicas(
				[]string{"articles_date_desc"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"replicas":["articles_date_desc"]}`)
	})
	t.Run("create virtual replica index", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetReplicas(
				[]string{"virtual(products_price_desc)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"replicas":["virtual(products_price_desc)"]}`)
	})
	t.Run("unlink replica index", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetReplicas(
				[]string{""})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"replicas":[""]}`)
	})
	t.Run("forwardToReplicas", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"name", "description"})).WithForwardToReplicas(true))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["name","description"]}`)
		queryParams := map[string]string{}
		require.NoError(t, json.Unmarshal([]byte(`{"forwardToReplicas":"true"}`), &queryParams))
		require.Len(t, queryParams, len(echo.Query))
		for k, v := range queryParams {
			require.Equal(t, v, echo.Query.Get(k))
		}
	})
	t.Run("maxValuesPerFacet", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMaxValuesPerFacet(1000)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"maxValuesPerFacet":1000}`)
	})
	t.Run("maxFacetHits", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMaxFacetHits(1000)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"maxFacetHits":1000}`)
	})
	t.Run("attributesForFaceting complex", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"<YOUR_INDEX_NAME>",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"actor", "filterOnly(category)", "searchable(publisher)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["actor","filterOnly(category)","searchable(publisher)"]}`)
	})
	t.Run("ranking closest dates", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRanking(
				[]string{"asc(date_timestamp)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"ranking":["asc(date_timestamp)","typo","geo","words","filters","proximity","attribute","exact","custom"]}`)
	})
	t.Run("searchableAttributes item variation", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"design", "type", "color"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["design","type","color"]}`)
	})
	t.Run("searchableAttributes around location", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"name", "country", "code", "iata_code"}).SetCustomRanking(
				[]string{"desc(links_count)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["name","country","code","iata_code"],"customRanking":["desc(links_count)"]}`)
	})
	t.Run("attributesToHighlight", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributesToHighlight(
				[]string{"author", "title", "content"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesToHighlight":["author","title","content"]}`)
	})
	t.Run("attributesToHighlightStar", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributesToHighlight(
				[]string{"*"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesToHighlight":["*"]}`)
	})
	t.Run("everything", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAdvancedSyntax(true).SetAdvancedSyntaxFeatures(
				[]search.AdvancedSyntaxFeatures{search.AdvancedSyntaxFeatures("exactPhrase")}).SetAllowCompressionOfIntegerArray(true).SetAllowTyposOnNumericTokens(true).SetAlternativesAsExact(
				[]search.AlternativesAsExact{search.AlternativesAsExact("singleWordSynonym")}).SetAttributeCriteriaComputedByMinProximity(true).SetAttributeForDistinct("test").SetAttributesForFaceting(
				[]string{"algolia"}).SetAttributesToHighlight(
				[]string{"algolia"}).SetAttributesToRetrieve(
				[]string{"algolia"}).SetAttributesToSnippet(
				[]string{"algolia"}).SetAttributesToTransliterate(
				[]string{"algolia"}).SetCamelCaseAttributes(
				[]string{"algolia"}).SetCustomNormalization(map[string]map[string]string{"algolia": map[string]string{"aloglia": "aglolia"}}).SetCustomRanking(
				[]string{"algolia"}).SetDecompoundQuery(false).SetDecompoundedAttributes(map[string]any{"algolia": "aloglia"}).SetDisableExactOnAttributes(
				[]string{"algolia"}).SetDisablePrefixOnAttributes(
				[]string{"algolia"}).SetDisableTypoToleranceOnAttributes(
				[]string{"algolia"}).SetDisableTypoToleranceOnWords(
				[]string{"algolia"}).SetDistinct(search.Int32AsDistinct(3)).SetEnablePersonalization(true).SetEnableReRanking(false).SetEnableRules(true).SetExactOnSingleWordQuery(search.ExactOnSingleWordQuery("attribute")).SetHighlightPreTag("<span>").SetHighlightPostTag("</span>").SetHitsPerPage(10).SetIgnorePlurals(search.BoolAsIgnorePlurals(false)).SetIndexLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("fr")}).SetKeepDiacriticsOnCharacters("abc").SetMaxFacetHits(20).SetMaxValuesPerFacet(30).SetMinProximity(6).SetMinWordSizefor1Typo(5).SetMinWordSizefor2Typos(11).SetMode(search.Mode("neuralSearch")).SetNumericAttributesForFiltering(
				[]string{"algolia"}).SetOptionalWords(search.ArrayOfStringAsOptionalWords(
				[]string{"myspace"})).SetPaginationLimitedTo(0).SetQueryLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("fr")}).SetQueryType(search.QueryType("prefixLast")).SetRanking(
				[]string{"geo"}).SetReRankingApplyFilter(search.StringAsReRankingApplyFilter("mySearch:filters")).SetRelevancyStrictness(10).SetRemoveStopWords(search.BoolAsRemoveStopWords(false)).SetRemoveWordsIfNoResults(search.RemoveWordsIfNoResults("lastWords")).SetRenderingContent(
				search.NewEmptyRenderingContent().SetFacetOrdering(
					search.NewEmptyFacetOrdering().SetFacets(
						search.NewEmptyFacets().SetOrder(
							[]string{"a", "b"})).SetValues(map[string]search.Value{"a": *search.NewEmptyValue().SetOrder(
						[]string{"b"}).SetSortRemainingBy(search.SortRemainingBy("count"))}))).SetReplaceSynonymsInHighlight(true).SetReplicas(
				[]string{""}).SetResponseFields(
				[]string{"algolia"}).SetRestrictHighlightAndSnippetArrays(true).SetSearchableAttributes(
				[]string{"foo"}).SetSemanticSearch(
				search.NewEmptySemanticSearch().SetEventSources(
					[]string{"foo"})).SetSeparatorsToIndex("bar").SetSnippetEllipsisText("---").SetSortFacetValuesBy("date").SetTypoTolerance(search.BoolAsTypoTolerance(false)).SetUnretrievableAttributes(
				[]string{"foo"}).SetUserData(map[string]any{"user": "data"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["fr"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["fr"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}`)
	})
	t.Run("searchableAttributesWithCustomRankingsAndAttributesForFaceting", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"brand", "name", "categories", "unordered(description)"}).SetCustomRanking(
				[]string{"desc(popularity)"}).SetAttributesForFaceting(
				[]string{"searchable(brand)", "type", "categories", "price"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["brand","name","categories","unordered(description)"],"customRanking":["desc(popularity)"],"attributesForFaceting":["searchable(brand)","type","categories","price"]}`)
	})
	t.Run("searchableAttributesOrdering", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"unordered(title)", "cast"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["unordered(title)","cast"]}`)
	})
	t.Run("searchableAttributesProductReferenceSuffixes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"name", "product_reference", "product_reference_suffixes"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["name","product_reference","product_reference_suffixes"]}`)
	})
	t.Run("queryLanguageAndIgnorePlurals", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetQueryLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("en")}).SetIgnorePlurals(search.BoolAsIgnorePlurals(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"queryLanguages":["en"],"ignorePlurals":true}`)
	})
	t.Run("searchableAttributesInMovies", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"movies",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"title_eng", "title_fr", "title_es"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/movies/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["title_eng","title_fr","title_es"]}`)
	})
	t.Run("disablePrefixOnAttributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDisablePrefixOnAttributes(
				[]string{"serial_number"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"disablePrefixOnAttributes":["serial_number"]}`)
	})
	t.Run("disableTypoToleranceOnAttributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDisableTypoToleranceOnAttributes(
				[]string{"serial_number"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"disableTypoToleranceOnAttributes":["serial_number"]}`)
	})
	t.Run("searchableAttributesSimpleExample", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"serial_number"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["serial_number"]}`)
	})
	t.Run("searchableAttributesSimpleExampleAlt", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"serial_number", "serial_number_suffixes"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["serial_number","serial_number_suffixes"]}`)
	})
	t.Run("set_searchable_attributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSearchableAttributes(
				[]string{"title,alternative_title", "author", "unordered(text)", "emails.personal"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"searchableAttributes":["title,alternative_title","author","unordered(text)","emails.personal"]}`)
	})
	t.Run("set_searchable_attributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributesForFaceting(
				[]string{"author", "filterOnly(isbn)", "searchable(edition)", "afterDistinct(category)", "afterDistinct(searchable(publisher))"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesForFaceting":["author","filterOnly(isbn)","searchable(edition)","afterDistinct(category)","afterDistinct(searchable(publisher))"]}`)
	})
	t.Run("unretrievable_attributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetUnretrievableAttributes(
				[]string{"total_number_of_sales"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"unretrievableAttributes":["total_number_of_sales"]}`)
	})
	t.Run("set_retrievable_attributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributesToRetrieve(
				[]string{"author", "title", "content"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesToRetrieve":["author","title","content"]}`)
	})
	t.Run("set_all_attributes_as_retrievable", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributesToRetrieve(
				[]string{"*"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesToRetrieve":["*"]}`)
	})
	t.Run("specify_attributes_not_to_retrieve", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributesToRetrieve(
				[]string{"*", "-SKU", "-internal_desc"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesToRetrieve":["*","-SKU","-internal_desc"]}`)
	})
	t.Run("neural_search", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMode(search.Mode("neuralSearch"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"mode":"neuralSearch"}`)
	})
	t.Run("keyword_search", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMode(search.Mode("keywordSearch"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"mode":"keywordSearch"}`)
	})
	t.Run("set_default_ranking", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRanking(
				[]string{"typo", "geo", "words", "filters", "attribute", "proximity", "exact", "custom"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"ranking":["typo","geo","words","filters","attribute","proximity","exact","custom"]}`)
	})
	t.Run("set_ranking_by_attribute_asc", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRanking(
				[]string{"asc(price)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"ranking":["asc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}`)
	})
	t.Run("set_ranking_by_attribute_desc", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRanking(
				[]string{"desc(price)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"ranking":["desc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}`)
	})
	t.Run("restrict_searchable_attributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomRanking(
				[]string{"desc(popularity)", "asc(price)"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customRanking":["desc(popularity)","asc(price)"]}`)
	})
	t.Run("set_default_relevancy", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRelevancyStrictness(90)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"relevancyStrictness":90}`)
	})
	t.Run("set_replicas", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetReplicas(
				[]string{"name_of_replica_index1", "name_of_replica_index2"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"replicas":["name_of_replica_index1","name_of_replica_index2"]}`)
	})
	t.Run("set_default_max_values_per_facet", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMaxValuesPerFacet(100)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"maxValuesPerFacet":100}`)
	})
	t.Run("set_default_sort_facet_values_by", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSortFacetValuesBy("alpha")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"sortFacetValuesBy":"alpha"}`)
	})
	t.Run("set_attributes_to_snippet", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributesToSnippet(
				[]string{"content:80", "description"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesToSnippet":["content:80","description"]}`)
	})
	t.Run("set_all_attributes_to_snippet", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributesToSnippet(
				[]string{"*:80"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributesToSnippet":["*:80"]}`)
	})
	t.Run("set_default_highlight_pre_tag", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetHighlightPreTag("<em>")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"highlightPreTag":"<em>"}`)
	})
	t.Run("set_default_highlight_post_tag", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetHighlightPostTag("</em>")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"highlightPostTag":"</em>"}`)
	})
	t.Run("set_default_snippet_ellipsis_text", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSnippetEllipsisText("…")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"snippetEllipsisText":"…"}`)
	})
	t.Run("enable_restrict_highlight_and_snippet_arrays_by_default", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRestrictHighlightAndSnippetArrays(true)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"restrictHighlightAndSnippetArrays":true}`)
	})
	t.Run("set_default_hits_per_page", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetHitsPerPage(20)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"hitsPerPage":20}`)
	})
	t.Run("set_pagination_limit", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetPaginationLimitedTo(1000)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"paginationLimitedTo":1000}`)
	})
	t.Run("set_default_min_word_size_for_one_typo", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMinWordSizefor1Typo(4)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"minWordSizefor1Typo":4}`)
	})
	t.Run("set_default_min_word_size_for_two_typos", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMinWordSizefor2Typos(4)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"minWordSizefor2Typos":4}`)
	})
	t.Run("set_default_typo_tolerance_mode", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetTypoTolerance(search.BoolAsTypoTolerance(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"typoTolerance":true}`)
	})
	t.Run("disable_typos_on_numeric_tokens_by_default", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAllowTyposOnNumericTokens(false)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"allowTyposOnNumericTokens":false}`)
	})
	t.Run("disable_typo_tolerance_for_words", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDisableTypoToleranceOnWords(
				[]string{"wheel", "1X2BCD"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"disableTypoToleranceOnWords":["wheel","1X2BCD"]}`)
	})
	t.Run("set_separators_to_index", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetSeparatorsToIndex("+#")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"separatorsToIndex":"+#"}`)
	})
	t.Run("set_languages_using_querylanguages", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetQueryLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("es")}).SetIgnorePlurals(search.BoolAsIgnorePlurals(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"queryLanguages":["es"],"ignorePlurals":true}`)
	})
	t.Run("set_attributes_to_transliterate", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetIndexLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("ja")}).SetAttributesToTransliterate(
				[]string{"name", "description"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"indexLanguages":["ja"],"attributesToTransliterate":["name","description"]}`)
	})
	t.Run("set_languages_using_querylanguages", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetQueryLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("es")}).SetRemoveStopWords(search.BoolAsRemoveStopWords(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"queryLanguages":["es"],"removeStopWords":true}`)
	})
	t.Run("set_camel_case_attributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCamelCaseAttributes(
				[]string{"description"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"camelCaseAttributes":["description"]}`)
	})
	t.Run("set_decompounded_attributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDecompoundedAttributes(map[string]any{"de": []string{"name"}})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"decompoundedAttributes":{"de":["name"]}}`)
	})
	t.Run("set_decompounded_multiple_attributes", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDecompoundedAttributes(map[string]any{"de": []string{"name_de", "description_de"}, "fi": []string{"name_fi", "description_fi"}})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"decompoundedAttributes":{"de":["name_de","description_de"],"fi":["name_fi","description_fi"]}}`)
	})
	t.Run("set_keep_diacritics_on_characters", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetKeepDiacriticsOnCharacters("øé")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"keepDiacriticsOnCharacters":"øé"}`)
	})
	t.Run("set_custom_normalization", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetCustomNormalization(map[string]map[string]string{"default": map[string]string{"ä": "ae"}})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"customNormalization":{"default":{"ä":"ae"}}}`)
	})
	t.Run("set_languages_using_querylanguages", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetQueryLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("es")}).SetRemoveStopWords(search.BoolAsRemoveStopWords(true)).SetIgnorePlurals(search.BoolAsIgnorePlurals(true))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"queryLanguages":["es"],"removeStopWords":true,"ignorePlurals":true}`)
	})
	t.Run("set_indexlanguages", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetIndexLanguages(
				[]search.SupportedLanguage{search.SupportedLanguage("ja")})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"indexLanguages":["ja"]}`)
	})
	t.Run("enable_decompound_query_by_default", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDecompoundQuery(true)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"decompoundQuery":true}`)
	})
	t.Run("enable_rules_syntax_by_default", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetEnableRules(true)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"enableRules":true}`)
	})
	t.Run("enable_personalization_settings", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetEnablePersonalization(true)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"enablePersonalization":true}`)
	})
	t.Run("set_default_query_type", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetQueryType(search.QueryType("prefixLast"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"queryType":"prefixLast"}`)
	})
	t.Run("set_default_remove_words_if_no_result", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRemoveWordsIfNoResults(search.RemoveWordsIfNoResults("none"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"removeWordsIfNoResults":"none"}`)
	})
	t.Run("enable_advanced_syntax_by_default", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAdvancedSyntax(true)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"advancedSyntax":true}`)
	})
	t.Run("set_default_optional_words", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetOptionalWords(search.ArrayOfStringAsOptionalWords(
				[]string{"blue", "iphone case"}))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"optionalWords":["blue","iphone case"]}`)
	})
	t.Run("disabling_prefix_search_for_some_attributes_by_default", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDisablePrefixOnAttributes(
				[]string{"sku"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"disablePrefixOnAttributes":["sku"]}`)
	})
	t.Run("disabling_exact_for_some_attributes_by_default", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDisableExactOnAttributes(
				[]string{"description"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"disableExactOnAttributes":["description"]}`)
	})
	t.Run("set_default_exact_single_word_query", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetExactOnSingleWordQuery(search.ExactOnSingleWordQuery("attribute"))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"exactOnSingleWordQuery":"attribute"}`)
	})
	t.Run("set_default_aternative_as_exact", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAlternativesAsExact(
				[]search.AlternativesAsExact{search.AlternativesAsExact("ignorePlurals"), search.AlternativesAsExact("singleWordSynonym")})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"alternativesAsExact":["ignorePlurals","singleWordSynonym"]}`)
	})
	t.Run("enable_advanced_syntax_by_default", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAdvancedSyntax(true)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"advancedSyntax":true}`)
	})
	t.Run("set_numeric_attributes_for_filtering", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetNumericAttributesForFiltering(
				[]string{"quantity", "popularity"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"numericAttributesForFiltering":["quantity","popularity"]}`)
	})
	t.Run("enable_compression_of_integer_array", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAllowCompressionOfIntegerArray(true)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"allowCompressionOfIntegerArray":true}`)
	})
	t.Run("set_attributes_for_distinct", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributeForDistinct("url")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeForDistinct":"url"}`)
	})
	t.Run("set_distinct", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetDistinct(search.Int32AsDistinct(1)).SetAttributeForDistinct("url")))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"distinct":1,"attributeForDistinct":"url"}`)
	})
	t.Run("set_replace_synonyms_in_highlights", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetReplaceSynonymsInHighlight(false)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"replaceSynonymsInHighlight":false}`)
	})
	t.Run("set_min_proximity", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMinProximity(1)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"minProximity":1}`)
	})
	t.Run("set_default_field", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetResponseFields(
				[]string{"hits", "hitsPerPage", "nbPages", "page"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"responseFields":["hits","hitsPerPage","nbPages","page"]}`)
	})
	t.Run("set_max_facet_hits", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetMaxFacetHits(10)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"maxFacetHits":10}`)
	})
	t.Run("set_attribute_criteria_computed_by_min_proximity", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetAttributeCriteriaComputedByMinProximity(true)))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"attributeCriteriaComputedByMinProximity":true}`)
	})
	t.Run("set_user_data", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetUserData(map[string]any{"extraData": "This is the custom data that you want to store in your index"})))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"userData":{"extraData":"This is the custom data that you want to store in your index"}}`)
	})
	t.Run("set_rendering_content", func(t *testing.T) {
		_, err := client.SetSettings(client.NewApiSetSettingsRequest(
			"theIndexName",
			search.NewEmptyIndexSettings().SetRenderingContent(
				search.NewEmptyRenderingContent().SetFacetOrdering(
					search.NewEmptyFacetOrdering().SetFacets(
						search.NewEmptyFacets().SetOrder(
							[]string{"size", "brand"})).SetValues(map[string]search.Value{"brand": *search.NewEmptyValue().SetOrder(
						[]string{"uniqlo"}).SetHide(
						[]string{"muji"}).SetSortRemainingBy(search.SortRemainingBy("count")), "size": *search.NewEmptyValue().SetOrder(
						[]string{"S", "M", "L"}).SetSortRemainingBy(search.SortRemainingBy("hidden"))})))))
		require.NoError(t, err)

		require.Equal(t, "/1/indexes/theIndexName/settings", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"renderingContent":{"facetOrdering":{"facets":{"order":["size","brand"]},"values":{"brand":{"order":["uniqlo"],"hide":["muji"],"sortRemainingBy":"count"},"size":{"order":["S","M","L"],"sortRemainingBy":"hidden"}}}}}`)
	})
}

func TestSearch_UpdateApiKey(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("updateApiKey", func(t *testing.T) {
		_, err := client.UpdateApiKey(client.NewApiUpdateApiKeyRequest(
			"ALGOLIA_API_KEY",
			search.NewEmptyApiKey().SetAcl(
				[]search.Acl{search.Acl("search"), search.Acl("addObject")}).SetValidity(300).SetMaxQueriesPerIPPerHour(100).SetMaxHitsPerQuery(20)))
		require.NoError(t, err)

		require.Equal(t, "/1/keys/ALGOLIA_API_KEY", echo.Path)
		require.Equal(t, "PUT", echo.Method)

		ja := jsonassert.New(t)
		ja.Assertf(*echo.Body, `{"acl":["search","addObject"],"validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}`)
	})
}

func TestSearch_GenerateSecuredApiKey(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("generates a key without restrictions", func(t *testing.T) {
		key, err := client.GenerateSecuredApiKey("foo", nil)
		require.NoError(t, err)

		require.Equal(t, "NjgzNzE2ZDlkN2Y4MmVlZDE3NGM2Y2FlYmUwODZlZTkzMzc2Yzc5ZDdjNjFkZDY3MGVhMDBmN2Y4ZDZlYjBhOA==", key)
	})

	t.Run("generates a key with restrictions", func(t *testing.T) {
		key, err := client.GenerateSecuredApiKey("foo", search.NewSecuredApiKeyRestrictions().SetValidUntil(100).SetRestrictIndices([]string{"bar"}).SetRestrictSources("192,168.1.0/24").SetUserToken("foobarbaz").SetSearchParams(search.NewSearchParamsObject().SetQuery("foo")))
		require.NoError(t, err)

		require.Equal(t, "NGMxODk0MjViNjM3ODcxNjc4NWU4Y2I5NGIxNDAzMTg4MjU5Mjc4YTEwMzU4Mjk2YjBiMmVjOWViYTIyOTBiY3F1ZXJ5PWZvbyZyZXN0cmljdEluZGljZXM9YmFyJnJlc3RyaWN0U291cmNlcz0xOTIlMkMxNjguMS4wJTJGMjQmdXNlclRva2VuPWZvb2JhcmJheiZ2YWxpZFVudGlsPTEwMA==", key)
	})
}

func TestSearch_GetSecuredApiKeyRemainingVaildity(t *testing.T) {
	client, echo := createSearchClient(t)
	_ = echo

	t.Run("is able to check the remaining validity of a key", func(t *testing.T) {
		key, err := client.GenerateSecuredApiKey("foo", search.NewSecuredApiKeyRestrictions().SetValidUntil(42))
		require.NoError(t, err)

		require.Equal(t, "NDI5ZjRkMTRiNTBlZmExZWIyN2I3NzczOGUwMzE0NjYwMDU1M2M3NjYyY2IxODZhMDAxMWEwOWJmZjE5MzY0NnZhbGlkVW50aWw9NDI=", key)

		validity, err := client.GetSecuredApiKeyRemainingValidity(key)
		require.NoError(t, err)

		require.Greater(t, validity, -time.Now().UnixNano())
	})
}
