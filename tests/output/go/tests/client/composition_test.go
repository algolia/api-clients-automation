package client

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"gotests/tests"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/call"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/compression"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/next/composition"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
)

func createCompositionClient(t *testing.T) (*composition.APIClient, *tests.EchoRequester) {
	t.Helper()

	echo := &tests.EchoRequester{}
	cfg := composition.CompositionConfiguration{
		Configuration: transport.Configuration{
			AppID:     "appID",
			ApiKey:    "apiKey",
			Requester: echo,
		},
	}
	client, err := composition.NewClientWithConfig(cfg)
	require.NoError(t, err)

	return client, echo
}

// calls api with correct read host.
func TestCompositionapi0(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	echo := &tests.EchoRequester{}

	var (
		client *composition.APIClient
		cfg    composition.CompositionConfiguration
	)

	_ = client
	_ = echo
	cfg = composition.CompositionConfiguration{
		Configuration: transport.Configuration{
			AppID:     "test-app-id",
			ApiKey:    "test-api-key",
			Requester: echo,
		},
	}
	client, err = composition.NewClientWithConfig(cfg)
	require.NoError(t, err)
	res, err = client.CustomGet(context.Background(), "test", nil)
	require.NoError(t, err)
	require.Equal(t, "test-app-id-dsn.algolia.net", echo.Host)
}

// calls api with correct write host.
func TestCompositionapi1(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	echo := &tests.EchoRequester{}

	var (
		client *composition.APIClient
		cfg    composition.CompositionConfiguration
	)

	_ = client
	_ = echo
	cfg = composition.CompositionConfiguration{
		Configuration: transport.Configuration{
			AppID:     "test-app-id",
			ApiKey:    "test-api-key",
			Requester: echo,
		},
	}
	client, err = composition.NewClientWithConfig(cfg)
	require.NoError(t, err)
	res, err = client.CustomPost(context.Background(), "test", nil)
	require.NoError(t, err)
	require.Equal(t, "test-app-id.algolia.net", echo.Host)
}

// test the compression strategy.
func TestCompositionapi2(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	echo := &tests.EchoRequester{}

	var (
		client *composition.APIClient
		cfg    composition.CompositionConfiguration
	)

	_ = client
	_ = echo
	cfg = composition.CompositionConfiguration{
		Configuration: transport.Configuration{
			AppID:       "test-app-id",
			ApiKey:      "test-api-key",
			Hosts:       []transport.StatefulHost{transport.NewStatefulHost("http", tests.GetLocalhost()+":6678", call.IsReadWrite)},
			Compression: compression.GZIP,
		},
	}
	client, err = composition.NewClientWithConfig(cfg)
	require.NoError(t, err)
	res, err = client.CustomPost(
		context.Background(),
		"1/test/gzip",
		composition.NewCustomPostOptions().WithParameters(map[string]any{}).WithBody(map[string]any{"message": "this is a compressed body"}),
	)
	require.NoError(t, err)
	rawBody, err := json.Marshal(res)
	require.NoError(t, err)
	require.JSONEq(t, `{"message":"ok compression test server response","body":{"message":"this is a compressed body"}}`, string(rawBody))
}

// calls api with correct user agent.
func TestCompositioncommonApi0(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	client, echo := createCompositionClient(t)
	_ = echo
	res, err = client.CustomPost(context.Background(), "1/test", nil)
	require.NoError(t, err)
	require.Regexp(
		t,
		`^Algolia for Go \(\d+\.\d+\.\d+(-?.*)?\)(; [a-zA-Z. ]+ (\(\d+((\.\d+)?\.\d+)?(-?.*)?\))?)*(; Composition (\(\d+\.\d+\.\d+(-?.*)?\)))(; [a-zA-Z. ]+ (\(\d+((\.\d+)?\.\d+)?(-?.*)?\))?)*$`,
		echo.Header.Get("User-Agent"),
	)
}

// the user agent contains the latest version.
func TestCompositioncommonApi1(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	client, echo := createCompositionClient(t)
	_ = echo
	res, err = client.CustomPost(context.Background(), "1/test", nil)
	require.NoError(t, err)
	require.Regexp(t, `^Algolia for Go \(4.28.1\).*`, echo.Header.Get("User-Agent"))
}

// switch API key.
func TestCompositionsetClientApiKey0(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	echo := &tests.EchoRequester{}

	var (
		client *composition.APIClient
		cfg    composition.CompositionConfiguration
	)

	_ = client
	_ = echo
	cfg = composition.CompositionConfiguration{
		Configuration: transport.Configuration{
			AppID:  "test-app-id",
			ApiKey: "test-api-key",
			Hosts:  []transport.StatefulHost{transport.NewStatefulHost("http", tests.GetLocalhost()+":6683", call.IsReadWrite)},
		},
	}
	client, err = composition.NewClientWithConfig(cfg)
	require.NoError(t, err)
	{
		res, err = client.CustomGet(context.Background(), "check-api-key/1", nil)
		require.NoError(t, err)
		rawBody, err := json.Marshal(res)
		require.NoError(t, err)
		require.JSONEq(t, `{"headerAPIKeyValue":"test-api-key"}`, string(rawBody))
	}
	{
		err = client.SetClientApiKey("updated-api-key")
		require.NoError(t, err)
	}
	{
		res, err = client.CustomGet(context.Background(), "check-api-key/2", nil)
		require.NoError(t, err)
		rawBody, err := json.Marshal(res)
		require.NoError(t, err)
		require.JSONEq(t, `{"headerAPIKeyValue":"updated-api-key"}`, string(rawBody))
	}
}
