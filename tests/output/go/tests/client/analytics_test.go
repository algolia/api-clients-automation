package client

// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.

import (
	"context"
	"encoding/json"
	"gotests/tests"
	"testing"

	"github.com/stretchr/testify/require"

	"github.com/algolia/algoliasearch-client-go/v4/algolia/call"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/next/analytics"
	"github.com/algolia/algoliasearch-client-go/v4/algolia/transport"
)

func createAnalyticsClient(t *testing.T) (*analytics.APIClient, *tests.EchoRequester) {
	t.Helper()

	echo := &tests.EchoRequester{}
	cfg := analytics.AnalyticsConfiguration{
		Configuration: transport.Configuration{
			AppID:     "appID",
			ApiKey:    "apiKey",
			Requester: echo,
		},
		Region: analytics.US,
	}
	client, err := analytics.NewClientWithConfig(cfg)
	require.NoError(t, err)

	return client, echo
}

// calls api with correct user agent.
func TestAnalyticscommonApi0(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	client, echo := createAnalyticsClient(t)
	_ = echo
	res, err = client.CustomPost(context.Background(), "1/test", nil)
	require.NoError(t, err)
	require.Regexp(
		t,
		`^Algolia for Go \(\d+\.\d+\.\d+(-?.*)?\)(; [a-zA-Z. ]+ (\(\d+((\.\d+)?\.\d+)?(-?.*)?\))?)*(; Analytics (\(\d+\.\d+\.\d+(-?.*)?\)))(; [a-zA-Z. ]+ (\(\d+((\.\d+)?\.\d+)?(-?.*)?\))?)*$`,
		echo.Header.Get("User-Agent"),
	)
}

// the user agent contains the latest version.
func TestAnalyticscommonApi1(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	client, echo := createAnalyticsClient(t)
	_ = echo
	res, err = client.CustomPost(context.Background(), "1/test", nil)
	require.NoError(t, err)
	require.Regexp(t, `^Algolia for Go \(4.28.1\).*`, echo.Header.Get("User-Agent"))
}

// fallbacks to the alias when region is not given.
func TestAnalyticsparameters0(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	echo := &tests.EchoRequester{}

	var (
		client *analytics.APIClient
		cfg    analytics.AnalyticsConfiguration
	)

	_ = client
	_ = echo
	cfg = analytics.AnalyticsConfiguration{
		Configuration: transport.Configuration{
			AppID:     "my-app-id",
			ApiKey:    "my-api-key",
			Requester: echo,
		},
	}
	client, err = analytics.NewClientWithConfig(cfg)
	require.NoError(t, err)
	res, err = client.GetAverageClickPosition(context.Background(), "my-index", nil)
	require.NoError(t, err)
	require.Equal(t, "analytics.algolia.com", echo.Host)
}

// uses the correct region.
func TestAnalyticsparameters1(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	echo := &tests.EchoRequester{}

	var (
		client *analytics.APIClient
		cfg    analytics.AnalyticsConfiguration
	)

	_ = client
	_ = echo
	cfg = analytics.AnalyticsConfiguration{
		Configuration: transport.Configuration{
			AppID:     "my-app-id",
			ApiKey:    "my-api-key",
			Requester: echo,
		},
		Region: analytics.Region("de"),
	}
	client, err = analytics.NewClientWithConfig(cfg)
	require.NoError(t, err)
	res, err = client.CustomPost(context.Background(), "test", nil)
	require.NoError(t, err)
	require.Equal(t, "analytics.de.algolia.com", echo.Host)
}

// throws when incorrect region is given.
func TestAnalyticsparameters2(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	echo := &tests.EchoRequester{}

	var (
		client *analytics.APIClient
		cfg    analytics.AnalyticsConfiguration
	)

	_ = client
	_ = echo
	cfg = analytics.AnalyticsConfiguration{
		Configuration: transport.Configuration{
			AppID:     "my-app-id",
			ApiKey:    "my-api-key",
			Requester: echo,
		},
		Region: analytics.Region("not_a_region"),
	}
	client, err = analytics.NewClientWithConfig(cfg)
	require.EqualError(t, err, "`region` must be one of the following: de, us")
}

// getAverageClickPosition throws without index.
func TestAnalyticsparameters3(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	client, echo := createAnalyticsClient(t)
	_ = echo
	res, err = client.GetClickPositions(context.Background(), tests.ZeroValue[string](), nil)
	require.EqualError(t, err, "Parameter `index` is required when calling `GetClickPositions`.")
}

// switch API key.
func TestAnalyticssetClientApiKey0(t *testing.T) {
	var (
		err error
		res any
	)

	_ = res
	echo := &tests.EchoRequester{}

	var (
		client *analytics.APIClient
		cfg    analytics.AnalyticsConfiguration
	)

	_ = client
	_ = echo
	cfg = analytics.AnalyticsConfiguration{
		Configuration: transport.Configuration{
			AppID:  "test-app-id",
			ApiKey: "test-api-key",
			Hosts:  []transport.StatefulHost{transport.NewStatefulHost("http", tests.GetLocalhost()+":6683", call.IsReadWrite)},
		},
		Region: analytics.Region("us"),
	}
	client, err = analytics.NewClientWithConfig(cfg)
	require.NoError(t, err)
	{
		res, err = client.CustomGet(context.Background(), "check-api-key/1", nil)
		require.NoError(t, err)
		rawBody, err := json.Marshal(res)
		require.NoError(t, err)
		require.JSONEq(t, `{"headerAPIKeyValue":"test-api-key"}`, string(rawBody))
	}
	{
		err = client.SetClientApiKey("updated-api-key")
		require.NoError(t, err)
	}
	{
		res, err = client.CustomGet(context.Background(), "check-api-key/2", nil)
		require.NoError(t, err)
		rawBody, err := json.Marshal(res)
		require.NoError(t, err)
		require.JSONEq(t, `{"headerAPIKeyValue":"updated-api-key"}`, string(rawBody))
	}
}
