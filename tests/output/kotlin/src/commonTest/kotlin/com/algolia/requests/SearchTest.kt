// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package com.algolia.requests

import com.algolia.client.api.SearchClient
import com.algolia.client.configuration.*
import com.algolia.client.model.search.*
import com.algolia.client.transport.*
import com.algolia.utils.*
import io.ktor.http.*
import kotlinx.coroutines.test.*
import kotlinx.serialization.json.*
import kotlin.test.*

class SearchTest {

  val client = SearchClient(
    appId = "appId",
    apiKey = "apiKey",
  )

  // addApiKey

  @Test
  fun `addApiKey`() = runTest {
    client.runTest(
      call = {
        addApiKey(
          apiKey = ApiKey(
            acl = listOf(Acl.entries.first { it.value == "search" }, Acl.entries.first { it.value == "addObject" }),
            description = "my new api key",
            validity = 300,
            maxQueriesPerIPPerHour = 100,
            maxHitsPerQuery = 20,
          ),
        )
      },
      intercept = {
        assertEquals("/1/keys".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"acl":["search","addObject"],"description":"my new api key","validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}""", it.body)
      },
    )
  }

  // addOrUpdateObject

  @Test
  fun `addOrUpdateObject`() = runTest {
    client.runTest(
      call = {
        addOrUpdateObject(
          indexName = "indexName",
          objectID = "uniqueID",
          body = buildJsonObject {
            put(
              "key",
              JsonPrimitive("value"),
            )
          },
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/uniqueID".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"key":"value"}""", it.body)
      },
    )
  }

  // appendSource

  @Test
  fun `appendSource`() = runTest {
    client.runTest(
      call = {
        appendSource(
          source = Source(
            source = "theSource",
            description = "theDescription",
          ),
        )
      },
      intercept = {
        assertEquals("/1/security/sources/append".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"source":"theSource","description":"theDescription"}""", it.body)
      },
    )
  }

  // assignUserId

  @Test
  fun `simple`() = runTest {
    client.runTest(
      call = {
        assignUserId(
          xAlgoliaUserID = "user42",
          assignUserIdParams = AssignUserIdParams(
            cluster = "d4242-eu",
          ),
        )
      },
      intercept = {
        assertEquals("/1/clusters/mapping".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertContainsAll("""{"x-algolia-user-id":"user42"}""", it.headers)
        assertJsonBody("""{"cluster":"d4242-eu"}""", it.body)
      },
    )
  }

  @Test
  fun `it should not encode the userID1`() = runTest {
    client.runTest(
      call = {
        assignUserId(
          xAlgoliaUserID = "user id with spaces",
          assignUserIdParams = AssignUserIdParams(
            cluster = "cluster with spaces",
          ),
        )
      },
      intercept = {
        assertEquals("/1/clusters/mapping".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertContainsAll("""{"x-algolia-user-id":"user id with spaces"}""", it.headers)
        assertJsonBody("""{"cluster":"cluster with spaces"}""", it.body)
      },
    )
  }

  // batch

  @Test
  fun `addObject`() = runTest {
    client.runTest(
      call = {
        batch(
          indexName = "<YOUR_INDEX_NAME>",
          batchWriteParams = BatchWriteParams(
            requests = listOf(
              BatchRequest(
                action = Action.entries.first { it.value == "addObject" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("bar"),
                  )
                  put(
                    "foo",
                    JsonPrimitive("1"),
                  )
                },
              ),
              BatchRequest(
                action = Action.entries.first { it.value == "addObject" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("baz"),
                  )
                  put(
                    "foo",
                    JsonPrimitive("2"),
                  )
                },
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"addObject","body":{"key":"bar","foo":"1"}},{"action":"addObject","body":{"key":"baz","foo":"2"}}]}""", it.body)
      },
    )
  }

  @Test
  fun `clear1`() = runTest {
    client.runTest(
      call = {
        batch(
          indexName = "<YOUR_INDEX_NAME>",
          batchWriteParams = BatchWriteParams(
            requests = listOf(
              BatchRequest(
                action = Action.entries.first { it.value == "clear" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("value"),
                  )
                },
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"clear","body":{"key":"value"}}]}""", it.body)
      },
    )
  }

  @Test
  fun `delete2`() = runTest {
    client.runTest(
      call = {
        batch(
          indexName = "<YOUR_INDEX_NAME>",
          batchWriteParams = BatchWriteParams(
            requests = listOf(
              BatchRequest(
                action = Action.entries.first { it.value == "delete" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("value"),
                  )
                },
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"delete","body":{"key":"value"}}]}""", it.body)
      },
    )
  }

  @Test
  fun `deleteObject3`() = runTest {
    client.runTest(
      call = {
        batch(
          indexName = "<YOUR_INDEX_NAME>",
          batchWriteParams = BatchWriteParams(
            requests = listOf(
              BatchRequest(
                action = Action.entries.first { it.value == "deleteObject" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("value"),
                  )
                },
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"deleteObject","body":{"key":"value"}}]}""", it.body)
      },
    )
  }

  @Test
  fun `partialUpdateObject4`() = runTest {
    client.runTest(
      call = {
        batch(
          indexName = "<YOUR_INDEX_NAME>",
          batchWriteParams = BatchWriteParams(
            requests = listOf(
              BatchRequest(
                action = Action.entries.first { it.value == "partialUpdateObject" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("value"),
                  )
                },
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"partialUpdateObject","body":{"key":"value"}}]}""", it.body)
      },
    )
  }

  @Test
  fun `partialUpdateObjectNoCreate5`() = runTest {
    client.runTest(
      call = {
        batch(
          indexName = "<YOUR_INDEX_NAME>",
          batchWriteParams = BatchWriteParams(
            requests = listOf(
              BatchRequest(
                action = Action.entries.first { it.value == "partialUpdateObjectNoCreate" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("value"),
                  )
                },
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"partialUpdateObjectNoCreate","body":{"key":"value"}}]}""", it.body)
      },
    )
  }

  @Test
  fun `updateObject6`() = runTest {
    client.runTest(
      call = {
        batch(
          indexName = "<YOUR_INDEX_NAME>",
          batchWriteParams = BatchWriteParams(
            requests = listOf(
              BatchRequest(
                action = Action.entries.first { it.value == "updateObject" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("value"),
                  )
                },
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"updateObject","body":{"key":"value"}}]}""", it.body)
      },
    )
  }

  // batchAssignUserIds

  @Test
  fun `batchAssignUserIds`() = runTest {
    client.runTest(
      call = {
        batchAssignUserIds(
          xAlgoliaUserID = "userID",
          batchAssignUserIdsParams = BatchAssignUserIdsParams(
            cluster = "theCluster",
            users = listOf("user1", "user2"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/clusters/mapping/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertContainsAll("""{"x-algolia-user-id":"userID"}""", it.headers)
        assertJsonBody("""{"cluster":"theCluster","users":["user1","user2"]}""", it.body)
      },
    )
  }

  // batchDictionaryEntries

  @Test
  fun `replace`() = runTest {
    client.runTest(
      call = {
        batchDictionaryEntries(
          dictionaryName = DictionaryType.entries.first { it.value == "plurals" },
          batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
            clearExistingDictionaryEntries = true,
            requests = listOf(
              BatchDictionaryEntriesRequest(
                action = DictionaryAction.entries.first { it.value == "addEntry" },
                body = DictionaryEntry(
                  objectID = "1",
                  language = SupportedLanguage.entries.first { it.value == "en" },
                  word = "fancy",
                  words = listOf("believe", "algolia"),
                  decomposition = listOf("trust", "algolia"),
                  state = DictionaryEntryState.entries.first { it.value == "enabled" },
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/dictionaries/plurals/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"clearExistingDictionaryEntries":true,"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","word":"fancy","words":["believe","algolia"],"decomposition":["trust","algolia"],"state":"enabled"}}]}""", it.body)
      },
    )
  }

  @Test
  fun `delete1`() = runTest {
    client.runTest(
      call = {
        batchDictionaryEntries(
          dictionaryName = DictionaryType.entries.first { it.value == "plurals" },
          batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
            clearExistingDictionaryEntries = true,
            requests = listOf(
              BatchDictionaryEntriesRequest(
                action = DictionaryAction.entries.first { it.value == "deleteEntry" },
                body = DictionaryEntry(
                  objectID = "1",
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/dictionaries/plurals/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"clearExistingDictionaryEntries":true,"requests":[{"action":"deleteEntry","body":{"objectID":"1"}}]}""", it.body)
      },
    )
  }

  @Test
  fun `append2`() = runTest {
    client.runTest(
      call = {
        batchDictionaryEntries(
          dictionaryName = DictionaryType.entries.first { it.value == "stopwords" },
          batchDictionaryEntriesParams = BatchDictionaryEntriesParams(
            requests = listOf(
              BatchDictionaryEntriesRequest(
                action = DictionaryAction.entries.first { it.value == "addEntry" },
                body = DictionaryEntry(
                  objectID = "1",
                  language = SupportedLanguage.entries.first { it.value == "en" },
                  additionalProperties = mapOf(
                    "additional" to JsonPrimitive("try me"),
                  ),
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/dictionaries/stopwords/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"addEntry","body":{"objectID":"1","language":"en","additional":"try me"}}]}""", it.body)
      },
    )
  }

  // browse

  @Test
  fun `browse with minimal parameters`() = runTest {
    client.runTest(
      call = {
        browse(
          indexName = "cts_e2e_browse",
        )
      },
      intercept = {
        assertEquals("/1/indexes/cts_e2e_browse/browse".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `browse with search parameters1`() = runTest {
    client.runTest(
      call = {
        browse(
          indexName = "indexName",
          browseParams = BrowseParamsObject(
            query = "myQuery",
            facetFilters = FacetFilters.of(listOf(FacetFilters.of("tags:algolia"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/browse".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"myQuery","facetFilters":["tags:algolia"]}""", it.body)
      },
    )
  }

  @Test
  fun `browse allow a cursor in parameters2`() = runTest {
    client.runTest(
      call = {
        browse(
          indexName = "indexName",
          browseParams = BrowseParamsObject(
            cursor = "test",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/browse".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"cursor":"test"}""", it.body)
      },
    )
  }

  // clearObjects

  @Test
  fun `clearObjects`() = runTest {
    client.runTest(
      call = {
        clearObjects(
          indexName = "theIndexName",
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/clear".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertEmptyBody(it.body)
      },
    )
  }

  // clearRules

  @Test
  fun `clearRules`() = runTest {
    client.runTest(
      call = {
        clearRules(
          indexName = "indexName",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/clear".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertEmptyBody(it.body)
      },
    )
  }

  // clearSynonyms

  @Test
  fun `clearSynonyms`() = runTest {
    client.runTest(
      call = {
        clearSynonyms(
          indexName = "indexName",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/synonyms/clear".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertEmptyBody(it.body)
      },
    )
  }

  // customDelete

  @Test
  fun `allow del method for a custom path with minimal parameters`() = runTest {
    client.runTest(
      call = {
        customDelete(
          path = "test/minimal",
        )
      },
      intercept = {
        assertEquals("/test/minimal".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `allow del method for a custom path with all parameters1`() = runTest {
    client.runTest(
      call = {
        customDelete(
          path = "test/all",
          parameters = mapOf("query" to "parameters"),
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // customGet

  @Test
  fun `allow get method for a custom path with minimal parameters`() = runTest {
    client.runTest(
      call = {
        customGet(
          path = "test/minimal",
        )
      },
      intercept = {
        assertEquals("/test/minimal".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `allow get method for a custom path with all parameters1`() = runTest {
    client.runTest(
      call = {
        customGet(
          path = "test/all",
          parameters = mapOf("query" to "parameters with space"),
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"query":"parameters%20with%20space"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `requestOptions should be escaped too2`() = runTest {
    client.runTest(
      call = {
        customGet(
          path = "test/all",
          parameters = mapOf("query" to "to be overriden"),
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("query", "parameters with space")
              put("and an array", listOf("array", "with spaces"))
            },
            headers = buildMap {
              put("x-header-1", "spaces are left alone")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertContainsAll("""{"x-header-1":"spaces are left alone"}""", it.headers)
        assertQueryParams("""{"query":"parameters%20with%20space","and%20an%20array":"array%2Cwith%20spaces"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // customPost

  @Test
  fun `allow post method for a custom path with minimal parameters`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/minimal",
        )
      },
      intercept = {
        assertEquals("/test/minimal".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `allow post method for a custom path with all parameters1`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/all",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "body",
              JsonPrimitive("parameters"),
            )
          },
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertJsonBody("""{"body":"parameters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions can override default query parameters2`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("query", "myQueryParameter")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"myQueryParameter"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions merges query parameters with default ones3`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("query2", "myQueryParameter")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","query2":"myQueryParameter"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions can override default headers4`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            headers = buildMap {
              put("x-algolia-api-key", "ALGOLIA_API_KEY")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertContainsAll("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}""", it.headers)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions merges headers with default ones5`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            headers = buildMap {
              put("x-algolia-api-key", "ALGOLIA_API_KEY")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertContainsAll("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}""", it.headers)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts booleans6`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("isItWorking", true)
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","isItWorking":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts integers7`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("myParam", 2)
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","myParam":"2"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts list of string8`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("myParam", listOf("b and c", "d"))
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","myParam":"b%20and%20c%2Cd"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts list of booleans9`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("myParam", listOf(true, true, false))
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts list of integers10`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("myParam", listOf(1, 2))
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","myParam":"1%2C2"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  // customPut

  @Test
  fun `allow put method for a custom path with minimal parameters`() = runTest {
    client.runTest(
      call = {
        customPut(
          path = "test/minimal",
        )
      },
      intercept = {
        assertEquals("/test/minimal".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `allow put method for a custom path with all parameters1`() = runTest {
    client.runTest(
      call = {
        customPut(
          path = "test/all",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "body",
              JsonPrimitive("parameters"),
            )
          },
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertJsonBody("""{"body":"parameters"}""", it.body)
      },
    )
  }

  // deleteApiKey

  @Test
  fun `deleteApiKey`() = runTest {
    client.runTest(
      call = {
        deleteApiKey(
          key = "myTestApiKey",
        )
      },
      intercept = {
        assertEquals("/1/keys/myTestApiKey".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // deleteBy

  @Test
  fun `deleteBy`() = runTest {
    client.runTest(
      call = {
        deleteBy(
          indexName = "theIndexName",
          deleteByParams = DeleteByParams(
            filters = "brand:brandName",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/deleteByQuery".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"brand:brandName"}""", it.body)
      },
    )
  }

  // deleteIndex

  @Test
  fun `deleteIndex`() = runTest {
    client.runTest(
      call = {
        deleteIndex(
          indexName = "theIndexName",
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // deleteObject

  @Test
  fun `deleteObject`() = runTest {
    client.runTest(
      call = {
        deleteObject(
          indexName = "<YOUR_INDEX_NAME>",
          objectID = "uniqueID",
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/uniqueID".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // deleteRule

  @Test
  fun `delete rule simple case`() = runTest {
    client.runTest(
      call = {
        deleteRule(
          indexName = "indexName",
          objectID = "id1",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/id1".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `delete rule with simple characters to encode in objectID1`() = runTest {
    client.runTest(
      call = {
        deleteRule(
          indexName = "indexName",
          objectID = "test/with/slash",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/test%2Fwith%2Fslash".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // deleteSource

  @Test
  fun `deleteSource`() = runTest {
    client.runTest(
      call = {
        deleteSource(
          source = "theSource",
        )
      },
      intercept = {
        assertEquals("/1/security/sources/theSource".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // deleteSynonym

  @Test
  fun `deleteSynonym`() = runTest {
    client.runTest(
      call = {
        deleteSynonym(
          indexName = "indexName",
          objectID = "id1",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/synonyms/id1".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getApiKey

  @Test
  fun `getApiKey`() = runTest {
    client.runTest(
      call = {
        getApiKey(
          key = "myTestApiKey",
        )
      },
      intercept = {
        assertEquals("/1/keys/myTestApiKey".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getAppTask

  @Test
  fun `getAppTask`() = runTest {
    client.runTest(
      call = {
        getAppTask(
          taskID = 123L,
        )
      },
      intercept = {
        assertEquals("/1/task/123".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getDictionaryLanguages

  @Test
  fun `get getDictionaryLanguages`() = runTest {
    client.runTest(
      call = {
        getDictionaryLanguages()
      },
      intercept = {
        assertEquals("/1/dictionaries/*/languages".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getDictionarySettings

  @Test
  fun `get getDictionarySettings results`() = runTest {
    client.runTest(
      call = {
        getDictionarySettings()
      },
      intercept = {
        assertEquals("/1/dictionaries/*/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getLogs

  @Test
  fun `getLogs with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getLogs()
      },
      intercept = {
        assertEquals("/1/logs".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `getLogs with parameters1`() = runTest {
    client.runTest(
      call = {
        getLogs(
          offset = 5,
          length = 10,
          indexName = "theIndexName",
          type = LogType.entries.first { it.value == "all" },
        )
      },
      intercept = {
        assertEquals("/1/logs".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"offset":"5","length":"10","indexName":"theIndexName","type":"all"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getObject

  @Test
  fun `getObject`() = runTest {
    client.runTest(
      call = {
        getObject(
          indexName = "theIndexName",
          objectID = "uniqueID",
          attributesToRetrieve = listOf("attr1", "attr2"),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/uniqueID".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"attributesToRetrieve":"attr1%2Cattr2"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `search with a real object1`() = runTest {
    client.runTest(
      call = {
        getObject(
          indexName = "cts_e2e_browse",
          objectID = "Batman and Robin",
        )
      },
      intercept = {
        assertEquals("/1/indexes/cts_e2e_browse/Batman%20and%20Robin".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getObjects

  @Test
  fun `getObjects`() = runTest {
    client.runTest(
      call = {
        getObjects(
          getObjectsParams = GetObjectsParams(
            requests = listOf(
              GetObjectsRequest(
                attributesToRetrieve = listOf("attr1", "attr2"),
                objectID = "uniqueID",
                indexName = "theIndexName",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/objects".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"attributesToRetrieve":["attr1","attr2"],"objectID":"uniqueID","indexName":"theIndexName"}]}""", it.body)
      },
    )
  }

  // getRule

  @Test
  fun `getRule`() = runTest {
    client.runTest(
      call = {
        getRule(
          indexName = "cts_e2e_browse",
          objectID = "qr-1725004648916",
        )
      },
      intercept = {
        assertEquals("/1/indexes/cts_e2e_browse/rules/qr-1725004648916".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getSettings

  @Test
  fun `getSettings`() = runTest {
    client.runTest(
      call = {
        getSettings(
          indexName = "cts_e2e_settings",
        )
      },
      intercept = {
        assertEquals("/1/indexes/cts_e2e_settings/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getSources

  @Test
  fun `getSources`() = runTest {
    client.runTest(
      call = {
        getSources()
      },
      intercept = {
        assertEquals("/1/security/sources".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getSynonym

  @Test
  fun `getSynonym`() = runTest {
    client.runTest(
      call = {
        getSynonym(
          indexName = "indexName",
          objectID = "id1",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/synonyms/id1".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getTask

  @Test
  fun `getTask`() = runTest {
    client.runTest(
      call = {
        getTask(
          indexName = "theIndexName",
          taskID = 123L,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/task/123".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getTopUserIds

  @Test
  fun `getTopUserIds`() = runTest {
    client.runTest(
      call = {
        getTopUserIds()
      },
      intercept = {
        assertEquals("/1/clusters/mapping/top".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // getUserId

  @Test
  fun `getUserId`() = runTest {
    client.runTest(
      call = {
        getUserId(
          userID = "uniqueID",
        )
      },
      intercept = {
        assertEquals("/1/clusters/mapping/uniqueID".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // hasPendingMappings

  @Test
  fun `hasPendingMappings with minimal parameters`() = runTest {
    client.runTest(
      call = {
        hasPendingMappings()
      },
      intercept = {
        assertEquals("/1/clusters/mapping/pending".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `hasPendingMappings with parameters1`() = runTest {
    client.runTest(
      call = {
        hasPendingMappings(
          getClusters = true,
        )
      },
      intercept = {
        assertEquals("/1/clusters/mapping/pending".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"getClusters":"true"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // listApiKeys

  @Test
  fun `listApiKeys`() = runTest {
    client.runTest(
      call = {
        listApiKeys()
      },
      intercept = {
        assertEquals("/1/keys".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // listClusters

  @Test
  fun `listClusters`() = runTest {
    client.runTest(
      call = {
        listClusters()
      },
      intercept = {
        assertEquals("/1/clusters".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // listIndices

  @Test
  fun `listIndices with minimal parameters`() = runTest {
    client.runTest(
      call = {
        listIndices()
      },
      intercept = {
        assertEquals("/1/indexes".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `listIndices with parameters1`() = runTest {
    client.runTest(
      call = {
        listIndices(
          page = 8,
          hitsPerPage = 3,
        )
      },
      intercept = {
        assertEquals("/1/indexes".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"page":"8","hitsPerPage":"3"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // listUserIds

  @Test
  fun `listUserIds with minimal parameters`() = runTest {
    client.runTest(
      call = {
        listUserIds()
      },
      intercept = {
        assertEquals("/1/clusters/mapping".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `listUserIds with parameters1`() = runTest {
    client.runTest(
      call = {
        listUserIds(
          page = 8,
          hitsPerPage = 100,
        )
      },
      intercept = {
        assertEquals("/1/clusters/mapping".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"page":"8","hitsPerPage":"100"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // multipleBatch

  @Test
  fun `multipleBatch`() = runTest {
    client.runTest(
      call = {
        multipleBatch(
          batchParams = BatchParams(
            requests = listOf(
              MultipleBatchRequest(
                action = Action.entries.first { it.value == "addObject" },
                body = buildJsonObject {
                  put(
                    "key",
                    JsonPrimitive("value"),
                  )
                },
                indexName = "theIndexName",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"action":"addObject","body":{"key":"value"},"indexName":"theIndexName"}]}""", it.body)
      },
    )
  }

  // operationIndex

  @Test
  fun `scopes`() = runTest {
    client.runTest(
      call = {
        operationIndex(
          indexName = "<SOURCE_INDEX_NAME>",
          operationIndexParams = OperationIndexParams(
            operation = OperationType.entries.first { it.value == "move" },
            destination = "<DESTINATION_INDEX_NAME>",
            scope = listOf(ScopeType.entries.first { it.value == "rules" }, ScopeType.entries.first { it.value == "settings" }),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"operation":"move","destination":"<DESTINATION_INDEX_NAME>","scope":["rules","settings"]}""", it.body)
      },
    )
  }

  @Test
  fun `copy1`() = runTest {
    client.runTest(
      call = {
        operationIndex(
          indexName = "<SOURCE_INDEX_NAME>",
          operationIndexParams = OperationIndexParams(
            operation = OperationType.entries.first { it.value == "copy" },
            destination = "<DESTINATION_INDEX_NAME>",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"operation":"copy","destination":"<DESTINATION_INDEX_NAME>"}""", it.body)
      },
    )
  }

  @Test
  fun `move2`() = runTest {
    client.runTest(
      call = {
        operationIndex(
          indexName = "<SOURCE_INDEX_NAME>",
          operationIndexParams = OperationIndexParams(
            operation = OperationType.entries.first { it.value == "move" },
            destination = "<DESTINATION_INDEX_NAME>",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"operation":"move","destination":"<DESTINATION_INDEX_NAME>"}""", it.body)
      },
    )
  }

  // partialUpdateObject

  @Test
  fun `Partial update with a new value for a string attribute`() = runTest {
    client.runTest(
      call = {
        partialUpdateObject(
          indexName = "theIndexName",
          objectID = "uniqueID",
          attributesToUpdate = buildJsonObject {
            put(
              "attributeId",
              JsonPrimitive("new value"),
            )
          },
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/uniqueID/partial".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"attributeId":"new value"}""", it.body)
      },
    )
  }

  @Test
  fun `Partial update with a new value for an integer attribute1`() = runTest {
    client.runTest(
      call = {
        partialUpdateObject(
          indexName = "theIndexName",
          objectID = "uniqueID",
          attributesToUpdate = buildJsonObject {
            put(
              "attributeId",
              JsonPrimitive(1),
            )
          },
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/uniqueID/partial".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"attributeId":1}""", it.body)
      },
    )
  }

  @Test
  fun `Partial update with a new value for a boolean attribute2`() = runTest {
    client.runTest(
      call = {
        partialUpdateObject(
          indexName = "theIndexName",
          objectID = "uniqueID",
          attributesToUpdate = buildJsonObject {
            put(
              "attributeId",
              JsonPrimitive(true),
            )
          },
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/uniqueID/partial".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"attributeId":true}""", it.body)
      },
    )
  }

  @Test
  fun `Partial update with a new value for an array attribute3`() = runTest {
    client.runTest(
      call = {
        partialUpdateObject(
          indexName = "theIndexName",
          objectID = "uniqueID",
          attributesToUpdate = buildJsonObject {
            put(
              "attributeId",
              JsonArray(
                listOf(
                  JsonPrimitive("one"),
                  JsonPrimitive("two"),
                  JsonPrimitive("three"),
                ),
              ),
            )
          },
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/uniqueID/partial".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"attributeId":["one","two","three"]}""", it.body)
      },
    )
  }

  @Test
  fun `Partial update with a new value for an object attribute4`() = runTest {
    client.runTest(
      call = {
        partialUpdateObject(
          indexName = "theIndexName",
          objectID = "uniqueID",
          attributesToUpdate = buildJsonObject {
            put(
              "attributeId",
              buildJsonObject {
                put(
                  "nested",
                  JsonPrimitive("value"),
                )
              },
            )
          },
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/uniqueID/partial".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"attributeId":{"nested":"value"}}""", it.body)
      },
    )
  }

  @Test
  fun `with visible_by filter5`() = runTest {
    client.runTest(
      call = {
        partialUpdateObject(
          indexName = "theIndexName",
          objectID = "uniqueID",
          attributesToUpdate = buildJsonObject {
            put(
              "visible_by",
              JsonArray(
                listOf(
                  JsonPrimitive("Angela"),
                  JsonPrimitive("group/Finance"),
                  JsonPrimitive("group/Shareholders"),
                ),
              ),
            )
          },
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/uniqueID/partial".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"visible_by":["Angela","group/Finance","group/Shareholders"]}""", it.body)
      },
    )
  }

  // removeUserId

  @Test
  fun `removeUserId`() = runTest {
    client.runTest(
      call = {
        removeUserId(
          userID = "uniqueID",
        )
      },
      intercept = {
        assertEquals("/1/clusters/mapping/uniqueID".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  // replaceSources

  @Test
  fun `replaceSources`() = runTest {
    client.runTest(
      call = {
        replaceSources(
          source = listOf(
            Source(
              source = "theSource",
              description = "theDescription",
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/security/sources".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""[{"source":"theSource","description":"theDescription"}]""", it.body)
      },
    )
  }

  // restoreApiKey

  @Test
  fun `restoreApiKey`() = runTest {
    client.runTest(
      call = {
        restoreApiKey(
          key = "ALGOLIA_API_KEY",
        )
      },
      intercept = {
        assertEquals("/1/keys/ALGOLIA_API_KEY/restore".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertEmptyBody(it.body)
      },
    )
  }

  // saveObject

  @Test
  fun `saveObject`() = runTest {
    client.runTest(
      call = {
        saveObject(
          indexName = "<YOUR_INDEX_NAME>",
          body = buildJsonObject {
            put(
              "objectID",
              JsonPrimitive("id"),
            )
            put(
              "test",
              JsonPrimitive("val"),
            )
          },
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"objectID":"id","test":"val"}""", it.body)
      },
    )
  }

  // saveRule

  @Test
  fun `saveRule with minimal parameters`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "id1",
          rule = Rule(
            objectID = "id1",
            conditions = listOf(
              Condition(
                pattern = "apple",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                filters = "brand:xiaomi",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/id1".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:xiaomi"}}}""", it.body)
      },
    )
  }

  @Test
  fun `saveRule with all parameters1`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "id1",
          rule = Rule(
            objectID = "id1",
            conditions = listOf(
              Condition(
                pattern = "apple",
                anchoring = Anchoring.entries.first { it.value == "contains" },
                alternatives = false,
                context = "search",
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                filters = "brand:apple",
                query = ConsequenceQueryObject(
                  remove = listOf("algolia"),
                  edits = listOf(
                    Edit(
                      type = EditType.entries.first { it.value == "remove" },
                      delete = "abc",
                      insert = "cde",
                    ),
                    Edit(
                      type = EditType.entries.first { it.value == "replace" },
                      delete = "abc",
                      insert = "cde",
                    ),
                  ),
                ),
              ),
              hide = listOf(
                ConsequenceHide(
                  objectID = "321",
                ),
              ),
              filterPromotes = false,
              userData = buildJsonObject {
                put(
                  "algolia",
                  JsonPrimitive("aloglia"),
                )
              },
              promote = listOf(
                PromoteObjectID(
                  objectID = "abc",
                  position = 3,
                ),
                PromoteObjectIDs(
                  objectIDs = listOf("abc", "def"),
                  position = 1,
                ),
              ),
            ),
            description = "test",
            enabled = true,
            validity = listOf(
              TimeRange(
                from = 1656670273L,
                until = 1656670277L,
              ),
            ),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/id1".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}""", it.body)
      },
    )
  }

  @Test
  fun `b2b catalog2`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "article-rule",
          rule = Rule(
            objectID = "article-rule",
            conditions = listOf(
              Condition(
                pattern = "article",
                anchoring = Anchoring.entries.first { it.value == "startsWith" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                query = ConsequenceQueryObject(
                  edits = listOf(
                    Edit(
                      type = EditType.entries.first { it.value == "remove" },
                      delete = "article",
                    ),
                  ),
                ),
                restrictSearchableAttributes = listOf("title", "book_id"),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/article-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}""", it.body)
      },
    )
  }

  @Test
  fun `merchandising and promoting3`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "director-rule",
          rule = Rule(
            objectID = "director-rule",
            conditions = listOf(
              Condition(
                pattern = "{facet:director} director",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                restrictSearchableAttributes = listOf("title", "book_id"),
                automaticFacetFilters = AutomaticFacetFilters.ofListOfAutomaticFacetFilter(
                  listOf(
                    AutomaticFacetFilter(
                      facet = "director",
                    ),
                  ),
                ),
                query = ConsequenceQueryObject(
                  edits = listOf(
                    Edit(
                      type = EditType.entries.first { it.value == "remove" },
                      delete = "director",
                    ),
                  ),
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/director-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"director-rule","conditions":[{"pattern":"{facet:director} director","anchoring":"contains"}],"consequence":{"params":{"restrictSearchableAttributes":["title","book_id"],"automaticFacetFilters":[{"facet":"director"}],"query":{"edits":[{"type":"remove","delete":"director"}]}}}}""", it.body)
      },
    )
  }

  @Test
  fun `harry potter4`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "harry-potter-rule",
          rule = Rule(
            objectID = "harry-potter-rule",
            conditions = listOf(
              Condition(
                pattern = "harry potter",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              userData = buildJsonObject {
                put(
                  "promo_content",
                  JsonPrimitive("20% OFF on all Harry Potter books!"),
                )
              },
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/harry-potter-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"harry-potter-rule","conditions":[{"pattern":"harry potter","anchoring":"contains"}],"consequence":{"userData":{"promo_content":"20% OFF on all Harry Potter books!"}}}""", it.body)
      },
    )
  }

  @Test
  fun `merchandising empty query5`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "clearance-category-filter",
          rule = Rule(
            objectID = "clearance-category-filter",
            conditions = listOf(
              Condition(
                pattern = "",
                anchoring = Anchoring.entries.first { it.value == "is" },
                context = "landing",
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                optionalFilters = OptionalFilters.of("clearance:true"),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/clearance-category-filter".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"clearance-category-filter","conditions":[{"pattern":"","anchoring":"is","context":"landing"}],"consequence":{"params":{"optionalFilters":"clearance:true"}}}""", it.body)
      },
    )
  }

  @Test
  fun `redirect6`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "redirect-help-rule",
          rule = Rule(
            objectID = "redirect-help-rule",
            conditions = listOf(
              Condition(
                pattern = "help",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              userData = buildJsonObject {
                put(
                  "redirect",
                  JsonPrimitive("https://www.algolia.com/support"),
                )
              },
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/redirect-help-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"redirect-help-rule","conditions":[{"pattern":"help","anchoring":"contains"}],"consequence":{"userData":{"redirect":"https://www.algolia.com/support"}}}""", it.body)
      },
    )
  }

  @Test
  fun `promote some results over others7`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "tomato-fruit",
          rule = Rule(
            objectID = "tomato-fruit",
            conditions = listOf(
              Condition(
                pattern = "tomato",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                optionalFilters = OptionalFilters.of("food_group:fruit"),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/tomato-fruit".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"tomato-fruit","conditions":[{"pattern":"tomato","anchoring":"contains"}],"consequence":{"params":{"optionalFilters":"food_group:fruit"}}}""", it.body)
      },
    )
  }

  @Test
  fun `promote several hits8`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "Promote-Apple-Newest",
          rule = Rule(
            objectID = "Promote-Apple-Newest",
            conditions = listOf(
              Condition(
                pattern = "apple",
                anchoring = Anchoring.entries.first { it.value == "is" },
              ),
            ),
            consequence = Consequence(
              promote = listOf(
                PromoteObjectIDs(
                  objectIDs = listOf("iPhone-12345", "watch-123"),
                  position = 0,
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/Promote-Apple-Newest".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"Promote-Apple-Newest","conditions":[{"pattern":"apple","anchoring":"is"}],"consequence":{"promote":[{"objectIDs":["iPhone-12345","watch-123"],"position":0}]}}""", it.body)
      },
    )
  }

  @Test
  fun `promote newest release9`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "Promote-iPhone-X",
          rule = Rule(
            objectID = "Promote-iPhone-X",
            conditions = listOf(
              Condition(
                pattern = "iPhone",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              promote = listOf(
                PromoteObjectID(
                  objectID = "iPhone-12345",
                  position = 0,
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/Promote-iPhone-X".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"Promote-iPhone-X","conditions":[{"pattern":"iPhone","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"iPhone-12345","position":0}]}}""", it.body)
      },
    )
  }

  @Test
  fun `promote single item10`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "promote-harry-potter-box-set",
          rule = Rule(
            objectID = "promote-harry-potter-box-set",
            conditions = listOf(
              Condition(
                pattern = "Harry Potter",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              promote = listOf(
                PromoteObjectID(
                  objectID = "HP-12345",
                  position = 0,
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/promote-harry-potter-box-set".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"promote-harry-potter-box-set","conditions":[{"pattern":"Harry Potter","anchoring":"contains"}],"consequence":{"promote":[{"objectID":"HP-12345","position":0}]}}""", it.body)
      },
    )
  }

  @Test
  fun `limit search results11`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "article-rule",
          rule = Rule(
            objectID = "article-rule",
            conditions = listOf(
              Condition(
                pattern = "article",
                anchoring = Anchoring.entries.first { it.value == "startsWith" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                query = ConsequenceQueryObject(
                  edits = listOf(
                    Edit(
                      type = EditType.entries.first { it.value == "remove" },
                      delete = "article",
                    ),
                  ),
                ),
                restrictSearchableAttributes = listOf("title", "book_id"),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/article-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"article-rule","conditions":[{"pattern":"article","anchoring":"startsWith"}],"consequence":{"params":{"query":{"edits":[{"type":"remove","delete":"article"}]},"restrictSearchableAttributes":["title","book_id"]}}}""", it.body)
      },
    )
  }

  @Test
  fun `query match12`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "tagged-brand-rule",
          rule = Rule(
            conditions = listOf(
              Condition(
                pattern = "brand: {facet:brand}",
                anchoring = Anchoring.entries.first { it.value == "contains" },
                alternatives = false,
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                automaticFacetFilters = AutomaticFacetFilters.ofListOfAutomaticFacetFilter(
                  listOf(
                    AutomaticFacetFilter(
                      facet = "brand",
                    ),
                  ),
                ),
                query = ConsequenceQueryObject(
                  remove = listOf("brand:", "{facet:brand}"),
                ),
              ),
            ),
            description = "filter on brand: {brand}",
            objectID = "tagged-brand-rule",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/tagged-brand-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"conditions":[{"pattern":"brand: {facet:brand}","anchoring":"contains","alternatives":false}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"brand"}],"query":{"remove":["brand:","{facet:brand}"]}}},"description":"filter on brand: {brand}","objectID":"tagged-brand-rule"}""", it.body)
      },
    )
  }

  @Test
  fun `dynamic filtering13`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "color-facets",
          rule = Rule(
            objectID = "color-facets",
            conditions = listOf(
              Condition(
                pattern = "{facet:color}",
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                automaticFacetFilters = AutomaticFacetFilters.ofListOfAutomaticFacetFilter(
                  listOf(
                    AutomaticFacetFilter(
                      facet = "color",
                    ),
                  ),
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/color-facets".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"color-facets","conditions":[{"pattern":"{facet:color}"}],"consequence":{"params":{"automaticFacetFilters":[{"facet":"color"}]}}}""", it.body)
      },
    )
  }

  @Test
  fun `hide hits14`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "hide-12345",
          rule = Rule(
            objectID = "hide-12345",
            conditions = listOf(
              Condition(
                pattern = "cheap",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              hide = listOf(
                ConsequenceHide(
                  objectID = "to-hide-12345",
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/hide-12345".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"hide-12345","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"hide":[{"objectID":"to-hide-12345"}]}}""", it.body)
      },
    )
  }

  @Test
  fun `one rule per facet15`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "red-color",
          rule = Rule(
            objectID = "red-color",
            conditions = listOf(
              Condition(
                pattern = "red",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                query = ConsequenceQueryObject(
                  remove = listOf("red"),
                ),
                filters = "color:red",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/red-color".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"red-color","conditions":[{"pattern":"red","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["red"]},"filters":"color:red"}}}""", it.body)
      },
    )
  }

  @Test
  fun `numerical filters16`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "cheap",
          rule = Rule(
            objectID = "cheap",
            conditions = listOf(
              Condition(
                pattern = "cheap",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                query = ConsequenceQueryObject(
                  remove = listOf("cheap"),
                ),
                filters = "price < 10",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/cheap".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 10"}}}""", it.body)
      },
    )
  }

  @Test
  fun `negative filters17`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "gluten-free-rule",
          rule = Rule(
            objectID = "gluten-free-rule",
            conditions = listOf(
              Condition(
                pattern = "gluten-free",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                filters = "NOT allergens:gluten",
                query = ConsequenceQueryObject(
                  edits = listOf(
                    Edit(
                      type = EditType.entries.first { it.value == "remove" },
                      delete = "gluten-free",
                    ),
                  ),
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/gluten-free-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"gluten-free-rule","conditions":[{"pattern":"gluten-free","anchoring":"contains"}],"consequence":{"params":{"filters":"NOT allergens:gluten","query":{"edits":[{"type":"remove","delete":"gluten-free"}]}}}}""", it.body)
      },
    )
  }

  @Test
  fun `positive filters18`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "diet-rule",
          rule = Rule(
            objectID = "diet-rule",
            conditions = listOf(
              Condition(
                pattern = "diet",
                anchoring = Anchoring.entries.first { it.value == "contains" },
              ),
            ),
            consequence = Consequence(
              params = ConsequenceParams(
                filters = "'low-carb' OR 'low-fat'",
                query = ConsequenceQueryObject(
                  edits = listOf(
                    Edit(
                      type = EditType.entries.first { it.value == "remove" },
                      delete = "diet",
                    ),
                  ),
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/diet-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"diet-rule","conditions":[{"pattern":"diet","anchoring":"contains"}],"consequence":{"params":{"filters":"'low-carb' OR 'low-fat'","query":{"edits":[{"type":"remove","delete":"diet"}]}}}}""", it.body)
      },
    )
  }

  @Test
  fun `conditionless19`() = runTest {
    client.runTest(
      call = {
        saveRule(
          indexName = "indexName",
          objectID = "diet-rule",
          rule = Rule(
            objectID = "diet-rule",
            consequence = Consequence(
              params = ConsequenceParams(
                filters = "'low-carb' OR 'low-fat'",
                query = ConsequenceQueryObject(
                  edits = listOf(
                    Edit(
                      type = EditType.entries.first { it.value == "remove" },
                      delete = "diet",
                    ),
                  ),
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/rules/diet-rule".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"objectID":"diet-rule","consequence":{"params":{"filters":"'low-carb' OR 'low-fat'","query":{"edits":[{"type":"remove","delete":"diet"}]}}}}""", it.body)
      },
    )
  }

  // saveRules

  @Test
  fun `saveRules with minimal parameters`() = runTest {
    client.runTest(
      call = {
        saveRules(
          indexName = "<YOUR_INDEX_NAME>",
          rules = listOf(
            Rule(
              objectID = "a-rule-id",
              conditions = listOf(
                Condition(
                  pattern = "smartphone",
                  anchoring = Anchoring.entries.first { it.value == "contains" },
                ),
              ),
              consequence = Consequence(
                params = ConsequenceParams(
                  filters = "brand:apple",
                ),
              ),
            ),
            Rule(
              objectID = "a-second-rule-id",
              conditions = listOf(
                Condition(
                  pattern = "apple",
                  anchoring = Anchoring.entries.first { it.value == "contains" },
                ),
              ),
              consequence = Consequence(
                params = ConsequenceParams(
                  filters = "brand:samsung",
                ),
              ),
            ),
          ),
          forwardToReplicas = false,
          clearExistingRules = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"forwardToReplicas":"false","clearExistingRules":"true"}""", it.url.encodedParameters)
        assertJsonBody("""[{"objectID":"a-rule-id","conditions":[{"pattern":"smartphone","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:apple"}}},{"objectID":"a-second-rule-id","conditions":[{"pattern":"apple","anchoring":"contains"}],"consequence":{"params":{"filters":"brand:samsung"}}}]""", it.body)
      },
    )
  }

  @Test
  fun `saveRules with all parameters1`() = runTest {
    client.runTest(
      call = {
        saveRules(
          indexName = "<YOUR_INDEX_NAME>",
          rules = listOf(
            Rule(
              objectID = "id1",
              conditions = listOf(
                Condition(
                  pattern = "apple",
                  anchoring = Anchoring.entries.first { it.value == "contains" },
                  alternatives = false,
                  context = "search",
                ),
              ),
              consequence = Consequence(
                params = ConsequenceParams(
                  filters = "brand:apple",
                  query = ConsequenceQueryObject(
                    remove = listOf("algolia"),
                    edits = listOf(
                      Edit(
                        type = EditType.entries.first { it.value == "remove" },
                        delete = "abc",
                        insert = "cde",
                      ),
                      Edit(
                        type = EditType.entries.first { it.value == "replace" },
                        delete = "abc",
                        insert = "cde",
                      ),
                    ),
                  ),
                ),
                hide = listOf(
                  ConsequenceHide(
                    objectID = "321",
                  ),
                ),
                filterPromotes = false,
                userData = buildJsonObject {
                  put(
                    "algolia",
                    JsonPrimitive("aloglia"),
                  )
                },
                promote = listOf(
                  PromoteObjectID(
                    objectID = "abc",
                    position = 3,
                  ),
                  PromoteObjectIDs(
                    objectIDs = listOf("abc", "def"),
                    position = 1,
                  ),
                ),
              ),
              description = "test",
              enabled = true,
              validity = listOf(
                TimeRange(
                  from = 1656670273L,
                  until = 1656670277L,
                ),
              ),
            ),
          ),
          forwardToReplicas = true,
          clearExistingRules = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true","clearExistingRules":"true"}""", it.url.encodedParameters)
        assertJsonBody("""[{"objectID":"id1","conditions":[{"pattern":"apple","anchoring":"contains","alternatives":false,"context":"search"}],"consequence":{"params":{"filters":"brand:apple","query":{"remove":["algolia"],"edits":[{"type":"remove","delete":"abc","insert":"cde"},{"type":"replace","delete":"abc","insert":"cde"}]}},"hide":[{"objectID":"321"}],"filterPromotes":false,"userData":{"algolia":"aloglia"},"promote":[{"objectID":"abc","position":3},{"objectIDs":["abc","def"],"position":1}]},"description":"test","enabled":true,"validity":[{"from":1656670273,"until":1656670277}]}]""", it.body)
      },
    )
  }

  @Test
  fun `dynamic filtering2`() = runTest {
    client.runTest(
      call = {
        saveRules(
          indexName = "<YOUR_INDEX_NAME>",
          rules = listOf(
            Rule(
              objectID = "toaster",
              conditions = listOf(
                Condition(
                  pattern = "toaster",
                  anchoring = Anchoring.entries.first { it.value == "contains" },
                ),
              ),
              consequence = Consequence(
                params = ConsequenceParams(
                  query = ConsequenceQueryObject(
                    remove = listOf("toaster"),
                  ),
                  filters = "product_type:toaster",
                ),
              ),
            ),
            Rule(
              objectID = "cheap",
              conditions = listOf(
                Condition(
                  pattern = "cheap",
                  anchoring = Anchoring.entries.first { it.value == "contains" },
                ),
              ),
              consequence = Consequence(
                params = ConsequenceParams(
                  query = ConsequenceQueryObject(
                    remove = listOf("cheap"),
                  ),
                  filters = "price < 15",
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""[{"objectID":"toaster","conditions":[{"pattern":"toaster","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["toaster"]},"filters":"product_type:toaster"}}},{"objectID":"cheap","conditions":[{"pattern":"cheap","anchoring":"contains"}],"consequence":{"params":{"query":{"remove":["cheap"]},"filters":"price < 15"}}}]""", it.body)
      },
    )
  }

  @Test
  fun `enhance search results3`() = runTest {
    client.runTest(
      call = {
        saveRules(
          indexName = "<YOUR_INDEX_NAME>",
          rules = listOf(
            Rule(
              objectID = "country",
              conditions = listOf(
                Condition(
                  pattern = "{facet:country}",
                  anchoring = Anchoring.entries.first { it.value == "contains" },
                ),
              ),
              consequence = Consequence(
                params = ConsequenceParams(
                  aroundLatLngViaIP = false,
                ),
              ),
            ),
            Rule(
              objectID = "city",
              conditions = listOf(
                Condition(
                  pattern = "{facet:city}",
                  anchoring = Anchoring.entries.first { it.value == "contains" },
                ),
              ),
              consequence = Consequence(
                params = ConsequenceParams(
                  aroundLatLngViaIP = false,
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""[{"objectID":"country","conditions":[{"pattern":"{facet:country}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}},{"objectID":"city","conditions":[{"pattern":"{facet:city}","anchoring":"contains"}],"consequence":{"params":{"aroundLatLngViaIP":false}}}]""", it.body)
      },
    )
  }

  // saveSynonym

  @Test
  fun `saveSynonym`() = runTest {
    client.runTest(
      call = {
        saveSynonym(
          indexName = "indexName",
          objectID = "id1",
          synonymHit = SynonymHit(
            objectID = "id1",
            type = SynonymType.entries.first { it.value == "synonym" },
            synonyms = listOf("car", "vehicule", "auto"),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/synonyms/id1".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]}""", it.body)
      },
    )
  }

  // saveSynonyms

  @Test
  fun `saveSynonyms`() = runTest {
    client.runTest(
      call = {
        saveSynonyms(
          indexName = "<YOUR_INDEX_NAME>",
          synonymHit = listOf(
            SynonymHit(
              objectID = "id1",
              type = SynonymType.entries.first { it.value == "synonym" },
              synonyms = listOf("car", "vehicule", "auto"),
            ),
            SynonymHit(
              objectID = "id2",
              type = SynonymType.entries.first { it.value == "onewaysynonym" },
              input = "iphone",
              synonyms = listOf("ephone", "aphone", "yphone"),
            ),
          ),
          forwardToReplicas = true,
          replaceExistingSynonyms = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/synonyms/batch".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true","replaceExistingSynonyms":"true"}""", it.url.encodedParameters)
        assertJsonBody("""[{"objectID":"id1","type":"synonym","synonyms":["car","vehicule","auto"]},{"objectID":"id2","type":"onewaysynonym","input":"iphone","synonyms":["ephone","aphone","yphone"]}]""", it.body)
      },
    )
  }

  // search

  @Test
  fun `withHitsPerPage`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "<YOUR_INDEX_NAME>",
                query = "<YOUR_QUERY>",
                hitsPerPage = 50,
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","hitsPerPage":50}]}""", it.body)
      },
    )
  }

  @Test
  fun `filterOnly1`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "<YOUR_INDEX_NAME>",
                query = "<YOUR_QUERY>",
                filters = "actor:Scarlett Johansson",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Scarlett Johansson"}]}""", it.body)
      },
    )
  }

  @Test
  fun `filterOr2`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "<YOUR_INDEX_NAME>",
                query = "<YOUR_QUERY>",
                filters = "actor:Tom Cruise OR actor:Scarlett Johansson",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Tom Cruise OR actor:Scarlett Johansson"}]}""", it.body)
      },
    )
  }

  @Test
  fun `filterNot3`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "<YOUR_INDEX_NAME>",
                query = "<YOUR_QUERY>",
                filters = "NOT actor:Nicolas Cage",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"NOT actor:Nicolas Cage"}]}""", it.body)
      },
    )
  }

  @Test
  fun `search for a single hits request with minimal parameters4`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "cts_e2e_search_empty_index",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"cts_e2e_search_empty_index"}]}""", it.body)
      },
    )
  }

  @Test
  fun `search with highlight and snippet results5`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "cts_e2e_highlight_snippet_results",
                query = "vim",
                attributesToSnippet = listOf("*:20"),
                attributesToHighlight = listOf("*"),
                attributesToRetrieve = listOf("*"),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"cts_e2e_highlight_snippet_results","query":"vim","attributesToSnippet":["*:20"],"attributesToHighlight":["*"],"attributesToRetrieve":["*"]}]}""", it.body)
      },
    )
  }

  @Test
  fun `retrieveFacets6`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "<YOUR_INDEX_NAME>",
                query = "<YOUR_QUERY>",
                facets = listOf("author", "genre"),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["author","genre"]}]}""", it.body)
      },
    )
  }

  @Test
  fun `retrieveFacetsWildcard7`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "<YOUR_INDEX_NAME>",
                query = "<YOUR_QUERY>",
                facets = listOf("*"),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["*"]}]}""", it.body)
      },
    )
  }

  @Test
  fun `search for a single facet request with minimal parameters8`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForFacets(
                indexName = "cts_e2e_search_facet",
                type = SearchTypeFacet.entries.first { it.value == "facet" },
                facet = "editor",
              ),
            ),
            strategy = SearchStrategy.entries.first { it.value == "stopIfEnoughMatches" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"cts_e2e_search_facet","type":"facet","facet":"editor"}],"strategy":"stopIfEnoughMatches"}""", it.body)
      },
    )
  }

  @Test
  fun `search for a single hits request with all parameters9`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "theIndexName",
                query = "myQuery",
                hitsPerPage = 50,
                type = SearchTypeDefault.entries.first { it.value == "default" },
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}""", it.body)
      },
    )
  }

  @Test
  fun `search for a single facet request with all parameters10`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForFacets(
                indexName = "theIndexName",
                type = SearchTypeFacet.entries.first { it.value == "facet" },
                facet = "theFacet",
                facetQuery = "theFacetQuery",
                query = "theQuery",
                maxFacetHits = 50,
              ),
            ),
            strategy = SearchStrategy.entries.first { it.value == "stopIfEnoughMatches" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}""", it.body)
      },
    )
  }

  @Test
  fun `search for multiple mixed requests in multiple indices with minimal parameters11`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "theIndexName",
              ),
              SearchForFacets(
                indexName = "theIndexName2",
                type = SearchTypeFacet.entries.first { it.value == "facet" },
                facet = "theFacet",
              ),
              SearchForHits(
                indexName = "theIndexName",
                type = SearchTypeDefault.entries.first { it.value == "default" },
              ),
            ),
            strategy = SearchStrategy.entries.first { it.value == "stopIfEnoughMatches" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}""", it.body)
      },
    )
  }

  @Test
  fun `search for multiple mixed requests in multiple indices with all parameters12`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForFacets(
                indexName = "theIndexName",
                type = SearchTypeFacet.entries.first { it.value == "facet" },
                facet = "theFacet",
                facetQuery = "theFacetQuery",
                query = "theQuery",
                maxFacetHits = 50,
              ),
              SearchForHits(
                indexName = "theIndexName",
                query = "myQuery",
                hitsPerPage = 50,
                type = SearchTypeDefault.entries.first { it.value == "default" },
              ),
            ),
            strategy = SearchStrategy.entries.first { it.value == "stopIfEnoughMatches" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}""", it.body)
      },
    )
  }

  @Test
  fun `search filters accept all of the possible shapes13`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "theIndexName",
                facetFilters = FacetFilters.of("mySearch:filters"),
                reRankingApplyFilter = ReRankingApplyFilter.of("mySearch:filters"),
                tagFilters = TagFilters.of("mySearch:filters"),
                numericFilters = NumericFilters.of("mySearch:filters"),
                optionalFilters = OptionalFilters.of("mySearch:filters"),
              ),
              SearchForHits(
                indexName = "theIndexName",
                facetFilters = FacetFilters.of(listOf(FacetFilters.of("mySearch:filters"), FacetFilters.of(listOf(FacetFilters.of("mySearch:filters"), FacetFilters.of(listOf(FacetFilters.of("mySearch:filters"))))))),
                reRankingApplyFilter = ReRankingApplyFilter.of(listOf(ReRankingApplyFilter.of("mySearch:filters"), ReRankingApplyFilter.of(listOf(ReRankingApplyFilter.of("mySearch:filters"))))),
                tagFilters = TagFilters.of(listOf(TagFilters.of("mySearch:filters"), TagFilters.of(listOf(TagFilters.of("mySearch:filters"))))),
                numericFilters = NumericFilters.of(listOf(NumericFilters.of("mySearch:filters"), NumericFilters.of(listOf(NumericFilters.of("mySearch:filters"))))),
                optionalFilters = OptionalFilters.of(listOf(OptionalFilters.of("mySearch:filters"), OptionalFilters.of(listOf(OptionalFilters.of("mySearch:filters"))))),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters",["mySearch:filters"]]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}""", it.body)
      },
    )
  }

  @Test
  fun `search filters end to end14`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "cts_e2e_search_facet",
                filters = "editor:'visual studio' OR editor:neovim",
              ),
              SearchForHits(
                indexName = "cts_e2e_search_facet",
                facetFilters = FacetFilters.of(listOf(FacetFilters.of("editor:'visual studio'"), FacetFilters.of("editor:neovim"))),
              ),
              SearchForHits(
                indexName = "cts_e2e_search_facet",
                facetFilters = FacetFilters.of(listOf(FacetFilters.of("editor:'visual studio'"), FacetFilters.of(listOf(FacetFilters.of("editor:neovim"))))),
              ),
              SearchForHits(
                indexName = "cts_e2e_search_facet",
                facetFilters = FacetFilters.of(listOf(FacetFilters.of("editor:'visual studio'"), FacetFilters.of(listOf(FacetFilters.of("editor:neovim"), FacetFilters.of(listOf(FacetFilters.of("editor:goland"))))))),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"indexName":"cts_e2e_search_facet","filters":"editor:'visual studio' OR editor:neovim"},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'","editor:neovim"]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim"]]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim",["editor:goland"]]]}]}""", it.body)
      },
    )
  }

  @Test
  fun `search with all search parameters15`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                advancedSyntax = true,
                advancedSyntaxFeatures = listOf(AdvancedSyntaxFeatures.entries.first { it.value == "exactPhrase" }),
                allowTyposOnNumericTokens = true,
                alternativesAsExact = listOf(AlternativesAsExact.entries.first { it.value == "multiWordsSynonym" }),
                analytics = true,
                analyticsTags = listOf(""),
                aroundLatLng = "",
                aroundLatLngViaIP = true,
                aroundPrecision = AroundPrecision.of(0),
                aroundRadius = AroundRadiusAll.entries.first { it.value == "all" },
                attributeCriteriaComputedByMinProximity = true,
                attributesToHighlight = listOf(""),
                attributesToRetrieve = listOf(""),
                attributesToSnippet = listOf(""),
                clickAnalytics = true,
                decompoundQuery = true,
                disableExactOnAttributes = listOf(""),
                disableTypoToleranceOnAttributes = listOf(""),
                distinct = Distinct.of(0),
                enableABTest = true,
                enablePersonalization = true,
                enableReRanking = true,
                enableRules = true,
                exactOnSingleWordQuery = ExactOnSingleWordQuery.entries.first { it.value == "attribute" },
                facetFilters = FacetFilters.of(listOf(FacetFilters.of(""))),
                facetingAfterDistinct = true,
                facets = listOf(""),
                filters = "",
                getRankingInfo = true,
                highlightPostTag = "",
                highlightPreTag = "",
                hitsPerPage = 1,
                ignorePlurals = IgnorePlurals.of(false),
                indexName = "theIndexName",
                insideBoundingBox = InsideBoundingBox.of(listOf(listOf(47.3165, 4.9665, 47.3424, 5.0201), listOf(40.9234, 2.1185, 38.643, 1.9916))),
                insidePolygon = listOf(listOf(47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9), listOf(40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104)),
                length = 1,
                maxValuesPerFacet = 0,
                minProximity = 1,
                minWordSizefor1Typo = 0,
                minWordSizefor2Typos = 0,
                minimumAroundRadius = 1,
                naturalLanguages = listOf(SupportedLanguage.entries.first { it.value == "fr" }),
                numericFilters = NumericFilters.of(listOf(NumericFilters.of(""))),
                offset = 0,
                optionalFilters = OptionalFilters.of(listOf(OptionalFilters.of(""))),
                optionalWords = OptionalWords.of(listOf("")),
                page = 0,
                percentileComputation = true,
                personalizationImpact = 0,
                query = "",
                queryLanguages = listOf(SupportedLanguage.entries.first { it.value == "fr" }),
                queryType = QueryType.entries.first { it.value == "prefixAll" },
                ranking = listOf(""),
                reRankingApplyFilter = ReRankingApplyFilter.of(listOf(ReRankingApplyFilter.of(""))),
                relevancyStrictness = 0,
                removeStopWords = RemoveStopWords.of(true),
                removeWordsIfNoResults = RemoveWordsIfNoResults.entries.first { it.value == "allOptional" },
                renderingContent = RenderingContent(
                  facetOrdering = FacetOrdering(
                    facets = Facets(
                      order = listOf("a", "b"),
                    ),
                    values = mapOf(
                      "a" to Value(
                        order = listOf("b"),
                        sortRemainingBy = SortRemainingBy.entries.first { it.value == "count" },
                      ),
                    ),
                  ),
                ),
                replaceSynonymsInHighlight = true,
                responseFields = listOf(""),
                restrictHighlightAndSnippetArrays = true,
                restrictSearchableAttributes = listOf(""),
                ruleContexts = listOf(""),
                similarQuery = "",
                snippetEllipsisText = "",
                sortFacetValuesBy = "",
                sumOrFiltersScores = true,
                synonyms = true,
                tagFilters = TagFilters.of(listOf(TagFilters.of(""))),
                type = SearchTypeDefault.entries.first { it.value == "default" },
                typoTolerance = TypoToleranceEnum.entries.first { it.value == "min" },
                userToken = "",
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/*/queries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":1,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"length":1,"maxValuesPerFacet":0,"minProximity":1,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":1,"naturalLanguages":["fr"],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":["fr"],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}""", it.body)
      },
    )
  }

  // searchDictionaryEntries

  @Test
  fun `get searchDictionaryEntries results with minimal parameters`() = runTest {
    client.runTest(
      call = {
        searchDictionaryEntries(
          dictionaryName = DictionaryType.entries.first { it.value == "stopwords" },
          searchDictionaryEntriesParams = SearchDictionaryEntriesParams(
            query = "about",
          ),
        )
      },
      intercept = {
        assertEquals("/1/dictionaries/stopwords/search".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"about"}""", it.body)
      },
    )
  }

  @Test
  fun `get searchDictionaryEntries results with all parameters1`() = runTest {
    client.runTest(
      call = {
        searchDictionaryEntries(
          dictionaryName = DictionaryType.entries.first { it.value == "compounds" },
          searchDictionaryEntriesParams = SearchDictionaryEntriesParams(
            query = "foo",
            page = 4,
            hitsPerPage = 2,
            language = SupportedLanguage.entries.first { it.value == "fr" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/dictionaries/compounds/search".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"foo","page":4,"hitsPerPage":2,"language":"fr"}""", it.body)
      },
    )
  }

  // searchForFacetValues

  @Test
  fun `get searchForFacetValues results with minimal parameters`() = runTest {
    client.runTest(
      call = {
        searchForFacetValues(
          indexName = "indexName",
          facetName = "facetName",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/facets/facetName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `get searchForFacetValues results with all parameters1`() = runTest {
    client.runTest(
      call = {
        searchForFacetValues(
          indexName = "indexName",
          facetName = "facetName",
          searchForFacetValuesRequest = SearchForFacetValuesRequest(
            params = "query=foo&facetFilters=['bar']",
            facetQuery = "foo",
            maxFacetHits = 42,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/facets/facetName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"params":"query=foo&facetFilters=['bar']","facetQuery":"foo","maxFacetHits":42}""", it.body)
      },
    )
  }

  @Test
  fun `facetName and facetQuery2`() = runTest {
    client.runTest(
      call = {
        searchForFacetValues(
          indexName = "indexName",
          facetName = "author",
          searchForFacetValuesRequest = SearchForFacetValuesRequest(
            facetQuery = "stephen king",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/facets/author/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"facetQuery":"stephen king"}""", it.body)
      },
    )
  }

  // searchRules

  @Test
  fun `searchRules`() = runTest {
    client.runTest(
      call = {
        searchRules(
          indexName = "cts_e2e_browse",
          searchRulesParams = SearchRulesParams(
            query = "zorro",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/cts_e2e_browse/rules/search".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"zorro"}""", it.body)
      },
    )
  }

  // searchSingleIndex

  @Test
  fun `search with minimal parameters`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `search with special characters in indexName1`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "cts_e2e_space in index",
        )
      },
      intercept = {
        assertEquals("/1/indexes/cts_e2e_space%20in%20index/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `search with searchParams2`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "myQuery",
            facetFilters = FacetFilters.of(listOf(FacetFilters.of("tags:algolia"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"myQuery","facetFilters":["tags:algolia"]}""", it.body)
      },
    )
  }

  @Test
  fun `single search retrieve snippets3`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "cts_e2e_browse",
          searchParams = SearchParamsObject(
            query = "batman mask of the phantasm",
            attributesToRetrieve = listOf("*"),
            attributesToSnippet = listOf("*:20"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/cts_e2e_browse/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"batman mask of the phantasm","attributesToRetrieve":["*"],"attributesToSnippet":["*:20"]}""", it.body)
      },
    )
  }

  @Test
  fun `query4`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "phone",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"phone"}""", it.body)
      },
    )
  }

  @Test
  fun `filters5`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "country:US AND price.gross < 2.0",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"country:US AND price.gross < 2.0"}""", it.body)
      },
    )
  }

  @Test
  fun `distinct6`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            distinct = Distinct.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"distinct":true}""", it.body)
      },
    )
  }

  @Test
  fun `filtersNumeric7`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "price < 10",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"price < 10"}""", it.body)
      },
    )
  }

  @Test
  fun `filtersTimestamp8`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "NOT date_timestamp:1514764800 TO 1546300799",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"NOT date_timestamp:1514764800 TO 1546300799"}""", it.body)
      },
    )
  }

  @Test
  fun `filtersSumOrFiltersScoresFalse9`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
            sumOrFiltersScores = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":false}""", it.body)
      },
    )
  }

  @Test
  fun `filtersSumOrFiltersScoresTrue10`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
            sumOrFiltersScores = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)","sumOrFiltersScores":true}""", it.body)
      },
    )
  }

  @Test
  fun `filtersStephenKing11`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "author:\"Stephen King\"",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"author:\"Stephen King\""}""", it.body)
      },
    )
  }

  @Test
  fun `filtersNotTags12`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "NOT _tags:non-fiction",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"NOT _tags:non-fiction"}""", it.body)
      },
    )
  }

  @Test
  fun `facetFiltersList13`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            facetFilters = FacetFilters.of(listOf(FacetFilters.of("publisher:Penguin"), FacetFilters.of(listOf(FacetFilters.of("author:Stephen King"), FacetFilters.of("genre:Horror"))))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"facetFilters":["publisher:Penguin",["author:Stephen King","genre:Horror"]]}""", it.body)
      },
    )
  }

  @Test
  fun `facetFiltersBook14`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            facetFilters = FacetFilters.of(listOf(FacetFilters.of("category:Book"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","facetFilters":["category:Book"]}""", it.body)
      },
    )
  }

  @Test
  fun `facetFiltersAND15`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            facetFilters = FacetFilters.of(listOf(FacetFilters.of("category:Book"), FacetFilters.of("author:John Doe"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","facetFilters":["category:Book","author:John Doe"]}""", it.body)
      },
    )
  }

  @Test
  fun `facetFiltersOR16`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            facetFilters = FacetFilters.of(listOf(FacetFilters.of(listOf(FacetFilters.of("category:Book"), FacetFilters.of("author:John Doe"))))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","facetFilters":[["category:Book","author:John Doe"]]}""", it.body)
      },
    )
  }

  @Test
  fun `facetFiltersCombined17`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            facetFilters = FacetFilters.of(listOf(FacetFilters.of("author:John Doe"), FacetFilters.of(listOf(FacetFilters.of("category:Book"), FacetFilters.of("category:Movie"))))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","facetFilters":["author:John Doe",["category:Book","category:Movie"]]}""", it.body)
      },
    )
  }

  @Test
  fun `facetFiltersNeg18`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            facetFilters = FacetFilters.of("category:-Ebook"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"facetFilters":"category:-Ebook"}""", it.body)
      },
    )
  }

  @Test
  fun `filtersAndFacetFilters19`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "(author:\"Stephen King\" OR genre:\"Horror\")",
            facetFilters = FacetFilters.of(listOf(FacetFilters.of("publisher:Penguin"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"(author:\"Stephen King\" OR genre:\"Horror\")","facetFilters":["publisher:Penguin"]}""", it.body)
      },
    )
  }

  @Test
  fun `facet author genre20`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            facets = listOf("author", "genre"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"facets":["author","genre"]}""", it.body)
      },
    )
  }

  @Test
  fun `facet wildcard21`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            facets = listOf("*"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"facets":["*"]}""", it.body)
      },
    )
  }

  @Test
  fun `maxValuesPerFacet22`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            maxValuesPerFacet = 1000,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"maxValuesPerFacet":1000}""", it.body)
      },
    )
  }

  @Test
  fun `aroundLatLng23`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            aroundLatLng = "40.71, -74.01",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"aroundLatLng":"40.71, -74.01"}""", it.body)
      },
    )
  }

  @Test
  fun `aroundLatLngViaIP24`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            aroundLatLngViaIP = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"aroundLatLngViaIP":true}""", it.body)
      },
    )
  }

  @Test
  fun `aroundRadius25`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            aroundLatLng = "40.71, -74.01",
            aroundRadius = AroundRadius.of(1000000),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"aroundLatLng":"40.71, -74.01","aroundRadius":1000000}""", it.body)
      },
    )
  }

  @Test
  fun `insideBoundingBox26`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            insideBoundingBox = InsideBoundingBox.of(listOf(listOf(49.067996905313834, 65.73828125, 25.905859247243498, 128.8046875))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"insideBoundingBox":[[49.067996905313834,65.73828125,25.905859247243498,128.8046875]]}""", it.body)
      },
    )
  }

  @Test
  fun `insidePolygon27`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            insidePolygon = listOf(listOf(42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005, 31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545, -117.54828125)),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}""", it.body)
      },
    )
  }

  @Test
  fun `insidePolygon28`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            insidePolygon = listOf(listOf(42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005, 31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545, -117.54828125)),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"insidePolygon":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}""", it.body)
      },
    )
  }

  @Test
  fun `optionalFilters29`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            optionalFilters = OptionalFilters.of(listOf(OptionalFilters.of("can_deliver_quickly:true"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"optionalFilters":["can_deliver_quickly:true"]}""", it.body)
      },
    )
  }

  @Test
  fun `optionalFiltersMany30`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            optionalFilters = OptionalFilters.of(listOf(OptionalFilters.of("brand:Apple<score=3>"), OptionalFilters.of("brand:Samsung<score=2>"), OptionalFilters.of("brand:-Huawei"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"optionalFilters":["brand:Apple<score=3>","brand:Samsung<score=2>","brand:-Huawei"]}""", it.body)
      },
    )
  }

  @Test
  fun `optionalFiltersSimple31`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            optionalFilters = OptionalFilters.of(listOf(OptionalFilters.of("brand:Apple<score=2>"), OptionalFilters.of("type:tablet"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"optionalFilters":["brand:Apple<score=2>","type:tablet"]}""", it.body)
      },
    )
  }

  @Test
  fun `restrictSearchableAttributes32`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            restrictSearchableAttributes = listOf("title_fr"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"restrictSearchableAttributes":["title_fr"]}""", it.body)
      },
    )
  }

  @Test
  fun `getRankingInfo33`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            getRankingInfo = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"getRankingInfo":true}""", it.body)
      },
    )
  }

  @Test
  fun `clickAnalytics34`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            clickAnalytics = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"clickAnalytics":true}""", it.body)
      },
    )
  }

  @Test
  fun `clickAnalyticsUserToken35`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            clickAnalytics = true,
            userToken = "user-1",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"clickAnalytics":true,"userToken":"user-1"}""", it.body)
      },
    )
  }

  @Test
  fun `enablePersonalization36`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            enablePersonalization = true,
            userToken = "user-1",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"enablePersonalization":true,"userToken":"user-1"}""", it.body)
      },
    )
  }

  @Test
  fun `userToken37`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            userToken = "user-1",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"userToken":"user-1"}""", it.body)
      },
    )
  }

  @Test
  fun `userToken123438`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            userToken = "user-1234",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","userToken":"user-1234"}""", it.body)
      },
    )
  }

  @Test
  fun `analyticsTag39`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            analyticsTags = listOf("YOUR_ANALYTICS_TAG"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"analyticsTags":["YOUR_ANALYTICS_TAG"]}""", it.body)
      },
    )
  }

  @Test
  fun `facetFiltersUsers40`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            facetFilters = FacetFilters.of(listOf(FacetFilters.of("user:user42"), FacetFilters.of("user:public"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"facetFilters":["user:user42","user:public"]}""", it.body)
      },
    )
  }

  @Test
  fun `buildTheQuery41`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            filters = "categoryPageId: Men's Clothing",
            hitsPerPage = 50,
            analyticsTags = listOf("mens-clothing"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"filters":"categoryPageId: Men's Clothing","hitsPerPage":50,"analyticsTags":["mens-clothing"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesToHighlightOverride42`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            attributesToHighlight = listOf("title", "content"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","attributesToHighlight":["title","content"]}""", it.body)
      },
    )
  }

  @Test
  fun `disableTypoToleranceOnAttributes43`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            disableTypoToleranceOnAttributes = listOf("serial_number"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","disableTypoToleranceOnAttributes":["serial_number"]}""", it.body)
      },
    )
  }

  @Test
  fun `search_a_query44`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "shirt",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"shirt"}""", it.body)
      },
    )
  }

  @Test
  fun `search_everything45`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":""}""", it.body)
      },
    )
  }

  @Test
  fun `api_filtering_range_example46`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "books",
            filters = "price:10 TO 20",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"books","filters":"price:10 TO 20"}""", it.body)
      },
    )
  }

  @Test
  fun `search_a_query47`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "",
            similarQuery = "Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen",
            filters = "year:1991 TO 2001",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"","similarQuery":"Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen","filters":"year:1991 TO 2001"}""", it.body)
      },
    )
  }

  @Test
  fun `override_retrievable_attributes48`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            attributesToRetrieve = listOf("title", "content"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","attributesToRetrieve":["title","content"]}""", it.body)
      },
    )
  }

  @Test
  fun `restrict_searchable_attributes49`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            restrictSearchableAttributes = listOf("title", "author"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","restrictSearchableAttributes":["title","author"]}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_relevancy50`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            relevancyStrictness = 70,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","relevancyStrictness":70}""", it.body)
      },
    )
  }

  @Test
  fun `apply_filters51`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            filters = "(category:Book OR category:Ebook) AND _tags:published",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","filters":"(category:Book OR category:Ebook) AND _tags:published"}""", it.body)
      },
    )
  }

  @Test
  fun `apply_all_filters52`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            filters = "available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:\"John Doe\"",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","filters":"available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:\"John Doe\""}""", it.body)
      },
    )
  }

  @Test
  fun `escape_spaces53`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            filters = "category:\"Books and Comics\"",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","filters":"category:\"Books and Comics\""}""", it.body)
      },
    )
  }

  @Test
  fun `escape_keywords54`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            filters = "keyword:\"OR\"",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","filters":"keyword:\"OR\""}""", it.body)
      },
    )
  }

  @Test
  fun `escape_single_quotes55`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            filters = "content:\"It's a wonderful day\"",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","filters":"content:\"It's a wonderful day\""}""", it.body)
      },
    )
  }

  @Test
  fun `escape_double_quotes56`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            filters = "content:\"She said \"Hello World\"",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","filters":"content:\"She said \"Hello World\""}""", it.body)
      },
    )
  }

  @Test
  fun `apply_filters57`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            optionalFilters = OptionalFilters.of(listOf(OptionalFilters.of("category:Book"), OptionalFilters.of("author:John Doe"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","optionalFilters":["category:Book","author:John Doe"]}""", it.body)
      },
    )
  }

  @Test
  fun `apply_negative_filters58`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            optionalFilters = OptionalFilters.of(listOf(OptionalFilters.of("category:Book"), OptionalFilters.of("author:-John Doe"))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","optionalFilters":["category:Book","author:-John Doe"]}""", it.body)
      },
    )
  }

  @Test
  fun `apply_numeric_filters59`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            numericFilters = NumericFilters.of(listOf(NumericFilters.of("price < 1000"), NumericFilters.of(listOf(NumericFilters.of("inStock = 1"), NumericFilters.of("deliveryDate < 1441755506"))))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","numericFilters":["price < 1000",["inStock = 1","deliveryDate < 1441755506"]]}""", it.body)
      },
    )
  }

  @Test
  fun `apply_tag_filters60`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            tagFilters = TagFilters.of(listOf(TagFilters.of("SciFi"), TagFilters.of(listOf(TagFilters.of("Book"), TagFilters.of("Movie"))))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","tagFilters":["SciFi",["Book","Movie"]]}""", it.body)
      },
    )
  }

  @Test
  fun `apply_filters61`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            sumOrFiltersScores = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","sumOrFiltersScores":true}""", it.body)
      },
    )
  }

  @Test
  fun `facets_all62`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            facets = listOf("*"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","facets":["*"]}""", it.body)
      },
    )
  }

  @Test
  fun `retrieve_only_some_facets63`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            facets = listOf("category", "author"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","facets":["category","author"]}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_max_values_per_facet64`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            maxValuesPerFacet = 20,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","maxValuesPerFacet":20}""", it.body)
      },
    )
  }

  @Test
  fun `enable_faceting_after_distinct65`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            facetingAfterDistinct = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","facetingAfterDistinct":true}""", it.body)
      },
    )
  }

  @Test
  fun `sort_facet_values_alphabetically66`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            sortFacetValuesBy = "count",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","sortFacetValuesBy":"count"}""", it.body)
      },
    )
  }

  @Test
  fun `override_attributes_to_snippet67`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            attributesToSnippet = listOf("title", "content:80"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","attributesToSnippet":["title","content:80"]}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_highlight_pre_tag68`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            highlightPreTag = "<strong>",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","highlightPreTag":"<strong>"}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_highlight_post_tag69`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            highlightPostTag = "</strong>",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","highlightPostTag":"</strong>"}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_snippet_ellipsis_text70`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            snippetEllipsisText = "",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","snippetEllipsisText":""}""", it.body)
      },
    )
  }

  @Test
  fun `enable_restrict_highlight_and_snippet_arrays71`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            restrictHighlightAndSnippetArrays = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","restrictHighlightAndSnippetArrays":false}""", it.body)
      },
    )
  }

  @Test
  fun `access_page72`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            page = 0,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","page":0}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_hits_per_page73`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            hitsPerPage = 10,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","hitsPerPage":10}""", it.body)
      },
    )
  }

  @Test
  fun `get_nth_hit74`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            offset = 4,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","offset":4}""", it.body)
      },
    )
  }

  @Test
  fun `get_n_results75`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            length = 4,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","length":4}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_min_word_size_for_one_typo76`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            minWordSizefor1Typo = 2,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","minWordSizefor1Typo":2}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_min_word_size_for_two_typos77`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            minWordSizefor2Typos = 2,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","minWordSizefor2Typos":2}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_typo_tolerance_mode78`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            typoTolerance = TypoTolerance.of(false),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","typoTolerance":false}""", it.body)
      },
    )
  }

  @Test
  fun `disable_typos_on_numeric_tokens_at_search_time79`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            allowTyposOnNumericTokens = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","allowTyposOnNumericTokens":false}""", it.body)
      },
    )
  }

  @Test
  fun `search_around_a_position80`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            aroundLatLng = "40.71, -74.01",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","aroundLatLng":"40.71, -74.01"}""", it.body)
      },
    )
  }

  @Test
  fun `search_around_server_ip81`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            aroundLatLngViaIP = true,
          ),
          requestOptions = RequestOptions(
            headers = buildMap {
              put("x-forwarded-for", "94.228.178.246 // should be replaced with the actual IP you would like to search around")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertContainsAll("""{"x-forwarded-for":"94.228.178.246 // should be replaced with the actual IP you would like to search around"}""", it.headers)
        assertJsonBody("""{"query":"query","aroundLatLngViaIP":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_around_radius82`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            aroundRadius = AroundRadius.of(1000),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","aroundRadius":1000}""", it.body)
      },
    )
  }

  @Test
  fun `disable_automatic_radius83`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            aroundRadius = AroundRadiusAll.entries.first { it.value == "all" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","aroundRadius":"all"}""", it.body)
      },
    )
  }

  @Test
  fun `set_geo_search_precision84`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            aroundPrecision = AroundPrecision.of(100),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","aroundPrecision":100}""", it.body)
      },
    )
  }

  @Test
  fun `set_geo_search_precision_non_linear85`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            aroundPrecision = AroundPrecision.of(
              listOf(
                Range(
                  from = 0,
                  value = 25,
                ),
                Range(
                  from = 2000,
                  value = 1000,
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","aroundPrecision":[{"from":0,"value":25},{"from":2000,"value":1000}]}""", it.body)
      },
    )
  }

  @Test
  fun `set_minimum_geo_search_radius86`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            minimumAroundRadius = 1000,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","minimumAroundRadius":1000}""", it.body)
      },
    )
  }

  @Test
  fun `search_inside_rectangular_area87`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            insideBoundingBox = InsideBoundingBox.of(listOf(listOf(46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","insideBoundingBox":[[46.650828100116044,7.123046875,45.17210966999772,1.009765625]]}""", it.body)
      },
    )
  }

  @Test
  fun `search_inside_multiple_rectangular_areas88`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            insideBoundingBox = InsideBoundingBox.of(listOf(listOf(46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625), listOf(49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875))),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","insideBoundingBox":[[46.650828100116044,7.123046875,45.17210966999772,1.009765625],[49.62625916704081,4.6181640625,47.715070300900194,0.482421875]]}""", it.body)
      },
    )
  }

  @Test
  fun `search_inside_polygon_area89`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            insidePolygon = listOf(listOf(46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625, 49.62625916704081, 4.6181640625)),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","insidePolygon":[[46.650828100116044,7.123046875,45.17210966999772,1.009765625,49.62625916704081,4.6181640625]]}""", it.body)
      },
    )
  }

  @Test
  fun `search_inside_multiple_polygon_areas90`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            insidePolygon = listOf(listOf(46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625, 49.62625916704081, 4.6181640625), listOf(49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875, 45.17210966999772, 1.009765625, 50.62626704081, 4.6181640625)),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","insidePolygon":[[46.650828100116044,7.123046875,45.17210966999772,1.009765625,49.62625916704081,4.6181640625],[49.62625916704081,4.6181640625,47.715070300900194,0.482421875,45.17210966999772,1.009765625,50.62626704081,4.6181640625]]}""", it.body)
      },
    )
  }

  @Test
  fun `set_querylanguages_override91`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            ignorePlurals = IgnorePlurals.of(listOf(SupportedLanguage.entries.first { it.value == "ca" }, SupportedLanguage.entries.first { it.value == "es" })),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","ignorePlurals":["ca","es"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_querylanguages_override92`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            removeStopWords = RemoveStopWords.of(listOf(SupportedLanguage.entries.first { it.value == "ca" }, SupportedLanguage.entries.first { it.value == "es" })),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","removeStopWords":["ca","es"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_querylanguages_override93`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            removeStopWords = RemoveStopWords.of(listOf(SupportedLanguage.entries.first { it.value == "ca" }, SupportedLanguage.entries.first { it.value == "es" })),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","removeStopWords":["ca","es"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_querylanguages_with_japanese_query94`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            queryLanguages = listOf(SupportedLanguage.entries.first { it.value == "ja" }, SupportedLanguage.entries.first { it.value == "en" }),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","queryLanguages":["ja","en"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_natural_languages95`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "",
            naturalLanguages = listOf(SupportedLanguage.entries.first { it.value == "fr" }),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"","naturalLanguages":["fr"]}""", it.body)
      },
    )
  }

  @Test
  fun `override_natural_languages_with_query96`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "",
            naturalLanguages = listOf(SupportedLanguage.entries.first { it.value == "fr" }),
            removeWordsIfNoResults = RemoveWordsIfNoResults.entries.first { it.value == "firstWords" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"","naturalLanguages":["fr"],"removeWordsIfNoResults":"firstWords"}""", it.body)
      },
    )
  }

  @Test
  fun `enable_decompound_query_search_time97`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            decompoundQuery = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","decompoundQuery":true}""", it.body)
      },
    )
  }

  @Test
  fun `enable_rules_search_time98`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            enableRules = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","enableRules":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_rule_contexts99`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            ruleContexts = listOf("front_end", "website2"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","ruleContexts":["front_end","website2"]}""", it.body)
      },
    )
  }

  @Test
  fun `enable_personalization100`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            enablePersonalization = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","enablePersonalization":true}""", it.body)
      },
    )
  }

  @Test
  fun `enable_personalization_with_user_token101`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            enablePersonalization = true,
            userToken = "123456",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","enablePersonalization":true,"userToken":"123456"}""", it.body)
      },
    )
  }

  @Test
  fun `personalization_impact102`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            personalizationImpact = 20,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","personalizationImpact":20}""", it.body)
      },
    )
  }

  @Test
  fun `set_user_token103`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            userToken = "123456",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","userToken":"123456"}""", it.body)
      },
    )
  }

  @Test
  fun `set_user_token_with_personalization104`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            enablePersonalization = true,
            userToken = "123456",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","enablePersonalization":true,"userToken":"123456"}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_query_type105`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            queryType = QueryType.entries.first { it.value == "prefixAll" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","queryType":"prefixAll"}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_remove_words_if_no_results106`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            removeWordsIfNoResults = RemoveWordsIfNoResults.entries.first { it.value == "lastWords" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","removeWordsIfNoResults":"lastWords"}""", it.body)
      },
    )
  }

  @Test
  fun `enable_advanced_syntax_search_time107`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            advancedSyntax = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","advancedSyntax":true}""", it.body)
      },
    )
  }

  @Test
  fun `overide_default_optional_words108`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            optionalWords = OptionalWords.of(listOf("toyota", "2020 2021")),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","optionalWords":["toyota","2020 2021"]}""", it.body)
      },
    )
  }

  @Test
  fun `disabling_exact_for_some_attributes_search_time109`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            disableExactOnAttributes = listOf("description"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","disableExactOnAttributes":["description"]}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_exact_single_word_query110`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            exactOnSingleWordQuery = ExactOnSingleWordQuery.entries.first { it.value == "none" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","exactOnSingleWordQuery":"none"}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_aternative_as_exact111`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            alternativesAsExact = listOf(AlternativesAsExact.entries.first { it.value == "multiWordsSynonym" }),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","alternativesAsExact":["multiWordsSynonym"]}""", it.body)
      },
    )
  }

  @Test
  fun `enable_advanced_syntax_exact_phrase112`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            advancedSyntax = true,
            advancedSyntaxFeatures = listOf(AdvancedSyntaxFeatures.entries.first { it.value == "exactPhrase" }),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"]}""", it.body)
      },
    )
  }

  @Test
  fun `enable_advanced_syntax_exclude_words113`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            advancedSyntax = true,
            advancedSyntaxFeatures = listOf(AdvancedSyntaxFeatures.entries.first { it.value == "excludeWords" }),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","advancedSyntax":true,"advancedSyntaxFeatures":["excludeWords"]}""", it.body)
      },
    )
  }

  @Test
  fun `override_distinct114`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            distinct = Distinct.of(0),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","distinct":0}""", it.body)
      },
    )
  }

  @Test
  fun `get_ranking_info115`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            getRankingInfo = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","getRankingInfo":true}""", it.body)
      },
    )
  }

  @Test
  fun `disable_click_analytics116`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            clickAnalytics = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","clickAnalytics":false}""", it.body)
      },
    )
  }

  @Test
  fun `enable_click_analytics117`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            clickAnalytics = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","clickAnalytics":true}""", it.body)
      },
    )
  }

  @Test
  fun `disable_analytics118`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            analytics = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","analytics":false}""", it.body)
      },
    )
  }

  @Test
  fun `add_analytics_tags119`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            analyticsTags = listOf("front_end", "website2"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","analyticsTags":["front_end","website2"]}""", it.body)
      },
    )
  }

  @Test
  fun `disable_synonyms120`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            synonyms = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","synonyms":false}""", it.body)
      },
    )
  }

  @Test
  fun `override_replace_synonyms_in_highlights121`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            replaceSynonymsInHighlight = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","replaceSynonymsInHighlight":true}""", it.body)
      },
    )
  }

  @Test
  fun `override_min_proximity122`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            minProximity = 2,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","minProximity":2}""", it.body)
      },
    )
  }

  @Test
  fun `override_default_field123`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            responseFields = listOf("hits", "facets"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","responseFields":["hits","facets"]}""", it.body)
      },
    )
  }

  @Test
  fun `override_percentile_computation124`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            percentileComputation = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","percentileComputation":false}""", it.body)
      },
    )
  }

  @Test
  fun `set_ab_test125`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            enableABTest = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","enableABTest":false}""", it.body)
      },
    )
  }

  @Test
  fun `set_enable_re_ranking126`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "indexName",
          searchParams = SearchParamsObject(
            query = "query",
            enableReRanking = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/query".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"query","enableReRanking":false}""", it.body)
      },
    )
  }

  // searchSynonyms

  @Test
  fun `searchSynonyms with minimal parameters`() = runTest {
    client.runTest(
      call = {
        searchSynonyms(
          indexName = "indexName",
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/synonyms/search".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `searchSynonyms with all parameters1`() = runTest {
    client.runTest(
      call = {
        searchSynonyms(
          indexName = "indexName",
          searchSynonymsParams = SearchSynonymsParams(
            query = "myQuery",
            type = SynonymType.entries.first { it.value == "altcorrection1" },
            page = 10,
            hitsPerPage = 10,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/indexName/synonyms/search".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"myQuery","type":"altcorrection1","page":10,"hitsPerPage":10}""", it.body)
      },
    )
  }

  // searchUserIds

  @Test
  fun `searchUserIds`() = runTest {
    client.runTest(
      call = {
        searchUserIds(
          searchUserIdsParams = SearchUserIdsParams(
            query = "test",
            clusterName = "theClusterName",
            page = 5,
            hitsPerPage = 10,
          ),
        )
      },
      intercept = {
        assertEquals("/1/clusters/mapping/search".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{"query":"test","clusterName":"theClusterName","page":5,"hitsPerPage":10}""", it.body)
      },
    )
  }

  // setDictionarySettings

  @Test
  fun `get setDictionarySettings results with minimal parameters`() = runTest {
    client.runTest(
      call = {
        setDictionarySettings(
          dictionarySettingsParams = DictionarySettingsParams(
            disableStandardEntries = StandardEntries(
              plurals = mapOf("fr" to false, "en" to false, "ru" to true),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/dictionaries/*/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true}}}""", it.body)
      },
    )
  }

  @Test
  fun `get setDictionarySettings results with all parameters1`() = runTest {
    client.runTest(
      call = {
        setDictionarySettings(
          dictionarySettingsParams = DictionarySettingsParams(
            disableStandardEntries = StandardEntries(
              plurals = mapOf("fr" to false, "en" to false, "ru" to true),
              stopwords = mapOf("fr" to false),
              compounds = mapOf("ru" to true),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/dictionaries/*/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"disableStandardEntries":{"plurals":{"fr":false,"en":false,"ru":true},"stopwords":{"fr":false},"compounds":{"ru":true}}}""", it.body)
      },
    )
  }

  // setSettings

  @Test
  fun `minimal parameters`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "cts_e2e_settings",
          indexSettings = IndexSettings(
            paginationLimitedTo = 10,
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/cts_e2e_settings/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"paginationLimitedTo":10}""", it.body)
      },
    )
  }

  @Test
  fun `boolean typoTolerance1`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            typoTolerance = TypoTolerance.of(true),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"typoTolerance":true}""", it.body)
      },
    )
  }

  @Test
  fun `enum typoTolerance2`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            typoTolerance = TypoToleranceEnum.entries.first { it.value == "min" },
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"typoTolerance":"min"}""", it.body)
      },
    )
  }

  @Test
  fun `ignorePlurals3`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            ignorePlurals = IgnorePlurals.of(true),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"ignorePlurals":true}""", it.body)
      },
    )
  }

  @Test
  fun `list of string ignorePlurals4`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            ignorePlurals = IgnorePlurals.of(listOf(SupportedLanguage.entries.first { it.value == "fr" })),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"ignorePlurals":["fr"]}""", it.body)
      },
    )
  }

  @Test
  fun `removeStopWords boolean5`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            removeStopWords = RemoveStopWords.of(true),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"removeStopWords":true}""", it.body)
      },
    )
  }

  @Test
  fun `removeStopWords list of string6`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            removeStopWords = RemoveStopWords.of(listOf(SupportedLanguage.entries.first { it.value == "fr" })),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"removeStopWords":["fr"]}""", it.body)
      },
    )
  }

  @Test
  fun `boolean distinct7`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            distinct = Distinct.of(true),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"distinct":true}""", it.body)
      },
    )
  }

  @Test
  fun `integer distinct8`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            distinct = Distinct.of(1),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"distinct":1}""", it.body)
      },
    )
  }

  @Test
  fun `distinct company9`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributeForDistinct = "company",
            distinct = Distinct.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributeForDistinct":"company","distinct":true}""", it.body)
      },
    )
  }

  @Test
  fun `distinct design10`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributeForDistinct = "design",
            distinct = Distinct.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributeForDistinct":"design","distinct":true}""", it.body)
      },
    )
  }

  @Test
  fun `distinct true11`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            distinct = Distinct.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"distinct":true}""", it.body)
      },
    )
  }

  @Test
  fun `distinct section12`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributeForDistinct = "section",
            distinct = Distinct.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributeForDistinct":"section","distinct":true}""", it.body)
      },
    )
  }

  @Test
  fun `attributesForFaceting allergens13`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("allergens"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["allergens"]}""", it.body)
      },
    )
  }

  @Test
  fun `api_attributes_for_faceting14`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("genre", "author"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["genre","author"]}""", it.body)
      },
    )
  }

  @Test
  fun `api_attributes_for_faceting_searchable15`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("genre", "searchable(author)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["genre","searchable(author)"]}""", it.body)
      },
    )
  }

  @Test
  fun `api_attributes_for_filter_only16`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("filterOnly(genre)", "author"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["filterOnly(genre)","author"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesForFaceting categoryPageId17`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("searchable(categoryPageId)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["searchable(categoryPageId)"]}""", it.body)
      },
    )
  }

  @Test
  fun `unretrievableAttributes18`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            unretrievableAttributes = listOf("visible_by"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"unretrievableAttributes":["visible_by"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesForFaceting user restricted data19`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("filterOnly(visible_by)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["filterOnly(visible_by)"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesForFaceting optional filters20`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("can_deliver_quickly", "restaurant"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["can_deliver_quickly","restaurant"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesForFaceting redirect index21`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("query_terms"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["query_terms"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesForFaceting multiple consequences22`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("director"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["director"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesForFaceting in-depth optional filters23`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("filterOnly(brand)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["filterOnly(brand)"]}""", it.body)
      },
    )
  }

  @Test
  fun `mode neuralSearch24`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            mode = Mode.entries.first { it.value == "neuralSearch" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"mode":"neuralSearch"}""", it.body)
      },
    )
  }

  @Test
  fun `mode keywordSearch25`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            mode = Mode.entries.first { it.value == "keywordSearch" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"mode":"keywordSearch"}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributes same priority26`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("title,comments", "ingredients"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["title,comments","ingredients"]}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributes higher priority27`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("title", "ingredients"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["title","ingredients"]}""", it.body)
      },
    )
  }

  @Test
  fun `customRanking retweets28`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("desc(retweets)", "desc(likes)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["desc(retweets)","desc(likes)"]}""", it.body)
      },
    )
  }

  @Test
  fun `customRanking boosted29`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("desc(boosted)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["desc(boosted)"]}""", it.body)
      },
    )
  }

  @Test
  fun `customRanking pageviews30`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("desc(pageviews)", "desc(comments)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["desc(pageviews)","desc(comments)"]}""", it.body)
      },
    )
  }

  @Test
  fun `customRanking applying search parameters for a specific query31`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("desc(nb_airline_liaisons)"),
            attributesForFaceting = listOf("city, country"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["desc(nb_airline_liaisons)"],"attributesForFaceting":["city, country"]}""", it.body)
      },
    )
  }

  @Test
  fun `customRanking rounded pageviews32`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("desc(rounded_pageviews)", "desc(comments)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["desc(rounded_pageviews)","desc(comments)"]}""", it.body)
      },
    )
  }

  @Test
  fun `customRanking price33`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("desc(price)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["desc(price)"]}""", it.body)
      },
    )
  }

  @Test
  fun `ranking exhaustive34`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            ranking = listOf("desc(price)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"ranking":["desc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}""", it.body)
      },
    )
  }

  @Test
  fun `ranking standard replica35`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            ranking = listOf("desc(post_date_timestamp)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"ranking":["desc(post_date_timestamp)"]}""", it.body)
      },
    )
  }

  @Test
  fun `ranking virtual replica36`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("desc(post_date_timestamp)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["desc(post_date_timestamp)"]}""", it.body)
      },
    )
  }

  @Test
  fun `customRanking and ranking sort alphabetically37`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("asc(textual_attribute)"),
            ranking = listOf("custom", "typo", "geo", "words", "filters", "proximity", "attribute", "exact"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["asc(textual_attribute)"],"ranking":["custom","typo","geo","words","filters","proximity","attribute","exact"]}""", it.body)
      },
    )
  }

  @Test
  fun `relevancyStrictness38`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("asc(textual_attribute)"),
            relevancyStrictness = 0,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["asc(textual_attribute)"],"relevancyStrictness":0}""", it.body)
      },
    )
  }

  @Test
  fun `create replica index39`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            replicas = listOf("products_price_desc"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"replicas":["products_price_desc"]}""", it.body)
      },
    )
  }

  @Test
  fun `create replica index articles40`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            replicas = listOf("articles_date_desc"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"replicas":["articles_date_desc"]}""", it.body)
      },
    )
  }

  @Test
  fun `create virtual replica index41`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            replicas = listOf("virtual(products_price_desc)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"replicas":["virtual(products_price_desc)"]}""", it.body)
      },
    )
  }

  @Test
  fun `unlink replica index42`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            replicas = listOf(""),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"replicas":[""]}""", it.body)
      },
    )
  }

  @Test
  fun `forwardToReplicas43`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("name", "description"),
          ),
          forwardToReplicas = true,
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"forwardToReplicas":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"searchableAttributes":["name","description"]}""", it.body)
      },
    )
  }

  @Test
  fun `maxValuesPerFacet44`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            maxValuesPerFacet = 1000,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"maxValuesPerFacet":1000}""", it.body)
      },
    )
  }

  @Test
  fun `maxFacetHits45`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            maxFacetHits = 1000,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"maxFacetHits":1000}""", it.body)
      },
    )
  }

  @Test
  fun `attributesForFaceting complex46`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "<YOUR_INDEX_NAME>",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("actor", "filterOnly(category)", "searchable(publisher)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/%3CYOUR_INDEX_NAME%3E/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["actor","filterOnly(category)","searchable(publisher)"]}""", it.body)
      },
    )
  }

  @Test
  fun `ranking closest dates47`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            ranking = listOf("asc(date_timestamp)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"ranking":["asc(date_timestamp)","typo","geo","words","filters","proximity","attribute","exact","custom"]}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributes item variation48`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("design", "type", "color"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["design","type","color"]}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributes around location49`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("name", "country", "code", "iata_code"),
            customRanking = listOf("desc(links_count)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["name","country","code","iata_code"],"customRanking":["desc(links_count)"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesToHighlight50`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributesToHighlight = listOf("author", "title", "content"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesToHighlight":["author","title","content"]}""", it.body)
      },
    )
  }

  @Test
  fun `attributesToHighlightStar51`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributesToHighlight = listOf("*"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesToHighlight":["*"]}""", it.body)
      },
    )
  }

  @Test
  fun `everything52`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            advancedSyntax = true,
            advancedSyntaxFeatures = listOf(AdvancedSyntaxFeatures.entries.first { it.value == "exactPhrase" }),
            allowCompressionOfIntegerArray = true,
            allowTyposOnNumericTokens = true,
            alternativesAsExact = listOf(AlternativesAsExact.entries.first { it.value == "singleWordSynonym" }),
            attributeCriteriaComputedByMinProximity = true,
            attributeForDistinct = "test",
            attributesForFaceting = listOf("algolia"),
            attributesToHighlight = listOf("algolia"),
            attributesToRetrieve = listOf("algolia"),
            attributesToSnippet = listOf("algolia"),
            attributesToTransliterate = listOf("algolia"),
            camelCaseAttributes = listOf("algolia"),
            customNormalization = mapOf("algolia" to mapOf("aloglia" to "aglolia")),
            customRanking = listOf("algolia"),
            decompoundQuery = false,
            decompoundedAttributes = buildJsonObject {
              put(
                "algolia",
                JsonPrimitive("aloglia"),
              )
            },
            disableExactOnAttributes = listOf("algolia"),
            disablePrefixOnAttributes = listOf("algolia"),
            disableTypoToleranceOnAttributes = listOf("algolia"),
            disableTypoToleranceOnWords = listOf("algolia"),
            distinct = Distinct.of(3),
            enablePersonalization = true,
            enableReRanking = false,
            enableRules = true,
            exactOnSingleWordQuery = ExactOnSingleWordQuery.entries.first { it.value == "attribute" },
            highlightPreTag = "<span>",
            highlightPostTag = "</span>",
            hitsPerPage = 10,
            ignorePlurals = IgnorePlurals.of(false),
            indexLanguages = listOf(SupportedLanguage.entries.first { it.value == "fr" }),
            keepDiacriticsOnCharacters = "abc",
            maxFacetHits = 20,
            maxValuesPerFacet = 30,
            minProximity = 6,
            minWordSizefor1Typo = 5,
            minWordSizefor2Typos = 11,
            mode = Mode.entries.first { it.value == "neuralSearch" },
            numericAttributesForFiltering = listOf("algolia"),
            optionalWords = OptionalWords.of(listOf("myspace")),
            paginationLimitedTo = 0,
            queryLanguages = listOf(SupportedLanguage.entries.first { it.value == "fr" }),
            queryType = QueryType.entries.first { it.value == "prefixLast" },
            ranking = listOf("geo"),
            reRankingApplyFilter = ReRankingApplyFilter.of("mySearch:filters"),
            relevancyStrictness = 10,
            removeStopWords = RemoveStopWords.of(false),
            removeWordsIfNoResults = RemoveWordsIfNoResults.entries.first { it.value == "lastWords" },
            renderingContent = RenderingContent(
              facetOrdering = FacetOrdering(
                facets = Facets(
                  order = listOf("a", "b"),
                ),
                values = mapOf(
                  "a" to Value(
                    order = listOf("b"),
                    sortRemainingBy = SortRemainingBy.entries.first { it.value == "count" },
                  ),
                ),
              ),
            ),
            replaceSynonymsInHighlight = true,
            replicas = listOf(""),
            responseFields = listOf("algolia"),
            restrictHighlightAndSnippetArrays = true,
            searchableAttributes = listOf("foo"),
            semanticSearch = SemanticSearch(
              eventSources = listOf("foo"),
            ),
            separatorsToIndex = "bar",
            snippetEllipsisText = "---",
            sortFacetValuesBy = "date",
            typoTolerance = TypoTolerance.of(false),
            unretrievableAttributes = listOf("foo"),
            userData = buildJsonObject {
              put(
                "user",
                JsonPrimitive("data"),
              )
            },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowCompressionOfIntegerArray":true,"allowTyposOnNumericTokens":true,"alternativesAsExact":["singleWordSynonym"],"attributeCriteriaComputedByMinProximity":true,"attributeForDistinct":"test","attributesForFaceting":["algolia"],"attributesToHighlight":["algolia"],"attributesToRetrieve":["algolia"],"attributesToSnippet":["algolia"],"attributesToTransliterate":["algolia"],"camelCaseAttributes":["algolia"],"customNormalization":{"algolia":{"aloglia":"aglolia"}},"customRanking":["algolia"],"decompoundQuery":false,"decompoundedAttributes":{"algolia":"aloglia"},"disableExactOnAttributes":["algolia"],"disablePrefixOnAttributes":["algolia"],"disableTypoToleranceOnAttributes":["algolia"],"disableTypoToleranceOnWords":["algolia"],"distinct":3,"enablePersonalization":true,"enableReRanking":false,"enableRules":true,"exactOnSingleWordQuery":"attribute","highlightPreTag":"<span>","highlightPostTag":"</span>","hitsPerPage":10,"ignorePlurals":false,"indexLanguages":["fr"],"keepDiacriticsOnCharacters":"abc","maxFacetHits":20,"maxValuesPerFacet":30,"minProximity":6,"minWordSizefor1Typo":5,"minWordSizefor2Typos":11,"mode":"neuralSearch","numericAttributesForFiltering":["algolia"],"optionalWords":["myspace"],"paginationLimitedTo":0,"queryLanguages":["fr"],"queryType":"prefixLast","ranking":["geo"],"reRankingApplyFilter":"mySearch:filters","relevancyStrictness":10,"removeStopWords":false,"removeWordsIfNoResults":"lastWords","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"replicas":[""],"responseFields":["algolia"],"restrictHighlightAndSnippetArrays":true,"searchableAttributes":["foo"],"semanticSearch":{"eventSources":["foo"]},"separatorsToIndex":"bar","snippetEllipsisText":"---","sortFacetValuesBy":"date","typoTolerance":false,"unretrievableAttributes":["foo"],"userData":{"user":"data"}}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributesWithCustomRankingsAndAttributesForFaceting53`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("brand", "name", "categories", "unordered(description)"),
            customRanking = listOf("desc(popularity)"),
            attributesForFaceting = listOf("searchable(brand)", "type", "categories", "price"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["brand","name","categories","unordered(description)"],"customRanking":["desc(popularity)"],"attributesForFaceting":["searchable(brand)","type","categories","price"]}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributesOrdering54`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("unordered(title)", "cast"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["unordered(title)","cast"]}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributesProductReferenceSuffixes55`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("name", "product_reference", "product_reference_suffixes"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["name","product_reference","product_reference_suffixes"]}""", it.body)
      },
    )
  }

  @Test
  fun `queryLanguageAndIgnorePlurals56`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            queryLanguages = listOf(SupportedLanguage.entries.first { it.value == "en" }),
            ignorePlurals = IgnorePlurals.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"queryLanguages":["en"],"ignorePlurals":true}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributesInMovies57`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "movies",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("title_eng", "title_fr", "title_es"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/movies/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["title_eng","title_fr","title_es"]}""", it.body)
      },
    )
  }

  @Test
  fun `disablePrefixOnAttributes58`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            disablePrefixOnAttributes = listOf("serial_number"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"disablePrefixOnAttributes":["serial_number"]}""", it.body)
      },
    )
  }

  @Test
  fun `disableTypoToleranceOnAttributes59`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            disableTypoToleranceOnAttributes = listOf("serial_number"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"disableTypoToleranceOnAttributes":["serial_number"]}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributesSimpleExample60`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("serial_number"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["serial_number"]}""", it.body)
      },
    )
  }

  @Test
  fun `searchableAttributesSimpleExampleAlt61`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("serial_number", "serial_number_suffixes"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["serial_number","serial_number_suffixes"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_searchable_attributes62`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            searchableAttributes = listOf("title,alternative_title", "author", "unordered(text)", "emails.personal"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"searchableAttributes":["title,alternative_title","author","unordered(text)","emails.personal"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_searchable_attributes63`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributesForFaceting = listOf("author", "filterOnly(isbn)", "searchable(edition)", "afterDistinct(category)", "afterDistinct(searchable(publisher))"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesForFaceting":["author","filterOnly(isbn)","searchable(edition)","afterDistinct(category)","afterDistinct(searchable(publisher))"]}""", it.body)
      },
    )
  }

  @Test
  fun `unretrievable_attributes64`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            unretrievableAttributes = listOf("total_number_of_sales"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"unretrievableAttributes":["total_number_of_sales"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_retrievable_attributes65`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributesToRetrieve = listOf("author", "title", "content"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesToRetrieve":["author","title","content"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_all_attributes_as_retrievable66`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributesToRetrieve = listOf("*"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesToRetrieve":["*"]}""", it.body)
      },
    )
  }

  @Test
  fun `specify_attributes_not_to_retrieve67`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributesToRetrieve = listOf("*", "-SKU", "-internal_desc"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesToRetrieve":["*","-SKU","-internal_desc"]}""", it.body)
      },
    )
  }

  @Test
  fun `neural_search68`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            mode = Mode.entries.first { it.value == "neuralSearch" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"mode":"neuralSearch"}""", it.body)
      },
    )
  }

  @Test
  fun `keyword_search69`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            mode = Mode.entries.first { it.value == "keywordSearch" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"mode":"keywordSearch"}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_ranking70`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            ranking = listOf("typo", "geo", "words", "filters", "attribute", "proximity", "exact", "custom"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"ranking":["typo","geo","words","filters","attribute","proximity","exact","custom"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_ranking_by_attribute_asc71`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            ranking = listOf("asc(price)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"ranking":["asc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_ranking_by_attribute_desc72`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            ranking = listOf("desc(price)", "typo", "geo", "words", "filters", "proximity", "attribute", "exact", "custom"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"ranking":["desc(price)","typo","geo","words","filters","proximity","attribute","exact","custom"]}""", it.body)
      },
    )
  }

  @Test
  fun `restrict_searchable_attributes73`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customRanking = listOf("desc(popularity)", "asc(price)"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customRanking":["desc(popularity)","asc(price)"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_relevancy74`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            relevancyStrictness = 90,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"relevancyStrictness":90}""", it.body)
      },
    )
  }

  @Test
  fun `set_replicas75`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            replicas = listOf("name_of_replica_index1", "name_of_replica_index2"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"replicas":["name_of_replica_index1","name_of_replica_index2"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_max_values_per_facet76`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            maxValuesPerFacet = 100,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"maxValuesPerFacet":100}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_sort_facet_values_by77`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            sortFacetValuesBy = "alpha",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"sortFacetValuesBy":"alpha"}""", it.body)
      },
    )
  }

  @Test
  fun `set_attributes_to_snippet78`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributesToSnippet = listOf("content:80", "description"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesToSnippet":["content:80","description"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_all_attributes_to_snippet79`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributesToSnippet = listOf("*:80"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributesToSnippet":["*:80"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_highlight_pre_tag80`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            highlightPreTag = "<em>",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"highlightPreTag":"<em>"}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_highlight_post_tag81`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            highlightPostTag = "</em>",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"highlightPostTag":"</em>"}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_snippet_ellipsis_text82`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            snippetEllipsisText = "…",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"snippetEllipsisText":"…"}""", it.body)
      },
    )
  }

  @Test
  fun `enable_restrict_highlight_and_snippet_arrays_by_default83`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            restrictHighlightAndSnippetArrays = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"restrictHighlightAndSnippetArrays":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_hits_per_page84`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            hitsPerPage = 20,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"hitsPerPage":20}""", it.body)
      },
    )
  }

  @Test
  fun `set_pagination_limit85`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            paginationLimitedTo = 1000,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"paginationLimitedTo":1000}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_min_word_size_for_one_typo86`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            minWordSizefor1Typo = 4,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"minWordSizefor1Typo":4}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_min_word_size_for_two_typos87`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            minWordSizefor2Typos = 4,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"minWordSizefor2Typos":4}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_typo_tolerance_mode88`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            typoTolerance = TypoTolerance.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"typoTolerance":true}""", it.body)
      },
    )
  }

  @Test
  fun `disable_typos_on_numeric_tokens_by_default89`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            allowTyposOnNumericTokens = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"allowTyposOnNumericTokens":false}""", it.body)
      },
    )
  }

  @Test
  fun `disable_typo_tolerance_for_words90`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            disableTypoToleranceOnWords = listOf("wheel", "1X2BCD"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"disableTypoToleranceOnWords":["wheel","1X2BCD"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_separators_to_index91`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            separatorsToIndex = "+#",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"separatorsToIndex":"+#"}""", it.body)
      },
    )
  }

  @Test
  fun `set_languages_using_querylanguages92`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            queryLanguages = listOf(SupportedLanguage.entries.first { it.value == "es" }),
            ignorePlurals = IgnorePlurals.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"queryLanguages":["es"],"ignorePlurals":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_attributes_to_transliterate93`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            indexLanguages = listOf(SupportedLanguage.entries.first { it.value == "ja" }),
            attributesToTransliterate = listOf("name", "description"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"indexLanguages":["ja"],"attributesToTransliterate":["name","description"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_languages_using_querylanguages94`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            queryLanguages = listOf(SupportedLanguage.entries.first { it.value == "es" }),
            removeStopWords = RemoveStopWords.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"queryLanguages":["es"],"removeStopWords":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_camel_case_attributes95`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            camelCaseAttributes = listOf("description"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"camelCaseAttributes":["description"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_decompounded_attributes96`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            decompoundedAttributes = buildJsonObject {
              put(
                "de",
                JsonArray(
                  listOf(
                    JsonPrimitive("name"),
                  ),
                ),
              )
            },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"decompoundedAttributes":{"de":["name"]}}""", it.body)
      },
    )
  }

  @Test
  fun `set_decompounded_multiple_attributes97`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            decompoundedAttributes = buildJsonObject {
              put(
                "de",
                JsonArray(
                  listOf(
                    JsonPrimitive("name_de"),
                    JsonPrimitive("description_de"),
                  ),
                ),
              )
              put(
                "fi",
                JsonArray(
                  listOf(
                    JsonPrimitive("name_fi"),
                    JsonPrimitive("description_fi"),
                  ),
                ),
              )
            },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"decompoundedAttributes":{"de":["name_de","description_de"],"fi":["name_fi","description_fi"]}}""", it.body)
      },
    )
  }

  @Test
  fun `set_keep_diacritics_on_characters98`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            keepDiacriticsOnCharacters = "øé",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"keepDiacriticsOnCharacters":"øé"}""", it.body)
      },
    )
  }

  @Test
  fun `set_custom_normalization99`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            customNormalization = mapOf("default" to mapOf("ä" to "ae")),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"customNormalization":{"default":{"ä":"ae"}}}""", it.body)
      },
    )
  }

  @Test
  fun `set_languages_using_querylanguages100`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            queryLanguages = listOf(SupportedLanguage.entries.first { it.value == "es" }),
            removeStopWords = RemoveStopWords.of(true),
            ignorePlurals = IgnorePlurals.of(true),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"queryLanguages":["es"],"removeStopWords":true,"ignorePlurals":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_indexlanguages101`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            indexLanguages = listOf(SupportedLanguage.entries.first { it.value == "ja" }),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"indexLanguages":["ja"]}""", it.body)
      },
    )
  }

  @Test
  fun `enable_decompound_query_by_default102`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            decompoundQuery = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"decompoundQuery":true}""", it.body)
      },
    )
  }

  @Test
  fun `enable_rules_syntax_by_default103`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            enableRules = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"enableRules":true}""", it.body)
      },
    )
  }

  @Test
  fun `enable_personalization_settings104`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            enablePersonalization = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"enablePersonalization":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_query_type105`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            queryType = QueryType.entries.first { it.value == "prefixLast" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"queryType":"prefixLast"}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_remove_words_if_no_result106`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            removeWordsIfNoResults = RemoveWordsIfNoResults.entries.first { it.value == "none" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"removeWordsIfNoResults":"none"}""", it.body)
      },
    )
  }

  @Test
  fun `enable_advanced_syntax_by_default107`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            advancedSyntax = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"advancedSyntax":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_optional_words108`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            optionalWords = OptionalWords.of(listOf("blue", "iphone case")),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"optionalWords":["blue","iphone case"]}""", it.body)
      },
    )
  }

  @Test
  fun `disabling_prefix_search_for_some_attributes_by_default109`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            disablePrefixOnAttributes = listOf("sku"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"disablePrefixOnAttributes":["sku"]}""", it.body)
      },
    )
  }

  @Test
  fun `disabling_exact_for_some_attributes_by_default110`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            disableExactOnAttributes = listOf("description"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"disableExactOnAttributes":["description"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_exact_single_word_query111`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            exactOnSingleWordQuery = ExactOnSingleWordQuery.entries.first { it.value == "attribute" },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"exactOnSingleWordQuery":"attribute"}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_aternative_as_exact112`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            alternativesAsExact = listOf(AlternativesAsExact.entries.first { it.value == "ignorePlurals" }, AlternativesAsExact.entries.first { it.value == "singleWordSynonym" }),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"alternativesAsExact":["ignorePlurals","singleWordSynonym"]}""", it.body)
      },
    )
  }

  @Test
  fun `enable_advanced_syntax_by_default113`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            advancedSyntax = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"advancedSyntax":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_numeric_attributes_for_filtering114`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            numericAttributesForFiltering = listOf("quantity", "popularity"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"numericAttributesForFiltering":["quantity","popularity"]}""", it.body)
      },
    )
  }

  @Test
  fun `enable_compression_of_integer_array115`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            allowCompressionOfIntegerArray = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"allowCompressionOfIntegerArray":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_attributes_for_distinct116`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributeForDistinct = "url",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributeForDistinct":"url"}""", it.body)
      },
    )
  }

  @Test
  fun `set_distinct117`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            distinct = Distinct.of(1),
            attributeForDistinct = "url",
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"distinct":1,"attributeForDistinct":"url"}""", it.body)
      },
    )
  }

  @Test
  fun `set_replace_synonyms_in_highlights118`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            replaceSynonymsInHighlight = false,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"replaceSynonymsInHighlight":false}""", it.body)
      },
    )
  }

  @Test
  fun `set_min_proximity119`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            minProximity = 1,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"minProximity":1}""", it.body)
      },
    )
  }

  @Test
  fun `set_default_field120`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            responseFields = listOf("hits", "hitsPerPage", "nbPages", "page"),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"responseFields":["hits","hitsPerPage","nbPages","page"]}""", it.body)
      },
    )
  }

  @Test
  fun `set_max_facet_hits121`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            maxFacetHits = 10,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"maxFacetHits":10}""", it.body)
      },
    )
  }

  @Test
  fun `set_attribute_criteria_computed_by_min_proximity122`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            attributeCriteriaComputedByMinProximity = true,
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"attributeCriteriaComputedByMinProximity":true}""", it.body)
      },
    )
  }

  @Test
  fun `set_user_data123`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            userData = buildJsonObject {
              put(
                "extraData",
                JsonPrimitive("This is the custom data that you want to store in your index"),
              )
            },
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"userData":{"extraData":"This is the custom data that you want to store in your index"}}""", it.body)
      },
    )
  }

  @Test
  fun `set_rendering_content124`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "theIndexName",
          indexSettings = IndexSettings(
            renderingContent = RenderingContent(
              facetOrdering = FacetOrdering(
                facets = Facets(
                  order = listOf("size", "brand"),
                ),
                values = mapOf(
                  "brand" to Value(
                    order = listOf("uniqlo"),
                    hide = listOf("muji"),
                    sortRemainingBy = SortRemainingBy.entries.first { it.value == "count" },
                  ),
                  "size" to Value(
                    order = listOf("S", "M", "L"),
                    sortRemainingBy = SortRemainingBy.entries.first { it.value == "hidden" },
                  ),
                ),
              ),
            ),
          ),
        )
      },
      intercept = {
        assertEquals("/1/indexes/theIndexName/settings".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"renderingContent":{"facetOrdering":{"facets":{"order":["size","brand"]},"values":{"brand":{"order":["uniqlo"],"hide":["muji"],"sortRemainingBy":"count"},"size":{"order":["S","M","L"],"sortRemainingBy":"hidden"}}}}}""", it.body)
      },
    )
  }

  // updateApiKey

  @Test
  fun `updateApiKey`() = runTest {
    client.runTest(
      call = {
        updateApiKey(
          key = "ALGOLIA_API_KEY",
          apiKey = ApiKey(
            acl = listOf(Acl.entries.first { it.value == "search" }, Acl.entries.first { it.value == "addObject" }),
            validity = 300,
            maxQueriesPerIPPerHour = 100,
            maxHitsPerQuery = 20,
          ),
        )
      },
      intercept = {
        assertEquals("/1/keys/ALGOLIA_API_KEY".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{"acl":["search","addObject"],"validity":300,"maxQueriesPerIPPerHour":100,"maxHitsPerQuery":20}""", it.body)
      },
    )
  }
}
