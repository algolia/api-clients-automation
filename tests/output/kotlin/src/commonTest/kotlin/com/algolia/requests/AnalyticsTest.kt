// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package com.algolia.requests

import com.algolia.client.api.AnalyticsClient
import com.algolia.client.configuration.*
import com.algolia.client.model.analytics.*
import com.algolia.client.transport.*
import com.algolia.utils.*
import io.ktor.http.*
import kotlinx.coroutines.test.*
import kotlinx.serialization.json.*
import kotlin.test.*

class AnalyticsTest {

  val client = AnalyticsClient(
    appId = "appId",
    apiKey = "apiKey",
    region = "us",
  )

  // customDelete

  @Test
  fun `allow del method for a custom path with minimal parameters`() = runTest {
    client.runTest(
      call = {
        customDelete(
          path = "test/minimal",
        )
      },
      intercept = {
        assertEquals("/test/minimal".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `allow del method for a custom path with all parameters1`() = runTest {
    client.runTest(
      call = {
        customDelete(
          path = "test/all",
          parameters = mapOf("query" to "parameters"),
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("DELETE"), it.method)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // customGet

  @Test
  fun `allow get method for a custom path with minimal parameters`() = runTest {
    client.runTest(
      call = {
        customGet(
          path = "test/minimal",
        )
      },
      intercept = {
        assertEquals("/test/minimal".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `allow get method for a custom path with all parameters1`() = runTest {
    client.runTest(
      call = {
        customGet(
          path = "test/all",
          parameters = mapOf("query" to "parameters with space"),
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"query":"parameters%20with%20space"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `requestOptions should be escaped too2`() = runTest {
    client.runTest(
      call = {
        customGet(
          path = "test/all",
          parameters = mapOf("query" to "to be overriden"),
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("query", "parameters with space")
              put("and an array", listOf("array", "with spaces"))
            },
            headers = buildMap {
              put("x-header-1", "spaces are left alone")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertContainsAll("""{"x-header-1":"spaces are left alone"}""", it.headers)
        assertQueryParams("""{"query":"parameters%20with%20space","and%20an%20array":"array%2Cwith%20spaces"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // customPost

  @Test
  fun `allow post method for a custom path with minimal parameters`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/minimal",
        )
      },
      intercept = {
        assertEquals("/test/minimal".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `allow post method for a custom path with all parameters1`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/all",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "body",
              JsonPrimitive("parameters"),
            )
          },
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertJsonBody("""{"body":"parameters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions can override default query parameters2`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("query", "myQueryParameter")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"myQueryParameter"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions merges query parameters with default ones3`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("query2", "myQueryParameter")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","query2":"myQueryParameter"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions can override default headers4`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            headers = buildMap {
              put("x-algolia-api-key", "ALGOLIA_API_KEY")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertContainsAll("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}""", it.headers)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions merges headers with default ones5`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            headers = buildMap {
              put("x-algolia-api-key", "ALGOLIA_API_KEY")
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertContainsAll("""{"x-algolia-api-key":"ALGOLIA_API_KEY"}""", it.headers)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts booleans6`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("isItWorking", true)
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","isItWorking":"true"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts integers7`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("myParam", 2)
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","myParam":"2"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts list of string8`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("myParam", listOf("b and c", "d"))
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","myParam":"b%20and%20c%2Cd"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts list of booleans9`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("myParam", listOf(true, true, false))
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  @Test
  fun `requestOptions queryParameters accepts list of integers10`() = runTest {
    client.runTest(
      call = {
        customPost(
          path = "test/requestOptions",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "facet",
              JsonPrimitive("filters"),
            )
          },
          requestOptions = RequestOptions(
            urlParameters = buildMap {
              put("myParam", listOf(1, 2))
            },
          ),
        )
      },
      intercept = {
        assertEquals("/test/requestOptions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("POST"), it.method)
        assertQueryParams("""{"query":"parameters","myParam":"1%2C2"}""", it.url.encodedParameters)
        assertJsonBody("""{"facet":"filters"}""", it.body)
      },
    )
  }

  // customPut

  @Test
  fun `allow put method for a custom path with minimal parameters`() = runTest {
    client.runTest(
      call = {
        customPut(
          path = "test/minimal",
        )
      },
      intercept = {
        assertEquals("/test/minimal".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertJsonBody("""{}""", it.body)
      },
    )
  }

  @Test
  fun `allow put method for a custom path with all parameters1`() = runTest {
    client.runTest(
      call = {
        customPut(
          path = "test/all",
          parameters = mapOf("query" to "parameters"),
          body = buildJsonObject {
            put(
              "body",
              JsonPrimitive("parameters"),
            )
          },
        )
      },
      intercept = {
        assertEquals("/test/all".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("PUT"), it.method)
        assertQueryParams("""{"query":"parameters"}""", it.url.encodedParameters)
        assertJsonBody("""{"body":"parameters"}""", it.body)
      },
    )
  }

  // getAddToCartRate

  @Test
  fun `get getAddToCartRate with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getAddToCartRate(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/conversions/addToCartRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getAddToCartRate with all parameters1`() = runTest {
    client.runTest(
      call = {
        getAddToCartRate(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/conversions/addToCartRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getAverageClickPosition

  @Test
  fun `get getAverageClickPosition with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getAverageClickPosition(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/clicks/averageClickPosition".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getAverageClickPosition with all parameters1`() = runTest {
    client.runTest(
      call = {
        getAverageClickPosition(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/clicks/averageClickPosition".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getClickPositions

  @Test
  fun `get getClickPositions with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getClickPositions(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/clicks/positions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getClickPositions with all parameters1`() = runTest {
    client.runTest(
      call = {
        getClickPositions(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/clicks/positions".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getClickThroughRate

  @Test
  fun `get getClickThroughRate with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getClickThroughRate(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/clicks/clickThroughRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getClickThroughRate with all parameters1`() = runTest {
    client.runTest(
      call = {
        getClickThroughRate(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/clicks/clickThroughRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getConversionRate

  @Test
  fun `get getConversationRate with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getConversionRate(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/conversions/conversionRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getConversationRate with all parameters1`() = runTest {
    client.runTest(
      call = {
        getConversionRate(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/conversions/conversionRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getNoClickRate

  @Test
  fun `get getNoClickRate with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getNoClickRate(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/searches/noClickRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getNoClickRate with all parameters1`() = runTest {
    client.runTest(
      call = {
        getNoClickRate(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/searches/noClickRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getNoResultsRate

  @Test
  fun `get getNoResultsRate with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getNoResultsRate(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/searches/noResultRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getNoResultsRate with all parameters1`() = runTest {
    client.runTest(
      call = {
        getNoResultsRate(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/searches/noResultRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getPurchaseRate

  @Test
  fun `get getPurchaseRate with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getPurchaseRate(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/conversions/purchaseRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getPurchaseRate with all parameters1`() = runTest {
    client.runTest(
      call = {
        getPurchaseRate(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/conversions/purchaseRate".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getRevenue

  @Test
  fun `get getRevenue with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getRevenue(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/conversions/revenue".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getRevenue with all parameters1`() = runTest {
    client.runTest(
      call = {
        getRevenue(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/conversions/revenue".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getSearchesCount

  @Test
  fun `get getSearchesCount with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getSearchesCount(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/searches/count".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getSearchesCount with all parameters1`() = runTest {
    client.runTest(
      call = {
        getSearchesCount(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/searches/count".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getSearchesNoClicks

  @Test
  fun `get getSearchesNoClicks with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getSearchesNoClicks(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/searches/noClicks".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getSearchesNoClicks with all parameters1`() = runTest {
    client.runTest(
      call = {
        getSearchesNoClicks(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/searches/noClicks".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getSearchesNoResults

  @Test
  fun `get getSearchesNoResults with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getSearchesNoResults(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/searches/noResults".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getSearchesNoResults with all parameters1`() = runTest {
    client.runTest(
      call = {
        getSearchesNoResults(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/searches/noResults".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getStatus

  @Test
  fun `get getStatus with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getStatus(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/status".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getTopCountries

  @Test
  fun `get getTopCountries with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getTopCountries(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/countries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getTopCountries with all parameters1`() = runTest {
    client.runTest(
      call = {
        getTopCountries(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/countries".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getTopFilterAttributes

  @Test
  fun `get getTopFilterAttributes with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getTopFilterAttributes(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/filters".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getTopFilterAttributes with all parameters1`() = runTest {
    client.runTest(
      call = {
        getTopFilterAttributes(
          index = "index",
          search = "mySearch",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/filters".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","search":"mySearch","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getTopFilterForAttribute

  @Test
  fun `get getTopFilterForAttribute with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getTopFilterForAttribute(
          attribute = "myAttribute",
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/filters/myAttribute".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getTopFilterForAttribute with minimal parameters and multiple attributes1`() = runTest {
    client.runTest(
      call = {
        getTopFilterForAttribute(
          attribute = "myAttribute1,myAttribute2",
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/filters/myAttribute1%2CmyAttribute2".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getTopFilterForAttribute with all parameters2`() = runTest {
    client.runTest(
      call = {
        getTopFilterForAttribute(
          attribute = "myAttribute",
          index = "index",
          search = "mySearch",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/filters/myAttribute".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","search":"mySearch","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getTopFilterForAttribute with all parameters and multiple attributes3`() = runTest {
    client.runTest(
      call = {
        getTopFilterForAttribute(
          attribute = "myAttribute1,myAttribute2",
          index = "index",
          search = "mySearch",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/filters/myAttribute1%2CmyAttribute2".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","search":"mySearch","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getTopFiltersNoResults

  @Test
  fun `get getTopFiltersNoResults with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getTopFiltersNoResults(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/filters/noResults".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getTopFiltersNoResults with all parameters1`() = runTest {
    client.runTest(
      call = {
        getTopFiltersNoResults(
          index = "index",
          search = "mySearch",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/filters/noResults".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","search":"mySearch","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getTopHits

  @Test
  fun `get getTopHits with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getTopHits(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/hits".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getTopHits with all parameters1`() = runTest {
    client.runTest(
      call = {
        getTopHits(
          index = "index",
          search = "mySearch",
          clickAnalytics = true,
          revenueAnalytics = true,
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/hits".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","search":"mySearch","clickAnalytics":"true","revenueAnalytics":"true","startDate":"1999-09-19","endDate":"2001-01-01","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getTopSearches

  @Test
  fun `get getTopSearches with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getTopSearches(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/searches".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getTopSearches with all parameters1`() = runTest {
    client.runTest(
      call = {
        getTopSearches(
          index = "index",
          clickAnalytics = true,
          revenueAnalytics = true,
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          orderBy = OrderBy.entries.first { it.value == "searchCount" },
          direction = Direction.entries.first { it.value == "asc" },
          limit = 21,
          offset = 42,
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/searches".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","clickAnalytics":"true","revenueAnalytics":"true","startDate":"1999-09-19","endDate":"2001-01-01","orderBy":"searchCount","direction":"asc","limit":"21","offset":"42","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  // getUsersCount

  @Test
  fun `get getUsersCount with minimal parameters`() = runTest {
    client.runTest(
      call = {
        getUsersCount(
          index = "index",
        )
      },
      intercept = {
        assertEquals("/2/users/count".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }

  @Test
  fun `get getUsersCount with all parameters1`() = runTest {
    client.runTest(
      call = {
        getUsersCount(
          index = "index",
          startDate = "1999-09-19",
          endDate = "2001-01-01",
          tags = "tag",
        )
      },
      intercept = {
        assertEquals("/2/users/count".toPathSegments(), it.url.pathSegments)
        assertEquals(HttpMethod.parse("GET"), it.method)
        assertQueryParams("""{"index":"index","startDate":"1999-09-19","endDate":"2001-01-01","tags":"tag"}""", it.url.encodedParameters)
        assertNoBody(it.body)
      },
    )
  }
}
