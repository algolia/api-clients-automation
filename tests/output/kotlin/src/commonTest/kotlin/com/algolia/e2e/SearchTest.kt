// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
package com.algolia.e2e

import com.algolia.client.api.SearchClient
import com.algolia.client.configuration.*
import com.algolia.client.model.search.*
import com.algolia.client.transport.*
import com.algolia.utils.*
import io.github.cdimascio.dotenv.Dotenv
import io.ktor.http.*
import kotlinx.coroutines.test.*
import kotlinx.serialization.encodeToString
import kotlinx.serialization.json.*
import org.skyscreamer.jsonassert.JSONAssert
import org.skyscreamer.jsonassert.JSONCompareMode
import kotlin.test.*

class SearchTest {

  var client: SearchClient

  init {
    if (System.getenv("CI") == "true") {
      this.client = SearchClient(appId = System.getenv("ALGOLIA_APPLICATION_ID"), apiKey = System.getenv("ALGOLIA_ADMIN_KEY"))
    } else {
      val dotenv = Dotenv.configure().directory("../../").load()
      this.client = SearchClient(appId = dotenv["ALGOLIA_APPLICATION_ID"], apiKey = dotenv["ALGOLIA_ADMIN_KEY"])
    }
  }

  @Test
  fun `browse with minimal parameters`() = runTest {
    client.runTest(
      call = {
        browse(
          indexName = "cts_e2e_browse",
        )
      },
      response = {
        JSONAssert.assertEquals("{\"page\":0,\"nbHits\":33191,\"nbPages\":34,\"hitsPerPage\":1000,\"query\":\"\",\"params\":\"\"}", Json.encodeToString(it), JSONCompareMode.LENIENT)
      },
    )
  }

  @Test
  fun `getSettings`() = runTest {
    client.runTest(
      call = {
        getSettings(
          indexName = "cts_e2e_settings",
        )
      },
      response = {
        JSONAssert.assertEquals("{\"minWordSizefor1Typo\":4,\"minWordSizefor2Typos\":8,\"hitsPerPage\":100,\"maxValuesPerFacet\":100,\"paginationLimitedTo\":10,\"exactOnSingleWordQuery\":\"attribute\",\"ranking\":[\"typo\",\"geo\",\"words\",\"filters\",\"proximity\",\"attribute\",\"exact\",\"custom\"],\"separatorsToIndex\":\"\",\"removeWordsIfNoResults\":\"none\",\"queryType\":\"prefixLast\",\"highlightPreTag\":\"<em>\",\"highlightPostTag\":\"</em>\",\"alternativesAsExact\":[\"ignorePlurals\",\"singleWordSynonym\"]}", Json.encodeToString(it), JSONCompareMode.LENIENT)
      },
    )
  }

  @Test
  fun `search for a single hits request with minimal parameters4`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "cts_e2e_search_empty_index",
              ),
            ),
          ),
        )
      },
      response = {
        JSONAssert.assertEquals("{\"results\":[{\"hits\":[],\"page\":0,\"nbHits\":0,\"nbPages\":0,\"hitsPerPage\":20,\"exhaustiveNbHits\":true,\"exhaustiveTypo\":true,\"exhaustive\":{\"nbHits\":true,\"typo\":true},\"query\":\"\",\"params\":\"\",\"index\":\"cts_e2e_search_empty_index\",\"renderingContent\":{}}]}", Json.encodeToString(it), JSONCompareMode.LENIENT)
      },
    )
  }

  @Test
  fun `search with highlight and snippet results5`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "cts_e2e_highlight_snippet_results",
                query = "vim",
                attributesToSnippet = listOf("*:20"),
                attributesToHighlight = listOf("*"),
                attributesToRetrieve = listOf("*"),
              ),
            ),
          ),
        )
      },
      response = {
        JSONAssert.assertEquals("{\"results\":[{\"hits\":[{\"editor\":{\"name\":\"vim\",\"type\":\"beforeneovim\"},\"names\":[\"vim\",\":q\"],\"_snippetResult\":{\"editor\":{\"name\":{\"value\":\"<em>vim</em>\",\"matchLevel\":\"full\"},\"type\":{\"value\":\"beforeneovim\",\"matchLevel\":\"none\"}},\"names\":[{\"value\":\"<em>vim</em>\",\"matchLevel\":\"full\"},{\"value\":\":q\",\"matchLevel\":\"none\"}]},\"_highlightResult\":{\"editor\":{\"name\":{\"value\":\"<em>vim</em>\",\"matchLevel\":\"full\",\"fullyHighlighted\":true,\"matchedWords\":[\"vim\"]},\"type\":{\"value\":\"beforeneovim\",\"matchLevel\":\"none\",\"matchedWords\":[]}},\"names\":[{\"value\":\"<em>vim</em>\",\"matchLevel\":\"full\",\"fullyHighlighted\":true,\"matchedWords\":[\"vim\"]},{\"value\":\":q\",\"matchLevel\":\"none\",\"matchedWords\":[]}]}}],\"nbHits\":1,\"page\":0,\"nbPages\":1,\"hitsPerPage\":20,\"exhaustiveNbHits\":true,\"exhaustiveTypo\":true,\"exhaustive\":{\"nbHits\":true,\"typo\":true},\"query\":\"vim\",\"index\":\"cts_e2e_highlight_snippet_results\",\"renderingContent\":{}}]}", Json.encodeToString(it), JSONCompareMode.LENIENT)
      },
    )
  }

  @Test
  fun `search for a single facet request with minimal parameters8`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForFacets(
                indexName = "cts_e2e_search_facet",
                type = SearchTypeFacet.entries.first { it.value == "facet" },
                facet = "editor",
              ),
            ),
            strategy = SearchStrategy.entries.first { it.value == "stopIfEnoughMatches" },
          ),
        )
      },
      response = {
        JSONAssert.assertEquals("{\"results\":[{\"exhaustiveFacetsCount\":true,\"facetHits\":[{\"count\":1,\"highlighted\":\"goland\",\"value\":\"goland\"},{\"count\":1,\"highlighted\":\"neovim\",\"value\":\"neovim\"},{\"count\":1,\"highlighted\":\"visual studio\",\"value\":\"visual studio\"},{\"count\":1,\"highlighted\":\"vscode\",\"value\":\"vscode\"}]}]}", Json.encodeToString(it), JSONCompareMode.LENIENT)
      },
    )
  }

  @Test
  fun `search filters end to end14`() = runTest {
    client.runTest(
      call = {
        search(
          searchMethodParams = SearchMethodParams(
            requests = listOf(
              SearchForHits(
                indexName = "cts_e2e_search_facet",
                filters = "editor:'visual studio' OR editor:neovim",
              ),
              SearchForHits(
                indexName = "cts_e2e_search_facet",
                facetFilters = FacetFilters.of(listOf(FacetFilters.of("editor:'visual studio'"), FacetFilters.of("editor:neovim"))),
              ),
              SearchForHits(
                indexName = "cts_e2e_search_facet",
                facetFilters = FacetFilters.of(listOf(FacetFilters.of("editor:'visual studio'"), FacetFilters.of(listOf(FacetFilters.of("editor:neovim"))))),
              ),
              SearchForHits(
                indexName = "cts_e2e_search_facet",
                facetFilters = FacetFilters.of(listOf(FacetFilters.of("editor:'visual studio'"), FacetFilters.of(listOf(FacetFilters.of("editor:neovim"), FacetFilters.of(listOf(FacetFilters.of("editor:goland"))))))),
              ),
            ),
          ),
        )
      },
      response = {
        JSONAssert.assertEquals("{\"results\":[{\"hitsPerPage\":20,\"index\":\"cts_e2e_search_facet\",\"nbHits\":2,\"nbPages\":1,\"page\":0,\"hits\":[{\"editor\":\"visual studio\",\"_highlightResult\":{\"editor\":{\"value\":\"visual studio\",\"matchLevel\":\"none\"}}},{\"editor\":\"neovim\",\"_highlightResult\":{\"editor\":{\"value\":\"neovim\",\"matchLevel\":\"none\"}}}],\"query\":\"\",\"params\":\"filters=editor%3A%27visual+studio%27+OR+editor%3Aneovim\"},{\"hitsPerPage\":20,\"index\":\"cts_e2e_search_facet\",\"nbHits\":0,\"nbPages\":0,\"page\":0,\"hits\":[],\"query\":\"\",\"params\":\"facetFilters=%5B%22editor%3A%27visual+studio%27%22%2C%22editor%3Aneovim%22%5D\"},{\"hitsPerPage\":20,\"index\":\"cts_e2e_search_facet\",\"nbHits\":0,\"nbPages\":0,\"page\":0,\"hits\":[],\"query\":\"\",\"params\":\"facetFilters=%5B%22editor%3A%27visual+studio%27%22%2C%5B%22editor%3Aneovim%22%5D%5D\"},{\"hitsPerPage\":20,\"index\":\"cts_e2e_search_facet\",\"nbHits\":0,\"nbPages\":0,\"page\":0,\"hits\":[],\"query\":\"\",\"params\":\"facetFilters=%5B%22editor%3A%27visual+studio%27%22%2C%5B%22editor%3Aneovim%22%2C%5B%22editor%3Agoland%22%5D%5D%5D\"}]}", Json.encodeToString(it), JSONCompareMode.LENIENT)
      },
    )
  }

  @Test
  fun `get searchDictionaryEntries results with minimal parameters`() = runTest {
    client.runTest(
      call = {
        searchDictionaryEntries(
          dictionaryName = DictionaryType.entries.first { it.value == "stopwords" },
          searchDictionaryEntriesParams = SearchDictionaryEntriesParams(
            query = "about",
          ),
        )
      },
      response = {
        JSONAssert.assertEquals("{\"hits\":[{\"objectID\":\"86ef58032f47d976ca7130a896086783\",\"language\":\"en\",\"word\":\"about\"}],\"page\":0,\"nbHits\":1,\"nbPages\":1}", Json.encodeToString(it), JSONCompareMode.LENIENT)
      },
    )
  }

  @Test
  fun `search with special characters in indexName1`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "cts_e2e_space in index",
        )
      },
    )
  }

  @Test
  fun `single search retrieve snippets3`() = runTest {
    client.runTest(
      call = {
        searchSingleIndex(
          indexName = "cts_e2e_browse",
          searchParams = SearchParamsObject(
            query = "batman mask of the phantasm",
            attributesToRetrieve = listOf("*"),
            attributesToSnippet = listOf("*:20"),
          ),
        )
      },
      response = {
        JSONAssert.assertEquals("{\"nbHits\":1,\"hits\":[{\"_snippetResult\":{\"genres\":[{\"value\":\"Animated\",\"matchLevel\":\"none\"},{\"value\":\"Superhero\",\"matchLevel\":\"none\"},{\"value\":\"Romance\",\"matchLevel\":\"none\"}],\"year\":{\"value\":\"1993\",\"matchLevel\":\"none\"}},\"_highlightResult\":{\"genres\":[{\"value\":\"Animated\",\"matchLevel\":\"none\",\"matchedWords\":[]},{\"value\":\"Superhero\",\"matchLevel\":\"none\",\"matchedWords\":[]},{\"value\":\"Romance\",\"matchLevel\":\"none\",\"matchedWords\":[]}],\"year\":{\"value\":\"1993\",\"matchLevel\":\"none\",\"matchedWords\":[]}}}]}", Json.encodeToString(it), JSONCompareMode.LENIENT)
      },
    )
  }

  @Test
  fun `setSettings with minimal parameters1`() = runTest {
    client.runTest(
      call = {
        setSettings(
          indexName = "cts_e2e_settings",
          indexSettings = IndexSettings(
            paginationLimitedTo = 10,
          ),
          forwardToReplicas = true,
        )
      },
    )
  }
}
