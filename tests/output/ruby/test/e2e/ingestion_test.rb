# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
require "algolia"
require "test/unit"
require "dotenv"

require_relative "../helpers"

Dotenv.load("../../.env")

class TestIngestionClientE2E < Test::Unit::TestCase
  include Algolia::Ingestion
  def setup
    @client = Algolia::IngestionClient.create(
      ENV.fetch("ALGOLIA_APPLICATION_ID", nil),
      ENV.fetch("ALGOLIA_ADMIN_KEY", nil),
      "us"
    )
  end

  # enableTask
  def test_enable_task
    res = @client.enable_task_with_http_info("76ab4c2a-ce17-496f-b7a6-506dc59ee498")

    assert_equal(res.status, 200)
    res = @client.enable_task("76ab4c2a-ce17-496f-b7a6-506dc59ee498")
    expected_body = JSON.parse("{\"taskID\":\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"}")
    assert_equal(expected_body, union(expected_body, JSON.parse(res.to_json)))
  end

  # enableTaskV1
  def test_enable_task_v1
    res = @client.enable_task_v1_with_http_info("76ab4c2a-ce17-496f-b7a6-506dc59ee498")

    assert_equal(res.status, 200)
    res = @client.enable_task_v1("76ab4c2a-ce17-496f-b7a6-506dc59ee498")
    expected_body = JSON.parse("{\"taskID\":\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"}")
    assert_equal(expected_body, union(expected_body, JSON.parse(res.to_json)))
  end

  # getSource
  def test_get_source
    res = @client.get_source_with_http_info("75eeb306-51d3-4e5e-a279-3c92bd8893ac")

    assert_equal(res.status, 200)
    res = @client.get_source("75eeb306-51d3-4e5e-a279-3c92bd8893ac")
    expected_body = JSON.parse(
      "{\"sourceID\":\"75eeb306-51d3-4e5e-a279-3c92bd8893ac\",\"name\":\"cts_e2e_browse\",\"type\":\"json\",\"input\":{\"url\":\"https://raw.githubusercontent.com/prust/wikipedia-movie-data/master/movies.json\"}}"
    )
    assert_equal(expected_body, union(expected_body, JSON.parse(res.to_json)))
  end

  # getAuthentications with query params
  def test_list_authentications1
    res = @client.list_authentications_with_http_info(2, 1, ["basic", "algolia"], ["none"], "createdAt", "asc")

    assert_equal(res.status, 200)
    res = @client.list_authentications(2, 1, ["basic", "algolia"], ["none"], "createdAt", "asc")
    expected_body = JSON.parse(
      "{\"pagination\":{\"page\":1,\"itemsPerPage\":2},\"authentications\":[{\"authenticationID\":\"474f050f-a771-464c-a016-323538029f5f\",\"type\":\"algolia\",\"name\":\"algolia-auth-1677060483885\",\"input\":{},\"createdAt\":\"2023-02-22T10:08:04Z\",\"updatedAt\":\"2023-10-25T08:41:56Z\"},{}]}"
    )
    assert_equal(expected_body, union(expected_body, JSON.parse(res.to_json)))
  end

  # searchTasks
  def test_search_tasks
    res = @client.search_tasks_with_http_info(
      TaskSearch.new(
        task_ids: [
          "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
          "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
          "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
        ]
      )
    )

    assert_equal(res.status, 200)
    res = @client.search_tasks(
      TaskSearch.new(
        task_ids: [
          "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
          "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
          "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
        ]
      )
    )
    expected_body = JSON.parse(
      "[{\"taskID\":\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\"sourceID\":\"75eeb306-51d3-4e5e-a279-3c92bd8893ac\",\"destinationID\":\"506d79fa-e29d-4bcf-907c-6b6a41172153\",\"enabled\":true,\"failureThreshold\":0,\"action\":\"replace\",\"createdAt\":\"2024-01-08T16:47:41Z\"}]"
    )
    assert_equal(expected_body, union(expected_body, JSON.parse(res.to_json)))
  end

  # searchTasksV1
  def test_search_tasks_v1
    res = @client.search_tasks_v1_with_http_info(
      TaskSearch.new(
        task_ids: [
          "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
          "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
          "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
        ]
      )
    )

    assert_equal(res.status, 200)
    res = @client.search_tasks_v1(
      TaskSearch.new(
        task_ids: [
          "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
          "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
          "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
        ]
      )
    )
    expected_body = JSON.parse(
      "[{\"taskID\":\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\",\"sourceID\":\"75eeb306-51d3-4e5e-a279-3c92bd8893ac\",\"destinationID\":\"506d79fa-e29d-4bcf-907c-6b6a41172153\",\"trigger\":{\"type\":\"onDemand\"},\"enabled\":true,\"failureThreshold\":0,\"action\":\"replace\",\"createdAt\":\"2024-01-08T16:47:41Z\"}]"
    )
    assert_equal(expected_body, union(expected_body, JSON.parse(res.to_json)))
  end

end
