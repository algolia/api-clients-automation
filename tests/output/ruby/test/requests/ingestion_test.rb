# Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
require "algolia"
require "test/unit"

class TestIngestionClient < Test::Unit::TestCase
  include Algolia::Ingestion
  def setup
    @client = Algolia::IngestionClient.create(
      "APP_ID",
      "API_KEY",
      "us",
      {requester: Algolia::Transport::EchoRequester.new}
    )
  end

  # createAuthenticationOAuth
  def test_create_authentication
    req = @client.create_authentication_with_http_info(
      AuthenticationCreate.new(
        type: "oauth",
        name: "authName",
        input: AuthOAuth.new(url: "http://test.oauth", client_id: "myID", client_secret: "mySecret")
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/authentications", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"type\":\"oauth\",\"name\":\"authName\",\"input\":{\"url\":\"http://test.oauth\",\"client_id\":\"myID\",\"client_secret\":\"mySecret\"}}"
      ),
      JSON.parse(req.body)
    )
  end

  # createAuthenticationAlgolia
  def test_create_authentication1
    req = @client.create_authentication_with_http_info(
      AuthenticationCreate.new(
        type: "algolia",
        name: "authName",
        input: AuthAlgolia.new(app_id: "myappID", api_key: "randomApiKey")
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/authentications", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"type\":\"algolia\",\"name\":\"authName\",\"input\":{\"appID\":\"myappID\",\"apiKey\":\"randomApiKey\"}}"
      ),
      JSON.parse(req.body)
    )
  end

  # createDestination
  def test_create_destination
    req = @client.create_destination_with_http_info(
      DestinationCreate.new(
        type: "search",
        name: "destinationName",
        input: DestinationIndexName.new(index_name: "full_name______"),
        authentication_id: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/destinations", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"type\":\"search\",\"name\":\"destinationName\",\"input\":{\"indexName\":\"full_name______\"},\"authenticationID\":\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"}"
      ),
      JSON.parse(req.body)
    )
  end

  # with transformationIDs
  def test_create_destination1
    req = @client.create_destination_with_http_info(
      DestinationCreate.new(
        type: "search",
        name: "destinationName",
        input: DestinationIndexName.new(index_name: "full_name______"),
        transformation_ids: ["6c02aeb1-775e-418e-870b-1faccd4b2c0f"]
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/destinations", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"type\":\"search\",\"name\":\"destinationName\",\"input\":{\"indexName\":\"full_name______\"},\"transformationIDs\":[\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"]}"
      ),
      JSON.parse(req.body)
    )
  end

  # createSource
  def test_create_source
    req = @client.create_source_with_http_info(
      SourceCreate.new(
        type: "commercetools",
        name: "sourceName",
        input: SourceCommercetools.new(
          store_keys: ["myStore"],
          locales: ["de"],
          url: "http://commercetools.com",
          project_key: "keyID"
        ),
        authentication_id: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/sources", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"type\":\"commercetools\",\"name\":\"sourceName\",\"input\":{\"storeKeys\":[\"myStore\"],\"locales\":[\"de\"],\"url\":\"http://commercetools.com\",\"projectKey\":\"keyID\"},\"authenticationID\":\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"}"
      ),
      JSON.parse(req.body)
    )
  end

  # task without cron
  def test_create_task
    req = @client.create_task_with_http_info(
      TaskCreate.new(source_id: "search", destination_id: "destinationName", action: "replace")
    )

    assert_equal(:post, req.method)
    assert_equal("/2/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse("{\"sourceID\":\"search\",\"destinationID\":\"destinationName\",\"action\":\"replace\"}"),
      JSON.parse(req.body)
    )
  end

  # task with cron
  def test_create_task1
    req = @client.create_task_with_http_info(
      TaskCreate.new(source_id: "search", destination_id: "destinationName", cron: "* * * * *", action: "replace")
    )

    assert_equal(:post, req.method)
    assert_equal("/2/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"sourceID\":\"search\",\"destinationID\":\"destinationName\",\"cron\":\"* * * * *\",\"action\":\"replace\"}"
      ),
      JSON.parse(req.body)
    )
  end

  # task shopify
  def test_create_task2
    req = @client.create_task_with_http_info(
      TaskCreate.new(
        source_id: "search",
        destination_id: "destinationName",
        cron: "* * * * *",
        action: "replace",
        input: DockerStreamsInput.new(streams: [DockerStreams.new(name: "foo", sync_mode: "incremental")])
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/2/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"sourceID\":\"search\",\"destinationID\":\"destinationName\",\"cron\":\"* * * * *\",\"action\":\"replace\",\"input\":{\"streams\":[{\"name\":\"foo\",\"syncMode\":\"incremental\"}]}}"
      ),
      JSON.parse(req.body)
    )
  end

  # createTaskOnDemand
  def test_create_task_v1
    req = @client.create_task_v1_with_http_info(
      TaskCreateV1.new(
        source_id: "search",
        destination_id: "destinationName",
        trigger: OnDemandTriggerInput.new(type: "onDemand"),
        action: "replace"
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"sourceID\":\"search\",\"destinationID\":\"destinationName\",\"trigger\":{\"type\":\"onDemand\"},\"action\":\"replace\"}"
      ),
      JSON.parse(req.body)
    )
  end

  # createTaskSchedule
  def test_create_task_v11
    req = @client.create_task_v1_with_http_info(
      TaskCreateV1.new(
        source_id: "search",
        destination_id: "destinationName",
        trigger: ScheduleTriggerInput.new(type: "schedule", cron: "* * * * *"),
        action: "replace"
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"sourceID\":\"search\",\"destinationID\":\"destinationName\",\"trigger\":{\"type\":\"schedule\",\"cron\":\"* * * * *\"},\"action\":\"replace\"}"
      ),
      JSON.parse(req.body)
    )
  end

  # createTaskSubscription
  def test_create_task_v12
    req = @client.create_task_v1_with_http_info(
      TaskCreateV1.new(
        source_id: "search",
        destination_id: "destinationName",
        trigger: OnDemandTriggerInput.new(type: "onDemand"),
        action: "replace"
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"sourceID\":\"search\",\"destinationID\":\"destinationName\",\"trigger\":{\"type\":\"onDemand\"},\"action\":\"replace\"}"
      ),
      JSON.parse(req.body)
    )
  end

  # task shopify
  def test_create_task_v13
    req = @client.create_task_v1_with_http_info(
      TaskCreateV1.new(
        source_id: "search",
        destination_id: "destinationName",
        trigger: OnDemandTriggerInput.new(type: "onDemand"),
        action: "replace",
        input: DockerStreamsInput.new(streams: [DockerStreams.new(name: "foo", sync_mode: "incremental")])
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"sourceID\":\"search\",\"destinationID\":\"destinationName\",\"trigger\":{\"type\":\"onDemand\"},\"action\":\"replace\",\"input\":{\"streams\":[{\"name\":\"foo\",\"syncMode\":\"incremental\"}]}}"
      ),
      JSON.parse(req.body)
    )
  end

  # createTransformation
  def test_create_transformation
    req = @client.create_transformation_with_http_info(
      TransformationCreate.new(code: "foo", name: "bar", description: "baz")
    )

    assert_equal(:post, req.method)
    assert_equal("/1/transformations", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"code\":\"foo\",\"name\":\"bar\",\"description\":\"baz\"}"), JSON.parse(req.body))
  end

  # allow del method for a custom path with minimal parameters
  def test_custom_delete
    req = @client.custom_delete_with_http_info("test/minimal")

    assert_equal(:delete, req.method)
    assert_equal("/test/minimal", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # allow del method for a custom path with all parameters
  def test_custom_delete1
    req = @client.custom_delete_with_http_info("test/all", {query: "parameters"})

    assert_equal(:delete, req.method)
    assert_equal("/test/all", req.path)
    assert_equal({:"query" => "parameters"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # allow get method for a custom path with minimal parameters
  def test_custom_get
    req = @client.custom_get_with_http_info("test/minimal")

    assert_equal(:get, req.method)
    assert_equal("/test/minimal", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # allow get method for a custom path with all parameters
  def test_custom_get1
    req = @client.custom_get_with_http_info("test/all", {query: "parameters with space"})

    assert_equal(:get, req.method)
    assert_equal("/test/all", req.path)
    assert_equal({:"query" => "parameters%20with%20space"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # requestOptions should be escaped too
  def test_custom_get2
    req = @client.custom_get_with_http_info(
      "test/all",
      {query: "to be overriden"},
      {
        :header_params => JSON.parse("{\"x-header-1\":\"spaces are left alone\"}", :symbolize_names => true),
        :query_params => JSON.parse(
          "{\"query\":\"parameters with space\",\"and an array\":[\"array\",\"with spaces\"]}",
          :symbolize_names => true
        )
      }
    )

    assert_equal(:get, req.method)
    assert_equal("/test/all", req.path)
    assert_equal(
      {:"query" => "parameters%20with%20space", :"and%20an%20array" => "array%2Cwith%20spaces"}.to_a,
      req.query_params.to_a
    )
    assert(
      ({:"x-header-1" => "spaces are left alone"}.transform_keys(&:to_s).to_a - req.headers.to_a).empty?,
      req.headers.to_s
    )

    assert(req.body.nil?, "body is not nil")
  end

  # allow post method for a custom path with minimal parameters
  def test_custom_post
    req = @client.custom_post_with_http_info("test/minimal")

    assert_equal(:post, req.method)
    assert_equal("/test/minimal", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{}"), JSON.parse(req.body))
  end

  # allow post method for a custom path with all parameters
  def test_custom_post1
    req = @client.custom_post_with_http_info("test/all", {query: "parameters"}, {body: "parameters"})

    assert_equal(:post, req.method)
    assert_equal("/test/all", req.path)
    assert_equal({:"query" => "parameters"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"body\":\"parameters\"}"), JSON.parse(req.body))
  end

  # requestOptions can override default query parameters
  def test_custom_post2
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:query_params => JSON.parse("{\"query\":\"myQueryParameter\"}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "myQueryParameter"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # requestOptions merges query parameters with default ones
  def test_custom_post3
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:query_params => JSON.parse("{\"query2\":\"myQueryParameter\"}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "parameters", :"query2" => "myQueryParameter"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # requestOptions can override default headers
  def test_custom_post4
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:header_params => JSON.parse("{\"x-algolia-api-key\":\"myApiKey\"}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "parameters"}.to_a, req.query_params.to_a)
    assert(
      ({:"x-algolia-api-key" => "myApiKey"}.transform_keys(&:to_s).to_a - req.headers.to_a).empty?,
      req.headers.to_s
    )
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # requestOptions merges headers with default ones
  def test_custom_post5
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:header_params => JSON.parse("{\"x-algolia-api-key\":\"myApiKey\"}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "parameters"}.to_a, req.query_params.to_a)
    assert(
      ({:"x-algolia-api-key" => "myApiKey"}.transform_keys(&:to_s).to_a - req.headers.to_a).empty?,
      req.headers.to_s
    )
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # requestOptions queryParameters accepts booleans
  def test_custom_post6
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:query_params => JSON.parse("{\"isItWorking\":true}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "parameters", :"isItWorking" => "true"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # requestOptions queryParameters accepts integers
  def test_custom_post7
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:query_params => JSON.parse("{\"myParam\":2}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "parameters", :"myParam" => "2"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # requestOptions queryParameters accepts list of string
  def test_custom_post8
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:query_params => JSON.parse("{\"myParam\":[\"b and c\",\"d\"]}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "parameters", :"myParam" => "b%20and%20c%2Cd"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # requestOptions queryParameters accepts list of booleans
  def test_custom_post9
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:query_params => JSON.parse("{\"myParam\":[true,true,false]}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "parameters", :"myParam" => "true%2Ctrue%2Cfalse"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # requestOptions queryParameters accepts list of integers
  def test_custom_post10
    req = @client.custom_post_with_http_info(
      "test/requestOptions",
      {query: "parameters"},
      {facet: "filters"},
      {:query_params => JSON.parse("{\"myParam\":[1,2]}", :symbolize_names => true)}
    )

    assert_equal(:post, req.method)
    assert_equal("/test/requestOptions", req.path)
    assert_equal({:"query" => "parameters", :"myParam" => "1%2C2"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"facet\":\"filters\"}"), JSON.parse(req.body))
  end

  # allow put method for a custom path with minimal parameters
  def test_custom_put
    req = @client.custom_put_with_http_info("test/minimal")

    assert_equal(:put, req.method)
    assert_equal("/test/minimal", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{}"), JSON.parse(req.body))
  end

  # allow put method for a custom path with all parameters
  def test_custom_put1
    req = @client.custom_put_with_http_info("test/all", {query: "parameters"}, {body: "parameters"})

    assert_equal(:put, req.method)
    assert_equal("/test/all", req.path)
    assert_equal({:"query" => "parameters"}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"body\":\"parameters\"}"), JSON.parse(req.body))
  end

  # deleteAuthentication
  def test_delete_authentication
    req = @client.delete_authentication_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:delete, req.method)
    assert_equal("/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # deleteDestination
  def test_delete_destination
    req = @client.delete_destination_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:delete, req.method)
    assert_equal("/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # deleteSource
  def test_delete_source
    req = @client.delete_source_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:delete, req.method)
    assert_equal("/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # deleteTask
  def test_delete_task
    req = @client.delete_task_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:delete, req.method)
    assert_equal("/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # deleteTaskV1
  def test_delete_task_v1
    req = @client.delete_task_v1_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:delete, req.method)
    assert_equal("/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # deleteTransformation
  def test_delete_transformation
    req = @client.delete_transformation_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:delete, req.method)
    assert_equal("/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # disableTask
  def test_disable_task
    req = @client.disable_task_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:put, req.method)
    assert_equal("/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
  end

  # disableTaskV1
  def test_disable_task_v1
    req = @client.disable_task_v1_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:put, req.method)
    assert_equal("/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
  end

  # enableTask
  def test_enable_task
    req = @client.enable_task_with_http_info("76ab4c2a-ce17-496f-b7a6-506dc59ee498")

    assert_equal(:put, req.method)
    assert_equal("/2/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
  end

  # enableTaskV1
  def test_enable_task_v1
    req = @client.enable_task_v1_with_http_info("76ab4c2a-ce17-496f-b7a6-506dc59ee498")

    assert_equal(:put, req.method)
    assert_equal("/1/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
  end

  # getAuthentication
  def test_get_authentication
    req = @client.get_authentication_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:get, req.method)
    assert_equal("/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getDestination
  def test_get_destination
    req = @client.get_destination_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:get, req.method)
    assert_equal("/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getEvent
  def test_get_event
    req = @client.get_event_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      "6c02aeb1-775e-418e-870b-1faccd4b2c0c"
    )

    assert_equal(:get, req.method)
    assert_equal("/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events/6c02aeb1-775e-418e-870b-1faccd4b2c0c", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getRun
  def test_get_run
    req = @client.get_run_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:get, req.method)
    assert_equal("/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getSource
  def test_get_source
    req = @client.get_source_with_http_info("75eeb306-51d3-4e5e-a279-3c92bd8893ac")

    assert_equal(:get, req.method)
    assert_equal("/1/sources/75eeb306-51d3-4e5e-a279-3c92bd8893ac", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getTask
  def test_get_task
    req = @client.get_task_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:get, req.method)
    assert_equal("/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getTaskV1
  def test_get_task_v1
    req = @client.get_task_v1_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:get, req.method)
    assert_equal("/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getTransformation
  def test_get_transformation
    req = @client.get_transformation_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:get, req.method)
    assert_equal("/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getAuthentications
  def test_list_authentications
    req = @client.list_authentications_with_http_info

    assert_equal(:get, req.method)
    assert_equal("/1/authentications", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getAuthentications with query params
  def test_list_authentications1
    req = @client.list_authentications_with_http_info(2, 1, ["basic", "algolia"], ["none"], "createdAt", "asc")

    assert_equal(:get, req.method)
    assert_equal("/1/authentications", req.path)
    assert_equal(
      {
        :"itemsPerPage" => "2",
        :"page" => "1",
        :"type" => "basic%2Calgolia",
        :"platform" => "none",
        :"sort" => "createdAt",
        :"order" => "asc"
      }.to_a,
      req.query_params.to_a
    )
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getDestinations
  def test_list_destinations
    req = @client.list_destinations_with_http_info

    assert_equal(:get, req.method)
    assert_equal("/1/destinations", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # getEvents
  def test_list_events
    req = @client.list_events_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:get, req.method)
    assert_equal("/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # listRuns
  def test_list_runs
    req = @client.list_runs_with_http_info

    assert_equal(:get, req.method)
    assert_equal("/1/runs", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # listSources
  def test_list_sources
    req = @client.list_sources_with_http_info

    assert_equal(:get, req.method)
    assert_equal("/1/sources", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # listTasks
  def test_list_tasks
    req = @client.list_tasks_with_http_info

    assert_equal(:get, req.method)
    assert_equal("/2/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # listTasksV1
  def test_list_tasks_v1
    req = @client.list_tasks_v1_with_http_info

    assert_equal(:get, req.method)
    assert_equal("/1/tasks", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # listTransformationModels
  def test_list_transformation_models
    req = @client.list_transformation_models_with_http_info

    assert_equal(:get, req.method)
    assert_equal("/1/transformations/copilot", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # listTransformations
  def test_list_transformations
    req = @client.list_transformations_with_http_info

    assert_equal(:get, req.method)
    assert_equal("/1/transformations", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)

    assert(req.body.nil?, "body is not nil")
  end

  # pushTask
  def test_push_task
    req = @client.push_task_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      BatchWriteParams.new(
        requests: [
          BatchRequest.new(action: "addObject", body: {key: "bar", foo: "1"}),
          BatchRequest.new(action: "addObject", body: {key: "baz", foo: "2"})
        ]
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/push", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"requests\":[{\"action\":\"addObject\",\"body\":{\"key\":\"bar\",\"foo\":\"1\"}},{\"action\":\"addObject\",\"body\":{\"key\":\"baz\",\"foo\":\"2\"}}]}"
      ),
      JSON.parse(req.body)
    )
  end

  # runSource
  def test_run_source
    req = @client.run_source_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      RunSourcePayload.new(
        index_to_include: ["products_us", "products eu"],
        entity_ids: ["1234", "5678"],
        entity_type: "product"
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"indexToInclude\":[\"products_us\",\"products eu\"],\"entityIDs\":[\"1234\",\"5678\"],\"entityType\":\"product\"}"
      ),
      JSON.parse(req.body)
    )
  end

  # runTask
  def test_run_task
    req = @client.run_task_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:post, req.method)
    assert_equal("/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
  end

  # runTaskV1
  def test_run_task_v1
    req = @client.run_task_v1_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:post, req.method)
    assert_equal("/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
  end

  # searchAuthentications
  def test_search_authentications
    req = @client.search_authentications_with_http_info(
      AuthenticationSearch.new(
        authentication_ids: ["6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"]
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/authentications/search", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"authenticationIDs\":[\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"]}"
      ),
      JSON.parse(req.body)
    )
  end

  # searchDestinations
  def test_search_destinations
    req = @client.search_destinations_with_http_info(
      DestinationSearch.new(
        destination_ids: ["6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"]
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/destinations/search", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"destinationIDs\":[\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"]}"
      ),
      JSON.parse(req.body)
    )
  end

  # searchSources
  def test_search_sources
    req = @client.search_sources_with_http_info(
      SourceSearch.new(source_ids: ["6c02aeb1-775e-418e-870b-1faccd4b2c0f", "947ac9c4-7e58-4c87-b1e7-14a68e99699a"])
    )

    assert_equal(:post, req.method)
    assert_equal("/1/sources/search", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse("{\"sourceIDs\":[\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\"947ac9c4-7e58-4c87-b1e7-14a68e99699a\"]}"),
      JSON.parse(req.body)
    )
  end

  # searchTasks
  def test_search_tasks
    req = @client.search_tasks_with_http_info(
      TaskSearch.new(
        task_ids: [
          "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
          "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
          "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
        ]
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/2/tasks/search", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"taskIDs\":[\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"]}"
      ),
      JSON.parse(req.body)
    )
  end

  # searchTasksV1
  def test_search_tasks_v1
    req = @client.search_tasks_v1_with_http_info(
      TaskSearch.new(
        task_ids: [
          "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
          "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
          "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
        ]
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/tasks/search", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"taskIDs\":[\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"]}"
      ),
      JSON.parse(req.body)
    )
  end

  # searchTransformations
  def test_search_transformations
    req = @client.search_transformations_with_http_info(
      TransformationSearch.new(
        transformation_ids: [
          "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
          "947ac9c4-7e58-4c87-b1e7-14a68e99699a",
          "76ab4c2a-ce17-496f-b7a6-506dc59ee498"
        ]
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/transformations/search", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"transformationIDs\":[\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\",\"947ac9c4-7e58-4c87-b1e7-14a68e99699a\",\"76ab4c2a-ce17-496f-b7a6-506dc59ee498\"]}"
      ),
      JSON.parse(req.body)
    )
  end

  # triggerDockerSourceDiscover
  def test_trigger_docker_source_discover
    req = @client.trigger_docker_source_discover_with_http_info("6c02aeb1-775e-418e-870b-1faccd4b2c0f")

    assert_equal(:post, req.method)
    assert_equal("/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/discover", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
  end

  # tryTransformation
  def test_try_transformation
    req = @client.try_transformation_with_http_info(TransformationTry.new(code: "foo", sample_record: {bar: "baz"}))

    assert_equal(:post, req.method)
    assert_equal("/1/transformations/try", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"code\":\"foo\",\"sampleRecord\":{\"bar\":\"baz\"}}"), JSON.parse(req.body))
  end

  # updateAuthentication
  def test_update_authentication
    req = @client.update_authentication_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      AuthenticationUpdate.new(name: "newName")
    )

    assert_equal(:patch, req.method)
    assert_equal("/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"name\":\"newName\"}"), JSON.parse(req.body))
  end

  # updateDestination
  def test_update_destination
    req = @client.update_destination_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      DestinationUpdate.new(name: "newName")
    )

    assert_equal(:patch, req.method)
    assert_equal("/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"name\":\"newName\"}"), JSON.parse(req.body))
  end

  # updateSource
  def test_update_source
    req = @client.update_source_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      SourceUpdate.new(name: "newName")
    )

    assert_equal(:patch, req.method)
    assert_equal("/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"name\":\"newName\"}"), JSON.parse(req.body))
  end

  # updateTask
  def test_update_task
    req = @client.update_task_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      TaskUpdate.new(enabled: false, cron: "* * * * *")
    )

    assert_equal(:patch, req.method)
    assert_equal("/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"enabled\":false,\"cron\":\"* * * * *\"}"), JSON.parse(req.body))
  end

  # updateTaskV1
  def test_update_task_v1
    req = @client.update_task_v1_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      TaskUpdateV1.new(enabled: false)
    )

    assert_equal(:patch, req.method)
    assert_equal("/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"enabled\":false}"), JSON.parse(req.body))
  end

  # updateTransformation
  def test_update_transformation
    req = @client.update_transformation_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      TransformationCreate.new(code: "foo", name: "bar", description: "baz")
    )

    assert_equal(:put, req.method)
    assert_equal("/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"code\":\"foo\",\"name\":\"bar\",\"description\":\"baz\"}"), JSON.parse(req.body))
  end

  # validateSource
  def test_validate_source
    req = @client.validate_source_with_http_info(
      SourceCreate.new(
        type: "commercetools",
        name: "sourceName",
        input: SourceCommercetools.new(
          store_keys: ["myStore"],
          locales: ["de"],
          url: "http://commercetools.com",
          project_key: "keyID"
        ),
        authentication_id: "6c02aeb1-775e-418e-870b-1faccd4b2c0f"
      )
    )

    assert_equal(:post, req.method)
    assert_equal("/1/sources/validate", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(
      JSON.parse(
        "{\"type\":\"commercetools\",\"name\":\"sourceName\",\"input\":{\"storeKeys\":[\"myStore\"],\"locales\":[\"de\"],\"url\":\"http://commercetools.com\",\"projectKey\":\"keyID\"},\"authenticationID\":\"6c02aeb1-775e-418e-870b-1faccd4b2c0f\"}"
      ),
      JSON.parse(req.body)
    )
  end

  # validateSourceBeforeUpdate
  def test_validate_source_before_update
    req = @client.validate_source_before_update_with_http_info(
      "6c02aeb1-775e-418e-870b-1faccd4b2c0f",
      SourceUpdate.new(name: "newName")
    )

    assert_equal(:post, req.method)
    assert_equal("/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/validate", req.path)
    assert_equal({}.to_a, req.query_params.to_a)
    assert(({}.to_a - req.headers.to_a).empty?, req.headers.to_s)
    assert_equal(JSON.parse("{\"name\":\"newName\"}"), JSON.parse(req.body))
  end

end
