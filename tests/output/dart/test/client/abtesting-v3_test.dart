// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import 'package:algolia_client_abtesting_v3/algolia_client_abtesting_v3.dart';
import 'package:algolia_test/algolia_test.dart';
import 'package:test/test.dart';
import 'package:test_api/hooks.dart';
import 'dart:io' show Platform;

void main() {
  test('calls api with correct user agent', () async {
    final requester = RequestInterceptor();
    final client = AbtestingV3Client(
      appId: 'appId',
      apiKey: 'apiKey',
      region: 'us',
      options: ClientOptions(requester: requester),
    );
    requester.setOnRequest((request) {
      TestHandle.current.markSkipped('User agent added using an interceptor');
    });
    try {
      final res = await client.customPost(
        path: "1/test",
      );
    } on InterceptionException catch (_) {
      // Ignore InterceptionException
    }
  });

  test('the user agent contains the latest version', () async {
    final requester = RequestInterceptor();
    final client = AbtestingV3Client(
      appId: 'appId',
      apiKey: 'apiKey',
      region: 'us',
      options: ClientOptions(requester: requester),
    );
    requester.setOnRequest((request) {
      TestHandle.current.markSkipped('User agent added using an interceptor');
    });
    try {
      final res = await client.customPost(
        path: "1/test",
      );
    } on InterceptionException catch (_) {
      // Ignore InterceptionException
    }
  });

  test('uses the correct region', () async {
    final requester = RequestInterceptor();
    final client = AbtestingV3Client(
        appId: "my-app-id",
        apiKey: "my-api-key",
        region: 'us',
        options: ClientOptions(requester: requester));
    requester.setOnRequest((request) {
      expect(request.host.url, "analytics.us.algolia.com");
    });
    try {
      final res = await client.getABTest(
        id: 123,
      );
    } on InterceptionException catch (_) {
      // Ignore InterceptionException
    }
  });

  test('throws when incorrect region is given', () async {
    final requester = RequestInterceptor();
    await expectError(
      '`region` must be one of the following: de, us',
      () async {
        final client = AbtestingV3Client(
            appId: "my-app-id",
            apiKey: "my-api-key",
            region: 'not_a_region',
            options: ClientOptions(requester: requester));
      },
    );
  });

  test('switch API key', () async {
    final requester = RequestInterceptor();
    final client = AbtestingV3Client(
        appId: "test-app-id",
        apiKey: "test-api-key",
        region: 'us',
        options: ClientOptions(hosts: [
          Host.create(
              url:
                  '${Platform.environment['CI'] == 'true' ? 'localhost' : 'host.docker.internal'}:6683',
              scheme: 'http'),
        ]));
    {
      requester.setOnRequest((request) {});
      try {
        final res = await client.customGet(
          path: "check-api-key/1",
        );
        expectBody(res, """{"headerAPIKeyValue":"test-api-key"}""");
      } on InterceptionException catch (_) {
        // Ignore InterceptionException
      }
    }
    {
      try {
        client.setClientApiKey(
          apiKey: "updated-api-key",
        );
      } on InterceptionException catch (_) {
        // Ignore InterceptionException
      }
    }
    {
      requester.setOnRequest((request) {});
      try {
        final res = await client.customGet(
          path: "check-api-key/2",
        );
        expectBody(res, """{"headerAPIKeyValue":"updated-api-key"}""");
      } on InterceptionException catch (_) {
        // Ignore InterceptionException
      }
    }
  });
}
