// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import 'package:algoliasearch/algoliasearch_lite.dart';
import 'package:algolia_test/algolia_test.dart';
import 'package:test/test.dart';

void main() {
  // customPost
  test(
    'allow post method for a custom path with minimal parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/minimal",
      ),
      intercept: (request) {
        expectPath(request.path, '/test/minimal');
        expect(request.method, 'post');
        expectBody(request.body, """{}""");
      },
    ),
  );

  // customPost
  test(
    'allow post method for a custom path with all parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/all",
        parameters: {
          'query': "parameters",
        },
        body: {
          'body': "parameters",
        },
      ),
      intercept: (request) {
        expectPath(request.path, '/test/all');
        expect(request.method, 'post');
        expectParams(request.queryParameters, """{"query":"parameters"}""");
        expectBody(request.body, """{"body":"parameters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions can override default query parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          urlParameters: {
            'query': "myQueryParameter",
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(
            request.queryParameters, """{"query":"myQueryParameter"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions merges query parameters with default ones',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          urlParameters: {
            'query2': "myQueryParameter",
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","query2":"myQueryParameter"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions can override default headers',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          headers: {
            'x-algolia-api-key': 'myApiKey',
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectHeaders(request.headers, """{"x-algolia-api-key":"myApiKey"}""");
        expectParams(request.queryParameters, """{"query":"parameters"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions merges headers with default ones',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          headers: {
            'x-algolia-api-key': 'myApiKey',
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectHeaders(request.headers, """{"x-algolia-api-key":"myApiKey"}""");
        expectParams(request.queryParameters, """{"query":"parameters"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts booleans',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          urlParameters: {
            'isItWorking': true,
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","isItWorking":"true"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts integers',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          urlParameters: {
            'myParam': 2,
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","myParam":"2"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts list of string',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          urlParameters: {
            'myParam': [
              "b and c",
              "d",
            ],
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","myParam":"b%20and%20c%2Cd"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts list of booleans',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          urlParameters: {
            'myParam': [
              true,
              true,
              false,
            ],
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts list of integers',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/requestOptions",
        parameters: {
          'query': "parameters",
        },
        body: {
          'facet': "filters",
        },
        requestOptions: RequestOptions(
          urlParameters: {
            'myParam': [
              1,
              2,
            ],
          },
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","myParam":"1%2C2"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // getRecommendations
  test(
    'get recommendations for recommend model with minimal parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getRecommendations(
        getRecommendationsParams: GetRecommendationsParams(
          requests: [
            RelatedQuery(
              indexName: "indexName",
              objectID: "objectID",
              model: RelatedModel.fromJson("related-products"),
              threshold: 42.1,
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/recommendations');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"indexName","objectID":"objectID","model":"related-products","threshold":42.1}]}""");
      },
    ),
  );

  // getRecommendations
  test(
    'get recommendations for recommend model with all parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getRecommendations(
        getRecommendationsParams: GetRecommendationsParams(
          requests: [
            RelatedQuery(
              indexName: "indexName",
              objectID: "objectID",
              model: RelatedModel.fromJson("related-products"),
              threshold: 42.1,
              maxRecommendations: 10,
              queryParameters: RecommendSearchParams(
                query: "myQuery",
                facetFilters: [
                  "query",
                ],
              ),
              fallbackParameters: FallbackParams(
                query: "myQuery",
                facetFilters: [
                  "fallback",
                ],
              ),
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/recommendations');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"indexName","objectID":"objectID","model":"related-products","threshold":42.1,"maxRecommendations":10,"queryParameters":{"query":"myQuery","facetFilters":["query"]},"fallbackParameters":{"query":"myQuery","facetFilters":["fallback"]}}]}""");
      },
    ),
  );

  // getRecommendations
  test(
    'get recommendations for trending model with minimal parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getRecommendations(
        getRecommendationsParams: GetRecommendationsParams(
          requests: [
            TrendingItemsQuery(
              indexName: "indexName",
              model: TrendingItemsModel.fromJson("trending-items"),
              threshold: 42.1,
              facetName: "facet",
              facetValue: "value",
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/recommendations');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"indexName","model":"trending-items","threshold":42.1,"facetName":"facet","facetValue":"value"}]}""");
      },
    ),
  );

  // getRecommendations
  test(
    'get recommendations for trending model with all parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getRecommendations(
        getRecommendationsParams: GetRecommendationsParams(
          requests: [
            TrendingItemsQuery(
              indexName: "indexName",
              model: TrendingItemsModel.fromJson("trending-items"),
              threshold: 42.1,
              maxRecommendations: 10,
              facetName: "myFacetName",
              facetValue: "myFacetValue",
              queryParameters: RecommendSearchParams(
                query: "myQuery",
                facetFilters: [
                  "query",
                ],
              ),
              fallbackParameters: FallbackParams(
                query: "myQuery",
                facetFilters: [
                  "fallback",
                ],
              ),
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/recommendations');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"indexName","model":"trending-items","threshold":42.1,"maxRecommendations":10,"facetName":"myFacetName","facetValue":"myFacetValue","queryParameters":{"query":"myQuery","facetFilters":["query"]},"fallbackParameters":{"query":"myQuery","facetFilters":["fallback"]}}]}""");
      },
    ),
  );

  // getRecommendations
  test(
    'get multiple recommendations with minimal parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getRecommendations(
        getRecommendationsParams: GetRecommendationsParams(
          requests: [
            RelatedQuery(
              indexName: "indexName1",
              objectID: "objectID1",
              model: RelatedModel.fromJson("related-products"),
              threshold: 21.7,
            ),
            RelatedQuery(
              indexName: "indexName2",
              objectID: "objectID2",
              model: RelatedModel.fromJson("related-products"),
              threshold: 21.7,
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/recommendations');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"indexName1","objectID":"objectID1","model":"related-products","threshold":21.7},{"indexName":"indexName2","objectID":"objectID2","model":"related-products","threshold":21.7}]}""");
      },
    ),
  );

  // getRecommendations
  test(
    'get multiple recommendations with all parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getRecommendations(
        getRecommendationsParams: GetRecommendationsParams(
          requests: [
            RelatedQuery(
              indexName: "indexName1",
              objectID: "objectID1",
              model: RelatedModel.fromJson("related-products"),
              threshold: 21.7,
              maxRecommendations: 10,
              queryParameters: RecommendSearchParams(
                query: "myQuery",
                facetFilters: [
                  "query1",
                ],
              ),
              fallbackParameters: FallbackParams(
                query: "myQuery",
                facetFilters: [
                  "fallback1",
                ],
              ),
            ),
            RelatedQuery(
              indexName: "indexName2",
              objectID: "objectID2",
              model: RelatedModel.fromJson("related-products"),
              threshold: 21.7,
              maxRecommendations: 10,
              queryParameters: RecommendSearchParams(
                query: "myQuery",
                facetFilters: [
                  "query2",
                ],
              ),
              fallbackParameters: FallbackParams(
                query: "myQuery",
                facetFilters: [
                  "fallback2",
                ],
              ),
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/recommendations');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"indexName1","objectID":"objectID1","model":"related-products","threshold":21.7,"maxRecommendations":10,"queryParameters":{"query":"myQuery","facetFilters":["query1"]},"fallbackParameters":{"query":"myQuery","facetFilters":["fallback1"]}},{"indexName":"indexName2","objectID":"objectID2","model":"related-products","threshold":21.7,"maxRecommendations":10,"queryParameters":{"query":"myQuery","facetFilters":["query2"]},"fallbackParameters":{"query":"myQuery","facetFilters":["fallback2"]}}]}""");
      },
    ),
  );

  // getRecommendations
  test(
    'get frequently bought together recommendations',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getRecommendations(
        getRecommendationsParams: GetRecommendationsParams(
          requests: [
            BoughtTogetherQuery(
              indexName: "indexName1",
              objectID: "objectID1",
              model: FbtModel.fromJson("bought-together"),
              threshold: 42.7,
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/recommendations');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"indexName1","objectID":"objectID1","model":"bought-together","threshold":42.7}]}""");
      },
    ),
  );

  // search
  test(
    'withHitsPerPage',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "<YOUR_INDEX_NAME>",
              query: "<YOUR_QUERY>",
              hitsPerPage: 50,
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","hitsPerPage":50}]}""");
      },
    ),
  );

  // search
  test(
    'filterOnly',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "<YOUR_INDEX_NAME>",
              query: "<YOUR_QUERY>",
              filters: "actor:Scarlett Johansson",
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Scarlett Johansson"}]}""");
      },
    ),
  );

  // search
  test(
    'filterOr',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "<YOUR_INDEX_NAME>",
              query: "<YOUR_QUERY>",
              filters: "actor:Tom Cruise OR actor:Scarlett Johansson",
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"actor:Tom Cruise OR actor:Scarlett Johansson"}]}""");
      },
    ),
  );

  // search
  test(
    'filterNot',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "<YOUR_INDEX_NAME>",
              query: "<YOUR_QUERY>",
              filters: "NOT actor:Nicolas Cage",
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","filters":"NOT actor:Nicolas Cage"}]}""");
      },
    ),
  );

  // search
  test(
    'search for a single hits request with minimal parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "cts_e2e_search_empty_index",
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"cts_e2e_search_empty_index"}]}""");
      },
    ),
  );

  // search
  test(
    'search with highlight and snippet results',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "cts_e2e_highlight_snippet_results",
              query: "vim",
              attributesToSnippet: [
                "*:20",
              ],
              attributesToHighlight: [
                "*",
              ],
              attributesToRetrieve: [
                "*",
              ],
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"cts_e2e_highlight_snippet_results","query":"vim","attributesToSnippet":["*:20"],"attributesToHighlight":["*"],"attributesToRetrieve":["*"]}]}""");
      },
    ),
  );

  // search
  test(
    'retrieveFacets',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "<YOUR_INDEX_NAME>",
              query: "<YOUR_QUERY>",
              facets: [
                "author",
                "genre",
              ],
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["author","genre"]}]}""");
      },
    ),
  );

  // search
  test(
    'retrieveFacetsWildcard',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "<YOUR_INDEX_NAME>",
              query: "<YOUR_QUERY>",
              facets: [
                "*",
              ],
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"<YOUR_INDEX_NAME>","query":"<YOUR_QUERY>","facets":["*"]}]}""");
      },
    ),
  );

  // search
  test(
    'search for a single facet request with minimal parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForFacets(
              indexName: "cts_e2e_search_facet",
              type: SearchTypeFacet.fromJson("facet"),
              facet: "editor",
            ),
          ],
          strategy: SearchStrategy.fromJson("stopIfEnoughMatches"),
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"cts_e2e_search_facet","type":"facet","facet":"editor"}],"strategy":"stopIfEnoughMatches"}""");
      },
    ),
  );

  // search
  test(
    'search for a single hits request with all parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "theIndexName",
              query: "myQuery",
              hitsPerPage: 50,
              type: SearchTypeDefault.fromJson("default"),
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}]}""");
      },
    ),
  );

  // search
  test(
    'search for a single facet request with all parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForFacets(
              indexName: "theIndexName",
              type: SearchTypeFacet.fromJson("facet"),
              facet: "theFacet",
              facetQuery: "theFacetQuery",
              query: "theQuery",
              maxFacetHits: 50,
            ),
          ],
          strategy: SearchStrategy.fromJson("stopIfEnoughMatches"),
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50}],"strategy":"stopIfEnoughMatches"}""");
      },
    ),
  );

  // search
  test(
    'search for multiple mixed requests in multiple indices with minimal parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "theIndexName",
            ),
            SearchForFacets(
              indexName: "theIndexName2",
              type: SearchTypeFacet.fromJson("facet"),
              facet: "theFacet",
            ),
            SearchForHits(
              indexName: "theIndexName",
              type: SearchTypeDefault.fromJson("default"),
            ),
          ],
          strategy: SearchStrategy.fromJson("stopIfEnoughMatches"),
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"theIndexName"},{"indexName":"theIndexName2","type":"facet","facet":"theFacet"},{"indexName":"theIndexName","type":"default"}],"strategy":"stopIfEnoughMatches"}""");
      },
    ),
  );

  // search
  test(
    'search for multiple mixed requests in multiple indices with all parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForFacets(
              indexName: "theIndexName",
              type: SearchTypeFacet.fromJson("facet"),
              facet: "theFacet",
              facetQuery: "theFacetQuery",
              query: "theQuery",
              maxFacetHits: 50,
            ),
            SearchForHits(
              indexName: "theIndexName",
              query: "myQuery",
              hitsPerPage: 50,
              type: SearchTypeDefault.fromJson("default"),
            ),
          ],
          strategy: SearchStrategy.fromJson("stopIfEnoughMatches"),
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"theIndexName","type":"facet","facet":"theFacet","facetQuery":"theFacetQuery","query":"theQuery","maxFacetHits":50},{"indexName":"theIndexName","query":"myQuery","hitsPerPage":50,"type":"default"}],"strategy":"stopIfEnoughMatches"}""");
      },
    ),
  );

  // search
  test(
    'search filters accept all of the possible shapes',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "theIndexName",
              facetFilters: "mySearch:filters",
              reRankingApplyFilter: "mySearch:filters",
              tagFilters: "mySearch:filters",
              numericFilters: "mySearch:filters",
              optionalFilters: "mySearch:filters",
            ),
            SearchForHits(
              indexName: "theIndexName",
              facetFilters: [
                "mySearch:filters",
                [
                  "mySearch:filters",
                  [
                    "mySearch:filters",
                  ],
                ],
              ],
              reRankingApplyFilter: [
                "mySearch:filters",
                [
                  "mySearch:filters",
                ],
              ],
              tagFilters: [
                "mySearch:filters",
                [
                  "mySearch:filters",
                ],
              ],
              numericFilters: [
                "mySearch:filters",
                [
                  "mySearch:filters",
                ],
              ],
              optionalFilters: [
                "mySearch:filters",
                [
                  "mySearch:filters",
                ],
              ],
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"theIndexName","facetFilters":"mySearch:filters","reRankingApplyFilter":"mySearch:filters","tagFilters":"mySearch:filters","numericFilters":"mySearch:filters","optionalFilters":"mySearch:filters"},{"indexName":"theIndexName","facetFilters":["mySearch:filters",["mySearch:filters",["mySearch:filters"]]],"reRankingApplyFilter":["mySearch:filters",["mySearch:filters"]],"tagFilters":["mySearch:filters",["mySearch:filters"]],"numericFilters":["mySearch:filters",["mySearch:filters"]],"optionalFilters":["mySearch:filters",["mySearch:filters"]]}]}""");
      },
    ),
  );

  // search
  test(
    'search filters end to end',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              indexName: "cts_e2e_search_facet",
              filters: "editor:'visual studio' OR editor:neovim",
            ),
            SearchForHits(
              indexName: "cts_e2e_search_facet",
              facetFilters: [
                "editor:'visual studio'",
                "editor:neovim",
              ],
            ),
            SearchForHits(
              indexName: "cts_e2e_search_facet",
              facetFilters: [
                "editor:'visual studio'",
                [
                  "editor:neovim",
                ],
              ],
            ),
            SearchForHits(
              indexName: "cts_e2e_search_facet",
              facetFilters: [
                "editor:'visual studio'",
                [
                  "editor:neovim",
                  [
                    "editor:goland",
                  ],
                ],
              ],
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"indexName":"cts_e2e_search_facet","filters":"editor:'visual studio' OR editor:neovim"},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'","editor:neovim"]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim"]]},{"indexName":"cts_e2e_search_facet","facetFilters":["editor:'visual studio'",["editor:neovim",["editor:goland"]]]}]}""");
      },
    ),
  );

  // search
  test(
    'search with all search parameters',
    () => runTest(
      builder: (requester) => SearchClient(
        appId: 'appId',
        apiKey: 'apiKey',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.search(
        searchMethodParams: SearchMethodParams(
          requests: [
            SearchForHits(
              advancedSyntax: true,
              advancedSyntaxFeatures: [
                AdvancedSyntaxFeatures.fromJson("exactPhrase"),
              ],
              allowTyposOnNumericTokens: true,
              alternativesAsExact: [
                AlternativesAsExact.fromJson("multiWordsSynonym"),
              ],
              analytics: true,
              analyticsTags: [
                "",
              ],
              aroundLatLng: "",
              aroundLatLngViaIP: true,
              aroundPrecision: 0,
              aroundRadius: AroundRadiusAll.fromJson("all"),
              attributeCriteriaComputedByMinProximity: true,
              attributesToHighlight: [
                "",
              ],
              attributesToRetrieve: [
                "",
              ],
              attributesToSnippet: [
                "",
              ],
              clickAnalytics: true,
              customRanking: [
                "",
              ],
              decompoundQuery: true,
              disableExactOnAttributes: [
                "",
              ],
              disableTypoToleranceOnAttributes: [
                "",
              ],
              distinct: 0,
              enableABTest: true,
              enablePersonalization: true,
              enableReRanking: true,
              enableRules: true,
              exactOnSingleWordQuery:
                  ExactOnSingleWordQuery.fromJson("attribute"),
              facetFilters: [
                "",
              ],
              facetingAfterDistinct: true,
              facets: [
                "",
              ],
              filters: "",
              getRankingInfo: true,
              highlightPostTag: "",
              highlightPreTag: "",
              hitsPerPage: 1,
              ignorePlurals: false,
              indexName: "theIndexName",
              insideBoundingBox: [
                [
                  47.3165,
                  4.9665,
                  47.3424,
                  5.0201,
                ],
                [
                  40.9234,
                  2.1185,
                  38.643,
                  1.9916,
                ],
              ],
              insidePolygon: [
                [
                  47.3165,
                  4.9665,
                  47.3424,
                  5.0201,
                  47.32,
                  4.9,
                ],
                [
                  40.9234,
                  2.1185,
                  38.643,
                  1.9916,
                  39.2587,
                  2.0104,
                ],
              ],
              keepDiacriticsOnCharacters: "",
              length: 1,
              maxValuesPerFacet: 0,
              minProximity: 1,
              minWordSizefor1Typo: 0,
              minWordSizefor2Typos: 0,
              minimumAroundRadius: 1,
              naturalLanguages: [
                SupportedLanguage.fromJson("fr"),
              ],
              numericFilters: [
                "",
              ],
              offset: 0,
              optionalFilters: [
                "",
              ],
              optionalWords: [
                "",
              ],
              page: 0,
              percentileComputation: true,
              personalizationImpact: 0,
              query: "",
              queryLanguages: [
                SupportedLanguage.fromJson("fr"),
              ],
              queryType: QueryType.fromJson("prefixAll"),
              ranking: [
                "",
              ],
              reRankingApplyFilter: [
                "",
              ],
              relevancyStrictness: 0,
              removeStopWords: true,
              removeWordsIfNoResults:
                  RemoveWordsIfNoResults.fromJson("allOptional"),
              renderingContent: RenderingContent(
                facetOrdering: FacetOrdering(
                  facets: IndexSettingsFacets(
                    order: [
                      "a",
                      "b",
                    ],
                  ),
                  values: {
                    'a': Value(
                      order: [
                        "b",
                      ],
                      sortRemainingBy: SortRemainingBy.fromJson("count"),
                    ),
                  },
                ),
              ),
              replaceSynonymsInHighlight: true,
              responseFields: [
                "",
              ],
              restrictHighlightAndSnippetArrays: true,
              restrictSearchableAttributes: [
                "",
              ],
              ruleContexts: [
                "",
              ],
              similarQuery: "",
              snippetEllipsisText: "",
              sortFacetValuesBy: "",
              sumOrFiltersScores: true,
              synonyms: true,
              tagFilters: [
                "",
              ],
              type: SearchTypeDefault.fromJson("default"),
              typoTolerance: TypoToleranceEnum.fromJson("min"),
              userToken: "",
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/1/indexes/*/queries');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"requests":[{"advancedSyntax":true,"advancedSyntaxFeatures":["exactPhrase"],"allowTyposOnNumericTokens":true,"alternativesAsExact":["multiWordsSynonym"],"analytics":true,"analyticsTags":[""],"aroundLatLng":"","aroundLatLngViaIP":true,"aroundPrecision":0,"aroundRadius":"all","attributeCriteriaComputedByMinProximity":true,"attributesToHighlight":[""],"attributesToRetrieve":[""],"attributesToSnippet":[""],"clickAnalytics":true,"customRanking":[""],"decompoundQuery":true,"disableExactOnAttributes":[""],"disableTypoToleranceOnAttributes":[""],"distinct":0,"enableABTest":true,"enablePersonalization":true,"enableReRanking":true,"enableRules":true,"exactOnSingleWordQuery":"attribute","facetFilters":[""],"facetingAfterDistinct":true,"facets":[""],"filters":"","getRankingInfo":true,"highlightPostTag":"","highlightPreTag":"","hitsPerPage":1,"ignorePlurals":false,"indexName":"theIndexName","insideBoundingBox":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],"insidePolygon":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],"keepDiacriticsOnCharacters":"","length":1,"maxValuesPerFacet":0,"minProximity":1,"minWordSizefor1Typo":0,"minWordSizefor2Typos":0,"minimumAroundRadius":1,"naturalLanguages":["fr"],"numericFilters":[""],"offset":0,"optionalFilters":[""],"optionalWords":[""],"page":0,"percentileComputation":true,"personalizationImpact":0,"query":"","queryLanguages":["fr"],"queryType":"prefixAll","ranking":[""],"reRankingApplyFilter":[""],"relevancyStrictness":0,"removeStopWords":true,"removeWordsIfNoResults":"allOptional","renderingContent":{"facetOrdering":{"facets":{"order":["a","b"]},"values":{"a":{"order":["b"],"sortRemainingBy":"count"}}}},"replaceSynonymsInHighlight":true,"responseFields":[""],"restrictHighlightAndSnippetArrays":true,"restrictSearchableAttributes":[""],"ruleContexts":[""],"similarQuery":"","snippetEllipsisText":"","sortFacetValuesBy":"","sumOrFiltersScores":true,"synonyms":true,"tagFilters":[""],"type":"default","typoTolerance":"min","userToken":""}]}""");
      },
    ),
  );
}
