// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import 'package:algolia_client_abtesting_v3/algolia_client_abtesting_v3.dart';
import 'package:algolia_test/algolia_test.dart';
import 'package:test/test.dart';

void main() {
  // addABTests
  test(
    'addABTests with minimal parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.addABTests(
        addABTestsRequest: AddABTestsRequest(
          endAt: "2022-12-31T00:00:00.000Z",
          name: "myABTest",
          metrics: [
            CreateMetric(
              name: "myMetric",
            ),
          ],
          variants: [
            AbTestsVariant(
              index: "AB_TEST_1",
              trafficPercentage: 30,
            ),
            AbTestsVariant(
              index: "AB_TEST_2",
              trafficPercentage: 50,
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/3/abtests');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"endAt":"2022-12-31T00:00:00.000Z","name":"myABTest","metrics":[{"name":"myMetric"}],"variants":[{"index":"AB_TEST_1","trafficPercentage":30},{"index":"AB_TEST_2","trafficPercentage":50}]}""");
      },
    ),
  );

  // customDelete
  test(
    'allow del method for a custom path with minimal parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customDelete(
        path: "test/minimal",
      ),
      intercept: (request) {
        expectPath(request.path, '/test/minimal');
        expect(request.method, 'delete');
        expect(request.body, null);
      },
    ),
  );

  // customDelete
  test(
    'allow del method for a custom path with all parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customDelete(
        path: "test/all",
        parameters: {
          'query': "parameters",
        },
      ),
      intercept: (request) {
        expectPath(request.path, '/test/all');
        expect(request.method, 'delete');
        expectParams(request.queryParameters, """{"query":"parameters"}""");
        expect(request.body, null);
      },
    ),
  );

  // customGet
  test(
    'allow get method for a custom path with minimal parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customGet(
        path: "test/minimal",
      ),
      intercept: (request) {
        expectPath(request.path, '/test/minimal');
        expect(request.method, 'get');
        expect(request.body, null);
      },
    ),
  );

  // customGet
  test(
    'allow get method for a custom path with all parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customGet(
        path: "test/all",
        parameters: {
          'query': "parameters with space",
        },
      ),
      intercept: (request) {
        expectPath(request.path, '/test/all');
        expect(request.method, 'get');
        expectParams(request.queryParameters,
            """{"query":"parameters%20with%20space"}""");
        expect(request.body, null);
      },
    ),
  );

  // customGet
  test(
    'requestOptions should be escaped too',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customGet(
          path: "test/all",
          parameters: {
            'query': "to be overriden",
          },
          requestOptions: RequestOptions(
            headers: {
              'x-header-1': "spaces are left alone",
            },
            urlParameters: {
              'query': "parameters with space",
              'and an array': [
                "array",
                "with spaces",
              ],
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/all');
        expect(request.method, 'get');
        expectHeaders(
            request.headers, """{"x-header-1":"spaces are left alone"}""");
        expectParams(request.queryParameters,
            """{"query":"parameters%20with%20space","and%20an%20array":"array%2Cwith%20spaces"}""");
        expect(request.body, null);
      },
    ),
  );

  // customPost
  test(
    'allow post method for a custom path with minimal parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/minimal",
      ),
      intercept: (request) {
        expectPath(request.path, '/test/minimal');
        expect(request.method, 'post');
        expectBody(request.body, """{}""");
      },
    ),
  );

  // customPost
  test(
    'allow post method for a custom path with all parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
        path: "test/all",
        parameters: {
          'query': "parameters",
        },
        body: {
          'body': "parameters",
        },
      ),
      intercept: (request) {
        expectPath(request.path, '/test/all');
        expect(request.method, 'post');
        expectParams(request.queryParameters, """{"query":"parameters"}""");
        expectBody(request.body, """{"body":"parameters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions can override default query parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            urlParameters: {
              'query': "myQueryParameter",
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(
            request.queryParameters, """{"query":"myQueryParameter"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions merges query parameters with default ones',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            urlParameters: {
              'query2': "myQueryParameter",
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","query2":"myQueryParameter"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions can override default headers',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            headers: {
              'x-algolia-api-key': "ALGOLIA_API_KEY",
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectHeaders(
            request.headers, """{"x-algolia-api-key":"ALGOLIA_API_KEY"}""");
        expectParams(request.queryParameters, """{"query":"parameters"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions merges headers with default ones',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            headers: {
              'x-algolia-api-key': "ALGOLIA_API_KEY",
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectHeaders(
            request.headers, """{"x-algolia-api-key":"ALGOLIA_API_KEY"}""");
        expectParams(request.queryParameters, """{"query":"parameters"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts booleans',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            urlParameters: {
              'isItWorking': true,
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","isItWorking":"true"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts integers',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            urlParameters: {
              'myParam': 2,
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","myParam":"2"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts list of string',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            urlParameters: {
              'myParam': [
                "b and c",
                "d",
              ],
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","myParam":"b%20and%20c%2Cd"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts list of booleans',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            urlParameters: {
              'myParam': [
                true,
                true,
                false,
              ],
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","myParam":"true%2Ctrue%2Cfalse"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPost
  test(
    'requestOptions queryParameters accepts list of integers',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPost(
          path: "test/requestOptions",
          parameters: {
            'query': "parameters",
          },
          body: {
            'facet': "filters",
          },
          requestOptions: RequestOptions(
            urlParameters: {
              'myParam': [
                1,
                2,
              ],
            },
          )),
      intercept: (request) {
        expectPath(request.path, '/test/requestOptions');
        expect(request.method, 'post');
        expectParams(request.queryParameters,
            """{"query":"parameters","myParam":"1%2C2"}""");
        expectBody(request.body, """{"facet":"filters"}""");
      },
    ),
  );

  // customPut
  test(
    'allow put method for a custom path with minimal parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPut(
        path: "test/minimal",
      ),
      intercept: (request) {
        expectPath(request.path, '/test/minimal');
        expect(request.method, 'put');
        expectBody(request.body, """{}""");
      },
    ),
  );

  // customPut
  test(
    'allow put method for a custom path with all parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.customPut(
        path: "test/all",
        parameters: {
          'query': "parameters",
        },
        body: {
          'body': "parameters",
        },
      ),
      intercept: (request) {
        expectPath(request.path, '/test/all');
        expect(request.method, 'put');
        expectParams(request.queryParameters, """{"query":"parameters"}""");
        expectBody(request.body, """{"body":"parameters"}""");
      },
    ),
  );

  // deleteABTest
  test(
    'deleteABTest',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.deleteABTest(
        id: 42,
      ),
      intercept: (request) {
        expectPath(request.path, '/3/abtests/42');
        expect(request.method, 'delete');
        expect(request.body, null);
      },
    ),
  );

  // estimateABTest
  test(
    'estimate AB Test sample size',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.estimateABTest(
        estimateABTestRequest: EstimateABTestRequest(
          configuration: EstimateConfiguration(
            minimumDetectableEffect: MinimumDetectableEffect(
              size: 0.03,
              metric: EffectMetric.fromJson("conversionRate"),
            ),
          ),
          variants: [
            AbTestsVariant(
              index: "AB_TEST_1",
              trafficPercentage: 50,
            ),
            AbTestsVariant(
              index: "AB_TEST_2",
              trafficPercentage: 50,
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/3/abtests/estimate');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"configuration":{"minimumDetectableEffect":{"size":0.03,"metric":"conversionRate"}},"variants":[{"index":"AB_TEST_1","trafficPercentage":50},{"index":"AB_TEST_2","trafficPercentage":50}]}""");
      },
    ),
  );

  // getABTest
  test(
    'getABTest',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getABTest(
        id: 42,
      ),
      intercept: (request) {
        expectPath(request.path, '/3/abtests/42');
        expect(request.method, 'get');
        expect(request.body, null);
      },
    ),
  );

  // getTimeseries
  test(
    'getTimeseries',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.getTimeseries(
        id: 42,
      ),
      intercept: (request) {
        expectPath(request.path, '/3/abtests/42/timeseries');
        expect(request.method, 'get');
        expect(request.body, null);
      },
    ),
  );

  // listABTests
  test(
    'listABTests with minimal parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.listABTests(),
      intercept: (request) {
        expectPath(request.path, '/3/abtests');
        expect(request.method, 'get');
        expect(request.body, null);
      },
    ),
  );

  // listABTests
  test(
    'listABTests with parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.listABTests(
        offset: 0,
        limit: 21,
        indexPrefix: "cts_e2e ab",
        indexSuffix: "t",
        direction: Direction.fromJson("asc"),
      ),
      intercept: (request) {
        expectPath(request.path, '/3/abtests');
        expect(request.method, 'get');
        expectParams(request.queryParameters,
            """{"offset":"0","limit":"21","indexPrefix":"cts_e2e%20ab","indexSuffix":"t","direction":"asc"}""");
        expect(request.body, null);
      },
    ),
  );

  // scheduleABTest
  test(
    'scheduleABTest with minimal parameters',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.scheduleABTest(
        scheduleABTestsRequest: ScheduleABTestsRequest(
          endAt: "2022-12-31T00:00:00.000Z",
          scheduledAt: "2022-11-31T00:00:00.000Z",
          name: "myABTest",
          metrics: [
            CreateMetric(
              name: "myMetric",
            ),
          ],
          variants: [
            AbTestsVariant(
              index: "AB_TEST_1",
              trafficPercentage: 30,
            ),
            AbTestsVariant(
              index: "AB_TEST_2",
              trafficPercentage: 50,
            ),
          ],
        ),
      ),
      intercept: (request) {
        expectPath(request.path, '/3/abtests/schedule');
        expect(request.method, 'post');
        expectBody(request.body,
            """{"endAt":"2022-12-31T00:00:00.000Z","scheduledAt":"2022-11-31T00:00:00.000Z","name":"myABTest","metrics":[{"name":"myMetric"}],"variants":[{"index":"AB_TEST_1","trafficPercentage":30},{"index":"AB_TEST_2","trafficPercentage":50}]}""");
      },
    ),
  );

  // stopABTest
  test(
    'stopABTest',
    () => runTest(
      builder: (requester) => AbtestingV3Client(
        appId: 'appId',
        apiKey: 'apiKey',
        region: 'us',
        options: ClientOptions(requester: requester),
      ),
      call: (client) => client.stopABTest(
        id: 42,
      ),
      intercept: (request) {
        expectPath(request.path, '/3/abtests/42/stop');
        expect(request.method, 'post');
        expect(request.body, {});
      },
    ),
  );
}
