// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import { describe, expect, test } from 'vitest';

import type { EchoResponse } from '@algolia/requester-testing';
import { nodeEchoRequester } from '@algolia/requester-testing';
import { algoliasearch } from 'algoliasearch';

const appId = process.env.ALGOLIA_APPLICATION_ID || 'test_app_id';
const apiKey = process.env.ALGOLIA_SEARCH_KEY || 'test_api_key';

// this makes sure the types are correctly exported
const client = algoliasearch(appId, apiKey, { requester: nodeEchoRequester() });

describe('addApiKey', () => {
  test('minimal', async () => {
    const req = (await client.addApiKey({
      acl: ['search', 'addObject'],
      description: 'my new api key',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/keys');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ acl: ['search', 'addObject'], description: 'my new api key' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('all', async () => {
    const req = (await client.addApiKey({
      acl: ['search', 'addObject'],
      description: 'my new api key',
      validity: 300,
      maxQueriesPerIPPerHour: 100,
      maxHitsPerQuery: 20,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/keys');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      acl: ['search', 'addObject'],
      description: 'my new api key',
      validity: 300,
      maxQueriesPerIPPerHour: 100,
      maxHitsPerQuery: 20,
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('addOrUpdateObject', () => {
  test('addOrUpdateObject', async () => {
    const req = (await client.addOrUpdateObject({
      indexName: 'indexName',
      objectID: 'uniqueID',
      body: { key: 'value' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/uniqueID');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ key: 'value' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('appendSource', () => {
  test('appendSource', async () => {
    const req = (await client.appendSource({
      source: 'theSource',
      description: 'theDescription',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/security/sources/append');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ source: 'theSource', description: 'theDescription' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('assignUserId', () => {
  test('simple', async () => {
    const req = (await client.assignUserId({
      xAlgoliaUserID: 'user42',
      assignUserIdParams: { cluster: 'd4242-eu' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ cluster: 'd4242-eu' });
    expect(req.searchParams).toStrictEqual(undefined);
    expect(req.headers).toEqual(expect.objectContaining({ 'x-algolia-user-id': 'user42' }));
  });

  test('it should not encode the userID', async () => {
    const req = (await client.assignUserId({
      xAlgoliaUserID: 'user id with spaces',
      assignUserIdParams: { cluster: 'cluster with spaces' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ cluster: 'cluster with spaces' });
    expect(req.searchParams).toStrictEqual(undefined);
    expect(req.headers).toEqual(expect.objectContaining({ 'x-algolia-user-id': 'user id with spaces' }));
  });
});

describe('batch', () => {
  test('addObject', async () => {
    const req = (await client.batch({
      indexName: '<YOUR_INDEX_NAME>',
      batchWriteParams: {
        requests: [
          { action: 'addObject', body: { key: 'bar', foo: '1' } },
          { action: 'addObject', body: { key: 'baz', foo: '2' } },
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        { action: 'addObject', body: { key: 'bar', foo: '1' } },
        { action: 'addObject', body: { key: 'baz', foo: '2' } },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('clear', async () => {
    const req = (await client.batch({
      indexName: '<YOUR_INDEX_NAME>',
      batchWriteParams: { requests: [{ action: 'clear', body: { key: 'value' } }] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ action: 'clear', body: { key: 'value' } }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('delete', async () => {
    const req = (await client.batch({
      indexName: '<YOUR_INDEX_NAME>',
      batchWriteParams: { requests: [{ action: 'delete', body: { key: 'value' } }] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ action: 'delete', body: { key: 'value' } }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('deleteObject', async () => {
    const req = (await client.batch({
      indexName: '<YOUR_INDEX_NAME>',
      batchWriteParams: { requests: [{ action: 'deleteObject', body: { key: 'value' } }] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ action: 'deleteObject', body: { key: 'value' } }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('partialUpdateObject', async () => {
    const req = (await client.batch({
      indexName: '<YOUR_INDEX_NAME>',
      batchWriteParams: { requests: [{ action: 'partialUpdateObject', body: { key: 'value' } }] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ action: 'partialUpdateObject', body: { key: 'value' } }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('partialUpdateObjectNoCreate', async () => {
    const req = (await client.batch({
      indexName: '<YOUR_INDEX_NAME>',
      batchWriteParams: { requests: [{ action: 'partialUpdateObjectNoCreate', body: { key: 'value' } }] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ action: 'partialUpdateObjectNoCreate', body: { key: 'value' } }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('updateObject', async () => {
    const req = (await client.batch({
      indexName: '<YOUR_INDEX_NAME>',
      batchWriteParams: { requests: [{ action: 'updateObject', body: { key: 'value' } }] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ action: 'updateObject', body: { key: 'value' } }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('batchAssignUserIds', () => {
  test('batchAssignUserIds', async () => {
    const req = (await client.batchAssignUserIds({
      xAlgoliaUserID: 'userID',
      batchAssignUserIdsParams: { cluster: 'theCluster', users: ['user1', 'user2'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ cluster: 'theCluster', users: ['user1', 'user2'] });
    expect(req.searchParams).toStrictEqual(undefined);
    expect(req.headers).toEqual(expect.objectContaining({ 'x-algolia-user-id': 'userID' }));
  });
});

describe('batchDictionaryEntries', () => {
  test('replace', async () => {
    const req = (await client.batchDictionaryEntries({
      dictionaryName: 'plurals',
      batchDictionaryEntriesParams: {
        clearExistingDictionaryEntries: true,
        requests: [
          {
            action: 'addEntry',
            body: {
              objectID: '1',
              language: 'en',
              word: 'fancy',
              words: ['believe', 'algolia'],
              decomposition: ['trust', 'algolia'],
              state: 'enabled',
            },
          },
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/plurals/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      clearExistingDictionaryEntries: true,
      requests: [
        {
          action: 'addEntry',
          body: {
            objectID: '1',
            language: 'en',
            word: 'fancy',
            words: ['believe', 'algolia'],
            decomposition: ['trust', 'algolia'],
            state: 'enabled',
          },
        },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('delete', async () => {
    const req = (await client.batchDictionaryEntries({
      dictionaryName: 'plurals',
      batchDictionaryEntriesParams: {
        clearExistingDictionaryEntries: true,
        requests: [{ action: 'deleteEntry', body: { objectID: '1' } }],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/plurals/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      clearExistingDictionaryEntries: true,
      requests: [{ action: 'deleteEntry', body: { objectID: '1' } }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('append', async () => {
    const req = (await client.batchDictionaryEntries({
      dictionaryName: 'stopwords',
      batchDictionaryEntriesParams: {
        requests: [{ action: 'addEntry', body: { objectID: '1', language: 'en', additional: 'try me' } }],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/stopwords/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ action: 'addEntry', body: { objectID: '1', language: 'en', additional: 'try me' } }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('browse', () => {
  test('browse with minimal parameters', async () => {
    const req = (await client.browse({ indexName: 'cts_e2e_browse' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/cts_e2e_browse/browse');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('browse with search parameters', async () => {
    const req = (await client.browse({
      indexName: 'indexName',
      browseParams: { query: 'myQuery', facetFilters: ['tags:algolia'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/browse');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'myQuery', facetFilters: ['tags:algolia'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('browse allow a cursor in parameters', async () => {
    const req = (await client.browse({
      indexName: 'indexName',
      browseParams: { cursor: 'test' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/browse');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ cursor: 'test' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('clearObjects', () => {
  test('clearObjects', async () => {
    const req = (await client.clearObjects({ indexName: 'theIndexName' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/clear');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('clearRules', () => {
  test('clearRules', async () => {
    const req = (await client.clearRules({ indexName: 'indexName' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/clear');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('clearSynonyms', () => {
  test('clearSynonyms', async () => {
    const req = (await client.clearSynonyms({ indexName: 'indexName' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/synonyms/clear');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('customDelete', () => {
  test('allow del method for a custom path with minimal parameters', async () => {
    const req = (await client.customDelete({ path: 'test/minimal' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/minimal');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('allow del method for a custom path with all parameters', async () => {
    const req = (await client.customDelete({
      path: 'test/all',
      parameters: { query: 'parameters' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
  });
});

describe('customGet', () => {
  test('allow get method for a custom path with minimal parameters', async () => {
    const req = (await client.customGet({ path: 'test/minimal' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/minimal');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('allow get method for a custom path with all parameters', async () => {
    const req = (await client.customGet({
      path: 'test/all',
      parameters: { query: 'parameters with space' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({ query: 'parameters%20with%20space' });
  });

  test('requestOptions should be escaped too', async () => {
    const req = (await client.customGet(
      { path: 'test/all', parameters: { query: 'to be overriden' } },
      {
        queryParameters: { query: 'parameters with space', 'and an array': ['array', 'with spaces'] },
        headers: { 'x-header-1': 'spaces are left alone' },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({
      query: 'parameters%20with%20space',
      'and%20an%20array': 'array%2Cwith%20spaces',
    });
    expect(req.headers).toEqual(expect.objectContaining({ 'x-header-1': 'spaces are left alone' }));
  });
});

describe('customPost', () => {
  test('allow post method for a custom path with minimal parameters', async () => {
    const req = (await client.customPost({ path: 'test/minimal' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/minimal');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('allow post method for a custom path with all parameters', async () => {
    const req = (await client.customPost({
      path: 'test/all',
      parameters: { query: 'parameters' },
      body: { body: 'parameters' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ body: 'parameters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
  });

  test('requestOptions can override default query parameters', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        queryParameters: { query: 'myQueryParameter' },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'myQueryParameter' });
  });

  test('requestOptions merges query parameters with default ones', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        queryParameters: { query2: 'myQueryParameter' },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters', query2: 'myQueryParameter' });
  });

  test('requestOptions can override default headers', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
    expect(req.headers).toEqual(expect.objectContaining({ 'x-algolia-api-key': 'ALGOLIA_API_KEY' }));
  });

  test('requestOptions merges headers with default ones', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        headers: { 'x-algolia-api-key': 'ALGOLIA_API_KEY' },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
    expect(req.headers).toEqual(expect.objectContaining({ 'x-algolia-api-key': 'ALGOLIA_API_KEY' }));
  });

  test('requestOptions queryParameters accepts booleans', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        queryParameters: { isItWorking: true },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters', isItWorking: 'true' });
  });

  test('requestOptions queryParameters accepts integers', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        queryParameters: { myParam: 2 },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters', myParam: '2' });
  });

  test('requestOptions queryParameters accepts list of string', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        queryParameters: { myParam: ['b and c', 'd'] },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters', myParam: 'b%20and%20c%2Cd' });
  });

  test('requestOptions queryParameters accepts list of booleans', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        queryParameters: { myParam: [true, true, false] },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters', myParam: 'true%2Ctrue%2Cfalse' });
  });

  test('requestOptions queryParameters accepts list of integers', async () => {
    const req = (await client.customPost(
      { path: 'test/requestOptions', parameters: { query: 'parameters' }, body: { facet: 'filters' } },
      {
        queryParameters: { myParam: [1, 2] },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters', myParam: '1%2C2' });
  });
});

describe('customPut', () => {
  test('allow put method for a custom path with minimal parameters', async () => {
    const req = (await client.customPut({ path: 'test/minimal' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/minimal');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('allow put method for a custom path with all parameters', async () => {
    const req = (await client.customPut({
      path: 'test/all',
      parameters: { query: 'parameters' },
      body: { body: 'parameters' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ body: 'parameters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
  });
});

describe('deleteApiKey', () => {
  test('deleteApiKey', async () => {
    const req = (await client.deleteApiKey({ key: 'myTestApiKey' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/keys/myTestApiKey');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteBy', () => {
  test('deleteBy', async () => {
    const req = (await client.deleteBy({
      indexName: 'theIndexName',
      deleteByParams: { filters: 'brand:brandName' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/deleteByQuery');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ filters: 'brand:brandName' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteIndex', () => {
  test('deleteIndex', async () => {
    const req = (await client.deleteIndex({ indexName: 'theIndexName' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteObject', () => {
  test('deleteObject', async () => {
    const req = (await client.deleteObject({
      indexName: '<YOUR_INDEX_NAME>',
      objectID: 'uniqueID',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/uniqueID');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteRule', () => {
  test('delete rule simple case', async () => {
    const req = (await client.deleteRule({ indexName: 'indexName', objectID: 'id1' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/id1');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('delete rule with simple characters to encode in objectID', async () => {
    const req = (await client.deleteRule({
      indexName: 'indexName',
      objectID: 'test/with/slash',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/test%2Fwith%2Fslash');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteSource', () => {
  test('deleteSource', async () => {
    const req = (await client.deleteSource({ source: 'theSource' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/security/sources/theSource');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteSynonym', () => {
  test('deleteSynonym', async () => {
    const req = (await client.deleteSynonym({ indexName: 'indexName', objectID: 'id1' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/synonyms/id1');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getApiKey', () => {
  test('getApiKey', async () => {
    const req = (await client.getApiKey({ key: 'myTestApiKey' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/keys/myTestApiKey');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getAppTask', () => {
  test('getAppTask', async () => {
    const req = (await client.getAppTask({ taskID: 123 })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/task/123');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getDictionaryLanguages', () => {
  test('get getDictionaryLanguages', async () => {
    const req = (await client.getDictionaryLanguages()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/*/languages');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getDictionarySettings', () => {
  test('get getDictionarySettings results', async () => {
    const req = (await client.getDictionarySettings()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/*/settings');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getLogs', () => {
  test('getLogs with minimal parameters', async () => {
    const req = (await client.getLogs()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/logs');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('getLogs with parameters', async () => {
    const req = (await client.getLogs({
      offset: 5,
      length: 10,
      indexName: 'theIndexName',
      type: 'all',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/logs');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({ offset: '5', length: '10', indexName: 'theIndexName', type: 'all' });
  });
});

describe('getObject', () => {
  test('getObject', async () => {
    const req = (await client.getObject({
      indexName: 'theIndexName',
      objectID: 'uniqueID',
      attributesToRetrieve: ['attr1', 'attr2'],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/uniqueID');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({ attributesToRetrieve: 'attr1%2Cattr2' });
  });

  test('search with a real object', async () => {
    const req = (await client.getObject({
      indexName: 'cts_e2e_browse',
      objectID: 'Batman and Robin',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/cts_e2e_browse/Batman%20and%20Robin');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getObjects', () => {
  test('by ID', async () => {
    const req = (await client.getObjects({
      requests: [{ objectID: 'uniqueID', indexName: 'theIndexName' }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/objects');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ objectID: 'uniqueID', indexName: 'theIndexName' }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('multiple IDs', async () => {
    const req = (await client.getObjects({
      requests: [
        { objectID: 'uniqueID1', indexName: 'theIndexName1' },
        { objectID: 'uniqueID2', indexName: 'theIndexName2' },
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/objects');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        { objectID: 'uniqueID1', indexName: 'theIndexName1' },
        { objectID: 'uniqueID2', indexName: 'theIndexName2' },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('with attributesToRetrieve', async () => {
    const req = (await client.getObjects({
      requests: [{ attributesToRetrieve: ['attr1', 'attr2'], objectID: 'uniqueID', indexName: 'theIndexName' }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/objects');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ attributesToRetrieve: ['attr1', 'attr2'], objectID: 'uniqueID', indexName: 'theIndexName' }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getRule', () => {
  test('getRule', async () => {
    const req = (await client.getRule({
      indexName: 'cts_e2e_browse',
      objectID: 'qr-1725004648916',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/cts_e2e_browse/rules/qr-1725004648916');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getSettings', () => {
  test('getSettings', async () => {
    const req = (await client.getSettings({ indexName: 'cts_e2e_settings' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/cts_e2e_settings/settings');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getSources', () => {
  test('getSources', async () => {
    const req = (await client.getSources()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/security/sources');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getSynonym', () => {
  test('getSynonym', async () => {
    const req = (await client.getSynonym({ indexName: 'indexName', objectID: 'id1' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/synonyms/id1');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getTask', () => {
  test('getTask', async () => {
    const req = (await client.getTask({ indexName: 'theIndexName', taskID: 123 })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/task/123');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getTopUserIds', () => {
  test('getTopUserIds', async () => {
    const req = (await client.getTopUserIds()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping/top');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getUserId', () => {
  test('getUserId', async () => {
    const req = (await client.getUserId({ userID: 'uniqueID' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping/uniqueID');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('hasPendingMappings', () => {
  test('hasPendingMappings with minimal parameters', async () => {
    const req = (await client.hasPendingMappings()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping/pending');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('hasPendingMappings with parameters', async () => {
    const req = (await client.hasPendingMappings({ getClusters: true })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping/pending');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({ getClusters: 'true' });
  });
});

describe('listApiKeys', () => {
  test('listApiKeys', async () => {
    const req = (await client.listApiKeys()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/keys');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listClusters', () => {
  test('listClusters', async () => {
    const req = (await client.listClusters()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listIndices', () => {
  test('listIndices with minimal parameters', async () => {
    const req = (await client.listIndices()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('listIndices with parameters', async () => {
    const req = (await client.listIndices({ page: 8, hitsPerPage: 3 })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({ page: '8', hitsPerPage: '3' });
  });
});

describe('listUserIds', () => {
  test('listUserIds with minimal parameters', async () => {
    const req = (await client.listUserIds()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('listUserIds with parameters', async () => {
    const req = (await client.listUserIds({ page: 8, hitsPerPage: 100 })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({ page: '8', hitsPerPage: '100' });
  });
});

describe('multipleBatch', () => {
  test('multipleBatch', async () => {
    const req = (await client.multipleBatch({
      requests: [{ action: 'addObject', body: { key: 'value' }, indexName: 'theIndexName' }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ action: 'addObject', body: { key: 'value' }, indexName: 'theIndexName' }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('operationIndex', () => {
  test('scopes', async () => {
    const req = (await client.operationIndex({
      indexName: '<SOURCE_INDEX_NAME>',
      operationIndexParams: {
        operation: 'move',
        destination: '<DESTINATION_INDEX_NAME>',
        scope: ['rules', 'settings'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      operation: 'move',
      destination: '<DESTINATION_INDEX_NAME>',
      scope: ['rules', 'settings'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('copy', async () => {
    const req = (await client.operationIndex({
      indexName: '<SOURCE_INDEX_NAME>',
      operationIndexParams: { operation: 'copy', destination: '<DESTINATION_INDEX_NAME>' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ operation: 'copy', destination: '<DESTINATION_INDEX_NAME>' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('move', async () => {
    const req = (await client.operationIndex({
      indexName: '<SOURCE_INDEX_NAME>',
      operationIndexParams: { operation: 'move', destination: '<DESTINATION_INDEX_NAME>' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ operation: 'move', destination: '<DESTINATION_INDEX_NAME>' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('partialUpdateObject', () => {
  test('Partial update with a new value for a string attribute', async () => {
    const req = (await client.partialUpdateObject({
      indexName: 'theIndexName',
      objectID: 'uniqueID',
      attributesToUpdate: { attributeId: 'new value' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/uniqueID/partial');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ attributeId: 'new value' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('Partial update with a new value for an integer attribute', async () => {
    const req = (await client.partialUpdateObject({
      indexName: 'theIndexName',
      objectID: 'uniqueID',
      attributesToUpdate: { attributeId: 1 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/uniqueID/partial');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ attributeId: 1 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('Partial update with a new value for a boolean attribute', async () => {
    const req = (await client.partialUpdateObject({
      indexName: 'theIndexName',
      objectID: 'uniqueID',
      attributesToUpdate: { attributeId: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/uniqueID/partial');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ attributeId: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('Partial update with a new value for an array attribute', async () => {
    const req = (await client.partialUpdateObject({
      indexName: 'theIndexName',
      objectID: 'uniqueID',
      attributesToUpdate: { attributeId: ['one', 'two', 'three'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/uniqueID/partial');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ attributeId: ['one', 'two', 'three'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('Partial update with a new value for an object attribute', async () => {
    const req = (await client.partialUpdateObject({
      indexName: 'theIndexName',
      objectID: 'uniqueID',
      attributesToUpdate: { attributeId: { nested: 'value' } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/uniqueID/partial');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ attributeId: { nested: 'value' } });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('with visible_by filter', async () => {
    const req = (await client.partialUpdateObject({
      indexName: 'theIndexName',
      objectID: 'uniqueID',
      attributesToUpdate: { visible_by: ['Angela', 'group/Finance', 'group/Shareholders'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/uniqueID/partial');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ visible_by: ['Angela', 'group/Finance', 'group/Shareholders'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('add men pant', async () => {
    const req = (await client.partialUpdateObject({
      indexName: 'theIndexName',
      objectID: 'productId',
      attributesToUpdate: { categoryPageId: { _operation: 'Add', value: 'men-clothing-pants' } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/productId/partial');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ categoryPageId: { _operation: 'Add', value: 'men-clothing-pants' } });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('remove men pant', async () => {
    const req = (await client.partialUpdateObject({
      indexName: 'theIndexName',
      objectID: 'productId',
      attributesToUpdate: { categoryPageId: { _operation: 'Remove', value: 'men-clothing-pants' } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/productId/partial');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ categoryPageId: { _operation: 'Remove', value: 'men-clothing-pants' } });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('removeUserId', () => {
  test('removeUserId', async () => {
    const req = (await client.removeUserId({ userID: 'uniqueID' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping/uniqueID');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('replaceSources', () => {
  test('replaceSources', async () => {
    const req = (await client.replaceSources({
      source: [{ source: 'theSource', description: 'theDescription' }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/security/sources');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual([{ source: 'theSource', description: 'theDescription' }]);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('restoreApiKey', () => {
  test('restoreApiKey', async () => {
    const req = (await client.restoreApiKey({ key: 'ALGOLIA_API_KEY' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/keys/ALGOLIA_API_KEY/restore');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('saveObject', () => {
  test('saveObject', async () => {
    const req = (await client.saveObject({
      indexName: '<YOUR_INDEX_NAME>',
      body: {
        name: 'Black T-shirt',
        color: '#000000||black',
        availableIn: 'https://source.unsplash.com/100x100/?paris||Paris',
        objectID: 'myID',
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      name: 'Black T-shirt',
      color: '#000000||black',
      availableIn: 'https://source.unsplash.com/100x100/?paris||Paris',
      objectID: 'myID',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('saveRule', () => {
  test('saveRule with minimal parameters', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'id1',
      rule: {
        objectID: 'id1',
        conditions: [{ pattern: 'apple', anchoring: 'contains' }],
        consequence: { params: { filters: 'brand:xiaomi' } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/id1');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'id1',
      conditions: [{ pattern: 'apple', anchoring: 'contains' }],
      consequence: { params: { filters: 'brand:xiaomi' } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('saveRule with all parameters', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'id1',
      rule: {
        objectID: 'id1',
        conditions: [{ pattern: 'apple', anchoring: 'contains', alternatives: false, context: 'search' }],
        consequence: {
          params: {
            filters: 'brand:apple',
            query: {
              remove: ['algolia'],
              edits: [
                { type: 'remove', delete: 'abc', insert: 'cde' },
                { type: 'replace', delete: 'abc', insert: 'cde' },
              ],
            },
          },
          hide: [{ objectID: '321' }],
          filterPromotes: false,
          userData: { algolia: 'aloglia' },
          promote: [
            { objectID: 'abc', position: 3 },
            { objectIDs: ['abc', 'def'], position: 1 },
          ],
        },
        description: 'test',
        enabled: true,
        validity: [{ from: 1656670273, until: 1656670277 }],
      },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/id1');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'id1',
      conditions: [{ pattern: 'apple', anchoring: 'contains', alternatives: false, context: 'search' }],
      consequence: {
        params: {
          filters: 'brand:apple',
          query: {
            remove: ['algolia'],
            edits: [
              { type: 'remove', delete: 'abc', insert: 'cde' },
              { type: 'replace', delete: 'abc', insert: 'cde' },
            ],
          },
        },
        hide: [{ objectID: '321' }],
        filterPromotes: false,
        userData: { algolia: 'aloglia' },
        promote: [
          { objectID: 'abc', position: 3 },
          { objectIDs: ['abc', 'def'], position: 1 },
        ],
      },
      description: 'test',
      enabled: true,
      validity: [{ from: 1656670273, until: 1656670277 }],
    });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('b2b catalog', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'article-rule',
      rule: {
        objectID: 'article-rule',
        conditions: [{ pattern: 'article', anchoring: 'startsWith' }],
        consequence: {
          params: {
            query: { edits: [{ type: 'remove', delete: 'article' }] },
            restrictSearchableAttributes: ['title', 'book_id'],
          },
        },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/article-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'article-rule',
      conditions: [{ pattern: 'article', anchoring: 'startsWith' }],
      consequence: {
        params: {
          query: { edits: [{ type: 'remove', delete: 'article' }] },
          restrictSearchableAttributes: ['title', 'book_id'],
        },
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('merchandising and promoting', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'director-rule',
      rule: {
        objectID: 'director-rule',
        conditions: [{ pattern: '{facet:director} director', anchoring: 'contains' }],
        consequence: {
          params: {
            restrictSearchableAttributes: ['title', 'book_id'],
            automaticFacetFilters: [{ facet: 'director' }],
            query: { edits: [{ type: 'remove', delete: 'director' }] },
          },
        },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/director-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'director-rule',
      conditions: [{ pattern: '{facet:director} director', anchoring: 'contains' }],
      consequence: {
        params: {
          restrictSearchableAttributes: ['title', 'book_id'],
          automaticFacetFilters: [{ facet: 'director' }],
          query: { edits: [{ type: 'remove', delete: 'director' }] },
        },
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('harry potter', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'harry-potter-rule',
      rule: {
        objectID: 'harry-potter-rule',
        conditions: [{ pattern: 'harry potter', anchoring: 'contains' }],
        consequence: { userData: { promo_content: '20% OFF on all Harry Potter books!' } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/harry-potter-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'harry-potter-rule',
      conditions: [{ pattern: 'harry potter', anchoring: 'contains' }],
      consequence: { userData: { promo_content: '20% OFF on all Harry Potter books!' } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('merchandising empty query', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'clearance-category-filter',
      rule: {
        objectID: 'clearance-category-filter',
        conditions: [{ pattern: '', anchoring: 'is', context: 'landing' }],
        consequence: { params: { optionalFilters: 'clearance:true' } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/clearance-category-filter');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'clearance-category-filter',
      conditions: [{ pattern: '', anchoring: 'is', context: 'landing' }],
      consequence: { params: { optionalFilters: 'clearance:true' } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('redirect', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'redirect-help-rule',
      rule: {
        objectID: 'redirect-help-rule',
        conditions: [{ pattern: 'help', anchoring: 'contains' }],
        consequence: { userData: { redirect: 'https://www.algolia.com/support' } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/redirect-help-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'redirect-help-rule',
      conditions: [{ pattern: 'help', anchoring: 'contains' }],
      consequence: { userData: { redirect: 'https://www.algolia.com/support' } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('promote some results over others', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'tomato-fruit',
      rule: {
        objectID: 'tomato-fruit',
        conditions: [{ pattern: 'tomato', anchoring: 'contains' }],
        consequence: { params: { optionalFilters: 'food_group:fruit' } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/tomato-fruit');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'tomato-fruit',
      conditions: [{ pattern: 'tomato', anchoring: 'contains' }],
      consequence: { params: { optionalFilters: 'food_group:fruit' } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('promote several hits', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'Promote-Apple-Newest',
      rule: {
        objectID: 'Promote-Apple-Newest',
        conditions: [{ pattern: 'apple', anchoring: 'is' }],
        consequence: { promote: [{ objectIDs: ['iPhone-12345', 'watch-123'], position: 0 }] },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/Promote-Apple-Newest');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'Promote-Apple-Newest',
      conditions: [{ pattern: 'apple', anchoring: 'is' }],
      consequence: { promote: [{ objectIDs: ['iPhone-12345', 'watch-123'], position: 0 }] },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('promote newest release', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'Promote-iPhone-X',
      rule: {
        objectID: 'Promote-iPhone-X',
        conditions: [{ pattern: 'iPhone', anchoring: 'contains' }],
        consequence: { promote: [{ objectID: 'iPhone-12345', position: 0 }] },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/Promote-iPhone-X');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'Promote-iPhone-X',
      conditions: [{ pattern: 'iPhone', anchoring: 'contains' }],
      consequence: { promote: [{ objectID: 'iPhone-12345', position: 0 }] },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('promote single item', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'promote-harry-potter-box-set',
      rule: {
        objectID: 'promote-harry-potter-box-set',
        conditions: [{ pattern: 'Harry Potter', anchoring: 'contains' }],
        consequence: { promote: [{ objectID: 'HP-12345', position: 0 }] },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/promote-harry-potter-box-set');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'promote-harry-potter-box-set',
      conditions: [{ pattern: 'Harry Potter', anchoring: 'contains' }],
      consequence: { promote: [{ objectID: 'HP-12345', position: 0 }] },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('limit search results', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'article-rule',
      rule: {
        objectID: 'article-rule',
        conditions: [{ pattern: 'article', anchoring: 'startsWith' }],
        consequence: {
          params: {
            query: { edits: [{ type: 'remove', delete: 'article' }] },
            restrictSearchableAttributes: ['title', 'book_id'],
          },
        },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/article-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'article-rule',
      conditions: [{ pattern: 'article', anchoring: 'startsWith' }],
      consequence: {
        params: {
          query: { edits: [{ type: 'remove', delete: 'article' }] },
          restrictSearchableAttributes: ['title', 'book_id'],
        },
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('query match', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'tagged-brand-rule',
      rule: {
        conditions: [{ pattern: 'brand: {facet:brand}', anchoring: 'contains', alternatives: false }],
        consequence: {
          params: { automaticFacetFilters: [{ facet: 'brand' }], query: { remove: ['brand:', '{facet:brand}'] } },
        },
        description: 'filter on brand: {brand}',
        objectID: 'tagged-brand-rule',
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/tagged-brand-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      conditions: [{ pattern: 'brand: {facet:brand}', anchoring: 'contains', alternatives: false }],
      consequence: {
        params: { automaticFacetFilters: [{ facet: 'brand' }], query: { remove: ['brand:', '{facet:brand}'] } },
      },
      description: 'filter on brand: {brand}',
      objectID: 'tagged-brand-rule',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('dynamic filtering', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'color-facets',
      rule: {
        objectID: 'color-facets',
        conditions: [{ pattern: '{facet:color}' }],
        consequence: { params: { automaticFacetFilters: [{ facet: 'color' }] } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/color-facets');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'color-facets',
      conditions: [{ pattern: '{facet:color}' }],
      consequence: { params: { automaticFacetFilters: [{ facet: 'color' }] } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('hide hits', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'hide-12345',
      rule: {
        objectID: 'hide-12345',
        conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
        consequence: { hide: [{ objectID: 'to-hide-12345' }] },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/hide-12345');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'hide-12345',
      conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
      consequence: { hide: [{ objectID: 'to-hide-12345' }] },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('one rule per facet', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'red-color',
      rule: {
        objectID: 'red-color',
        conditions: [{ pattern: 'red', anchoring: 'contains' }],
        consequence: { params: { query: { remove: ['red'] }, filters: 'color:red' } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/red-color');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'red-color',
      conditions: [{ pattern: 'red', anchoring: 'contains' }],
      consequence: { params: { query: { remove: ['red'] }, filters: 'color:red' } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('numerical filters', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'cheap',
      rule: {
        objectID: 'cheap',
        conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
        consequence: { params: { query: { remove: ['cheap'] }, filters: 'price < 10' } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/cheap');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'cheap',
      conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
      consequence: { params: { query: { remove: ['cheap'] }, filters: 'price < 10' } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('negative filters', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'gluten-free-rule',
      rule: {
        objectID: 'gluten-free-rule',
        conditions: [{ pattern: 'gluten-free', anchoring: 'contains' }],
        consequence: {
          params: { filters: 'NOT allergens:gluten', query: { edits: [{ type: 'remove', delete: 'gluten-free' }] } },
        },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/gluten-free-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'gluten-free-rule',
      conditions: [{ pattern: 'gluten-free', anchoring: 'contains' }],
      consequence: {
        params: { filters: 'NOT allergens:gluten', query: { edits: [{ type: 'remove', delete: 'gluten-free' }] } },
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('positive filters', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'diet-rule',
      rule: {
        objectID: 'diet-rule',
        conditions: [{ pattern: 'diet', anchoring: 'contains' }],
        consequence: {
          params: { filters: "'low-carb' OR 'low-fat'", query: { edits: [{ type: 'remove', delete: 'diet' }] } },
        },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/diet-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'diet-rule',
      conditions: [{ pattern: 'diet', anchoring: 'contains' }],
      consequence: {
        params: { filters: "'low-carb' OR 'low-fat'", query: { edits: [{ type: 'remove', delete: 'diet' }] } },
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('conditionless', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'diet-rule',
      rule: {
        objectID: 'diet-rule',
        consequence: {
          params: { filters: "'low-carb' OR 'low-fat'", query: { edits: [{ type: 'remove', delete: 'diet' }] } },
        },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/diet-rule');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'diet-rule',
      consequence: {
        params: { filters: "'low-carb' OR 'low-fat'", query: { edits: [{ type: 'remove', delete: 'diet' }] } },
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('contextual', async () => {
    const req = (await client.saveRule({
      indexName: 'indexName',
      objectID: 'a-rule-id',
      rule: {
        objectID: 'a-rule-id',
        conditions: [{ context: 'mobile' }],
        consequence: { params: { filters: 'release_date >= 1577836800' } },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/rules/a-rule-id');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      objectID: 'a-rule-id',
      conditions: [{ context: 'mobile' }],
      consequence: { params: { filters: 'release_date >= 1577836800' } },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('saveRules', () => {
  test('saveRules with minimal parameters', async () => {
    const req = (await client.saveRules({
      indexName: '<YOUR_INDEX_NAME>',
      rules: [
        {
          objectID: 'a-rule-id',
          conditions: [{ pattern: 'smartphone', anchoring: 'contains' }],
          consequence: { params: { filters: 'brand:apple' } },
        },
        {
          objectID: 'a-second-rule-id',
          conditions: [{ pattern: 'apple', anchoring: 'contains' }],
          consequence: { params: { filters: 'brand:samsung' } },
        },
      ],
      forwardToReplicas: false,
      clearExistingRules: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual([
      {
        objectID: 'a-rule-id',
        conditions: [{ pattern: 'smartphone', anchoring: 'contains' }],
        consequence: { params: { filters: 'brand:apple' } },
      },
      {
        objectID: 'a-second-rule-id',
        conditions: [{ pattern: 'apple', anchoring: 'contains' }],
        consequence: { params: { filters: 'brand:samsung' } },
      },
    ]);
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'false', clearExistingRules: 'true' });
  });

  test('saveRules with all parameters', async () => {
    const req = (await client.saveRules({
      indexName: '<YOUR_INDEX_NAME>',
      rules: [
        {
          objectID: 'id1',
          conditions: [{ pattern: 'apple', anchoring: 'contains', alternatives: false, context: 'search' }],
          consequence: {
            params: {
              filters: 'brand:apple',
              query: {
                remove: ['algolia'],
                edits: [
                  { type: 'remove', delete: 'abc', insert: 'cde' },
                  { type: 'replace', delete: 'abc', insert: 'cde' },
                ],
              },
            },
            hide: [{ objectID: '321' }],
            filterPromotes: false,
            userData: { algolia: 'aloglia' },
            promote: [
              { objectID: 'abc', position: 3 },
              { objectIDs: ['abc', 'def'], position: 1 },
            ],
          },
          description: 'test',
          enabled: true,
          validity: [{ from: 1656670273, until: 1656670277 }],
        },
      ],
      forwardToReplicas: true,
      clearExistingRules: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual([
      {
        objectID: 'id1',
        conditions: [{ pattern: 'apple', anchoring: 'contains', alternatives: false, context: 'search' }],
        consequence: {
          params: {
            filters: 'brand:apple',
            query: {
              remove: ['algolia'],
              edits: [
                { type: 'remove', delete: 'abc', insert: 'cde' },
                { type: 'replace', delete: 'abc', insert: 'cde' },
              ],
            },
          },
          hide: [{ objectID: '321' }],
          filterPromotes: false,
          userData: { algolia: 'aloglia' },
          promote: [
            { objectID: 'abc', position: 3 },
            { objectIDs: ['abc', 'def'], position: 1 },
          ],
        },
        description: 'test',
        enabled: true,
        validity: [{ from: 1656670273, until: 1656670277 }],
      },
    ]);
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true', clearExistingRules: 'true' });
  });

  test('dynamic filtering', async () => {
    const req = (await client.saveRules({
      indexName: '<YOUR_INDEX_NAME>',
      rules: [
        {
          objectID: 'toaster',
          conditions: [{ pattern: 'toaster', anchoring: 'contains' }],
          consequence: { params: { query: { remove: ['toaster'] }, filters: 'product_type:toaster' } },
        },
        {
          objectID: 'cheap',
          conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
          consequence: { params: { query: { remove: ['cheap'] }, filters: 'price < 15' } },
        },
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual([
      {
        objectID: 'toaster',
        conditions: [{ pattern: 'toaster', anchoring: 'contains' }],
        consequence: { params: { query: { remove: ['toaster'] }, filters: 'product_type:toaster' } },
      },
      {
        objectID: 'cheap',
        conditions: [{ pattern: 'cheap', anchoring: 'contains' }],
        consequence: { params: { query: { remove: ['cheap'] }, filters: 'price < 15' } },
      },
    ]);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enhance search results', async () => {
    const req = (await client.saveRules({
      indexName: '<YOUR_INDEX_NAME>',
      rules: [
        {
          objectID: 'country',
          conditions: [{ pattern: '{facet:country}', anchoring: 'contains' }],
          consequence: { params: { aroundLatLngViaIP: false } },
        },
        {
          objectID: 'city',
          conditions: [{ pattern: '{facet:city}', anchoring: 'contains' }],
          consequence: { params: { aroundLatLngViaIP: false } },
        },
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual([
      {
        objectID: 'country',
        conditions: [{ pattern: '{facet:country}', anchoring: 'contains' }],
        consequence: { params: { aroundLatLngViaIP: false } },
      },
      {
        objectID: 'city',
        conditions: [{ pattern: '{facet:city}', anchoring: 'contains' }],
        consequence: { params: { aroundLatLngViaIP: false } },
      },
    ]);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('saveSynonym', () => {
  test('saveSynonym', async () => {
    const req = (await client.saveSynonym({
      indexName: 'indexName',
      objectID: 'id1',
      synonymHit: { objectID: 'id1', type: 'synonym', synonyms: ['car', 'vehicule', 'auto'] },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/synonyms/id1');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ objectID: 'id1', type: 'synonym', synonyms: ['car', 'vehicule', 'auto'] });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });
});

describe('saveSynonyms', () => {
  test('saveSynonyms', async () => {
    const req = (await client.saveSynonyms({
      indexName: '<YOUR_INDEX_NAME>',
      synonymHit: [
        { objectID: 'id1', type: 'synonym', synonyms: ['car', 'vehicule', 'auto'] },
        { objectID: 'id2', type: 'onewaysynonym', input: 'iphone', synonyms: ['ephone', 'aphone', 'yphone'] },
      ],
      forwardToReplicas: true,
      replaceExistingSynonyms: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/synonyms/batch');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual([
      { objectID: 'id1', type: 'synonym', synonyms: ['car', 'vehicule', 'auto'] },
      { objectID: 'id2', type: 'onewaysynonym', input: 'iphone', synonyms: ['ephone', 'aphone', 'yphone'] },
    ]);
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true', replaceExistingSynonyms: 'true' });
  });
});

describe('search', () => {
  test('withHitsPerPage', async () => {
    const req = (await client.search({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', hitsPerPage: 50 }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', hitsPerPage: 50 }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filterOnly', async () => {
    const req = (await client.search({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', filters: 'actor:Scarlett Johansson' }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', filters: 'actor:Scarlett Johansson' }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filterOr', async () => {
    const req = (await client.search({
      requests: [
        {
          indexName: '<YOUR_INDEX_NAME>',
          query: '<YOUR_QUERY>',
          filters: 'actor:Tom Cruise OR actor:Scarlett Johansson',
        },
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        {
          indexName: '<YOUR_INDEX_NAME>',
          query: '<YOUR_QUERY>',
          filters: 'actor:Tom Cruise OR actor:Scarlett Johansson',
        },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filterNot', async () => {
    const req = (await client.search({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', filters: 'NOT actor:Nicolas Cage' }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', filters: 'NOT actor:Nicolas Cage' }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search for a single hits request with minimal parameters', async () => {
    const req = (await client.search({
      requests: [{ indexName: 'cts_e2e_search_empty_index' }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ indexName: 'cts_e2e_search_empty_index' }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search with highlight and snippet results', async () => {
    const req = (await client.search({
      requests: [
        {
          indexName: 'cts_e2e_highlight_snippet_results',
          query: 'vim',
          attributesToSnippet: ['*:20'],
          attributesToHighlight: ['*'],
          attributesToRetrieve: ['*'],
        },
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        {
          indexName: 'cts_e2e_highlight_snippet_results',
          query: 'vim',
          attributesToSnippet: ['*:20'],
          attributesToHighlight: ['*'],
          attributesToRetrieve: ['*'],
        },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('retrieveFacets', async () => {
    const req = (await client.search({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['author', 'genre'] }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['author', 'genre'] }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('retrieveFacetsWildcard', async () => {
    const req = (await client.search({
      requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['*'] }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ requests: [{ indexName: '<YOUR_INDEX_NAME>', query: '<YOUR_QUERY>', facets: ['*'] }] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search for a single facet request with minimal parameters', async () => {
    const req = (await client.search({
      requests: [{ indexName: 'cts_e2e_search_facet', type: 'facet', facet: 'editor' }],
      strategy: 'stopIfEnoughMatches',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ indexName: 'cts_e2e_search_facet', type: 'facet', facet: 'editor' }],
      strategy: 'stopIfEnoughMatches',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search for a single hits request with all parameters', async () => {
    const req = (await client.search({
      requests: [{ indexName: 'theIndexName', query: 'myQuery', hitsPerPage: 50, type: 'default' }],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [{ indexName: 'theIndexName', query: 'myQuery', hitsPerPage: 50, type: 'default' }],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search for a single facet request with all parameters', async () => {
    const req = (await client.search({
      requests: [
        {
          indexName: 'theIndexName',
          type: 'facet',
          facet: 'theFacet',
          facetQuery: 'theFacetQuery',
          query: 'theQuery',
          maxFacetHits: 50,
        },
      ],
      strategy: 'stopIfEnoughMatches',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        {
          indexName: 'theIndexName',
          type: 'facet',
          facet: 'theFacet',
          facetQuery: 'theFacetQuery',
          query: 'theQuery',
          maxFacetHits: 50,
        },
      ],
      strategy: 'stopIfEnoughMatches',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search for multiple mixed requests in multiple indices with minimal parameters', async () => {
    const req = (await client.search({
      requests: [
        { indexName: 'theIndexName' },
        { indexName: 'theIndexName2', type: 'facet', facet: 'theFacet' },
        { indexName: 'theIndexName', type: 'default' },
      ],
      strategy: 'stopIfEnoughMatches',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        { indexName: 'theIndexName' },
        { indexName: 'theIndexName2', type: 'facet', facet: 'theFacet' },
        { indexName: 'theIndexName', type: 'default' },
      ],
      strategy: 'stopIfEnoughMatches',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search for multiple mixed requests in multiple indices with all parameters', async () => {
    const req = (await client.search({
      requests: [
        {
          indexName: 'theIndexName',
          type: 'facet',
          facet: 'theFacet',
          facetQuery: 'theFacetQuery',
          query: 'theQuery',
          maxFacetHits: 50,
        },
        { indexName: 'theIndexName', query: 'myQuery', hitsPerPage: 50, type: 'default' },
      ],
      strategy: 'stopIfEnoughMatches',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        {
          indexName: 'theIndexName',
          type: 'facet',
          facet: 'theFacet',
          facetQuery: 'theFacetQuery',
          query: 'theQuery',
          maxFacetHits: 50,
        },
        { indexName: 'theIndexName', query: 'myQuery', hitsPerPage: 50, type: 'default' },
      ],
      strategy: 'stopIfEnoughMatches',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search filters accept all of the possible shapes', async () => {
    const req = (await client.search({
      requests: [
        {
          indexName: 'theIndexName',
          facetFilters: 'mySearch:filters',
          reRankingApplyFilter: 'mySearch:filters',
          tagFilters: 'mySearch:filters',
          numericFilters: 'mySearch:filters',
          optionalFilters: 'mySearch:filters',
        },
        {
          indexName: 'theIndexName',
          facetFilters: ['mySearch:filters', ['mySearch:filters', ['mySearch:filters']]],
          reRankingApplyFilter: ['mySearch:filters', ['mySearch:filters']],
          tagFilters: ['mySearch:filters', ['mySearch:filters']],
          numericFilters: ['mySearch:filters', ['mySearch:filters']],
          optionalFilters: ['mySearch:filters', ['mySearch:filters']],
        },
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        {
          indexName: 'theIndexName',
          facetFilters: 'mySearch:filters',
          reRankingApplyFilter: 'mySearch:filters',
          tagFilters: 'mySearch:filters',
          numericFilters: 'mySearch:filters',
          optionalFilters: 'mySearch:filters',
        },
        {
          indexName: 'theIndexName',
          facetFilters: ['mySearch:filters', ['mySearch:filters', ['mySearch:filters']]],
          reRankingApplyFilter: ['mySearch:filters', ['mySearch:filters']],
          tagFilters: ['mySearch:filters', ['mySearch:filters']],
          numericFilters: ['mySearch:filters', ['mySearch:filters']],
          optionalFilters: ['mySearch:filters', ['mySearch:filters']],
        },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search filters end to end', async () => {
    const req = (await client.search({
      requests: [
        { indexName: 'cts_e2e_search_facet', filters: "editor:'visual studio' OR editor:neovim" },
        { indexName: 'cts_e2e_search_facet', facetFilters: ["editor:'visual studio'", 'editor:neovim'] },
        { indexName: 'cts_e2e_search_facet', facetFilters: ["editor:'visual studio'", ['editor:neovim']] },
        {
          indexName: 'cts_e2e_search_facet',
          facetFilters: ["editor:'visual studio'", ['editor:neovim', ['editor:goland']]],
        },
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        { indexName: 'cts_e2e_search_facet', filters: "editor:'visual studio' OR editor:neovim" },
        { indexName: 'cts_e2e_search_facet', facetFilters: ["editor:'visual studio'", 'editor:neovim'] },
        { indexName: 'cts_e2e_search_facet', facetFilters: ["editor:'visual studio'", ['editor:neovim']] },
        {
          indexName: 'cts_e2e_search_facet',
          facetFilters: ["editor:'visual studio'", ['editor:neovim', ['editor:goland']]],
        },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search with all search parameters', async () => {
    const req = (await client.search({
      requests: [
        {
          advancedSyntax: true,
          advancedSyntaxFeatures: ['exactPhrase'],
          allowTyposOnNumericTokens: true,
          alternativesAsExact: ['multiWordsSynonym'],
          analytics: true,
          analyticsTags: [''],
          aroundLatLng: '',
          aroundLatLngViaIP: true,
          aroundPrecision: 0,
          aroundRadius: 'all',
          attributeCriteriaComputedByMinProximity: true,
          attributesToHighlight: [''],
          attributesToRetrieve: [''],
          attributesToSnippet: [''],
          clickAnalytics: true,
          decompoundQuery: true,
          disableExactOnAttributes: [''],
          disableTypoToleranceOnAttributes: [''],
          distinct: 0,
          enableABTest: true,
          enablePersonalization: true,
          enableReRanking: true,
          enableRules: true,
          exactOnSingleWordQuery: 'attribute',
          facetFilters: [''],
          facetingAfterDistinct: true,
          facets: [''],
          filters: '',
          getRankingInfo: true,
          highlightPostTag: '',
          highlightPreTag: '',
          hitsPerPage: 1,
          ignorePlurals: false,
          indexName: 'theIndexName',
          insideBoundingBox: [
            [47.3165, 4.9665, 47.3424, 5.0201],
            [40.9234, 2.1185, 38.643, 1.9916],
          ],
          insidePolygon: [
            [47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9],
            [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104],
          ],
          length: 1,
          maxValuesPerFacet: 0,
          minProximity: 1,
          minWordSizefor1Typo: 0,
          minWordSizefor2Typos: 0,
          minimumAroundRadius: 1,
          naturalLanguages: ['fr'],
          numericFilters: [''],
          offset: 0,
          optionalFilters: [''],
          optionalWords: [''],
          page: 0,
          percentileComputation: true,
          personalizationImpact: 0,
          query: '',
          queryLanguages: ['fr'],
          queryType: 'prefixAll',
          ranking: [''],
          reRankingApplyFilter: [''],
          relevancyStrictness: 0,
          removeStopWords: true,
          removeWordsIfNoResults: 'allOptional',
          renderingContent: {
            facetOrdering: { facets: { order: ['a', 'b'] }, values: { a: { order: ['b'], sortRemainingBy: 'count' } } },
          },
          replaceSynonymsInHighlight: true,
          responseFields: [''],
          restrictHighlightAndSnippetArrays: true,
          restrictSearchableAttributes: [''],
          ruleContexts: [''],
          similarQuery: '',
          snippetEllipsisText: '',
          sortFacetValuesBy: '',
          sumOrFiltersScores: true,
          synonyms: true,
          tagFilters: [''],
          type: 'default',
          typoTolerance: 'min',
          userToken: '',
        },
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/*/queries');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        {
          advancedSyntax: true,
          advancedSyntaxFeatures: ['exactPhrase'],
          allowTyposOnNumericTokens: true,
          alternativesAsExact: ['multiWordsSynonym'],
          analytics: true,
          analyticsTags: [''],
          aroundLatLng: '',
          aroundLatLngViaIP: true,
          aroundPrecision: 0,
          aroundRadius: 'all',
          attributeCriteriaComputedByMinProximity: true,
          attributesToHighlight: [''],
          attributesToRetrieve: [''],
          attributesToSnippet: [''],
          clickAnalytics: true,
          decompoundQuery: true,
          disableExactOnAttributes: [''],
          disableTypoToleranceOnAttributes: [''],
          distinct: 0,
          enableABTest: true,
          enablePersonalization: true,
          enableReRanking: true,
          enableRules: true,
          exactOnSingleWordQuery: 'attribute',
          facetFilters: [''],
          facetingAfterDistinct: true,
          facets: [''],
          filters: '',
          getRankingInfo: true,
          highlightPostTag: '',
          highlightPreTag: '',
          hitsPerPage: 1,
          ignorePlurals: false,
          indexName: 'theIndexName',
          insideBoundingBox: [
            [47.3165, 4.9665, 47.3424, 5.0201],
            [40.9234, 2.1185, 38.643, 1.9916],
          ],
          insidePolygon: [
            [47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9],
            [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104],
          ],
          length: 1,
          maxValuesPerFacet: 0,
          minProximity: 1,
          minWordSizefor1Typo: 0,
          minWordSizefor2Typos: 0,
          minimumAroundRadius: 1,
          naturalLanguages: ['fr'],
          numericFilters: [''],
          offset: 0,
          optionalFilters: [''],
          optionalWords: [''],
          page: 0,
          percentileComputation: true,
          personalizationImpact: 0,
          query: '',
          queryLanguages: ['fr'],
          queryType: 'prefixAll',
          ranking: [''],
          reRankingApplyFilter: [''],
          relevancyStrictness: 0,
          removeStopWords: true,
          removeWordsIfNoResults: 'allOptional',
          renderingContent: {
            facetOrdering: { facets: { order: ['a', 'b'] }, values: { a: { order: ['b'], sortRemainingBy: 'count' } } },
          },
          replaceSynonymsInHighlight: true,
          responseFields: [''],
          restrictHighlightAndSnippetArrays: true,
          restrictSearchableAttributes: [''],
          ruleContexts: [''],
          similarQuery: '',
          snippetEllipsisText: '',
          sortFacetValuesBy: '',
          sumOrFiltersScores: true,
          synonyms: true,
          tagFilters: [''],
          type: 'default',
          typoTolerance: 'min',
          userToken: '',
        },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchDictionaryEntries', () => {
  test('get searchDictionaryEntries results with minimal parameters', async () => {
    const req = (await client.searchDictionaryEntries({
      dictionaryName: 'stopwords',
      searchDictionaryEntriesParams: { query: 'about' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/stopwords/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'about' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('get searchDictionaryEntries results with all parameters', async () => {
    const req = (await client.searchDictionaryEntries({
      dictionaryName: 'compounds',
      searchDictionaryEntriesParams: { query: 'foo', page: 4, hitsPerPage: 2, language: 'fr' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/compounds/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'foo', page: 4, hitsPerPage: 2, language: 'fr' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchForFacetValues', () => {
  test('get searchForFacetValues results with minimal parameters', async () => {
    const req = (await client.searchForFacetValues({
      indexName: 'indexName',
      facetName: 'facetName',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/facets/facetName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('get searchForFacetValues results with all parameters', async () => {
    const req = (await client.searchForFacetValues({
      indexName: 'indexName',
      facetName: 'facetName',
      searchForFacetValuesRequest: { params: "query=foo&facetFilters=['bar']", facetQuery: 'foo', maxFacetHits: 42 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/facets/facetName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ params: "query=foo&facetFilters=['bar']", facetQuery: 'foo', maxFacetHits: 42 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facetName and facetQuery', async () => {
    const req = (await client.searchForFacetValues({
      indexName: 'indexName',
      facetName: 'author',
      searchForFacetValuesRequest: { facetQuery: 'stephen' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/facets/author/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facetQuery: 'stephen' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchRules', () => {
  test('searchRules', async () => {
    const req = (await client.searchRules({
      indexName: 'cts_e2e_browse',
      searchRulesParams: { query: 'zorro' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/cts_e2e_browse/rules/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'zorro' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchSingleIndex', () => {
  test('search with minimal parameters', async () => {
    const req = (await client.searchSingleIndex({ indexName: 'indexName' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search with special characters in indexName', async () => {
    const req = (await client.searchSingleIndex({ indexName: 'cts_e2e_space in index' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/cts_e2e_space%20in%20index/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search with searchParams', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'myQuery', facetFilters: ['tags:algolia'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'myQuery', facetFilters: ['tags:algolia'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('single search retrieve snippets', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'cts_e2e_browse',
      searchParams: {
        query: 'batman mask of the phantasm',
        attributesToRetrieve: ['*'],
        attributesToSnippet: ['*:20'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/cts_e2e_browse/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'batman mask of the phantasm',
      attributesToRetrieve: ['*'],
      attributesToSnippet: ['*:20'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('query', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'phone' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'phone' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { filters: 'country:US AND price.gross < 2.0' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ filters: 'country:US AND price.gross < 2.0' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filters for stores', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'ben', filters: 'categories:politics AND store:Gibert Joseph Saint-Michel' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'ben', filters: 'categories:politics AND store:Gibert Joseph Saint-Michel' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filters boolean', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { filters: 'is_available:true' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ filters: 'is_available:true' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('distinct', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { distinct: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ distinct: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filtersNumeric', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { filters: 'price < 10' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ filters: 'price < 10' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filtersTimestamp', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { filters: 'NOT date_timestamp:1514764800 TO 1546300799' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ filters: 'NOT date_timestamp:1514764800 TO 1546300799' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filtersSumOrFiltersScoresFalse', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        filters: '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
        sumOrFiltersScores: false,
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      filters: '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
      sumOrFiltersScores: false,
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filtersSumOrFiltersScoresTrue', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        filters: '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
        sumOrFiltersScores: true,
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      filters: '(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)',
      sumOrFiltersScores: true,
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filtersStephenKing', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { filters: 'author:"Stephen King"' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ filters: 'author:"Stephen King"' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filtersNotTags', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'harry', filters: '_tags:non-fiction' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'harry', filters: '_tags:non-fiction' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facetFiltersList', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { facetFilters: ['publisher:Penguin', ['author:Stephen King', 'genre:Horror']] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facetFilters: ['publisher:Penguin', ['author:Stephen King', 'genre:Horror']] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facetFiltersBook', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', facetFilters: ['category:Book'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', facetFilters: ['category:Book'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facetFiltersAND', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', facetFilters: ['category:Book', 'author:John Doe'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', facetFilters: ['category:Book', 'author:John Doe'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facetFiltersOR', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', facetFilters: [['category:Book', 'author:John Doe']] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', facetFilters: [['category:Book', 'author:John Doe']] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facetFiltersCombined', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', facetFilters: ['author:John Doe', ['category:Book', 'category:Movie']] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'query',
      facetFilters: ['author:John Doe', ['category:Book', 'category:Movie']],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facetFiltersNeg', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { facetFilters: 'category:-Ebook' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facetFilters: 'category:-Ebook' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('filtersAndFacetFilters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { filters: '(author:"Stephen King" OR genre:"Horror")', facetFilters: ['publisher:Penguin'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      filters: '(author:"Stephen King" OR genre:"Horror")',
      facetFilters: ['publisher:Penguin'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facet author genre', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { facets: ['author', 'genre'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facets: ['author', 'genre'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facet wildcard', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { facets: ['*'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facets: ['*'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('maxValuesPerFacet', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { maxValuesPerFacet: 1000 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ maxValuesPerFacet: 1000 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('aroundLatLng', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { aroundLatLng: '40.71, -74.01' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ aroundLatLng: '40.71, -74.01' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('aroundLatLngViaIP', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { aroundLatLngViaIP: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ aroundLatLngViaIP: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('aroundRadius', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { aroundLatLng: '40.71, -74.01', aroundRadius: 1000000 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ aroundLatLng: '40.71, -74.01', aroundRadius: 1000000 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('insideBoundingBox', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { insideBoundingBox: [[49.067996905313834, 65.73828125, 25.905859247243498, 128.8046875]] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      insideBoundingBox: [[49.067996905313834, 65.73828125, 25.905859247243498, 128.8046875]],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('insidePolygon', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        insidePolygon: [
          [
            42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005,
            31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545,
            -117.54828125,
          ],
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      insidePolygon: [
        [
          42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005,
          31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545,
          -117.54828125,
        ],
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('insidePolygon', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        insidePolygon: [
          [
            42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005,
            31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545,
            -117.54828125,
          ],
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      insidePolygon: [
        [
          42.01, -124.31, 48.835509470063045, -124.40453125000005, 45.01082951668149, -65.95726562500005,
          31.247243545293433, -81.06578125000004, 25.924152577235226, -97.68234374999997, 32.300311895879545,
          -117.54828125,
        ],
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('optionalFilters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { optionalFilters: ['can_deliver_quickly:true'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ optionalFilters: ['can_deliver_quickly:true'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('optionalFiltersMany', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { optionalFilters: ['brand:Apple<score=3>', 'brand:Samsung<score=2>', 'brand:-Huawei'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ optionalFilters: ['brand:Apple<score=3>', 'brand:Samsung<score=2>', 'brand:-Huawei'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('optionalFiltersSimple', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { optionalFilters: ['brand:Apple<score=2>', 'type:tablet'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ optionalFilters: ['brand:Apple<score=2>', 'type:tablet'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('restrictSearchableAttributes', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { restrictSearchableAttributes: ['title_fr'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ restrictSearchableAttributes: ['title_fr'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('getRankingInfo', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { getRankingInfo: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ getRankingInfo: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('clickAnalytics', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { clickAnalytics: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ clickAnalytics: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('clickAnalyticsUserToken', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { clickAnalytics: true, userToken: 'user-1' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ clickAnalytics: true, userToken: 'user-1' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enablePersonalization', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { enablePersonalization: true, userToken: 'user-1' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ enablePersonalization: true, userToken: 'user-1' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('userToken', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { userToken: 'user-1' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ userToken: 'user-1' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('userToken1234', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', userToken: 'user-1234' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', userToken: 'user-1234' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('analyticsTag', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { analyticsTags: ['YOUR_ANALYTICS_TAG'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ analyticsTags: ['YOUR_ANALYTICS_TAG'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facetFiltersUsers', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { facetFilters: ['user:user42', 'user:public'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facetFilters: ['user:user42', 'user:public'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('buildTheQuery', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { filters: "categoryPageId: Men's Clothing", hitsPerPage: 50, analyticsTags: ['mens-clothing'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      filters: "categoryPageId: Men's Clothing",
      hitsPerPage: 50,
      analyticsTags: ['mens-clothing'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesToHighlightOverride', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', attributesToHighlight: ['title', 'content'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', attributesToHighlight: ['title', 'content'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disableTypoToleranceOnAttributes', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', disableTypoToleranceOnAttributes: ['serial_number'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', disableTypoToleranceOnAttributes: ['serial_number'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_a_query', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'shirt' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'shirt' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_everything', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: '' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: '' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('api_filtering_range_example', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'books', filters: 'price:10 TO 20' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'books', filters: 'price:10 TO 20' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_a_query', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        query: '',
        similarQuery: 'Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen',
        filters: 'year:1991 TO 2001',
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: '',
      similarQuery: 'Comedy Drama Crime McDormand Macy Buscemi Stormare Presnell Coen',
      filters: 'year:1991 TO 2001',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_retrievable_attributes', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', attributesToRetrieve: ['title', 'content'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', attributesToRetrieve: ['title', 'content'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('restrict_searchable_attributes', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', restrictSearchableAttributes: ['title', 'author'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', restrictSearchableAttributes: ['title', 'author'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_relevancy', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', relevancyStrictness: 70 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', relevancyStrictness: 70 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('apply_filters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', filters: '(category:Book OR category:Ebook) AND _tags:published' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', filters: '(category:Book OR category:Ebook) AND _tags:published' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('apply_all_filters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        query: 'query',
        filters:
          'available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:"John Doe"',
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'query',
      filters:
        'available = 1 AND (category:Book OR NOT category:Ebook) AND _tags:published AND publication_date:1441745506 TO 1441755506 AND inStock > 0 AND author:"John Doe"',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('escape_spaces', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', filters: 'category:"Books and Comics"' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', filters: 'category:"Books and Comics"' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('escape_keywords', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', filters: 'keyword:"OR"' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', filters: 'keyword:"OR"' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('escape_single_quotes', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', filters: 'content:"It\'s a wonderful day"' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', filters: 'content:"It\'s a wonderful day"' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('escape_double_quotes', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', filters: 'content:"She said "Hello World"' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', filters: 'content:"She said "Hello World"' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('apply_filters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', optionalFilters: ['category:Book', 'author:John Doe'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', optionalFilters: ['category:Book', 'author:John Doe'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('apply_negative_filters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', optionalFilters: ['category:Book', 'author:-John Doe'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', optionalFilters: ['category:Book', 'author:-John Doe'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('apply_negative_filters_restaurants', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', optionalFilters: ["restaurant:-Bert's Inn"] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', optionalFilters: ["restaurant:-Bert's Inn"] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('apply_numeric_filters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', numericFilters: ['price < 1000', ['inStock = 1', 'deliveryDate < 1441755506']] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'query',
      numericFilters: ['price < 1000', ['inStock = 1', 'deliveryDate < 1441755506']],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('apply_tag_filters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', tagFilters: ['SciFi', ['Book', 'Movie']] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', tagFilters: ['SciFi', ['Book', 'Movie']] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('apply_filters', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', sumOrFiltersScores: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', sumOrFiltersScores: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('facets_all', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', facets: ['*'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', facets: ['*'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('retrieve_only_some_facets', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', facets: ['category', 'author'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', facets: ['category', 'author'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_max_values_per_facet', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', maxValuesPerFacet: 20 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', maxValuesPerFacet: 20 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_faceting_after_distinct', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', facetingAfterDistinct: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', facetingAfterDistinct: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('sort_facet_values_alphabetically', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', sortFacetValuesBy: 'count' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', sortFacetValuesBy: 'count' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_attributes_to_snippet', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', attributesToSnippet: ['title', 'content:80'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', attributesToSnippet: ['title', 'content:80'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_highlight_pre_tag', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', highlightPreTag: '<strong>' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', highlightPreTag: '<strong>' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_highlight_post_tag', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', highlightPostTag: '</strong>' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', highlightPostTag: '</strong>' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_snippet_ellipsis_text', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', snippetEllipsisText: '' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', snippetEllipsisText: '' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_restrict_highlight_and_snippet_arrays', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', restrictHighlightAndSnippetArrays: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', restrictHighlightAndSnippetArrays: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('access_page', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', page: 0 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', page: 0 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_hits_per_page', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', hitsPerPage: 10 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', hitsPerPage: 10 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('get_nth_hit', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', offset: 4 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', offset: 4 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('get_n_results', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', length: 4 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', length: 4 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_min_word_size_for_one_typo', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', minWordSizefor1Typo: 2 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', minWordSizefor1Typo: 2 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_min_word_size_for_two_typos', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', minWordSizefor2Typos: 2 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', minWordSizefor2Typos: 2 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_typo_tolerance_mode', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', typoTolerance: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', typoTolerance: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disable_typos_on_numeric_tokens_at_search_time', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', allowTyposOnNumericTokens: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', allowTyposOnNumericTokens: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_around_a_position', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', aroundLatLng: '40.71, -74.01' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', aroundLatLng: '40.71, -74.01' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_around_server_ip', async () => {
    const req = (await client.searchSingleIndex(
      { indexName: 'indexName', searchParams: { query: 'query', aroundLatLngViaIP: true } },
      {
        headers: {
          'x-forwarded-for': '94.228.178.246 // should be replaced with the actual IP you would like to search around',
        },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', aroundLatLngViaIP: true });
    expect(req.searchParams).toStrictEqual(undefined);
    expect(req.headers).toEqual(
      expect.objectContaining({
        'x-forwarded-for': '94.228.178.246 // should be replaced with the actual IP you would like to search around',
      }),
    );
  });

  test('set_around_radius', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', aroundRadius: 1000 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', aroundRadius: 1000 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disable_automatic_radius', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', aroundRadius: 'all' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', aroundRadius: 'all' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_geo_search_precision', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', aroundPrecision: 100 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', aroundPrecision: 100 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_geo_search_precision_non_linear', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        query: 'query',
        aroundPrecision: [
          { from: 0, value: 25 },
          { from: 2000, value: 1000 },
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'query',
      aroundPrecision: [
        { from: 0, value: 25 },
        { from: 2000, value: 1000 },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_minimum_geo_search_radius', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', minimumAroundRadius: 1000 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', minimumAroundRadius: 1000 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_inside_rectangular_area', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        query: 'query',
        insideBoundingBox: [[46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625]],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'query',
      insideBoundingBox: [[46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625]],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_inside_multiple_rectangular_areas', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        query: 'query',
        insideBoundingBox: [
          [46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625],
          [49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875],
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'query',
      insideBoundingBox: [
        [46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625],
        [49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875],
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_inside_polygon_area', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        query: 'query',
        insidePolygon: [
          [46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625, 49.62625916704081, 4.6181640625],
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'query',
      insidePolygon: [
        [46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625, 49.62625916704081, 4.6181640625],
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('search_inside_multiple_polygon_areas', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: {
        query: 'query',
        insidePolygon: [
          [46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625, 49.62625916704081, 4.6181640625],
          [
            49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875, 45.17210966999772, 1.009765625,
            50.62626704081, 4.6181640625,
          ],
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      query: 'query',
      insidePolygon: [
        [46.650828100116044, 7.123046875, 45.17210966999772, 1.009765625, 49.62625916704081, 4.6181640625],
        [
          49.62625916704081, 4.6181640625, 47.715070300900194, 0.482421875, 45.17210966999772, 1.009765625,
          50.62626704081, 4.6181640625,
        ],
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_querylanguages_override', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', ignorePlurals: ['ca', 'es'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', ignorePlurals: ['ca', 'es'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_querylanguages_override', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', removeStopWords: ['ca', 'es'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', removeStopWords: ['ca', 'es'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_querylanguages_override', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', removeStopWords: ['ca', 'es'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', removeStopWords: ['ca', 'es'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_querylanguages_with_japanese_query', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', queryLanguages: ['ja', 'en'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', queryLanguages: ['ja', 'en'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_natural_languages', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: '', naturalLanguages: ['fr'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: '', naturalLanguages: ['fr'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_natural_languages_with_query', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: '', naturalLanguages: ['fr'], removeWordsIfNoResults: 'firstWords' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: '', naturalLanguages: ['fr'], removeWordsIfNoResults: 'firstWords' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_decompound_query_search_time', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', decompoundQuery: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', decompoundQuery: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_rules_search_time', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', enableRules: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', enableRules: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_rule_contexts', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', ruleContexts: ['front_end', 'website2'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', ruleContexts: ['front_end', 'website2'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_personalization', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', enablePersonalization: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', enablePersonalization: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_personalization_with_user_token', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', enablePersonalization: true, userToken: '123456' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', enablePersonalization: true, userToken: '123456' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('personalization_impact', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', personalizationImpact: 20 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', personalizationImpact: 20 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_user_token', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', userToken: '123456' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', userToken: '123456' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_user_token_with_personalization', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', enablePersonalization: true, userToken: '123456' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', enablePersonalization: true, userToken: '123456' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_query_type', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', queryType: 'prefixAll' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', queryType: 'prefixAll' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_remove_words_if_no_results', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', removeWordsIfNoResults: 'lastWords' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', removeWordsIfNoResults: 'lastWords' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_advanced_syntax_search_time', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', advancedSyntax: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', advancedSyntax: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('overide_default_optional_words', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', optionalWords: ['toyota', '2020 2021'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', optionalWords: ['toyota', '2020 2021'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disabling_exact_for_some_attributes_search_time', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', disableExactOnAttributes: ['description'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', disableExactOnAttributes: ['description'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_exact_single_word_query', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', exactOnSingleWordQuery: 'none' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', exactOnSingleWordQuery: 'none' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_aternative_as_exact', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', alternativesAsExact: ['multiWordsSynonym'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', alternativesAsExact: ['multiWordsSynonym'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_advanced_syntax_exact_phrase', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', advancedSyntax: true, advancedSyntaxFeatures: ['exactPhrase'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', advancedSyntax: true, advancedSyntaxFeatures: ['exactPhrase'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_advanced_syntax_exclude_words', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', advancedSyntax: true, advancedSyntaxFeatures: ['excludeWords'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', advancedSyntax: true, advancedSyntaxFeatures: ['excludeWords'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_distinct', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', distinct: 0 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', distinct: 0 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('get_ranking_info', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', getRankingInfo: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', getRankingInfo: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disable_click_analytics', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', clickAnalytics: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', clickAnalytics: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_click_analytics', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', clickAnalytics: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', clickAnalytics: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disable_analytics', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', analytics: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', analytics: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('add_analytics_tags', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', analyticsTags: ['front_end', 'website2'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', analyticsTags: ['front_end', 'website2'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disable_synonyms', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', synonyms: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', synonyms: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_replace_synonyms_in_highlights', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', replaceSynonymsInHighlight: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', replaceSynonymsInHighlight: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_min_proximity', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', minProximity: 2 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', minProximity: 2 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_default_field', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', responseFields: ['hits', 'facets'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', responseFields: ['hits', 'facets'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('override_percentile_computation', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', percentileComputation: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', percentileComputation: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_ab_test', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', enableABTest: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', enableABTest: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_enable_re_ranking', async () => {
    const req = (await client.searchSingleIndex({
      indexName: 'indexName',
      searchParams: { query: 'query', enableReRanking: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query', enableReRanking: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('with algolia user id', async () => {
    const req = (await client.searchSingleIndex(
      { indexName: 'indexName', searchParams: { query: 'query' } },
      {
        headers: { 'X-Algolia-User-ID': 'user1234' },
      },
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'query' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchSynonyms', () => {
  test('searchSynonyms with minimal parameters', async () => {
    const req = (await client.searchSynonyms({ indexName: 'indexName' })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/synonyms/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchSynonyms with all parameters', async () => {
    const req = (await client.searchSynonyms({
      indexName: 'indexName',
      searchSynonymsParams: { query: 'myQuery', type: 'altcorrection1', page: 10, hitsPerPage: 10 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/indexName/synonyms/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'myQuery', type: 'altcorrection1', page: 10, hitsPerPage: 10 });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchUserIds', () => {
  test('searchUserIds', async () => {
    const req = (await client.searchUserIds({
      query: 'test',
      clusterName: 'theClusterName',
      page: 5,
      hitsPerPage: 10,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/clusters/mapping/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ query: 'test', clusterName: 'theClusterName', page: 5, hitsPerPage: 10 });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('setDictionarySettings', () => {
  test('get setDictionarySettings results with minimal parameters', async () => {
    const req = (await client.setDictionarySettings({
      disableStandardEntries: { plurals: { fr: false, en: false, ru: true } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/*/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ disableStandardEntries: { plurals: { fr: false, en: false, ru: true } } });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('get setDictionarySettings results with all parameters', async () => {
    const req = (await client.setDictionarySettings({
      disableStandardEntries: {
        plurals: { fr: false, en: false, ru: true },
        stopwords: { fr: false },
        compounds: { ru: true },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/dictionaries/*/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      disableStandardEntries: {
        plurals: { fr: false, en: false, ru: true },
        stopwords: { fr: false },
        compounds: { ru: true },
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('setSettings', () => {
  test('minimal parameters', async () => {
    const req = (await client.setSettings({
      indexName: 'cts_e2e_settings',
      indexSettings: { paginationLimitedTo: 10 },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/cts_e2e_settings/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ paginationLimitedTo: 10 });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('boolean typoTolerance', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { typoTolerance: true },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ typoTolerance: true });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('enum typoTolerance', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { typoTolerance: 'min' },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ typoTolerance: 'min' });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('ignorePlurals', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { ignorePlurals: true },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ ignorePlurals: true });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('list of string ignorePlurals', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { ignorePlurals: ['fr'] },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ ignorePlurals: ['fr'] });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('removeStopWords boolean', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { removeStopWords: true },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ removeStopWords: true });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('removeStopWords list of string', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { removeStopWords: ['fr'] },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ removeStopWords: ['fr'] });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('boolean distinct', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { distinct: true },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ distinct: true });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('integer distinct', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { distinct: 1 },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ distinct: 1 });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('distinct company', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributeForDistinct: 'company', distinct: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributeForDistinct: 'company', distinct: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('distinct design', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributeForDistinct: 'design', distinct: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributeForDistinct: 'design', distinct: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('distinct true', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { distinct: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ distinct: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('distinct section', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributeForDistinct: 'section', distinct: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributeForDistinct: 'section', distinct: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting allergens', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['allergens'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['allergens'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting availableIn', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['color', 'availableIn'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['color', 'availableIn'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('api_attributes_for_faceting', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['genre', 'author'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['genre', 'author'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('api_attributes_for_faceting_searchable', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['genre', 'searchable(author)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['genre', 'searchable(author)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('api_attributes_for_filter_only', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['filterOnly(genre)', 'author'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['filterOnly(genre)', 'author'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting categoryPageId', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['searchable(categoryPageId)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['searchable(categoryPageId)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('unretrievableAttributes', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { unretrievableAttributes: ['visible_by'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ unretrievableAttributes: ['visible_by'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting user restricted data', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['filterOnly(visible_by)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['filterOnly(visible_by)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting optional filters', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['can_deliver_quickly', 'restaurant'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['can_deliver_quickly', 'restaurant'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting redirect index', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['query_terms'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['query_terms'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting multiple consequences', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['director'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['director'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting in-depth optional filters', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['filterOnly(brand)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['filterOnly(brand)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('mode neuralSearch', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { mode: 'neuralSearch' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ mode: 'neuralSearch' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('mode keywordSearch', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { mode: 'keywordSearch' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ mode: 'keywordSearch' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributes same priority', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { searchableAttributes: ['title,comments', 'ingredients'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['title,comments', 'ingredients'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributes higher priority', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { searchableAttributes: ['title', 'ingredients'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['title', 'ingredients'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('customRanking retweets', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['desc(retweets)', 'desc(likes)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customRanking: ['desc(retweets)', 'desc(likes)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('customRanking boosted', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['desc(boosted)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customRanking: ['desc(boosted)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('customRanking pageviews', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['desc(pageviews)', 'desc(comments)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customRanking: ['desc(pageviews)', 'desc(comments)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('customRanking applying search parameters for a specific query', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['desc(nb_airline_liaisons)'], attributesForFaceting: ['city, country'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      customRanking: ['desc(nb_airline_liaisons)'],
      attributesForFaceting: ['city, country'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('customRanking rounded pageviews', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['desc(rounded_pageviews)', 'desc(comments)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customRanking: ['desc(rounded_pageviews)', 'desc(comments)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('customRanking price', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['desc(price)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customRanking: ['desc(price)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('ranking exhaustive (price)', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        ranking: ['desc(price)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      ranking: ['desc(price)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('ranking exhaustive (is_popular)', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        ranking: ['desc(is_popular)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      ranking: ['desc(is_popular)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('ranking standard replica', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { ranking: ['desc(post_date_timestamp)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ ranking: ['desc(post_date_timestamp)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('ranking virtual replica', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['desc(post_date_timestamp)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customRanking: ['desc(post_date_timestamp)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('customRanking and ranking sort alphabetically', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        customRanking: ['asc(textual_attribute)'],
        ranking: ['custom', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      customRanking: ['asc(textual_attribute)'],
      ranking: ['custom', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('relevancyStrictness', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['asc(textual_attribute)'], relevancyStrictness: 0 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customRanking: ['asc(textual_attribute)'], relevancyStrictness: 0 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('create replica index', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { replicas: ['products_price_desc'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ replicas: ['products_price_desc'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('create replica index articles', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { replicas: ['articles_date_desc'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ replicas: ['articles_date_desc'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('create virtual replica index', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { replicas: ['virtual(products_price_desc)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ replicas: ['virtual(products_price_desc)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('unlink replica index', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { replicas: [''] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ replicas: [''] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('forwardToReplicas', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { searchableAttributes: ['name', 'description'] },
      forwardToReplicas: true,
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['name', 'description'] });
    expect(req.searchParams).toStrictEqual({ forwardToReplicas: 'true' });
  });

  test('maxValuesPerFacet', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { maxValuesPerFacet: 1000 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ maxValuesPerFacet: 1000 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('maxFacetHits', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { maxFacetHits: 100 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ maxFacetHits: 100 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesForFaceting complex', async () => {
    const req = (await client.setSettings({
      indexName: '<YOUR_INDEX_NAME>',
      indexSettings: { attributesForFaceting: ['actor', 'filterOnly(category)', 'searchable(publisher)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/%3CYOUR_INDEX_NAME%3E/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesForFaceting: ['actor', 'filterOnly(category)', 'searchable(publisher)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('ranking closest dates', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        ranking: [
          'asc(date_timestamp)',
          'typo',
          'geo',
          'words',
          'filters',
          'proximity',
          'attribute',
          'exact',
          'custom',
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      ranking: ['asc(date_timestamp)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributes item variation', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { searchableAttributes: ['design', 'type', 'color'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['design', 'type', 'color'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributes around location', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        searchableAttributes: ['name', 'country', 'city', 'iata_code'],
        customRanking: ['desc(links_count)'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      searchableAttributes: ['name', 'country', 'city', 'iata_code'],
      customRanking: ['desc(links_count)'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesToHighlight', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributesToHighlight: ['author', 'title', 'content'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesToHighlight: ['author', 'title', 'content'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('attributesToHighlightStar', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributesToHighlight: ['*'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesToHighlight: ['*'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('everything', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        advancedSyntax: true,
        advancedSyntaxFeatures: ['exactPhrase'],
        allowCompressionOfIntegerArray: true,
        allowTyposOnNumericTokens: true,
        alternativesAsExact: ['singleWordSynonym'],
        attributeCriteriaComputedByMinProximity: true,
        attributeForDistinct: 'test',
        attributesForFaceting: ['algolia'],
        attributesToHighlight: ['algolia'],
        attributesToRetrieve: ['algolia'],
        attributesToSnippet: ['algolia'],
        attributesToTransliterate: ['algolia'],
        camelCaseAttributes: ['algolia'],
        customNormalization: { algolia: { aloglia: 'aglolia' } },
        customRanking: ['algolia'],
        decompoundQuery: false,
        decompoundedAttributes: { algolia: 'aloglia' },
        disableExactOnAttributes: ['algolia'],
        disablePrefixOnAttributes: ['algolia'],
        disableTypoToleranceOnAttributes: ['algolia'],
        disableTypoToleranceOnWords: ['algolia'],
        distinct: 3,
        enablePersonalization: true,
        enableReRanking: false,
        enableRules: true,
        exactOnSingleWordQuery: 'attribute',
        highlightPreTag: '<span>',
        highlightPostTag: '</span>',
        hitsPerPage: 10,
        ignorePlurals: false,
        indexLanguages: ['fr'],
        keepDiacriticsOnCharacters: 'abc',
        maxFacetHits: 20,
        maxValuesPerFacet: 30,
        minProximity: 6,
        minWordSizefor1Typo: 5,
        minWordSizefor2Typos: 11,
        mode: 'neuralSearch',
        numericAttributesForFiltering: ['algolia'],
        optionalWords: ['myspace'],
        paginationLimitedTo: 0,
        queryLanguages: ['fr'],
        queryType: 'prefixLast',
        ranking: ['geo'],
        reRankingApplyFilter: 'mySearch:filters',
        relevancyStrictness: 10,
        removeStopWords: false,
        removeWordsIfNoResults: 'lastWords',
        renderingContent: {
          facetOrdering: { facets: { order: ['a', 'b'] }, values: { a: { order: ['b'], sortRemainingBy: 'count' } } },
        },
        replaceSynonymsInHighlight: true,
        replicas: [''],
        responseFields: ['algolia'],
        restrictHighlightAndSnippetArrays: true,
        searchableAttributes: ['foo'],
        semanticSearch: { eventSources: ['foo'] },
        separatorsToIndex: 'bar',
        snippetEllipsisText: '---',
        sortFacetValuesBy: 'date',
        typoTolerance: false,
        unretrievableAttributes: ['foo'],
        userData: { user: 'data' },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      advancedSyntax: true,
      advancedSyntaxFeatures: ['exactPhrase'],
      allowCompressionOfIntegerArray: true,
      allowTyposOnNumericTokens: true,
      alternativesAsExact: ['singleWordSynonym'],
      attributeCriteriaComputedByMinProximity: true,
      attributeForDistinct: 'test',
      attributesForFaceting: ['algolia'],
      attributesToHighlight: ['algolia'],
      attributesToRetrieve: ['algolia'],
      attributesToSnippet: ['algolia'],
      attributesToTransliterate: ['algolia'],
      camelCaseAttributes: ['algolia'],
      customNormalization: { algolia: { aloglia: 'aglolia' } },
      customRanking: ['algolia'],
      decompoundQuery: false,
      decompoundedAttributes: { algolia: 'aloglia' },
      disableExactOnAttributes: ['algolia'],
      disablePrefixOnAttributes: ['algolia'],
      disableTypoToleranceOnAttributes: ['algolia'],
      disableTypoToleranceOnWords: ['algolia'],
      distinct: 3,
      enablePersonalization: true,
      enableReRanking: false,
      enableRules: true,
      exactOnSingleWordQuery: 'attribute',
      highlightPreTag: '<span>',
      highlightPostTag: '</span>',
      hitsPerPage: 10,
      ignorePlurals: false,
      indexLanguages: ['fr'],
      keepDiacriticsOnCharacters: 'abc',
      maxFacetHits: 20,
      maxValuesPerFacet: 30,
      minProximity: 6,
      minWordSizefor1Typo: 5,
      minWordSizefor2Typos: 11,
      mode: 'neuralSearch',
      numericAttributesForFiltering: ['algolia'],
      optionalWords: ['myspace'],
      paginationLimitedTo: 0,
      queryLanguages: ['fr'],
      queryType: 'prefixLast',
      ranking: ['geo'],
      reRankingApplyFilter: 'mySearch:filters',
      relevancyStrictness: 10,
      removeStopWords: false,
      removeWordsIfNoResults: 'lastWords',
      renderingContent: {
        facetOrdering: { facets: { order: ['a', 'b'] }, values: { a: { order: ['b'], sortRemainingBy: 'count' } } },
      },
      replaceSynonymsInHighlight: true,
      replicas: [''],
      responseFields: ['algolia'],
      restrictHighlightAndSnippetArrays: true,
      searchableAttributes: ['foo'],
      semanticSearch: { eventSources: ['foo'] },
      separatorsToIndex: 'bar',
      snippetEllipsisText: '---',
      sortFacetValuesBy: 'date',
      typoTolerance: false,
      unretrievableAttributes: ['foo'],
      userData: { user: 'data' },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributesWithCustomRankingsAndAttributesForFaceting', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        searchableAttributes: ['brand', 'name', 'categories', 'unordered(description)'],
        customRanking: ['desc(popularity)'],
        attributesForFaceting: ['searchable(brand)', 'type', 'categories', 'price'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      searchableAttributes: ['brand', 'name', 'categories', 'unordered(description)'],
      customRanking: ['desc(popularity)'],
      attributesForFaceting: ['searchable(brand)', 'type', 'categories', 'price'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributesOrdering', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { searchableAttributes: ['unordered(title)', 'cast'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['unordered(title)', 'cast'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributesProductReferenceSuffixes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { searchableAttributes: ['name', 'product_reference', 'product_reference_suffixes'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['name', 'product_reference', 'product_reference_suffixes'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('queryLanguageAndIgnorePlurals', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { queryLanguages: ['en'], ignorePlurals: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ queryLanguages: ['en'], ignorePlurals: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributesInMovies', async () => {
    const req = (await client.setSettings({
      indexName: 'movies',
      indexSettings: { searchableAttributes: ['title_eng', 'title_fr', 'title_es'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/movies/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['title_eng', 'title_fr', 'title_es'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disablePrefixOnAttributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { disablePrefixOnAttributes: ['serial_number'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ disablePrefixOnAttributes: ['serial_number'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disableTypoToleranceOnAttributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { disableTypoToleranceOnAttributes: ['serial_number'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ disableTypoToleranceOnAttributes: ['serial_number'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributesSimpleExample', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { searchableAttributes: ['serial_number'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['serial_number'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('searchableAttributesSimpleExampleAlt', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { searchableAttributes: ['serial_number', 'serial_number_suffixes'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ searchableAttributes: ['serial_number', 'serial_number_suffixes'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_searchable_attributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        searchableAttributes: ['title,alternative_title', 'author', 'unordered(text)', 'emails.personal'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      searchableAttributes: ['title,alternative_title', 'author', 'unordered(text)', 'emails.personal'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_searchable_attributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        attributesForFaceting: [
          'author',
          'filterOnly(isbn)',
          'searchable(edition)',
          'afterDistinct(category)',
          'afterDistinct(searchable(publisher))',
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      attributesForFaceting: [
        'author',
        'filterOnly(isbn)',
        'searchable(edition)',
        'afterDistinct(category)',
        'afterDistinct(searchable(publisher))',
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('unretrievable_attributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { unretrievableAttributes: ['total_number_of_sales'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ unretrievableAttributes: ['total_number_of_sales'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_retrievable_attributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributesToRetrieve: ['author', 'title', 'content'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesToRetrieve: ['author', 'title', 'content'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_all_attributes_as_retrievable', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributesToRetrieve: ['*'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesToRetrieve: ['*'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('specify_attributes_not_to_retrieve', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributesToRetrieve: ['*', '-SKU', '-internal_desc'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesToRetrieve: ['*', '-SKU', '-internal_desc'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('neural_search', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { mode: 'neuralSearch' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ mode: 'neuralSearch' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('keyword_search', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { mode: 'keywordSearch' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ mode: 'keywordSearch' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_ranking', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { ranking: ['typo', 'geo', 'words', 'filters', 'attribute', 'proximity', 'exact', 'custom'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      ranking: ['typo', 'geo', 'words', 'filters', 'attribute', 'proximity', 'exact', 'custom'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_ranking_by_attribute_asc', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        ranking: ['asc(price)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      ranking: ['asc(price)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_ranking_by_attribute_desc', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        ranking: ['desc(price)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      ranking: ['desc(price)', 'typo', 'geo', 'words', 'filters', 'proximity', 'attribute', 'exact', 'custom'],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('restrict_searchable_attributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customRanking: ['desc(popularity)', 'asc(price)'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customRanking: ['desc(popularity)', 'asc(price)'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_relevancy', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { relevancyStrictness: 90 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ relevancyStrictness: 90 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_replicas', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { replicas: ['name_of_replica_index1', 'name_of_replica_index2'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ replicas: ['name_of_replica_index1', 'name_of_replica_index2'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_max_values_per_facet', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { maxValuesPerFacet: 100 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ maxValuesPerFacet: 100 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_sort_facet_values_by', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { sortFacetValuesBy: 'alpha' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ sortFacetValuesBy: 'alpha' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_attributes_to_snippet', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributesToSnippet: ['content:80', 'description'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesToSnippet: ['content:80', 'description'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_all_attributes_to_snippet', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributesToSnippet: ['*:80'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributesToSnippet: ['*:80'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_highlight_pre_tag', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { highlightPreTag: '<em>' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ highlightPreTag: '<em>' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_highlight_post_tag', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { highlightPostTag: '</em>' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ highlightPostTag: '</em>' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_snippet_ellipsis_text', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { snippetEllipsisText: '…' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ snippetEllipsisText: '…' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_restrict_highlight_and_snippet_arrays_by_default', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { restrictHighlightAndSnippetArrays: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ restrictHighlightAndSnippetArrays: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_hits_per_page', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { hitsPerPage: 20 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ hitsPerPage: 20 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_pagination_limit', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { paginationLimitedTo: 1000 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ paginationLimitedTo: 1000 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_min_word_size_for_one_typo', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { minWordSizefor1Typo: 4 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ minWordSizefor1Typo: 4 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_min_word_size_for_two_typos', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { minWordSizefor2Typos: 4 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ minWordSizefor2Typos: 4 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_typo_tolerance_mode', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { typoTolerance: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ typoTolerance: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disable_typos_on_numeric_tokens_by_default', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { allowTyposOnNumericTokens: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ allowTyposOnNumericTokens: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disable_typo_tolerance_for_words', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { disableTypoToleranceOnWords: ['wheel', '1X2BCD'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ disableTypoToleranceOnWords: ['wheel', '1X2BCD'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_separators_to_index', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { separatorsToIndex: '+#' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ separatorsToIndex: '+#' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_languages_using_querylanguages', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { queryLanguages: ['es'], ignorePlurals: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ queryLanguages: ['es'], ignorePlurals: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_attributes_to_transliterate', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { indexLanguages: ['ja'], attributesToTransliterate: ['name', 'description'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ indexLanguages: ['ja'], attributesToTransliterate: ['name', 'description'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_languages_using_querylanguages', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { queryLanguages: ['es'], removeStopWords: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ queryLanguages: ['es'], removeStopWords: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_camel_case_attributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { camelCaseAttributes: ['description'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ camelCaseAttributes: ['description'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_decompounded_attributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { decompoundedAttributes: { de: ['name'] } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ decompoundedAttributes: { de: ['name'] } });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_decompounded_multiple_attributes', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        decompoundedAttributes: { de: ['name_de', 'description_de'], fi: ['name_fi', 'description_fi'] },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      decompoundedAttributes: { de: ['name_de', 'description_de'], fi: ['name_fi', 'description_fi'] },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_keep_diacritics_on_characters', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { keepDiacriticsOnCharacters: 'øé' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ keepDiacriticsOnCharacters: 'øé' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_custom_normalization', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { customNormalization: { default: { ä: 'ae' } } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ customNormalization: { default: { ä: 'ae' } } });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_languages_using_querylanguages', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { queryLanguages: ['es'], removeStopWords: true, ignorePlurals: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ queryLanguages: ['es'], removeStopWords: true, ignorePlurals: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_indexlanguages', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { indexLanguages: ['ja'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ indexLanguages: ['ja'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_decompound_query_by_default', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { decompoundQuery: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ decompoundQuery: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_rules_syntax_by_default', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { enableRules: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ enableRules: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_personalization_settings', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { enablePersonalization: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ enablePersonalization: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_query_type', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { queryType: 'prefixLast' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ queryType: 'prefixLast' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_remove_words_if_no_result', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { removeWordsIfNoResults: 'none' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ removeWordsIfNoResults: 'none' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_advanced_syntax_by_default', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { advancedSyntax: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ advancedSyntax: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_optional_words', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { optionalWords: ['blue', 'iphone case'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ optionalWords: ['blue', 'iphone case'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disabling_prefix_search_for_some_attributes_by_default', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { disablePrefixOnAttributes: ['sku'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ disablePrefixOnAttributes: ['sku'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('disabling_exact_for_some_attributes_by_default', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { disableExactOnAttributes: ['description'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ disableExactOnAttributes: ['description'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_exact_single_word_query', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { exactOnSingleWordQuery: 'attribute' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ exactOnSingleWordQuery: 'attribute' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_aternative_as_exact', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { alternativesAsExact: ['ignorePlurals', 'singleWordSynonym'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ alternativesAsExact: ['ignorePlurals', 'singleWordSynonym'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_advanced_syntax_by_default', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { advancedSyntax: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ advancedSyntax: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_numeric_attributes_for_filtering', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { numericAttributesForFiltering: ['quantity', 'popularity'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ numericAttributesForFiltering: ['quantity', 'popularity'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('enable_compression_of_integer_array', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { allowCompressionOfIntegerArray: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ allowCompressionOfIntegerArray: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_attributes_for_distinct', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributeForDistinct: 'url' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributeForDistinct: 'url' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_distinct', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { distinct: 1, attributeForDistinct: 'url' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ distinct: 1, attributeForDistinct: 'url' });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_replace_synonyms_in_highlights', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { replaceSynonymsInHighlight: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ replaceSynonymsInHighlight: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_min_proximity', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { minProximity: 1 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ minProximity: 1 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_default_field', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { responseFields: ['hits', 'hitsPerPage', 'nbPages', 'page'] },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ responseFields: ['hits', 'hitsPerPage', 'nbPages', 'page'] });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_max_facet_hits', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { maxFacetHits: 10 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ maxFacetHits: 10 });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_attribute_criteria_computed_by_min_proximity', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { attributeCriteriaComputedByMinProximity: true },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ attributeCriteriaComputedByMinProximity: true });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_user_data', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: { userData: { extraData: 'This is the custom data that you want to store in your index' } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      userData: { extraData: 'This is the custom data that you want to store in your index' },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('set_rendering_content', async () => {
    const req = (await client.setSettings({
      indexName: 'theIndexName',
      indexSettings: {
        renderingContent: {
          facetOrdering: {
            facets: { order: ['size', 'brand'] },
            values: {
              brand: { order: ['uniqlo'], hide: ['muji'], sortRemainingBy: 'count' },
              size: { order: ['S', 'M', 'L'], sortRemainingBy: 'hidden' },
            },
          },
        },
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/indexes/theIndexName/settings');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      renderingContent: {
        facetOrdering: {
          facets: { order: ['size', 'brand'] },
          values: {
            brand: { order: ['uniqlo'], hide: ['muji'], sortRemainingBy: 'count' },
            size: { order: ['S', 'M', 'L'], sortRemainingBy: 'hidden' },
          },
        },
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('updateApiKey', () => {
  test('updateApiKey', async () => {
    const req = (await client.updateApiKey({
      key: 'ALGOLIA_API_KEY',
      apiKey: { acl: ['search', 'addObject'], validity: 300, maxQueriesPerIPPerHour: 100, maxHitsPerQuery: 20 },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/keys/ALGOLIA_API_KEY');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({
      acl: ['search', 'addObject'],
      validity: 300,
      maxQueriesPerIPPerHour: 100,
      maxHitsPerQuery: 20,
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});
