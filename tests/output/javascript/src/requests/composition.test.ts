// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import { describe, expect, test } from 'vitest';

import { compositionClient } from '@algolia/composition';
import type { EchoResponse } from '@algolia/requester-testing';
import { nodeEchoRequester } from '@algolia/requester-testing';

const appId = process.env.ALGOLIA_APPLICATION_ID || 'test_app_id';
const apiKey = process.env.ALGOLIA_SEARCH_KEY || 'test_api_key';

// this makes sure the types are correctly exported
const client = compositionClient(appId, apiKey, { requester: nodeEchoRequester() });

describe('search', () => {
  test('search', async () => {
    const req = (await client.search({
      compositionID: 'foo',
      requestBody: { params: { query: 'batman' } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/compositions/foo/run');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ params: { query: 'batman' } });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchForFacetValues', () => {
  test('searchForFacetValues', async () => {
    const req = (await client.searchForFacetValues({
      compositionID: 'foo',
      facetName: 'brand',
      searchForFacetValuesRequest: { params: { maxFacetHits: 10 } },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/compositions/foo/facets/brand/query');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ params: { maxFacetHits: 10 } });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});
