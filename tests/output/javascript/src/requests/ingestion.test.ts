// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import type { EchoResponse } from '@algolia/client-common';
import { ingestionClient } from '@algolia/ingestion';
import { echoRequester } from '@algolia/requester-node-http';

const appId = process.env.ALGOLIA_APPLICATION_ID || 'test_app_id';
const apiKey = process.env.ALGOLIA_SEARCH_KEY || 'test_api_key';

const client = ingestionClient(appId, apiKey, 'us', {
  requester: echoRequester(),
});

describe('createAuthentication', () => {
  test('createAuthenticationOAuth', async () => {
    const req = (await client.createAuthentication({
      type: 'oauth',
      name: 'authName',
      input: {
        url: 'http://test.oauth',
        client_id: 'myID',
        client_secret: 'mySecret',
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/authentications');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      type: 'oauth',
      name: 'authName',
      input: {
        url: 'http://test.oauth',
        client_id: 'myID',
        client_secret: 'mySecret',
      },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('createAuthenticationAlgolia', async () => {
    const req = (await client.createAuthentication({
      type: 'algolia',
      name: 'authName',
      input: { appID: 'myappID', apiKey: 'randomApiKey' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/authentications');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      type: 'algolia',
      name: 'authName',
      input: { appID: 'myappID', apiKey: 'randomApiKey' },
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('createDestination', () => {
  test('createDestination', async () => {
    const req = (await client.createDestination({
      type: 'search',
      name: 'destinationName',
      input: { indexPrefix: 'prefix_' },
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/destinations');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      type: 'search',
      name: 'destinationName',
      input: { indexPrefix: 'prefix_' },
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('createSource', () => {
  test('createSource', async () => {
    const req = (await client.createSource({
      type: 'commercetools',
      name: 'sourceName',
      input: {
        storeKeys: ['myStore'],
        locales: ['de'],
        url: 'http://commercetools.com',
        projectKey: 'keyID',
      },
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/sources');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      type: 'commercetools',
      name: 'sourceName',
      input: {
        storeKeys: ['myStore'],
        locales: ['de'],
        url: 'http://commercetools.com',
        projectKey: 'keyID',
      },
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('createTask', () => {
  test('task without cron', async () => {
    const req = (await client.createTask({
      sourceID: 'search',
      destinationID: 'destinationName',
      action: 'replace',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/2/tasks');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      sourceID: 'search',
      destinationID: 'destinationName',
      action: 'replace',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('task with cron', async () => {
    const req = (await client.createTask({
      sourceID: 'search',
      destinationID: 'destinationName',
      cron: '* * * * *',
      action: 'replace',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/2/tasks');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      sourceID: 'search',
      destinationID: 'destinationName',
      cron: '* * * * *',
      action: 'replace',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('createTaskV1', () => {
  test('createTaskOnDemand', async () => {
    const req = (await client.createTaskV1({
      sourceID: 'search',
      destinationID: 'destinationName',
      trigger: { type: 'onDemand' },
      action: 'replace',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/tasks');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      sourceID: 'search',
      destinationID: 'destinationName',
      trigger: { type: 'onDemand' },
      action: 'replace',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('createTaskSchedule', async () => {
    const req = (await client.createTaskV1({
      sourceID: 'search',
      destinationID: 'destinationName',
      trigger: { type: 'schedule', cron: '* * * * *' },
      action: 'replace',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/tasks');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      sourceID: 'search',
      destinationID: 'destinationName',
      trigger: { type: 'schedule', cron: '* * * * *' },
      action: 'replace',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('createTaskSubscription', async () => {
    const req = (await client.createTaskV1({
      sourceID: 'search',
      destinationID: 'destinationName',
      trigger: { type: 'onDemand' },
      action: 'replace',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/tasks');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      sourceID: 'search',
      destinationID: 'destinationName',
      trigger: { type: 'onDemand' },
      action: 'replace',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('createTransformation', () => {
  test('createTransformation', async () => {
    const req = (await client.createTransformation({
      code: 'foo',
      name: 'bar',
      description: 'baz',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/transformations');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ code: 'foo', name: 'bar', description: 'baz' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('customDelete', () => {
  test('allow del method for a custom path with minimal parameters', async () => {
    const req = (await client.customDelete({
      path: 'test/minimal',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/minimal');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('allow del method for a custom path with all parameters', async () => {
    const req = (await client.customDelete({
      path: 'test/all',
      parameters: { query: 'parameters' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
  });
});

describe('customGet', () => {
  test('allow get method for a custom path with minimal parameters', async () => {
    const req = (await client.customGet({
      path: 'test/minimal',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/minimal');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('allow get method for a custom path with all parameters', async () => {
    const req = (await client.customGet({
      path: 'test/all',
      parameters: { query: 'parameters with space' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({
      query: 'parameters%20with%20space',
    });
  });

  test('requestOptions should be escaped too', async () => {
    const req = (await client.customGet(
      { path: 'test/all', parameters: { query: 'to be overriden' } },
      {
        queryParameters: {
          query: 'parameters with space',
          'and an array': ['array', 'with spaces'],
        },
        headers: { 'x-header-1': 'spaces are left alone' },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({
      query: 'parameters%20with%20space',
      'and%20an%20array': 'array%2Cwith%20spaces',
    });
    expect(req.headers).toEqual(
      expect.objectContaining({ 'x-header-1': 'spaces are left alone' })
    );
  });
});

describe('customPost', () => {
  test('allow post method for a custom path with minimal parameters', async () => {
    const req = (await client.customPost({
      path: 'test/minimal',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/minimal');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('allow post method for a custom path with all parameters', async () => {
    const req = (await client.customPost({
      path: 'test/all',
      parameters: { query: 'parameters' },
      body: { body: 'parameters' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ body: 'parameters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
  });

  test('requestOptions can override default query parameters', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        queryParameters: { query: 'myQueryParameter' },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'myQueryParameter' });
  });

  test('requestOptions merges query parameters with default ones', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        queryParameters: { query2: 'myQueryParameter' },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({
      query: 'parameters',
      query2: 'myQueryParameter',
    });
  });

  test('requestOptions can override default headers', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        headers: { 'x-algolia-api-key': 'myApiKey' },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
    expect(req.headers).toEqual(
      expect.objectContaining({ 'x-algolia-api-key': 'myApiKey' })
    );
  });

  test('requestOptions merges headers with default ones', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        headers: { 'x-algolia-api-key': 'myApiKey' },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
    expect(req.headers).toEqual(
      expect.objectContaining({ 'x-algolia-api-key': 'myApiKey' })
    );
  });

  test('requestOptions queryParameters accepts booleans', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        queryParameters: { isItWorking: true },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({
      query: 'parameters',
      isItWorking: 'true',
    });
  });

  test('requestOptions queryParameters accepts integers', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        queryParameters: { myParam: 2 },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({
      query: 'parameters',
      myParam: '2',
    });
  });

  test('requestOptions queryParameters accepts list of string', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        queryParameters: { myParam: ['b and c', 'd'] },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({
      query: 'parameters',
      myParam: 'b%20and%20c%2Cd',
    });
  });

  test('requestOptions queryParameters accepts list of booleans', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        queryParameters: { myParam: [true, true, false] },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({
      query: 'parameters',
      myParam: 'true%2Ctrue%2Cfalse',
    });
  });

  test('requestOptions queryParameters accepts list of integers', async () => {
    const req = (await client.customPost(
      {
        path: 'test/requestOptions',
        parameters: { query: 'parameters' },
        body: { facet: 'filters' },
      },
      {
        queryParameters: { myParam: [1, 2] },
      }
    )) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/requestOptions');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ facet: 'filters' });
    expect(req.searchParams).toStrictEqual({
      query: 'parameters',
      myParam: '1%2C2',
    });
  });
});

describe('customPut', () => {
  test('allow put method for a custom path with minimal parameters', async () => {
    const req = (await client.customPut({
      path: 'test/minimal',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/minimal');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({});
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('allow put method for a custom path with all parameters', async () => {
    const req = (await client.customPut({
      path: 'test/all',
      parameters: { query: 'parameters' },
      body: { body: 'parameters' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/test/all');
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ body: 'parameters' });
    expect(req.searchParams).toStrictEqual({ query: 'parameters' });
  });
});

describe('deleteAuthentication', () => {
  test('deleteAuthentication', async () => {
    const req = (await client.deleteAuthentication({
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteDestination', () => {
  test('deleteDestination', async () => {
    const req = (await client.deleteDestination({
      destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteSource', () => {
  test('deleteSource', async () => {
    const req = (await client.deleteSource({
      sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteTask', () => {
  test('deleteTask', async () => {
    const req = (await client.deleteTask({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteTaskV1', () => {
  test('deleteTaskV1', async () => {
    const req = (await client.deleteTaskV1({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('deleteTransformation', () => {
  test('deleteTransformation', async () => {
    const req = (await client.deleteTransformation({
      transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('DELETE');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('disableTask', () => {
  test('disableTask', async () => {
    const req = (await client.disableTask({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable'
    );
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('disableTaskV1', () => {
  test('disableTaskV1', async () => {
    const req = (await client.disableTaskV1({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/disable'
    );
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('enableTask', () => {
  test('enableTask', async () => {
    const req = (await client.enableTask({
      taskID: '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/2/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable'
    );
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('enableTaskV1', () => {
  test('enableTaskV1', async () => {
    const req = (await client.enableTaskV1({
      taskID: '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/tasks/76ab4c2a-ce17-496f-b7a6-506dc59ee498/enable'
    );
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getAuthentication', () => {
  test('getAuthentication', async () => {
    const req = (await client.getAuthentication({
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getDestination', () => {
  test('getDestination', async () => {
    const req = (await client.getDestination({
      destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getEvent', () => {
  test('getEvent', async () => {
    const req = (await client.getEvent({
      runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      eventID: '6c02aeb1-775e-418e-870b-1faccd4b2c0c',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events/6c02aeb1-775e-418e-870b-1faccd4b2c0c'
    );
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getRun', () => {
  test('getRun', async () => {
    const req = (await client.getRun({
      runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getSource', () => {
  test('getSource', async () => {
    const req = (await client.getSource({
      sourceID: '75eeb306-51d3-4e5e-a279-3c92bd8893ac',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/sources/75eeb306-51d3-4e5e-a279-3c92bd8893ac');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getTask', () => {
  test('getTask', async () => {
    const req = (await client.getTask({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getTaskV1', () => {
  test('getTaskV1', async () => {
    const req = (await client.getTaskV1({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('getTransformation', () => {
  test('getTransformation', async () => {
    const req = (await client.getTransformation({
      transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listAuthentications', () => {
  test('getAuthentications', async () => {
    const req = (await client.listAuthentications()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/authentications');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });

  test('getAuthentications with query params', async () => {
    const req = (await client.listAuthentications({
      itemsPerPage: 2,
      page: 1,
      type: ['basic', 'algolia'],
      platform: ['none'],
      sort: 'createdAt',
      order: 'asc',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/authentications');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual({
      itemsPerPage: '2',
      page: '1',
      type: 'basic%2Calgolia',
      platform: 'none',
      sort: 'createdAt',
      order: 'asc',
    });
  });
});

describe('listDestinations', () => {
  test('getDestinations', async () => {
    const req = (await client.listDestinations()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/destinations');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listEvents', () => {
  test('getEvents', async () => {
    const req = (await client.listEvents({
      runID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/runs/6c02aeb1-775e-418e-870b-1faccd4b2c0f/events'
    );
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listRuns', () => {
  test('getRuns', async () => {
    const req = (await client.listRuns()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/runs');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listSources', () => {
  test('getSources', async () => {
    const req = (await client.listSources()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/sources');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listTasks', () => {
  test('listTasks', async () => {
    const req = (await client.listTasks()) as unknown as EchoResponse;

    expect(req.path).toEqual('/2/tasks');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listTasksV1', () => {
  test('listTasksV1', async () => {
    const req = (await client.listTasksV1()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/tasks');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('listTransformations', () => {
  test('getTransformations', async () => {
    const req = (await client.listTransformations()) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/transformations');
    expect(req.method).toEqual('GET');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('pushTask', () => {
  test('pushTask', async () => {
    const req = (await client.pushTask({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      batchWriteParams: {
        requests: [
          { action: 'addObject', body: { key: 'bar', foo: '1' } },
          { action: 'addObject', body: { key: 'baz', foo: '2' } },
        ],
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/push'
    );
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      requests: [
        { action: 'addObject', body: { key: 'bar', foo: '1' } },
        { action: 'addObject', body: { key: 'baz', foo: '2' } },
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('runSource', () => {
  test('runSource', async () => {
    const req = (await client.runSource({
      sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      runSourcePayload: {
        indexToInclude: ['products_us', 'products eu'],
        entityIDs: ['1234', '5678'],
        entityType: 'product',
      },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run'
    );
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      indexToInclude: ['products_us', 'products eu'],
      entityIDs: ['1234', '5678'],
      entityType: 'product',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('runTask', () => {
  test('runTask', async () => {
    const req = (await client.runTask({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run'
    );
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('runTaskV1', () => {
  test('runTaskV1', async () => {
    const req = (await client.runTaskV1({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f/run'
    );
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchAuthentications', () => {
  test('searchAuthentications', async () => {
    const req = (await client.searchAuthentications({
      authenticationIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/authentications/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      authenticationIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchDestinations', () => {
  test('searchDestinations', async () => {
    const req = (await client.searchDestinations({
      destinationIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/destinations/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      destinationIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchSources', () => {
  test('searchSources', async () => {
    const req = (await client.searchSources({
      sourceIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/sources/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      sourceIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchTasks', () => {
  test('searchTasks', async () => {
    const req = (await client.searchTasks({
      taskIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/2/tasks/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      taskIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchTasksV1', () => {
  test('searchTasksV1', async () => {
    const req = (await client.searchTasksV1({
      taskIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/tasks/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      taskIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('searchTransformations', () => {
  test('searchTransformations', async () => {
    const req = (await client.searchTransformations({
      transformationsIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
      ],
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/transformations/search');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      transformationsIDs: [
        '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
        '947ac9c4-7e58-4c87-b1e7-14a68e99699a',
        '76ab4c2a-ce17-496f-b7a6-506dc59ee498',
      ],
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('triggerDockerSourceDiscover', () => {
  test('triggerDockerSourceDiscover', async () => {
    const req = (await client.triggerDockerSourceDiscover({
      sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/discover'
    );
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual(undefined);
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('tryTransformations', () => {
  test('tryTransformations', async () => {
    const req = (await client.tryTransformations({
      code: 'foo',
      sampleRecord: { bar: 'baz' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/transformations/try');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ code: 'foo', sampleRecord: { bar: 'baz' } });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('updateAuthentication', () => {
  test('updateAuthentication', async () => {
    const req = (await client.updateAuthentication({
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      authenticationUpdate: { name: 'newName' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/authentications/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('PATCH');
    expect(req.data).toEqual({ name: 'newName' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('updateDestination', () => {
  test('updateDestination', async () => {
    const req = (await client.updateDestination({
      destinationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      destinationUpdate: { name: 'newName' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/destinations/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('PATCH');
    expect(req.data).toEqual({ name: 'newName' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('updateSource', () => {
  test('updateSource', async () => {
    const req = (await client.updateSource({
      sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      sourceUpdate: { name: 'newName' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('PATCH');
    expect(req.data).toEqual({ name: 'newName' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('updateTask', () => {
  test('updateTask', async () => {
    const req = (await client.updateTask({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      taskUpdate: { enabled: false, cron: '* * * * *' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/2/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('PATCH');
    expect(req.data).toEqual({ enabled: false, cron: '* * * * *' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('updateTaskV1', () => {
  test('updateTaskV1', async () => {
    const req = (await client.updateTaskV1({
      taskID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      taskUpdate: { enabled: false },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/tasks/6c02aeb1-775e-418e-870b-1faccd4b2c0f');
    expect(req.method).toEqual('PATCH');
    expect(req.data).toEqual({ enabled: false });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('updateTransformation', () => {
  test('updateTransformation', async () => {
    const req = (await client.updateTransformation({
      transformationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      transformationCreate: { code: 'foo', name: 'bar', description: 'baz' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/transformations/6c02aeb1-775e-418e-870b-1faccd4b2c0f'
    );
    expect(req.method).toEqual('PUT');
    expect(req.data).toEqual({ code: 'foo', name: 'bar', description: 'baz' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('validateSource', () => {
  test('validateSource', async () => {
    const req = (await client.validateSource({
      type: 'commercetools',
      name: 'sourceName',
      input: {
        storeKeys: ['myStore'],
        locales: ['de'],
        url: 'http://commercetools.com',
        projectKey: 'keyID',
      },
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    })) as unknown as EchoResponse;

    expect(req.path).toEqual('/1/sources/validate');
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({
      type: 'commercetools',
      name: 'sourceName',
      input: {
        storeKeys: ['myStore'],
        locales: ['de'],
        url: 'http://commercetools.com',
        projectKey: 'keyID',
      },
      authenticationID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
    });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});

describe('validateSourceBeforeUpdate', () => {
  test('validateSourceBeforeUpdate', async () => {
    const req = (await client.validateSourceBeforeUpdate({
      sourceID: '6c02aeb1-775e-418e-870b-1faccd4b2c0f',
      sourceUpdate: { name: 'newName' },
    })) as unknown as EchoResponse;

    expect(req.path).toEqual(
      '/1/sources/6c02aeb1-775e-418e-870b-1faccd4b2c0f/validate'
    );
    expect(req.method).toEqual('POST');
    expect(req.data).toEqual({ name: 'newName' });
    expect(req.searchParams).toStrictEqual(undefined);
  });
});
