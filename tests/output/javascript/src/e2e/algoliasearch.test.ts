// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import { liteClient } from 'algoliasearch/lite';
import * as dotenv from 'dotenv';

import { union } from '../helpers';

dotenv.config({ path: '../../.env' });

if (!process.env.ALGOLIA_APPLICATION_ID) {
  throw new Error('please provide an `ALGOLIA_APPLICATION_ID` env var for e2e tests');
}

if (!process.env.ALGOLIA_ADMIN_KEY) {
  throw new Error('please provide an `ALGOLIA_ADMIN_KEY` env var for e2e tests');
}

const client = liteClient(process.env.ALGOLIA_APPLICATION_ID, process.env.ALGOLIA_ADMIN_KEY);

describe('search', () => {
  test('search for a single hits request with minimal parameters', async () => {
    const resp = await client.search({ requests: [{ indexName: 'cts_e2e_search_empty_index' }] });

    const expectedBody = {
      results: [
        {
          hits: [],
          page: 0,
          nbHits: 0,
          nbPages: 0,
          hitsPerPage: 20,
          exhaustiveNbHits: true,
          exhaustiveTypo: true,
          exhaustive: { nbHits: true, typo: true },
          query: '',
          params: '',
          index: 'cts_e2e_search_empty_index',
          renderingContent: {},
        },
      ],
    };

    expect(expectedBody).toEqual(union(expectedBody, resp));
  });

  test('search with highlight and snippet results', async () => {
    const resp = await client.search({
      requests: [
        {
          indexName: 'cts_e2e_highlight_snippet_results',
          query: 'vim',
          attributesToSnippet: ['*:20'],
          attributesToHighlight: ['*'],
          attributesToRetrieve: ['*'],
        },
      ],
    });

    const expectedBody = {
      results: [
        {
          hits: [
            {
              editor: { name: 'vim', type: 'beforeneovim' },
              names: ['vim', ':q'],
              _snippetResult: {
                editor: {
                  name: { value: '<em>vim</em>', matchLevel: 'full' },
                  type: { value: 'beforeneovim', matchLevel: 'none' },
                },
                names: [
                  { value: '<em>vim</em>', matchLevel: 'full' },
                  { value: ':q', matchLevel: 'none' },
                ],
              },
              _highlightResult: {
                editor: {
                  name: { value: '<em>vim</em>', matchLevel: 'full', fullyHighlighted: true, matchedWords: ['vim'] },
                  type: { value: 'beforeneovim', matchLevel: 'none', matchedWords: [] },
                },
                names: [
                  { value: '<em>vim</em>', matchLevel: 'full', fullyHighlighted: true, matchedWords: ['vim'] },
                  { value: ':q', matchLevel: 'none', matchedWords: [] },
                ],
              },
            },
          ],
          nbHits: 1,
          page: 0,
          nbPages: 1,
          hitsPerPage: 20,
          exhaustiveNbHits: true,
          exhaustiveTypo: true,
          exhaustive: { nbHits: true, typo: true },
          query: 'vim',
          index: 'cts_e2e_highlight_snippet_results',
          renderingContent: {},
        },
      ],
    };

    expect(expectedBody).toEqual(union(expectedBody, resp));
  });

  test('search for a single facet request with minimal parameters', async () => {
    const resp = await client.search({
      requests: [{ indexName: 'cts_e2e_search_facet', type: 'facet', facet: 'editor' }],
      strategy: 'stopIfEnoughMatches',
    });

    const expectedBody = {
      results: [
        {
          exhaustiveFacetsCount: true,
          facetHits: [
            { count: 1, highlighted: 'goland', value: 'goland' },
            { count: 1, highlighted: 'neovim', value: 'neovim' },
            { count: 1, highlighted: 'visual studio', value: 'visual studio' },
            { count: 1, highlighted: 'vscode', value: 'vscode' },
          ],
        },
      ],
    };

    expect(expectedBody).toEqual(union(expectedBody, resp));
  });

  test('search filters end to end', async () => {
    const resp = await client.search({
      requests: [
        { indexName: 'cts_e2e_search_facet', filters: "editor:'visual studio' OR editor:neovim" },
        { indexName: 'cts_e2e_search_facet', facetFilters: ["editor:'visual studio'", 'editor:neovim'] },
        { indexName: 'cts_e2e_search_facet', facetFilters: ["editor:'visual studio'", ['editor:neovim']] },
        {
          indexName: 'cts_e2e_search_facet',
          facetFilters: ["editor:'visual studio'", ['editor:neovim', ['editor:goland']]],
        },
      ],
    });

    const expectedBody = {
      results: [
        {
          hitsPerPage: 20,
          index: 'cts_e2e_search_facet',
          nbHits: 2,
          nbPages: 1,
          page: 0,
          hits: [
            { editor: 'visual studio', _highlightResult: { editor: { value: 'visual studio', matchLevel: 'none' } } },
            { editor: 'neovim', _highlightResult: { editor: { value: 'neovim', matchLevel: 'none' } } },
          ],
          query: '',
          params: 'filters=editor%3A%27visual+studio%27+OR+editor%3Aneovim',
        },
        {
          hitsPerPage: 20,
          index: 'cts_e2e_search_facet',
          nbHits: 0,
          nbPages: 0,
          page: 0,
          hits: [],
          query: '',
          params: 'facetFilters=%5B%22editor%3A%27visual+studio%27%22%2C%22editor%3Aneovim%22%5D',
        },
        {
          hitsPerPage: 20,
          index: 'cts_e2e_search_facet',
          nbHits: 0,
          nbPages: 0,
          page: 0,
          hits: [],
          query: '',
          params: 'facetFilters=%5B%22editor%3A%27visual+studio%27%22%2C%5B%22editor%3Aneovim%22%5D%5D',
        },
        {
          hitsPerPage: 20,
          index: 'cts_e2e_search_facet',
          nbHits: 0,
          nbPages: 0,
          page: 0,
          hits: [],
          query: '',
          params:
            'facetFilters=%5B%22editor%3A%27visual+studio%27%22%2C%5B%22editor%3Aneovim%22%2C%5B%22editor%3Agoland%22%5D%5D%5D',
        },
      ],
    };

    expect(expectedBody).toEqual(union(expectedBody, resp));
  });
});
