// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import XCTest

import Utils

@testable import Core
@testable import Search

final class SearchClientRequestsTests: XCTestCase {
    static let APPLICATION_ID = "my_application_id"
    static let API_KEY = "my_api_key"

    /// addApiKey
    func testAddApiKeyTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.addApiKeyWithHTTPInfo(apiKey: ApiKey(
            acl: [Acl.search, Acl.addObject],
            description: "my new api key",
            maxHitsPerQuery: 20,
            maxQueriesPerIPPerHour: 100,
            validity: 300
        ))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"acl\":[\"search\",\"addObject\"],\"description\":\"my new api key\",\"validity\":300,\"maxQueriesPerIPPerHour\":100,\"maxHitsPerQuery\":20}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/keys")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// addOrUpdateObject
    func testAddOrUpdateObjectTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.addOrUpdateObjectWithHTTPInfo(
            indexName: "indexName",
            objectID: "uniqueID",
            body: ["key": "value"]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"key\":\"value\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/uniqueID")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// appendSource
    func testAppendSourceTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.appendSourceWithHTTPInfo(source: SearchSource(
            source: "theSource",
            description: "theDescription"
        ))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"source\":\"theSource\",\"description\":\"theDescription\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/security/sources/append")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// simple
    func testAssignUserIdTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.assignUserIdWithHTTPInfo(
            xAlgoliaUserID: "user42",
            assignUserIdParams: AssignUserIdParams(cluster: "d4242-eu")
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"cluster\":\"d4242-eu\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)

        let expectedHeaders = try XCTUnwrap("{\"x-algolia-user-id\":\"user42\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// it should not encode the userID
    func testAssignUserIdTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.assignUserIdWithHTTPInfo(
            xAlgoliaUserID: "user id with spaces",
            assignUserIdParams: AssignUserIdParams(cluster: "cluster with spaces")
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"cluster\":\"cluster with spaces\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)

        let expectedHeaders = try XCTUnwrap("{\"x-algolia-user-id\":\"user id with spaces\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// addObject
    func testBatchTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            batchWriteParams: SearchBatchWriteParams(requests: [
                SearchBatchRequest(action: SearchAction.addObject, body: ["key": "bar", "foo": "1"]),
                SearchBatchRequest(action: SearchAction.addObject, body: ["key": "baz", "foo": "2"]),
            ])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"action\":\"addObject\",\"body\":{\"key\":\"bar\",\"foo\":\"1\"}},{\"action\":\"addObject\",\"body\":{\"key\":\"baz\",\"foo\":\"2\"}}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// clear
    func testBatchTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            batchWriteParams: SearchBatchWriteParams(requests: [SearchBatchRequest(
                action: SearchAction.clear,
                body: ["key": "value"]
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"clear\",\"body\":{\"key\":\"value\"}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// delete
    func testBatchTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            batchWriteParams: SearchBatchWriteParams(requests: [SearchBatchRequest(
                action: SearchAction.delete,
                body: ["key": "value"]
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"delete\",\"body\":{\"key\":\"value\"}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// deleteObject
    func testBatchTest3() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            batchWriteParams: SearchBatchWriteParams(requests: [SearchBatchRequest(
                action: SearchAction.deleteObject,
                body: ["key": "value"]
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"deleteObject\",\"body\":{\"key\":\"value\"}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// partialUpdateObject
    func testBatchTest4() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            batchWriteParams: SearchBatchWriteParams(requests: [SearchBatchRequest(
                action: SearchAction.partialUpdateObject,
                body: ["key": "value"]
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"partialUpdateObject\",\"body\":{\"key\":\"value\"}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// partialUpdateObjectNoCreate
    func testBatchTest5() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            batchWriteParams: SearchBatchWriteParams(requests: [SearchBatchRequest(
                action: SearchAction.partialUpdateObjectNoCreate,
                body: ["key": "value"]
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"action\":\"partialUpdateObjectNoCreate\",\"body\":{\"key\":\"value\"}}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// updateObject
    func testBatchTest6() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            batchWriteParams: SearchBatchWriteParams(requests: [SearchBatchRequest(
                action: SearchAction.updateObject,
                body: ["key": "value"]
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"updateObject\",\"body\":{\"key\":\"value\"}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// batchAssignUserIds
    func testBatchAssignUserIdsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchAssignUserIdsWithHTTPInfo(
            xAlgoliaUserID: "userID",
            batchAssignUserIdsParams: BatchAssignUserIdsParams(cluster: "theCluster", users: ["user1", "user2"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"cluster\":\"theCluster\",\"users\":[\"user1\",\"user2\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)

        let expectedHeaders = try XCTUnwrap("{\"x-algolia-user-id\":\"userID\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// replace
    func testBatchDictionaryEntriesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchDictionaryEntriesWithHTTPInfo(
            dictionaryName: DictionaryType.plurals,
            batchDictionaryEntriesParams: BatchDictionaryEntriesParams(
                clearExistingDictionaryEntries: true,
                requests: [BatchDictionaryEntriesRequest(
                    action: DictionaryAction.addEntry,
                    body: DictionaryEntry(
                        objectID: "1",
                        language: SearchSupportedLanguage.en,
                        word: "fancy",
                        words: ["believe", "algolia"],
                        decomposition: ["trust", "algolia"],
                        state: DictionaryEntryState.enabled
                    )
                )]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"clearExistingDictionaryEntries\":true,\"requests\":[{\"action\":\"addEntry\",\"body\":{\"objectID\":\"1\",\"language\":\"en\",\"word\":\"fancy\",\"words\":[\"believe\",\"algolia\"],\"decomposition\":[\"trust\",\"algolia\"],\"state\":\"enabled\"}}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/plurals/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// delete
    func testBatchDictionaryEntriesTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchDictionaryEntriesWithHTTPInfo(
            dictionaryName: DictionaryType.plurals,
            batchDictionaryEntriesParams: BatchDictionaryEntriesParams(
                clearExistingDictionaryEntries: true,
                requests: [BatchDictionaryEntriesRequest(
                    action: DictionaryAction.deleteEntry,
                    body: DictionaryEntry(objectID: "1")
                )]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"clearExistingDictionaryEntries\":true,\"requests\":[{\"action\":\"deleteEntry\",\"body\":{\"objectID\":\"1\"}}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/plurals/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// append
    func testBatchDictionaryEntriesTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.batchDictionaryEntriesWithHTTPInfo(
            dictionaryName: DictionaryType.stopwords,
            batchDictionaryEntriesParams: BatchDictionaryEntriesParams(requests: [BatchDictionaryEntriesRequest(
                action: DictionaryAction.addEntry,
                body: DictionaryEntry(from: [
                    "objectID": AnyCodable("1"),
                    "language": AnyCodable(SearchSupportedLanguage.en),
                    "additional": AnyCodable("try me"),
                ])
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"action\":\"addEntry\",\"body\":{\"objectID\":\"1\",\"language\":\"en\",\"additional\":\"try me\"}}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/stopwords/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// browse with minimal parameters
    func testBrowseTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<BrowseResponse<Hit>> = try await client.browseWithHTTPInfo(indexName: "cts_e2e_browse")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/cts_e2e_browse/browse")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// browse with search parameters
    func testBrowseTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<BrowseResponse<Hit>> = try await client.browseWithHTTPInfo(
            indexName: "indexName",
            browseParams: BrowseParams.browseParamsObject(BrowseParamsObject(
                query: "myQuery",
                facetFilters: SearchFacetFilters.arrayOfSearchFacetFilters([SearchFacetFilters.string("tags:algolia")])
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"myQuery\",\"facetFilters\":[\"tags:algolia\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/browse")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// browse allow a cursor in parameters
    func testBrowseTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<BrowseResponse<Hit>> = try await client.browseWithHTTPInfo(
            indexName: "indexName",
            browseParams: BrowseParams.browseParamsObject(BrowseParamsObject(cursor: "test"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"cursor\":\"test\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/browse")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// clearObjects
    func testClearObjectsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.clearObjectsWithHTTPInfo(indexName: "theIndexName")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponseBodyData, "{}".data(using: .utf8))

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/clear")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// clearRules
    func testClearRulesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.clearRulesWithHTTPInfo(indexName: "indexName")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponseBodyData, "{}".data(using: .utf8))

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/clear")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// clearSynonyms
    func testClearSynonymsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.clearSynonymsWithHTTPInfo(indexName: "indexName")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponseBodyData, "{}".data(using: .utf8))

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/synonyms/clear")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow del method for a custom path with minimal parameters
    func testCustomDeleteTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customDeleteWithHTTPInfo(path: "test/minimal")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/minimal")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow del method for a custom path with all parameters
    func testCustomDeleteTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customDeleteWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("parameters")]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// allow get method for a custom path with minimal parameters
    func testCustomGetTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customGetWithHTTPInfo(path: "test/minimal")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/minimal")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow get method for a custom path with all parameters
    func testCustomGetTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customGetWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("parameters with space")]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters%20with%20space\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions should be escaped too
    func testCustomGetTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customGetWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("to be overriden")],
            requestOptions: RequestOptions(
                headers: ["x-header-1": "spaces are left alone"],
                queryParameters: ["query": "parameters with space", "and an array": ["array", "with spaces"]]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters =
            try XCTUnwrap(
                "{\"query\":\"parameters%20with%20space\",\"and%20an%20array\":\"array%2Cwith%20spaces\"}"
                    .data(using: .utf8)
            )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)

        let expectedHeaders = try XCTUnwrap("{\"x-header-1\":\"spaces are left alone\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// allow post method for a custom path with minimal parameters
    func testCustomPostTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(path: "test/minimal")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/minimal")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow post method for a custom path with all parameters
    func testCustomPostTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("parameters")],
            body: ["body": "parameters"]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"body\":\"parameters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions can override default query parameters
    func testCustomPostTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["query": "myQueryParameter"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"myQueryParameter\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions merges query parameters with default ones
    func testCustomPostTest3() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["query2": "myQueryParameter"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap(
            "{\"query\":\"parameters\",\"query2\":\"myQueryParameter\"}"
                .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions can override default headers
    func testCustomPostTest4() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                headers: ["x-algolia-api-key": "ALGOLIA_API_KEY"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)

        let expectedHeaders = try XCTUnwrap("{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// requestOptions merges headers with default ones
    func testCustomPostTest5() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                headers: ["x-algolia-api-key": "ALGOLIA_API_KEY"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)

        let expectedHeaders = try XCTUnwrap("{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// requestOptions queryParameters accepts booleans
    func testCustomPostTest6() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["isItWorking": true]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap(
            "{\"query\":\"parameters\",\"isItWorking\":\"true\"}"
                .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions queryParameters accepts integers
    func testCustomPostTest7() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["myParam": 2]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap(
            "{\"query\":\"parameters\",\"myParam\":\"2\"}"
                .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions queryParameters accepts list of string
    func testCustomPostTest8() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["myParam": ["b and c", "d"]]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap(
            "{\"query\":\"parameters\",\"myParam\":\"b%20and%20c%2Cd\"}"
                .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions queryParameters accepts list of booleans
    func testCustomPostTest9() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["myParam": [true, true, false]]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap(
            "{\"query\":\"parameters\",\"myParam\":\"true%2Ctrue%2Cfalse\"}"
                .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions queryParameters accepts list of integers
    func testCustomPostTest10() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["myParam": [1, 2]]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap(
            "{\"query\":\"parameters\",\"myParam\":\"1%2C2\"}"
                .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// allow put method for a custom path with minimal parameters
    func testCustomPutTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPutWithHTTPInfo(path: "test/minimal")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/minimal")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow put method for a custom path with all parameters
    func testCustomPutTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPutWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("parameters")],
            body: ["body": "parameters"]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"body\":\"parameters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// deleteApiKey
    func testDeleteApiKeyTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteApiKeyWithHTTPInfo(key: "myTestApiKey")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/keys/myTestApiKey")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// deleteBy
    func testDeleteByTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteByWithHTTPInfo(
            indexName: "theIndexName",
            deleteByParams: DeleteByParams(filters: "brand:brandName")
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"filters\":\"brand:brandName\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/deleteByQuery")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// deleteIndex
    func testDeleteIndexTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteIndexWithHTTPInfo(indexName: "theIndexName")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// deleteObject
    func testDeleteObjectTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteObjectWithHTTPInfo(indexName: "<YOUR_INDEX_NAME>", objectID: "uniqueID")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/uniqueID")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// delete rule simple case
    func testDeleteRuleTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteRuleWithHTTPInfo(indexName: "indexName", objectID: "id1")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/id1")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// delete rule with simple characters to encode in objectID
    func testDeleteRuleTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteRuleWithHTTPInfo(indexName: "indexName", objectID: "test/with/slash")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/test%2Fwith%2Fslash")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// deleteSource
    func testDeleteSourceTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteSourceWithHTTPInfo(source: "theSource")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/security/sources/theSource")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// deleteSynonym
    func testDeleteSynonymTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteSynonymWithHTTPInfo(indexName: "indexName", objectID: "id1")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/synonyms/id1")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getApiKey
    func testGetApiKeyTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getApiKeyWithHTTPInfo(key: "myTestApiKey")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/keys/myTestApiKey")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getAppTask
    func testGetAppTaskTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getAppTaskWithHTTPInfo(taskID: Int64(123))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/task/123")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// get getDictionaryLanguages
    func testGetDictionaryLanguagesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getDictionaryLanguagesWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/*/languages")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// get getDictionarySettings results
    func testGetDictionarySettingsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getDictionarySettingsWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/*/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getLogs with minimal parameters
    func testGetLogsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getLogsWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/logs")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getLogs with parameters
    func testGetLogsTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getLogsWithHTTPInfo(
            offset: 5,
            length: 10,
            indexName: "theIndexName",
            type: LogType.all
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/logs")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters =
            try XCTUnwrap(
                "{\"offset\":\"5\",\"length\":\"10\",\"indexName\":\"theIndexName\",\"type\":\"all\"}"
                    .data(using: .utf8)
            )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// getObject
    func testGetObjectTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getObjectWithHTTPInfo(
            indexName: "theIndexName",
            objectID: "uniqueID",
            attributesToRetrieve: ["attr1", "attr2"]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/uniqueID")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters = try XCTUnwrap(
            "{\"attributesToRetrieve\":\"attr1%2Cattr2\"}"
                .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// search with a real object
    func testGetObjectTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getObjectWithHTTPInfo(indexName: "cts_e2e_browse", objectID: "Batman and Robin")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/cts_e2e_browse/Batman%20and%20Robin")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getObjects
    func testGetObjectsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<GetObjectsResponse<Hit>> = try await client
            .getObjectsWithHTTPInfo(getObjectsParams: GetObjectsParams(requests: [GetObjectsRequest(
                attributesToRetrieve: ["attr1", "attr2"],
                objectID: "uniqueID",
                indexName: "theIndexName"
            )]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"attributesToRetrieve\":[\"attr1\",\"attr2\"],\"objectID\":\"uniqueID\",\"indexName\":\"theIndexName\"}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/objects")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getRule
    func testGetRuleTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getRuleWithHTTPInfo(indexName: "cts_e2e_browse", objectID: "qr-1725004648916")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/cts_e2e_browse/rules/qr-1725004648916")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getSettings
    func testGetSettingsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getSettingsWithHTTPInfo(indexName: "cts_e2e_settings")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/cts_e2e_settings/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getSources
    func testGetSourcesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getSourcesWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/security/sources")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getSynonym
    func testGetSynonymTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getSynonymWithHTTPInfo(indexName: "indexName", objectID: "id1")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/synonyms/id1")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getTask
    func testGetTaskTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getTaskWithHTTPInfo(indexName: "theIndexName", taskID: Int64(123))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/task/123")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getTopUserIds
    func testGetTopUserIdsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getTopUserIdsWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping/top")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getUserId
    func testGetUserIdTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.getUserIdWithHTTPInfo(userID: "uniqueID")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping/uniqueID")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// hasPendingMappings with minimal parameters
    func testHasPendingMappingsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.hasPendingMappingsWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping/pending")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// hasPendingMappings with parameters
    func testHasPendingMappingsTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.hasPendingMappingsWithHTTPInfo(getClusters: true)
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping/pending")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters = try XCTUnwrap("{\"getClusters\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// listApiKeys
    func testListApiKeysTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.listApiKeysWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/keys")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// listClusters
    func testListClustersTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.listClustersWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/clusters")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// listIndices with minimal parameters
    func testListIndicesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.listIndicesWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// listIndices with parameters
    func testListIndicesTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.listIndicesWithHTTPInfo(page: 8, hitsPerPage: 3)
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/indexes")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters = try XCTUnwrap("{\"page\":\"8\",\"hitsPerPage\":\"3\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// listUserIds with minimal parameters
    func testListUserIdsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.listUserIdsWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// listUserIds with parameters
    func testListUserIdsTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.listUserIdsWithHTTPInfo(page: 8, hitsPerPage: 100)
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters = try XCTUnwrap("{\"page\":\"8\",\"hitsPerPage\":\"100\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// multipleBatch
    func testMultipleBatchTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client
            .multipleBatchWithHTTPInfo(batchParams: BatchParams(requests: [MultipleBatchRequest(
                action: SearchAction.addObject,
                body: ["key": "value"],
                indexName: "theIndexName"
            )]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"action\":\"addObject\",\"body\":{\"key\":\"value\"},\"indexName\":\"theIndexName\"}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// scopes
    func testOperationIndexTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.operationIndexWithHTTPInfo(
            indexName: "<SOURCE_INDEX_NAME>",
            operationIndexParams: OperationIndexParams(
                operation: OperationType.move,
                destination: "<DESTINATION_INDEX_NAME>",
                scope: [ScopeType.rules, ScopeType.settings]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"operation\":\"move\",\"destination\":\"<DESTINATION_INDEX_NAME>\",\"scope\":[\"rules\",\"settings\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// copy
    func testOperationIndexTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.operationIndexWithHTTPInfo(
            indexName: "<SOURCE_INDEX_NAME>",
            operationIndexParams: OperationIndexParams(
                operation: OperationType.copy,
                destination: "<DESTINATION_INDEX_NAME>"
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"operation\":\"copy\",\"destination\":\"<DESTINATION_INDEX_NAME>\"}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// move
    func testOperationIndexTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.operationIndexWithHTTPInfo(
            indexName: "<SOURCE_INDEX_NAME>",
            operationIndexParams: OperationIndexParams(
                operation: OperationType.move,
                destination: "<DESTINATION_INDEX_NAME>"
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"operation\":\"move\",\"destination\":\"<DESTINATION_INDEX_NAME>\"}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CSOURCE_INDEX_NAME%3E/operation")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// Partial update with a new value for a string attribute
    func testPartialUpdateObjectTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.partialUpdateObjectWithHTTPInfo(
            indexName: "theIndexName",
            objectID: "uniqueID",
            attributesToUpdate: ["attributeId": "new value"]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributeId\":\"new value\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/uniqueID/partial")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// Partial update with a new value for an integer attribute
    func testPartialUpdateObjectTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.partialUpdateObjectWithHTTPInfo(
            indexName: "theIndexName",
            objectID: "uniqueID",
            attributesToUpdate: ["attributeId": 1]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributeId\":1}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/uniqueID/partial")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// Partial update with a new value for a boolean attribute
    func testPartialUpdateObjectTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.partialUpdateObjectWithHTTPInfo(
            indexName: "theIndexName",
            objectID: "uniqueID",
            attributesToUpdate: ["attributeId": true]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributeId\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/uniqueID/partial")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// Partial update with a new value for an array attribute
    func testPartialUpdateObjectTest3() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.partialUpdateObjectWithHTTPInfo(
            indexName: "theIndexName",
            objectID: "uniqueID",
            attributesToUpdate: ["attributeId": ["one", "two", "three"]]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributeId\":[\"one\",\"two\",\"three\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/uniqueID/partial")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// Partial update with a new value for an object attribute
    func testPartialUpdateObjectTest4() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.partialUpdateObjectWithHTTPInfo(
            indexName: "theIndexName",
            objectID: "uniqueID",
            attributesToUpdate: ["attributeId": ["nested": "value"]]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributeId\":{\"nested\":\"value\"}}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/uniqueID/partial")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// with visible_by filter
    func testPartialUpdateObjectTest5() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.partialUpdateObjectWithHTTPInfo(
            indexName: "theIndexName",
            objectID: "uniqueID",
            attributesToUpdate: ["visible_by": ["Angela", "group/Finance", "group/Shareholders"]]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"visible_by\":[\"Angela\",\"group/Finance\",\"group/Shareholders\"]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/uniqueID/partial")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// removeUserId
    func testRemoveUserIdTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.removeUserIdWithHTTPInfo(userID: "uniqueID")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping/uniqueID")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// replaceSources
    func testReplaceSourcesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.replaceSourcesWithHTTPInfo(source: [SearchSource(
            source: "theSource",
            description: "theDescription"
        )])
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "[{\"source\":\"theSource\",\"description\":\"theDescription\"}]".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/security/sources")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// restoreApiKey
    func testRestoreApiKeyTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.restoreApiKeyWithHTTPInfo(key: "ALGOLIA_API_KEY")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponseBodyData, "{}".data(using: .utf8))

        XCTAssertEqual(echoResponse.path, "/1/keys/ALGOLIA_API_KEY/restore")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveObject
    func testSaveObjectTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveObjectWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            body: ["objectID": "id", "test": "val"]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"id\",\"test\":\"val\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveRule with minimal parameters
    func testSaveRuleTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "id1",
            rule: Rule(
                objectID: "id1",
                conditions: [SearchCondition(pattern: "apple", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(params: SearchConsequenceParams(filters: "brand:xiaomi"))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"id1\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"filters\":\"brand:xiaomi\"}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/id1")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveRule with all parameters
    func testSaveRuleTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "id1",
            rule: Rule(
                objectID: "id1",
                conditions: [SearchCondition(
                    pattern: "apple",
                    anchoring: SearchAnchoring.contains,
                    alternatives: false,
                    context: "search"
                )],
                consequence: SearchConsequence(
                    params: SearchConsequenceParams(
                        filters: "brand:apple",
                        query: SearchConsequenceQuery
                            .searchConsequenceQueryObject(SearchConsequenceQueryObject(
                                remove: ["algolia"],
                                edits: [
                                    SearchEdit(type: SearchEditType.remove, delete: "abc", insert: "cde"),
                                    SearchEdit(type: SearchEditType.replace, delete: "abc", insert: "cde"),
                                ]
                            ))
                    ),
                    promote: [
                        SearchPromote.searchPromoteObjectID(SearchPromoteObjectID(objectID: "abc", position: 3)),
                        SearchPromote.searchPromoteObjectIDs(SearchPromoteObjectIDs(
                            objectIDs: ["abc", "def"],
                            position: 1
                        )),
                    ],
                    filterPromotes: false,
                    hide: [SearchConsequenceHide(objectID: "321")],
                    userData: ["algolia": "aloglia"]
                ),
                description: "test",
                enabled: true,
                validity: [SearchTimeRange(from: Int64(1_656_670_273), until: Int64(1_656_670_277))]
            ),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"id1\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"contains\",\"alternatives\":false,\"context\":\"search\"}],\"consequence\":{\"params\":{\"filters\":\"brand:apple\",\"query\":{\"remove\":[\"algolia\"],\"edits\":[{\"type\":\"remove\",\"delete\":\"abc\",\"insert\":\"cde\"},{\"type\":\"replace\",\"delete\":\"abc\",\"insert\":\"cde\"}]}},\"hide\":[{\"objectID\":\"321\"}],\"filterPromotes\":false,\"userData\":{\"algolia\":\"aloglia\"},\"promote\":[{\"objectID\":\"abc\",\"position\":3},{\"objectIDs\":[\"abc\",\"def\"],\"position\":1}]},\"description\":\"test\",\"enabled\":true,\"validity\":[{\"from\":1656670273,\"until\":1656670277}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/id1")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// b2b catalog
    func testSaveRuleTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "article-rule",
            rule: Rule(
                objectID: "article-rule",
                conditions: [SearchCondition(pattern: "article", anchoring: SearchAnchoring.startsWith)],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    restrictSearchableAttributes: ["title", "book_id"],
                    query: SearchConsequenceQuery
                        .searchConsequenceQueryObject(SearchConsequenceQueryObject(edits: [SearchEdit(
                            type: SearchEditType.remove,
                            delete: "article"
                        )]))
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"article-rule\",\"conditions\":[{\"pattern\":\"article\",\"anchoring\":\"startsWith\"}],\"consequence\":{\"params\":{\"query\":{\"edits\":[{\"type\":\"remove\",\"delete\":\"article\"}]},\"restrictSearchableAttributes\":[\"title\",\"book_id\"]}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/article-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// merchandising and promoting
    func testSaveRuleTest3() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "director-rule",
            rule: Rule(
                objectID: "director-rule",
                conditions: [SearchCondition(
                    pattern: "{facet:director} director",
                    anchoring: SearchAnchoring.contains
                )],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    restrictSearchableAttributes: ["title", "book_id"],
                    query: SearchConsequenceQuery
                        .searchConsequenceQueryObject(SearchConsequenceQueryObject(edits: [SearchEdit(
                            type: SearchEditType.remove,
                            delete: "director"
                        )])),
                    automaticFacetFilters: SearchAutomaticFacetFilters
                        .arrayOfSearchAutomaticFacetFilter([SearchAutomaticFacetFilter(facet: "director")])
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"director-rule\",\"conditions\":[{\"pattern\":\"{facet:director} director\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"restrictSearchableAttributes\":[\"title\",\"book_id\"],\"automaticFacetFilters\":[{\"facet\":\"director\"}],\"query\":{\"edits\":[{\"type\":\"remove\",\"delete\":\"director\"}]}}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/director-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// harry potter
    func testSaveRuleTest4() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "harry-potter-rule",
            rule: Rule(
                objectID: "harry-potter-rule",
                conditions: [SearchCondition(pattern: "harry potter", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(userData: ["promo_content": "20% OFF on all Harry Potter books!"])
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"harry-potter-rule\",\"conditions\":[{\"pattern\":\"harry potter\",\"anchoring\":\"contains\"}],\"consequence\":{\"userData\":{\"promo_content\":\"20% OFF on all Harry Potter books!\"}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/harry-potter-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// merchandising empty query
    func testSaveRuleTest5() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "clearance-category-filter",
            rule: Rule(
                objectID: "clearance-category-filter",
                conditions: [SearchCondition(pattern: "", anchoring: SearchAnchoring.`is`, context: "landing")],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    optionalFilters: SearchOptionalFilters
                        .string("clearance:true")
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"clearance-category-filter\",\"conditions\":[{\"pattern\":\"\",\"anchoring\":\"is\",\"context\":\"landing\"}],\"consequence\":{\"params\":{\"optionalFilters\":\"clearance:true\"}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/clearance-category-filter")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// redirect
    func testSaveRuleTest6() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "redirect-help-rule",
            rule: Rule(
                objectID: "redirect-help-rule",
                conditions: [SearchCondition(pattern: "help", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(userData: ["redirect": "https://www.algolia.com/support"])
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"redirect-help-rule\",\"conditions\":[{\"pattern\":\"help\",\"anchoring\":\"contains\"}],\"consequence\":{\"userData\":{\"redirect\":\"https://www.algolia.com/support\"}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/redirect-help-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// promote some results over others
    func testSaveRuleTest7() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "tomato-fruit",
            rule: Rule(
                objectID: "tomato-fruit",
                conditions: [SearchCondition(pattern: "tomato", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    optionalFilters: SearchOptionalFilters
                        .string("food_group:fruit")
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"tomato-fruit\",\"conditions\":[{\"pattern\":\"tomato\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"optionalFilters\":\"food_group:fruit\"}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/tomato-fruit")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// promote several hits
    func testSaveRuleTest8() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "Promote-Apple-Newest",
            rule: Rule(
                objectID: "Promote-Apple-Newest",
                conditions: [SearchCondition(pattern: "apple", anchoring: SearchAnchoring.`is`)],
                consequence: SearchConsequence(promote: [SearchPromote.searchPromoteObjectIDs(SearchPromoteObjectIDs(
                    objectIDs: ["iPhone-12345", "watch-123"],
                    position: 0
                ))])
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"Promote-Apple-Newest\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"is\"}],\"consequence\":{\"promote\":[{\"objectIDs\":[\"iPhone-12345\",\"watch-123\"],\"position\":0}]}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/Promote-Apple-Newest")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// promote newest release
    func testSaveRuleTest9() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "Promote-iPhone-X",
            rule: Rule(
                objectID: "Promote-iPhone-X",
                conditions: [SearchCondition(pattern: "iPhone", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(promote: [SearchPromote.searchPromoteObjectID(SearchPromoteObjectID(
                    objectID: "iPhone-12345",
                    position: 0
                ))])
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"Promote-iPhone-X\",\"conditions\":[{\"pattern\":\"iPhone\",\"anchoring\":\"contains\"}],\"consequence\":{\"promote\":[{\"objectID\":\"iPhone-12345\",\"position\":0}]}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/Promote-iPhone-X")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// promote single item
    func testSaveRuleTest10() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "promote-harry-potter-box-set",
            rule: Rule(
                objectID: "promote-harry-potter-box-set",
                conditions: [SearchCondition(pattern: "Harry Potter", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(promote: [SearchPromote.searchPromoteObjectID(SearchPromoteObjectID(
                    objectID: "HP-12345",
                    position: 0
                ))])
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"promote-harry-potter-box-set\",\"conditions\":[{\"pattern\":\"Harry Potter\",\"anchoring\":\"contains\"}],\"consequence\":{\"promote\":[{\"objectID\":\"HP-12345\",\"position\":0}]}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/promote-harry-potter-box-set")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// limit search results
    func testSaveRuleTest11() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "article-rule",
            rule: Rule(
                objectID: "article-rule",
                conditions: [SearchCondition(pattern: "article", anchoring: SearchAnchoring.startsWith)],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    restrictSearchableAttributes: ["title", "book_id"],
                    query: SearchConsequenceQuery
                        .searchConsequenceQueryObject(SearchConsequenceQueryObject(edits: [SearchEdit(
                            type: SearchEditType.remove,
                            delete: "article"
                        )]))
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"article-rule\",\"conditions\":[{\"pattern\":\"article\",\"anchoring\":\"startsWith\"}],\"consequence\":{\"params\":{\"query\":{\"edits\":[{\"type\":\"remove\",\"delete\":\"article\"}]},\"restrictSearchableAttributes\":[\"title\",\"book_id\"]}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/article-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// query match
    func testSaveRuleTest12() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "tagged-brand-rule",
            rule: Rule(
                objectID: "tagged-brand-rule",
                conditions: [SearchCondition(
                    pattern: "brand: {facet:brand}",
                    anchoring: SearchAnchoring.contains,
                    alternatives: false
                )],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    query: SearchConsequenceQuery.searchConsequenceQueryObject(SearchConsequenceQueryObject(remove: [
                        "brand:",
                        "{facet:brand}",
                    ])),
                    automaticFacetFilters: SearchAutomaticFacetFilters
                        .arrayOfSearchAutomaticFacetFilter([SearchAutomaticFacetFilter(facet: "brand")])
                )),
                description: "filter on brand: {brand}"
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"conditions\":[{\"pattern\":\"brand: {facet:brand}\",\"anchoring\":\"contains\",\"alternatives\":false}],\"consequence\":{\"params\":{\"automaticFacetFilters\":[{\"facet\":\"brand\"}],\"query\":{\"remove\":[\"brand:\",\"{facet:brand}\"]}}},\"description\":\"filter on brand: {brand}\",\"objectID\":\"tagged-brand-rule\"}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/tagged-brand-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// dynamic filtering
    func testSaveRuleTest13() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "color-facets",
            rule: Rule(
                objectID: "color-facets",
                conditions: [SearchCondition(pattern: "{facet:color}")],
                consequence: SearchConsequence(
                    params: SearchConsequenceParams(
                        automaticFacetFilters: SearchAutomaticFacetFilters
                            .arrayOfSearchAutomaticFacetFilter([SearchAutomaticFacetFilter(facet: "color")])
                    )
                )
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"color-facets\",\"conditions\":[{\"pattern\":\"{facet:color}\"}],\"consequence\":{\"params\":{\"automaticFacetFilters\":[{\"facet\":\"color\"}]}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/color-facets")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// hide hits
    func testSaveRuleTest14() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "hide-12345",
            rule: Rule(
                objectID: "hide-12345",
                conditions: [SearchCondition(pattern: "cheap", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(hide: [SearchConsequenceHide(objectID: "to-hide-12345")])
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"hide-12345\",\"conditions\":[{\"pattern\":\"cheap\",\"anchoring\":\"contains\"}],\"consequence\":{\"hide\":[{\"objectID\":\"to-hide-12345\"}]}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/hide-12345")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// one rule per facet
    func testSaveRuleTest15() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "red-color",
            rule: Rule(
                objectID: "red-color",
                conditions: [SearchCondition(pattern: "red", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    filters: "color:red",
                    query: SearchConsequenceQuery
                        .searchConsequenceQueryObject(SearchConsequenceQueryObject(remove: ["red"]))
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"red-color\",\"conditions\":[{\"pattern\":\"red\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"query\":{\"remove\":[\"red\"]},\"filters\":\"color:red\"}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/red-color")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// numerical filters
    func testSaveRuleTest16() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "cheap",
            rule: Rule(
                objectID: "cheap",
                conditions: [SearchCondition(pattern: "cheap", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    filters: "price < 10",
                    query: SearchConsequenceQuery
                        .searchConsequenceQueryObject(SearchConsequenceQueryObject(remove: ["cheap"]))
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"cheap\",\"conditions\":[{\"pattern\":\"cheap\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"query\":{\"remove\":[\"cheap\"]},\"filters\":\"price < 10\"}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/cheap")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// negative filters
    func testSaveRuleTest17() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "gluten-free-rule",
            rule: Rule(
                objectID: "gluten-free-rule",
                conditions: [SearchCondition(pattern: "gluten-free", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    filters: "NOT allergens:gluten",
                    query: SearchConsequenceQuery
                        .searchConsequenceQueryObject(SearchConsequenceQueryObject(edits: [SearchEdit(
                            type: SearchEditType.remove,
                            delete: "gluten-free"
                        )]))
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"gluten-free-rule\",\"conditions\":[{\"pattern\":\"gluten-free\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"filters\":\"NOT allergens:gluten\",\"query\":{\"edits\":[{\"type\":\"remove\",\"delete\":\"gluten-free\"}]}}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/gluten-free-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// positive filters
    func testSaveRuleTest18() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "diet-rule",
            rule: Rule(
                objectID: "diet-rule",
                conditions: [SearchCondition(pattern: "diet", anchoring: SearchAnchoring.contains)],
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    filters: "'low-carb' OR 'low-fat'",
                    query: SearchConsequenceQuery
                        .searchConsequenceQueryObject(SearchConsequenceQueryObject(edits: [SearchEdit(
                            type: SearchEditType.remove,
                            delete: "diet"
                        )]))
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"diet-rule\",\"conditions\":[{\"pattern\":\"diet\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"filters\":\"'low-carb' OR 'low-fat'\",\"query\":{\"edits\":[{\"type\":\"remove\",\"delete\":\"diet\"}]}}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/diet-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// conditionless
    func testSaveRuleTest19() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRuleWithHTTPInfo(
            indexName: "indexName",
            objectID: "diet-rule",
            rule: Rule(
                objectID: "diet-rule",
                consequence: SearchConsequence(params: SearchConsequenceParams(
                    filters: "'low-carb' OR 'low-fat'",
                    query: SearchConsequenceQuery
                        .searchConsequenceQueryObject(SearchConsequenceQueryObject(edits: [SearchEdit(
                            type: SearchEditType.remove,
                            delete: "diet"
                        )]))
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"diet-rule\",\"consequence\":{\"params\":{\"filters\":\"'low-carb' OR 'low-fat'\",\"query\":{\"edits\":[{\"type\":\"remove\",\"delete\":\"diet\"}]}}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/rules/diet-rule")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveRules with minimal parameters
    func testSaveRulesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRulesWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            rules: [
                Rule(
                    objectID: "a-rule-id",
                    conditions: [SearchCondition(pattern: "smartphone", anchoring: SearchAnchoring.contains)],
                    consequence: SearchConsequence(params: SearchConsequenceParams(filters: "brand:apple"))
                ),
                Rule(
                    objectID: "a-second-rule-id",
                    conditions: [SearchCondition(pattern: "apple", anchoring: SearchAnchoring.contains)],
                    consequence: SearchConsequence(params: SearchConsequenceParams(filters: "brand:samsung"))
                ),
            ],
            forwardToReplicas: false,
            clearExistingRules: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "[{\"objectID\":\"a-rule-id\",\"conditions\":[{\"pattern\":\"smartphone\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"filters\":\"brand:apple\"}}},{\"objectID\":\"a-second-rule-id\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"filters\":\"brand:samsung\"}}}]"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters =
            try XCTUnwrap("{\"forwardToReplicas\":\"false\",\"clearExistingRules\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// saveRules with all parameters
    func testSaveRulesTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRulesWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            rules: [Rule(
                objectID: "id1",
                conditions: [SearchCondition(
                    pattern: "apple",
                    anchoring: SearchAnchoring.contains,
                    alternatives: false,
                    context: "search"
                )],
                consequence: SearchConsequence(
                    params: SearchConsequenceParams(
                        filters: "brand:apple",
                        query: SearchConsequenceQuery
                            .searchConsequenceQueryObject(SearchConsequenceQueryObject(
                                remove: ["algolia"],
                                edits: [
                                    SearchEdit(type: SearchEditType.remove, delete: "abc", insert: "cde"),
                                    SearchEdit(type: SearchEditType.replace, delete: "abc", insert: "cde"),
                                ]
                            ))
                    ),
                    promote: [
                        SearchPromote.searchPromoteObjectID(SearchPromoteObjectID(objectID: "abc", position: 3)),
                        SearchPromote.searchPromoteObjectIDs(SearchPromoteObjectIDs(
                            objectIDs: ["abc", "def"],
                            position: 1
                        )),
                    ],
                    filterPromotes: false,
                    hide: [SearchConsequenceHide(objectID: "321")],
                    userData: ["algolia": "aloglia"]
                ),
                description: "test",
                enabled: true,
                validity: [SearchTimeRange(from: Int64(1_656_670_273), until: Int64(1_656_670_277))]
            )],
            forwardToReplicas: true,
            clearExistingRules: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "[{\"objectID\":\"id1\",\"conditions\":[{\"pattern\":\"apple\",\"anchoring\":\"contains\",\"alternatives\":false,\"context\":\"search\"}],\"consequence\":{\"params\":{\"filters\":\"brand:apple\",\"query\":{\"remove\":[\"algolia\"],\"edits\":[{\"type\":\"remove\",\"delete\":\"abc\",\"insert\":\"cde\"},{\"type\":\"replace\",\"delete\":\"abc\",\"insert\":\"cde\"}]}},\"hide\":[{\"objectID\":\"321\"}],\"filterPromotes\":false,\"userData\":{\"algolia\":\"aloglia\"},\"promote\":[{\"objectID\":\"abc\",\"position\":3},{\"objectIDs\":[\"abc\",\"def\"],\"position\":1}]},\"description\":\"test\",\"enabled\":true,\"validity\":[{\"from\":1656670273,\"until\":1656670277}]}]"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters =
            try XCTUnwrap("{\"forwardToReplicas\":\"true\",\"clearExistingRules\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// dynamic filtering
    func testSaveRulesTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRulesWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            rules: [
                Rule(
                    objectID: "toaster",
                    conditions: [SearchCondition(pattern: "toaster", anchoring: SearchAnchoring.contains)],
                    consequence: SearchConsequence(params: SearchConsequenceParams(
                        filters: "product_type:toaster",
                        query: SearchConsequenceQuery
                            .searchConsequenceQueryObject(SearchConsequenceQueryObject(remove: ["toaster"]))
                    ))
                ),
                Rule(
                    objectID: "cheap",
                    conditions: [SearchCondition(pattern: "cheap", anchoring: SearchAnchoring.contains)],
                    consequence: SearchConsequence(params: SearchConsequenceParams(
                        filters: "price < 15",
                        query: SearchConsequenceQuery
                            .searchConsequenceQueryObject(SearchConsequenceQueryObject(remove: ["cheap"]))
                    ))
                ),
            ]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "[{\"objectID\":\"toaster\",\"conditions\":[{\"pattern\":\"toaster\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"query\":{\"remove\":[\"toaster\"]},\"filters\":\"product_type:toaster\"}}},{\"objectID\":\"cheap\",\"conditions\":[{\"pattern\":\"cheap\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"query\":{\"remove\":[\"cheap\"]},\"filters\":\"price < 15\"}}}]"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// enhance search results
    func testSaveRulesTest3() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRulesWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            rules: [
                Rule(
                    objectID: "country",
                    conditions: [SearchCondition(pattern: "{facet:country}", anchoring: SearchAnchoring.contains)],
                    consequence: SearchConsequence(params: SearchConsequenceParams(aroundLatLngViaIP: false))
                ),
                Rule(
                    objectID: "city",
                    conditions: [SearchCondition(pattern: "{facet:city}", anchoring: SearchAnchoring.contains)],
                    consequence: SearchConsequence(params: SearchConsequenceParams(aroundLatLngViaIP: false))
                ),
            ]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "[{\"objectID\":\"country\",\"conditions\":[{\"pattern\":\"{facet:country}\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"aroundLatLngViaIP\":false}}},{\"objectID\":\"city\",\"conditions\":[{\"pattern\":\"{facet:city}\",\"anchoring\":\"contains\"}],\"consequence\":{\"params\":{\"aroundLatLngViaIP\":false}}}]"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/rules/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveSynonym
    func testSaveSynonymTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveSynonymWithHTTPInfo(
            indexName: "indexName",
            objectID: "id1",
            synonymHit: SynonymHit(objectID: "id1", type: SynonymType.synonym, synonyms: ["car", "vehicule", "auto"]),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"objectID\":\"id1\",\"type\":\"synonym\",\"synonyms\":[\"car\",\"vehicule\",\"auto\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/synonyms/id1")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// saveSynonyms
    func testSaveSynonymsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveSynonymsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            synonymHit: [
                SynonymHit(objectID: "id1", type: SynonymType.synonym, synonyms: ["car", "vehicule", "auto"]),
                SynonymHit(
                    objectID: "id2",
                    type: SynonymType.onewaysynonym,
                    synonyms: ["ephone", "aphone", "yphone"],
                    input: "iphone"
                ),
            ],
            forwardToReplicas: true,
            replaceExistingSynonyms: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "[{\"objectID\":\"id1\",\"type\":\"synonym\",\"synonyms\":[\"car\",\"vehicule\",\"auto\"]},{\"objectID\":\"id2\",\"type\":\"onewaysynonym\",\"input\":\"iphone\",\"synonyms\":[\"ephone\",\"aphone\",\"yphone\"]}]"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/synonyms/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters =
            try XCTUnwrap(
                "{\"forwardToReplicas\":\"true\",\"replaceExistingSynonyms\":\"true\"}"
                    .data(using: .utf8)
            )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// withHitsPerPage
    func testSearchTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "<YOUR_QUERY>",
                        hitsPerPage: 50,
                        indexName: "<YOUR_INDEX_NAME>"
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"hitsPerPage\":50}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filterOnly
    func testSearchTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "<YOUR_QUERY>",
                        filters: "actor:Scarlett Johansson",
                        indexName: "<YOUR_INDEX_NAME>"
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"filters\":\"actor:Scarlett Johansson\"}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filterOr
    func testSearchTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "<YOUR_QUERY>",
                        filters: "actor:Tom Cruise OR actor:Scarlett Johansson",
                        indexName: "<YOUR_INDEX_NAME>"
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"filters\":\"actor:Tom Cruise OR actor:Scarlett Johansson\"}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filterNot
    func testSearchTest3() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "<YOUR_QUERY>",
                        filters: "NOT actor:Nicolas Cage",
                        indexName: "<YOUR_INDEX_NAME>"
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"filters\":\"NOT actor:Nicolas Cage\"}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search for a single hits request with minimal parameters
    func testSearchTest4() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(indexName: "cts_e2e_search_empty_index")),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"indexName\":\"cts_e2e_search_empty_index\"}]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search with highlight and snippet results
    func testSearchTest5() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "vim",
                        attributesToRetrieve: ["*"],
                        attributesToHighlight: ["*"],
                        attributesToSnippet: ["*:20"],
                        indexName: "cts_e2e_highlight_snippet_results"
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"cts_e2e_highlight_snippet_results\",\"query\":\"vim\",\"attributesToSnippet\":[\"*:20\"],\"attributesToHighlight\":[\"*\"],\"attributesToRetrieve\":[\"*\"]}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// retrieveFacets
    func testSearchTest6() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "<YOUR_QUERY>",
                        facets: ["author", "genre"],
                        indexName: "<YOUR_INDEX_NAME>"
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"facets\":[\"author\",\"genre\"]}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// retrieveFacetsWildcard
    func testSearchTest7() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "<YOUR_QUERY>",
                        facets: ["*"],
                        indexName: "<YOUR_INDEX_NAME>"
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"<YOUR_INDEX_NAME>\",\"query\":\"<YOUR_QUERY>\",\"facets\":[\"*\"]}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search for a single facet request with minimal parameters
    func testSearchTest8() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(
                requests: [SearchQuery.searchForFacets(SearchForFacets(
                    facet: "editor",
                    indexName: "cts_e2e_search_facet",
                    type: SearchTypeFacet.facet
                ))],
                strategy: SearchStrategy.stopIfEnoughMatches
            ))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"cts_e2e_search_facet\",\"type\":\"facet\",\"facet\":\"editor\"}],\"strategy\":\"stopIfEnoughMatches\"}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search for a single hits request with all parameters
    func testSearchTest9() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "myQuery",
                        hitsPerPage: 50,
                        indexName: "theIndexName",
                        type: SearchTypeDefault.`default`
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"theIndexName\",\"query\":\"myQuery\",\"hitsPerPage\":50,\"type\":\"default\"}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search for a single facet request with all parameters
    func testSearchTest10() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(
                requests: [SearchQuery.searchForFacets(SearchForFacets(
                    query: "theQuery",
                    facet: "theFacet",
                    indexName: "theIndexName",
                    facetQuery: "theFacetQuery",
                    maxFacetHits: 50,
                    type: SearchTypeFacet.facet
                ))],
                strategy: SearchStrategy.stopIfEnoughMatches
            ))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"theIndexName\",\"type\":\"facet\",\"facet\":\"theFacet\",\"facetQuery\":\"theFacetQuery\",\"query\":\"theQuery\",\"maxFacetHits\":50}],\"strategy\":\"stopIfEnoughMatches\"}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search for multiple mixed requests in multiple indices with minimal parameters
    func testSearchTest11() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(
                requests: [
                    SearchQuery.searchForHits(SearchForHits(indexName: "theIndexName")),
                    SearchQuery
                        .searchForFacets(SearchForFacets(
                            facet: "theFacet",
                            indexName: "theIndexName2",
                            type: SearchTypeFacet.facet
                        )),
                    SearchQuery.searchForHits(
                        SearchForHits(indexName: "theIndexName", type: SearchTypeDefault.`default`)
                    ),
                ],
                strategy: SearchStrategy.stopIfEnoughMatches
            ))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"theIndexName\"},{\"indexName\":\"theIndexName2\",\"type\":\"facet\",\"facet\":\"theFacet\"},{\"indexName\":\"theIndexName\",\"type\":\"default\"}],\"strategy\":\"stopIfEnoughMatches\"}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search for multiple mixed requests in multiple indices with all parameters
    func testSearchTest12() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(
                requests: [SearchQuery.searchForFacets(SearchForFacets(
                    query: "theQuery",
                    facet: "theFacet",
                    indexName: "theIndexName",
                    facetQuery: "theFacetQuery",
                    maxFacetHits: 50,
                    type: SearchTypeFacet.facet
                )), SearchQuery.searchForHits(SearchForHits(
                    query: "myQuery",
                    hitsPerPage: 50,
                    indexName: "theIndexName",
                    type: SearchTypeDefault.`default`
                ))],
                strategy: SearchStrategy.stopIfEnoughMatches
            ))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"theIndexName\",\"type\":\"facet\",\"facet\":\"theFacet\",\"facetQuery\":\"theFacetQuery\",\"query\":\"theQuery\",\"maxFacetHits\":50},{\"indexName\":\"theIndexName\",\"query\":\"myQuery\",\"hitsPerPage\":50,\"type\":\"default\"}],\"strategy\":\"stopIfEnoughMatches\"}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search filters accept all of the possible shapes
    func testSearchTest13() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery.searchForHits(SearchForHits(
                    facetFilters: SearchFacetFilters.string("mySearch:filters"),
                    optionalFilters: SearchOptionalFilters.string("mySearch:filters"),
                    numericFilters: SearchNumericFilters.string("mySearch:filters"),
                    tagFilters: SearchTagFilters.string("mySearch:filters"),
                    reRankingApplyFilter: SearchReRankingApplyFilter.string("mySearch:filters"),
                    indexName: "theIndexName"
                )),
                SearchQuery.searchForHits(SearchForHits(
                    facetFilters: SearchFacetFilters.arrayOfSearchFacetFilters([
                        SearchFacetFilters.string("mySearch:filters"),
                        SearchFacetFilters.arrayOfSearchFacetFilters([
                            SearchFacetFilters.string("mySearch:filters"),
                            SearchFacetFilters.arrayOfSearchFacetFilters(
                                [SearchFacetFilters.string("mySearch:filters")]
                            ),
                        ]),
                    ]),
                    optionalFilters: SearchOptionalFilters.arrayOfSearchOptionalFilters([
                        SearchOptionalFilters.string("mySearch:filters"),
                        SearchOptionalFilters
                            .arrayOfSearchOptionalFilters([SearchOptionalFilters.string("mySearch:filters")]),
                    ]),
                    numericFilters: SearchNumericFilters.arrayOfSearchNumericFilters([
                        SearchNumericFilters.string("mySearch:filters"),
                        SearchNumericFilters.arrayOfSearchNumericFilters(
                            [SearchNumericFilters.string("mySearch:filters")]
                        ),
                    ]),
                    tagFilters: SearchTagFilters.arrayOfSearchTagFilters([
                        SearchTagFilters.string("mySearch:filters"),
                        SearchTagFilters.arrayOfSearchTagFilters([SearchTagFilters.string("mySearch:filters")]),
                    ]),
                    reRankingApplyFilter: SearchReRankingApplyFilter.arrayOfSearchReRankingApplyFilter([
                        SearchReRankingApplyFilter.string("mySearch:filters"),
                        SearchReRankingApplyFilter
                            .arrayOfSearchReRankingApplyFilter([SearchReRankingApplyFilter.string("mySearch:filters")]),
                    ]),
                    indexName: "theIndexName"
                )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"theIndexName\",\"facetFilters\":\"mySearch:filters\",\"reRankingApplyFilter\":\"mySearch:filters\",\"tagFilters\":\"mySearch:filters\",\"numericFilters\":\"mySearch:filters\",\"optionalFilters\":\"mySearch:filters\"},{\"indexName\":\"theIndexName\",\"facetFilters\":[\"mySearch:filters\",[\"mySearch:filters\",[\"mySearch:filters\"]]],\"reRankingApplyFilter\":[\"mySearch:filters\",[\"mySearch:filters\"]],\"tagFilters\":[\"mySearch:filters\",[\"mySearch:filters\"]],\"numericFilters\":[\"mySearch:filters\",[\"mySearch:filters\"]],\"optionalFilters\":[\"mySearch:filters\",[\"mySearch:filters\"]]}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search filters end to end
    func testSearchTest14() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery.searchForHits(SearchForHits(
                    filters: "editor:'visual studio' OR editor:neovim",
                    indexName: "cts_e2e_search_facet"
                )),
                SearchQuery.searchForHits(SearchForHits(
                    facetFilters: SearchFacetFilters.arrayOfSearchFacetFilters([
                        SearchFacetFilters.string("editor:'visual studio'"),
                        SearchFacetFilters.string("editor:neovim"),
                    ]),
                    indexName: "cts_e2e_search_facet"
                )),
                SearchQuery.searchForHits(SearchForHits(
                    facetFilters: SearchFacetFilters.arrayOfSearchFacetFilters([
                        SearchFacetFilters.string("editor:'visual studio'"),
                        SearchFacetFilters.arrayOfSearchFacetFilters([SearchFacetFilters.string("editor:neovim")]),
                    ]),
                    indexName: "cts_e2e_search_facet"
                )),
                SearchQuery.searchForHits(SearchForHits(
                    facetFilters: SearchFacetFilters.arrayOfSearchFacetFilters([
                        SearchFacetFilters.string("editor:'visual studio'"),
                        SearchFacetFilters.arrayOfSearchFacetFilters([
                            SearchFacetFilters.string("editor:neovim"),
                            SearchFacetFilters.arrayOfSearchFacetFilters([SearchFacetFilters.string("editor:goland")]),
                        ]),
                    ]),
                    indexName: "cts_e2e_search_facet"
                )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"indexName\":\"cts_e2e_search_facet\",\"filters\":\"editor:'visual studio' OR editor:neovim\"},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",\"editor:neovim\"]},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",[\"editor:neovim\"]]},{\"indexName\":\"cts_e2e_search_facet\",\"facetFilters\":[\"editor:'visual studio'\",[\"editor:neovim\",[\"editor:goland\"]]]}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search with all search parameters
    func testSearchTest15() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponses<Hit>> = try await client
            .searchWithHTTPInfo(searchMethodParams: SearchMethodParams(requests: [
                SearchQuery
                    .searchForHits(SearchForHits(
                        query: "",
                        similarQuery: "",
                        filters: "",
                        facetFilters: SearchFacetFilters.arrayOfSearchFacetFilters([SearchFacetFilters.string("")]),
                        optionalFilters: SearchOptionalFilters
                            .arrayOfSearchOptionalFilters([SearchOptionalFilters.string("")]),
                        numericFilters: SearchNumericFilters
                            .arrayOfSearchNumericFilters([SearchNumericFilters.string("")]),
                        tagFilters: SearchTagFilters.arrayOfSearchTagFilters([SearchTagFilters.string("")]),
                        sumOrFiltersScores: true,
                        restrictSearchableAttributes: [""],
                        facets: [""],
                        facetingAfterDistinct: true,
                        page: 0,
                        offset: 0,
                        length: 1,
                        aroundLatLng: "",
                        aroundLatLngViaIP: true,
                        aroundRadius: SearchAroundRadius.searchAroundRadiusAll(SearchAroundRadiusAll.all),
                        aroundPrecision: SearchAroundPrecision.int(0),
                        minimumAroundRadius: 1,
                        insideBoundingBox: SearchInsideBoundingBox.arrayOfArrayOfDouble([
                            [47.3165, 4.9665, 47.3424, 5.0201],
                            [40.9234, 2.1185, 38.643, 1.9916],
                        ]),
                        insidePolygon: [
                            [47.3165, 4.9665, 47.3424, 5.0201, 47.32, 4.9],
                            [40.9234, 2.1185, 38.643, 1.9916, 39.2587, 2.0104],
                        ],
                        naturalLanguages: [SearchSupportedLanguage.fr],
                        ruleContexts: [""],
                        personalizationImpact: 0,
                        userToken: "",
                        getRankingInfo: true,
                        synonyms: true,
                        clickAnalytics: true,
                        analytics: true,
                        analyticsTags: [""],
                        percentileComputation: true,
                        enableABTest: true,
                        attributesToRetrieve: [""],
                        ranking: [""],
                        relevancyStrictness: 0,
                        attributesToHighlight: [""],
                        attributesToSnippet: [""],
                        highlightPreTag: "",
                        highlightPostTag: "",
                        snippetEllipsisText: "",
                        restrictHighlightAndSnippetArrays: true,
                        hitsPerPage: 1,
                        minWordSizefor1Typo: 0,
                        minWordSizefor2Typos: 0,
                        typoTolerance: SearchTypoTolerance.searchTypoToleranceEnum(SearchTypoToleranceEnum.min),
                        allowTyposOnNumericTokens: true,
                        disableTypoToleranceOnAttributes: [""],
                        ignorePlurals: SearchIgnorePlurals.bool(false),
                        removeStopWords: SearchRemoveStopWords.bool(true),
                        queryLanguages: [SearchSupportedLanguage.fr],
                        decompoundQuery: true,
                        enableRules: true,
                        enablePersonalization: true,
                        queryType: SearchQueryType.prefixAll,
                        removeWordsIfNoResults: SearchRemoveWordsIfNoResults.allOptional,
                        advancedSyntax: true,
                        optionalWords: SearchOptionalWords.arrayOfString([""]),
                        disableExactOnAttributes: [""],
                        exactOnSingleWordQuery: SearchExactOnSingleWordQuery.attribute,
                        alternativesAsExact: [SearchAlternativesAsExact.multiWordsSynonym],
                        advancedSyntaxFeatures: [SearchAdvancedSyntaxFeatures.exactPhrase],
                        distinct: SearchDistinct.int(0),
                        replaceSynonymsInHighlight: true,
                        minProximity: 1,
                        responseFields: [""],
                        maxValuesPerFacet: 0,
                        sortFacetValuesBy: "",
                        attributeCriteriaComputedByMinProximity: true,
                        renderingContent: SearchRenderingContent(facetOrdering: SearchFacetOrdering(
                            facets: SearchFacets(order: ["a", "b"]),
                            values: ["a": SearchValue(order: ["b"], sortRemainingBy: SearchSortRemainingBy.count)]
                        )),
                        enableReRanking: true,
                        reRankingApplyFilter: SearchReRankingApplyFilter
                            .arrayOfSearchReRankingApplyFilter([SearchReRankingApplyFilter.string("")]),
                        indexName: "theIndexName",
                        type: SearchTypeDefault.`default`
                    )),
            ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"requests\":[{\"advancedSyntax\":true,\"advancedSyntaxFeatures\":[\"exactPhrase\"],\"allowTyposOnNumericTokens\":true,\"alternativesAsExact\":[\"multiWordsSynonym\"],\"analytics\":true,\"analyticsTags\":[\"\"],\"aroundLatLng\":\"\",\"aroundLatLngViaIP\":true,\"aroundPrecision\":0,\"aroundRadius\":\"all\",\"attributeCriteriaComputedByMinProximity\":true,\"attributesToHighlight\":[\"\"],\"attributesToRetrieve\":[\"\"],\"attributesToSnippet\":[\"\"],\"clickAnalytics\":true,\"decompoundQuery\":true,\"disableExactOnAttributes\":[\"\"],\"disableTypoToleranceOnAttributes\":[\"\"],\"distinct\":0,\"enableABTest\":true,\"enablePersonalization\":true,\"enableReRanking\":true,\"enableRules\":true,\"exactOnSingleWordQuery\":\"attribute\",\"facetFilters\":[\"\"],\"facetingAfterDistinct\":true,\"facets\":[\"\"],\"filters\":\"\",\"getRankingInfo\":true,\"highlightPostTag\":\"\",\"highlightPreTag\":\"\",\"hitsPerPage\":1,\"ignorePlurals\":false,\"indexName\":\"theIndexName\",\"insideBoundingBox\":[[47.3165,4.9665,47.3424,5.0201],[40.9234,2.1185,38.643,1.9916]],\"insidePolygon\":[[47.3165,4.9665,47.3424,5.0201,47.32,4.9],[40.9234,2.1185,38.643,1.9916,39.2587,2.0104]],\"length\":1,\"maxValuesPerFacet\":0,\"minProximity\":1,\"minWordSizefor1Typo\":0,\"minWordSizefor2Typos\":0,\"minimumAroundRadius\":1,\"naturalLanguages\":[\"fr\"],\"numericFilters\":[\"\"],\"offset\":0,\"optionalFilters\":[\"\"],\"optionalWords\":[\"\"],\"page\":0,\"percentileComputation\":true,\"personalizationImpact\":0,\"query\":\"\",\"queryLanguages\":[\"fr\"],\"queryType\":\"prefixAll\",\"ranking\":[\"\"],\"reRankingApplyFilter\":[\"\"],\"relevancyStrictness\":0,\"removeStopWords\":true,\"removeWordsIfNoResults\":\"allOptional\",\"renderingContent\":{\"facetOrdering\":{\"facets\":{\"order\":[\"a\",\"b\"]},\"values\":{\"a\":{\"order\":[\"b\"],\"sortRemainingBy\":\"count\"}}}},\"replaceSynonymsInHighlight\":true,\"responseFields\":[\"\"],\"restrictHighlightAndSnippetArrays\":true,\"restrictSearchableAttributes\":[\"\"],\"ruleContexts\":[\"\"],\"similarQuery\":\"\",\"snippetEllipsisText\":\"\",\"sortFacetValuesBy\":\"\",\"sumOrFiltersScores\":true,\"synonyms\":true,\"tagFilters\":[\"\"],\"type\":\"default\",\"typoTolerance\":\"min\",\"userToken\":\"\"}]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/*/queries")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// get searchDictionaryEntries results with minimal parameters
    func testSearchDictionaryEntriesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchDictionaryEntriesWithHTTPInfo(
            dictionaryName: DictionaryType.stopwords,
            searchDictionaryEntriesParams: SearchDictionaryEntriesParams(query: "about")
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"about\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/stopwords/search")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// get searchDictionaryEntries results with all parameters
    func testSearchDictionaryEntriesTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchDictionaryEntriesWithHTTPInfo(
            dictionaryName: DictionaryType.compounds,
            searchDictionaryEntriesParams: SearchDictionaryEntriesParams(
                query: "foo",
                page: 4,
                hitsPerPage: 2,
                language: SearchSupportedLanguage.fr
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"foo\",\"page\":4,\"hitsPerPage\":2,\"language\":\"fr\"}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/compounds/search")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// get searchForFacetValues results with minimal parameters
    func testSearchForFacetValuesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchForFacetValuesWithHTTPInfo(indexName: "indexName", facetName: "facetName")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/facets/facetName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// get searchForFacetValues results with all parameters
    func testSearchForFacetValuesTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchForFacetValuesWithHTTPInfo(
            indexName: "indexName",
            facetName: "facetName",
            searchForFacetValuesRequest: SearchForFacetValuesRequest(
                params: "query=foo&facetFilters=['bar']",
                facetQuery: "foo",
                maxFacetHits: 42
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"params\":\"query=foo&facetFilters=['bar']\",\"facetQuery\":\"foo\",\"maxFacetHits\":42}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/facets/facetName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchRules
    func testSearchRulesTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchRulesWithHTTPInfo(
            indexName: "cts_e2e_browse",
            searchRulesParams: SearchRulesParams(query: "zorro")
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"zorro\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/cts_e2e_browse/rules/search")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search with minimal parameters
    func testSearchSingleIndexTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client
            .searchSingleIndexWithHTTPInfo(indexName: "indexName")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search with special characters in indexName
    func testSearchSingleIndexTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client
            .searchSingleIndexWithHTTPInfo(indexName: "cts_e2e_space in index")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/cts_e2e_space%20in%20index/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search with searchParams
    func testSearchSingleIndexTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                query: "myQuery",
                facetFilters: SearchFacetFilters.arrayOfSearchFacetFilters([SearchFacetFilters.string("tags:algolia")])
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"myQuery\",\"facetFilters\":[\"tags:algolia\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// single search retrieve snippets
    func testSearchSingleIndexTest3() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "cts_e2e_browse",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                query: "batman mask of the phantasm",
                attributesToRetrieve: ["*"],
                attributesToSnippet: ["*:20"]
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"query\":\"batman mask of the phantasm\",\"attributesToRetrieve\":[\"*\"],\"attributesToSnippet\":[\"*:20\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/cts_e2e_browse/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// query
    func testSearchSingleIndexTest4() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(query: "phone"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"phone\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filters
    func testSearchSingleIndexTest5() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(filters: "country:US AND price.gross < 2.0"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"filters\":\"country:US AND price.gross < 2.0\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// distinct
    func testSearchSingleIndexTest6() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(distinct: SearchDistinct.bool(true)))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"distinct\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filtersNumeric
    func testSearchSingleIndexTest7() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(filters: "price < 10"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"filters\":\"price < 10\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filtersTimestamp
    func testSearchSingleIndexTest8() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(
                    SearchSearchParamsObject(filters: "NOT date_timestamp:1514764800 TO 1546300799")
                )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"filters\":\"NOT date_timestamp:1514764800 TO 1546300799\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filtersSumOrFiltersScoresFalse
    func testSearchSingleIndexTest9() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                filters: "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
                sumOrFiltersScores: false
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"filters\":\"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)\",\"sumOrFiltersScores\":false}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filtersSumOrFiltersScoresTrue
    func testSearchSingleIndexTest10() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                filters: "(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)",
                sumOrFiltersScores: true
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"filters\":\"(company:Google<score=3> OR company:Amazon<score=2> OR company:Facebook<score=1>)\",\"sumOrFiltersScores\":true}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filtersStephenKing
    func testSearchSingleIndexTest11() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(filters: "author:\"Stephen King\""))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"filters\":\"author:\\\"Stephen King\\\"\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filtersNotTags
    func testSearchSingleIndexTest12() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(filters: "NOT _tags:non-fiction"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"filters\":\"NOT _tags:non-fiction\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// facetFiltersList
    func testSearchSingleIndexTest13() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(
                    facetFilters: SearchFacetFilters
                        .arrayOfSearchFacetFilters([
                            SearchFacetFilters.string("publisher:Penguin"),
                            SearchFacetFilters.arrayOfSearchFacetFilters([
                                SearchFacetFilters.string("author:Stephen King"),
                                SearchFacetFilters.string("genre:Horror"),
                            ]),
                        ])
                ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facetFilters\":[\"publisher:Penguin\",[\"author:Stephen King\",\"genre:Horror\"]]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// facetFiltersNeg
    func testSearchSingleIndexTest14() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(
                    facetFilters: SearchFacetFilters
                        .string("category:-Ebook")
                ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facetFilters\":\"category:-Ebook\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// filtersAndFacetFilters
    func testSearchSingleIndexTest15() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                filters: "(author:\"Stephen King\" OR genre:\"Horror\")",
                facetFilters: SearchFacetFilters
                    .arrayOfSearchFacetFilters([SearchFacetFilters.string("publisher:Penguin")])
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"filters\":\"(author:\\\"Stephen King\\\" OR genre:\\\"Horror\\\")\",\"facetFilters\":[\"publisher:Penguin\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// aroundLatLng
    func testSearchSingleIndexTest16() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(aroundLatLng: "40.71, -74.01"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"aroundLatLng\":\"40.71, -74.01\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// aroundLatLngViaIP
    func testSearchSingleIndexTest17() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(aroundLatLngViaIP: true))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"aroundLatLngViaIP\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// aroundRadius
    func testSearchSingleIndexTest18() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                aroundLatLng: "40.71, -74.01",
                aroundRadius: SearchAroundRadius.int(1_000_000)
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"aroundLatLng\":\"40.71, -74.01\",\"aroundRadius\":1000000}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// insideBoundingBox
    func testSearchSingleIndexTest19() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(
                    insideBoundingBox: SearchInsideBoundingBox
                        .arrayOfArrayOfDouble([[
                            49.067996905313834,
                            65.73828125,
                            25.905859247243498,
                            128.8046875,
                        ]])
                ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"insideBoundingBox\":[[49.067996905313834,65.73828125,25.905859247243498,128.8046875]]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// insidePolygon
    func testSearchSingleIndexTest20() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(insidePolygon: [[
                42.01,
                -124.31,
                48.835509470063045,
                -124.40453125000005,
                45.01082951668149,
                -65.95726562500005,
                31.247243545293433,
                -81.06578125000004,
                25.924152577235226,
                -97.68234374999997,
                32.300311895879545,
                -117.54828125,
            ]]))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"insidePolygon\":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// insidePolygon
    func testSearchSingleIndexTest21() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(insidePolygon: [[
                42.01,
                -124.31,
                48.835509470063045,
                -124.40453125000005,
                45.01082951668149,
                -65.95726562500005,
                31.247243545293433,
                -81.06578125000004,
                25.924152577235226,
                -97.68234374999997,
                32.300311895879545,
                -117.54828125,
            ]]))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"insidePolygon\":[[42.01,-124.31,48.835509470063045,-124.40453125000005,45.01082951668149,-65.95726562500005,31.247243545293433,-81.06578125000004,25.924152577235226,-97.68234374999997,32.300311895879545,-117.54828125]]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// optionalFilters
    func testSearchSingleIndexTest22() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(
                    optionalFilters: SearchOptionalFilters
                        .arrayOfSearchOptionalFilters([SearchOptionalFilters.string("can_deliver_quickly:true")])
                ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"optionalFilters\":[\"can_deliver_quickly:true\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// optionalFiltersMany
    func testSearchSingleIndexTest23() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(
                    optionalFilters: SearchOptionalFilters
                        .arrayOfSearchOptionalFilters([
                            SearchOptionalFilters.string("brand:Apple<score=3>"),
                            SearchOptionalFilters.string("brand:Samsung<score=2>"),
                            SearchOptionalFilters.string("brand:-Huawei"),
                        ])
                ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"optionalFilters\":[\"brand:Apple<score=3>\",\"brand:Samsung<score=2>\",\"brand:-Huawei\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// optionalFiltersSimple
    func testSearchSingleIndexTest24() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(
                    optionalFilters: SearchOptionalFilters
                        .arrayOfSearchOptionalFilters([
                            SearchOptionalFilters.string("brand:Apple<score=2>"),
                            SearchOptionalFilters.string("type:tablet"),
                        ])
                ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"optionalFilters\":[\"brand:Apple<score=2>\",\"type:tablet\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// restrictSearchableAttributes
    func testSearchSingleIndexTest25() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(restrictSearchableAttributes: ["title_fr"]))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"restrictSearchableAttributes\":[\"title_fr\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getRankingInfo
    func testSearchSingleIndexTest26() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(getRankingInfo: true))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"getRankingInfo\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// clickAnalytics
    func testSearchSingleIndexTest27() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(clickAnalytics: true))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"clickAnalytics\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// clickAnalyticsUserToken
    func testSearchSingleIndexTest28() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                userToken: "user-1",
                clickAnalytics: true
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"clickAnalytics\":true,\"userToken\":\"user-1\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// enablePersonalization
    func testSearchSingleIndexTest29() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                userToken: "user-1",
                enablePersonalization: true
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"enablePersonalization\":true,\"userToken\":\"user-1\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// userToken
    func testSearchSingleIndexTest30() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(userToken: "user-1"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"userToken\":\"user-1\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// analyticsTag
    func testSearchSingleIndexTest31() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(analyticsTags: ["YOUR_ANALYTICS_TAG"]))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"analyticsTags\":[\"YOUR_ANALYTICS_TAG\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// facetFiltersUsers
    func testSearchSingleIndexTest32() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams
                .searchSearchParamsObject(SearchSearchParamsObject(
                    facetFilters: SearchFacetFilters
                        .arrayOfSearchFacetFilters([
                            SearchFacetFilters.string("user:user42"),
                            SearchFacetFilters.string("user:public"),
                        ])
                ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facetFilters\":[\"user:user42\",\"user:public\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// buildTheQuery
    func testSearchSingleIndexTest33() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response: Response<SearchResponse<Hit>> = try await client.searchSingleIndexWithHTTPInfo(
            indexName: "indexName",
            searchParams: SearchSearchParams.searchSearchParamsObject(SearchSearchParamsObject(
                filters: "categoryPageId: Men's Clothing",
                analyticsTags: ["mens-clothing"],
                hitsPerPage: 50
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"filters\":\"categoryPageId: Men's Clothing\",\"hitsPerPage\":50,\"analyticsTags\":[\"mens-clothing\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchSynonyms with minimal parameters
    func testSearchSynonymsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchSynonymsWithHTTPInfo(indexName: "indexName")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/synonyms/search")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchSynonyms with all parameters
    func testSearchSynonymsTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchSynonymsWithHTTPInfo(
            indexName: "indexName",
            searchSynonymsParams: SearchSynonymsParams(
                query: "myQuery",
                type: SynonymType.altcorrection1,
                page: 10,
                hitsPerPage: 10
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"myQuery\",\"type\":\"altcorrection1\",\"page\":10,\"hitsPerPage\":10}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/indexName/synonyms/search")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchUserIds
    func testSearchUserIdsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchUserIdsWithHTTPInfo(searchUserIdsParams: SearchUserIdsParams(
            query: "test",
            clusterName: "theClusterName",
            page: 5,
            hitsPerPage: 10
        ))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"test\",\"clusterName\":\"theClusterName\",\"page\":5,\"hitsPerPage\":10}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/clusters/mapping/search")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// get setDictionarySettings results with minimal parameters
    func testSetDictionarySettingsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client
            .setDictionarySettingsWithHTTPInfo(
                dictionarySettingsParams: DictionarySettingsParams(disableStandardEntries: StandardEntries(plurals: [
                    "fr": false,
                    "en": false,
                    "ru": true,
                ]))
            )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"disableStandardEntries\":{\"plurals\":{\"fr\":false,\"en\":false,\"ru\":true}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/*/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// get setDictionarySettings results with all parameters
    func testSetDictionarySettingsTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client
            .setDictionarySettingsWithHTTPInfo(
                dictionarySettingsParams: DictionarySettingsParams(disableStandardEntries: StandardEntries(
                    plurals: ["fr": false, "en": false, "ru": true],
                    stopwords: ["fr": false],
                    compounds: ["ru": true]
                ))
            )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"disableStandardEntries\":{\"plurals\":{\"fr\":false,\"en\":false,\"ru\":true},\"stopwords\":{\"fr\":false},\"compounds\":{\"ru\":true}}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/dictionaries/*/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// minimal parameters
    func testSetSettingsTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "cts_e2e_settings",
            indexSettings: IndexSettings(paginationLimitedTo: 10),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"paginationLimitedTo\":10}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/cts_e2e_settings/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// boolean typoTolerance
    func testSetSettingsTest1() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(typoTolerance: SearchTypoTolerance.bool(true)),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"typoTolerance\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// enum typoTolerance
    func testSetSettingsTest2() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                typoTolerance: SearchTypoTolerance
                    .searchTypoToleranceEnum(SearchTypoToleranceEnum.min)
            ),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"typoTolerance\":\"min\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// ignorePlurals
    func testSetSettingsTest3() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(ignorePlurals: SearchIgnorePlurals.bool(true)),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"ignorePlurals\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// list of string ignorePlurals
    func testSetSettingsTest4() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                ignorePlurals: SearchIgnorePlurals
                    .arrayOfSearchSupportedLanguage([SearchSupportedLanguage.fr])
            ),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"ignorePlurals\":[\"fr\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// removeStopWords boolean
    func testSetSettingsTest5() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(removeStopWords: SearchRemoveStopWords.bool(true)),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"removeStopWords\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// removeStopWords list of string
    func testSetSettingsTest6() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                removeStopWords: SearchRemoveStopWords
                    .arrayOfSearchSupportedLanguage([SearchSupportedLanguage.fr])
            ),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"removeStopWords\":[\"fr\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// boolean distinct
    func testSetSettingsTest7() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(distinct: SearchDistinct.bool(true)),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"distinct\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// integer distinct
    func testSetSettingsTest8() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(distinct: SearchDistinct.int(1)),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"distinct\":1}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// distinct company
    func testSetSettingsTest9() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(attributeForDistinct: "company", distinct: SearchDistinct.bool(true))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributeForDistinct\":\"company\",\"distinct\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// distinct design
    func testSetSettingsTest10() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(attributeForDistinct: "design", distinct: SearchDistinct.bool(true))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributeForDistinct\":\"design\",\"distinct\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// distinct true
    func testSetSettingsTest11() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(distinct: SearchDistinct.bool(true))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"distinct\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// distinct section
    func testSetSettingsTest12() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(attributeForDistinct: "section", distinct: SearchDistinct.bool(true))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributeForDistinct\":\"section\",\"distinct\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// attributesForFaceting allergens
    func testSetSettingsTest13() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(attributesForFaceting: ["allergens"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributesForFaceting\":[\"allergens\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// attributesForFaceting categoryPageId
    func testSetSettingsTest14() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(attributesForFaceting: ["searchable(categoryPageId)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributesForFaceting\":[\"searchable(categoryPageId)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// unretrievableAttributes
    func testSetSettingsTest15() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(unretrievableAttributes: ["visible_by"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"unretrievableAttributes\":[\"visible_by\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// attributesForFaceting user restricted data
    func testSetSettingsTest16() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(attributesForFaceting: ["filterOnly(visible_by)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributesForFaceting\":[\"filterOnly(visible_by)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// attributesForFaceting optional filters
    func testSetSettingsTest17() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(attributesForFaceting: ["can_deliver_quickly", "restaurant"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributesForFaceting\":[\"can_deliver_quickly\",\"restaurant\"]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// attributesForFaceting redirect index
    func testSetSettingsTest18() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(attributesForFaceting: ["query_terms"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributesForFaceting\":[\"query_terms\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// attributesForFaceting multiple consequences
    func testSetSettingsTest19() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(attributesForFaceting: ["director"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributesForFaceting\":[\"director\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// attributesForFaceting in-depth optional filters
    func testSetSettingsTest20() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(attributesForFaceting: ["filterOnly(brand)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"attributesForFaceting\":[\"filterOnly(brand)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// mode neuralSearch
    func testSetSettingsTest21() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(mode: SearchMode.neuralSearch)
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"mode\":\"neuralSearch\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// mode keywordSearch
    func testSetSettingsTest22() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(mode: SearchMode.keywordSearch)
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"mode\":\"keywordSearch\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributes same priority
    func testSetSettingsTest23() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(searchableAttributes: ["title,comments", "ingredients"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"searchableAttributes\":[\"title,comments\",\"ingredients\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributes higher priority
    func testSetSettingsTest24() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(searchableAttributes: ["title", "ingredients"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"searchableAttributes\":[\"title\",\"ingredients\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// customRanking retweets
    func testSetSettingsTest25() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(customRanking: ["desc(retweets)", "desc(likes)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"customRanking\":[\"desc(retweets)\",\"desc(likes)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// customRanking boosted
    func testSetSettingsTest26() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(customRanking: ["desc(boosted)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"customRanking\":[\"desc(boosted)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// customRanking pageviews
    func testSetSettingsTest27() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(customRanking: ["desc(pageviews)", "desc(comments)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"customRanking\":[\"desc(pageviews)\",\"desc(comments)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// customRanking applying search parameters for a specific query
    func testSetSettingsTest28() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                attributesForFaceting: ["city, country"],
                customRanking: ["desc(nb_airline_liaisons)"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"customRanking\":[\"desc(nb_airline_liaisons)\"],\"attributesForFaceting\":[\"city, country\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// customRanking rounded pageviews
    func testSetSettingsTest29() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(customRanking: ["desc(rounded_pageviews)", "desc(comments)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"customRanking\":[\"desc(rounded_pageviews)\",\"desc(comments)\"]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// customRanking price
    func testSetSettingsTest30() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(customRanking: ["desc(price)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"customRanking\":[\"desc(price)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// ranking exhaustive
    func testSetSettingsTest31() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(ranking: [
                "desc(price)",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
                "custom",
            ])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"ranking\":[\"desc(price)\",\"typo\",\"geo\",\"words\",\"filters\",\"proximity\",\"attribute\",\"exact\",\"custom\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// ranking standard replica
    func testSetSettingsTest32() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(ranking: ["desc(post_date_timestamp)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"ranking\":[\"desc(post_date_timestamp)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// ranking virtual replica
    func testSetSettingsTest33() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(customRanking: ["desc(post_date_timestamp)"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"customRanking\":[\"desc(post_date_timestamp)\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// customRanking and ranking sort alphabetically
    func testSetSettingsTest34() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                customRanking: ["asc(textual_attribute)"],
                ranking: ["custom", "typo", "geo", "words", "filters", "proximity", "attribute", "exact"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"customRanking\":[\"asc(textual_attribute)\"],\"ranking\":[\"custom\",\"typo\",\"geo\",\"words\",\"filters\",\"proximity\",\"attribute\",\"exact\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// relevancyStrictness
    func testSetSettingsTest35() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(customRanking: ["asc(textual_attribute)"], relevancyStrictness: 0)
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"customRanking\":[\"asc(textual_attribute)\"],\"relevancyStrictness\":0}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// create replica index
    func testSetSettingsTest36() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(replicas: ["products_price_desc"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"replicas\":[\"products_price_desc\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// unlink replica index
    func testSetSettingsTest37() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(replicas: [""])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"replicas\":[\"\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// forwardToReplicas
    func testSetSettingsTest38() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(searchableAttributes: ["name", "description"]),
            forwardToReplicas: true
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"searchableAttributes\":[\"name\",\"description\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"forwardToReplicas\":\"true\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// maxValuesPerFacet
    func testSetSettingsTest39() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(maxValuesPerFacet: 1000)
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"maxValuesPerFacet\":1000}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// maxFacetHits
    func testSetSettingsTest40() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(maxFacetHits: 1000)
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"maxFacetHits\":1000}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// attributesForFaceting complex
    func testSetSettingsTest41() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "<YOUR_INDEX_NAME>",
            indexSettings: IndexSettings(attributesForFaceting: [
                "actor",
                "filterOnly(category)",
                "searchable(publisher)",
            ])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"attributesForFaceting\":[\"actor\",\"filterOnly(category)\",\"searchable(publisher)\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/%3CYOUR_INDEX_NAME%3E/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// ranking closest dates
    func testSetSettingsTest42() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(ranking: [
                "asc(date_timestamp)",
                "typo",
                "geo",
                "words",
                "filters",
                "proximity",
                "attribute",
                "exact",
                "custom",
            ])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"ranking\":[\"asc(date_timestamp)\",\"typo\",\"geo\",\"words\",\"filters\",\"proximity\",\"attribute\",\"exact\",\"custom\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributes item variation
    func testSetSettingsTest43() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(searchableAttributes: ["design", "type", "color"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"searchableAttributes\":[\"design\",\"type\",\"color\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributes around location
    func testSetSettingsTest44() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                searchableAttributes: ["name", "country", "code", "iata_code"],
                customRanking: ["desc(links_count)"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"searchableAttributes\":[\"name\",\"country\",\"code\",\"iata_code\"],\"customRanking\":[\"desc(links_count)\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributes around location
    func testSetSettingsTest45() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                searchableAttributes: ["name", "country", "code", "iata_code"],
                customRanking: ["desc(links_count)"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"searchableAttributes\":[\"name\",\"country\",\"code\",\"iata_code\"],\"customRanking\":[\"desc(links_count)\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// disableTypoToleranceOnAttributes
    func testSetSettingsTest46() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(disableTypoToleranceOnAttributes: ["serial_number"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"disableTypoToleranceOnAttributes\":[\"serial_number\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// everything
    func testSetSettingsTest47() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                attributesForFaceting: ["algolia"],
                replicas: [""],
                paginationLimitedTo: 0,
                unretrievableAttributes: ["foo"],
                disableTypoToleranceOnWords: ["algolia"],
                attributesToTransliterate: ["algolia"],
                camelCaseAttributes: ["algolia"],
                decompoundedAttributes: ["algolia": "aloglia"],
                indexLanguages: [SearchSupportedLanguage.fr],
                disablePrefixOnAttributes: ["algolia"],
                allowCompressionOfIntegerArray: true,
                numericAttributesForFiltering: ["algolia"],
                separatorsToIndex: "bar",
                searchableAttributes: ["foo"],
                userData: ["user": "data"],
                customNormalization: ["algolia": ["aloglia": "aglolia"]],
                attributeForDistinct: "test",
                maxFacetHits: 20,
                keepDiacriticsOnCharacters: "abc",
                customRanking: ["algolia"],
                attributesToRetrieve: ["algolia"],
                ranking: ["geo"],
                relevancyStrictness: 10,
                attributesToHighlight: ["algolia"],
                attributesToSnippet: ["algolia"],
                highlightPreTag: "<span>",
                highlightPostTag: "</span>",
                snippetEllipsisText: "---",
                restrictHighlightAndSnippetArrays: true,
                hitsPerPage: 10,
                minWordSizefor1Typo: 5,
                minWordSizefor2Typos: 11,
                typoTolerance: SearchTypoTolerance.bool(false),
                allowTyposOnNumericTokens: true,
                disableTypoToleranceOnAttributes: ["algolia"],
                ignorePlurals: SearchIgnorePlurals.bool(false),
                removeStopWords: SearchRemoveStopWords.bool(false),
                queryLanguages: [SearchSupportedLanguage.fr],
                decompoundQuery: false,
                enableRules: true,
                enablePersonalization: true,
                queryType: SearchQueryType.prefixLast,
                removeWordsIfNoResults: SearchRemoveWordsIfNoResults.lastWords,
                mode: SearchMode.neuralSearch,
                semanticSearch: SearchSemanticSearch(eventSources: ["foo"]),
                advancedSyntax: true,
                optionalWords: SearchOptionalWords.arrayOfString(["myspace"]),
                disableExactOnAttributes: ["algolia"],
                exactOnSingleWordQuery: SearchExactOnSingleWordQuery.attribute,
                alternativesAsExact: [SearchAlternativesAsExact.singleWordSynonym],
                advancedSyntaxFeatures: [SearchAdvancedSyntaxFeatures.exactPhrase],
                distinct: SearchDistinct.int(3),
                replaceSynonymsInHighlight: true,
                minProximity: 6,
                responseFields: ["algolia"],
                maxValuesPerFacet: 30,
                sortFacetValuesBy: "date",
                attributeCriteriaComputedByMinProximity: true,
                renderingContent: SearchRenderingContent(facetOrdering: SearchFacetOrdering(
                    facets: SearchFacets(order: ["a", "b"]),
                    values: ["a": SearchValue(order: ["b"], sortRemainingBy: SearchSortRemainingBy.count)]
                )),
                enableReRanking: false,
                reRankingApplyFilter: SearchReRankingApplyFilter.string("mySearch:filters")
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"advancedSyntax\":true,\"advancedSyntaxFeatures\":[\"exactPhrase\"],\"allowCompressionOfIntegerArray\":true,\"allowTyposOnNumericTokens\":true,\"alternativesAsExact\":[\"singleWordSynonym\"],\"attributeCriteriaComputedByMinProximity\":true,\"attributeForDistinct\":\"test\",\"attributesForFaceting\":[\"algolia\"],\"attributesToHighlight\":[\"algolia\"],\"attributesToRetrieve\":[\"algolia\"],\"attributesToSnippet\":[\"algolia\"],\"attributesToTransliterate\":[\"algolia\"],\"camelCaseAttributes\":[\"algolia\"],\"customNormalization\":{\"algolia\":{\"aloglia\":\"aglolia\"}},\"customRanking\":[\"algolia\"],\"decompoundQuery\":false,\"decompoundedAttributes\":{\"algolia\":\"aloglia\"},\"disableExactOnAttributes\":[\"algolia\"],\"disablePrefixOnAttributes\":[\"algolia\"],\"disableTypoToleranceOnAttributes\":[\"algolia\"],\"disableTypoToleranceOnWords\":[\"algolia\"],\"distinct\":3,\"enablePersonalization\":true,\"enableReRanking\":false,\"enableRules\":true,\"exactOnSingleWordQuery\":\"attribute\",\"highlightPreTag\":\"<span>\",\"highlightPostTag\":\"</span>\",\"hitsPerPage\":10,\"ignorePlurals\":false,\"indexLanguages\":[\"fr\"],\"keepDiacriticsOnCharacters\":\"abc\",\"maxFacetHits\":20,\"maxValuesPerFacet\":30,\"minProximity\":6,\"minWordSizefor1Typo\":5,\"minWordSizefor2Typos\":11,\"mode\":\"neuralSearch\",\"numericAttributesForFiltering\":[\"algolia\"],\"optionalWords\":[\"myspace\"],\"paginationLimitedTo\":0,\"queryLanguages\":[\"fr\"],\"queryType\":\"prefixLast\",\"ranking\":[\"geo\"],\"reRankingApplyFilter\":\"mySearch:filters\",\"relevancyStrictness\":10,\"removeStopWords\":false,\"removeWordsIfNoResults\":\"lastWords\",\"renderingContent\":{\"facetOrdering\":{\"facets\":{\"order\":[\"a\",\"b\"]},\"values\":{\"a\":{\"order\":[\"b\"],\"sortRemainingBy\":\"count\"}}}},\"replaceSynonymsInHighlight\":true,\"replicas\":[\"\"],\"responseFields\":[\"algolia\"],\"restrictHighlightAndSnippetArrays\":true,\"searchableAttributes\":[\"foo\"],\"semanticSearch\":{\"eventSources\":[\"foo\"]},\"separatorsToIndex\":\"bar\",\"snippetEllipsisText\":\"---\",\"sortFacetValuesBy\":\"date\",\"typoTolerance\":false,\"unretrievableAttributes\":[\"foo\"],\"userData\":{\"user\":\"data\"}}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributesWithCustomRankingsAndAttributesForFaceting
    func testSetSettingsTest48() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                attributesForFaceting: ["searchable(brand)", "type", "categories", "price"],
                searchableAttributes: ["brand", "name", "categories", "unordered(description)"],
                customRanking: ["desc(popularity)"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"searchableAttributes\":[\"brand\",\"name\",\"categories\",\"unordered(description)\"],\"customRanking\":[\"desc(popularity)\"],\"attributesForFaceting\":[\"searchable(brand)\",\"type\",\"categories\",\"price\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributesProductReferenceSuffixes
    func testSetSettingsTest49() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(searchableAttributes: [
                "name",
                "product_reference",
                "product_reference_suffixes",
            ])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"searchableAttributes\":[\"name\",\"product_reference\",\"product_reference_suffixes\"]}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// queryLanguageAndIgnorePlurals
    func testSetSettingsTest50() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(
                ignorePlurals: SearchIgnorePlurals.bool(true),
                queryLanguages: [SearchSupportedLanguage.en]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"queryLanguages\":[\"en\"],\"ignorePlurals\":true}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributesInMovies
    func testSetSettingsTest51() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "movies",
            indexSettings: IndexSettings(searchableAttributes: ["title_eng", "title_fr", "title_es"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"searchableAttributes\":[\"title_eng\",\"title_fr\",\"title_es\"]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/movies/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// disablePrefixOnAttributes
    func testSetSettingsTest52() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(disablePrefixOnAttributes: ["serial_number"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"disablePrefixOnAttributes\":[\"serial_number\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// disableTypoToleranceOnAttributes
    func testSetSettingsTest53() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(disableTypoToleranceOnAttributes: ["serial_number"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"disableTypoToleranceOnAttributes\":[\"serial_number\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributesSimpleExample
    func testSetSettingsTest54() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(searchableAttributes: ["serial_number"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"searchableAttributes\":[\"serial_number\"]}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchableAttributesSimpleExampleAlt
    func testSetSettingsTest55() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.setSettingsWithHTTPInfo(
            indexName: "theIndexName",
            indexSettings: IndexSettings(searchableAttributes: ["serial_number", "serial_number_suffixes"])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"searchableAttributes\":[\"serial_number\",\"serial_number_suffixes\"]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/indexes/theIndexName/settings")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// updateApiKey
    func testUpdateApiKeyTest() async throws {
        let configuration = try SearchClientConfiguration(
            appID: SearchClientRequestsTests.APPLICATION_ID,
            apiKey: SearchClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = SearchClient(configuration: configuration, transporter: transporter)

        let response = try await client.updateApiKeyWithHTTPInfo(
            key: "ALGOLIA_API_KEY",
            apiKey: ApiKey(
                acl: [Acl.search, Acl.addObject],
                maxHitsPerQuery: 20,
                maxQueriesPerIPPerHour: 100,
                validity: 300
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData =
            "{\"acl\":[\"search\",\"addObject\"],\"validity\":300,\"maxQueriesPerIPPerHour\":100,\"maxHitsPerQuery\":20}"
                .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/keys/ALGOLIA_API_KEY")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }
}
