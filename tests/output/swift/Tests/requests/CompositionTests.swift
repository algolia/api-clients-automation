// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import XCTest

import Utils

@testable import Composition
@testable import Core

final class CompositionClientRequestsTests: XCTestCase {
    static let APPLICATION_ID = "my_application_id"
    static let API_KEY = "my_api_key"

    /// search
    func testSearchTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response: Response<CompositionSearchResponse<CompositionHit>> = try await client.searchWithHTTPInfo(
            compositionID: "foo",
            requestBody: CompositionRequestBody(params: CompositionParams(query: "batman"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"params\":{\"query\":\"batman\"}}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/run")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchForFacetValues
    func testSearchForFacetValuesTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchForFacetValuesWithHTTPInfo(
            compositionID: "foo",
            facetName: "brand",
            searchForFacetValuesRequest: CompositionSearchForFacetValuesRequest(
                params: CompositionSearchForFacetValuesParams(maxFacetHits: 10)
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"params\":{\"maxFacetHits\":10}}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/facets/brand/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }
}
