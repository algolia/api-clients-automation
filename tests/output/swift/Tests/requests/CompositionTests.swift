// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import XCTest

import Utils

@testable import Composition
@testable import Core

final class CompositionClientRequestsTests: XCTestCase {
    static let APPLICATION_ID = "my_application_id"
    static let API_KEY = "my_api_key"

    /// allow del method for a custom path with minimal parameters
    func testCustomDeleteTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customDeleteWithHTTPInfo(path: "test/minimal")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/minimal")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow del method for a custom path with all parameters
    func testCustomDeleteTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customDeleteWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("parameters")]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// allow get method for a custom path with minimal parameters
    func testCustomGetTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customGetWithHTTPInfo(path: "test/minimal")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/minimal")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow get method for a custom path with all parameters
    func testCustomGetTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customGetWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("parameters with space")]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters%20with%20space\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions should be escaped too
    func testCustomGetTest2() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customGetWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("to be overriden")],
            requestOptions: RequestOptions(
                headers: ["x-header-1": "spaces are left alone"],
                queryParameters: ["query": "parameters with space", "and an array": ["array", "with spaces"]]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        let expectedQueryParameters = try XCTUnwrap(
            "{\"query\":\"parameters%20with%20space\",\"and%20an%20array\":\"array%2Cwith%20spaces\"}"
                .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)

        let expectedHeaders = try XCTUnwrap("{\"x-header-1\":\"spaces are left alone\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// allow post method for a custom path with minimal parameters
    func testCustomPostTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(path: "test/minimal")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/minimal")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow post method for a custom path with all parameters
    func testCustomPostTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("parameters")],
            body: ["body": "parameters"]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"body\":\"parameters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions can override default query parameters
    func testCustomPostTest2() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["query": "myQueryParameter"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"myQueryParameter\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions merges query parameters with default ones
    func testCustomPostTest3() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["query2": "myQueryParameter"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\",\"query2\":\"myQueryParameter\"}"
            .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions can override default headers
    func testCustomPostTest4() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                headers: ["x-algolia-api-key": "ALGOLIA_API_KEY"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)

        let expectedHeaders = try XCTUnwrap("{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// requestOptions merges headers with default ones
    func testCustomPostTest5() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                headers: ["x-algolia-api-key": "ALGOLIA_API_KEY"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)

        let expectedHeaders = try XCTUnwrap("{\"x-algolia-api-key\":\"ALGOLIA_API_KEY\"}".data(using: .utf8))
        let expectedHeadersMap = try CodableHelper.jsonDecoder.decode([String: String?].self, from: expectedHeaders)

        let echoResponseHeaders = try XCTUnwrap(echoResponse.headers)
        for header in expectedHeadersMap {
            XCTAssertEqual(echoResponseHeaders[header.key.capitalized], header.value)
        }
    }

    /// requestOptions queryParameters accepts booleans
    func testCustomPostTest6() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["isItWorking": true]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\",\"isItWorking\":\"true\"}"
            .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions queryParameters accepts integers
    func testCustomPostTest7() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["myParam": 2]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\",\"myParam\":\"2\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions queryParameters accepts list of string
    func testCustomPostTest8() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["myParam": ["b and c", "d"]]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\",\"myParam\":\"b%20and%20c%2Cd\"}"
            .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions queryParameters accepts list of booleans
    func testCustomPostTest9() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["myParam": [true, true, false]]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\",\"myParam\":\"true%2Ctrue%2Cfalse\"}"
            .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// requestOptions queryParameters accepts list of integers
    func testCustomPostTest10() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(
            path: "test/requestOptions",
            parameters: ["query": AnyCodable("parameters")],
            body: ["facet": "filters"],
            requestOptions: RequestOptions(
                queryParameters: ["myParam": [1, 2]]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"facet\":\"filters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/requestOptions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\",\"myParam\":\"1%2C2\"}"
            .data(using: .utf8)
        )
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// allow put method for a custom path with minimal parameters
    func testCustomPutTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPutWithHTTPInfo(path: "test/minimal")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/minimal")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// allow put method for a custom path with all parameters
    func testCustomPutTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPutWithHTTPInfo(
            path: "test/all",
            parameters: ["query": AnyCodable("parameters")],
            body: ["body": "parameters"]
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"body\":\"parameters\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/test/all")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        let expectedQueryParameters = try XCTUnwrap("{\"query\":\"parameters\"}".data(using: .utf8))
        let expectedQueryParametersMap = try CodableHelper.jsonDecoder.decode(
            [String: String?].self,
            from: expectedQueryParameters
        )

        XCTAssertEqual(echoResponse.queryParameters, expectedQueryParametersMap)
    }

    /// deleteComposition
    func testDeleteCompositionTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteCompositionWithHTTPInfo(compositionID: "1234")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/compositions/1234")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// deleteCompositionRule
    func testDeleteCompositionRuleTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.deleteCompositionRuleWithHTTPInfo(compositionID: "1234", objectID: "5678")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/compositions/1234/rules/5678")
        XCTAssertEqual(echoResponse.method, HTTPMethod.delete)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getComposition
    func testGetCompositionTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.getCompositionWithHTTPInfo(compositionID: "foo")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getRule
    func testGetRuleTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.getRuleWithHTTPInfo(compositionID: "foo", objectID: "123")
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/rules/123")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// getTask
    func testGetTaskTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.getTaskWithHTTPInfo(compositionID: "foo", taskID: Int64(42))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/task/42")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// listCompositions
    func testListCompositionsTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.listCompositionsWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/compositions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// listCompositions
    func testListCompositionsTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.listCompositionsWithHTTPInfo()
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        XCTAssertNil(echoResponse.originalBodyData)

        XCTAssertEqual(echoResponse.path, "/1/compositions")
        XCTAssertEqual(echoResponse.method, HTTPMethod.get)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// multipleBatch
    func testMultipleBatchTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.multipleBatchWithHTTPInfo(batchParams: CompositionBatchParams(requests: [
            CompositionMultipleBatchRequest(
                action: CompositionAction.upsert,
                body: BatchCompositionAction.composition(Composition(
                    objectID: "foo",
                    name: "my first composition",
                    behavior: CompositionBehavior(
                        injection: Injection(
                            main: CompositionMain(
                                source: CompositionSource(search: CompositionSourceSearch(index: "bar"))
                            )
                        )
                    )
                ))
            ),
            CompositionMultipleBatchRequest(
                action: CompositionAction.delete,
                body: BatchCompositionAction.deleteCompositionAction(DeleteCompositionAction(objectID: "baz"))
            ),
        ]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"upsert\",\"body\":{\"objectID\":\"foo\",\"name\":\"my first composition\",\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"bar\"}}}}}}},{\"action\":\"delete\",\"body\":{\"objectID\":\"baz\"}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/*/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// multipleBatch
    func testMultipleBatchTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client
            .multipleBatchWithHTTPInfo(batchParams: CompositionBatchParams(requests: [CompositionMultipleBatchRequest(
                action: CompositionAction.upsert,
                body: BatchCompositionAction.composition(Composition(
                    objectID: "my-external-injection-compo",
                    name: "my first composition",
                    behavior: CompositionBehavior(injection: Injection(
                        main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(index: "foo"))),
                        injectedItems: [InjectedItem(
                            key: "my-unique-external-group-key",
                            source: InjectedItemSource.externalSource(ExternalSource(external: External(
                                index: "foo",
                                params: BaseInjectionQueryParameters(filters: "brand:adidas"),
                                ordering: ExternalOrdering.userDefined
                            ))),
                            position: 2,
                            length: 1
                        )]
                    ))
                ))
            )]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"upsert\",\"body\":{\"objectID\":\"my-external-injection-compo\",\"name\":\"my first composition\",\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\"}}},\"injectedItems\":[{\"key\":\"my-unique-external-group-key\",\"source\":{\"external\":{\"index\":\"foo\",\"ordering\":\"userDefined\",\"params\":{\"filters\":\"brand:adidas\"}}},\"position\":2,\"length\":1}]}}}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/*/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// multipleBatch
    func testMultipleBatchTest2() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client
            .multipleBatchWithHTTPInfo(batchParams: CompositionBatchParams(requests: [CompositionMultipleBatchRequest(
                action: CompositionAction.upsert,
                body: BatchCompositionAction.composition(Composition(
                    objectID: "my-metadata-compo",
                    name: "my composition",
                    behavior: CompositionBehavior(injection: Injection(
                        main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(
                            index: "foo",
                            params: MainInjectionQueryParameters(filters: "brand:adidas")
                        ))),
                        injectedItems: [
                            InjectedItem(
                                key: "my-unique-group-key",
                                source: InjectedItemSource.compositionSearchSource(
                                    CompositionSearchSource(search: Search(
                                        index: "foo",
                                        params: BaseInjectionQueryParameters(filters: "brand:adidas")
                                    ))
                                ),
                                position: 2,
                                length: 1,
                                metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(
                                    addItemKey: true,
                                    extra: [
                                        "my-string": AnyCodable("string"),
                                        "my-bool": true,
                                        "my-number": 42,
                                        "my-object": ["sub-key": "sub-value"],
                                    ]
                                ))
                            ),
                            InjectedItem(
                                key: "my-unique-group-key",
                                source: InjectedItemSource.compositionSearchSource(
                                    CompositionSearchSource(search: Search(
                                        index: "foo",
                                        params: BaseInjectionQueryParameters(filters: "brand:puma")
                                    ))
                                ),
                                position: 5,
                                length: 5,
                                metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(
                                    addItemKey: true,
                                    extra: [
                                        "my-string": AnyCodable("string"),
                                        "my-bool": true,
                                        "my-number": 42,
                                        "my-object": ["sub-key": "sub-value"],
                                    ]
                                ))
                            ),
                        ]
                    ))
                ))
            )]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"upsert\",\"body\":{\"objectID\":\"my-metadata-compo\",\"name\":\"my composition\",\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:adidas\"}}}},\"injectedItems\":[{\"key\":\"my-unique-group-key\",\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:adidas\"}}},\"position\":2,\"length\":1,\"metadata\":{\"hits\":{\"addItemKey\":true,\"extra\":{\"my-string\":\"string\",\"my-bool\":true,\"my-number\":42,\"my-object\":{\"sub-key\":\"sub-value\"}}}}},{\"key\":\"my-unique-group-key\",\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:puma\"}}},\"position\":5,\"length\":5,\"metadata\":{\"hits\":{\"addItemKey\":true,\"extra\":{\"my-string\":\"string\",\"my-bool\":true,\"my-number\":42,\"my-object\":{\"sub-key\":\"sub-value\"}}}}}]}}}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/*/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// multipleBatch
    func testMultipleBatchTest3() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client
            .multipleBatchWithHTTPInfo(batchParams: CompositionBatchParams(requests: [CompositionMultipleBatchRequest(
                action: CompositionAction.upsert,
                body: BatchCompositionAction.composition(Composition(
                    objectID: "my-compo",
                    name: "my composition",
                    behavior: CompositionBehavior(injection: Injection(
                        main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(index: "foo"))),
                        injectedItems: [InjectedItem(
                            key: "my-unique-injected-item-key",
                            source: InjectedItemSource
                                .compositionSearchSource(CompositionSearchSource(search: Search(index: "foo"))),
                            position: 2,
                            length: 1
                        )],
                        deduplication: Deduplication(positioning: DedupPositioning.highest)
                    ))
                ))
            )]))
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"upsert\",\"body\":{\"objectID\":\"my-compo\",\"name\":\"my composition\",\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\"}}},\"injectedItems\":[{\"key\":\"my-unique-injected-item-key\",\"source\":{\"search\":{\"index\":\"foo\"}},\"position\":2,\"length\":1}],\"deduplication\":{\"positioning\":\"highest\"}}}}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/*/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// putComposition
    func testPutCompositionTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.putCompositionWithHTTPInfo(
            compositionID: "1234",
            composition: Composition(
                objectID: "1234",
                name: "my first composition",
                behavior: CompositionBehavior(injection: Injection(
                    main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(index: "foo"))),
                    injectedItems: [InjectedItem(
                        key: "my-unique-group-key",
                        source: InjectedItemSource
                            .compositionSearchSource(CompositionSearchSource(search: Search(index: "foo"))),
                        position: 2,
                        length: 1
                    )]
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"1234\",\"name\":\"my first composition\",\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\"}}},\"injectedItems\":[{\"key\":\"my-unique-group-key\",\"source\":{\"search\":{\"index\":\"foo\"}},\"position\":2,\"length\":1}]}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/1234")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// putComposition
    func testPutCompositionTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.putCompositionWithHTTPInfo(
            compositionID: "my-external-injection-compo",
            composition: Composition(
                objectID: "my-external-injection-compo",
                name: "my first composition",
                behavior: CompositionBehavior(injection: Injection(
                    main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(index: "foo"))),
                    injectedItems: [InjectedItem(
                        key: "my-unique-external-group-key",
                        source: InjectedItemSource.externalSource(ExternalSource(external: External(
                            index: "foo",
                            params: BaseInjectionQueryParameters(filters: "brand:adidas"),
                            ordering: ExternalOrdering.userDefined
                        ))),
                        position: 2,
                        length: 1
                    )]
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"my-external-injection-compo\",\"name\":\"my first composition\",\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\"}}},\"injectedItems\":[{\"key\":\"my-unique-external-group-key\",\"source\":{\"external\":{\"index\":\"foo\",\"ordering\":\"userDefined\",\"params\":{\"filters\":\"brand:adidas\"}}},\"position\":2,\"length\":1}]}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/my-external-injection-compo")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// putComposition
    func testPutCompositionTest2() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.putCompositionWithHTTPInfo(
            compositionID: "my-metadata-compo",
            composition: Composition(
                objectID: "my-metadata-compo",
                name: "my composition",
                behavior: CompositionBehavior(injection: Injection(
                    main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(
                        index: "foo",
                        params: MainInjectionQueryParameters(filters: "brand:adidas")
                    ))),
                    injectedItems: [
                        InjectedItem(
                            key: "my-unique-group-key",
                            source: InjectedItemSource.compositionSearchSource(CompositionSearchSource(search: Search(
                                index: "foo",
                                params: BaseInjectionQueryParameters(filters: "brand:adidas")
                            ))),
                            position: 2,
                            length: 1,
                            metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(
                                addItemKey: true,
                                extra: [
                                    "my-string": AnyCodable("string"),
                                    "my-bool": true,
                                    "my-number": 42,
                                    "my-object": ["sub-key": "sub-value"],
                                ]
                            ))
                        ),
                        InjectedItem(
                            key: "my-unique-group-key",
                            source: InjectedItemSource.compositionSearchSource(CompositionSearchSource(search: Search(
                                index: "foo",
                                params: BaseInjectionQueryParameters(filters: "brand:puma")
                            ))),
                            position: 5,
                            length: 5,
                            metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(
                                addItemKey: true,
                                extra: [
                                    "my-string": AnyCodable("string"),
                                    "my-bool": true,
                                    "my-number": 42,
                                    "my-object": ["sub-key": "sub-value"],
                                ]
                            ))
                        ),
                    ]
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"my-metadata-compo\",\"name\":\"my composition\",\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:adidas\"}}}},\"injectedItems\":[{\"key\":\"my-unique-group-key\",\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:adidas\"}}},\"position\":2,\"length\":1,\"metadata\":{\"hits\":{\"addItemKey\":true,\"extra\":{\"my-string\":\"string\",\"my-bool\":true,\"my-number\":42,\"my-object\":{\"sub-key\":\"sub-value\"}}}}},{\"key\":\"my-unique-group-key\",\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:puma\"}}},\"position\":5,\"length\":5,\"metadata\":{\"hits\":{\"addItemKey\":true,\"extra\":{\"my-string\":\"string\",\"my-bool\":true,\"my-number\":42,\"my-object\":{\"sub-key\":\"sub-value\"}}}}}]}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/my-metadata-compo")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// putComposition
    func testPutCompositionTest3() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.putCompositionWithHTTPInfo(
            compositionID: "my-compo",
            composition: Composition(
                objectID: "my-compo",
                name: "my composition",
                behavior: CompositionBehavior(injection: Injection(
                    main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(
                        index: "foo",
                        params: MainInjectionQueryParameters(filters: "brand:adidas")
                    ))),
                    injectedItems: [InjectedItem(
                        key: "my-unique-injected-item-key",
                        source: InjectedItemSource
                            .compositionSearchSource(CompositionSearchSource(search: Search(index: "foo"))),
                        position: 2,
                        length: 1
                    )],
                    deduplication: Deduplication(positioning: DedupPositioning.highest)
                ))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"my-compo\",\"name\":\"my composition\",\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:adidas\"}}}},\"injectedItems\":[{\"key\":\"my-unique-injected-item-key\",\"source\":{\"search\":{\"index\":\"foo\"}},\"position\":2,\"length\":1}],\"deduplication\":{\"positioning\":\"highest\"}}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/my-compo")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// putCompositionRule
    func testPutCompositionRuleTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.putCompositionRuleWithHTTPInfo(
            compositionID: "compositionID",
            objectID: "ruleID",
            compositionRule: CompositionRule(
                objectID: "ruleID",
                conditions: [CompositionCondition(pattern: "test", anchoring: CompositionAnchoring.`is`)],
                consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(
                    main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(index: "foo"))),
                    injectedItems: [InjectedItem(
                        key: "my-unique-group-from-rule-key",
                        source: InjectedItemSource
                            .compositionSearchSource(CompositionSearchSource(search: Search(index: "foo"))),
                        position: 2,
                        length: 1
                    )]
                )))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"ruleID\",\"conditions\":[{\"anchoring\":\"is\",\"pattern\":\"test\"}],\"consequence\":{\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\"}}},\"injectedItems\":[{\"key\":\"my-unique-group-from-rule-key\",\"source\":{\"search\":{\"index\":\"foo\"}},\"position\":2,\"length\":1}]}}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/compositionID/rules/ruleID")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// putCompositionRule
    func testPutCompositionRuleTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.putCompositionRuleWithHTTPInfo(
            compositionID: "compositionID",
            objectID: "rule-with-metadata",
            compositionRule: CompositionRule(
                objectID: "rule-with-metadata",
                conditions: [CompositionCondition(pattern: "test", anchoring: CompositionAnchoring.`is`)],
                consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(
                    main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(index: "foo"))),
                    injectedItems: [InjectedItem(
                        key: "my-unique-group-from-rule-key",
                        source: InjectedItemSource.compositionSearchSource(CompositionSearchSource(search: Search(
                            index: "foo",
                            params: BaseInjectionQueryParameters(filters: "brand:adidas")
                        ))),
                        position: 2,
                        length: 1,
                        metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(
                            addItemKey: true,
                            extra: [
                                "my-string": AnyCodable("string"),
                                "my-bool": true,
                                "my-number": 42,
                                "my-object": ["sub-key": "sub-value"],
                            ]
                        ))
                    )]
                )))
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"rule-with-metadata\",\"conditions\":[{\"anchoring\":\"is\",\"pattern\":\"test\"}],\"consequence\":{\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\"}}},\"injectedItems\":[{\"key\":\"my-unique-group-from-rule-key\",\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:adidas\"}}},\"position\":2,\"length\":1,\"metadata\":{\"hits\":{\"addItemKey\":true,\"extra\":{\"my-string\":\"string\",\"my-bool\":true,\"my-number\":42,\"my-object\":{\"sub-key\":\"sub-value\"}}}}}]}}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/compositionID/rules/rule-with-metadata")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// putCompositionRule
    func testPutCompositionRuleTest2() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.putCompositionRuleWithHTTPInfo(
            compositionID: "compositionID",
            objectID: "rule-with-exernal-source",
            compositionRule: CompositionRule(
                objectID: "rule-with-exernal-source",
                conditions: [
                    CompositionCondition(pattern: "harry", anchoring: CompositionAnchoring.contains),
                    CompositionCondition(pattern: "potter", anchoring: CompositionAnchoring.contains),
                ],
                consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(
                    main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(
                        index: "my-index",
                        params: MainInjectionQueryParameters(filters: "brand:adidas")
                    ))),
                    injectedItems: [InjectedItem(
                        key: "my-unique-external-group-from-rule-key",
                        source: InjectedItemSource.externalSource(ExternalSource(external: External(
                            index: "my-index",
                            params: BaseInjectionQueryParameters(filters: "brand:adidas"),
                            ordering: ExternalOrdering.userDefined
                        ))),
                        position: 0,
                        length: 3
                    )]
                ))),
                description: "my description",
                enabled: true,
                validity: [CompositionTimeRange(from: Int64(1_704_063_600), until: Int64(1_704_083_600))],
                tags: ["tag1", "tag2"]
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"rule-with-exernal-source\",\"description\":\"my description\",\"tags\":[\"tag1\",\"tag2\"],\"enabled\":true,\"validity\":[{\"from\":1704063600,\"until\":1704083600}],\"conditions\":[{\"anchoring\":\"contains\",\"pattern\":\"harry\"},{\"anchoring\":\"contains\",\"pattern\":\"potter\"}],\"consequence\":{\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"my-index\",\"params\":{\"filters\":\"brand:adidas\"}}}},\"injectedItems\":[{\"key\":\"my-unique-external-group-from-rule-key\",\"source\":{\"external\":{\"index\":\"my-index\",\"params\":{\"filters\":\"brand:adidas\"},\"ordering\":\"userDefined\"}},\"position\":0,\"length\":3}]}}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/compositionID/rules/rule-with-exernal-source")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// putCompositionRule
    func testPutCompositionRuleTest3() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.putCompositionRuleWithHTTPInfo(
            compositionID: "compositionID",
            objectID: "rule-with-deduplication",
            compositionRule: CompositionRule(
                objectID: "rule-with-deduplication",
                conditions: [CompositionCondition(pattern: "harry", anchoring: CompositionAnchoring.contains)],
                consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(
                    main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(index: "my-index"))
                    ),
                    injectedItems: [InjectedItem(
                        key: "my-unique-injected-item-key",
                        source: InjectedItemSource
                            .compositionSearchSource(CompositionSearchSource(search: Search(index: "my-index"))),
                        position: 0,
                        length: 3
                    )],
                    deduplication: Deduplication(positioning: DedupPositioning.highestInjected)
                ))),
                description: "my description",
                enabled: true
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"objectID\":\"rule-with-deduplication\",\"description\":\"my description\",\"enabled\":true,\"conditions\":[{\"anchoring\":\"contains\",\"pattern\":\"harry\"}],\"consequence\":{\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"my-index\"}}},\"injectedItems\":[{\"key\":\"my-unique-injected-item-key\",\"source\":{\"search\":{\"index\":\"my-index\"}},\"position\":0,\"length\":3}],\"deduplication\":{\"positioning\":\"highestInjected\"}}}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/compositionID/rules/rule-with-deduplication")
        XCTAssertEqual(echoResponse.method, HTTPMethod.put)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveRules
    func testSaveRulesTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRulesWithHTTPInfo(
            compositionID: "foo",
            rules: CompositionRulesBatchParams(requests: [RulesMultipleBatchRequest(
                action: CompositionAction.upsert,
                body: RulesBatchCompositionAction.compositionRule(CompositionRule(
                    objectID: "123",
                    conditions: [CompositionCondition(pattern: "a")],
                    consequence: CompositionRuleConsequence(
                        behavior: CompositionBehavior(
                            injection: Injection(
                                main: CompositionMain(
                                    source: CompositionSource(
                                        search: CompositionSourceSearch(index: "<YOUR_INDEX_NAME>")
                                    )
                                )
                            )
                        )
                    )
                ))
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"upsert\",\"body\":{\"objectID\":\"123\",\"conditions\":[{\"pattern\":\"a\"}],\"consequence\":{\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"<YOUR_INDEX_NAME>\"}}}}}}}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/rules/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveRules
    func testSaveRulesTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRulesWithHTTPInfo(
            compositionID: "rule-with-metadata",
            rules: CompositionRulesBatchParams(requests: [RulesMultipleBatchRequest(
                action: CompositionAction.upsert,
                body: RulesBatchCompositionAction.compositionRule(CompositionRule(
                    objectID: "rule-with-metadata",
                    conditions: [CompositionCondition(pattern: "test", anchoring: CompositionAnchoring.`is`)],
                    consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(
                        main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(index: "foo"))),
                        injectedItems: [InjectedItem(
                            key: "my-unique-group-from-rule-key",
                            source: InjectedItemSource.compositionSearchSource(CompositionSearchSource(search: Search(
                                index: "foo",
                                params: BaseInjectionQueryParameters(filters: "brand:adidas")
                            ))),
                            position: 2,
                            length: 1,
                            metadata: InjectedItemMetadata(hits: InjectedItemHitsMetadata(
                                addItemKey: true,
                                extra: [
                                    "my-string": AnyCodable("string"),
                                    "my-bool": true,
                                    "my-number": 42,
                                    "my-object": ["sub-key": "sub-value"],
                                ]
                            ))
                        )]
                    )))
                ))
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"upsert\",\"body\":{\"objectID\":\"rule-with-metadata\",\"conditions\":[{\"anchoring\":\"is\",\"pattern\":\"test\"}],\"consequence\":{\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"foo\"}}},\"injectedItems\":[{\"key\":\"my-unique-group-from-rule-key\",\"source\":{\"search\":{\"index\":\"foo\",\"params\":{\"filters\":\"brand:adidas\"}}},\"position\":2,\"length\":1,\"metadata\":{\"hits\":{\"addItemKey\":true,\"extra\":{\"my-string\":\"string\",\"my-bool\":true,\"my-number\":42,\"my-object\":{\"sub-key\":\"sub-value\"}}}}}]}}}}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/rule-with-metadata/rules/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveRules
    func testSaveRulesTest2() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRulesWithHTTPInfo(
            compositionID: "rule-with-exernal-source",
            rules: CompositionRulesBatchParams(requests: [RulesMultipleBatchRequest(
                action: CompositionAction.upsert,
                body: RulesBatchCompositionAction.compositionRule(CompositionRule(
                    objectID: "rule-with-exernal-source",
                    conditions: [
                        CompositionCondition(pattern: "harry", anchoring: CompositionAnchoring.contains),
                        CompositionCondition(pattern: "potter", anchoring: CompositionAnchoring.contains),
                    ],
                    consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(
                        main: CompositionMain(source: CompositionSource(search: CompositionSourceSearch(
                            index: "my-index",
                            params: MainInjectionQueryParameters(filters: "brand:adidas")
                        ))),
                        injectedItems: [InjectedItem(
                            key: "my-unique-external-group-from-rule-key",
                            source: InjectedItemSource.externalSource(ExternalSource(external: External(
                                index: "my-index",
                                params: BaseInjectionQueryParameters(filters: "brand:adidas"),
                                ordering: ExternalOrdering.userDefined
                            ))),
                            position: 0,
                            length: 3
                        )]
                    ))),
                    description: "my description",
                    enabled: true,
                    validity: [CompositionTimeRange(from: Int64(1_704_063_600), until: Int64(1_704_083_600))],
                    tags: ["tag1", "tag2"]
                ))
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"upsert\",\"body\":{\"objectID\":\"rule-with-exernal-source\",\"description\":\"my description\",\"tags\":[\"tag1\",\"tag2\"],\"enabled\":true,\"validity\":[{\"from\":1704063600,\"until\":1704083600}],\"conditions\":[{\"anchoring\":\"contains\",\"pattern\":\"harry\"},{\"anchoring\":\"contains\",\"pattern\":\"potter\"}],\"consequence\":{\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"my-index\",\"params\":{\"filters\":\"brand:adidas\"}}}},\"injectedItems\":[{\"key\":\"my-unique-external-group-from-rule-key\",\"source\":{\"external\":{\"index\":\"my-index\",\"params\":{\"filters\":\"brand:adidas\"},\"ordering\":\"userDefined\"}},\"position\":0,\"length\":3}]}}}}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/rule-with-exernal-source/rules/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// saveRules
    func testSaveRulesTest3() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.saveRulesWithHTTPInfo(
            compositionID: "my-compo",
            rules: CompositionRulesBatchParams(requests: [RulesMultipleBatchRequest(
                action: CompositionAction.upsert,
                body: RulesBatchCompositionAction.compositionRule(CompositionRule(
                    objectID: "rule-with-deduplication",
                    conditions: [CompositionCondition(pattern: "harry", anchoring: CompositionAnchoring.contains)],
                    consequence: CompositionRuleConsequence(behavior: CompositionBehavior(injection: Injection(
                        main: CompositionMain(
                            source: CompositionSource(search: CompositionSourceSearch(index: "my-index"))
                        ),
                        injectedItems: [InjectedItem(
                            key: "my-unique-injected-item-key",
                            source: InjectedItemSource
                                .compositionSearchSource(CompositionSearchSource(search: Search(index: "my-index"))),
                            position: 0,
                            length: 3
                        )],
                        deduplication: Deduplication(positioning: DedupPositioning.highestInjected)
                    ))),
                    description: "my description",
                    enabled: true
                ))
            )])
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"requests\":[{\"action\":\"upsert\",\"body\":{\"objectID\":\"rule-with-deduplication\",\"description\":\"my description\",\"enabled\":true,\"conditions\":[{\"anchoring\":\"contains\",\"pattern\":\"harry\"}],\"consequence\":{\"behavior\":{\"injection\":{\"main\":{\"source\":{\"search\":{\"index\":\"my-index\"}}},\"injectedItems\":[{\"key\":\"my-unique-injected-item-key\",\"source\":{\"search\":{\"index\":\"my-index\"}},\"position\":0,\"length\":3}],\"deduplication\":{\"positioning\":\"highestInjected\"}}}}}}]}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/my-compo/rules/batch")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search
    func testSearchTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response: Response<CompositionSearchResponse<CompositionHit>> = try await client.searchWithHTTPInfo(
            compositionID: "foo",
            requestBody: RequestBody(params: CompositionParams(query: "batman"))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"params\":{\"query\":\"batman\"}}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/run")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// search
    func testSearchTest1() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response: Response<CompositionSearchResponse<CompositionHit>> = try await client.searchWithHTTPInfo(
            compositionID: "foo",
            requestBody: RequestBody(params: CompositionParams(
                query: "batman",
                injectedItems: ["my-unique-external-group-key": ExternalInjectedItem(items: [
                    ExternalInjection(objectID: "my-object-1"),
                    ExternalInjection(
                        objectID: "my-object-2",
                        metadata: [
                            "my-string": AnyCodable("string"),
                            "my-bool": true,
                            "my-number": 42,
                            "my-object": ["sub-key": "sub-value"],
                        ]
                    ),
                ])]
            ))
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"params\":{\"query\":\"batman\",\"injectedItems\":{\"my-unique-external-group-key\":{\"items\":[{\"objectID\":\"my-object-1\"},{\"objectID\":\"my-object-2\",\"metadata\":{\"my-string\":\"string\",\"my-bool\":true,\"my-number\":42,\"my-object\":{\"sub-key\":\"sub-value\"}}}]}}}}"
            .data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/run")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchCompositionRules
    func testSearchCompositionRulesTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchCompositionRulesWithHTTPInfo(
            compositionID: "foo",
            searchCompositionRulesParams: SearchCompositionRulesParams(query: "batman")
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"query\":\"batman\"}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/rules/search")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }

    /// searchForFacetValues
    func testSearchForFacetValuesTest() async throws {
        let configuration = try CompositionClientConfiguration(
            appID: CompositionClientRequestsTests.APPLICATION_ID,
            apiKey: CompositionClientRequestsTests.API_KEY
        )
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = CompositionClient(configuration: configuration, transporter: transporter)

        let response = try await client.searchForFacetValuesWithHTTPInfo(
            compositionID: "foo",
            facetName: "brand",
            searchForFacetValuesRequest: CompositionSearchForFacetValuesRequest(
                params: SearchForFacetValuesParams(maxFacetHits: 10)
            )
        )
        let responseBodyData = try XCTUnwrap(response.bodyData)
        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: responseBodyData)

        let echoResponseBodyData = try XCTUnwrap(echoResponse.originalBodyData)
        let echoResponseBodyJSON = try XCTUnwrap(echoResponseBodyData.jsonString)

        let expectedBodyData = "{\"params\":{\"maxFacetHits\":10}}".data(using: .utf8)
        let expectedBodyJSON = try XCTUnwrap(expectedBodyData?.jsonString)

        XCTAssertEqual(echoResponseBodyJSON, expectedBodyJSON)

        XCTAssertEqual(echoResponse.path, "/1/compositions/foo/facets/brand/query")
        XCTAssertEqual(echoResponse.method, HTTPMethod.post)

        XCTAssertNil(echoResponse.queryParameters)
    }
}
