// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import XCTest

import Utils

@testable import Core
@testable import Monitoring

final class MonitoringClientClientTests: XCTestCase {
    let APPLICATION_ID = "my_application_id"
    let API_KEY = "my_api_key"

    /// calls api with correct user agent
    func testCommonApiTest0() async throws {
        let configuration = try MonitoringClientConfiguration(appID: APPLICATION_ID, apiKey: API_KEY)
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = MonitoringClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(path: "1/test")

        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: XCTUnwrap(response.bodyData))

        let pattern = "^Algolia for Swift \\(\\d+\\.\\d+\\.\\d+(-?.*)?\\)(; [a-zA-Z. ]+ (\\(\\d+((\\.\\d+)?\\.\\d+)?(-?.*)?\\))?)*(; Monitoring (\\(\\d+\\.\\d+\\.\\d+(-?.*)?\\)))(; [a-zA-Z. ]+ (\\(\\d+((\\.\\d+)?\\.\\d+)?(-?.*)?\\))?)*$"
        XCTAssertNoThrow(
            try regexMatch(echoResponse.algoliaAgent, against: pattern),
            "Expected " + echoResponse.algoliaAgent + " to match the following regex: " + pattern
        )
    }

    /// the user agent contains the latest version
    func testCommonApiTest1() async throws {
        let configuration = try MonitoringClientConfiguration(appID: APPLICATION_ID, apiKey: API_KEY)
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = MonitoringClient(configuration: configuration, transporter: transporter)

        let response = try await client.customPostWithHTTPInfo(path: "1/test")

        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: XCTUnwrap(response.bodyData))

        let pattern = "^Algolia for Swift \\(9.30.0\\).*"
        XCTAssertNoThrow(
            try regexMatch(echoResponse.algoliaAgent, against: pattern),
            "Expected " + echoResponse.algoliaAgent + " to match the following regex: " + pattern
        )
    }

    /// use the correct host
    func testParametersTest0() async throws {
        let configuration = try MonitoringClientConfiguration(appID: "my-app-id", apiKey: "my-api-key")
        let transporter = Transporter(configuration: configuration, requestBuilder: EchoRequestBuilder())
        let client = MonitoringClient(configuration: configuration, transporter: transporter)
        let response = try await client.customDeleteWithHTTPInfo(path: "test")

        let echoResponse = try CodableHelper.jsonDecoder.decode(EchoResponse.self, from: XCTUnwrap(response.bodyData))

        XCTAssertEqual("status.algolia.com", echoResponse.host)
    }

    /// switch API key
    func testSetClientApiKeyTest0() async throws {
        let configuration = try MonitoringClientConfiguration(
            appID: "test-app-id",
            apiKey: "test-api-key",
            hosts: [RetryableHost(url: URL(string: "http://" +
                    (ProcessInfo.processInfo.environment["CI"] == "true" ? "localhost" : "host.docker.internal") + ":6683"
            )!)]
        )
        let transporter = Transporter(configuration: configuration)
        let client = MonitoringClient(configuration: configuration, transporter: transporter)
        do {
            let response = try await client.customGet(path: "check-api-key/1")

            XTCJSONEquals(received: response, expected: "{\"headerAPIKeyValue\":\"test-api-key\"}")
        }
        do {
            _ = try client.setClientApiKey(apiKey: "updated-api-key")
        }
        do {
            let response = try await client.customGet(path: "check-api-key/2")

            XTCJSONEquals(received: response, expected: "{\"headerAPIKeyValue\":\"updated-api-key\"}")
        }
    }
}
