// Code generated by OpenAPI Generator (https://openapi-generator.tech), manual changes will be lost - read more on
// https://github.com/algolia/api-clients-automation. DO NOT EDIT.
import XCTest

import DotEnv
import Utils

@testable import Analytics
@testable import Core

final class AnalyticsClientRequestsTestsE2E: XCTestCase {
    static var APPLICATION_ID = "my_application_id"
    static var API_KEY = "my_api_key"
    static var client: AnalyticsClient?

    override class func setUp() {
        if !(Bool(ProcessInfo.processInfo.environment["CI"] ?? "false") ?? false) {
            do {
                let currentFileURL = try XCTUnwrap(URL(string: #file))

                let packageDirectoryURL = currentFileURL
                    .deletingLastPathComponent()
                    .deletingLastPathComponent()
                    .deletingLastPathComponent()
                    .deletingLastPathComponent()
                    .deletingLastPathComponent()

                let dotEnvURL = packageDirectoryURL
                    .appendingPathComponent(".env")
                dump(dotEnvURL.absoluteString)
                try DotEnv.load(path: dotEnvURL.absoluteString, encoding: .utf8, overwrite: true)
            } catch {
                XCTFail("Unable to load .env file")
            }
        }

        do {
            self.APPLICATION_ID = try XCTUnwrap(ProcessInfo.processInfo.environment["ALGOLIA_APPLICATION_ID"])
        } catch {
            XCTFail("Please provide an `ALGOLIA_APPLICATION_ID` env var for e2e tests")
        }

        do {
            self.API_KEY = try XCTUnwrap(ProcessInfo.processInfo.environment["ALGOLIA_ADMIN_KEY"])
        } catch {
            XCTFail("Please provide an `ALGOLIA_ADMIN_KEY` env var for e2e tests")
        }

        self.client = try? AnalyticsClient(appID: self.APPLICATION_ID, apiKey: self.API_KEY, region: .us)
    }

    /// e2e with complex query params
    func testGetTopSearchesTest2() async throws {
        guard let client = AnalyticsClientRequestsTestsE2E.client else {
            XCTFail("E2E client is not initialized")
            return
        }

        let response = try await client.getTopSearchesWithHTTPInfo(index: "cts_e2e_space in index")
        let responseBody = try XCTUnwrap(response.body)
        let responseBodyData = try CodableHelper.jsonEncoder.encode(responseBody)

        let expectedBodyData = try XCTUnwrap("{\"searches\":[{\"search\":\"\",\"nbHits\":0}]}".data(using: .utf8))

        XCTLenientAssertEqual(received: responseBodyData, expected: expectedBodyData)

        XCTAssertEqual(response.statusCode, 200)
    }
}
